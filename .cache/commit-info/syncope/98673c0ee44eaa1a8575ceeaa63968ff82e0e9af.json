{"sha":"98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk4NjczYzBlZTQ0ZWFhMWE4NTc1Y2VlYWE2Mzk2OGZmODJlMGU5YWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-25T15:18:09Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-05-25T15:18:09Z"},"message":"[SYNCOPE-856] Added REST methods for bulk (de)provisioning group members + handles in console","tree":{"sha":"786698035699b93649741bd703079e119bf0a44a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/786698035699b93649741bd703079e119bf0a44a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a0a6ffb3dae2cae57679f278d965be0d65d0e30","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a0a6ffb3dae2cae57679f278d965be0d65d0e30","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a0a6ffb3dae2cae57679f278d965be0d65d0e30"}],"stats":{"total":598,"additions":516,"deletions":82},"files":[{"sha":"f2e8aecb2169f6e275f707d0aec1eb7149d77db9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -54,8 +54,8 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public abstract class AnyDirectoryPanel<A extends AnyTO>\n-        extends DirectoryPanel<A, AnyWrapper<A>, AnyDataProvider<A>, AbstractAnyRestClient<A, ?>> {\n+public abstract class AnyDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>\n+        extends DirectoryPanel<A, AnyWrapper<A>, AnyDataProvider<A>, E> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n@@ -82,7 +82,7 @@\n \n     protected final BaseModal<Serializable> utilityModal = new BaseModal<>(\"outer\");\n \n-    protected AnyDirectoryPanel(final String id, final Builder<A> builder) {\n+    protected AnyDirectoryPanel(final String id, final Builder<A, E> builder) {\n         super(id, builder);\n         this.realm = builder.realm;\n         this.type = builder.type;\n@@ -153,8 +153,8 @@ public interface AnyDirectoryPanelBuilder extends Serializable {\n         List<AnyTypeClassTO> getAnyTypeClassTOs();\n     }\n \n-    public abstract static class Builder<A extends AnyTO>\n-            extends DirectoryPanel.Builder<A, AnyWrapper<A>, AbstractAnyRestClient<A, ?>>\n+    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>\n+            extends DirectoryPanel.Builder<A, AnyWrapper<A>, E>\n             implements AnyDirectoryPanelBuilder {\n \n         private static final long serialVersionUID = -6828423611982275640L;\n@@ -173,7 +173,7 @@ public interface AnyDirectoryPanelBuilder extends Serializable {\n \n         public Builder(\n                 final List<AnyTypeClassTO> anyTypeClassTOs,\n-                final AbstractAnyRestClient<A, ?> restClient,\n+                final E restClient,\n                 final String type,\n                 final PageReference pageRef) {\n \n@@ -182,7 +182,7 @@ public Builder(\n             this.type = type;\n         }\n \n-        public Builder<A> setRealm(final String realm) {\n+        public Builder<A, E> setRealm(final String realm) {\n             this.realm = realm;\n             return this;\n         }"},{"sha":"d9c42f6ab9adf23059d49c34c090fcc81ea1ae10","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -56,7 +56,7 @@\n import org.apache.wicket.model.StringResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public class AnyObjectDirectoryPanel extends AnyDirectoryPanel<AnyObjectTO> {\n+public class AnyObjectDirectoryPanel extends AnyDirectoryPanel<AnyObjectTO, AnyObjectRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n@@ -240,7 +240,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n     }\n \n-    public static class Builder extends AnyDirectoryPanel.Builder<AnyObjectTO> {\n+    public static class Builder extends AnyDirectoryPanel.Builder<AnyObjectTO, AnyObjectRestClient> {\n \n         private static final long serialVersionUID = -6828423611982275641L;\n "},{"sha":"218db10c1c9361a2d72c57a0511cf15050c7bd40","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":42,"deletions":4,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n@@ -58,7 +59,7 @@\n import org.apache.wicket.model.StringResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO> {\n+public class GroupDirectoryPanel extends AnyDirectoryPanel<GroupTO, GroupRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n@@ -144,7 +145,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                     public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                         send(GroupDirectoryPanel.this, Broadcast.EXACT,\n                                 new AjaxWizard.EditItemActionEvent<>(new GroupWrapper(\n-                                        new GroupRestClient().read(model.getObject().getKey())), target));\n+                                        restClient.read(model.getObject().getKey())), target));\n                     }\n                 }, ActionType.EDIT, StandardEntitlement.GROUP_UPDATE).add(new ActionLink<GroupTO>() {\n \n@@ -207,7 +208,44 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                         }\n                         SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n                     }\n-                }, ActionType.DELETE, StandardEntitlement.GROUP_DELETE);\n+                }, ActionType.DELETE, StandardEntitlement.GROUP_DELETE).add(new ActionLink<GroupTO>() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n+                        try {\n+                            restClient.bulkMembersAction(model.getObject().getKey(), BulkMembersActionType.PROVISION);\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                            target.add(container);\n+                        } catch (SyncopeClientException e) {\n+                            LOG.error(\"While provisioning members of group {}\", model.getObject().getKey(), e);\n+                            error(StringUtils.isBlank(e.getMessage())\n+                                    ? e.getClass().getName() : e.getMessage());\n+                        }\n+                        SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                    }\n+                }, ActionType.PROVISION_MEMBERS,\n+                        String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).add(\n+                        new ActionLink<GroupTO>() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n+                        try {\n+                            restClient.bulkMembersAction(model.getObject().getKey(), BulkMembersActionType.DEPROVISION);\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                            target.add(container);\n+                        } catch (SyncopeClientException e) {\n+                            LOG.error(\"While provisioning members of group {}\", model.getObject().getKey(), e);\n+                            error(StringUtils.isBlank(e.getMessage())\n+                                    ? e.getClass().getName() : e.getMessage());\n+                        }\n+                        SyncopeConsoleSession.get().getNotificationPanel().refresh(target);\n+                    }\n+                }, ActionType.DEPROVISION_MEMBERS,\n+                        String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE));\n \n                 return panel.build(componentId);\n             }\n@@ -245,7 +283,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n         return columns;\n     }\n \n-    public static class Builder extends AnyDirectoryPanel.Builder<GroupTO> {\n+    public static class Builder extends AnyDirectoryPanel.Builder<GroupTO, GroupRestClient> {\n \n         private static final long serialVersionUID = 3844281520756293159L;\n "},{"sha":"88963a6bf6256e44313edb8ee184c39e4ee443d0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -57,7 +57,7 @@\n import org.apache.wicket.model.StringResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO> {\n+public class UserDirectoryPanel extends AnyDirectoryPanel<UserTO, UserRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n@@ -278,7 +278,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n         return columns;\n     }\n \n-    public static class Builder extends AnyDirectoryPanel.Builder<UserTO> {\n+    public static class Builder extends AnyDirectoryPanel.Builder<UserTO, UserRestClient> {\n \n         private static final long serialVersionUID = -6603152478702381900L;\n "},{"sha":"e9eb5bff76b2e2e5e26b1137bba3193383585ca6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSelectionDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -28,7 +28,8 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.wicket.PageReference;\n \n-public final class AnyObjectSelectionDirectoryPanel extends AnySelectionDirectoryPanel<AnyObjectTO> {\n+public final class AnyObjectSelectionDirectoryPanel\n+        extends AnySelectionDirectoryPanel<AnyObjectTO, AnyObjectRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271272L;\n \n@@ -61,7 +62,7 @@ public String getPrefDerivedAttributesView() {\n         return String.format(Constants.PREF_ANY_OBJECT_DER_ATTRS_VIEW, type);\n     }\n \n-    public static final class Builder extends AnySelectionDirectoryPanel.Builder<AnyObjectTO> {\n+    public static final class Builder extends AnySelectionDirectoryPanel.Builder<AnyObjectTO, AnyObjectRestClient> {\n \n         private static final long serialVersionUID = 5155811461060452446L;\n "},{"sha":"3a0815ce3c1180e606157d8363f923a3c5d76619","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -53,76 +53,77 @@\n import org.apache.wicket.model.ResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public abstract class AnySelectionDirectoryPanel<T extends AnyTO> extends AnyDirectoryPanel<T> {\n+public abstract class AnySelectionDirectoryPanel<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>\n+        extends AnyDirectoryPanel<A, E> {\n \n     private static final long serialVersionUID = -1100228004207271272L;\n \n-    private final Class<T> reference;\n+    private final Class<A> reference;\n \n     protected AnySelectionDirectoryPanel(\n-            final String id, final AnyDirectoryPanel.Builder<T> builder, final Class<T> reference) {\n+            final String id, final AnyDirectoryPanel.Builder<A, E> builder, final Class<A> reference) {\n \n         super(id, builder);\n         this.reference = reference;\n     }\n \n     @Override\n-    protected List<IColumn<T, String>> getColumns() {\n-        final List<IColumn<T, String>> columns = new ArrayList<>();\n+    protected List<IColumn<A, String>> getColumns() {\n+        final List<IColumn<A, String>> columns = new ArrayList<>();\n \n         for (String name : prefMan.getList(getRequest(), getPrefDetailsView())) {\n             final Field field = ReflectionUtils.findField(AnyObjectTO.class, name);\n \n             if (\"key\".equalsIgnoreCase(name)) {\n-                columns.add(new KeyPropertyColumn<T>(new ResourceModel(name, name), name, name));\n+                columns.add(new KeyPropertyColumn<A>(new ResourceModel(name, name), name, name));\n             } else if (reference == UserTO.class && \"token\".equalsIgnoreCase(name)) {\n-                columns.add(new TokenColumn<T>(new ResourceModel(name, name), name));\n+                columns.add(new TokenColumn<A>(new ResourceModel(name, name), name));\n             } else if (field != null\n                     && (field.getType().equals(Boolean.class) || field.getType().equals(boolean.class))) {\n \n-                columns.add(new BooleanPropertyColumn<T>(new ResourceModel(name, name), name, name));\n+                columns.add(new BooleanPropertyColumn<A>(new ResourceModel(name, name), name, name));\n             } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new DatePropertyColumn<T>(new ResourceModel(name, name), name, name));\n+                columns.add(new DatePropertyColumn<A>(new ResourceModel(name, name), name, name));\n             } else {\n-                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<A, String>(new ResourceModel(name, name), name, name));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), getPrefPlainAttributesView())) {\n             if (pSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn<T>(name, SchemaType.PLAIN));\n+                columns.add(new AttrColumn<A>(name, SchemaType.PLAIN));\n             }\n         }\n \n         for (String name : prefMan.getList(getRequest(), getPrefDerivedAttributesView())) {\n             if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn<T>(name, SchemaType.DERIVED));\n+                columns.add(new AttrColumn<A>(name, SchemaType.DERIVED));\n             }\n         }\n \n         // Add defaults in case of no selection\n         if (columns.isEmpty()) {\n             for (String name : getDisplayAttributes()) {\n-                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+                columns.add(new PropertyColumn<A, String>(new ResourceModel(name, name), name, name));\n             }\n \n             prefMan.setList(getRequest(), getResponse(), getPrefDetailsView(), Arrays.asList(getDisplayAttributes()));\n         }\n \n-        columns.add(new ActionColumn<T, String>(new ResourceModel(\"actions\")) {\n+        columns.add(new ActionColumn<A, String>(new ResourceModel(\"actions\")) {\n \n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel<T> getActions(final String componentId, final IModel<T> model) {\n-                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.builder();\n+            public ActionLinksPanel<A> getActions(final String componentId, final IModel<A> model) {\n+                final ActionLinksPanel.Builder<A> panel = ActionLinksPanel.builder();\n \n-                panel.add(new ActionLink<T>() {\n+                panel.add(new ActionLink<A>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                    public void onClick(final AjaxRequestTarget target, final A ignore) {\n                         send(AnySelectionDirectoryPanel.this,\n                                 Broadcast.BUBBLE, new ItemSelection<>(target, model.getObject()));\n                     }\n@@ -132,15 +133,15 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n             }\n \n             @Override\n-            public ActionLinksPanel<T> getHeader(final String componentId) {\n-                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.builder();\n+            public ActionLinksPanel<A> getHeader(final String componentId) {\n+                final ActionLinksPanel.Builder<A> panel = ActionLinksPanel.builder();\n \n-                return panel.add(new ActionLink<T>() {\n+                return panel.add(new ActionLink<A>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                    public void onClick(final AjaxRequestTarget target, final A ignore) {\n                         // still missing content\n                         target.add(altDefaultModal.setContent(new AnyObjectDisplayAttributesModalPanel<>(\n                                 altDefaultModal, page.getPageReference(), pSchemaNames, dSchemaNames, type)));\n@@ -149,12 +150,12 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                         altDefaultModal.header(new ResourceModel(\"any.attr.display\"));\n                         altDefaultModal.show(true);\n                     }\n-                }, ActionType.CHANGE_VIEW, AnyEntitlement.READ.getFor(type)).add(new ActionLink<T>() {\n+                }, ActionType.CHANGE_VIEW, AnyEntitlement.READ.getFor(type)).add(new ActionLink<A>() {\n \n                     private static final long serialVersionUID = -7978723352517770644L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                    public void onClick(final AjaxRequestTarget target, final A ignore) {\n                         if (target != null) {\n                             target.add(container);\n                         }\n@@ -180,13 +181,14 @@ protected Collection<ActionType> getBulkActions() {\n \n     protected abstract String getPrefDerivedAttributesView();\n \n-    public abstract static class Builder<A extends AnyTO> extends AnyDirectoryPanel.Builder<A> {\n+    public abstract static class Builder<A extends AnyTO, E extends AbstractAnyRestClient<A, ?>>\n+            extends AnyDirectoryPanel.Builder<A, E> {\n \n         private static final long serialVersionUID = 5460024856989891156L;\n \n         public Builder(\n                 final List<AnyTypeClassTO> anyTypeClassTOs,\n-                final AbstractAnyRestClient<A, ?> restClient,\n+                final E restClient,\n                 final String type,\n                 final PageReference pageRef) {\n "},{"sha":"0076af9445dcd5ca5ca8a6fbd95e1d7f8c7c5cad","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSelectionDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.wicket.PageReference;\n \n-public final class GroupSelectionDirectoryPanel extends AnySelectionDirectoryPanel<GroupTO> {\n+public final class GroupSelectionDirectoryPanel extends AnySelectionDirectoryPanel<GroupTO, GroupRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271271L;\n \n@@ -61,7 +61,7 @@ public String getPrefDerivedAttributesView() {\n         return Constants.PREF_GROUP_DER_ATTRS_VIEW;\n     }\n \n-    public static final class Builder extends AnySelectionDirectoryPanel.Builder<GroupTO> {\n+    public static final class Builder extends AnySelectionDirectoryPanel.Builder<GroupTO, GroupRestClient> {\n \n         private static final long serialVersionUID = -8774023867045850683L;\n "},{"sha":"7545ec7650158022f4a2184e3d1a4f946efd2042","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSelectionDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n \n-public final class UserSelectionDirectoryPanel extends AnySelectionDirectoryPanel<UserTO> {\n+public final class UserSelectionDirectoryPanel extends AnySelectionDirectoryPanel<UserTO, UserRestClient> {\n \n     private static final long serialVersionUID = -1100228004207271272L;\n \n@@ -61,7 +61,7 @@ protected String getPrefDerivedAttributesView() {\n         return Constants.PREF_USERS_DER_ATTRS_VIEW;\n     }\n \n-    public static final class Builder extends AnySelectionDirectoryPanel.Builder<UserTO> {\n+    public static final class Builder extends AnySelectionDirectoryPanel.Builder<UserTO, UserRestClient> {\n \n         private static final long serialVersionUID = -1555789797531054422L;\n "},{"sha":"7b450055ae1bb0035e286e3c3eca0b83d3596adb","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n@@ -74,4 +75,7 @@ public List<GroupTO> search(\n                 getResult();\n     }\n \n+    public void bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n+        getService(GroupService.class).bulkMembersAction(key, actionType);\n+    }\n }"},{"sha":"6655949db01d1cb908107a9b00e1d18c594d6506","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -53,6 +53,7 @@\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -314,16 +315,15 @@ protected SchedTasksProvider<T> dataProvider() {\n \n         public SchedTasksProvider(final Class<T> reference, final TaskType id, final int paginatorRows) {\n             super(paginatorRows, id, restClient);\n+            setSort(\"name\", SortOrder.DESCENDING);\n             this.reference = reference;\n         }\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n-            final int page = ((int) first / paginatorRows);\n-\n-            final List<T> tasks = restClient.list(\n-                    reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n+            int page = ((int) first / paginatorRows);\n \n+            List<T> tasks = restClient.list(reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n             Collections.sort(tasks, getComparator());\n             return tasks.iterator();\n         }"},{"sha":"4faf86ea6bc88252f9f2e5695e3f7bb5743b2b07","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -81,6 +81,8 @@ public enum ActionType {\n         ASSIGN(\"update\"),\n         DEPROVISION(\"update\"),\n         PROVISION(\"update\"),\n+        DEPROVISION_MEMBERS(\"update\"),\n+        PROVISION_MEMBERS(\"update\"),\n         MANAGE_RESOURCES(\"update\"),\n         MANAGE_USERS(\"update\"),\n         MANAGE_GROUPS(\"update\"),"},{"sha":"4ba5a0edc57baa29c2c4c4d20dc53103b085fe5d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.java","status":"modified","additions":41,"deletions":2,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -95,6 +95,8 @@ private ActionLinksPanel(final String componentId, final IModel<T> model) {\n         super.add(new Fragment(\"panelAssign\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelDeprovision\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelProvision\", \"emptyFragment\", this));\n+        super.add(new Fragment(\"panelDeprovisionMembers\", \"emptyFragment\", this));\n+        super.add(new Fragment(\"panelProvisionMembers\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelPropagationTasks\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelNotificationTasks\", \"emptyFragment\", this));\n         super.add(new Fragment(\"panelZoomIn\", \"emptyFragment\", this));\n@@ -899,8 +901,7 @@ public String getAjaxIndicatorMarkupId() {\n             case DEPROVISION:\n                 fragment = new Fragment(\"panelDeprovision\", \"fragmentDeprovision\", this);\n \n-                fragment.addOrReplace(\n-                        new IndicatingOnConfirmAjaxLink<Void>(\"deprovisionLink\", \"confirmDeprovision\", enabled) {\n+                fragment.addOrReplace(new IndicatingAjaxLink<Void>(\"deprovisionLink\") {\n \n                     private static final long serialVersionUID = -6957616042924610295L;\n \n@@ -935,6 +936,44 @@ public String getAjaxIndicatorMarkupId() {\n                 }.setVisible(link.isEnabled(model.getObject())));\n                 break;\n \n+            case DEPROVISION_MEMBERS:\n+                fragment = new Fragment(\"panelDeprovisionMembers\", \"fragmentDeprovisionMembers\", this);\n+\n+                fragment.addOrReplace(new IndicatingAjaxLink<Void>(\"deprovisionMembersLink\") {\n+\n+                    private static final long serialVersionUID = -6957616042924610295L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        link.onClick(target, model.getObject());\n+                    }\n+\n+                    @Override\n+                    public String getAjaxIndicatorMarkupId() {\n+                        return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n+                    }\n+                }.setVisible(link.isEnabled(model.getObject())));\n+                break;\n+\n+            case PROVISION_MEMBERS:\n+                fragment = new Fragment(\"panelProvisionMembers\", \"fragmentProvisionMembers\", this);\n+\n+                fragment.addOrReplace(new IndicatingAjaxLink<Void>(\"provisionMembersLink\") {\n+\n+                    private static final long serialVersionUID = -1876519166660008562L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        link.onClick(target, model.getObject());\n+                    }\n+\n+                    @Override\n+                    public String getAjaxIndicatorMarkupId() {\n+                        return disableIndicator ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();\n+                    }\n+                }.setVisible(link.isEnabled(model.getObject())));\n+                break;\n+\n             case PROPAGATION_TASKS:\n                 fragment = new Fragment(\"panelPropagationTasks\", \"fragmentPropagationTasks\", this);\n "},{"sha":"0cf6b23eb9ee8a0f01f5c44a9a5603e0dfb43da6","filename":"client/console/src/main/resources/META-INF/resources/css/bulk.css","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -16,16 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-th.checkGroupColumn{\n-  width: 20px;\n-  text-align: center;\n-  padding-right: 8px !important;\n-}\n-\n-td.checkGroupColumn{\n-  text-align: center;\n-}\n-\n div.bulkAction{\n   display:inline-table;\n }"},{"sha":"7e4d08833f48e02507279eaba6e9ebb10bac9ffc","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -335,6 +335,16 @@ div#outer.modal-lg, div#utilityModal.modal-lg, section#notifications .modal-lg {\n   display: block\n }\n \n+th.checkGroupColumn {\n+  width: 20px;\n+  text-align: center;\n+  padding-right: 8px !important;\n+}\n+\n+td.checkGroupColumn {\n+  text-align: center;\n+}\n+\n /**\n   BEGIN - Style for Information panel\n */"},{"sha":"3c0a008e882948459bf283d16ebef6462c457497","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ActionDataTablePanel.html","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.html?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -17,11 +17,7 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:head>\n-    <!--<link rel=\"stylesheet\" type=\"text/css\" href=\"css/bulk.css\" media=\"all\"/>-->\n-  </wicket:head>\n   <wicket:panel>\n-\n     <form wicket:id=\"groupForm\">\n       <span wicket:id=\"checkgroup\">\n         <table class=\"ui-widget ui-widget-content table-hover\" wicket:id=\"dataTable\">[Data Table]</table>\n@@ -40,6 +36,5 @@\n         </div>\n       </div>\n     </form>\n-\n   </wicket:panel>\n </html>"},{"sha":"0032e7f3e7551b605cb158426d9dab957dba4a6b","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AjaxDataTablePanel.html","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -17,9 +17,6 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:head>\n-    <!--<link rel=\"stylesheet\" type=\"text/css\" href=\"css/bulk.css\" media=\"all\"/>-->\n-  </wicket:head>\n   <wicket:panel>\n     <span wicket:id=\"tablePanel\">[Table panel]</span>\n     <div wicket:id=\"bulkModal\" />"},{"sha":"5b20816cd1d04e803bb1711d30560079d68560f0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.html","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.html?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -59,6 +59,8 @@\n     <span wicket:id=\"panelExportXML\">[plus]</span>\n     <span wicket:id=\"panelPropagationTasks\">[plus]</span>\n     <span wicket:id=\"panelNotificationTasks\">[plus]</span>\n+    <span wicket:id=\"panelDeprovisionMembers\">[plus]</span>\n+    <span wicket:id=\"panelProvisionMembers\">[plus]</span>\n     <span wicket:id=\"panelDelete\">[plus]</span>\n     <span wicket:id=\"panelSelect\">[select]</span>\n     <span wicket:id=\"panelClose\">[close]</span>\n@@ -244,19 +246,27 @@\n     </wicket:fragment>\n \n     <wicket:fragment wicket:id=\"fragmentUnassign\">\n-      <a href=\"#\" wicket:id=\"unassignLink\" class=\"btn\"><i class=\"glyphicon glyphicon-remove\" alt=\"Unassign icon\" title=\"Unassign\"></i></a>\n+      <a href=\"#\" wicket:id=\"unassignLink\" class=\"btn\"><i class=\"glyphicon glyphicon-resize-full\" alt=\"Unassign icon\" title=\"Unassign\"></i></a>\n     </wicket:fragment>\n \n     <wicket:fragment wicket:id=\"fragmentAssign\">\n-      <a href=\"#\" wicket:id=\"assignLink\" class=\"btn\"><i class=\"glyphicon glyphicon-ok\" alt=\"Assign icon\" title=\"Assign\"></i></a>\n+      <a href=\"#\" wicket:id=\"assignLink\" class=\"btn\"><i class=\"glyphicon glyphicon-resize-small\" alt=\"Assign icon\" title=\"Assign\"></i></a>\n     </wicket:fragment>\n \n     <wicket:fragment wicket:id=\"fragmentDeprovision\">\n-      <a href=\"#\" wicket:id=\"deprovisionLink\" class=\"btn\"><i class=\"glyphicon glyphicon-minus\" alt=\"De-provision icon\" title=\"De-provision\"></i></a>\n+      <a href=\"#\" wicket:id=\"deprovisionLink\" class=\"btn\"><i class=\"glyphicon glyphicon-fast-backward\" alt=\"Deprovision icon\" title=\"Deprovision\"></i></a>\n     </wicket:fragment>\n \n     <wicket:fragment wicket:id=\"fragmentProvision\">\n-      <a href=\"#\" wicket:id=\"provisionLink\" class=\"btn\"><i class=\"glyphicon glyphicon-share-alt\" alt=\"Provision icon\" title=\"Provision\"></i></a>\n+      <a href=\"#\" wicket:id=\"provisionLink\" class=\"btn\"><i class=\"glyphicon glyphicon-fast-forward\" alt=\"Provision icon\" title=\"Provision\"></i></a>\n+    </wicket:fragment>\n+\n+    <wicket:fragment wicket:id=\"fragmentDeprovisionMembers\">\n+      <a href=\"#\" wicket:id=\"deprovisionMembersLink\" class=\"btn\"><i class=\"glyphicon glyphicon-fast-backward\" alt=\"Deprovision icon\" title=\"Deprovision members\"></i></a>\n+    </wicket:fragment>\n+\n+    <wicket:fragment wicket:id=\"fragmentProvisionMembers\">\n+      <a href=\"#\" wicket:id=\"provisionMembersLink\" class=\"btn\"><i class=\"glyphicon glyphicon-fast-forward\" alt=\"Provision icon\" title=\"Provision members\"></i></a>\n     </wicket:fragment>\n \n     <wicket:fragment wicket:id=\"fragmentZoomIn\">"},{"sha":"c86559a9497bb39a7a0545f8328a82c62bdc8add","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/BulkMembersActionType.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBulkMembersActionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBulkMembersActionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBulkMembersActionType.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum BulkMembersActionType {\n+\n+    PROVISION,\n+    DEPROVISION;\n+\n+}"},{"sha":"3387137de15788aaac05135a7e684b97ae352d9f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/UnmatchingRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n /**\n- * Sync/Push task un-matching rule.\n+ * Pull/Push task un-matching rule.\n  */\n @XmlEnum\n public enum UnmatchingRule {"},{"sha":"cc0d677bda176acf8cfe1445bfb9a8a3cf1170fa","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -19,14 +19,19 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n+import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n /**\n@@ -55,4 +60,17 @@ public interface GroupService extends AnyService<GroupTO, GroupPatch> {\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     PagedResult<GroupTO> list(@BeanParam AnyListQuery listQuery);\n+\n+    /**\n+     * (De)provision all members of the given group from / onto all the resources associated to it.\n+     *\n+     * @param key group key\n+     * @param actionType action type to perform on all group members\n+     * @return execution report for the task generated on purpose\n+     */\n+    @POST\n+    @Path(\"{key}/members/{actionType}\")\n+    ExecTO bulkMembersAction(\n+            @NotNull @PathParam(\"key\") String key,\n+            @NotNull @PathParam(\"actionType\") BulkMembersActionType actionType);\n }"},{"sha":"f66750e94144ad2ba7386d5c883c9c29681f01c9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -21,7 +21,9 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n@@ -34,11 +36,14 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n@@ -52,8 +57,20 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.job.JobNamer;\n+import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.quartz.JobDataMap;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -74,12 +91,30 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n+    @Autowired\n+    protected TaskDAO taskDAO;\n+\n+    @Autowired\n+    protected ConfDAO confDAO;\n+\n     @Autowired\n     protected GroupDataBinder binder;\n \n     @Autowired\n     protected GroupProvisioningManager provisioningManager;\n \n+    @Autowired\n+    protected TaskDataBinder taskDataBinder;\n+\n+    @Autowired\n+    protected JobManager jobManager;\n+\n+    @Autowired\n+    protected SchedulerFactoryBean scheduler;\n+\n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n     @Override\n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         if (!IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n@@ -382,6 +417,53 @@ public ProvisioningResult<GroupTO> provision(\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"') \"\n+            + \"and hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @Transactional\n+    public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n+        Group group = groupDAO.find(key);\n+        if (group == null) {\n+            throw new NotFoundException(\"Group \" + key);\n+        }\n+\n+        SchedTask task = entityFactory.newEntity(SchedTask.class);\n+        task.setName(\"Bulk member provision for group \" + group.getName());\n+        task.setActive(true);\n+        task.setJobDelegateClassName(GroupMemberProvisionTaskJobDelegate.class.getName());\n+        task = taskDAO.save(task);\n+\n+        try {\n+            Map<String, Object> jobDataMap = jobManager.register(\n+                    task,\n+                    null,\n+                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+\n+            jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, false);\n+            jobDataMap.put(GroupMemberProvisionTaskJobDelegate.GROUP_KEY_JOBDETAIL_KEY, key);\n+            jobDataMap.put(GroupMemberProvisionTaskJobDelegate.ACTION_TYPE_JOBDETAIL_KEY, actionType);\n+\n+            scheduler.getScheduler().triggerJob(\n+                    JobNamer.getJobKey(task),\n+                    new JobDataMap(jobDataMap));\n+        } catch (Exception e) {\n+            LOG.error(\"While executing task {}\", task, e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        ExecTO result = new ExecTO();\n+        result.setJobType(JobType.TASK);\n+        result.setRefKey(task.getKey());\n+        result.setRefDesc(taskDataBinder.buildRefDesc(task));\n+        result.setStart(new Date());\n+        result.setStatus(\"JOB_FIRED\");\n+        result.setMessage(\"Job fired; waiting for results...\");\n+\n+        return result;\n+    }\n+\n     @Override\n     protected GroupTO resolveReference(final Method method, final Object... args) throws UnresolvedReferenceException {\n         String key = null;"},{"sha":"0192a2aa59b44a50f53d55482a8797a42eb55412","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformer;\n+import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n \n /**\n  * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n@@ -145,7 +146,8 @@ public void load() {\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n                         && !PullJobDelegate.class.isAssignableFrom(clazz)\n-                        && !PushJobDelegate.class.isAssignableFrom(clazz)) {\n+                        && !PushJobDelegate.class.isAssignableFrom(clazz)\n+                        && !GroupMemberProvisionTaskJobDelegate.class.isAssignableFrom(clazz)) {\n \n                     classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n                 }"},{"sha":"379d386417a02f715b19754aed82ae3f8d53d994","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -93,7 +93,7 @@ protected AnyUtils getAnyUtils() {\n     @Override\n     public A authFind(final String key) {\n         if (key == null) {\n-            throw new NotFoundException(\"Null id\");\n+            throw new NotFoundException(\"Null key\");\n         }\n \n         A any = find(key);"},{"sha":"a03f36bf80a8f5ee06e0894753986a9e974bd1d8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/SchedTaskJobDelegate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FSchedTaskJobDelegate.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -18,9 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.job;\n \n+import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n \n public interface SchedTaskJobDelegate {\n \n-    void execute(String taskKey, boolean dryRun) throws JobExecutionException;\n+    void execute(String taskKey, boolean dryRun, JobExecutionContext context) throws JobExecutionException;\n }"},{"sha":"5fc5405f6f7b31d9dfc88fa7bad4adc1245222ee","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -73,7 +74,9 @@ public abstract class AbstractSchedTaskJobDelegate implements SchedTaskJobDelega\n \n     @Transactional\n     @Override\n-    public void execute(final String taskKey, final boolean dryRun) throws JobExecutionException {\n+    public void execute(final String taskKey, final boolean dryRun, final JobExecutionContext context)\n+            throws JobExecutionException {\n+\n         task = taskDAO.find(taskKey);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskKey + \" not found\");"},{"sha":"3040d13ab9b8560cc20ca488aaab69fc01d283c2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class GroupMemberProvisionTaskJobDelegate extends AbstractSchedTaskJobDelegate {\n+\n+    public static final String ACTION_TYPE_JOBDETAIL_KEY = \"actionType\";\n+\n+    public static final String GROUP_KEY_JOBDETAIL_KEY = \"groupKey\";\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    private UserProvisioningManager userProvisioningManager;\n+\n+    @Autowired\n+    private AnyObjectProvisioningManager anyObjectProvisioningManager;\n+\n+    private String groupKey;\n+\n+    private BulkMembersActionType actionType;\n+\n+    @Transactional\n+    @Override\n+    public void execute(final String taskKey, final boolean dryRun, final JobExecutionContext context)\n+            throws JobExecutionException {\n+\n+        groupKey = context.getMergedJobDataMap().getString(GROUP_KEY_JOBDETAIL_KEY);\n+        actionType = (BulkMembersActionType) context.getMergedJobDataMap().get(ACTION_TYPE_JOBDETAIL_KEY);\n+\n+        super.execute(taskKey, dryRun, context);\n+    }\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        Group group = groupDAO.authFind(groupKey);\n+\n+        StringBuilder result = new StringBuilder(\"Group \").append(group.getName()).append(\" members \");\n+        if (actionType == BulkMembersActionType.DEPROVISION) {\n+            result.append(\"de\");\n+        }\n+        result.append(\"provision\\n\\n\");\n+\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setGroupKey(groupKey);\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n+        for (User user : users) {\n+            List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n+                    ? userProvisioningManager.deprovision(user.getKey(), group.getResourceNames(), false)\n+                    : userProvisioningManager.provision(user.getKey(), true, null, group.getResourceNames(), false);\n+            for (PropagationStatus status : statuses) {\n+                result.append(\"User \").append(user.getKey()).append('\\t').\n+                        append(\"Resource \").append(status.getResource()).append('\\t').\n+                        append(status.getStatus());\n+                if (StringUtils.isNotBlank(status.getFailureReason())) {\n+                    result.append('\\n').append(status.getFailureReason()).append('\\n');\n+                }\n+                result.append(\"\\n\");\n+            }\n+            result.append(\"\\n\");\n+        }\n+\n+        membershipCond = new MembershipCond();\n+        membershipCond.setGroupKey(groupKey);\n+        List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n+        for (AnyObject anyObject : anyObjects) {\n+            List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n+                    ? anyObjectProvisioningManager.deprovision(anyObject.getKey(), group.getResourceNames(), false)\n+                    : anyObjectProvisioningManager.provision(anyObject.getKey(), group.getResourceNames(), false);\n+\n+            for (PropagationStatus status : statuses) {\n+                result.append(anyObject.getType().getKey()).append(' ').append(anyObject.getKey()).append('\\t').\n+                        append(\"Resource \").append(status.getResource()).append('\\t').\n+                        append(status.getStatus());\n+                if (StringUtils.isNotBlank(status.getFailureReason())) {\n+                    result.append('\\n').append(status.getFailureReason()).append('\\n');\n+                }\n+                result.append(\"\\n\");\n+            }\n+            result.append(\"\\n\");\n+        }\n+\n+        return result.toString();\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        // always record execution result\n+        return true;\n+    }\n+\n+}"},{"sha":"041d3b473e93c5a5f15893fd6a42d68c64ea1a61","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -77,7 +77,9 @@ public Void exec() {\n \n                         ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().\n                                 createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n-                                execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n+                                execute(taskKey,\n+                                        context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                        context);\n                     } catch (Exception e) {\n                         LOG.error(\"While executing task {}\", taskKey, e);\n                         throw new RuntimeException(e);"},{"sha":"f19b6fa24ed06dfc4e8191fe7d37ab5b2fa5eff0","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -20,8 +20,10 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n@@ -57,4 +59,9 @@ public PagedResult<GroupTO> list(final AnyListQuery listQuery) {\n         return super.list(listQuery);\n     }\n \n+    @Override\n+    public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n+        return logic.bulkMembersAction(key, actionType);\n+    }\n+\n }"},{"sha":"b654ac12daf7338fc48fa331f68f2450c04a3fc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n@@ -56,18 +57,23 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -80,6 +86,7 @@\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -774,6 +781,69 @@ public void typeExtensions() {\n         assertTrue(groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().contains(\"other\"));\n     }\n \n+    @Test\n+    public void bulkMembersAction() throws InterruptedException {\n+        // 1. create group without resources\n+        GroupTO groupTO = getBasicSampleTO(\"forProvision\");\n+        groupTO = createGroup(groupTO).getAny();\n+\n+        // 2. create user with such group assigned\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"forProvision@syncope.apache.org\");\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        userTO = createUser(userTO).getAny();\n+\n+        // 3. modify the group by assiging the LDAP resource\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).build());\n+        ProvisioningResult<GroupTO> groupUpdateResult = updateGroup(groupPatch);\n+        groupTO = groupUpdateResult.getAny();\n+\n+        PropagationStatus propStatus = groupUpdateResult.getPropagationStatuses().get(0);\n+        assertEquals(RESOURCE_NAME_LDAP, propStatus.getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, propStatus.getStatus());\n+\n+        // 4. verify that the user above is not found on LDAP\n+        try {\n+            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        try {\n+            // 5. bulk provision group members\n+            ExecTO exec = groupService.bulkMembersAction(groupTO.getKey(), BulkMembersActionType.PROVISION);\n+            assertNotNull(exec.getRefKey());\n+\n+            int i = 0;\n+            int maxit = 50;\n+\n+            // wait for task exec completion (executions incremented)\n+            SchedTaskTO taskTO;\n+            do {\n+                Thread.sleep(1000);\n+\n+                taskTO = taskService.read(exec.getRefKey(), true);\n+\n+                assertNotNull(taskTO);\n+                assertNotNull(taskTO.getExecutions());\n+                i++;\n+            } while (taskTO.getExecutions().isEmpty() && i < maxit);\n+            assertFalse(taskTO.getExecutions().isEmpty());\n+\n+            assertEquals(TaskJob.Status.SUCCESS.name(), taskTO.getExecutions().get(0).getStatus());\n+\n+            // 6. verify that the user above is now fond on LDAP\n+            ConnObjectTO userOnLdap =\n+                    resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+            assertNotNull(userOnLdap);\n+        } finally {\n+            groupService.delete(groupTO.getKey());\n+            userService.delete(userTO.getKey());\n+        }\n+    }\n+\n     @Test\n     public void issue178() {\n         GroupTO groupTO = new GroupTO();"},{"sha":"b66a0c0ebd2ea1e1798c9493d688718b5de223a3","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/98673c0ee44eaa1a8575ceeaa63968ff82e0e9af/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=98673c0ee44eaa1a8575ceeaa63968ff82e0e9af","patch":"@@ -401,7 +401,7 @@ under the License.\n \n     <angular.version>1.5.5</angular.version>\n     <angular-ui-router.version>0.2.18</angular-ui-router.version>\n-    <angular-ui-bootstrap.version>1.3.2</angular-ui-bootstrap.version>\n+    <angular-ui-bootstrap.version>1.3.3</angular-ui-bootstrap.version>\n     <angular-ui-select.version>0.14.8</angular-ui-select.version>\n     <angular-treasure-overlay-spinner.version>1.1.0</angular-treasure-overlay-spinner.version>\n     <ng-password-strength.version>0.2.1</ng-password-strength.version>"}]}