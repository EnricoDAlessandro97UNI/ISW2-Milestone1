{"sha":"7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdlZDNhOWMyMjMyZmFmNzhlMWI1ZjJhMmYzMjNkMDUxZjkyYWEwYmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-11T12:22:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-06-11T12:22:55Z"},"message":"Futher enhancements for extendability","tree":{"sha":"fe28ad5158cd0273a9c988867c5bff3c9239194b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fe28ad5158cd0273a9c988867c5bff3c9239194b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c1c9116f3ac44477ff46e12376dd7b992740aa43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1c9116f3ac44477ff46e12376dd7b992740aa43","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1c9116f3ac44477ff46e12376dd7b992740aa43"}],"stats":{"total":85,"additions":50,"deletions":35},"files":[{"sha":"815a847924c633d5c5d2e10bb1dc264606d8046c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java?ref=7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","patch":"@@ -55,13 +55,21 @@ ConnInstance buildConnInstanceOverride(\n     Connector createConnector(ConnInstance connInstance);\n \n     /**\n-     * Get existing connector for the given resource.\n+     * Get existing connector bean for the given resource or create if not found.\n      *\n-     * @param resource the resource.\n-     * @return live connector bran for given resource\n+     * @param resource the resource\n+     * @return live connector bean for given resource\n      */\n     Connector getConnector(ExternalResource resource);\n \n+    /*\n+     * Get existing connector bean for the given resource if found.\n+     *\n+     * @param resource the resource.\n+     * @return live connector bean for given resource\n+     */\n+    Optional<Connector> readConnector(ExternalResource resource);\n+\n     /**\n      * Load connectors for all existing resources.\n      *"},{"sha":"8a1f7d16ba94d012a530e0d5e4f6e3e6f1fd9407","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.identityconnectors.common.CollectionUtil;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -54,10 +55,7 @@\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n-import org.springframework.util.CollectionUtils;\n \n public class ConnectorFacadeProxy implements Connector {\n \n@@ -75,20 +73,21 @@ public class ConnectorFacadeProxy implements Connector {\n      */\n     private final ConnInstance connInstance;\n \n-    @Autowired\n-    private AsyncConnectorFacade asyncFacade;\n+    private final AsyncConnectorFacade asyncFacade;\n \n     /**\n      * Use the passed connector instance to build a ConnectorFacade that will be used to make all wrapped calls.\n      *\n      * @param connInstance the connector instance\n+     * @param asyncFacade the async connectot facade\n      * @see ConnectorInfo\n      * @see APIConfiguration\n      * @see ConfigurationProperties\n      * @see ConnectorFacade\n      */\n-    public ConnectorFacadeProxy(final ConnInstance connInstance) {\n+    public ConnectorFacadeProxy(final ConnInstance connInstance, final AsyncConnectorFacade asyncFacade) {\n         this.connInstance = connInstance;\n+        this.asyncFacade = asyncFacade;\n \n         ConnIdBundleManager connIdBundleManager =\n                 ApplicationContextProvider.getBeanFactory().getBean(ConnIdBundleManager.class);\n@@ -105,7 +104,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n         // set connector configuration according to conninstance's\n         ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n         connInstance.getConf().stream().\n-                filter(property -> !CollectionUtils.isEmpty(property.getValues())).\n+                filter(property -> !CollectionUtil.isEmpty(property.getValues())).\n                 forEach(property -> properties.setPropertyValue(\n                 property.getSchema().getName(),\n                 getPropertyValue(property.getSchema().getType(), property.getValues())));\n@@ -257,7 +256,6 @@ public void delete(\n         }\n     }\n \n-    @Transactional\n     @Override\n     public void sync(final ObjectClass objectClass, final SyncToken token, final SyncResultsHandler handler,\n             final OperationOptions options) {\n@@ -298,7 +296,6 @@ public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n         return result;\n     }\n \n-    @Transactional\n     @Override\n     public void fullReconciliation(\n             final ObjectClass objectClass,\n@@ -308,7 +305,6 @@ public void fullReconciliation(\n         Connector.super.fullReconciliation(objectClass, handler, options);\n     }\n \n-    @Transactional\n     @Override\n     public void filteredReconciliation(\n             final ObjectClass objectClass,"},{"sha":"1a7d1bed9b6fff1c2b0b1bf7b93ff37df40d4871","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":19,"deletions":14,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","patch":"@@ -68,21 +68,29 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n     @Autowired\n     private ConnInstanceDataBinder connInstanceDataBinder;\n \n+    @Autowired\n+    private AsyncConnectorFacade asyncFacade;\n+\n     private EntityFactory entityFactory;\n \n     private static String getBeanName(final ExternalResource resource) {\n         return String.format(\"connInstance-%s-%S-%s\",\n                 AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n     }\n \n+    @Override\n+    public Optional<Connector> readConnector(final ExternalResource resource) {\n+        return Optional.ofNullable((Connector) ApplicationContextProvider.getBeanFactory().\n+                getSingleton(getBeanName(resource)));\n+    }\n+\n     @Override\n     public Connector getConnector(final ExternalResource resource) {\n         // Try to re-create connector bean from underlying resource (useful for managing failover scenarios)\n-        if (!ApplicationContextProvider.getBeanFactory().containsSingleton(getBeanName(resource))) {\n+        return readConnector(resource).orElseGet(() -> {\n             registerConnector(resource);\n-        }\n-\n-        return ApplicationContextProvider.getBeanFactory().getBean(getBeanName(resource), Connector.class);\n+            return (Connector) ApplicationContextProvider.getBeanFactory().getSingleton(getBeanName(resource));\n+        });\n     }\n \n     @Override\n@@ -148,27 +156,24 @@ public ConnInstance buildConnInstanceOverride(\n \n     @Override\n     public Connector createConnector(final ConnInstance connInstance) {\n-        Connector connector = new ConnectorFacadeProxy(connInstance);\n-        ApplicationContextProvider.getBeanFactory().autowireBean(connector);\n-\n-        return connector;\n+        return new ConnectorFacadeProxy(connInstance, asyncFacade);\n     }\n \n     @Override\n     public void registerConnector(final ExternalResource resource) {\n+        String beanName = getBeanName(resource);\n+\n+        if (ApplicationContextProvider.getBeanFactory().containsSingleton(beanName)) {\n+            unregisterConnector(beanName);\n+        }\n+\n         ConnInstance connInstance = buildConnInstanceOverride(\n                 connInstanceDataBinder.getConnInstanceTO(resource.getConnector()),\n                 resource.getConfOverride(),\n                 resource.isOverrideCapabilities() ? Optional.of(resource.getCapabilitiesOverride()) : Optional.empty());\n         Connector connector = createConnector(connInstance);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n-        String beanName = getBeanName(resource);\n-\n-        if (ApplicationContextProvider.getBeanFactory().containsSingleton(beanName)) {\n-            unregisterConnector(beanName);\n-        }\n-\n         ApplicationContextProvider.getBeanFactory().registerSingleton(beanName, connector);\n         LOG.debug(\"Successfully registered bean {}\", beanName);\n     }"},{"sha":"5ff17e0949e935f6cb9e7e28284b90117fcaad92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=7ed3a9c2232faf78e1b5f2a2f323d051f92aa0ba","patch":"@@ -626,6 +626,19 @@ protected String createReport(\n         return report.toString();\n     }\n \n+    protected Connector getConnector(final T provisioningTask) throws JobExecutionException {\n+        Connector connector;\n+        try {\n+            connector = connFactory.getConnector(provisioningTask.getResource());\n+        } catch (Exception e) {\n+            String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                    provisioningTask.getResource(), provisioningTask.getResource().getConnector());\n+            throw new JobExecutionException(msg, e);\n+        }\n+\n+        return connector;\n+    }\n+\n     @Override\n     protected String doExecute(final boolean dryRun, final String executor, final JobExecutionContext context)\n             throws JobExecutionException {\n@@ -638,14 +651,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n \n             T provisioningTask = clazz.cast(task);\n \n-            Connector connector;\n-            try {\n-                connector = connFactory.getConnector(provisioningTask.getResource());\n-            } catch (Exception e) {\n-                String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                        provisioningTask.getResource(), provisioningTask.getResource().getConnector());\n-                throw new JobExecutionException(msg, e);\n-            }\n+            Connector connector = getConnector(provisioningTask);\n \n             boolean noMapping = true;\n             for (Provision provision : provisioningTask.getResource().getProvisions()) {"}]}