{"sha":"8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhmMWE5ZjVlNWY1NDkxZjRiMmY5MGEyNGI1MmRjNWEwNTJhNmU5ZWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-21T13:02:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-21T13:02:23Z"},"message":"[SYNCOPE-120] Using Entitlement constants in authorization annotations","tree":{"sha":"c3ecb76adb3f89180318315a527b11df27d37390","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c3ecb76adb3f89180318315a527b11df27d37390"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"eb9ea2a279000f8c52780404e410efc888078dee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eb9ea2a279000f8c52780404e410efc888078dee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eb9ea2a279000f8c52780404e410efc888078dee"}],"stats":{"total":740,"additions":381,"deletions":359},"files":[{"sha":"9aa599059237ed6224affd4f53cc076aa90a72f9","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n@@ -109,7 +108,7 @@ public <T> T getService(final Class<T> serviceClass) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Map<Entitlement, Set<String>>, UserTO> self() {\n+    public Pair<Map<String, Set<String>>, UserTO> self() {\n         // Explicitly disable header value split because it interferes with JSON deserialization below\n         UserSelfService serviceInstance = getService(UserSelfService.class);\n         WebClient.getConfig(WebClient.client(serviceInstance)).\n@@ -125,9 +124,9 @@ public Pair<Map<Entitlement, Set<String>>, UserTO> self() {\n \n         try {\n             return new ImmutablePair<>(\n-                    (Map<Entitlement, Set<String>>) new ObjectMapper().readValue(\n+                    (Map<String, Set<String>>) new ObjectMapper().readValue(\n                             response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n-                            new TypeReference<HashMap<Entitlement, Set<String>>>() {\n+                            new TypeReference<HashMap<String, Set<String>>>() {\n                             }),\n                     response.readEntity(UserTO.class));\n         } catch (IOException e) {"},{"sha":"95ef20d5c0570f9ce905b1ab82d5391cc58ebf6d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -20,15 +20,14 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.EnumSet;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.Entitlement;\n \n @XmlRootElement(name = \"role\")\n @XmlType\n@@ -40,7 +39,7 @@ public class RoleTO extends AbstractBaseBean {\n \n     private String name;\n \n-    private final Set<Entitlement> entitlements = EnumSet.noneOf(Entitlement.class);\n+    private final Set<String> entitlements = new HashSet<>();\n \n     private final List<String> realms = new ArrayList<>();\n \n@@ -63,7 +62,7 @@ public void setName(final String name) {\n     @XmlElementWrapper(name = \"entitlements\")\n     @XmlElement(name = \"entitlement\")\n     @JsonProperty(\"entitlements\")\n-    public Set<Entitlement> getEntitlements() {\n+    public Set<String> getEntitlements() {\n         return entitlements;\n     }\n "},{"sha":"e5329a749d51adb128a6242bc8c6cf9763184b26","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":193,"deletions":86,"changes":279,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -18,91 +18,198 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum Entitlement {\n-\n-    ANONYMOUS,\n-    REALM_LIST,\n-    REALM_CREATE,\n-    REALM_UPDATE,\n-    REALM_DELETE,\n-    ROLE_LIST,\n-    ROLE_CREATE,\n-    ROLE_READ,\n-    ROLE_UPDATE,\n-    ROLE_DELETE,\n-    SCHEMA_LIST,\n-    SCHEMA_CREATE,\n-    SCHEMA_READ,\n-    SCHEMA_UPDATE,\n-    SCHEMA_DELETE,\n-    USER_SEARCH,\n-    USER_LIST,\n-    USER_CREATE,\n-    USER_READ,\n-    USER_UPDATE,\n-    USER_DELETE,\n-    USER_VIEW,\n-    GROUP_SEARCH,\n-    GROUP_CREATE,\n-    GROUP_READ,\n-    GROUP_UPDATE,\n-    GROUP_DELETE,\n-    RESOURCE_LIST,\n-    RESOURCE_CREATE,\n-    RESOURCE_READ,\n-    RESOURCE_UPDATE,\n-    RESOURCE_DELETE,\n-    RESOURCE_GETCONNECTOROBJECT,\n-    CONNECTOR_LIST,\n-    CONNECTOR_CREATE,\n-    CONNECTOR_READ,\n-    CONNECTOR_UPDATE,\n-    CONNECTOR_DELETE,\n-    CONNECTOR_RELOAD,\n-    CONFIGURATION_EXPORT,\n-    CONFIGURATION_LIST,\n-    CONFIGURATION_SET,\n-    CONFIGURATION_DELETE,\n-    TASK_LIST,\n-    TASK_CREATE,\n-    TASK_READ,\n-    TASK_UPDATE,\n-    TASK_DELETE,\n-    TASK_EXECUTE,\n-    POLICY_LIST,\n-    POLICY_CREATE,\n-    POLICY_READ,\n-    POLICY_UPDATE,\n-    POLICY_DELETE,\n-    WORKFLOW_DEF_READ,\n-    WORKFLOW_DEF_UPDATE,\n-    WORKFLOW_TASK_LIST,\n-    WORKFLOW_FORM_LIST,\n-    WORKFLOW_FORM_READ,\n-    WORKFLOW_FORM_CLAIM,\n-    WORKFLOW_FORM_SUBMIT,\n-    NOTIFICATION_LIST,\n-    NOTIFICATION_CREATE,\n-    NOTIFICATION_READ,\n-    NOTIFICATION_UPDATE,\n-    NOTIFICATION_DELETE,\n-    REPORT_LIST,\n-    REPORT_READ,\n-    REPORT_CREATE,\n-    REPORT_UPDATE,\n-    REPORT_DELETE,\n-    REPORT_EXECUTE,\n-    LOG_LIST,\n-    LOG_SET_LEVEL,\n-    LOG_DELETE,\n-    AUDIT_LIST,\n-    AUDIT_ENABLE,\n-    AUDIT_DISABLE,\n-    SECURITY_QUESTION_CREATE,\n-    SECURITY_QUESTION_UPDATE,\n-    SECURITY_QUESTION_DELETE,\n-    ROUTE_READ,\n-    ROUTE_LIST,\n-    ROUTE_UPDATE;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n+public final class Entitlement {\n+\n+    public static final String ANONYMOUS = \"ANONYMOUS\";\n+\n+    public static final String REALM_LIST = \"REALM_LIST\";\n+\n+    public static final String REALM_CREATE = \"REALM_CREATE\";\n+\n+    public static final String REALM_UPDATE = \"REALM_UPDATE\";\n+\n+    public static final String REALM_DELETE = \"REALM_DELETE\";\n+\n+    public static final String ROLE_LIST = \"ROLE_LIST\";\n+\n+    public static final String ROLE_CREATE = \"ROLE_CREATE\";\n+\n+    public static final String ROLE_READ = \"ROLE_READ\";\n+\n+    public static final String ROLE_UPDATE = \"ROLE_UPDATE\";\n+\n+    public static final String ROLE_DELETE = \"ROLE_DELETE\";\n+\n+    public static final String SCHEMA_LIST = \"SCHEMA_LIST\";\n+\n+    public static final String SCHEMA_CREATE = \"SCHEMA_CREATE\";\n+\n+    public static final String SCHEMA_READ = \"SCHEMA_READ\";\n+\n+    public static final String SCHEMA_UPDATE = \"SCHEMA_UPDATE\";\n+\n+    public static final String SCHEMA_DELETE = \"SCHEMA_DELETE\";\n+\n+    public static final String USER_SEARCH = \"USER_SEARCH\";\n+\n+    public static final String USER_LIST = \"USER_LIST\";\n+\n+    public static final String USER_CREATE = \"USER_CREATE\";\n+\n+    public static final String USER_READ = \"USER_READ\";\n+\n+    public static final String USER_UPDATE = \"USER_UPDATE\";\n+\n+    public static final String USER_DELETE = \"USER_DELETE\";\n+\n+    public static final String USER_VIEW = \"USER_VIEW\";\n+\n+    public static final String GROUP_SEARCH = \"GROUP_SEARCH\";\n+\n+    public static final String GROUP_CREATE = \"GROUP_CREATE\";\n+\n+    public static final String GROUP_READ = \"GROUP_READ\";\n+\n+    public static final String GROUP_UPDATE = \"GROUP_UPDATE\";\n+\n+    public static final String GROUP_DELETE = \"GROUP_DELETE\";\n+\n+    public static final String RESOURCE_LIST = \"RESOURCE_LIST\";\n+\n+    public static final String RESOURCE_CREATE = \"RESOURCE_CREATE\";\n+\n+    public static final String RESOURCE_READ = \"RESOURCE_READ\";\n+\n+    public static final String RESOURCE_UPDATE = \"RESOURCE_UPDATE\";\n+\n+    public static final String RESOURCE_DELETE = \"RESOURCE_DELETE\";\n+\n+    public static final String RESOURCE_GETCONNECTOROBJECT = \"RESOURCE_GETCONNECTOROBJECT\";\n+\n+    public static final String CONNECTOR_LIST = \"CONNECTOR_LIST\";\n+\n+    public static final String CONNECTOR_CREATE = \"CONNECTOR_CREATE\";\n+\n+    public static final String CONNECTOR_READ = \"CONNECTOR_READ\";\n+\n+    public static final String CONNECTOR_UPDATE = \"CONNECTOR_UPDATE\";\n+\n+    public static final String CONNECTOR_DELETE = \"CONNECTOR_DELETE\";\n+\n+    public static final String CONNECTOR_RELOAD = \"CONNECTOR_RELOAD\";\n+\n+    public static final String CONFIGURATION_EXPORT = \"CONFIGURATION_EXPORT\";\n+\n+    public static final String CONFIGURATION_LIST = \"CONFIGURATION_LIST\";\n+\n+    public static final String CONFIGURATION_SET = \"CONFIGURATION_SET\";\n+\n+    public static final String CONFIGURATION_DELETE = \"CONFIGURATION_DELETE\";\n+\n+    public static final String TASK_LIST = \"TASK_LIST\";\n+\n+    public static final String TASK_CREATE = \"TASK_CREATE\";\n+\n+    public static final String TASK_READ = \"TASK_READ\";\n+\n+    public static final String TASK_UPDATE = \"TASK_UPDATE\";\n+\n+    public static final String TASK_DELETE = \"TASK_DELETE\";\n+\n+    public static final String TASK_EXECUTE = \"TASK_EXECUTE\";\n+\n+    public static final String POLICY_LIST = \"POLICY_LIST\";\n+\n+    public static final String POLICY_CREATE = \"POLICY_CREATE\";\n+\n+    public static final String POLICY_READ = \"POLICY_READ\";\n+\n+    public static final String POLICY_UPDATE = \"POLICY_UPDATE\";\n+\n+    public static final String POLICY_DELETE = \"POLICY_DELETE\";\n+\n+    public static final String WORKFLOW_DEF_READ = \"WORKFLOW_DEF_READ\";\n+\n+    public static final String WORKFLOW_DEF_UPDATE = \"WORKFLOW_DEF_UPDATE\";\n+\n+    public static final String WORKFLOW_TASK_LIST = \"WORKFLOW_TASK_LIST\";\n+\n+    public static final String WORKFLOW_FORM_LIST = \"WORKFLOW_FORM_LIST\";\n+\n+    public static final String WORKFLOW_FORM_READ = \"WORKFLOW_FORM_READ\";\n+\n+    public static final String WORKFLOW_FORM_CLAIM = \"WORKFLOW_FORM_CLAIM\";\n+\n+    public static final String WORKFLOW_FORM_SUBMIT = \"WORKFLOW_FORM_SUBMIT\";\n+\n+    public static final String NOTIFICATION_LIST = \"NOTIFICATION_LIST\";\n+\n+    public static final String NOTIFICATION_CREATE = \"NOTIFICATION_CREATE\";\n+\n+    public static final String NOTIFICATION_READ = \"NOTIFICATION_READ\";\n+\n+    public static final String NOTIFICATION_UPDATE = \"NOTIFICATION_UPDATE\";\n+\n+    public static final String NOTIFICATION_DELETE = \"NOTIFICATION_DELETE\";\n+\n+    public static final String REPORT_LIST = \"REPORT_LIST\";\n+\n+    public static final String REPORT_READ = \"REPORT_READ\";\n+\n+    public static final String REPORT_CREATE = \"REPORT_CREATE\";\n+\n+    public static final String REPORT_UPDATE = \"REPORT_UPDATE\";\n+\n+    public static final String REPORT_DELETE = \"REPORT_DELETE\";\n+\n+    public static final String REPORT_EXECUTE = \"REPORT_EXECUTE\";\n+\n+    public static final String LOG_LIST = \"LOG_LIST\";\n+\n+    public static final String LOG_SET_LEVEL = \"LOG_SET_LEVEL\";\n+\n+    public static final String LOG_DELETE = \"LOG_DELETE\";\n+\n+    public static final String AUDIT_LIST = \"AUDIT_LIST\";\n+\n+    public static final String AUDIT_ENABLE = \"AUDIT_ENABLE\";\n+\n+    public static final String AUDIT_DISABLE = \"AUDIT_DISABLE\";\n+\n+    public static final String SECURITY_QUESTION_CREATE = \"SECURITY_QUESTION_CREATE\";\n+\n+    public static final String SECURITY_QUESTION_UPDATE = \"SECURITY_QUESTION_UPDATE\";\n+\n+    public static final String SECURITY_QUESTION_DELETE = \"SECURITY_QUESTION_DELETE\";\n+\n+    public static final String ROUTE_READ = \"ROUTE_READ\";\n+\n+    public static final String ROUTE_LIST = \"ROUTE_LIST\";\n+\n+    public static final String ROUTE_UPDATE = \"ROUTE_UPDATE\";\n+\n+    private static Set<String> VALUES = new HashSet<>();\n+\n+    static {\n+        for (Field field : Entitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                VALUES.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(VALUES);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private Entitlement() {\n+        // private constructor for static utility class\n+    }\n }"},{"sha":"ef95aaa045be6e337dc63678ee8ea160d88c15c1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -22,6 +22,7 @@\n import java.lang.reflect.Method;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -57,12 +58,12 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<ConfTO> {\n     @Autowired\n     private GroupWorkflowAdapter gwfAdapter;\n \n-    @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_DELETE + \"')\")\n     public void delete(final String key) {\n         confDAO.delete(key);\n     }\n \n-    @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_LIST + \"')\")\n     public ConfTO list() {\n         return binder.getConfTO(confDAO.get());\n     }\n@@ -87,12 +88,12 @@ public AttrTO read(final String key) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('CONFIGURATION_SET')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_SET + \"')\")\n     public void set(final AttrTO value) {\n         confDAO.save(binder.getAttribute(value));\n     }\n \n-    @PreAuthorize(\"hasRole('CONFIGURATION_EXPORT')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_EXPORT + \"')\")\n     @Transactional(readOnly = true)\n     public void export(final OutputStream os) {\n         try {"},{"sha":"b1d1ddf4db845f12fd9d6ae05b759661c561267b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -73,7 +74,7 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n@@ -89,7 +90,7 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getKey(), connInstanceTO);\n         try {\n@@ -105,7 +106,7 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_DELETE + \"')\")\n     public ConnInstanceTO delete(final Long connInstanceId) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n@@ -128,7 +129,7 @@ public ConnInstanceTO delete(final Long connInstanceId) {\n         return connToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n@@ -153,7 +154,7 @@ public ConnInstanceTO transform(final ConnInstance input) {\n         }, PredicateUtils.notNullPredicate(), new ArrayList<ConnInstanceTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO read(final Long connInstanceId) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n@@ -164,7 +165,7 @@ public ConnInstanceTO read(final Long connInstanceId) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n@@ -199,7 +200,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         return connectorBundleTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n@@ -217,7 +218,7 @@ public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final bo\n         return new ArrayList<>(connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial));\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n@@ -242,7 +243,7 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\n \n@@ -254,7 +255,7 @@ public List<ConnConfProperty> getConfigurationProperties(final Long connInstance\n         return new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public boolean check(final ConnInstanceTO connInstanceTO) {\n         final Connector connector = connFactory.createConnector(\n@@ -272,7 +273,7 @@ public boolean check(final ConnInstanceTO connInstanceTO) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO readByResource(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n@@ -282,7 +283,7 @@ public ConnInstanceTO readByResource(final String resourceName) {\n         return binder.getConnInstanceTO(connFactory.getConnector(resource).getActiveConnInstance());\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_RELOAD')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_RELOAD + \"')\")\n     @Transactional(readOnly = true)\n     public void reload() {\n         connFactory.unload();"},{"sha":"2f7840c7976b0d032e6c817a845559363de18d76","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -92,14 +92,14 @@ public class GroupLogic extends AbstractSubjectLogic<GroupTO, GroupMod> {\n     @Autowired\n     protected GroupProvisioningManager provisioningManager;\n \n-    @PreAuthorize(\"hasRole('GROUP_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO read(final Long groupKey) {\n         return binder.getGroupTO(groupKey);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         return CollectionUtils.collect(\n@@ -138,7 +138,7 @@ public GroupTO transform(final Group input) {\n                 }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_SEARCH')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n@@ -147,7 +147,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n                 searchCondition, SubjectType.GROUP);\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_SEARCH')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n@@ -165,7 +165,7 @@ public GroupTO transform(final Group input) {\n         }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_CREATE + \"')\")\n     public GroupTO create(final GroupTO groupTO) {\n         if (groupTO.getRealm() == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -191,7 +191,7 @@ public GroupTO create(final GroupTO groupTO) {\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO update(final GroupMod groupMod) {\n         Group group = groupDAO.authFetch(groupMod.getKey());\n@@ -216,7 +216,7 @@ public GroupTO update(final GroupMod groupMod) {\n         return updatedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n     @Override\n     public GroupTO delete(final Long groupKey) {\n         Group group = groupDAO.authFetch(groupKey);\n@@ -253,7 +253,7 @@ public String transform(final Group group) {\n         return groupTO;\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO unlink(final Long groupKey, final Collection<String> resources) {\n@@ -265,7 +265,7 @@ public GroupTO unlink(final Long groupKey, final Collection<String> resources) {\n         return binder.getGroupTO(updatedResult);\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO link(final Long groupKey, final Collection<String> resources) {\n@@ -275,7 +275,7 @@ public GroupTO link(final Long groupKey, final Collection<String> resources) {\n         return binder.getGroupTO(provisioningManager.link(groupMod));\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO unassign(final Long groupKey, final Collection<String> resources) {\n@@ -285,7 +285,7 @@ public GroupTO unassign(final Long groupKey, final Collection<String> resources)\n         return update(groupMod);\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO assign(\n@@ -297,7 +297,7 @@ public GroupTO assign(\n         return update(userMod);\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO deprovision(final Long groupKey, final Collection<String> resources) {\n@@ -310,7 +310,7 @@ public GroupTO deprovision(final Long groupKey, final Collection<String> resourc\n         return updatedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public GroupTO provision("},{"sha":"ab5389b19484ba60210895845c6873f73da3536e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -98,13 +99,13 @@ public LoggerTO transform(final Logger logger) {\n         }, new ArrayList<LoggerTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('LOG_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n         return list(LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('AUDIT_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n         return CollectionUtils2.collect(list(LoggerType.AUDIT), new Transformer<LoggerTO, AuditLoggerName>() {\n@@ -162,12 +163,12 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('LOG_SET_LEVEL')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_SET_LEVEL + \"')\")\n     public LoggerTO setLogLevel(final String name, final Level level) {\n         return setLevel(name, level, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('AUDIT_ENABLE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_ENABLE + \"')\")\n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, LoggerType.AUDIT);\n@@ -202,12 +203,12 @@ private LoggerTO delete(final String name, final LoggerType expectedType) throws\n         return loggerToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('LOG_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_DELETE + \"')\")\n     public LoggerTO deleteLog(final String name) throws NotFoundException {\n         return delete(name, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('AUDIT_DISABLE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_DISABLE + \"')\")\n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             delete(auditLoggerName.toLoggerName(), LoggerType.AUDIT);\n@@ -220,7 +221,7 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('AUDIT_LIST') or hasRole('NOTIFICATION_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_LIST + \"') or hasRole('\" + Entitlement.NOTIFICATION_LIST + \"')\")\n     public List<EventCategoryTO> listAuditEvents() {\n         // use set to avoid duplications or null elements\n         Set<EventCategoryTO> events = new HashSet<>();"},{"sha":"cb1f041333774e7e3d466cee2772827f7a8564ae","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -42,7 +43,7 @@ public class NotificationLogic extends AbstractTransactionalLogic<NotificationTO\n     @Autowired\n     private NotificationDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_READ + \"')\")\n     public NotificationTO read(final Long notificationKey) {\n         Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {\n@@ -54,7 +55,7 @@ public NotificationTO read(final Long notificationKey) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_LIST + \"')\")\n     public List<NotificationTO> list() {\n         return CollectionUtils.collect(notificationDAO.findAll(), new Transformer<Notification, NotificationTO>() {\n \n@@ -65,12 +66,12 @@ public NotificationTO transform(final Notification input) {\n         }, new ArrayList<NotificationTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_CREATE + \"')\")\n     public NotificationTO create(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notificationDAO.save(binder.create(notificationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_UPDATE + \"')\")\n     public NotificationTO update(final NotificationTO notificationTO) {\n         Notification notification = notificationDAO.find(notificationTO.getKey());\n         if (notification == null) {\n@@ -84,7 +85,7 @@ public NotificationTO update(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('NOTIFICATION_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.NOTIFICATION_DELETE + \"')\")\n     public NotificationTO delete(final Long notificationKey) {\n         Notification notification = notificationDAO.find(notificationKey);\n         if (notification == null) {"},{"sha":"80409aab711ff9284a4ab3a05ae41b10f1e5c37b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.to.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -49,7 +50,7 @@ public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n     @Autowired\n     private PolicyDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_CREATE + \"')\")\n     public <T extends AbstractPolicyTO> T create(final T policyTO) {\n         return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n@@ -60,7 +61,7 @@ private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO\n         return binder.getPolicyTO(savedPolicy);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n     public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof PasswordPolicy)) {\n@@ -70,7 +71,7 @@ public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n     public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof AccountPolicy)) {\n@@ -80,7 +81,7 @@ public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_UPDATE + \"')\")\n     public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof SyncPolicy)) {\n@@ -90,7 +91,7 @@ public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         return update(policyTO, policy);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_LIST + \"')\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n         return CollectionUtils.collect(policyDAO.find(type), new Transformer<Policy, T>() {\n \n@@ -101,7 +102,7 @@ public T transform(final Policy input) {\n         }, new ArrayList<T>());\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_READ + \"')\")\n     public <T extends AbstractPolicyTO> T read(final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n@@ -111,7 +112,7 @@ public <T extends AbstractPolicyTO> T read(final Long id) {\n         return binder.getPolicyTO(policy);\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_DELETE + \"')\")\n     public <T extends AbstractPolicyTO> T delete(final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {"},{"sha":"6d4b02c37d45ae9ec908fc976d537a7623b4628b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -42,7 +43,7 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     @Autowired\n     private RealmDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('REALM_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_LIST + \"')\")\n     public List<RealmTO> list(final String fullPath) {\n         Realm realm = realmDAO.find(fullPath);\n         if (realm == null) {\n@@ -60,12 +61,12 @@ public RealmTO transform(final Realm input) {\n         }, new ArrayList<RealmTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('REALM_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_CREATE + \"')\")\n     public RealmTO create(final String parentPath, final RealmTO realmTO) {\n         return binder.getRealmTO(realmDAO.save(binder.create(parentPath, realmTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('REALM_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_UPDATE + \"')\")\n     public RealmTO update(final RealmTO realmTO) {\n         Realm realm = realmDAO.find(realmTO.getFullPath());\n         if (realm == null) {\n@@ -80,7 +81,7 @@ public RealmTO update(final RealmTO realmTO) {\n         return binder.getRealmTO(realm);\n     }\n \n-    @PreAuthorize(\"hasRole('REALM_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REALM_DELETE + \"')\")\n     public RealmTO delete(final String fullPath) {\n         Realm realm = realmDAO.find(fullPath);\n         if (realm == null) {"},{"sha":"fb92b3e2f3cc674f9013da42491aaab9d9a89531","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -97,7 +98,7 @@ public class ReportLogic extends AbstractTransactionalLogic<ReportTO> {\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n         binder.getReport(report, reportTO);\n@@ -116,7 +117,7 @@ public ReportTO create(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_UPDATE + \"')\")\n     public ReportTO update(final ReportTO reportTO) {\n         Report report = reportDAO.find(reportTO.getKey());\n         if (report == null) {\n@@ -139,12 +140,12 @@ public ReportTO update(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n     public int count() {\n         return reportDAO.count();\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n     public List<ReportTO> list(final int page, final int size, final List<OrderByClause> orderByClauses) {\n         return CollectionUtils.collect(reportDAO.findAll(page, size, orderByClauses),\n                 new Transformer<Report, ReportTO>() {\n@@ -191,7 +192,7 @@ public Class<Reportlet> transform(final String className) {\n                 PredicateUtils.notNullPredicate(), new HashSet<Class<Reportlet>>());\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n     public Set<String> getReportletConfClasses() {\n         return CollectionUtils2.collect(getAllReportletClasses(),\n                 new Transformer<Class<Reportlet>, String>() {\n@@ -216,7 +217,7 @@ public Class<Reportlet> findReportletClassHavingConfClass(final Class<? extends\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     public ReportTO read(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -225,7 +226,7 @@ public ReportTO read(final Long reportKey) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ReportExecTO readExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n@@ -235,7 +236,7 @@ public ReportExecTO readExecution(final Long executionKey) {\n         return binder.getReportExecTO(reportExec);\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n@@ -301,7 +302,7 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     public ReportExec getAndCheckReportExec(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n@@ -317,7 +318,7 @@ public ReportExec getAndCheckReportExec(final Long executionKey) {\n         return reportExec;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n     public ReportExecTO execute(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -346,7 +347,7 @@ public ReportExecTO execute(final Long reportKey) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_DELETE + \"')\")\n     public ReportTO delete(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);\n         if (report == null) {\n@@ -359,7 +360,7 @@ public ReportTO delete(final Long reportKey) {\n         return deletedReport;\n     }\n \n-    @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_DELETE + \"')\")\n     public ReportExecTO deleteExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {"},{"sha":"4d31e8d360ff3baf8de27d78995ba9b230f19339","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -83,7 +84,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private AttributableUtilsFactory attrUtilsFactory;\n \n-    @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -109,7 +110,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_UPDATE + \"')\")\n     public ResourceTO update(final ResourceTO resourceTO) {\n         ExternalResource resource = resourceDAO.find(resourceTO.getKey());\n         if (resource == null) {\n@@ -130,7 +131,7 @@ public ResourceTO update(final ResourceTO resourceTO) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_DELETE + \"')\")\n     public ResourceTO delete(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n@@ -144,7 +145,7 @@ public ResourceTO delete(final String resourceName) {\n         return resourceToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ResourceTO read(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n@@ -167,7 +168,7 @@ public ResourceTO transform(final ExternalResource input) {\n         }, new ArrayList<ResourceTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_GETCONNECTOROBJECT')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.RESOURCE_GETCONNECTOROBJECT + \"')\")\n     @Transactional(readOnly = true)\n     public ConnObjectTO getConnectorObject(final String resourceName, final SubjectType type, final Long id) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n@@ -213,7 +214,7 @@ public ConnObjectTO getConnectorObject(final String resourceName, final SubjectT\n         return connObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public boolean check(final ResourceTO resourceTO) {\n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);"},{"sha":"cfe2c5bfd025ac74f1d294b222ea482118a18bc8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -42,7 +43,7 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @PreAuthorize(\"hasRole('ROLE_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_READ + \"')\")\n     public RoleTO read(final Long roleKey) {\n         Role role = roleDAO.find(roleKey);\n         if (role == null) {\n@@ -54,7 +55,7 @@ public RoleTO read(final Long roleKey) {\n         return binder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_LIST + \"')\")\n     public List<RoleTO> list() {\n         return CollectionUtils.collect(roleDAO.findAll(), new Transformer<Role, RoleTO>() {\n \n@@ -65,12 +66,12 @@ public RoleTO transform(final Role input) {\n         }, new ArrayList<RoleTO>());\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_CREATE + \"')\")\n     public RoleTO create(final RoleTO roleTO) {\n         return binder.getRoleTO(roleDAO.save(binder.create(roleTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_UPDATE + \"')\")\n     public RoleTO update(final RoleTO roleTO) {\n         Role role = roleDAO.find(roleTO.getKey());\n         if (role == null) {\n@@ -84,7 +85,7 @@ public RoleTO update(final RoleTO roleTO) {\n         return binder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROLE_DELETE + \"')\")\n     public RoleTO delete(final Long roleKey) {\n         Role role = roleDAO.find(roleKey);\n         if (role == null) {"},{"sha":"a9c509ca23f874d269ef7dac5c1c63128c7b66bb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -89,7 +90,7 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name,\n         return found;\n     }\n \n-    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_CREATE + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractSchemaTO> T create(\n             final AttributableType attrType, final SchemaType schemaType, final T schemaTO) {\n@@ -132,7 +133,7 @@ public <T extends AbstractSchemaTO> T create(\n         return created;\n     }\n \n-    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_DELETE + \"')\")\n     public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n         final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n \n@@ -199,7 +200,7 @@ public T transform(final PlainSchema input) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_READ + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractSchemaTO> T read(\n             final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n@@ -239,7 +240,7 @@ public <T extends AbstractSchemaTO> T read(\n         return read;\n     }\n \n-    @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SCHEMA_UPDATE + \"')\")\n     public <T extends AbstractSchemaTO> void update(\n             final AttributableType attrType, final SchemaType schemaType, final T schemaTO) {\n "},{"sha":"8004c524aded685655448f89e3c5e176bd0eca45","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -71,12 +72,12 @@ public SecurityQuestionTO read(final Long securityQuestionId) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('SECURITY_QUESTION_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_CREATE + \"')\")\n     public SecurityQuestionTO create(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestionDAO.save(binder.create(securityQuestionTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('SECURITY_QUESTION_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_UPDATE + \"')\")\n     public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionTO.getKey());\n         if (securityQuestion == null) {\n@@ -91,7 +92,7 @@ public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('SECURITY_QUESTION_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.SECURITY_QUESTION_DELETE + \"')\")\n     public SecurityQuestionTO delete(final Long securityQuestionId) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionId);\n         if (securityQuestion == null) {\n@@ -105,7 +106,7 @@ public SecurityQuestionTO delete(final Long securityQuestionId) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     public SecurityQuestionTO read(final String username) {\n         if (username == null) {\n             throw new NotFoundException(\"Null username\");"},{"sha":"7a64aff8f1904157a11077e3a2c1c35d4db02ad0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -86,7 +87,7 @@ public class TaskLogic extends AbstractTransactionalLogic<AbstractTaskTO> {\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n-    @PreAuthorize(\"hasRole('TASK_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_CREATE + \"')\")\n     public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n \n@@ -106,12 +107,12 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         return binder.getTaskTO(task, taskUtils);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_UPDATE + \"')\")\n     public SyncTaskTO updateSync(final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_UPDATE + \"')\")\n     public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         SchedTask task = taskDAO.find(taskTO.getKey());\n         if (task == null) {\n@@ -136,12 +137,12 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         return binder.getTaskTO(task, taskUtils);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n     public int count(final TaskType taskType) {\n         return taskDAO.count(taskType);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(final TaskType taskType,\n             final int page, final int size, final List<OrderByClause> orderByClauses) {\n@@ -158,7 +159,7 @@ public T transform(final Task task) {\n                 }, new ArrayList<T>());\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n     public <T extends AbstractTaskTO> T read(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n@@ -167,7 +168,7 @@ public <T extends AbstractTaskTO> T read(final Long taskId) {\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n     public TaskExecTO readExecution(final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n@@ -176,7 +177,7 @@ public TaskExecTO readExecution(final Long executionId) {\n         return binder.getTaskExecTO(taskExec);\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n     public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n@@ -230,7 +231,7 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_READ + \"')\")\n     public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\n         TaskExec exec = taskExecDAO.find(executionId);\n         if (exec == null) {\n@@ -272,7 +273,7 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n         return binder.getTaskExecTO(taskExecDAO.save(exec));\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n     public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n@@ -293,7 +294,7 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         return taskToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_DELETE + \"')\")\n     public TaskExecTO deleteExecution(final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {"},{"sha":"a261cd3de8a590c87abc18819c8d8fd8f18de452","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -100,25 +100,25 @@ public class UserLogic extends AbstractSubjectLogic<UserTO, UserMod> {\n     @Autowired\n     protected SyncopeLogic syncopeLogic;\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n     public String getUsername(final Long key) {\n         return binder.getUserTO(key).getUsername();\n     }\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n     public Long getKey(final String username) {\n         return binder.getUserTO(username).getKey();\n     }\n \n-    @PreAuthorize(\"hasRole('USER_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public int count(final List<String> realms) {\n         return userDAO.count(\n                 getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms));\n     }\n \n-    @PreAuthorize(\"hasRole('USER_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_LIST + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<UserTO> list(\n@@ -144,14 +144,14 @@ public Pair<String, UserTO> readSelf() {\n                 binder.getAuthenticatedUserTO());\n     }\n \n-    @PreAuthorize(\"hasRole('USER_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final Long key) {\n         return binder.getUserTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_SEARCH')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n@@ -160,7 +160,7 @@ public int searchCount(final SearchCond searchCondition, final List<String> real\n                 searchCondition, SubjectType.USER);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_SEARCH')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n@@ -178,12 +178,12 @@ public UserTO transform(final User input) {\n         }, new ArrayList<UserTO>());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     public UserTO createSelf(final UserTO userTO, final boolean storePassword) {\n         return doCreate(userTO, storePassword);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_CREATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n         if (userTO.getRealm() == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -211,7 +211,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO updateSelf(final UserMod userMod) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n \n@@ -222,7 +222,7 @@ public UserTO updateSelf(final UserMod userMod) {\n         return update(userMod);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO update(final UserMod userMod) {\n         // AttributableMod transformation (if configured)\n@@ -274,7 +274,7 @@ protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final Us\n         return updated;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO status(final StatusMod statusMod) {\n         User user = userDAO.authFetch(statusMod.getKey());\n@@ -285,7 +285,7 @@ public UserTO status(final StatusMod statusMod) {\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (username == null) {\n@@ -306,7 +306,7 @@ public void requestPasswordReset(final String username, final String securityAns\n         provisioningManager.requestPasswordReset(user.getKey());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void confirmPasswordReset(final String token, final String password) {\n         User user = userDAO.findByToken(token);\n@@ -316,14 +316,14 @@ public void confirmPasswordReset(final String token, final String password) {\n         provisioningManager.confirmPasswordReset(user, token, password);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO deleteSelf() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n \n         return delete(userTO.getKey());\n     }\n \n-    @PreAuthorize(\"hasRole('USER_DELETE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_DELETE + \"')\")\n     @Override\n     public UserTO delete(final Long key) {\n         List<Group> ownedGroups = groupDAO.findOwnedByUser(key);\n@@ -354,7 +354,7 @@ public String transform(final Group group) {\n         return deletedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unlink(final Long key, final Collection<String> resources) {\n@@ -366,7 +366,7 @@ public UserTO unlink(final Long key, final Collection<String> resources) {\n         return binder.getUserTO(updatedId);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO link(final Long key, final Collection<String> resources) {\n@@ -376,7 +376,7 @@ public UserTO link(final Long key, final Collection<String> resources) {\n         return binder.getUserTO(provisioningManager.link(userMod));\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unassign(final Long key, final Collection<String> resources) {\n@@ -386,7 +386,7 @@ public UserTO unassign(final Long key, final Collection<String> resources) {\n         return update(userMod);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO assign(\n@@ -410,7 +410,7 @@ public UserTO assign(\n         return update(userMod);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO deprovision(final Long key, final Collection<String> resources) {\n@@ -423,7 +423,7 @@ public UserTO deprovision(final Long key, final Collection<String> resources) {\n         return updatedUserTO;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO provision("},{"sha":"d1a1657ee7333efeb853af6d9477ced0cce0a3ea","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -57,13 +58,13 @@ public class UserWorkflowLogic extends AbstractTransactionalLogic<WorkflowFormTO\n     @Autowired\n     private UserDAO userDAO;\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_CLAIM + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(final String taskId) {\n         return uwfAdapter.claimForm(taskId);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n@@ -80,27 +81,27 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         return binder.getUserTO(updated.getResult());\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(final Long key) {\n         User user = userDAO.authFetch(key);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_LIST + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms() {\n         return uwfAdapter.getForms();\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_READ + \"') and hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms(final Long key, final String formName) {\n         User user = userDAO.authFetch(key);\n         return uwfAdapter.getForms(user.getWorkflowId(), formName);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n         WorkflowResult<? extends AbstractAttributableMod> updated = uwfAdapter.submitForm(form);"},{"sha":"d31500c9e7cb07f91c4790a1e6c031f335cef7a0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/WorkflowLogic.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -22,6 +22,7 @@\n import java.lang.reflect.Method;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.WorkflowAdapter;\n@@ -54,15 +55,15 @@ private WorkflowDefinitionFormat getFormat(final MediaType format) {\n                 : WorkflowDefinitionFormat.XML;\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDefinition(final MediaType format, final OutputStream os)\n             throws WorkflowException {\n \n         exportDefinition(uwfAdapter, getFormat(format), os);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportGroupDefinition(final MediaType format, final OutputStream os)\n             throws WorkflowException {\n@@ -72,19 +73,19 @@ public void exportGroupDefinition(final MediaType format, final OutputStream os)\n \n     private void exportDiagram(final WorkflowAdapter adapter, final OutputStream os)\n             throws WorkflowException {\n-        \n+\n         adapter.exportDiagram(os);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportUserDiagram(final OutputStream os)\n             throws WorkflowException {\n \n         exportDiagram(uwfAdapter, os);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void exportGroupDiagram(final OutputStream os)\n             throws WorkflowException {\n@@ -98,12 +99,12 @@ private void importDefinition(\n         adapter.importDefinition(format, definition);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importUserDefinition(final MediaType format, final String definition) {\n         importDefinition(uwfAdapter, getFormat(format), definition);\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_DEF_UPDATE + \"')\")\n     public void importGroupDefinition(final MediaType format, final String definition) {\n         importDefinition(gwfAdapter, getFormat(format), definition);\n     }"},{"sha":"736d1d363a679bb0ae976cad92e363d5d3ddd857","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -26,7 +26,6 @@\n import com.icegreen.greenmail.util.ServerSetup;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Random;\n@@ -209,11 +208,11 @@ private static UserTO getSampleTO(final String email) {\n \n     @Before\n     public void setupSecurity() {\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Arrays.asList(Entitlement.values()),\n-                new Transformer<Entitlement, GrantedAuthority>() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n \n                     @Override\n-                    public GrantedAuthority transform(final Entitlement entitlement) {\n+                    public GrantedAuthority transform(final String entitlement) {\n                         return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n                     }\n                 }, new ArrayList<GrantedAuthority>());"},{"sha":"6eebf01fc27b29ad07660ec1b2c7a1f3144e626e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -18,12 +18,11 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.EnumMap;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.MapUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n@@ -47,16 +46,16 @@ public static void updateAuthenticatedUsername(final String newUsername) {\n         SecurityContextHolder.getContext().setAuthentication(newAuth);\n     }\n \n-    public static Map<Entitlement, Set<String>> getAuthorizations() {\n-        Map<Entitlement, Set<String>> result = null;\n+    public static Map<String, Set<String>> getAuthorizations() {\n+        Map<String, Set<String>> result = null;\n \n         final SecurityContext ctx = SecurityContextHolder.getContext();\n         if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n-            result = new EnumMap<>(Entitlement.class);\n+            result = new HashMap<>();\n             for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n                 if (authority instanceof SyncopeGrantedAuthority) {\n                     result.put(\n-                            SyncopeGrantedAuthority.class.cast(authority).getEntitlement(),\n+                            SyncopeGrantedAuthority.class.cast(authority).getAuthority(),\n                             SyncopeGrantedAuthority.class.cast(authority).getRealms());\n                 }\n             }"},{"sha":"78dccc422f912c4030a1096ce7f57d167410de0c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -25,23 +25,22 @@\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.SetUtils;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.springframework.security.core.GrantedAuthority;\n \n public class SyncopeGrantedAuthority implements GrantedAuthority {\n \n     private static final long serialVersionUID = -5647624636011919735L;\n \n-    private final Entitlement entitlement;\n+    private final String entitlement;\n \n     private final Set<String> realms = SetUtils.orderedSet(new HashSet<String>());\n \n-    public SyncopeGrantedAuthority(final Entitlement entitlement) {\n+    public SyncopeGrantedAuthority(final String entitlement) {\n         this.entitlement = entitlement;\n     }\n \n-    public SyncopeGrantedAuthority(final Entitlement entitlement, final String realm) {\n+    public SyncopeGrantedAuthority(final String entitlement, final String realm) {\n         this.entitlement = entitlement;\n         this.realms.add(realm);\n     }\n@@ -60,17 +59,13 @@ public void execute(final String newRealm) {\n         });\n     }\n \n-    public Entitlement getEntitlement() {\n-        return entitlement;\n-    }\n-\n     public Set<String> getRealms() {\n         return Collections.unmodifiableSet(realms);\n     }\n \n     @Override\n     public String getAuthority() {\n-        return entitlement.name();\n+        return entitlement;\n     }\n \n }"},{"sha":"9b9ee5fc9b181b1625bd92460652d0557a3c4289","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeUserDetailsService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -65,11 +65,11 @@ public UserDetails loadUserByUsername(final String username) {\n         if (anonymousUser.equals(username)) {\n             authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            CollectionUtils2.collect(Arrays.asList(Entitlement.values()),\n-                    new Transformer<Entitlement, SyncopeGrantedAuthority>() {\n+            CollectionUtils2.collect(Entitlement.values(),\n+                    new Transformer<String, SyncopeGrantedAuthority>() {\n \n                         @Override\n-                        public SyncopeGrantedAuthority transform(final Entitlement entitlement) {\n+                        public SyncopeGrantedAuthority transform(final String entitlement) {\n                             return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n                         }\n                     },\n@@ -83,10 +83,10 @@ public SyncopeGrantedAuthority transform(final Entitlement entitlement) {\n \n             // Give entitlements as assigned by roles (with realms, where applicable)\n             for (final Role role : user.getRoles()) {\n-                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<Entitlement>() {\n+                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n \n                     @Override\n-                    public void execute(final Entitlement entitlement) {\n+                    public void execute(final String entitlement) {\n                         SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n                         authorities.add(authority);\n \n@@ -105,7 +105,7 @@ public String transform(final Realm realm) {\n \n             // Give group entitlements for owned groups\n             for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                for (Entitlement entitlement : Arrays.asList(\n+                for (String entitlement : Arrays.asList(\n                         Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n \n                     SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);"},{"sha":"e0711cedf631578d12d4567b6467ed3b07959b19","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/EntitlementCond.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eb9ea2a279000f8c52780404e410efc888078dee/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eb9ea2a279000f8c52780404e410efc888078dee/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FEntitlementCond.java?ref=eb9ea2a279000f8c52780404e410efc888078dee","patch":"@@ -1,39 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao.search;\n-\n-public class EntitlementCond extends AbstractSearchCond {\n-\n-    private static final long serialVersionUID = -4077781080368377428L;\n-\n-    private String expression;\n-\n-    public String getExpression() {\n-        return expression;\n-    }\n-\n-    public void setExpression(final String expression) {\n-        this.expression = expression;\n-    }\n-\n-    @Override\n-    public boolean isValid() {\n-        return expression != null;\n-    }\n-}"},{"sha":"030a253322ecd001b8e0210bb8e919510293aa43","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":4,"deletions":29,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -43,8 +43,6 @@ public enum Type {\n \n     private ResourceCond resourceCond;\n \n-    private EntitlementCond entitlementCond;\n-\n     private SearchCond leftNodeCond;\n \n     private SearchCond rightNodeCond;\n@@ -80,15 +78,6 @@ public static SearchCond getLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n-    public static SearchCond getLeafCond(final EntitlementCond entitlementCond) {\n-        SearchCond nodeCond = new SearchCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.entitlementCond = entitlementCond;\n-\n-        return nodeCond;\n-    }\n-\n     public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n         SearchCond nodeCond = getLeafCond(attributeCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -107,12 +96,6 @@ public static SearchCond getNotLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n-    public static SearchCond getNotLeafCond(final EntitlementCond entitlementCond) {\n-        SearchCond nodeCond = getLeafCond(entitlementCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n     public static SearchCond getNotLeafCond(final SearchCond nodeCond) {\n         nodeCond.type = Type.NOT_LEAF;\n         return nodeCond;\n@@ -188,14 +171,6 @@ public void setResourceCond(final ResourceCond resourceCond) {\n         this.resourceCond = resourceCond;\n     }\n \n-    public EntitlementCond getEntitlementCond() {\n-        return entitlementCond;\n-    }\n-\n-    public void setEntitlementCond(final EntitlementCond entitlementCond) {\n-        this.entitlementCond = entitlementCond;\n-    }\n-\n     public SearchCond getLeftNodeCond() {\n         return leftNodeCond;\n     }\n@@ -220,6 +195,7 @@ public void setType(final Type type) {\n         this.type = type;\n     }\n \n+    @Override\n     public boolean isValid() {\n         boolean isValid = false;\n \n@@ -230,13 +206,12 @@ public boolean isValid() {\n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                isValid = (subjectCond != null || attributeCond != null || membershipCond != null\n-                        || resourceCond != null || entitlementCond != null)\n+                isValid = (subjectCond != null || attributeCond != null\n+                        || membershipCond != null || resourceCond != null)\n                         && (subjectCond == null || subjectCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())\n                         && (membershipCond == null || membershipCond.isValid())\n-                        && (resourceCond == null || resourceCond.isValid())\n-                        && (entitlementCond == null || entitlementCond.isValid());\n+                        && (resourceCond == null || resourceCond.isValid());\n                 break;\n \n             case AND:"},{"sha":"28b82d38b3b4a165209ca2cf4a0f293aedc6f167","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -20,15 +20,14 @@\n \n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.lib.types.Entitlement;\n \n public interface Role extends Entity<Long> {\n \n     String getName();\n \n     void setName(String name);\n \n-    Set<Entitlement> getEntitlements();\n+    Set<String> getEntitlements();\n \n     boolean addRealm(Realm realm);\n "},{"sha":"9cd381a46ae673e9f608363ac64f73b59a5f1fd0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASubjectSearchDAO.java","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.EntitlementCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n@@ -427,10 +426,6 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n                     query.append(getQuery(nodeCond.getResourceCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n                 }\n-                if (nodeCond.getEntitlementCond() != null) {\n-                    query.append(getQuery(nodeCond.getEntitlementCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                }\n                 if (nodeCond.getAttributeCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributeCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n@@ -510,20 +505,6 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n         return query.toString();\n     }\n \n-    private String getQuery(final EntitlementCond cond, final boolean not, final List<Object> parameters,\n-            final SearchSupport svs) {\n-\n-        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n-                append(svs.entitlements().name).\n-                append(\" WHERE entitlement_name \");\n-        if (not) {\n-            query.append(\" NOT \");\n-        }\n-        query.append(\" LIKE ?\").append(setParameter(parameters, cond.getExpression()));\n-\n-        return query.toString();\n-    }\n-\n     private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue attrValue,\n             final PlainSchema schema, final AttributeCond cond, final boolean not,\n             final List<Object> parameters, final SearchSupport svs) {"},{"sha":"f88f430407e0c7d990931a59ee097b9ad34bb434","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -27,8 +27,6 @@\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.JoinColumn;\n@@ -37,7 +35,6 @@\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n@@ -58,12 +55,11 @@ public class JPARole extends AbstractEntity<Long> implements Role {\n     private String name;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Enumerated(EnumType.STRING)\n     @Column(name = \"entitlement\")\n     @CollectionTable(name = \"SyncopeRole_entitlements\",\n             joinColumns =\n             @JoinColumn(name = \"role_id\", referencedColumnName = \"id\"))\n-    private Set<Entitlement> entitlements = new HashSet<>();\n+    private Set<String> entitlements = new HashSet<>();\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n@@ -89,7 +85,7 @@ public void setName(final String name) {\n     }\n \n     @Override\n-    public Set<Entitlement> getEntitlements() {\n+    public Set<String> getEntitlements() {\n         return entitlements;\n     }\n "},{"sha":"05ab03ac4cc4b6262b8781d1e3cab59f0caff424","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -312,11 +311,11 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n-        List<GrantedAuthority> authorities = CollectionUtils.collect(Arrays.asList(Entitlement.values()),\n-                new Transformer<Entitlement, GrantedAuthority>() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Entitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n \n                     @Override\n-                    public GrantedAuthority transform(final Entitlement entitlement) {\n+                    public GrantedAuthority transform(final String entitlement) {\n                         return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n                     }\n                 }, new ArrayList<GrantedAuthority>());"},{"sha":"c96c3f0e0cf5a197d55bf5a6d0c2e521824eec44","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -45,7 +46,7 @@ public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n     @Autowired\n     private SyncopeCamelContext context;\n \n-    @PreAuthorize(\"hasRole('ROUTE_LIST')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<CamelRouteTO> list(final SubjectType subjectType) {\n         List<CamelRouteTO> routes = new ArrayList<>();\n@@ -56,7 +57,7 @@ public List<CamelRouteTO> list(final SubjectType subjectType) {\n         return routes;\n     }\n \n-    @PreAuthorize(\"hasRole('ROUTE_READ')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public CamelRouteTO read(final String key) {\n         CamelRoute route = routeDAO.find(key);\n@@ -67,7 +68,7 @@ public CamelRouteTO read(final String key) {\n         return binder.getRouteTO(route);\n     }\n \n-    @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_UPDATE + \"')\")\n     public void update(final CamelRouteTO routeTO) {\n         CamelRoute route = routeDAO.find(routeTO.getKey());\n         if (route == null) {\n@@ -80,7 +81,7 @@ public void update(final CamelRouteTO routeTO) {\n         context.updateContext(routeTO.getKey());\n     }\n \n-    @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n+    @PreAuthorize(\"hasRole('\" + Entitlement.ROUTE_UPDATE + \"')\")\n     public void restartContext() {\n         context.restartContext();\n     }"},{"sha":"9598436d034149b650f55b8f701ca437ba5d1b2c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -92,14 +92,14 @@ public void testReadEntitlements() {\n         }\n \n         // 2. as authenticated anonymous (used by admin console)\n-        Pair<Map<Entitlement, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n+        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n         assertEquals(1, self.getKey().size());\n         assertTrue(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n         assertEquals(ANONYMOUS_UNAME, self.getValue().getUsername());\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(Entitlement.values().length - 1, self.getKey().size());\n+        assertEquals(Entitlement.values().size() - 1, self.getKey().size());\n         assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n@@ -328,7 +328,7 @@ public void issueSYNCOPE434() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         // 4. try to authenticate again: success\n-        Pair<Map<Entitlement, Set<String>>, UserTO> self =\n+        Pair<Map<String, Set<String>>, UserTO> self =\n                 clientFactory.create(userTO.getUsername(), \"password123\").self();\n         assertNotNull(self);\n         assertNotNull(self.getKey());\n@@ -365,7 +365,7 @@ public void issueSYNCOPE164() throws Exception {\n         assertEquals(Encryptor.getInstance().encode(\"password123\", CipherAlgorithm.SHA1), value.toUpperCase());\n \n         // 5. successfully authenticate with old (on db resource) and new (on internal storage) password values\n-        Pair<Map<Entitlement, Set<String>>, UserTO> self =\n+        Pair<Map<String, Set<String>>, UserTO> self =\n                 clientFactory.create(user.getUsername(), \"password123\").self();\n         assertNotNull(self);\n         self = clientFactory.create(user.getUsername(), \"password234\").self();"},{"sha":"723a10aa5469842c2c788815703a7f24c8459a27","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -68,7 +68,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n@@ -401,7 +400,7 @@ public void create() {\n \n         // 3. verify password\n         try {\n-            Pair<Map<Entitlement, Set<String>>, UserTO> self =\n+            Pair<Map<String, Set<String>>, UserTO> self =\n                     clientFactory.create(newUserTO.getUsername(), \"password123\").self();\n             assertNotNull(self);\n         } catch (AccessControlException e) {"},{"sha":"f01a15c6a6d3be8d95d3d240800c56e888dfce7e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=8f1a9f5e5f5491f4b2f90a24b52dc5a052a6e9ea","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -136,7 +135,7 @@ public void read() {\n             assertNotNull(e);\n         }\n \n-        Pair<Map<Entitlement, Set<String>>, UserTO> self = clientFactory.create(\"rossini\", ADMIN_PWD).self();\n+        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\"rossini\", ADMIN_PWD).self();\n         assertEquals(\"rossini\", self.getValue().getUsername());\n     }\n "}]}