{"sha":"99abd29aed81754fa28a35ca72fcfd851e7910b4","node_id":"C_kwDOJfYA1toAKDk5YWJkMjlhZWQ4MTc1NGZhMjhhMzVjYTcyZmNmZDg1MWU3OTEwYjQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-07-28T13:53:00Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-07-28T13:53:00Z"},"message":"[SYNCOPE-1545] Proper support for delegated authentication (#365)","tree":{"sha":"6b18693654c93fa07c4841b4bd83c70785ab7dcc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6b18693654c93fa07c4841b4bd83c70785ab7dcc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/99abd29aed81754fa28a35ca72fcfd851e7910b4","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4pS8CRBK7hj4Ov3rIwAAdhMIABSc/tXu6hW0rMHBFNc1cbaW\namxthzLqcaElTiO75S8F7ISAcRzjKXXx0SCnFYqwOcl39Z/45MtNTEddTQI234m0\nKiZ1QqRDPjGlhaSLW4+Ksy/SHJUtCESy+QThemNWaDhYJONhYcUCEleVzISidxQS\nLYTNL3XZJO6crSTh5FCdOIQxHt4AQzqkfdkyjiYN3VaT/k8hzWa6sIhmd5Rbrktu\nKIhrDWM6VUmmfWpwQiKe0Smiu+X4hr2+SSq1T2XW7nLWnOJsvb0Bs9FOcW+cIjZp\n3aIBy9VcssGfoW/LZtlGy3Jhs/PptqXPS3WMFKUWavWS3I0TZF4r8gcqyRHwMiE=\n=R7qO\n-----END PGP SIGNATURE-----\n","payload":"tree 6b18693654c93fa07c4841b4bd83c70785ab7dcc\nparent 828e72a056e849882b090352c77b6c1797d76a60\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1659016380 +0200\ncommitter GitHub <noreply@github.com> 1659016380 +0200\n\n[SYNCOPE-1545] Proper support for delegated authentication (#365)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/99abd29aed81754fa28a35ca72fcfd851e7910b4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/99abd29aed81754fa28a35ca72fcfd851e7910b4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/99abd29aed81754fa28a35ca72fcfd851e7910b4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"828e72a056e849882b090352c77b6c1797d76a60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/828e72a056e849882b090352c77b6c1797d76a60","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/828e72a056e849882b090352c77b6c1797d76a60"}],"stats":{"total":501,"additions":391,"deletions":110},"files":[{"sha":"79cfc0ddd14e76fff7d717bfabb29e7effe5cceb","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/Pac4jAuthModuleConf.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FPac4jAuthModuleConf.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-import java.io.Serializable;\n-\n-public abstract class Pac4jAuthModuleConf implements Serializable {\n+public abstract class Pac4jAuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = -1354167135907851872L;\n "},{"sha":"5cd8a43e58e7eceb305a216941ea5c96dc69b68f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -61,16 +61,12 @@\n \n @SpringBootApplication(exclude = {\n     /*\n-    List of CAS-specific classes that we want to\n-    exclude from auto-configuration. This is required when there is a\n-    competing option/implementation available in Syncope that needs to be\n-    conditionally activated.\n+     * List of CAS-specific classes that we want to exclude from auto-configuration. This is required when there is a\n+     * competing option/implementation available in Syncope that needs to be conditionally activated.\n      */\n     GoogleAuthenticatorLdapConfiguration.class,\n-\n     /*\n-    List of Spring Boot classes that we want to disable\n-    and remove from auto-configuration.\n+     * List of Spring Boot classes that we want to disable and remove from auto-configuration.\n      */\n     HibernateJpaAutoConfiguration.class,\n     JerseyAutoConfiguration.class,\n@@ -96,14 +92,14 @@ public class SyncopeWAApplication extends SpringBootServletInitializer {\n \n     public static void main(final String[] args) {\n         new SpringApplicationBuilder(SyncopeWAApplication.class).\n-            properties(Map.of(\"spring.config.name\", \"wa\", \"spring.cloud.bootstrap.name\", \"wa\")).\n-            build().run(args);\n+                properties(Map.of(\"spring.config.name\", \"wa\", \"spring.cloud.bootstrap.name\", \"wa\")).\n+                build().run(args);\n     }\n \n     @Override\n     protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n         return builder.properties(Map.of(\"spring.config.name\", \"wa\",\n-            \"spring.cloud.bootstrap.name\", \"wa\")).sources(SyncopeWAApplication.class);\n+                \"spring.cloud.bootstrap.name\", \"wa\")).sources(SyncopeWAApplication.class);\n     }\n \n     /**\n@@ -119,8 +115,10 @@ public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n         scheduleJobToRefreshContext(waProperties, scheduler);\n     }\n \n-    protected void scheduleJobToRefreshContext(final  WAProperties waProperties,\n-                                               final SchedulerFactoryBean scheduler) {\n+    protected void scheduleJobToRefreshContext(\n+            final WAProperties waProperties,\n+            final SchedulerFactoryBean scheduler) {\n+\n         try {\n             Date date = Date.from(LocalDateTime.now().plusSeconds(waProperties.getContextRefreshDelay()).\n                     atZone(ZoneId.systemDefault()).toInstant());"},{"sha":"76bea8a57d22901a6298702e9d620b8905b37943","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WAContext.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -83,6 +83,7 @@\n import org.apereo.cas.support.events.CasEventRepository;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n+import org.apereo.cas.support.pac4j.authentication.handler.support.DelegatedClientAuthenticationHandler;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n@@ -165,10 +166,12 @@ public ClientAppMapper saml2SPClientAppTOMapper() {\n         return new SAML2SPClientAppTOMapper();\n     }\n \n+    @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n     @ConditionalOnMissingBean\n     @Bean\n     public RegisteredServiceMapper registeredServiceMapper(\n             final ConfigurableApplicationContext ctx,\n+            final CasConfigurationProperties casProperties,\n             final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan) {\n \n         Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n@@ -206,13 +209,17 @@ public RegisteredServiceMapper registeredServiceMapper(\n \n         return new RegisteredServiceMapper(\n                 ctx,\n+                Optional.ofNullable(casProperties.getAuthn().getPac4j().getCore().getName()).\n+                        orElse(DelegatedClientAuthenticationHandler.class.getSimpleName()),\n                 authenticationEventExecutionPlan,\n                 authPolicyConfMappers,\n                 accessPolicyConfMappers,\n                 attrReleasePolicyConfMappers,\n                 clientAppTOMappers);\n     }\n \n+    @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n+    @ConditionalOnMissingBean\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n             final ConfigurableApplicationContext ctx,"},{"sha":"7c0c1ab62df4c0443715614ea93f0119d8a42afb","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -19,20 +19,18 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.List;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n-import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.context.ConfigurableApplicationContext;\n \n @FunctionalInterface\n public interface AuthMapper {\n \n-    Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> build(\n+    AuthMapperResult build(\n             ConfigurableApplicationContext ctx,\n+            String pac4jCoreName,\n             ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n             AuthPolicyTO policy,\n             List<AuthModuleTO> authModules);"},{"sha":"cdb2440537cf010362dbf3fb474540b7c81672df","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapperResult.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceDelegatedAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n+\n+public class AuthMapperResult {\n+\n+    private final RegisteredServiceAuthenticationPolicy authPolicy;\n+\n+    private final RegisteredServiceMultifactorPolicy mfaPolicy;\n+\n+    private final RegisteredServiceDelegatedAuthenticationPolicy delegateAuthPolicy;\n+\n+    public AuthMapperResult(\n+            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final RegisteredServiceMultifactorPolicy mfaPolicy,\n+            final RegisteredServiceDelegatedAuthenticationPolicy delegateAuthPolicy) {\n+\n+        this.authPolicy = authPolicy;\n+        this.mfaPolicy = mfaPolicy;\n+        this.delegateAuthPolicy = delegateAuthPolicy;\n+    }\n+\n+    public RegisteredServiceAuthenticationPolicy getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    public RegisteredServiceMultifactorPolicy getMfaPolicy() {\n+        return mfaPolicy;\n+    }\n+\n+    public RegisteredServiceDelegatedAuthenticationPolicy getDelegateAuthPolicy() {\n+        return delegateAuthPolicy;\n+    }\n+}"},{"sha":"98bc45350164bbc09b4230e0792ff8286b95bde5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":28,"deletions":8,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -25,6 +25,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.auth.MFAAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.Pac4jAuthModuleConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n@@ -34,9 +35,8 @@\n import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.DefaultRegisteredServiceDelegatedAuthenticationPolicy;\n import org.apereo.cas.services.DefaultRegisteredServiceMultifactorPolicy;\n-import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.ObjectProvider;\n@@ -48,26 +48,39 @@ public class DefaultAuthMapper implements AuthMapper {\n     protected static final Logger LOG = LoggerFactory.getLogger(DefaultAuthMapper.class);\n \n     @Override\n-    public Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> build(\n+    public AuthMapperResult build(\n             final ConfigurableApplicationContext ctx,\n-            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n+            final String pac4jCoreName,\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authEventExecPlan,\n             final AuthPolicyTO policy,\n             final List<AuthModuleTO> authModules) {\n \n         DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n \n         Set<String> mfaAuthHandlers = new HashSet<>();\n+        Set<Pair<String, String>> delegatedAuthHandlers = new HashSet<>();\n \n         DefaultAuthPolicyConf policyConf = (DefaultAuthPolicyConf) policy.getConf();\n         if (!policyConf.getAuthModules().isEmpty()) {\n-            mfaAuthHandlers.addAll(authenticationEventExecutionPlan.getObject().getAuthenticationHandlers().stream().\n+            Set<String> authHandlers = new HashSet<>(policyConf.getAuthModules());\n+            mfaAuthHandlers.addAll(authEventExecPlan.getObject().getAuthenticationHandlers().stream().\n                     filter(MultifactorAuthenticationHandler.class::isInstance).\n                     filter(mfaAuthHander -> policyConf.getAuthModules().contains(mfaAuthHander.getName())).\n                     map(AuthenticationHandler::getName).\n                     collect(Collectors.toSet()));\n-\n-            Set<String> authHandlers = new HashSet<>(policyConf.getAuthModules());\n             authHandlers.removeAll(mfaAuthHandlers);\n+\n+            delegatedAuthHandlers.addAll(authModules.stream().\n+                    filter(m -> m.getConf() instanceof Pac4jAuthModuleConf).\n+                    map(m -> Pair.of(\n+                    m.getKey(),\n+                    Optional.ofNullable(((Pac4jAuthModuleConf) m.getConf()).getClientName()).orElse(m.getKey()))).\n+                    collect(Collectors.toSet()));\n+            if (!delegatedAuthHandlers.isEmpty()) {\n+                authHandlers.removeAll(delegatedAuthHandlers.stream().map(Pair::getLeft).collect(Collectors.toSet()));\n+                authHandlers.add(pac4jCoreName);\n+            }\n+\n             authPolicy.setRequiredAuthenticationHandlers(authHandlers);\n         }\n \n@@ -97,6 +110,13 @@ public Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorP\n             mfaPolicy.setMultifactorAuthenticationProviders(mfaProviders);\n         }\n \n-        return Pair.of(authPolicy, mfaPolicy);\n+        DefaultRegisteredServiceDelegatedAuthenticationPolicy delegatedAuthPolicy = null;\n+        if (!delegatedAuthHandlers.isEmpty()) {\n+            delegatedAuthPolicy = new DefaultRegisteredServiceDelegatedAuthenticationPolicy();\n+            delegatedAuthPolicy.getAllowedProviders().addAll(\n+                    delegatedAuthHandlers.stream().map(Pair::getRight).collect(Collectors.toSet()));\n+        }\n+\n+        return new AuthMapperResult(authPolicy, mfaPolicy, delegatedAuthPolicy);\n     }\n }"},{"sha":"954d7c8fc59b248b23f76b99ba8d3173bfbe3980","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -20,15 +20,16 @@\n \n import java.util.Map;\n import java.util.Optional;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.RegisteredServiceDelegatedAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceMultifactorPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -41,7 +42,9 @@ public class RegisteredServiceMapper {\n \n     protected final ConfigurableApplicationContext ctx;\n \n-    protected final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+    protected final String pac4jCoreName;\n+\n+    protected final ObjectProvider<AuthenticationEventExecutionPlan> authEventExecPlan;\n \n     protected final Map<String, AuthMapper> authPolicyConfMappers;\n \n@@ -53,14 +56,16 @@ public class RegisteredServiceMapper {\n \n     public RegisteredServiceMapper(\n             final ConfigurableApplicationContext ctx,\n-            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n+            final String pac4jCoreName,\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authEventExecPlan,\n             final Map<String, AuthMapper> authPolicyConfMappers,\n             final Map<String, AccessMapper> accessPolicyConfMappers,\n             final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers,\n             final Map<String, ClientAppMapper> clientAppTOMappers) {\n \n         this.ctx = ctx;\n-        this.authenticationEventExecutionPlan = authenticationEventExecutionPlan;\n+        this.pac4jCoreName = pac4jCoreName;\n+        this.authEventExecPlan = authEventExecPlan;\n         this.authPolicyConfMappers = authPolicyConfMappers;\n         this.accessPolicyConfMappers = accessPolicyConfMappers;\n         this.attrReleasePolicyConfMappers = attrReleasePolicyConfMappers;\n@@ -77,19 +82,16 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n \n         RegisteredServiceAuthenticationPolicy authPolicy = null;\n         RegisteredServiceMultifactorPolicy mfaPolicy = null;\n+        RegisteredServiceDelegatedAuthenticationPolicy delegatedAuthPolicy = null;\n         if (clientApp.getAuthPolicy() != null) {\n             AuthMapper authMapper = authPolicyConfMappers.get(\n                     clientApp.getAuthPolicy().getConf().getClass().getName());\n-            Pair<RegisteredServiceAuthenticationPolicy, RegisteredServiceMultifactorPolicy> mapped =\n-                    Optional.ofNullable(authMapper).map(mapper -> mapper.build(\n-                    ctx, authenticationEventExecutionPlan, clientApp.getAuthPolicy(), clientApp.getAuthModules())).\n-                            orElseGet(() -> Pair.of(null, null));\n-            if (mapped.getLeft() != null) {\n-                authPolicy = mapped.getLeft();\n-            }\n-            if (mapped.getRight() != null) {\n-                mfaPolicy = mapped.getRight();\n-            }\n+            AuthMapperResult result = Optional.ofNullable(authMapper).map(mapper -> mapper.build(\n+                    ctx, pac4jCoreName, authEventExecPlan, clientApp.getAuthPolicy(), clientApp.getAuthModules())).\n+                    orElseGet(() -> new AuthMapperResult(null, null, null));\n+            authPolicy = result.getAuthPolicy();\n+            mfaPolicy = result.getMfaPolicy();\n+            delegatedAuthPolicy = result.getDelegateAuthPolicy();\n         }\n \n         RegisteredServiceAccessStrategy accessStrategy = null;\n@@ -100,6 +102,18 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n                     map(mapper -> mapper.build(clientApp.getAccessPolicy())).\n                     orElse(null);\n         }\n+        if (delegatedAuthPolicy != null) {\n+            if (accessStrategy == null) {\n+                accessStrategy = new DefaultRegisteredServiceAccessStrategy();\n+            }\n+            if (accessStrategy instanceof DefaultRegisteredServiceAccessStrategy) {\n+                ((DefaultRegisteredServiceAccessStrategy) accessStrategy).\n+                        setDelegatedAuthenticationPolicy(delegatedAuthPolicy);\n+            } else {\n+                LOG.warn(\"Could not set delegated auth policy because access strategy is instance of {}\",\n+                        accessStrategy.getClass().getName());\n+            }\n+        }\n \n         AttrReleasePolicyTO attrReleasePolicyTO = Optional.ofNullable(clientApp.getAttrReleasePolicy()).\n                 orElseGet(() -> {"},{"sha":"c3d29277729e080de45700835309c709c88265c6","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/AbstractTest.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -33,15 +33,13 @@\n         properties = {\n             \"cas.authn.accept.users=mrossi::password\",\n             \"cas.authn.syncope.url=http://localhost:8080\",\n-            \"cas.sso.allow-missing-service-parameter=true\"\n+            \"cas.sso.allow-missing-service-parameter=true\",\n+            \"cas.authn.pac4j.core.name=DelegatedClientAuthenticationHandler\"\n         })\n @TestPropertySource(locations = { \"classpath:wa.properties\", \"classpath:test.properties\" })\n @ContextConfiguration(initializers = ZookeeperTestingServer.class)\n public abstract class AbstractTest {\n \n-    @LocalServerPort\n-    protected int port;\n-\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }\n@@ -55,4 +53,8 @@ public SyncopeCoreTestingServer syncopeCoreTestingServer() {\n             return new SyncopeCoreTestingServer();\n         }\n     }\n+\n+    @LocalServerPort\n+    protected int port;\n+\n }"},{"sha":"41de8806e645a4fddaef5eabe61f494875023084","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":165,"deletions":47,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -28,60 +28,151 @@\n import java.util.Objects;\n import java.util.stream.Collectors;\n import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.AttrRepoTO;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.AttrRepoService;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n \n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n-    public static final List<WAClientApp> APPS = new ArrayList<>();\n-\n     private static final String ADDRESS = \"http://localhost:9081/syncope/rest\";\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n+    public static final List<AuthModuleTO> AUTH_MODULES = new ArrayList<>();\n \n-    @Override\n-    public void onApplicationEvent(final ContextRefreshedEvent event) {\n-        synchronized (ADDRESS) {\n-            if (serviceOps.list(NetworkService.Type.CORE).isEmpty()) {\n-                // 1. start (mocked) Core as embedded CXF\n-                JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n-                sf.setAddress(ADDRESS);\n-                sf.setResourceClasses(\n-                        WAClientAppService.class,\n-                        GoogleMfaAuthTokenService.class,\n-                        ImpersonationService.class);\n-                sf.setResourceProvider(\n-                        WAClientAppService.class,\n-                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n-                sf.setResourceProvider(\n-                        GoogleMfaAuthTokenService.class,\n-                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n-                sf.setResourceProvider(\n-                        ImpersonationService.class,\n-                        new SingletonResourceProvider(new StubImpersonationService(), true));\n-                sf.setProviders(List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build())));\n-                sf.create();\n+    public static final List<AttrRepoTO> ATTR_REPOS = new ArrayList<>();\n \n-                // 2. register Core in Keymaster\n-                NetworkService core = new NetworkService();\n-                core.setType(NetworkService.Type.CORE);\n-                core.setAddress(ADDRESS);\n-                serviceOps.register(core);\n-            }\n+    public static final List<WAClientApp> CLIENT_APPS = new ArrayList<>();\n+\n+    public static final List<Attr> CONFIG = new ArrayList<>();\n+\n+    public static class StubAuthModuleService implements AuthModuleService {\n+\n+        @Override\n+        public AuthModuleTO read(final String key) {\n+            return AUTH_MODULES.stream().filter(m -> Objects.equals(key, m.getKey())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"Auth Module with key \" + key));\n+        }\n+\n+        @Override\n+        public List<AuthModuleTO> list() {\n+            return AUTH_MODULES;\n+        }\n+\n+        @Override\n+        public Response create(final AuthModuleTO authModuleTO) {\n+            AUTH_MODULES.add(authModuleTO);\n+            return Response.created(null).build();\n+        }\n+\n+        @Override\n+        public void update(final AuthModuleTO authModuleTO) {\n+            delete(authModuleTO.getKey());\n+            create(authModuleTO);\n+        }\n+\n+        @Override\n+        public void delete(final String key) {\n+            AUTH_MODULES.removeIf(m -> Objects.equals(key, m.getKey()));\n+        }\n+    }\n+\n+    public static class StubAttrRepoService implements AttrRepoService {\n+\n+        @Override\n+        public AttrRepoTO read(final String key) {\n+            return ATTR_REPOS.stream().filter(m -> Objects.equals(key, m.getKey())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"Attr Repo with key \" + key));\n+        }\n+\n+        @Override\n+        public List<AttrRepoTO> list() {\n+            return ATTR_REPOS;\n+        }\n+\n+        @Override\n+        public Response create(final AttrRepoTO attrRepoTO) {\n+            ATTR_REPOS.add(attrRepoTO);\n+            return Response.created(null).build();\n+        }\n+\n+        @Override\n+        public void update(final AttrRepoTO attrRepoTO) {\n+            delete(attrRepoTO.getKey());\n+            create(attrRepoTO);\n+        }\n+\n+        @Override\n+        public void delete(final String key) {\n+            ATTR_REPOS.removeIf(m -> Objects.equals(key, m.getKey()));\n+        }\n+    }\n+\n+    public static class StubWAClientAppService implements WAClientAppService {\n+\n+        @Override\n+        public List<WAClientApp> list() {\n+            return CLIENT_APPS;\n+        }\n+\n+        @Override\n+        public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n+            return CLIENT_APPS.stream().\n+                    filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+        }\n+\n+        @Override\n+        public WAClientApp read(final String name, final ClientAppType type) {\n+            return CLIENT_APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+        }\n+    }\n+\n+    public static class StubWAConfigService implements WAConfigService {\n+\n+        @Override\n+        public List<Attr> list() {\n+            return CONFIG;\n+        }\n+\n+        @Override\n+        public Attr get(final String schema) {\n+            return CONFIG.stream().filter(c -> Objects.equals(schema, c.getSchema())).\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"Config with schema \" + schema));\n+        }\n+\n+        @Override\n+        public void set(final Attr value) {\n+            delete(value.getSchema());\n+            CONFIG.add(value);\n+        }\n+\n+        @Override\n+        public void delete(final String schema) {\n+            CONFIG.removeIf(c -> Objects.equals(schema, c.getSchema()));\n+        }\n+\n+        @Override\n+        public void pushToWA() {\n+            // nothing to do\n         }\n     }\n \n@@ -182,23 +273,50 @@ public PagedResult<GoogleMfaAuthToken> list() {\n         }\n     }\n \n-    public static class StubWAClientAppService implements WAClientAppService {\n-\n-        @Override\n-        public List<WAClientApp> list() {\n-            return APPS;\n-        }\n+    @Autowired\n+    private ServiceOps serviceOps;\n \n-        @Override\n-        public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n-            return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n-        }\n+    @Override\n+    public void onApplicationEvent(final ContextRefreshedEvent event) {\n+        synchronized (ADDRESS) {\n+            if (serviceOps.list(NetworkService.Type.CORE).isEmpty()) {\n+                // 1. start (mocked) Core as embedded CXF\n+                JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n+                sf.setAddress(ADDRESS);\n+                sf.setResourceClasses(\n+                        AuthModuleService.class,\n+                        AttrRepoService.class,\n+                        WAClientAppService.class,\n+                        WAConfigService.class,\n+                        GoogleMfaAuthTokenService.class,\n+                        ImpersonationService.class);\n+                sf.setResourceProvider(\n+                        AuthModuleService.class,\n+                        new SingletonResourceProvider(new StubAuthModuleService(), true));\n+                sf.setResourceProvider(\n+                        AttrRepoService.class,\n+                        new SingletonResourceProvider(new StubAttrRepoService(), true));\n+                sf.setResourceProvider(\n+                        WAClientAppService.class,\n+                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                sf.setResourceProvider(\n+                        WAConfigService.class,\n+                        new SingletonResourceProvider(new StubWAConfigService(), true));\n+                sf.setResourceProvider(\n+                        GoogleMfaAuthTokenService.class,\n+                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n+                sf.setResourceProvider(\n+                        ImpersonationService.class,\n+                        new SingletonResourceProvider(new StubImpersonationService(), true));\n+                sf.setProviders(List.of(new JacksonJsonProvider(JsonMapper.builder().findAndAddModules().build())));\n+                sf.create();\n \n-        @Override\n-        public WAClientApp read(final String name, final ClientAppType type) {\n-            return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                // 2. register Core in Keymaster\n+                NetworkService core = new NetworkService();\n+                core.setType(NetworkService.Type.CORE);\n+                core.setAddress(ADDRESS);\n+                serviceOps.register(core);\n+            }\n         }\n     }\n }"},{"sha":"2b74bd1661eacbb27858e02589dc8b67f32e2d4e","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/WAServiceRegistryTest.java","status":"modified","additions":90,"deletions":18,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/99abd29aed81754fa28a35ca72fcfd851e7910b4/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FWAServiceRegistryTest.java?ref=99abd29aed81754fa28a35ca72fcfd851e7910b4","patch":"@@ -25,43 +25,46 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.ChainingAttributeReleasePolicy;\n import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceDelegatedAuthenticationPolicy;\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n import org.apereo.cas.services.ServicesManager;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.util.RandomUtils;\n import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.context.refresh.ContextRefresher;\n \n public class WAServiceRegistryTest extends AbstractTest {\n \n-    @Autowired\n-    private WARestClient wARestClient;\n-\n-    @Autowired\n-    private ServicesManager servicesManager;\n-\n     private static OIDCRPClientAppTO buildOIDCRP() {\n         OIDCRPClientAppTO oidcrpTO = new OIDCRPClientAppTO();\n         oidcrpTO.setName(\"ExampleRP_\" + getUUIDString());\n@@ -77,7 +80,7 @@ private static OIDCRPClientAppTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected SAML2SPClientAppTO buildSAML2SP() {\n+    private static SAML2SPClientAppTO buildSAML2SP() {\n         SAML2SPClientAppTO saml2spto = new SAML2SPClientAppTO();\n         saml2spto.setName(\"ExampleSAML2SP_\" + getUUIDString());\n         saml2spto.setClientAppId(RandomUtils.nextLong());\n@@ -91,10 +94,10 @@ protected SAML2SPClientAppTO buildSAML2SP() {\n         return saml2spto;\n     }\n \n-    private static void addAttributes(\n+    private static void addPolicies(\n+            final WAClientApp waClientApp,\n             final boolean withReleaseAttributes,\n-            final boolean withAttrReleasePolicy,\n-            final WAClientApp waClientApp) {\n+            final boolean withAttrReleasePolicy) {\n \n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n         authPolicyConf.setTryAll(true);\n@@ -126,13 +129,25 @@ private static void addAttributes(\n         }\n     }\n \n+    @Autowired\n+    private WARestClient waRestClient;\n+\n+    @Autowired\n+    private ServicesManager servicesManager;\n+\n+    @Autowired\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    private ContextRefresher contextRefresher;\n+\n     @Test\n     public void addClientApp() {\n         // 1. start with no client apps defined on mocked Core\n-        SyncopeClient syncopeClient = wARestClient.getSyncopeClient();\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n         assertNotNull(syncopeClient);\n \n-        SyncopeCoreTestingServer.APPS.clear();\n+        SyncopeCoreTestingServer.CLIENT_APPS.clear();\n \n         WAClientAppService service = syncopeClient.getService(WAClientAppService.class);\n         assertTrue(service.list().isEmpty());\n@@ -141,9 +156,9 @@ public void addClientApp() {\n         WAClientApp waClientApp = new WAClientApp();\n         waClientApp.setClientAppTO(buildOIDCRP());\n         Long clientAppId = waClientApp.getClientAppTO().getClientAppId();\n-        addAttributes(true, true, waClientApp);\n+        addPolicies(waClientApp, false, false);\n \n-        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        SyncopeCoreTestingServer.CLIENT_APPS.add(waClientApp);\n         List<WAClientApp> apps = service.list();\n         assertEquals(1, apps.size());\n \n@@ -171,9 +186,9 @@ public void addClientApp() {\n         waClientApp = new WAClientApp();\n         waClientApp.setClientAppTO(buildSAML2SP());\n         clientAppId = waClientApp.getClientAppTO().getClientAppId();\n-        addAttributes(false, true, waClientApp);\n+        addPolicies(waClientApp, false, true);\n \n-        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        SyncopeCoreTestingServer.CLIENT_APPS.add(waClientApp);\n         apps = service.list();\n         assertEquals(2, apps.size());\n \n@@ -193,9 +208,9 @@ public void addClientApp() {\n         waClientApp = new WAClientApp();\n         waClientApp.setClientAppTO(buildSAML2SP());\n         clientAppId = waClientApp.getClientAppTO().getClientAppId();\n-        addAttributes(false, false, waClientApp);\n+        addPolicies(waClientApp, false, false);\n \n-        SyncopeCoreTestingServer.APPS.add(waClientApp);\n+        SyncopeCoreTestingServer.CLIENT_APPS.add(waClientApp);\n         apps = service.list();\n         assertEquals(3, apps.size());\n \n@@ -205,4 +220,61 @@ public void addClientApp() {\n         found = servicesManager.findServiceBy(clientAppId);\n         assertTrue(found.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n     }\n+\n+    @Test\n+    public void delegatedAuthentication() {\n+        // 1. start with 1 client app and 1 auth module defined on mocked Core\n+        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n+        assertNotNull(syncopeClient);\n+\n+        OIDCAuthModuleConf oidcAuthModuleConf = new OIDCAuthModuleConf();\n+        oidcAuthModuleConf.setClientId(\"clientId\");\n+        oidcAuthModuleConf.setClientSecret(\"clientSecret\");\n+        AuthModuleTO authModuleTO = new AuthModuleTO();\n+        authModuleTO.setKey(\"keycloack\");\n+        authModuleTO.setConf(oidcAuthModuleConf);\n+\n+        SyncopeCoreTestingServer.AUTH_MODULES.clear();\n+        SyncopeCoreTestingServer.AUTH_MODULES.add(authModuleTO);\n+        AuthModuleService authModuleService = syncopeClient.getService(AuthModuleService.class);\n+        assertEquals(1, authModuleService.list().size());\n+\n+        SyncopeCoreTestingServer.CLIENT_APPS.clear();\n+        WAClientAppService waClientAppService = syncopeClient.getService(WAClientAppService.class);\n+        assertTrue(waClientAppService.list().isEmpty());\n+\n+        WAClientApp waClientApp = new WAClientApp();\n+        waClientApp.setClientAppTO(buildOIDCRP());\n+        waClientApp.getAuthModules().add(0, authModuleTO);\n+        Long clientAppId = waClientApp.getClientAppTO().getClientAppId();\n+        addPolicies(waClientApp, false, false);\n+        DefaultAuthPolicyConf authPolicyConf = (DefaultAuthPolicyConf) waClientApp.getAuthPolicy().getConf();\n+        authPolicyConf.getAuthModules().clear();\n+        authPolicyConf.getAuthModules().add(authModuleTO.getKey());\n+        SyncopeCoreTestingServer.CLIENT_APPS.add(waClientApp);\n+\n+        // 2. trigger refresh\n+        int before = authenticationEventExecutionPlan.getObject().getAuthenticationHandlers().size();\n+\n+        contextRefresher.refresh();\n+\n+        int after = authenticationEventExecutionPlan.getObject().getAuthenticationHandlers().size();\n+        assertEquals(before + 1, after);\n+\n+        // 3. check service\n+        RegisteredService service = servicesManager.findServiceBy(clientAppId);\n+        assertNotNull(service);\n+\n+        assertEquals(\n+                Set.of(\"DelegatedClientAuthenticationHandler\"),\n+                service.getAuthenticationPolicy().getRequiredAuthenticationHandlers());\n+\n+        RegisteredServiceAccessStrategy accessStrategy = service.getAccessStrategy();\n+        assertNotNull(accessStrategy);\n+        RegisteredServiceDelegatedAuthenticationPolicy delegatedAuthPolicy =\n+                accessStrategy.getDelegatedAuthenticationPolicy();\n+        assertNotNull(delegatedAuthPolicy);\n+        assertEquals(1, delegatedAuthPolicy.getAllowedProviders().size());\n+        assertTrue(delegatedAuthPolicy.getAllowedProviders().contains(authModuleTO.getKey()));\n+    }\n }"}]}