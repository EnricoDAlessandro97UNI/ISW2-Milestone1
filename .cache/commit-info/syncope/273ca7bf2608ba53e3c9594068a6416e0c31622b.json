{"sha":"273ca7bf2608ba53e3c9594068a6416e0c31622b","node_id":"C_kwDOJfYA1toAKDI3M2NhN2JmMjYwOGJhNTNlM2M5NTk0MDY4YTY0MTZlMGMzMTYyMmI","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2022-01-03T12:07:02Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-01-03T12:07:02Z"},"message":"Remove CGLib proxies from Spring configuration components - part 1 (#301)","tree":{"sha":"b6ffa8ca67c0a360c2b5b8d627723f0371a0f0a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b6ffa8ca67c0a360c2b5b8d627723f0371a0f0a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/273ca7bf2608ba53e3c9594068a6416e0c31622b","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0ubmCRBK7hj4Ov3rIwAAKyoIAIqZzJqN+WGiIaRHnlYS/heo\nStkfazc1QANvlFOl2OeEh3u8pS/SiQ01sRcI1gj3dRs3DjbRmyk7siT2iY5YCybe\nPBYbq+flLwH5J/HfggQsGpz/jDqO92GL+vojniyin3gUWw3YlfM4GUrFrVXxV/9Y\nhs8UrkY5vVqvlAQvm1FNDoafAutKn6RXQKWr7cEQt71cFuLugNyJowrQWBVfBULR\n18JKlo2Xzd6uecz0wZetwCrDv27AsKDna6L3v98fsbBW3Cx0EHUZamySJxVidnaS\nN4k4jjbrVi6OMIeXkmmZai7U8am61YfaTI4z3ZCcTesSJp3uBqnrwhKu25MYA5g=\n=EY8f\n-----END PGP SIGNATURE-----\n","payload":"tree b6ffa8ca67c0a360c2b5b8d627723f0371a0f0a8\nparent 5dd91bb416cd23c4399e9178469e4c6bd338194f\nauthor Misagh Moayyed <mm1844@gmail.com> 1641211622 +0400\ncommitter GitHub <noreply@github.com> 1641211622 +0400\n\nRemove CGLib proxies from Spring configuration components - part 1 (#301)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/273ca7bf2608ba53e3c9594068a6416e0c31622b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/273ca7bf2608ba53e3c9594068a6416e0c31622b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/273ca7bf2608ba53e3c9594068a6416e0c31622b/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"5dd91bb416cd23c4399e9178469e4c6bd338194f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5dd91bb416cd23c4399e9178469e4c6bd338194f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5dd91bb416cd23c4399e9178469e4c6bd338194f"}],"stats":{"total":3061,"additions":1531,"deletions":1530},"files":[{"sha":"4c05279d289b5b688b1b442af60a1987ca951948","filename":".github/workflows/codeql-analysis.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fcodeql-analysis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fcodeql-analysis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fcodeql-analysis.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"CodeQL\"\n \n on:\n   push:\n-    branches: [master,2_1_X]\n+    branches: [master,2_1_X,pr-*]\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master,2_1_X]"},{"sha":"7e79fca18a6ebf0b7ebc7bbcb3cc95c347c3735b","filename":".github/workflows/crosschecks.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fcrosschecks.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fcrosschecks.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fcrosschecks.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"Cross Checks\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"689c2b5e7d1c9e24ff75f8ed9111b1cd1117d8fe","filename":".github/workflows/fit_Elasticsearch.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Elasticsearch.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Elasticsearch.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Elasticsearch.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Elasticsearch\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"5f65c0c479baa627f3f33547d753b43ec175525f","filename":".github/workflows/fit_Payara.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Payara.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Payara.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Payara.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Payara\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"0dbb9ca4b1964daecd8c48cbe7465af577fc455f","filename":".github/workflows/fit_Tomcat_H2_JSON.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_JSON.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_JSON.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Tomcat_H2_JSON.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Tomcat H2 JSON\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"ca727db9396bb84fcc1b36bde5eb85e3d3266e8f","filename":".github/workflows/fit_Tomcat_H2_XML.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_XML.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_XML.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Tomcat_H2_XML.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Tomcat H2 XML\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"c0622fdfa9016cc1e5aff7c693f14befa0b8d1af","filename":".github/workflows/fit_Tomcat_H2_YAML.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_YAML.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Tomcat_H2_YAML.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Tomcat_H2_YAML.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Tomcat H2 YAML\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"a1519ceb9d8db4175b0bfefba3cfde6c5e8f6afa","filename":".github/workflows/fit_WA_SAML2PS4UI_OIDCC4UI.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SAML2PS4UI_OIDCC4UI.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SAML2PS4UI_OIDCC4UI.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_WA_SAML2PS4UI_OIDCC4UI.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT WA SAML2SP4UI OIDCC4UI\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"a229757e2ee7176fba36fe171315cd3269e697c6","filename":".github/workflows/fit_WA_SRA_CASClient.yml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_CASClient.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_CASClient.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_WA_SRA_CASClient.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT WA SRA CASClient\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]\n@@ -43,5 +43,7 @@ jobs:\n         restore-keys: ${{ runner.os }}-m2\n     - name: Build\n       run: mvn -U -T 1C -P 'skipTests,all'\n+#    - name: Setup tmate session\n+#      uses: mxschmitt/action-tmate@v3\n     - name: 'WA / SRA / CAS Client'\n       run: mvn -f fit/wa-reference/pom.xml verify -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true -Dit.test=org.apache.syncope.fit.sra.CASSRAITCase"},{"sha":"a08434c0f720d1ae51e7db90ead0405c9bc3044f","filename":".github/workflows/fit_WA_SRA_OAuth2.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_OAuth2.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_OAuth2.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_WA_SRA_OAuth2.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT WA SRA OAuth2\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"a306d1144b41cc831349c602b75066fcac8aa49e","filename":".github/workflows/fit_WA_SRA_OIDC.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_OIDC.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_OIDC.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_WA_SRA_OIDC.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT WA SRA OIDC\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"503c5a340c5c8cfb940be4c1f9340b299ab78f32","filename":".github/workflows/fit_WA_SRA_SAML2.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_SAML2.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_WA_SRA_SAML2.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_WA_SRA_SAML2.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT WA SRA SAML2\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"7aec478aa6abba927215ca2384b6d4b99f029b6f","filename":".github/workflows/fit_Wildfly.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Wildfly.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Wildfly.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Wildfly.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Wildfly\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"877aa92cc5c3357d8581bcfe890b62c9065571cd","filename":".github/workflows/fit_Zookeeper.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Zookeeper.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Ffit_Zookeeper.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Ffit_Zookeeper.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"FIT Zookeeper\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"6e64c87a303e29cb1eb4f1ce9ecf64d0043bec01","filename":".github/workflows/mariadb.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fmariadb.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fmariadb.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fmariadb.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"MariaDB\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"2d39bdebe072b3f76cea4281a97a8c71c19d73d4","filename":".github/workflows/mysql.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fmysql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fmysql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fmysql.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"MySQL\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"3d7aef35cd1edfc0d8938bc5645b60d617c0ef63","filename":".github/workflows/postgresql.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fpostgresql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/.github%2Fworkflows%2Fpostgresql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fpostgresql.yml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,7 @@ name: \"PostgreSQL\"\n \n on:\n   push:\n-    branches: [master]\n+    branches: ['master', 'pr-*']\n   pull_request:\n     # The branches below must be a subset of the branches above\n     branches: [master]"},{"sha":"b5b35524d8e7588376b115b2acd33040007d802b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/SyncopeAMConsoleContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeAMConsoleContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeAMConsoleContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeAMConsoleContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -27,7 +27,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SyncopeAMConsoleContext {\n \n     @Bean"},{"sha":"bafd99036f77259297094d8d6cc2e0e3cee7764b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/SyncopeIdMConsoleContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeIdMConsoleContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeIdMConsoleContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeIdMConsoleContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.console.init.ClassPathScanImplementationContributor;\n import org.apache.syncope.client.console.init.IdMClassPathScanImplementationContributor;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SyncopeIdMConsoleContext {\n \n     @Bean"},{"sha":"86a5e392948cb09379d7ee4ac895d1426f49f49f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SecurityConfig.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSecurityConfig.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,36 +19,38 @@\n package org.apache.syncope.client.console;\n \n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n @EnableWebSecurity\n-@Configuration\n-public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+@Configuration(proxyBeanMethods = false)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private ConsoleProperties props;\n+    @Bean\n+    public WebSecurityConfigurerAdapter consoleSecurityConfigAdapter(final ConsoleProperties props) {\n+        return new WebSecurityConfigurerAdapter() {\n+            @Override\n+            protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n+                auth.inMemoryAuthentication().\n+                    withUser(props.getAnonymousUser()).\n+                    password(\"{noop}\" + props.getAnonymousKey()).\n+                    roles(IdRepoEntitlement.ANONYMOUS);\n+            }\n \n-    @Override\n-    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication().\n-                withUser(props.getAnonymousUser()).\n-                password(\"{noop}\" + props.getAnonymousKey()).\n-                roles(IdRepoEntitlement.ANONYMOUS);\n-    }\n-\n-    @Override\n-    protected void configure(final HttpSecurity http) throws Exception {\n-        http.csrf().disable().\n-                authorizeRequests().\n-                requestMatchers(EndpointRequest.toAnyEndpoint()).\n-                authenticated().\n-                and().\n-                httpBasic();\n+            @Override\n+            protected void configure(final HttpSecurity http) throws Exception {\n+                http.csrf().disable().\n+                    authorizeRequests().\n+                    requestMatchers(EndpointRequest.toAnyEndpoint()).\n+                    authenticated().\n+                    and().\n+                    httpBasic();\n+            }\n+        };\n     }\n }"},{"sha":"9ee476430988ab275c0eb157c3d3993e0f7ce3cb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n@@ -63,7 +62,7 @@\n \n @SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n-    HttpMessageConvertersAutoConfiguration.class })\n+    HttpMessageConvertersAutoConfiguration.class }, proxyBeanMethods = false)\n @EnableConfigurationProperties(ConsoleProperties.class)\n public class SyncopeConsoleApplication extends SpringBootServletInitializer {\n \n@@ -73,15 +72,6 @@ public static void main(final String[] args) {\n                 build().run(args);\n     }\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n-\n-    @Autowired\n-    private ConsoleProperties props;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @Override\n     protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n         return builder.properties(Map.of(\n@@ -97,7 +87,8 @@ public ApplicationContextProvider applicationContextProvider() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final ServiceOps serviceOps,\n+                                                                 final ConsoleProperties props) {\n         return new SyncopeCoreHealthIndicator(\n                 serviceOps,\n                 props.getAnonymousUser(),\n@@ -113,7 +104,7 @@ public SyncopeConsoleInfoContributor syncopeConsoleInfoContributor() {\n \n     @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")\n     @Bean\n-    public ClassPathScanImplementationLookup classPathScanImplementationLookup() {\n+    public ClassPathScanImplementationLookup classPathScanImplementationLookup(final ApplicationContext ctx) {\n         ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup(\n                 ctx.getBeansOfType(ClassPathScanImplementationContributor.class).values());\n         lookup.load();"},{"sha":"41407e7a4eb6e46faeba5c4a6646a9851b9122ed","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -71,3 +71,8 @@ console.security-headers.Strict-Transport-Security=max-age=31536000; includeSubD\n console.security-headers.X-Content-Type-Options=nosniff\n console.security-headers.X-Frame-Options=sameorigin\n #console.security-headers.Content-Security-Policy=default-src https:\n+\n+##\n+# Disable CGLib Proxies\n+spring.aop.auto=true\n+spring.aop.proxy-target-class=false"},{"sha":"f33eb5f8b386234fe90555e50f27a8dccf103962","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -85,7 +85,7 @@\n public abstract class AbstractTest {\n \n     @ImportAutoConfiguration\n-    @Configuration\n+    @Configuration(proxyBeanMethods = false)\n     public static class SyncopeConsoleWebApplicationTestConfig {\n \n         @Bean"},{"sha":"38e6e6a5ae4fa4be7d7fb6a0f27c503b6351bd91","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SecurityConfig.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSecurityConfig.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,36 +19,38 @@\n package org.apache.syncope.client.enduser;\n \n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n \n @EnableWebSecurity\n-@Configuration\n-public class SecurityConfig extends WebSecurityConfigurerAdapter {\n+@Configuration(proxyBeanMethods = false)\n+public class SecurityConfig {\n \n-    @Autowired\n-    private EnduserProperties props;\n+    @Bean\n+    public WebSecurityConfigurerAdapter enduserSecurityAdapter(final EnduserProperties props) {\n+        return new WebSecurityConfigurerAdapter() {\n+            @Override\n+            protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n+                auth.inMemoryAuthentication().\n+                    withUser(props.getAnonymousUser()).\n+                    password(\"{noop}\" + props.getAnonymousKey()).\n+                    roles(IdRepoEntitlement.ANONYMOUS);\n+            }\n \n-    @Override\n-    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication().\n-                withUser(props.getAnonymousUser()).\n-                password(\"{noop}\" + props.getAnonymousKey()).\n-                roles(IdRepoEntitlement.ANONYMOUS);\n-    }\n-\n-    @Override\n-    protected void configure(final HttpSecurity http) throws Exception {\n-        http.csrf().disable().\n-                authorizeRequests().\n-                requestMatchers(EndpointRequest.toAnyEndpoint()).\n-                authenticated().\n-                and().\n-                httpBasic();\n+            @Override\n+            protected void configure(final HttpSecurity http) throws Exception {\n+                http.csrf().disable().\n+                    authorizeRequests().\n+                    requestMatchers(EndpointRequest.toAnyEndpoint()).\n+                    authenticated().\n+                    and().\n+                    httpBasic();\n+            }\n+        };\n     }\n }"},{"sha":"d51fa8868763171c6c946d0cae314b79ce684b74","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration;\n@@ -42,7 +41,7 @@\n \n @SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n-    HttpMessageConvertersAutoConfiguration.class })\n+    HttpMessageConvertersAutoConfiguration.class }, proxyBeanMethods = false)\n @EnableConfigurationProperties(EnduserProperties.class)\n public class SyncopeEnduserApplication extends SpringBootServletInitializer {\n \n@@ -52,12 +51,6 @@ public static void main(final String[] args) {\n                 build().run(args);\n     }\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n-\n-    @Autowired\n-    private EnduserProperties props;\n-\n     @Override\n     protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n         return builder.properties(Map.of(\n@@ -73,7 +66,8 @@ public ApplicationContextProvider applicationContextProvider() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final ServiceOps serviceOps,\n+                                                                 final EnduserProperties props) {\n         return new SyncopeCoreHealthIndicator(\n                 serviceOps,\n                 props.getAnonymousUser(),\n@@ -83,8 +77,8 @@ public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeEnduserInfoContributor syncopeEnduserInfoContributor() {\n-        return new SyncopeEnduserInfoContributor();\n+    public SyncopeEnduserInfoContributor syncopeEnduserInfoContributor(final EnduserProperties enduserProperties) {\n+        return new SyncopeEnduserInfoContributor(enduserProperties);\n     }\n \n     @ConditionalOnMissingBean(name = \"classPathScanImplementationLookup\")"},{"sha":"8bbc6aff2d4b0013776745e2a1f4b4217c553b7d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/actuate/SyncopeEnduserInfoContributor.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Factuate%2FSyncopeEnduserInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Factuate%2FSyncopeEnduserInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Factuate%2FSyncopeEnduserInfoContributor.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,15 +19,17 @@\n package org.apache.syncope.client.enduser.actuate;\n \n import org.apache.syncope.client.enduser.EnduserProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.info.Info;\n import org.springframework.boot.actuate.info.InfoContributor;\n import org.springframework.security.access.prepost.PreAuthorize;\n \n public class SyncopeEnduserInfoContributor implements InfoContributor {\n \n-    @Autowired\n-    protected EnduserProperties enduserProperties;\n+    protected final EnduserProperties enduserProperties;\n+\n+    public SyncopeEnduserInfoContributor(final EnduserProperties enduserProperties) {\n+        this.enduserProperties = enduserProperties;\n+    }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Override"},{"sha":"c9d8cc6a1eac8c497b46ff025751aa1f8b1d7d56","filename":"client/idrepo/enduser/src/main/resources/enduser.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -61,3 +61,8 @@ enduser.security.headers.Strict-Transport-Security=max-age=31536000; includeSubD\n enduser.security.headers.X-Content-Type-Options=nosniff\n enduser.security.headers.X-Frame-Options=sameorigin\n #enduser.security.headers.Content-Security-Policy=default-src https:\n+\n+##\n+# Disable CGLib Proxies\n+spring.aop.auto=true\n+spring.aop.proxy-target-class=false"},{"sha":"0ce331f5c7a77e5269e7507c30dda24559f9d061","filename":"client/idrepo/enduser/src/test/java/org/apache/syncope/client/enduser/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FAbstractTest.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -64,7 +64,7 @@\n public abstract class AbstractTest {\n \n     @ImportAutoConfiguration\n-    @Configuration\n+    @Configuration(proxyBeanMethods = false)\n     public static class SyncopeEnduserWebApplicationTestConfig {\n \n         @Bean"},{"sha":"a331d400c16050c7a07bb636ff39ad9b0b067f90","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperConfParamOps.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperConfParamOps.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -28,7 +28,6 @@\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Implements {@link ConfParamOps} via Apache Curator / Zookeeper.\n@@ -41,13 +40,16 @@ public class ZookeeperConfParamOps implements ConfParamOps {\n \n     private static final String CONF_PATH = \"/conf\";\n \n-    @Autowired\n-    private CuratorFramework client;\n+    private final CuratorFramework client;\n \n     private static String buildConfPath(final String... parts) {\n         return CONF_PATH + '/' + String.join(\"/\", parts);\n     }\n \n+    public ZookeeperConfParamOps(final CuratorFramework client) {\n+        this.client = client;\n+    }\n+\n     @Override\n     public Map<String, Object> list(final String domain) {\n         try {"},{"sha":"5a76d543b3cf2bdcd25100b53f7a192c7b3adbd2","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperKeymasterClientContext.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperKeymasterClientContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -35,7 +35,6 @@\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.server.auth.DigestLoginModule;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -46,7 +45,7 @@\n import org.springframework.core.type.AnnotatedTypeMetadata;\n \n @EnableConfigurationProperties(KeymasterProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class ZookeeperKeymasterClientContext {\n \n     private static final Pattern IPV4 = Pattern.compile(\n@@ -63,12 +62,9 @@ public ConditionOutcome getMatchOutcome(final ConditionContext context, final An\n         }\n     }\n \n-    @Autowired\n-    private KeymasterProperties props;\n-\n     @Conditional(ZookeeperCondition.class)\n     @Bean\n-    public CuratorFramework curatorFramework() throws InterruptedException {\n+    public CuratorFramework curatorFramework(final KeymasterProperties props) throws InterruptedException {\n         if (StringUtils.isNotBlank(props.getUsername()) && StringUtils.isNotBlank(props.getPassword())) {\n             javax.security.auth.login.Configuration.setConfiguration(new javax.security.auth.login.Configuration() {\n \n@@ -115,8 +111,8 @@ public List<ACL> getAclForPath(final String path) {\n \n     @Conditional(ZookeeperCondition.class)\n     @Bean\n-    public ConfParamOps selfConfParamOps() {\n-        return new ZookeeperConfParamOps();\n+    public ConfParamOps selfConfParamOps(final CuratorFramework client) {\n+        return new ZookeeperConfParamOps(client);\n     }\n \n     @Conditional(ZookeeperCondition.class)"},{"sha":"ff5facb659e0241918311c6f376f0d776716f134","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeeper/ZookeeperTestContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeeper%2FZookeeperTestContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,7 +24,7 @@\n import org.springframework.context.annotation.PropertySource;\n \n @PropertySource(\"classpath:test.properties\")\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class ZookeeperTestContext {\n \n     @Bean"},{"sha":"8c33190e42faa846880dc5e87707ca6e33bf120b","filename":"common/keymaster/self/client-self/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterClientContext.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fself%2Fclient-self%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterClientContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.KeymasterProperties;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n@@ -39,7 +39,7 @@\n import org.springframework.core.type.AnnotatedTypeMetadata;\n \n @EnableConfigurationProperties(KeymasterProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SelfKeymasterClientContext {\n \n     private static final Pattern HTTP = Pattern.compile(\"^http.+\");\n@@ -55,13 +55,10 @@ public ConditionOutcome getMatchOutcome(final ConditionContext context, final An\n         }\n     }\n \n-    @Autowired\n-    private KeymasterProperties props;\n-\n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"selfKeymasterRESTClientFactoryBean\")\n-    public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n+    public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean(final KeymasterProperties props) {\n         JAXRSClientFactoryBean restClientFactoryBean = new JAXRSClientFactoryBean();\n         restClientFactoryBean.setAddress(props.getAddress());\n         restClientFactoryBean.setUsername(props.getUsername());\n@@ -77,21 +74,24 @@ public JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean() {\n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"selfConfParamOps\")\n-    public ConfParamOps selfConfParamOps() {\n-        return new SelfKeymasterConfParamOps(selfKeymasterRESTClientFactoryBean());\n+    public ConfParamOps selfConfParamOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n+                                         final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+        return new SelfKeymasterConfParamOps(selfKeymasterRESTClientFactoryBean);\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"selfServiceOps\")\n-    public ServiceOps selfServiceOps() {\n-        return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean(), 5);\n+    public ServiceOps selfServiceOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n+                                     final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+        return new SelfKeymasterServiceOps(selfKeymasterRESTClientFactoryBean, 5);\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n     @ConditionalOnMissingBean(name = \"domainOps\")\n-    public DomainOps domainOps() {\n-        return new SelfKeymasterDomainOps(selfKeymasterRESTClientFactoryBean());\n+    public DomainOps domainOps(@Qualifier(\"selfKeymasterRESTClientFactoryBean\")\n+                               final JAXRSClientFactoryBean selfKeymasterRESTClientFactoryBean) {\n+        return new SelfKeymasterDomainOps(selfKeymasterRESTClientFactoryBean);\n     }\n }"},{"sha":"91bcf3f81da1ddf97d1efde6dca3dbf3cada3503","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AMLogicContext.java","status":"modified","additions":32,"deletions":42,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -49,38 +49,13 @@\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class AMLogicContext {\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private ServiceOps serviceOps;\n-\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n-\n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n-\n-    @Autowired\n-    private CASSPDAO casspDAO;\n-\n-    @Autowired\n-    private OIDCRPDAO oidcrpDAO;\n-\n-    @Autowired\n-    private SAML2SPDAO saml2spDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public AMEntitlementLoader amEntitlementLoader() {\n@@ -89,7 +64,6 @@ public AMEntitlementLoader amEntitlementLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuthModuleLogic authModuleLogic(\n             final AuthModuleDataBinder binder,\n             final AuthModuleDAO authModuleDAO) {\n@@ -99,15 +73,19 @@ public AuthModuleLogic authModuleLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AuthProfileLogic authProfileLogic() {\n+    public AuthProfileLogic authProfileLogic(final AuthProfileDAO authProfileDAO,\n+                                             final AuthProfileDataBinder authProfileDataBinder) {\n         return new AuthProfileLogic(authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ClientAppLogic clientAppLogic(\n+            final ServiceOps serviceOps,\n+            final CASSPDAO casspDAO,\n+            final OIDCRPDAO oidcrpDAO,\n+            final SAML2SPDAO saml2spDAO,\n+            final SecurityProperties securityProperties,\n             final ClientAppUtilsFactory clientAppUtilsFactory,\n             final ClientAppDataBinder binder) {\n \n@@ -123,7 +101,6 @@ public ClientAppLogic clientAppLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCJWKSLogic oidcJWKSLogic(\n             final OIDCJWKSDataBinder binder,\n             final OIDCJWKSDAO dao) {\n@@ -133,7 +110,6 @@ public OIDCJWKSLogic oidcJWKSLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2IdPEntityLogic saml2IdPEntityLogic(\n             final SAML2IdPEntityDataBinder binder,\n             final SAML2IdPEntityDAO entityDAO) {\n@@ -143,7 +119,6 @@ public SAML2IdPEntityLogic saml2IdPEntityLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SPEntityLogic saml2SPEntityLogic(\n             final SAML2SPEntityDataBinder binder,\n             final SAML2SPEntityDAO entityDAO) {\n@@ -153,8 +128,10 @@ public SAML2SPEntityLogic saml2SPEntityLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SRARouteLogic sraRouteLogic(\n+            final EntityFactory entityFactory,\n+            final ServiceOps serviceOps,\n+            final SecurityProperties securityProperties,\n             final SRARouteDAO routeDAO,\n             final SRARouteDataBinder binder) {\n \n@@ -163,39 +140,50 @@ public SRARouteLogic sraRouteLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic() {\n+    public GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic(final AuthProfileDAO authProfileDAO,\n+                                                               final AuthProfileDataBinder authProfileDataBinder,\n+                                                               final EntityFactory entityFactory) {\n         return new GoogleMfaAuthAccountLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic() {\n+    public GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic(final AuthProfileDAO authProfileDAO,\n+                                                           final AuthProfileDataBinder authProfileDataBinder,\n+                                                           final EntityFactory entityFactory) {\n         return new GoogleMfaAuthTokenLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ImpersonationLogic impersonationLogic() {\n+    public ImpersonationLogic impersonationLogic(final AuthProfileDAO authProfileDAO,\n+                                                 final AuthProfileDataBinder authProfileDataBinder,\n+                                                 final EntityFactory entityFactory) {\n         return new ImpersonationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public U2FRegistrationLogic u2fRegistrationLogic() {\n+    public U2FRegistrationLogic u2fRegistrationLogic(final AuthProfileDAO authProfileDAO,\n+                                                     final AuthProfileDataBinder authProfileDataBinder,\n+                                                     final EntityFactory entityFactory) {\n         return new U2FRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public WAClientAppLogic waClientAppLogic(final WAClientAppDataBinder binder) {\n+    public WAClientAppLogic waClientAppLogic(final WAClientAppDataBinder binder,\n+                                             final SAML2SPDAO saml2spDAO,\n+                                             final OIDCRPDAO oidcrpDAO,\n+                                             final CASSPDAO casspDAO) {\n         return new WAClientAppLogic(binder, saml2spDAO, oidcrpDAO, casspDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public WAConfigLogic waConfigLogic(\n+            final ServiceOps serviceOps,\n+            final SecurityProperties securityProperties,\n             final WAConfigDataBinder binder,\n             final WAConfigDAO waConfigDAO) {\n \n@@ -204,7 +192,9 @@ public WAConfigLogic waConfigLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public WebAuthnRegistrationLogic webAuthnRegistrationLogic() {\n+    public WebAuthnRegistrationLogic webAuthnRegistrationLogic(final AuthProfileDAO authProfileDAO,\n+                                                               final AuthProfileDataBinder authProfileDataBinder,\n+                                                               final EntityFactory entityFactory) {\n         return new WebAuthnRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n     }\n }"},{"sha":"c55da9326952decd17923c408e37f18d15c9ccdf","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AMRESTCXFContext.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -60,38 +60,33 @@\n import org.apache.syncope.core.rest.cxf.service.wa.WAClientAppServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.wa.WAConfigServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.wa.WebAuthnRegistrationServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class AMRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuthModuleService authModuleService(final AuthModuleLogic authModuleLogic) {\n         return new AuthModuleServiceImpl(authModuleLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuthProfileService authProfileService(final AuthProfileLogic authProfileLogic) {\n         return new AuthProfileServiceImpl(authProfileLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ClientAppService clientAppService(final ClientAppLogic clientAppLogic) {\n         return new ClientAppServiceImpl(clientAppLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GoogleMfaAuthAccountService googleMfaAuthAccountService(\n             final GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic) {\n \n@@ -100,7 +95,6 @@ public GoogleMfaAuthAccountService googleMfaAuthAccountService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GoogleMfaAuthTokenService googleMfaAuthTokenService(\n             final GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic) {\n \n@@ -109,63 +103,54 @@ public GoogleMfaAuthTokenService googleMfaAuthTokenService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ImpersonationService impersonationService(final ImpersonationLogic impersonationLogic) {\n         return new ImpersonationServiceImpl(impersonationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCJWKSService oidcJWKSService(final OIDCJWKSLogic oidcJWKSLogic) {\n         return new OIDCJWKSServiceImpl(oidcJWKSLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2IdPEntityService saml2IdPEntityService(final SAML2IdPEntityLogic saml2IdPEntityLogic) {\n         return new SAML2IdPEntityServiceImpl(saml2IdPEntityLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SPEntityService saml2SPEntityService(final SAML2SPEntityLogic saml2SPEntityLogic) {\n         return new SAML2SPEntityServiceImpl(saml2SPEntityLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SRARouteService sraRouteService(final SRARouteLogic sraRouteLogic) {\n         return new SRARouteServiceImpl(sraRouteLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public U2FRegistrationService u2fRegistrationService(final U2FRegistrationLogic u2fRegistrationLogic) {\n         return new U2FRegistrationServiceImpl(u2fRegistrationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public WAClientAppService waClientAppService(final WAClientAppLogic waClientAppLogic) {\n         return new WAClientAppServiceImpl(waClientAppLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public WAConfigService waConfigService(final WAConfigLogic waConfigLogic) {\n         return new WAConfigServiceImpl(waConfigLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public WebAuthnRegistrationService webAuthnRegistrationService(\n             final WebAuthnRegistrationLogic webAuthnRegistrationLogic) {\n "},{"sha":"67dd5405e6e987991b724560670aa3df8688aa51","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/IdMLogicContext.java","status":"modified","additions":30,"deletions":43,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -39,47 +39,12 @@\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdMLogicContext {\n-\n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n-\n-    @Autowired\n-    private ConnInstanceDataBinder connInstanceDataBinder;\n-\n-    @Autowired\n-    private ConnectorManager connectorManager;\n-\n-    @Autowired\n-    private InboundMatcher inboundMatcher;\n-\n-    @Autowired\n-    private OutboundMatcher outboundMatcher;\n-\n-    @Autowired\n-    private MappingManager mappingManager;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public IdMEntitlementLoader idmEntitlementLoader() {\n@@ -94,8 +59,12 @@ public IdMImplementationTypeLoader idmImplementationTypeLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ConnectorLogic connectorLogic(final ConnIdBundleManager connIdBundleManager) {\n+    public ConnectorLogic connectorLogic(\n+        final ConnIdBundleManager connIdBundleManager,\n+        final ExternalResourceDAO resourceDAO,\n+        final ConnInstanceDAO connInstanceDAO,\n+        final ConnInstanceDataBinder connInstanceDataBinder,\n+        final ConnectorManager connectorManager) {\n         return new ConnectorLogic(\n                 connIdBundleManager,\n                 connectorManager,\n@@ -106,12 +75,20 @@ public ConnectorLogic connectorLogic(final ConnIdBundleManager connIdBundleManag\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReconciliationLogic reconciliationLogic(\n             final RealmDAO realmDAO,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n-            final AnySearchDAO anySearchDAO) {\n+            final AnySearchDAO anySearchDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler,\n+            final ConnectorManager connectorManager,\n+            final InboundMatcher inboundMatcher,\n+            final OutboundMatcher outboundMatcher,\n+            final MappingManager mappingManager) {\n \n         return new ReconciliationLogic(\n                 anyUtilsFactory,\n@@ -131,7 +108,6 @@ public ReconciliationLogic reconciliationLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RemediationLogic remediationLogic(\n             final UserLogic userLogic,\n             final GroupLogic groupLogic,\n@@ -144,8 +120,19 @@ public RemediationLogic remediationLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ResourceLogic resourceLogic(final ResourceDataBinder resourceDataBinder) {\n+    public ResourceLogic resourceLogic(\n+        final ResourceDataBinder resourceDataBinder,\n+        final AnyUtilsFactory anyUtilsFactory,\n+        final AnyTypeDAO anyTypeDAO,\n+        final ExternalResourceDAO resourceDAO,\n+        final ConnInstanceDAO connInstanceDAO,\n+        final VirSchemaDAO virSchemaDAO,\n+        final VirAttrHandler virAttrHandler,\n+        final ConnInstanceDataBinder connInstanceDataBinder,\n+        final ConnectorManager connectorManager,\n+        final OutboundMatcher outboundMatcher,\n+        final MappingManager mappingManager) {\n+        \n         return new ResourceLogic(\n                 resourceDAO,\n                 anyTypeDAO,"},{"sha":"f29b63384426eb67dcf4f3942a4d339d35cb1d3d","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/IdMLogicTestContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.provisioning.java.ProvisioningContext;\n import org.apache.syncope.core.spring.security.SecurityContext;\n import org.apache.syncope.core.workflow.java.WorkflowContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -41,11 +40,10 @@\n @PropertySource(\"classpath:core-test.properties\")\n @Import({ IdRepoLogicContext.class, IdMLogicContext.class, SecurityContext.class,\n     PersistenceContext.class, MasterDomain.class, ProvisioningContext.class, WorkflowContext.class })\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdMLogicTestContext {\n \n     @Bean\n-    @Autowired\n     public TestInitializer testInitializer(\n             final StartupDomainLoader domainLoader,\n             final DomainHolder domainHolder,\n@@ -66,7 +64,6 @@ public ConfParamOps confParamOps() {\n     }\n \n     @Bean\n-    @Autowired\n     public DomainOps domainOps(final DomainRegistry domainRegistry) {\n         return new DummyDomainOps(domainRegistry);\n     }"},{"sha":"0c0ceb217e1061a3c177f6658253ce19b683a5e2","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdMRESTCXFContext.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -34,24 +34,21 @@\n import org.apache.syncope.core.rest.cxf.service.ReconciliationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.RemediationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.ResourceServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdMRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnectorService connectorService(final ConnectorLogic connectorLogic) {\n         return new ConnectorServiceImpl(connectorLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReconciliationService reconciliationService(\n             final SearchCondVisitor searchCondVisitor,\n             final ReconciliationLogic reconciliationLogic) {\n@@ -61,7 +58,6 @@ public ReconciliationService reconciliationService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RemediationService remediationService(\n             final RemediationLogic remediationLogic,\n             final UserDAO userDAO,\n@@ -73,7 +69,6 @@ public RemediationService remediationService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ResourceService resourceService(final ResourceLogic resourceLogic) {\n         return new ResourceServiceImpl(resourceLogic);\n     }"},{"sha":"f28af9a8461be9190c8cf500abd1c4c935f416d6","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":105,"deletions":139,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -92,116 +92,22 @@\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableAspectJAutoProxy;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n-@EnableAspectJAutoProxy\n+@EnableAspectJAutoProxy(proxyTargetClass = false)\n @EnableConfigurationProperties(LogicProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdRepoLogicContext {\n \n-    @Autowired\n-    private LogicProperties logicProperties;\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n-\n-    @Autowired\n-    private AnySearchDAO anySearchDAO;\n-\n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n-\n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private AuditConfDAO auditConfDAO;\n-\n-    @Autowired\n-    private DelegationDAO delegationDAO;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private ExternalResourceDAO externalResourceDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n-\n-    @Autowired\n-    private NotificationDAO notificationDAO;\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private ReportDAO reportDAO;\n-\n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private TemplateUtils templateUtils;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private GroupDataBinder groupDataBinder;\n-\n-    @Autowired\n-    private TaskDataBinder taskDataBinder;\n-\n-    @Autowired\n-    private ConfParamOps confParamOps;\n-\n-    @Autowired\n-    private JobManager jobManager;\n-\n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public LogicInvocationHandler logicInvocationHandler(final NotificationManager notificationManager) {\n+    public LogicInvocationHandler logicInvocationHandler(final NotificationManager notificationManager,\n+                                                         final AuditManager auditManager) {\n         return new LogicInvocationHandler(notificationManager, auditManager);\n     }\n \n@@ -213,27 +119,27 @@ public ImplementationLookup implementationLookup() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuditAccessor auditAccessor() {\n+    public AuditAccessor auditAccessor(final AuditConfDAO auditConfDAO) {\n         return new AuditAccessor(auditConfDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AuditLoader auditLoader(final AuditAccessor auditAccessor, final ImplementationLookup implementationLookup) {\n+    public AuditLoader auditLoader(final AuditAccessor auditAccessor, final ImplementationLookup implementationLookup,\n+                                   final LogicProperties logicProperties) {\n         return new AuditLoader(auditAccessor, implementationLookup, logicProperties);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public EntitlementAccessor entitlementAccessor() {\n+    public EntitlementAccessor entitlementAccessor(final AnyTypeDAO anyTypeDAO) {\n         return new EntitlementAccessor(anyTypeDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public IdRepoEntitlementLoader idRepoEntitlementLoader() {\n-        return new IdRepoEntitlementLoader(entitlementAccessor());\n+    public IdRepoEntitlementLoader idRepoEntitlementLoader(final EntitlementAccessor entitlementAccessor) {\n+        return new IdRepoEntitlementLoader(entitlementAccessor);\n     }\n \n     @ConditionalOnMissingBean\n@@ -244,16 +150,21 @@ public IdRepoImplementationTypeLoader idRepoImplementationTypeLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AccessTokenLogic accessTokenLogic(final AccessTokenDataBinder binder) {\n+    public AccessTokenLogic accessTokenLogic(final AccessTokenDataBinder binder,\n+                                             final AccessTokenDAO accessTokenDAO,\n+                                             final SecurityProperties securityProperties) {\n         return new AccessTokenLogic(securityProperties, binder, accessTokenDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyObjectLogic anyObjectLogic(\n             final AnyObjectDataBinder binder,\n+            final TemplateUtils templateUtils,\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO anySearchDAO,\n             final AnyObjectProvisioningManager provisioningManager) {\n \n         return new AnyObjectLogic(\n@@ -268,21 +179,21 @@ public AnyObjectLogic anyObjectLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AnyTypeClassLogic anyTypeClassLogic(final AnyTypeClassDataBinder binder) {\n+    public AnyTypeClassLogic anyTypeClassLogic(final AnyTypeClassDataBinder binder,\n+                                               final AnyTypeClassDAO anyTypeClassDAO) {\n         return new AnyTypeClassLogic(binder, anyTypeClassDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AnyTypeLogic anyTypeLogic(final AnyTypeDataBinder binder) {\n+    public AnyTypeLogic anyTypeLogic(final AnyTypeDataBinder binder,\n+                                     final AnyTypeDAO anyTypeDAO,\n+                                     final AnyObjectDAO anyObjectDAO) {\n         return new AnyTypeLogic(binder, anyTypeDAO, anyObjectDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ApplicationLogic applicationLogic(\n             final ApplicationDataBinder binder,\n             final ApplicationDAO applicationDAO) {\n@@ -292,9 +203,12 @@ public ApplicationLogic applicationLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuditLogic auditLogic(\n+            final AuditManager auditManager,\n             final AuditLoader auditLoader,\n+            final AuditConfDAO auditConfDAO,\n+            final ExternalResourceDAO externalResourceDAO,\n+            final EntityFactory entityFactory,\n             final AuditDataBinder binder) {\n \n         return new AuditLogic(\n@@ -308,14 +222,14 @@ public AuditLogic auditLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public DelegationLogic delegationLogic(final DelegationDataBinder binder) {\n+    public DelegationLogic delegationLogic(final DelegationDataBinder binder,\n+                                           final UserDAO userDAO,\n+                                           final DelegationDAO delegationDAO) {\n         return new DelegationLogic(binder, delegationDAO, userDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DynRealmLogic dynRealmLogic(\n             final DynRealmDataBinder binder,\n             final DynRealmDAO dynRealmDAO) {\n@@ -325,8 +239,22 @@ public DynRealmLogic dynRealmLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager) {\n+    public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager,\n+                                 final JobManager jobManager,\n+                                 final TemplateUtils templateUtils,\n+                                 final EntityFactory entityFactory,\n+                                 final RealmDAO realmDAO,\n+                                 final AnyTypeDAO anyTypeDAO,\n+                                 final UserDAO userDAO,\n+                                 final GroupDAO groupDAO,\n+                                 final AnySearchDAO anySearchDAO,\n+                                 final SchedulerFactoryBean scheduler,\n+                                 final TaskDAO taskDAO,\n+                                 final ConfParamOps confParamOps,\n+                                 final GroupDataBinder groupDataBinder,\n+                                 final TaskDataBinder taskDataBinder,\n+                                 final ImplementationDAO implementationDAO,\n+                                 final SecurityProperties securityProperties) {\n         return new GroupLogic(\n                 realmDAO,\n                 anyTypeDAO,\n@@ -348,8 +276,15 @@ public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager)\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ImplementationLogic implementationLogic(final ImplementationDataBinder binder) {\n+    public ImplementationLogic implementationLogic(final ImplementationDataBinder binder,\n+                                                   final PlainSchemaDAO plainSchemaDAO,\n+                                                   final RealmDAO realmDAO,\n+                                                   final PolicyDAO policyDAO,\n+                                                   final ReportDAO reportDAO,\n+                                                   final TaskDAO taskDAO,\n+                                                   final ExternalResourceDAO externalResourceDAO,\n+                                                   final ImplementationDAO implementationDAO,\n+                                                   final NotificationDAO notificationDAO) {\n         return new ImplementationLogic(\n                 binder,\n                 implementationDAO,\n@@ -364,38 +299,43 @@ public ImplementationLogic implementationLogic(final ImplementationDataBinder bi\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public MailTemplateLogic mailTemplateLogic(final MailTemplateDAO mailTemplateDAO) {\n+    public MailTemplateLogic mailTemplateLogic(final MailTemplateDAO mailTemplateDAO,\n+                                               final EntityFactory entityFactory,\n+                                               final NotificationDAO notificationDAO) {\n         return new MailTemplateLogic(mailTemplateDAO, notificationDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public NotificationLogic notificationLogic(final NotificationDataBinder binder) {\n+    public NotificationLogic notificationLogic(final NotificationDataBinder binder,\n+                                               final JobManager jobManager,\n+                                               final SchedulerFactoryBean scheduler,\n+                                               final NotificationDAO notificationDAO) {\n         return new NotificationLogic(jobManager, scheduler, notificationDAO, binder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PolicyLogic policyLogic(\n             final PolicyDataBinder binder,\n+            final PolicyDAO policyDAO,\n             final PolicyUtilsFactory policyUtilsFactory) {\n \n         return new PolicyLogic(policyDAO, binder, policyUtilsFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public RealmLogic realmLogic(final RealmDataBinder binder) {\n+    public RealmLogic realmLogic(final RealmDataBinder binder,\n+                                 final RealmDAO realmDAO,\n+                                 final AnySearchDAO anySearchDAO,\n+                                 final PropagationManager propagationManager,\n+                                 final PropagationTaskExecutor taskExecutor) {\n         return new RealmLogic(realmDAO, anySearchDAO, binder, propagationManager, taskExecutor);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RelationshipTypeLogic relationshipTypeLogic(\n             final RelationshipTypeDataBinder binder,\n             final RelationshipTypeDAO relationshipTypeDAO) {\n@@ -405,24 +345,28 @@ public RelationshipTypeLogic relationshipTypeLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReportLogic reportLogic(\n+            final JobManager jobManager,\n+            final ConfParamOps confParamOps,\n             final ReportDataBinder binder,\n+            final SchedulerFactoryBean scheduler,\n+            final ReportDAO reportDAO,\n+            final EntityFactory entityFactory,\n             final ReportExecDAO reportExecDAO) {\n \n         return new ReportLogic(jobManager, scheduler, reportDAO, reportExecDAO, confParamOps, binder, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ReportTemplateLogic reportTemplateLogic(final ReportTemplateDAO reportTemplateDAO) {\n+    public ReportTemplateLogic reportTemplateLogic(final ReportTemplateDAO reportTemplateDAO,\n+                                                   final ReportDAO reportDAO,\n+                                                   final EntityFactory entityFactory) {\n         return new ReportTemplateLogic(reportTemplateDAO, reportDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RoleLogic roleLogic(\n             final RoleDataBinder binder,\n             final RoleDAO roleDAO) {\n@@ -432,27 +376,34 @@ public RoleLogic roleLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public SchemaLogic schemaLogic(final SchemaDataBinder binder) {\n+    public SchemaLogic schemaLogic(final SchemaDataBinder binder,\n+                                   final VirSchemaDAO virSchemaDAO,\n+                                   final AnyTypeClassDAO anyTypeClassDAO,\n+                                   final DerSchemaDAO derSchemaDAO,\n+                                   final PlainSchemaDAO plainSchemaDAO) {\n         return new SchemaLogic(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyTypeClassDAO, binder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SecurityQuestionLogic securityQuestionLogic(\n             final SecurityQuestionDataBinder binder,\n+            final UserDAO userDAO,\n             final SecurityQuestionDAO securityQuestionDAO) {\n \n         return new SecurityQuestionLogic(securityQuestionDAO, userDAO, binder);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SyncopeLogic syncopeLogic(\n             final ContentExporter exporter,\n             final UserWorkflowAdapter uwfAdapter,\n+            final AnyTypeDAO anyTypeDAO,\n+            final GroupDAO groupDAO,\n+            final ConfParamOps confParamOps,\n+            final GroupDataBinder groupDataBinder,\n+            final AnySearchDAO anySearchDAO,\n             final GroupWorkflowAdapter gwfAdapter,\n             final AnyObjectWorkflowAdapter awfAdapter) {\n \n@@ -470,11 +421,18 @@ public SyncopeLogic syncopeLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskLogic taskLogic(\n+            final JobManager jobManager,\n+            final PropagationTaskExecutor taskExecutor,\n             final TaskExecDAO taskExecDAO,\n+            final TaskDAO taskDAO,\n+            final SchedulerFactoryBean scheduler,\n+            final ConfParamOps confParamOps,\n+            final ExternalResourceDAO externalResourceDAO,\n             final NotificationJobDelegate notificationJobDelegate,\n-            final TaskUtilsFactory taskUtilsFactory) {\n+            final TaskDataBinder taskDataBinder,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final NotificationDAO notificationDAO) {\n \n         return new TaskLogic(\n                 jobManager,\n@@ -492,9 +450,17 @@ public TaskLogic taskLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserLogic userLogic(\n             final UserDataBinder binder,\n+            final TemplateUtils templateUtils,\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final DelegationDAO delegationDAO,\n+            final ConfParamOps confParamOps,\n             final UserProvisioningManager provisioningManager,\n             final SyncopeLogic syncopeLogic) {\n "},{"sha":"71b12d49667dfc5b872168c95028d488a567fcdc","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":41,"deletions":62,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,6 +29,8 @@\n import javax.servlet.ServletRequestListener;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n+import org.apache.cxf.jaxrs.ext.ContextProvider;\n+import org.apache.cxf.jaxrs.ext.search.SearchContext;\n import org.apache.cxf.jaxrs.ext.search.SearchContextImpl;\n import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n@@ -121,7 +123,6 @@\n import org.apache.syncope.core.rest.cxf.service.TaskServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserSelfServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n import org.springframework.context.ApplicationContext;\n@@ -132,18 +133,9 @@\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n @PropertySource(\"classpath:errorMessages.properties\")\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdRepoRESTCXFContext {\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n-\n-    @Autowired\n-    private Bus bus;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public ThreadPoolTaskExecutor batchExecutor() {\n@@ -192,9 +184,9 @@ public BeanValidationProvider validationProvider() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public JAXRSBeanValidationInInterceptor validationInInterceptor() {\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor(final BeanValidationProvider validationProvider) {\n         JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n-        validationInInterceptor.setProvider(validationProvider());\n+        validationInInterceptor.setProvider(validationProvider);\n         return validationInInterceptor;\n     }\n \n@@ -215,20 +207,18 @@ public GZIPOutInterceptor gzipOutInterceptor() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RestServiceExceptionMapper restServiceExceptionMapper(final Environment env) {\n         return new RestServiceExceptionMapper(env);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SearchContextProvider searchContextProvider() {\n+    public ContextProvider<SearchContext> searchContextProvider() {\n         return new SearchContextProvider();\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public CheckDomainFilter checkDomainFilter(final DomainHolder domainHolder) {\n         return new CheckDomainFilter(domainHolder);\n     }\n@@ -245,17 +235,14 @@ public AddETagFilter addETagFilter() {\n         return new AddETagFilter();\n     }\n \n-    private String version() {\n-        return ctx.getEnvironment().getProperty(\"version\");\n-    }\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    public OpenApiFeature openapiFeature() {\n+    public OpenApiFeature openapiFeature(final ApplicationContext ctx) {\n+        String version = ctx.getEnvironment().getProperty(\"version\");\n         OpenApiFeature openapiFeature = new OpenApiFeature();\n         openapiFeature.setTitle(\"Apache Syncope\");\n-        openapiFeature.setVersion(version());\n-        openapiFeature.setDescription(\"Apache Syncope \" + version());\n+        openapiFeature.setVersion(version);\n+        openapiFeature.setDescription(\"Apache Syncope \" + version);\n         openapiFeature.setContactName(\"The Apache Syncope community\");\n         openapiFeature.setContactEmail(\"dev@syncope.apache.org\");\n         openapiFeature.setContactUrl(\"https://syncope.apache.org\");\n@@ -284,8 +271,20 @@ public OpenApiFeature openapiFeature() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public Server restContainer(\n+            final AddETagFilter addETagFilter,\n+            final AddDomainFilter addDomainFilter,\n+            final ContextProvider<SearchContext> searchContextProvider,\n+            final JacksonYAMLProvider yamlProvider,\n+            final JacksonXMLProvider xmlProvider,\n+            final JacksonJsonProvider jsonProvider,\n+            final DateParamConverterProvider dateParamConverterProvider,\n+            final JAXRSBeanValidationInInterceptor validationInInterceptor,\n+            final GZIPInInterceptor gzipInInterceptor,\n+            final GZIPOutInterceptor gzipOutInterceptor,\n+            final OpenApiFeature openapiFeature,\n+            final Bus bus,\n+            final ApplicationContext ctx,\n             final CheckDomainFilter checkDomainFilter,\n             final RestServiceExceptionMapper restServiceExceptionMapper) {\n \n@@ -304,23 +303,23 @@ public Server restContainer(\n         restContainer.setProperties(properties);\n \n         restContainer.setProviders(List.of(\n-                dateParamConverterProvider(),\n-                jsonProvider(),\n-                xmlProvider(),\n-                yamlProvider(),\n+                dateParamConverterProvider,\n+                jsonProvider,\n+                xmlProvider,\n+                yamlProvider,\n                 restServiceExceptionMapper,\n-                searchContextProvider(),\n+                searchContextProvider,\n                 checkDomainFilter,\n-                addDomainFilter(),\n-                addETagFilter()));\n+                addDomainFilter,\n+                addETagFilter));\n \n         restContainer.setInInterceptors(List.of(\n-                gzipInInterceptor(),\n-                validationInInterceptor()));\n+                gzipInInterceptor,\n+                validationInInterceptor));\n \n-        restContainer.setOutInterceptors(List.of(gzipOutInterceptor()));\n+        restContainer.setOutInterceptors(List.of(gzipOutInterceptor));\n \n-        restContainer.setFeatures(List.of(openapiFeature()));\n+        restContainer.setFeatures(List.of(openapiFeature));\n \n         restContainer.setApplicationContext(ctx);\n         return restContainer.create();\n@@ -336,148 +335,130 @@ public ServletListenerRegistrationBean<ServletRequestListener> listenerRegistrat\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AccessTokenService accessTokenService(final AccessTokenLogic accessTokenLogic) {\n         return new AccessTokenServiceImpl(accessTokenLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public AnyObjectService anyObjectService(final AnyObjectDAO anyObjectDAO, final AnyObjectLogic anyObjectLogic) {\n+    public AnyObjectService anyObjectService(final AnyObjectDAO anyObjectDAO, final AnyObjectLogic anyObjectLogic,\n+                                             final SearchCondVisitor searchCondVisitor) {\n         return new AnyObjectServiceImpl(searchCondVisitor, anyObjectDAO, anyObjectLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeClassService anyTypeClassService(final AnyTypeClassLogic anyTypeClassLogic) {\n         return new AnyTypeClassServiceImpl(anyTypeClassLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeService anyTypeService(final AnyTypeLogic anyTypeLogic) {\n         return new AnyTypeServiceImpl(anyTypeLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ApplicationService applicationService(final ApplicationLogic applicationLogic) {\n         return new ApplicationServiceImpl(applicationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuditService auditService(final AuditLogic auditLogic) {\n         return new AuditServiceImpl(auditLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DelegationService delegationService(final DelegationLogic delegationLogic) {\n         return new DelegationServiceImpl(delegationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DynRealmService dynRealmService(final DynRealmLogic dynRealmLogic) {\n         return new DynRealmServiceImpl(dynRealmLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public GroupService groupService(final GroupDAO groupDAO, final GroupLogic groupLogic) {\n+    public GroupService groupService(final GroupDAO groupDAO, final GroupLogic groupLogic,\n+                                     final SearchCondVisitor searchCondVisitor) {\n         return new GroupServiceImpl(searchCondVisitor, groupDAO, groupLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ImplementationService implementationService(final ImplementationLogic implementationLogic) {\n         return new ImplementationServiceImpl(implementationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public MailTemplateService mailTemplateService(final MailTemplateLogic mailTemplateLogic) {\n         return new MailTemplateServiceImpl(mailTemplateLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NotificationService notificationService(final NotificationLogic notificationLogic) {\n         return new NotificationServiceImpl(notificationLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PolicyService policyService(final PolicyLogic policyLogic) {\n         return new PolicyServiceImpl(policyLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RealmService realmService(final RealmLogic realmLogic) {\n         return new RealmServiceImpl(realmLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RelationshipTypeService relationshipTypeService(final RelationshipTypeLogic relationshipTypeLogic) {\n         return new RelationshipTypeServiceImpl(relationshipTypeLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReportService reportService(final ReportLogic reportLogic) {\n         return new ReportServiceImpl(reportLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReportTemplateService reportTemplateService(final ReportTemplateLogic reportTemplateLogic) {\n         return new ReportTemplateServiceImpl(reportTemplateLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RoleService roleService(final RoleLogic roleLogic) {\n         return new RoleServiceImpl(roleLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SchemaService schemaService(final SchemaLogic schemaLogic) {\n         return new SchemaServiceImpl(schemaLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SecurityQuestionService securityQuestionService(final SecurityQuestionLogic securityQuestionLogic) {\n         return new SecurityQuestionServiceImpl(securityQuestionLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SyncopeService syncopeService(\n+            final Bus bus,\n             final SyncopeLogic syncopeLogic,\n             final ThreadPoolTaskExecutor batchExecutor,\n             final BatchDAO batchDAO,\n@@ -488,22 +469,20 @@ public SyncopeService syncopeService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskService taskService(final TaskLogic taskLogic) {\n         return new TaskServiceImpl(taskLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserSelfService userSelfService(final UserLogic userLogic, final SyncopeLogic syncopeLogic) {\n         return new UserSelfServiceImpl(userLogic, syncopeLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public UserService userService(final UserDAO userDAO, final UserLogic userLogic) {\n+    public UserService userService(final UserDAO userDAO, final UserLogic userLogic,\n+                                   final SearchCondVisitor searchCondVisitor) {\n         return new UserServiceImpl(searchCondVisitor, userDAO, userLogic);\n     }\n }"},{"sha":"05e0e307d9d58712d557cc0ce8ca586263d1b85f","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/IdRepoRESTCXFTestContext.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -37,7 +37,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.Environment;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class IdRepoRESTCXFTestContext {\n \n     @Autowired\n@@ -75,9 +75,10 @@ public BeanValidationProvider validationProvider() {\n     }\n \n     @Bean\n-    public JAXRSBeanValidationInInterceptor validationInInterceptor() {\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor(\n+        final BeanValidationProvider validationProvider) {\n         JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n-        validationInInterceptor.setProvider(validationProvider());\n+        validationInInterceptor.setProvider(validationProvider);\n         return validationInInterceptor;\n     }\n "},{"sha":"8a3312a8c6197988526aafe1121773b3a435b4a1","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/JPAJSONPersistenceContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -48,7 +48,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public abstract class JPAJSONPersistenceContext {\n \n     @Autowired\n@@ -59,7 +59,6 @@ public abstract class JPAJSONPersistenceContext {\n \n     @ConditionalOnMissingBean(name = \"jpaJSONAnyObjectDAO\")\n     @Bean\n-    @Autowired\n     public AnyObjectDAO anyObjectDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n@@ -82,7 +81,6 @@ public AnyObjectDAO anyObjectDAO(\n \n     @ConditionalOnMissingBean(name = \"jpaJSONGroupDAO\")\n     @Bean\n-    @Autowired\n     public GroupDAO groupDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n@@ -125,7 +123,6 @@ public PlainAttrValueDAO plainAttrValueDAO() {\n \n     @ConditionalOnMissingBean(name = \"jpaJSONUserDAO\")\n     @Bean\n-    @Autowired\n     public UserDAO userDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,"},{"sha":"ab01aac0f2e6bf6a21810b08920ce2d780e0c17e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/MyJPAJSONPersistenceContext.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO;\n import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONPlainSchemaDAO;\n import org.apache.syncope.core.persistence.jpa.entity.MyJPAJSONEntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -53,14 +52,12 @@ public EntityFactory entityFactory() {\n \n     @ConditionalOnMissingBean(name = \"myJPAJSONAnyDAO\")\n     @Bean\n-    @Autowired\n     public JPAJSONAnyDAO anyDAO(final @Lazy PlainSchemaDAO plainSchemaDAO) {\n         return new MyJPAJSONAnyDAO(plainSchemaDAO);\n     }\n \n     @ConditionalOnMissingBean(name = \"myJPAJSONAnySearchDAO\")\n     @Bean\n-    @Autowired\n     public AnySearchDAO anySearchDAO(\n             final @Lazy RealmDAO realmDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,\n@@ -90,7 +87,6 @@ public AuditConfDAO auditConfDAO() {\n \n     @ConditionalOnMissingBean(name = \"myJPAJSONPlainSchemaDAO\")\n     @Bean\n-    @Autowired\n     public PlainSchemaDAO plainSchemaDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainAttrDAO plainAttrDAO,"},{"sha":"88e294914f192467f3fa3e697fd40fd84eec1e90","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/PGJPAJSONPersistenceContext.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO;\n import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONPlainSchemaDAO;\n import org.apache.syncope.core.persistence.jpa.entity.PGJPAJSONEntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -53,14 +52,12 @@ public EntityFactory entityFactory() {\n \n     @ConditionalOnMissingBean(name = \"pgJPAJSONAnyDAO\")\n     @Bean\n-    @Autowired\n     public JPAJSONAnyDAO anyDAO(final @Lazy PlainSchemaDAO plainSchemaDAO) {\n         return new PGJPAJSONAnyDAO(plainSchemaDAO);\n     }\n \n     @ConditionalOnMissingBean(name = \"pgJPAJSONAnySearchDAO\")\n     @Bean\n-    @Autowired\n     public AnySearchDAO anySearchDAO(\n             final @Lazy RealmDAO realmDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,\n@@ -90,7 +87,6 @@ public AuditConfDAO auditConfDAO() {\n \n     @ConditionalOnMissingBean(name = \"pgJPAJSONPlainSchemaDAO\")\n     @Bean\n-    @Autowired\n     public PlainSchemaDAO plainSchemaDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainAttrDAO plainAttrDAO,"},{"sha":"17593f94b7db4d00b05e04efc504e4bc6f1278fb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -45,21 +45,12 @@\n import org.springframework.transaction.PlatformTransactionManager;\n \n @EnableConfigurationProperties(PersistenceProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class MasterDomain {\n \n-    @Autowired\n-    private CommonEntityManagerFactoryConf commonEMFConf;\n-\n-    @Autowired\n-    private ResourceLoader resourceLoader;\n-\n-    @Autowired\n-    private PersistenceProperties props;\n-\n     @ConditionalOnMissingBean(name = \"MasterDataSource\")\n     @Bean(name = \"MasterDataSource\")\n-    public JndiObjectFactoryBean masterDataSource() {\n+    public JndiObjectFactoryBean masterDataSource(final PersistenceProperties props) {\n         HikariConfig hikariConfig = new HikariConfig();\n         hikariConfig.setDriverClassName(props.getDomain().get(0).getJdbcDriver());\n         hikariConfig.setJdbcUrl(props.getDomain().get(0).getJdbcURL());\n@@ -77,15 +68,18 @@ public JndiObjectFactoryBean masterDataSource() {\n \n     @ConditionalOnMissingBean(name = \"MasterDataSourceInitializer\")\n     @Bean(name = \"MasterDataSourceInitializer\")\n-    public DataSourceInitializer masterDataSourceInitializer() {\n+    public DataSourceInitializer masterDataSourceInitializer(\n+        final PersistenceProperties props,\n+        @Qualifier(\"MasterDataSource\")\n+        final JndiObjectFactoryBean masterDataSource) {\n         ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n         databasePopulator.setContinueOnError(true);\n         databasePopulator.setIgnoreFailedDrops(true);\n         databasePopulator.setSqlScriptEncoding(\"UTF-8\");\n         databasePopulator.addScript(new ClassPathResource(\"/audit/\" + props.getDomain().get(0).getAuditSql()));\n \n         DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n-        dataSourceInitializer.setDataSource((DataSource) Objects.requireNonNull(masterDataSource().getObject()));\n+        dataSourceInitializer.setDataSource((DataSource) Objects.requireNonNull(masterDataSource.getObject()));\n         dataSourceInitializer.setEnabled(true);\n         dataSourceInitializer.setDatabasePopulator(databasePopulator);\n         return dataSourceInitializer;\n@@ -94,7 +88,11 @@ public DataSourceInitializer masterDataSourceInitializer() {\n     @ConditionalOnMissingBean(name = \"MasterEntityManagerFactory\")\n     @DependsOn(\"commonEMFConf\")\n     @Bean(name = \"MasterEntityManagerFactory\")\n-    public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n+    public DomainEntityManagerFactoryBean masterEntityManagerFactory(\n+        final PersistenceProperties props,\n+        @Qualifier(\"MasterDataSource\")\n+        final JndiObjectFactoryBean masterDataSource,\n+        final CommonEntityManagerFactoryConf commonEMFConf) {\n         OpenJpaVendorAdapter vendorAdapter = new OpenJpaVendorAdapter();\n         vendorAdapter.setShowSql(false);\n         vendorAdapter.setGenerateDdl(true);\n@@ -103,7 +101,7 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n         DomainEntityManagerFactoryBean masterEntityManagerFactory = new DomainEntityManagerFactoryBean();\n         masterEntityManagerFactory.setMappingResources(props.getDomain().get(0).getOrm());\n         masterEntityManagerFactory.setPersistenceUnitName(SyncopeConstants.MASTER_DOMAIN);\n-        masterEntityManagerFactory.setDataSource(Objects.requireNonNull((DataSource) masterDataSource().getObject()));\n+        masterEntityManagerFactory.setDataSource(Objects.requireNonNull((DataSource) masterDataSource.getObject()));\n         masterEntityManagerFactory.setJpaVendorAdapter(vendorAdapter);\n         masterEntityManagerFactory.setCommonEntityManagerFactoryConf(commonEMFConf);\n \n@@ -118,22 +116,26 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n \n     @ConditionalOnMissingBean(name = \"MasterTransactionManager\")\n     @Bean(name = { \"MasterTransactionManager\", \"Master\" })\n-    public PlatformTransactionManager transactionManager() {\n-        return new JpaTransactionManager(Objects.requireNonNull(masterEntityManagerFactory().getObject()));\n+    public PlatformTransactionManager transactionManager(\n+        @Qualifier(\"MasterEntityManagerFactory\")\n+        final DomainEntityManagerFactoryBean masterEntityManagerFactory) {\n+        return new JpaTransactionManager(Objects.requireNonNull(masterEntityManagerFactory.getObject()));\n     }\n \n     @Bean(name = \"MasterContentXML\")\n-    public InputStream masterContentXML() throws IOException {\n+    public InputStream masterContentXML(final ResourceLoader resourceLoader,\n+                                        final PersistenceProperties props) throws IOException {\n         return resourceLoader.getResource(props.getDomain().get(0).getContent()).getInputStream();\n     }\n \n     @Bean(name = \"MasterKeymasterConfParamsJSON\")\n-    public InputStream masterKeymasterConfParamsJSON() throws IOException {\n+    public InputStream masterKeymasterConfParamsJSON(final ResourceLoader resourceLoader,\n+                                                     final PersistenceProperties props) throws IOException {\n         return resourceLoader.getResource(props.getDomain().get(0).getKeymasterConfParams()).getInputStream();\n     }\n \n     @Bean(name = \"MasterDatabaseSchema\")\n-    public String masterDatabaseSchema() {\n+    public String masterDatabaseSchema(final PersistenceProperties props) {\n         return props.getDomain().get(0).getDbSchema();\n     }\n }"},{"sha":"1385c8951118abc39c7714d7d1825cb3ca2e5881","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":14,"deletions":47,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -134,7 +134,6 @@\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -147,7 +146,7 @@\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n \n @EnableConfigurationProperties(PersistenceProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class PersistenceContext {\n \n     private static final Logger OPENJPA_LOG = LoggerFactory.getLogger(\"org.apache.openjpa\");\n@@ -157,21 +156,6 @@ public static BeanFactoryPostProcessor domainTransactionInterceptorInjector() {\n         return new DomainTransactionInterceptorInjector();\n     }\n \n-    @Autowired\n-    private PersistenceProperties persistenceProperties;\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private ResourceLoader resourceLoader;\n-\n-    @Autowired\n-    private ApplicationEventPublisher publisher;\n-\n-    @Autowired\n-    private Environment env;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public SearchCondVisitor searchCondVisitor() {\n@@ -185,7 +169,7 @@ public Validator localValidatorFactoryBean() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public CommonEntityManagerFactoryConf commonEMFConf() {\n+    public CommonEntityManagerFactoryConf commonEMFConf(final PersistenceProperties persistenceProperties) {\n         CommonEntityManagerFactoryConf commonEMFConf = new CommonEntityManagerFactoryConf();\n         commonEMFConf.setPackagesToScan(\"org.apache.syncope.core.persistence.jpa.entity\");\n         commonEMFConf.setValidationMode(ValidationMode.NONE);\n@@ -218,7 +202,9 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public XMLContentLoader xmlContentLoader() {\n+    public XMLContentLoader xmlContentLoader(final PersistenceProperties persistenceProperties,\n+                                             final ResourceLoader resourceLoader,\n+                                             final Environment env) {\n         return new XMLContentLoader(\n                 resourceLoader.getResource(persistenceProperties.getViewsXML()),\n                 resourceLoader.getResource(persistenceProperties.getIndexesXML()),\n@@ -227,27 +213,24 @@ public XMLContentLoader xmlContentLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public XMLContentExporter xmlContentExporter(final DomainHolder domainHolder, final RealmDAO realmDAO) {\n         return new XMLContentExporter(domainHolder, realmDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public KeymasterConfParamLoader keymasterConfParamLoader(final ConfParamOps confParamOps) {\n         return new KeymasterConfParamLoader(confParamOps);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DomainRegistry domainRegistry() {\n+    public DomainRegistry domainRegistry(final Environment env) {\n         return new DomainConfFactory(env);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RuntimeDomainLoader runtimeDomainLoader(\n             final DomainHolder domainHolder,\n             final DomainRegistry domainRegistry) {\n@@ -257,8 +240,9 @@ public RuntimeDomainLoader runtimeDomainLoader(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public StartupDomainLoader startupDomainLoader(\n+            final PersistenceProperties persistenceProperties,\n+            final ResourceLoader resourceLoader,\n             final DomainOps domainOps,\n             final DomainHolder domainHolder,\n             final DomainRegistry domainRegistry) {\n@@ -274,7 +258,6 @@ public EntityFactory entityFactory() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyUtilsFactory anyUtilsFactory(\n             final @Lazy UserDAO userDAO,\n             final @Lazy GroupDAO groupDAO,\n@@ -298,7 +281,6 @@ public PolicyUtilsFactory policyUtilsFactory() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskUtilsFactory taskUtilsFactory(final @Lazy EntityFactory entityFactory) {\n         return new JPATaskUtilsFactory(entityFactory);\n     }\n@@ -311,14 +293,12 @@ public AccessTokenDAO accessTokenDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ApplicationDAO applicationDAO(final RoleDAO roleDAO, final @Lazy UserDAO userDAO) {\n         return new JPAApplicationDAO(roleDAO, userDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyMatchDAO anyMatchDAO(\n             final @Lazy UserDAO userDAO,\n             final @Lazy GroupDAO groupDAO,\n@@ -332,8 +312,8 @@ public AnyMatchDAO anyMatchDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyObjectDAO anyObjectDAO(\n+            final ApplicationEventPublisher publisher,\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n             final @Lazy DerSchemaDAO derSchemaDAO,\n@@ -353,7 +333,6 @@ public AnyObjectDAO anyObjectDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnySearchDAO anySearchDAO(\n             final RealmDAO realmDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,\n@@ -377,14 +356,12 @@ public AnySearchDAO anySearchDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeDAO anyTypeDAO(final RemediationDAO remediationDAO) {\n         return new JPAAnyTypeDAO(remediationDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeClassDAO anyTypeClassDAO(\n             final AnyTypeDAO anyTypeDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n@@ -428,7 +405,6 @@ public CASSPDAO casSPDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnInstanceDAO connInstanceDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n         return new JPAConnInstanceDAO(resourceDAO);\n     }\n@@ -441,15 +417,14 @@ public DelegationDAO delegationDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DerSchemaDAO derSchemaDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n         return new JPADerSchemaDAO(resourceDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DynRealmDAO dynRealmDAO(\n+            final ApplicationEventPublisher publisher,\n             final @Lazy UserDAO userDAO,\n             final @Lazy GroupDAO groupDAO,\n             final @Lazy AnyObjectDAO anyObjectDAO,\n@@ -469,8 +444,8 @@ public DynRealmDAO dynRealmDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GroupDAO groupDAO(\n+            final ApplicationEventPublisher publisher,\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n             final @Lazy DerSchemaDAO derSchemaDAO,\n@@ -510,7 +485,6 @@ public MailTemplateDAO mailTemplateDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NotificationDAO notificationDAO(final TaskDAO taskDAO) {\n         return new JPANotificationDAO(taskDAO);\n     }\n@@ -541,7 +515,6 @@ public PlainAttrValueDAO plainAttrValueDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PlainSchemaDAO plainSchemaDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainAttrDAO plainAttrDAO,\n@@ -552,7 +525,6 @@ public PlainSchemaDAO plainSchemaDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PolicyDAO policyDAO(\n             final @Lazy RealmDAO realmDAO,\n             final @Lazy ExternalResourceDAO resourceDAO) {\n@@ -562,7 +534,6 @@ public PolicyDAO policyDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RealmDAO realmDAO(final @Lazy RoleDAO roleDAO) {\n         return new JPARealmDAO(roleDAO);\n     }\n@@ -599,7 +570,6 @@ public ReportExecDAO reportExecDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ExternalResourceDAO resourceDAO(\n             final TaskDAO taskDAO,\n             final AnyObjectDAO anyObjectDAO,\n@@ -614,8 +584,8 @@ public ExternalResourceDAO resourceDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RoleDAO roleDAO(\n+            final ApplicationEventPublisher publisher,\n             final @Lazy AnyMatchDAO anyMatchDAO,\n             final @Lazy AnySearchDAO anySearchDAO,\n             final DelegationDAO delegationDAO,\n@@ -644,7 +614,6 @@ public SAML2SPEntityDAO saml2SPEntityDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SecurityQuestionDAO securityQuestionDAO(final UserDAO userDAO) {\n         return new JPASecurityQuestionDAO(userDAO);\n     }\n@@ -657,22 +626,21 @@ public SRARouteDAO sraRouteDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskDAO taskDAO(final RemediationDAO remediationDAO) {\n         return new JPATaskDAO(remediationDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskExecDAO taskExecDAO(final TaskDAO taskDAO) {\n         return new JPATaskExecDAO(taskDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserDAO userDAO(\n+            final ApplicationEventPublisher publisher,\n+            final SecurityProperties securityProperties,\n             final AnyUtilsFactory anyUtilsFactory,\n             final @Lazy PlainSchemaDAO plainSchemaDAO,\n             final @Lazy DerSchemaDAO derSchemaDAO,\n@@ -699,7 +667,6 @@ public UserDAO userDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public VirSchemaDAO virSchemaDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n         return new JPAVirSchemaDAO(resourceDAO);\n     }"},{"sha":"c7048c742430e04885168c12365b65473c933678","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/PersistenceTestContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.core.spring.security.DefaultPasswordGenerator;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -41,7 +40,7 @@\n import org.springframework.core.io.Resource;\n \n @Import(PersistenceContext.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class PersistenceTestContext {\n \n     @Bean\n@@ -76,7 +75,6 @@ public String anonymousUser() {\n     }\n \n     @Bean\n-    @Autowired\n     public TestInitializer testInitializer(\n             final StartupDomainLoader domainLoader,\n             final DomainHolder domainHolder,\n@@ -107,7 +105,6 @@ public ConfParamOps confParamOps() {\n     }\n \n     @Bean\n-    @Autowired\n     public DomainOps domainOps(final DomainRegistry domainRegistry) {\n         return new DummyDomainOps(domainRegistry);\n     }"},{"sha":"c3f267be69f992f63ba05f7634d837e28cea198a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":99,"deletions":103,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import java.io.IOException;\n import java.io.PrintStream;\n import java.nio.charset.StandardCharsets;\n@@ -179,7 +178,7 @@\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n@@ -201,8 +200,8 @@\n \n @EnableAsync\n @EnableConfigurationProperties(ProvisioningProperties.class)\n-@Configuration\n-public class ProvisioningContext implements AsyncConfigurer {\n+@Configuration(proxyBeanMethods = false)\n+public class ProvisioningContext {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ProvisioningContext.class);\n \n@@ -212,33 +211,6 @@ public class ProvisioningContext implements AsyncConfigurer {\n     @Resource(name = \"MasterTransactionManager\")\n     private PlatformTransactionManager masterTransactionManager;\n \n-    @Autowired\n-    private ProvisioningProperties provisioningProperties;\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    @Autowired\n-    private TaskUtilsFactory taskUtilsFactory;\n-\n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n-\n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n-\n-    @Autowired\n-    private DomainHolder domainHolder;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public AsyncConnectorFacade asyncConnectorFacade() {\n@@ -252,7 +224,7 @@ public AsyncConnectorFacade asyncConnectorFacade() {\n      */\n     @Bean\n     @Primary\n-    public Executor asyncConnectorFacadeExecutor() {\n+    public ThreadPoolTaskExecutor asyncConnectorFacadeExecutor(final ProvisioningProperties provisioningProperties) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getCorePoolSize());\n         executor.setMaxPoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getMaxPoolSize());\n@@ -263,18 +235,26 @@ public Executor asyncConnectorFacadeExecutor() {\n         return executor;\n     }\n \n-    @Override\n-    public Executor getAsyncExecutor() {\n-        return asyncConnectorFacadeExecutor();\n+    @Bean\n+    public AsyncConfigurer asyncConfigurer(@Qualifier(\"asyncConnectorFacadeExecutor\")\n+                                           final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor) {\n+        return new AsyncConfigurer() {\n+            @Override\n+            public Executor getAsyncExecutor() {\n+                return asyncConnectorFacadeExecutor;\n+            }\n+        };\n     }\n \n     /**\n      * Used by {@link org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor}.\n      *\n-     * @return executor\n+     * @param provisioningProperties the provisioning properties\n+     * @return executor thread pool task executor\n      */\n     @Bean\n-    public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor() {\n+    public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor(\n+        final ProvisioningProperties provisioningProperties) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n         executor.setMaxPoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n@@ -286,7 +266,7 @@ public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor() {\n     }\n \n     @Bean\n-    public SchedulerDBInit quartzDataSourceInit() throws JsonProcessingException {\n+    public SchedulerDBInit quartzDataSourceInit(final ProvisioningProperties provisioningProperties) {\n         SchedulerDBInit init = new SchedulerDBInit();\n         init.setDataSource(masterDataSource);\n \n@@ -303,7 +283,8 @@ public SchedulerDBInit quartzDataSourceInit() throws JsonProcessingException {\n     @DependsOn(\"quartzDataSourceInit\")\n     @Lazy(false)\n     @Bean\n-    public SchedulerFactoryBean scheduler() {\n+    public SchedulerFactoryBean scheduler(final ApplicationContext ctx,\n+                                          final ProvisioningProperties provisioningProperties) {\n         SchedulerFactoryBean scheduler = new SchedulerFactoryBean();\n         scheduler.setAutoStartup(true);\n         scheduler.setApplicationContext(ctx);\n@@ -334,14 +315,16 @@ public SchedulerFactoryBean scheduler() {\n     }\n \n     @Bean\n-    public SchedulerShutdown schedulerShutdown() {\n+    public SchedulerShutdown schedulerShutdown(final ApplicationContext ctx) {\n         return new SchedulerShutdown(ctx);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public JobManager jobManager(\n+            final ProvisioningProperties provisioningProperties,\n+            final DomainHolder domainHolder,\n+            final SecurityProperties securityProperties,\n             final SchedulerFactoryBean scheduler,\n             final TaskDAO taskDAO,\n             final ReportDAO reportDAO,\n@@ -362,7 +345,8 @@ public JobManager jobManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public JavaMailSender mailSender() throws IllegalArgumentException, NamingException, IOException {\n+    public JavaMailSender mailSender(final ProvisioningProperties provisioningProperties)\n+        throws IllegalArgumentException, IOException {\n         JavaMailSenderImpl mailSender = new JavaMailSenderImpl() {\n \n             @Override\n@@ -431,8 +415,8 @@ protected Transport connectTransport() throws MessagingException {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnectorManager connectorManager(\n+            final EntityFactory entityFactory,\n             final ConnIdBundleManager connIdBundleManager,\n             final RealmDAO realmDAO,\n             final ExternalResourceDAO resourceDAO,\n@@ -450,15 +434,14 @@ public ConnectorManager connectorManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnectorLoader connectorLoader(final ConnectorManager connectorManager) {\n         return new ConnectorLoader(connectorManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public InboundMatcher inboundMatcher(\n+            final AnyUtilsFactory anyUtilsFactory,\n             final UserDAO userDAO,\n             final AnyObjectDAO anyObjectDAO,\n             final GroupDAO groupDAO,\n@@ -482,8 +465,8 @@ public InboundMatcher inboundMatcher(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OutboundMatcher outboundMatcher(\n+            final AnyUtilsFactory anyUtilsFactory,\n             final MappingManager mappingManager,\n             final UserDAO userDAO,\n             final VirSchemaDAO virSchemaDAO,\n@@ -494,14 +477,14 @@ public OutboundMatcher outboundMatcher(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DerAttrHandler derAttrHandler() {\n+    public DerAttrHandler derAttrHandler(final AnyUtilsFactory anyUtilsFactory) {\n         return new DefaultDerAttrHandler(anyUtilsFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public VirAttrHandler virAttrHandler(\n+            final AnyUtilsFactory anyUtilsFactory,\n             final ConnectorManager connectorManager,\n             final VirAttrCache virAttrCache,\n             @Lazy final OutboundMatcher outboundMatcher) {\n@@ -511,8 +494,9 @@ public VirAttrHandler virAttrHandler(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public MappingManager mappingManager(\n+            final PasswordGenerator passwordGenerator,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final UserDAO userDAO,\n             final AnyObjectDAO anyObjectDAO,\n@@ -543,15 +527,15 @@ public MappingManager mappingManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TemplateUtils templateUtils(final UserDAO userDAO, final GroupDAO groupDAO) {\n         return new TemplateUtils(userDAO, groupDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnObjectUtils connObjectUtils(\n+            final PasswordGenerator passwordGenerator,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final MappingManager mappingManager,\n             final TemplateUtils templateUtils,\n             final RealmDAO realmDAO,\n@@ -570,8 +554,9 @@ public ConnObjectUtils connObjectUtils(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PropagationManager propagationManager(\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final VirSchemaDAO virSchemaDAO,\n             final ExternalResourceDAO resourceDAO,\n             final ConnObjectUtils connObjectUtils,\n@@ -590,14 +575,14 @@ public PropagationManager propagationManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ConnIdBundleManager connIdBundleManager() {\n+    public ConnIdBundleManager connIdBundleManager(final ProvisioningProperties provisioningProperties) {\n         return new DefaultConnIdBundleManager(provisioningProperties.getConnIdLocation());\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public IntAttrNameParser intAttrNameParser(\n+        public IntAttrNameParser intAttrNameParser(\n+            final AnyUtilsFactory anyUtilsFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final VirSchemaDAO virSchemaDAO) {\n@@ -607,8 +592,12 @@ public IntAttrNameParser intAttrNameParser(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PropagationTaskExecutor propagationTaskExecutor(\n+            @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n+            final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor,\n+            final EntityFactory entityFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final ConnectorManager connectorManager,\n             final ConnObjectUtils connObjectUtils,\n             final UserDAO userDAO,\n@@ -636,12 +625,11 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 taskUtilsFactory,\n                 entityFactory,\n                 outboundMatcher,\n-                propagationTaskExecutorAsyncExecutor());\n+                propagationTaskExecutorAsyncExecutor);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserProvisioningManager userProvisioningManager(\n             final UserWorkflowAdapter uwfAdapter,\n             final PropagationManager propagationManager,\n@@ -659,7 +647,6 @@ public UserProvisioningManager userProvisioningManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GroupProvisioningManager groupProvisioningManager(\n             final GroupWorkflowAdapter gwfAdapter,\n             final PropagationManager propagationManager,\n@@ -679,7 +666,6 @@ public GroupProvisioningManager groupProvisioningManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyObjectProvisioningManager anyObjectProvisioningManager(\n             final AnyObjectWorkflowAdapter awfAdapter,\n             final PropagationManager propagationManager,\n@@ -697,16 +683,17 @@ public AnyObjectProvisioningManager anyObjectProvisioningManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public VirAttrCache virAttrCache() {\n+    public VirAttrCache virAttrCache(final ProvisioningProperties provisioningProperties) {\n         VirAttrCache virAttrCache = new CaffeineVirAttrCache();\n         virAttrCache.setCacheSpec(provisioningProperties.getVirAttrCacheSpec());\n         return virAttrCache;\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NotificationManager notificationManager(\n+            final EntityFactory entityFactory,\n+            final SearchCondVisitor searchCondVisitor,\n             final DerSchemaDAO derSchemaDAO,\n             final VirSchemaDAO virSchemaDAO,\n             final NotificationDAO notificationDAO,\n@@ -747,21 +734,20 @@ public NotificationManager notificationManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuditManager auditManager(final AuditConfDAO auditConfDAO) {\n         return new DefaultAuditManager(auditConfDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SystemLoadReporterJob systemLoadReporterJob() {\n+    public SystemLoadReporterJob systemLoadReporterJob(final ApplicationContext ctx) {\n         return new SystemLoadReporterJob(ctx);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NotificationJobDelegate notificationJobDelegate(\n+            final EntityFactory entityFactory,\n             final TaskDAO taskDAO,\n             final JavaMailSender mailSender,\n             final AuditManager auditManager,\n@@ -777,22 +763,24 @@ public NotificationJobDelegate notificationJobDelegate(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public NotificationJob notificationJob(final NotificationJobDelegate delegate) {\n+    public NotificationJob notificationJob(final NotificationJobDelegate delegate,\n+                                           final DomainHolder domainHolder,\n+                                           final SecurityProperties securityProperties) {\n         return new NotificationJob(securityProperties, domainHolder, delegate);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ReportJobDelegate reportJobDelegate(final ReportDAO reportDAO, final ReportExecDAO reportExecDAO) {\n+    public ReportJobDelegate reportJobDelegate(final ReportDAO reportDAO, final ReportExecDAO reportExecDAO,\n+                                               final EntityFactory entityFactory) {\n         return new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AccessTokenDataBinder accessTokenDataBinder(\n+            final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final AccessTokenJWSSigner jwsSigner,\n             final AccessTokenDAO accessTokenDAO,\n             final ConfParamOps confParamOps,\n@@ -809,8 +797,9 @@ public AccessTokenDataBinder accessTokenDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyObjectDataBinder anyObjectDataBinder(\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final RealmDAO realmDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n@@ -851,8 +840,8 @@ public AnyObjectDataBinder anyObjectDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeClassDataBinder anyTypeClassDataBinder(\n+            final EntityFactory entityFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final VirSchemaDAO virSchemaDAO,\n@@ -863,8 +852,9 @@ public AnyTypeClassDataBinder anyTypeClassDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyTypeDataBinder anyTypeDataBinder(\n+            final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final AnyTypeDAO anyTypeDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n             final AccessTokenDAO accessTokenDAO) {\n@@ -879,8 +869,8 @@ public AnyTypeDataBinder anyTypeDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ApplicationDataBinder applicationDataBinder(final ApplicationDAO applicationDAO) {\n+    public ApplicationDataBinder applicationDataBinder(final ApplicationDAO applicationDAO,\n+                                                       final EntityFactory entityFactory) {\n         return new ApplicationDataBinderImpl(applicationDAO, entityFactory);\n     }\n \n@@ -892,27 +882,27 @@ public AuditDataBinder auditDataBinder() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuthModuleDataBinder authModuleDataBinder() {\n+    public AuthModuleDataBinder authModuleDataBinder(final EntityFactory entityFactory) {\n         return new AuthModuleDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuthProfileDataBinder authProfileDataBinder() {\n+    public AuthProfileDataBinder authProfileDataBinder(final EntityFactory entityFactory) {\n         return new AuthProfileDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public ClientAppDataBinder clientAppDataBinder(final PolicyDAO policyDAO) {\n+    public ClientAppDataBinder clientAppDataBinder(final PolicyDAO policyDAO,\n+                                                   final EntityFactory entityFactory) {\n         return new ClientAppDataBinderImpl(policyDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConnInstanceDataBinder connInstanceDataBinder(\n+            final EntityFactory entityFactory,\n             final ConnIdBundleManager connIdBundleManager,\n             final ConnInstanceDAO connInstanceDAO,\n             final RealmDAO realmDAO) {\n@@ -922,22 +912,25 @@ public ConnInstanceDataBinder connInstanceDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public DelegationDataBinder delegationDataBinder(final UserDAO userDAO, final RoleDAO roleDAO) {\n+    public DelegationDataBinder delegationDataBinder(final UserDAO userDAO, final RoleDAO roleDAO,\n+                                                     final EntityFactory entityFactory) {\n         return new DelegationDataBinderImpl(userDAO, roleDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public DynRealmDataBinder dynRealmDataBinder(final AnyTypeDAO anyTypeDAO, final DynRealmDAO dynRealmDAO) {\n+    public DynRealmDataBinder dynRealmDataBinder(final AnyTypeDAO anyTypeDAO, final DynRealmDAO dynRealmDAO,\n+                                                 final SearchCondVisitor searchCondVisitor,\n+                                                 final EntityFactory entityFactory) {\n         return new DynRealmDataBinderImpl(anyTypeDAO, dynRealmDAO, entityFactory, searchCondVisitor);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GroupDataBinder groupDataBinder(\n+            final EntityFactory entityFactory,\n+            final SearchCondVisitor searchCondVisitor,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final RealmDAO realmDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n@@ -979,14 +972,14 @@ public GroupDataBinder groupDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ImplementationDataBinder implementationDataBinder() {\n+    public ImplementationDataBinder implementationDataBinder(final EntityFactory entityFactory) {\n         return new ImplementationDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NotificationDataBinder notificationDataBinder(\n+            final EntityFactory entityFactory,\n             final MailTemplateDAO mailTemplateDAO,\n             final AnyTypeDAO anyTypeDAO,\n             final ImplementationDAO implementationDAO,\n@@ -1003,14 +996,14 @@ public NotificationDataBinder notificationDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public OIDCJWKSDataBinder oidcJWKSDataBinder() {\n+    public OIDCJWKSDataBinder oidcJWKSDataBinder(final EntityFactory entityFactory) {\n         return new OIDCJWKSDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PolicyDataBinder policyDataBinder(\n+            final EntityFactory entityFactory,\n             final ExternalResourceDAO resourceDAO,\n             final RealmDAO realmDAO,\n             final AnyTypeDAO anyTypeDAO,\n@@ -1021,8 +1014,8 @@ public PolicyDataBinder policyDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RealmDataBinder realmDataBinder(\n+            final EntityFactory entityFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final ImplementationDAO implementationDAO,\n             final RealmDAO realmDAO,\n@@ -1040,7 +1033,7 @@ public RealmDataBinder realmDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RelationshipTypeDataBinder relationshipTypeDataBinder() {\n+    public RelationshipTypeDataBinder relationshipTypeDataBinder(final EntityFactory entityFactory) {\n         return new RelationshipTypeDataBinderImpl(entityFactory);\n     }\n \n@@ -1052,7 +1045,6 @@ public RemediationDataBinder remediationDataBinder() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ReportDataBinder reportDataBinder(\n             final ReportTemplateDAO reportTemplateDAO,\n             final ReportExecDAO reportExecDAO,\n@@ -1064,8 +1056,8 @@ public ReportDataBinder reportDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ResourceDataBinder resourceDataBinder(\n+            final EntityFactory entityFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final ConnInstanceDAO connInstanceDAO,\n             final PolicyDAO policyDAO,\n@@ -1089,8 +1081,9 @@ public ResourceDataBinder resourceDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public RoleDataBinder roleDataBinder(\n+            final EntityFactory entityFactory,\n+            final SearchCondVisitor searchCondVisitor,\n             final RealmDAO realmDAO,\n             final DynRealmDAO dynRealmDAO,\n             final RoleDAO roleDAO,\n@@ -1101,13 +1094,13 @@ public RoleDataBinder roleDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SAML2IdPEntityDataBinder saml2IdPEntityDataBinder() {\n+    public SAML2IdPEntityDataBinder saml2IdPEntityDataBinder(final EntityFactory entityFactory) {\n         return new SAML2IdPEntityDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SAML2SPEntityDataBinder saml2SPEntityDataBinder() {\n+    public SAML2SPEntityDataBinder saml2SPEntityDataBinder(final EntityFactory entityFactory) {\n         return new SAML2SPEntityDataBinderImpl(entityFactory);\n     }\n \n@@ -1119,8 +1112,9 @@ public SRARouteDataBinder sraRouteDataBinder() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SchemaDataBinder schemaDataBinder(\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n             final AnyTypeClassDAO anyTypeClassDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n@@ -1143,14 +1137,15 @@ public SchemaDataBinder schemaDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SecurityQuestionDataBinder securityQuestionDataBinder() {\n+    public SecurityQuestionDataBinder securityQuestionDataBinder(final EntityFactory entityFactory) {\n         return new SecurityQuestionDataBinderImpl(entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public TaskDataBinder taskDataBinder(\n+            final EntityFactory entityFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n             final RealmDAO realmDAO,\n             final ExternalResourceDAO resourceDAO,\n             final TaskExecDAO taskExecDAO,\n@@ -1171,8 +1166,10 @@ public TaskDataBinder taskDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserDataBinder userDataBinder(\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final SecurityProperties securityProperties,\n             final AnyTypeDAO anyTypeDAO,\n             final RealmDAO realmDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n@@ -1226,14 +1223,13 @@ public UserDataBinder userDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public WAConfigDataBinder waConfigDataBinder(final WAConfigDAO waConfigDAO) {\n+    public WAConfigDataBinder waConfigDataBinder(final WAConfigDAO waConfigDAO,\n+                                                 final EntityFactory entityFactory) {\n         return new WAConfigDataBinderImpl(waConfigDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public WAClientAppDataBinder waClientAppDataBinder(\n             final ClientAppDataBinder clientAppDataBinder,\n             final PolicyDataBinder policyDataBinder,"},{"sha":"5794382682ae99118cab59802950770d4038a614","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ProvisioningTestContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.spring.security.SecurityContext;\n import org.apache.syncope.core.workflow.java.WorkflowContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -39,11 +38,10 @@\n @PropertySource(\"classpath:core-test.properties\")\n @Import({ ProvisioningContext.class, SecurityContext.class,\n     PersistenceContext.class, MasterDomain.class, WorkflowContext.class })\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class ProvisioningTestContext {\n \n     @Bean\n-    @Autowired\n     public TestInitializer testInitializer(\n             final StartupDomainLoader domainLoader,\n             final DomainHolder domainHolder,\n@@ -64,7 +62,6 @@ public ConfParamOps confParamOps() {\n     }\n \n     @Bean\n-    @Autowired\n     public DomainOps domainOps(final DomainRegistry domainRegistry) {\n         return new DummyDomainOps(domainRegistry);\n     }"},{"sha":"fcdb84ca7f8a01bd39a27660118a9f55ca13eccf","filename":"core/self-keymaster-starter/src/main/java/org/apache/syncope/core/starter/SelfKeymasterContext.java","status":"modified","additions":4,"deletions":20,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fself-keymaster-starter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSelfKeymasterContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -61,7 +61,6 @@\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.spring.security.UsernamePasswordAuthenticationProvider;\n import org.apache.syncope.core.spring.security.WebSecurityContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -75,7 +74,7 @@\n import org.springframework.core.type.AnnotatedTypeMetadata;\n \n @EnableConfigurationProperties(KeymasterProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n @AutoConfigureBefore(WebSecurityContext.class)\n public class SelfKeymasterContext {\n \n@@ -92,16 +91,11 @@ public ConditionOutcome getMatchOutcome(final ConditionContext context, final An\n         }\n     }\n \n-    @Autowired\n-    private Bus bus;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    @Autowired\n-    public Server selfKeymasterContainer(final JacksonJsonProvider jsonProvider) {\n+    public Server selfKeymasterContainer(final JacksonJsonProvider jsonProvider,\n+                                         final ApplicationContext ctx,\n+                                         final Bus bus) {\n         SpringJAXRSServerFactoryBean selfKeymasterContainer = new SpringJAXRSServerFactoryBean();\n         selfKeymasterContainer.setBus(bus);\n         selfKeymasterContainer.setAddress(\"/keymaster\");\n@@ -128,7 +122,6 @@ public Server selfKeymasterContainer(final JacksonJsonProvider jsonProvider) {\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    @Autowired\n     public UsernamePasswordAuthenticationProvider usernamePasswordAuthenticationProvider(\n             final DomainOps domainOps,\n             final AuthDataAccessor dataAccessor,\n@@ -148,14 +141,12 @@ public UsernamePasswordAuthenticationProvider usernamePasswordAuthenticationProv\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    @Autowired\n     public ConfParamOps internalConfParamOps(final ConfParamLogic confParamLogic, final KeymasterProperties props) {\n         return new SelfKeymasterInternalConfParamOps(confParamLogic, props);\n     }\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    @Autowired\n     public ServiceOps internalServiceOps(\n             final NetworkServiceLogic networkServiceLogic,\n             final KeymasterProperties props) {\n@@ -165,14 +156,12 @@ public ServiceOps internalServiceOps(\n \n     @Conditional(SelfKeymasterCondition.class)\n     @Bean\n-    @Autowired\n     public DomainOps domainOps(final DomainLogic domainLogic, final KeymasterProperties props) {\n         return new SelfKeymasterInternalDomainOps(domainLogic, props);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConfParamLogic confParamLogic(\n             final ConfParamDAO confParamDAO,\n             final SelfKeymasterEntityFactory selfKeymasterEntityFactory) {\n@@ -182,7 +171,6 @@ public ConfParamLogic confParamLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DomainLogic domainLogic(\n             final DomainDAO domainDAO,\n             final SelfKeymasterEntityFactory selfKeymasterEntityFactory,\n@@ -193,7 +181,6 @@ public DomainLogic domainLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NetworkServiceLogic networkServiceLogic(\n             final NetworkServiceDAO serviceDAO,\n             final SelfKeymasterEntityFactory selfKeymasterEntityFactory) {\n@@ -227,21 +214,18 @@ public NetworkServiceDAO networkServiceDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ConfParamService confParamService(final ConfParamLogic confParamLogic) {\n         return new ConfParamServiceImpl(confParamLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DomainService domainService(final DomainLogic domainLogic) {\n         return new DomainServiceImpl(domainLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public NetworkServiceService networkServiceService(final NetworkServiceLogic networkServiceLogic) {\n         return new NetworkServiceServiceImpl(networkServiceLogic);\n     }"},{"sha":"f489e96935598362c2d506b2e86a82d1ff245a47","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -143,9 +143,10 @@ public static <T> T callAs(\n     }\n \n     public static <T> T callAsAdmin(final String domain, final Callable<T> callable) {\n+        SecurityProperties properties = ApplicationContextProvider.getBeanFactory().getBean(SecurityProperties.class);\n         return callAs(\n                 domain,\n-                ApplicationContextProvider.getBeanFactory().getBean(\"adminUser\", String.class),\n+                properties.getAdminUser(),\n                 EntitlementsHolder.getInstance().getValues(),\n                 callable);\n     }"},{"sha":"56f0244e8705e577c318b10f109c7f06732e691b","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecurityContext.java","status":"modified","additions":14,"deletions":41,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecurityContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,65 +29,34 @@\n import org.apache.syncope.core.spring.security.jws.AccessTokenJWSVerifier;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.core.GrantedAuthorityDefaults;\n \n @EnableConfigurationProperties(SecurityProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SecurityContext {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SecurityContext.class);\n \n-    @Autowired\n-    private SecurityProperties props;\n-\n     @Bean\n-    public String adminUser() {\n-        return props.getAdminUser();\n-    }\n-\n-    @Bean\n-    public String adminPassword() {\n-        return props.getAdminPassword();\n-    }\n-\n-    @Bean\n-    public CipherAlgorithm adminPasswordAlgorithm() {\n+    public CipherAlgorithm adminPasswordAlgorithm(final SecurityProperties props) {\n         return props.getAdminPasswordAlgorithm();\n     }\n \n     @Bean\n-    public String anonymousUser() {\n-        return props.getAnonymousUser();\n-    }\n-\n-    @Bean\n-    public String anonymousKey() {\n-        return props.getAnonymousKey();\n-    }\n-\n-    @Bean\n-    public String jwtIssuer() {\n-        return props.getJwtIssuer();\n-    }\n-\n-    @Bean\n-    public JWSAlgorithm jwsAlgorithm() {\n+    public JWSAlgorithm jwsAlgorithm(final SecurityProperties props) {\n         return JWSAlgorithm.parse(props.getJwsAlgorithm().toUpperCase());\n     }\n \n-    @Bean\n-    public String jwsKey() {\n+    private static String jwsKey(final JWSAlgorithm jwsAlgorithm, final SecurityProperties props) {\n         String jwsKey = props.getJwsKey();\n         if (jwsKey == null) {\n             throw new IllegalArgumentException(\"No JWS key provided\");\n         }\n \n-        JWSAlgorithm jwsAlgorithm = jwsAlgorithm();\n         if (JWSAlgorithm.Family.HMAC_SHA.contains(jwsAlgorithm)) {\n             int minLength = jwsAlgorithm.equals(JWSAlgorithm.HS256)\n                     ? 256 / 8\n@@ -107,24 +76,28 @@ public String jwsKey() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DefaultCredentialChecker credentialChecker() {\n-        return new DefaultCredentialChecker(jwsKey(), adminPassword(), anonymousKey());\n+    public DefaultCredentialChecker credentialChecker(final SecurityProperties props,\n+                                                      final JWSAlgorithm jwsAlgorithm) {\n+        return new DefaultCredentialChecker(jwsKey(jwsAlgorithm, props),\n+            props.getAdminPassword(), props.getAnonymousKey());\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AccessTokenJWSVerifier accessTokenJWSVerifier()\n+    public AccessTokenJWSVerifier accessTokenJWSVerifier(final JWSAlgorithm jwsAlgorithm,\n+                                                         final SecurityProperties props)\n             throws JOSEException, NoSuchAlgorithmException, InvalidKeySpecException {\n \n-        return new AccessTokenJWSVerifier(jwsAlgorithm(), jwsKey());\n+        return new AccessTokenJWSVerifier(jwsAlgorithm, jwsKey(jwsAlgorithm, props));\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AccessTokenJWSSigner accessTokenJWSSigner()\n+    public AccessTokenJWSSigner accessTokenJWSSigner(final JWSAlgorithm jwsAlgorithm,\n+                                                     final SecurityProperties props)\n             throws KeyLengthException, NoSuchAlgorithmException, InvalidKeySpecException {\n \n-        return new AccessTokenJWSSigner(jwsAlgorithm(), jwsKey());\n+        return new AccessTokenJWSSigner(jwsAlgorithm, jwsKey(jwsAlgorithm, props));\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"82aa27a76fdbf86eb47004ec7150e4928d7c2720","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/WebSecurityContext.java","status":"modified","additions":54,"deletions":50,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -33,10 +33,10 @@\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n@@ -54,16 +54,10 @@\n \n @EnableWebSecurity\n @EnableGlobalMethodSecurity(prePostEnabled = true)\n-public class WebSecurityContext extends WebSecurityConfigurerAdapter {\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n+@Configuration(proxyBeanMethods = false)\n+public class WebSecurityContext {\n \n     public WebSecurityContext() {\n-        super(true);\n         SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n     }\n \n@@ -74,15 +68,61 @@ public HttpFirewall allowUrlEncodedSlashHttpFirewall() {\n         return firewall;\n     }\n \n-    @Override\n-    public void configure(final WebSecurity web) {\n-        web.httpFirewall(allowUrlEncodedSlashHttpFirewall());\n+    @Bean\n+    public WebSecurityConfigurerAdapter webSecurityConfigurerAdapter(\n+        final ApplicationContext ctx,\n+        final SecurityProperties securityProperties,\n+        final HttpFirewall allowUrlEncodedSlashHttpFirewall) {\n+        return new WebSecurityConfigurerAdapter(true) {\n+            @Override\n+            public void configure(final WebSecurity web) {\n+                web.httpFirewall(allowUrlEncodedSlashHttpFirewall);\n+            }\n+\n+            @Override\n+            protected void configure(final HttpSecurity http) throws Exception {\n+                SyncopeBasicAuthenticationEntryPoint basicAuthenticationEntryPoint =\n+                    new SyncopeBasicAuthenticationEntryPoint();\n+                basicAuthenticationEntryPoint.setRealmName(\"Apache Syncope authentication\");\n+\n+                SyncopeAuthenticationDetailsSource authenticationDetailsSource =\n+                    new SyncopeAuthenticationDetailsSource();\n+\n+                JWTAuthenticationFilter jwtAuthenticationFilter = new JWTAuthenticationFilter(\n+                    authenticationManager(),\n+                    basicAuthenticationEntryPoint,\n+                    authenticationDetailsSource,\n+                    ctx.getBean(AuthDataAccessor.class),\n+                    ctx.getBean(DefaultCredentialChecker.class));\n+\n+                http.authorizeRequests().\n+                    antMatchers(\"/**\").permitAll().and().\n+                    sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().\n+                    securityContext().securityContextRepository(new NullSecurityContextRepository()).and().\n+                    anonymous().principal(securityProperties.getAnonymousUser()).and().\n+                    httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint).\n+                    authenticationDetailsSource(authenticationDetailsSource).and().\n+                    exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and().\n+                    addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class).\n+                    addFilterBefore(new MustChangePasswordFilter(), FilterSecurityInterceptor.class).\n+                    headers().disable().\n+                    csrf().disable();\n+            }\n+\n+\n+            @Override\n+            protected void configure(final AuthenticationManagerBuilder builder) throws Exception {\n+                builder.\n+                    authenticationProvider(ctx.getBean(UsernamePasswordAuthenticationProvider.class)).\n+                    authenticationProvider(ctx.getBean(JWTAuthenticationProvider.class));\n+            }\n+        };\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UsernamePasswordAuthenticationProvider usernamePasswordAuthenticationProvider(\n+            final SecurityProperties securityProperties,\n             final DomainOps domainOps,\n             final AuthDataAccessor dataAccessor,\n             final UserProvisioningManager provisioningManager,\n@@ -98,55 +138,19 @@ public UsernamePasswordAuthenticationProvider usernamePasswordAuthenticationProv\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public JWTAuthenticationProvider jwtAuthenticationProvider(final AuthDataAccessor authDataAccessor) {\n         return new JWTAuthenticationProvider(authDataAccessor);\n     }\n \n-    @Override\n-    protected void configure(final AuthenticationManagerBuilder builder) throws Exception {\n-        builder.\n-                authenticationProvider(ctx.getBean(UsernamePasswordAuthenticationProvider.class)).\n-                authenticationProvider(ctx.getBean(JWTAuthenticationProvider.class));\n-    }\n-\n     @Bean\n     public AccessDeniedHandler accessDeniedHandler() {\n         return new SyncopeAccessDeniedHandler();\n     }\n \n-    @Override\n-    protected void configure(final HttpSecurity http) throws Exception {\n-        SyncopeBasicAuthenticationEntryPoint basicAuthenticationEntryPoint = new SyncopeBasicAuthenticationEntryPoint();\n-        basicAuthenticationEntryPoint.setRealmName(\"Apache Syncope authentication\");\n-\n-        SyncopeAuthenticationDetailsSource authenticationDetailsSource = new SyncopeAuthenticationDetailsSource();\n-\n-        JWTAuthenticationFilter jwtAuthenticationFilter = new JWTAuthenticationFilter(\n-                authenticationManager(),\n-                basicAuthenticationEntryPoint,\n-                authenticationDetailsSource,\n-                ctx.getBean(AuthDataAccessor.class),\n-                ctx.getBean(DefaultCredentialChecker.class));\n-\n-        http.authorizeRequests().\n-                antMatchers(\"/**\").permitAll().and().\n-                sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().\n-                securityContext().securityContextRepository(new NullSecurityContextRepository()).and().\n-                anonymous().principal(securityProperties.getAnonymousUser()).and().\n-                httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint).\n-                authenticationDetailsSource(authenticationDetailsSource).and().\n-                exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and().\n-                addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class).\n-                addFilterBefore(new MustChangePasswordFilter(), FilterSecurityInterceptor.class).\n-                headers().disable().\n-                csrf().disable();\n-    }\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AuthDataAccessor authDataAccessor(\n+            final SecurityProperties securityProperties,\n             final RealmDAO realmDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,"},{"sha":"5514eb6fb409abe31faf0f594b788a765684b3fe","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/SpringTestConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FSpringTestConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FSpringTestConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FSpringTestConfiguration.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,7 +24,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Primary;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SpringTestConfiguration {\n \n     @Bean"},{"sha":"faa387bf36a0014b6526ff35d8ed2c7c67551228","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SwaggerUIInitializer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSwaggerUIInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSwaggerUIInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSwaggerUIInitializer.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -22,7 +22,7 @@\n import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SwaggerUIInitializer implements WebMvcConfigurer {\n \n     @Override"},{"sha":"3b2ff45c29ddad46bbc6b736bba42def3acfc6d7","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":152,"deletions":9,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,14 +19,53 @@\n package org.apache.syncope.core.starter;\n \n import java.util.Map;\n+\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.core.logic.LogicProperties;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.java.ProvisioningProperties;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.starter.actuate.DomainsHealthIndicator;\n import org.apache.syncope.core.starter.actuate.ExternalResourcesHealthIndicator;\n+import org.apache.syncope.core.starter.actuate.DefaultSyncopeCoreInfoContributor;\n import org.apache.syncope.core.starter.actuate.SyncopeCoreInfoContributor;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.actuate.mail.MailHealthIndicator;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -39,9 +78,12 @@\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.context.PayloadApplicationEvent;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.event.EventListener;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n @SpringBootApplication(exclude = {\n@@ -51,7 +93,7 @@\n     DataSourceAutoConfiguration.class,\n     DataSourceTransactionManagerAutoConfiguration.class,\n     JdbcTemplateAutoConfiguration.class,\n-    QuartzAutoConfiguration.class })\n+    QuartzAutoConfiguration.class }, proxyBeanMethods = false)\n @EnableTransactionManagement\n public class SyncopeCoreApplication extends SpringBootServletInitializer {\n \n@@ -61,18 +103,93 @@ public static void main(final String[] args) {\n                 build().run(args);\n     }\n \n-    @Autowired\n-    protected JavaMailSender mailSender;\n-\n     @Override\n     protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n         return builder.properties(Map.of(\"spring.config.name\", \"core\")).sources(SyncopeCoreApplication.class);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeCoreInfoContributor syncopeCoreInfoContributor() {\n-        return new SyncopeCoreInfoContributor();\n+    public SyncopeCoreInfoContributor syncopeCoreInfoContributor(\n+        final SecurityProperties securityProperties,\n+        final PersistenceProperties persistenceProperties,\n+        final ProvisioningProperties provisioningProperties,\n+        final LogicProperties logicProperties,\n+        final AnyTypeDAO anyTypeDAO,\n+        final AnyTypeClassDAO anyTypeClassDAO,\n+        final UserDAO userDAO,\n+        final GroupDAO groupDAO,\n+        final AnyObjectDAO anyObjectDAO,\n+        final ExternalResourceDAO resourceDAO,\n+        final ConfParamOps confParamOps,\n+        final ServiceOps serviceOps,\n+        final ConnIdBundleManager bundleManager,\n+        final PropagationTaskExecutor propagationTaskExecutor,\n+        final AnyObjectWorkflowAdapter awfAdapter,\n+        final UserWorkflowAdapter uwfAdapter,\n+        final GroupWorkflowAdapter gwfAdapter,\n+        final AnyObjectProvisioningManager aProvisioningManager,\n+        final UserProvisioningManager uProvisioningManager,\n+        final GroupProvisioningManager gProvisioningManager,\n+        final VirAttrCache virAttrCache,\n+        final NotificationManager notificationManager,\n+        final AuditManager auditManager,\n+        final PasswordGenerator passwordGenerator,\n+        final EntityFactory entityFactory,\n+        final PlainSchemaDAO plainSchemaDAO,\n+        final PlainAttrDAO plainAttrDAO,\n+        final PlainAttrValueDAO plainAttrValueDAO,\n+        final AnySearchDAO anySearchDAO,\n+        final ImplementationLookup implLookup,\n+        final PolicyDAO policyDAO,\n+        final NotificationDAO notificationDAO,\n+        final TaskDAO taskDAO,\n+        final VirSchemaDAO virSchemaDAO,\n+        final RoleDAO roleDAO,\n+        final SecurityQuestionDAO securityQuestionDAO,\n+        @Qualifier(\"asyncConnectorFacadeExecutor\")\n+        final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n+        @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n+        final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+        \n+        return new DefaultSyncopeCoreInfoContributor(securityProperties,\n+            persistenceProperties,\n+            provisioningProperties,\n+            logicProperties,\n+            anyTypeDAO,\n+            anyTypeClassDAO,\n+            userDAO,\n+            groupDAO,\n+            anyObjectDAO,\n+            resourceDAO,\n+            confParamOps,\n+            serviceOps,\n+            bundleManager,\n+            propagationTaskExecutor,\n+            awfAdapter,\n+            uwfAdapter,\n+            gwfAdapter,\n+            aProvisioningManager,\n+            uProvisioningManager,\n+            gProvisioningManager,\n+            virAttrCache,\n+            notificationManager,\n+            auditManager,\n+            passwordGenerator,\n+            entityFactory,\n+            plainSchemaDAO,\n+            plainAttrDAO,\n+            plainAttrValueDAO,\n+            anySearchDAO,\n+            implLookup,\n+            policyDAO,\n+            notificationDAO,\n+            taskDAO,\n+            virSchemaDAO,\n+            roleDAO,\n+            securityQuestionDAO,\n+            asyncConnectorFacadeExecutor,\n+            propagationTaskExecutorAsyncExecutor);\n     }\n \n     @ConditionalOnMissingBean\n@@ -83,7 +200,7 @@ public DomainsHealthIndicator domainsHealthIndicator() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public MailHealthIndicator mailHealthIndicator() {\n+    public MailHealthIndicator mailHealthIndicator(final JavaMailSender mailSender) {\n         return new MailHealthIndicator((JavaMailSenderImpl) mailSender);\n     }\n \n@@ -96,7 +213,6 @@ public ExternalResourcesHealthIndicator externalResourcesHealthIndicator() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SyncopeCoreStart keymasterStart(final DomainHolder domainHolder) {\n         return new SyncopeCoreStart(domainHolder);\n     }\n@@ -105,4 +221,31 @@ public SyncopeCoreStart keymasterStart(final DomainHolder domainHolder) {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.CORE);\n     }\n+\n+\n+    @Bean\n+    public SyncopeStarterEventListener syncopeCoreEventListener(\n+        @Qualifier(\"syncopeCoreInfoContributor\")\n+        final SyncopeCoreInfoContributor syncopeCoreInfoContributor) {\n+        return new DefaultSyncopeStarterEventListener(syncopeCoreInfoContributor);\n+    }\n+\n+    @FunctionalInterface\n+    public interface SyncopeStarterEventListener {\n+        void addLoadInstant(PayloadApplicationEvent<SystemInfo.LoadInstant> event);\n+    }\n+\n+    public static class DefaultSyncopeStarterEventListener implements SyncopeStarterEventListener {\n+        private final SyncopeCoreInfoContributor contributor;\n+\n+        public DefaultSyncopeStarterEventListener(final SyncopeCoreInfoContributor contributor) {\n+            this.contributor = contributor;\n+        }\n+\n+        @EventListener\n+        @Override\n+        public void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n+            contributor.addLoadInstant(event);\n+        }\n+    }\n }"},{"sha":"23df5fa4f5b9b039bfb8228e746c02ce7ea3f719","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DefaultSyncopeCoreInfoContributor.java","status":"added","additions":511,"deletions":0,"changes":511,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -0,0 +1,511 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter.actuate;\n+\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.lib.info.JavaImplInfo;\n+import org.apache.syncope.common.lib.info.NumbersInfo;\n+import org.apache.syncope.common.lib.info.PlatformInfo;\n+import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.logic.LogicProperties;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.java.ProvisioningProperties;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.boot.actuate.info.Info;\n+import org.springframework.boot.actuate.info.InfoContributor;\n+import org.springframework.context.PayloadApplicationEvent;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.management.RuntimeMXBean;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DefaultSyncopeCoreInfoContributor implements SyncopeCoreInfoContributor, InfoContributor {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultSyncopeCoreInfoContributor.class);\n+\n+    protected static final Object MONITOR = new Object();\n+\n+    protected static PlatformInfo PLATFORM_INFO;\n+\n+    protected static SystemInfo SYSTEM_INFO;\n+\n+    protected static final Pattern THREADPOOLTASKEXECUTOR_PATTERN = Pattern.compile(\n+            \".*, pool size = ([0-9]+), \"\n+            + \"active threads = ([0-9]+), \"\n+            + \"queued tasks = ([0-9]+), \"\n+            + \"completed tasks = ([0-9]+).*\");\n+\n+    protected static void setTaskExecutorInfo(final String toString, final NumbersInfo.TaskExecutorInfo info) {\n+        Matcher matcher = THREADPOOLTASKEXECUTOR_PATTERN.matcher(toString);\n+        if (matcher.matches() && matcher.groupCount() == 4) {\n+            try {\n+                info.setSize(Integer.valueOf(matcher.group(1)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing thread pool size\", e);\n+            }\n+            try {\n+                info.setActive(Integer.valueOf(matcher.group(2)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing active threads #\", e);\n+            }\n+            try {\n+                info.setQueued(Integer.valueOf(matcher.group(3)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing queued threads #\", e);\n+            }\n+            try {\n+                info.setCompleted(Integer.valueOf(matcher.group(4)));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"While parsing completed threads #\", e);\n+            }\n+        }\n+    }\n+\n+    protected static void initSystemInfo() {\n+        if (SYSTEM_INFO == null) {\n+            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n+            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+\n+            SYSTEM_INFO = new SystemInfo();\n+            try {\n+                SYSTEM_INFO.setHostname(InetAddress.getLocalHost().getHostName());\n+            } catch (UnknownHostException e) {\n+                LOG.error(\"Could not get host name\", e);\n+            }\n+\n+            SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n+                    + ' ' + operatingSystemMXBean.getVersion()\n+                    + ' ' + operatingSystemMXBean.getArch());\n+            SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n+            SYSTEM_INFO.setJvm(\n+                    runtimeMXBean.getVmName()\n+                    + ' ' + System.getProperty(\"java.version\")\n+                    + ' ' + runtimeMXBean.getVmVendor());\n+            SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n+        }\n+    }\n+\n+    private final SecurityProperties securityProperties;\n+\n+    private final PersistenceProperties persistenceProperties;\n+\n+    private final ProvisioningProperties provisioningProperties;\n+\n+    private final LogicProperties logicProperties;\n+\n+    private final AnyTypeDAO anyTypeDAO;\n+\n+    private final AnyTypeClassDAO anyTypeClassDAO;\n+\n+    private final UserDAO userDAO;\n+\n+    private final GroupDAO groupDAO;\n+\n+    private final AnyObjectDAO anyObjectDAO;\n+\n+    private final ExternalResourceDAO resourceDAO;\n+\n+    private final ConfParamOps confParamOps;\n+\n+    private final ServiceOps serviceOps;\n+\n+    private final ConnIdBundleManager bundleManager;\n+\n+    private final PropagationTaskExecutor propagationTaskExecutor;\n+\n+    private final AnyObjectWorkflowAdapter awfAdapter;\n+\n+    private final UserWorkflowAdapter uwfAdapter;\n+\n+    private final GroupWorkflowAdapter gwfAdapter;\n+\n+    private final AnyObjectProvisioningManager aProvisioningManager;\n+\n+    private final UserProvisioningManager uProvisioningManager;\n+\n+    private final GroupProvisioningManager gProvisioningManager;\n+\n+    private final VirAttrCache virAttrCache;\n+\n+    private final NotificationManager notificationManager;\n+\n+    private final AuditManager auditManager;\n+\n+    private final PasswordGenerator passwordGenerator;\n+\n+    private final EntityFactory entityFactory;\n+\n+    private final PlainSchemaDAO plainSchemaDAO;\n+\n+    private final PlainAttrDAO plainAttrDAO;\n+\n+    private final PlainAttrValueDAO plainAttrValueDAO;\n+\n+    private final AnySearchDAO anySearchDAO;\n+\n+    private final ImplementationLookup implLookup;\n+\n+    private final PolicyDAO policyDAO;\n+\n+    private final NotificationDAO notificationDAO;\n+\n+    private final TaskDAO taskDAO;\n+\n+    private final VirSchemaDAO virSchemaDAO;\n+\n+    private final RoleDAO roleDAO;\n+\n+    private final SecurityQuestionDAO securityQuestionDAO;\n+\n+    private final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor;\n+\n+    private final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n+\n+    public DefaultSyncopeCoreInfoContributor(\n+        final SecurityProperties securityProperties,\n+        final PersistenceProperties persistenceProperties,\n+        final ProvisioningProperties provisioningProperties,\n+        final LogicProperties logicProperties,\n+        final AnyTypeDAO anyTypeDAO,\n+        final AnyTypeClassDAO anyTypeClassDAO,\n+        final UserDAO userDAO,\n+        final GroupDAO groupDAO,\n+        final AnyObjectDAO anyObjectDAO,\n+        final ExternalResourceDAO resourceDAO,\n+        final ConfParamOps confParamOps,\n+        final ServiceOps serviceOps,\n+        final ConnIdBundleManager bundleManager,\n+        final PropagationTaskExecutor propagationTaskExecutor,\n+        final AnyObjectWorkflowAdapter awfAdapter,\n+        final UserWorkflowAdapter uwfAdapter,\n+        final GroupWorkflowAdapter gwfAdapter,\n+        final AnyObjectProvisioningManager aProvisioningManager,\n+        final UserProvisioningManager uProvisioningManager,\n+        final GroupProvisioningManager gProvisioningManager,\n+        final VirAttrCache virAttrCache,\n+        final NotificationManager notificationManager,\n+        final AuditManager auditManager,\n+        final PasswordGenerator passwordGenerator,\n+        final EntityFactory entityFactory,\n+        final PlainSchemaDAO plainSchemaDAO,\n+        final PlainAttrDAO plainAttrDAO,\n+        final PlainAttrValueDAO plainAttrValueDAO,\n+        final AnySearchDAO anySearchDAO,\n+        final ImplementationLookup implLookup,\n+        final PolicyDAO policyDAO,\n+        final NotificationDAO notificationDAO,\n+        final TaskDAO taskDAO,\n+        final VirSchemaDAO virSchemaDAO,\n+        final RoleDAO roleDAO,\n+        final SecurityQuestionDAO securityQuestionDAO,\n+        final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n+        final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+\n+        this.securityProperties = securityProperties;\n+        this.persistenceProperties = persistenceProperties;\n+        this.provisioningProperties = provisioningProperties;\n+        this.logicProperties = logicProperties;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.confParamOps = confParamOps;\n+        this.serviceOps = serviceOps;\n+        this.bundleManager = bundleManager;\n+        this.propagationTaskExecutor = propagationTaskExecutor;\n+        this.awfAdapter = awfAdapter;\n+        this.uwfAdapter = uwfAdapter;\n+        this.gwfAdapter = gwfAdapter;\n+        this.aProvisioningManager = aProvisioningManager;\n+        this.uProvisioningManager = uProvisioningManager;\n+        this.gProvisioningManager = gProvisioningManager;\n+        this.virAttrCache = virAttrCache;\n+        this.notificationManager = notificationManager;\n+        this.auditManager = auditManager;\n+        this.passwordGenerator = passwordGenerator;\n+        this.entityFactory = entityFactory;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.plainAttrDAO = plainAttrDAO;\n+        this.plainAttrValueDAO = plainAttrValueDAO;\n+        this.anySearchDAO = anySearchDAO;\n+        this.implLookup = implLookup;\n+        this.policyDAO = policyDAO;\n+        this.notificationDAO = notificationDAO;\n+        this.taskDAO = taskDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.roleDAO = roleDAO;\n+        this.securityQuestionDAO = securityQuestionDAO;\n+        this.asyncConnectorFacadeExecutor = asyncConnectorFacadeExecutor;\n+        this.propagationTaskExecutorAsyncExecutor = propagationTaskExecutorAsyncExecutor;\n+    }\n+\n+    protected boolean isSelfRegAllowed() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"selfRegistration.allowed\", false, Boolean.class);\n+    }\n+\n+    protected boolean isPwdResetAllowed() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.allowed\", false, Boolean.class);\n+    }\n+\n+    protected boolean isPwdResetRequiringSecurityQuestions() {\n+        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.securityQuestion\", true, Boolean.class);\n+    }\n+\n+    protected void buildPlatform() {\n+        synchronized (this) {\n+            if (PLATFORM_INFO == null) {\n+                PLATFORM_INFO = new PlatformInfo();\n+                PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n+                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n+\n+                PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n+                        map(URI::toASCIIString).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n+                PLATFORM_INFO.getWorkflowInfo().\n+                        setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n+\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setNotificationManager(AopUtils.getTargetClass(notificationManager).getName());\n+                PLATFORM_INFO.getProvisioningInfo().\n+                        setAuditManager(AopUtils.getTargetClass(auditManager).getName());\n+\n+                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n+\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setEntityFactory(AopUtils.getTargetClass(entityFactory).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainSchemaDAO(AopUtils.getTargetClass(plainSchemaDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainAttrDAO(AopUtils.getTargetClass(plainAttrDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setPlainAttrValueDAO(AopUtils.getTargetClass(plainAttrValueDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setUserDAO(AopUtils.getTargetClass(userDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setGroupDAO(AopUtils.getTargetClass(groupDAO).getName());\n+                PLATFORM_INFO.getPersistenceInfo().\n+                        setAnyObjectDAO(AopUtils.getTargetClass(anyObjectDAO).getName());\n+\n+                ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n+                    Set<String> classNames = implLookup.getClassNames(typeName);\n+                    if (classNames != null) {\n+                        JavaImplInfo javaImplInfo = new JavaImplInfo();\n+                        javaImplInfo.setType(typeName);\n+                        javaImplInfo.getClasses().addAll(classNames);\n+\n+                        PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                    }\n+                });\n+            }\n+\n+            PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n+            PLATFORM_INFO.setPwdResetAllowed(isPwdResetAllowed());\n+            PLATFORM_INFO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n+\n+            PLATFORM_INFO.getEntitlements().clear();\n+            PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n+\n+            PLATFORM_INFO.getImplementationTypes().clear();\n+            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues().keySet());\n+\n+            AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n+                PLATFORM_INFO.getAnyTypes().clear();\n+                PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getUserClasses().clear();\n+                PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getAnyTypeClasses().clear();\n+                PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+\n+                PLATFORM_INFO.getResources().clear();\n+                PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n+                        map(Entity::getKey).collect(Collectors.toList()));\n+                return null;\n+            });\n+        }\n+    }\n+\n+    protected NumbersInfo buildNumbers() {\n+        NumbersInfo numbersInfo = new NumbersInfo();\n+\n+        numbersInfo.setTotalUsers(userDAO.count());\n+        numbersInfo.getUsersByRealm().putAll(userDAO.countByRealm());\n+        numbersInfo.getUsersByStatus().putAll(userDAO.countByStatus());\n+\n+        numbersInfo.setTotalGroups(groupDAO.count());\n+        numbersInfo.getGroupsByRealm().putAll(groupDAO.countByRealm());\n+\n+        Map<AnyType, Integer> anyObjectNumbers = anyObjectDAO.countByType();\n+        int i = 0;\n+        for (Iterator<Map.Entry<AnyType, Integer>> itor = anyObjectNumbers.entrySet().iterator();\n+                i < 2 && itor.hasNext(); i++) {\n+\n+            Map.Entry<AnyType, Integer> entry = itor.next();\n+            if (i == 0) {\n+                numbersInfo.setAnyType1(entry.getKey().getKey());\n+                numbersInfo.setTotalAny1(entry.getValue());\n+                numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            } else {\n+                numbersInfo.setAnyType2(entry.getKey().getKey());\n+                numbersInfo.setTotalAny2(entry.getValue());\n+                numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n+            }\n+        }\n+\n+        numbersInfo.setTotalResources(resourceDAO.count());\n+\n+        numbersInfo.setTotalRoles(roleDAO.count());\n+\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), !policyDAO.find(AccountPolicy.class).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.PASSWORD_POLICY.name(), !policyDAO.find(PasswordPolicy.class).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.NOTIFICATION.name(), !notificationDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.PULL_TASK.name(), !taskDAO.findAll(TaskType.PULL).isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.VIR_SCHEMA.name(), !virSchemaDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ANY_TYPE.name(), !anyObjectNumbers.isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.SECURITY_QUESTION.name(), !securityQuestionDAO.findAll().isEmpty());\n+        numbersInfo.getConfCompleteness().put(\n+                NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n+\n+        setTaskExecutorInfo(\n+                asyncConnectorFacadeExecutor.getThreadPoolExecutor().toString(),\n+                numbersInfo.getAsyncConnectorExecutor());\n+        setTaskExecutorInfo(\n+                propagationTaskExecutorAsyncExecutor.getThreadPoolExecutor().toString(),\n+                numbersInfo.getPropagationTaskExecutor());\n+\n+        return numbersInfo;\n+    }\n+\n+    protected void buildSystem() {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n+        }\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void contribute(final Info.Builder builder) {\n+        buildPlatform();\n+        builder.withDetail(\"platform\", PLATFORM_INFO);\n+\n+        builder.withDetail(\"numbers\", buildNumbers());\n+\n+        buildSystem();\n+        builder.withDetail(\"system\", SYSTEM_INFO);\n+\n+        builder.withDetail(\"securityProperties\", securityProperties);\n+        builder.withDetail(\"persistenceProperties\", persistenceProperties);\n+        builder.withDetail(\"provisioningProperties\", provisioningProperties);\n+        builder.withDetail(\"logicProperties\", logicProperties);\n+    }\n+\n+    @Override\n+    public void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n+        synchronized (MONITOR) {\n+            initSystemInfo();\n+            SYSTEM_INFO.getLoad().add(event.getPayload());\n+        }\n+    }\n+}"},{"sha":"ad97624e0e6a5f1fd0698fde3caca8947049d19d","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/SyncopeCoreInfoContributor.java","status":"modified","additions":4,"deletions":447,"changes":451,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FSyncopeCoreInfoContributor.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -16,456 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.syncope.core.starter.actuate;\n \n-import java.lang.management.ManagementFactory;\n-import java.lang.management.OperatingSystemMXBean;\n-import java.lang.management.RuntimeMXBean;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.UnknownHostException;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import javax.annotation.Resource;\n-import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.common.lib.info.JavaImplInfo;\n-import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.types.EntitlementsHolder;\n-import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.logic.LogicProperties;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n-import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AuditManager;\n-import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.ProvisioningProperties;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.aop.support.AopUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.actuate.info.Info;\n-import org.springframework.boot.actuate.info.InfoContributor;\n import org.springframework.context.PayloadApplicationEvent;\n-import org.springframework.context.event.EventListener;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class SyncopeCoreInfoContributor implements InfoContributor {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreInfoContributor.class);\n-\n-    protected static final Object MONITOR = new Object();\n-\n-    protected static PlatformInfo PLATFORM_INFO;\n-\n-    protected static SystemInfo SYSTEM_INFO;\n-\n-    protected static final Pattern THREADPOOLTASKEXECUTOR_PATTERN = Pattern.compile(\n-            \".*, pool size = ([0-9]+), \"\n-            + \"active threads = ([0-9]+), \"\n-            + \"queued tasks = ([0-9]+), \"\n-            + \"completed tasks = ([0-9]+).*\");\n-\n-    protected static void setTaskExecutorInfo(final String toString, final NumbersInfo.TaskExecutorInfo info) {\n-        Matcher matcher = THREADPOOLTASKEXECUTOR_PATTERN.matcher(toString);\n-        if (matcher.matches() && matcher.groupCount() == 4) {\n-            try {\n-                info.setSize(Integer.valueOf(matcher.group(1)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing thread pool size\", e);\n-            }\n-            try {\n-                info.setActive(Integer.valueOf(matcher.group(2)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing active threads #\", e);\n-            }\n-            try {\n-                info.setQueued(Integer.valueOf(matcher.group(3)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing queued threads #\", e);\n-            }\n-            try {\n-                info.setCompleted(Integer.valueOf(matcher.group(4)));\n-            } catch (NumberFormatException e) {\n-                LOG.error(\"While parsing completed threads #\", e);\n-            }\n-        }\n-    }\n-\n-    protected static void initSystemInfo() {\n-        if (SYSTEM_INFO == null) {\n-            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n-            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n-\n-            SYSTEM_INFO = new SystemInfo();\n-            try {\n-                SYSTEM_INFO.setHostname(InetAddress.getLocalHost().getHostName());\n-            } catch (UnknownHostException e) {\n-                LOG.error(\"Could not get host name\", e);\n-            }\n-\n-            SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n-                    + ' ' + operatingSystemMXBean.getVersion()\n-                    + ' ' + operatingSystemMXBean.getArch());\n-            SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n-            SYSTEM_INFO.setJvm(\n-                    runtimeMXBean.getVmName()\n-                    + ' ' + System.getProperty(\"java.version\")\n-                    + ' ' + runtimeMXBean.getVmVendor());\n-            SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n-        }\n-    }\n-\n-    @EventListener\n-    public void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n-        synchronized (MONITOR) {\n-            initSystemInfo();\n-            SYSTEM_INFO.getLoad().add(event.getPayload());\n-        }\n-    }\n-\n-    @Autowired\n-    protected SecurityProperties securityProperties;\n-\n-    @Autowired\n-    protected PersistenceProperties persistenceProperties;\n-\n-    @Autowired\n-    protected ProvisioningProperties provisioningProperties;\n-\n-    @Autowired\n-    protected LogicProperties logicProperties;\n-\n-    @Autowired\n-    protected AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    protected AnyTypeClassDAO anyTypeClassDAO;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    protected ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    protected ConfParamOps confParamOps;\n-\n-    @Autowired\n-    protected ServiceOps serviceOps;\n-\n-    @Autowired\n-    protected ConnIdBundleManager bundleManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor propagationTaskExecutor;\n-\n-    @Autowired\n-    protected AnyObjectWorkflowAdapter awfAdapter;\n-\n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n-\n-    @Autowired\n-    protected GroupWorkflowAdapter gwfAdapter;\n-\n-    @Autowired\n-    protected AnyObjectProvisioningManager aProvisioningManager;\n-\n-    @Autowired\n-    protected UserProvisioningManager uProvisioningManager;\n-\n-    @Autowired\n-    protected GroupProvisioningManager gProvisioningManager;\n-\n-    @Autowired\n-    protected VirAttrCache virAttrCache;\n-\n-    @Autowired\n-    protected NotificationManager notificationManager;\n-\n-    @Autowired\n-    protected AuditManager auditManager;\n-\n-    @Autowired\n-    protected PasswordGenerator passwordGenerator;\n-\n-    @Autowired\n-    protected EntityFactory entityFactory;\n-\n-    @Autowired\n-    protected PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    protected PlainAttrDAO plainAttrDAO;\n-\n-    @Autowired\n-    protected PlainAttrValueDAO plainAttrValueDAO;\n-\n-    @Autowired\n-    protected AnySearchDAO anySearchDAO;\n-\n-    @Autowired\n-    protected ImplementationLookup implLookup;\n-\n-    @Autowired\n-    protected PolicyDAO policyDAO;\n-\n-    @Autowired\n-    protected NotificationDAO notificationDAO;\n-\n-    @Autowired\n-    protected TaskDAO taskDAO;\n-\n-    @Autowired\n-    protected VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    protected RoleDAO roleDAO;\n-\n-    @Autowired\n-    protected SecurityQuestionDAO securityQuestionDAO;\n-\n-    @Resource(name = \"asyncConnectorFacadeExecutor\")\n-    protected ThreadPoolTaskExecutor asyncConnectorFacadeExecutor;\n-\n-    @Resource(name = \"propagationTaskExecutorAsyncExecutor\")\n-    protected ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n-\n-    protected boolean isSelfRegAllowed() {\n-        return confParamOps.get(AuthContextUtils.getDomain(), \"selfRegistration.allowed\", false, Boolean.class);\n-    }\n-\n-    protected boolean isPwdResetAllowed() {\n-        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.allowed\", false, Boolean.class);\n-    }\n-\n-    protected boolean isPwdResetRequiringSecurityQuestions() {\n-        return confParamOps.get(AuthContextUtils.getDomain(), \"passwordReset.securityQuestion\", true, Boolean.class);\n-    }\n-\n-    protected void buildPlatform() {\n-        synchronized (this) {\n-            if (PLATFORM_INFO == null) {\n-                PLATFORM_INFO = new PlatformInfo();\n-                PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n-                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n-\n-                PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n-                        map(URI::toASCIIString).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n-\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setNotificationManager(AopUtils.getTargetClass(notificationManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAuditManager(AopUtils.getTargetClass(auditManager).getName());\n-\n-                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n-\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setEntityFactory(AopUtils.getTargetClass(entityFactory).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainSchemaDAO(AopUtils.getTargetClass(plainSchemaDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrDAO(AopUtils.getTargetClass(plainAttrDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrValueDAO(AopUtils.getTargetClass(plainAttrValueDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setUserDAO(AopUtils.getTargetClass(userDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setGroupDAO(AopUtils.getTargetClass(groupDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnyObjectDAO(AopUtils.getTargetClass(anyObjectDAO).getName());\n-\n-                ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n-                    Set<String> classNames = implLookup.getClassNames(typeName);\n-                    if (classNames != null) {\n-                        JavaImplInfo javaImplInfo = new JavaImplInfo();\n-                        javaImplInfo.setType(typeName);\n-                        javaImplInfo.getClasses().addAll(classNames);\n-\n-                        PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n-                    }\n-                });\n-            }\n-\n-            PLATFORM_INFO.setSelfRegAllowed(isSelfRegAllowed());\n-            PLATFORM_INFO.setPwdResetAllowed(isPwdResetAllowed());\n-            PLATFORM_INFO.setPwdResetRequiringSecurityQuestions(isPwdResetRequiringSecurityQuestions());\n-\n-            PLATFORM_INFO.getEntitlements().clear();\n-            PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n-\n-            PLATFORM_INFO.getImplementationTypes().clear();\n-            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues().keySet());\n-\n-            AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n-                PLATFORM_INFO.getAnyTypes().clear();\n-                PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getUserClasses().clear();\n-                PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getAnyTypeClasses().clear();\n-                PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-\n-                PLATFORM_INFO.getResources().clear();\n-                PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n-                return null;\n-            });\n-        }\n-    }\n-\n-    protected NumbersInfo buildNumbers() {\n-        NumbersInfo numbersInfo = new NumbersInfo();\n-\n-        numbersInfo.setTotalUsers(userDAO.count());\n-        numbersInfo.getUsersByRealm().putAll(userDAO.countByRealm());\n-        numbersInfo.getUsersByStatus().putAll(userDAO.countByStatus());\n-\n-        numbersInfo.setTotalGroups(groupDAO.count());\n-        numbersInfo.getGroupsByRealm().putAll(groupDAO.countByRealm());\n-\n-        Map<AnyType, Integer> anyObjectNumbers = anyObjectDAO.countByType();\n-        int i = 0;\n-        for (Iterator<Map.Entry<AnyType, Integer>> itor = anyObjectNumbers.entrySet().iterator();\n-                i < 2 && itor.hasNext(); i++) {\n-\n-            Map.Entry<AnyType, Integer> entry = itor.next();\n-            if (i == 0) {\n-                numbersInfo.setAnyType1(entry.getKey().getKey());\n-                numbersInfo.setTotalAny1(entry.getValue());\n-                numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n-            } else {\n-                numbersInfo.setAnyType2(entry.getKey().getKey());\n-                numbersInfo.setTotalAny2(entry.getValue());\n-                numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n-            }\n-        }\n-\n-        numbersInfo.setTotalResources(resourceDAO.count());\n-\n-        numbersInfo.setTotalRoles(roleDAO.count());\n-\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.RESOURCE.name(), numbersInfo.getTotalResources() > 0);\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ACCOUNT_POLICY.name(), !policyDAO.find(AccountPolicy.class).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.PASSWORD_POLICY.name(), !policyDAO.find(PasswordPolicy.class).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.NOTIFICATION.name(), !notificationDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.PULL_TASK.name(), !taskDAO.findAll(TaskType.PULL).isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.VIR_SCHEMA.name(), !virSchemaDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ANY_TYPE.name(), !anyObjectNumbers.isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.SECURITY_QUESTION.name(), !securityQuestionDAO.findAll().isEmpty());\n-        numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n-\n-        setTaskExecutorInfo(\n-                asyncConnectorFacadeExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getAsyncConnectorExecutor());\n-        setTaskExecutorInfo(\n-                propagationTaskExecutorAsyncExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getPropagationTaskExecutor());\n-\n-        return numbersInfo;\n-    }\n-\n-    protected void buildSystem() {\n-        synchronized (MONITOR) {\n-            initSystemInfo();\n-        }\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public void contribute(final Info.Builder builder) {\n-        buildPlatform();\n-        builder.withDetail(\"platform\", PLATFORM_INFO);\n-\n-        builder.withDetail(\"numbers\", buildNumbers());\n-\n-        buildSystem();\n-        builder.withDetail(\"system\", SYSTEM_INFO);\n \n-        builder.withDetail(\"securityProperties\", securityProperties);\n-        builder.withDetail(\"persistenceProperties\", persistenceProperties);\n-        builder.withDetail(\"provisioningProperties\", provisioningProperties);\n-        builder.withDetail(\"logicProperties\", logicProperties);\n-    }\n+@FunctionalInterface\n+public interface SyncopeCoreInfoContributor {\n+    void addLoadInstant(PayloadApplicationEvent<SystemInfo.LoadInstant> event);\n }"},{"sha":"adac19e68f6ad78879d2ce2197f54c77b06a1f5e","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -111,3 +111,9 @@ security.digester.useLenientSaltSizeCheck=true\n #########\n \n logic.enableJDBCAuditAppender=true\n+\n+#########\n+# Disable CGLib Proxies #\n+#########\n+spring.aop.auto=true\n+spring.aop.proxy-target-class=false"},{"sha":"f51a0f2578a1be80e223443e6ba1286a8b9313c8","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/WorkflowContext.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,17 +29,15 @@\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class WorkflowContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserWorkflowAdapter uwfAdapter(\n             final UserDataBinder userDataBinder,\n             final UserDAO userDAO,\n@@ -51,7 +49,6 @@ public UserWorkflowAdapter uwfAdapter(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GroupWorkflowAdapter gwfAdapter(\n             final GroupDataBinder groupDataBinder,\n             final GroupDAO groupDAO,\n@@ -62,7 +59,6 @@ public GroupWorkflowAdapter gwfAdapter(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AnyObjectWorkflowAdapter awfAdapter(\n             final AnyObjectDataBinder anyObjectDataBinder,\n             final AnyObjectDAO anyObjectDAO,"},{"sha":"8c46d0b08ccee63c332bf76c299e6e433027aae6","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelLogicContext.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -22,33 +22,26 @@\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n import org.apache.syncope.core.provisioning.camel.SyncopeCamelContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.Resource;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CamelLogicContext {\n \n-    @javax.annotation.Resource(name = \"userRoutes\")\n-    private Resource userRoutes;\n-\n-    @javax.annotation.Resource(name = \"groupRoutes\")\n-    private Resource groupRoutes;\n-\n-    @javax.annotation.Resource(name = \"anyObjectRoutes\")\n-    private Resource anyObjectRoutes;\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    public CamelRouteLoader camelRouteLoader() {\n+    public CamelRouteLoader camelRouteLoader(\n+        @Qualifier(\"anyObjectRoutes\") final Resource anyObjectRoutes,\n+        @Qualifier(\"groupRoutes\") final Resource groupRoutes,\n+        @Qualifier(\"userRoutes\") final Resource userRoutes) {\n         return new CamelRouteLoader(userRoutes, groupRoutes, anyObjectRoutes);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public CamelRouteLogic camelRouteLogic(\n             final CamelRouteDAO routeDAO,\n             final CamelRouteDataBinder binder,"},{"sha":"900f759fdad83c5d5c7d5937fe66afd59c0f24cf","filename":"ext/camel/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/CamelPersistenceContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FCamelPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -26,7 +26,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CamelPersistenceContext {\n \n     @ConditionalOnMissingBean"},{"sha":"35b3233ad89251ce6348af25042bdcc13da29b87","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelProvisioningContext.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelProvisioningContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,14 +24,13 @@\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n import org.apache.syncope.core.provisioning.camel.data.CamelRouteDataBinderImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CamelProvisioningContext {\n \n     @Bean\n@@ -51,13 +50,11 @@ public Resource anyObjectRoutes() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SyncopeCamelContext syncopeCamelContext(final CamelRouteDAO routeDAO) {\n         return new SyncopeCamelContext(routeDAO);\n     }\n \n     @Bean\n-    @Autowired\n     public UserProvisioningManager userProvisioningManager(\n             final CamelRouteDAO routeDAO,\n             final SyncopeCamelContext contextFactory) {\n@@ -66,7 +63,6 @@ public UserProvisioningManager userProvisioningManager(\n     }\n \n     @Bean\n-    @Autowired\n     public GroupProvisioningManager groupProvisioningManager(\n             final CamelRouteDAO routeDAO,\n             final SyncopeCamelContext contextFactory) {\n@@ -75,7 +71,6 @@ public GroupProvisioningManager groupProvisioningManager(\n     }\n \n     @Bean\n-    @Autowired\n     public AnyObjectProvisioningManager anyObjectProvisioningManager(\n             final CamelRouteDAO routeDAO,\n             final SyncopeCamelContext contextFactory) {\n@@ -85,7 +80,6 @@ public AnyObjectProvisioningManager anyObjectProvisioningManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public CamelRouteDataBinder camelRouteDataBinder(final CamelRouteDAO routeDAO) {\n         return new CamelRouteDataBinderImpl(routeDAO);\n     }"},{"sha":"ce00b0f9fd2e8532f6ff7eae87e8aa5ad8d85bde","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel.component;\n \n import java.util.Map;\n-import javax.annotation.Resource;\n import org.apache.camel.Endpoint;\n import org.apache.camel.support.DefaultComponent;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -28,6 +27,7 @@\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -54,8 +54,8 @@ public class PropagateComponent extends DefaultComponent {\n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n \n-    @Resource(name = \"adminUser\")\n-    protected String adminUser;\n+    @Autowired\n+    protected SecurityProperties props;\n \n     @Override\n     protected Endpoint createEndpoint(\n@@ -82,7 +82,7 @@ protected Endpoint createEndpoint(\n             executor = (String) parameters.get(\"eraser\");\n         }\n         if (executor == null) {\n-            executor = adminUser;\n+            executor = props.getAdminUser();\n         }\n         endpoint.setExecutor(executor);\n "},{"sha":"1437d0dbe54ffe57639b538364177d5d57cef75b","filename":"ext/camel/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CamelRESTCXFContext.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCamelRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -21,17 +21,15 @@\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.core.logic.CamelRouteLogic;\n import org.apache.syncope.core.rest.cxf.service.CamelRouteServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CamelRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public CamelRouteService camelRouteService(final CamelRouteLogic camelRouteLogic) {\n         return new CamelRouteServiceImpl(camelRouteLogic);\n     }"},{"sha":"babd0d784e8f91a0cc8b6b2e76796d77a1343197","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,13 +24,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class ElasticsearchClientContext {\n \n     @ConditionalOnMissingBean\n@@ -42,7 +41,6 @@ public ElasticsearchClientFactoryBean elasticsearchClientFactoryBean() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ElasticsearchUtils elasticsearchUtils(\n             final @Lazy UserDAO userDAO,\n             final @Lazy GroupDAO groupDAO,\n@@ -58,7 +56,6 @@ public ElasticsearchUtils elasticsearchUtils(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public ElasticsearchIndexManager elasticsearchIndexManager(\n             final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {"},{"sha":"d2232d34243c39acbf2f65720897f12888208c47","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/ElasticsearchPersistenceContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -31,25 +31,22 @@\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n import co.elastic.clients.elasticsearch.ElasticsearchClient;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class ElasticsearchPersistenceContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public DomainIndexLoader domainIndexLoader(final ElasticsearchIndexManager indexManager) {\n         return new DomainIndexLoader(indexManager);\n     }\n \n     @ConditionalOnMissingBean(name = \"elasticsearchAnySearchDAO\")\n     @Bean\n-    @Autowired\n     public AnySearchDAO anySearchDAO(\n             final RealmDAO realmDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,"},{"sha":"e23ac764b694e9c1cfd934cbf896f8f02eed0cf7","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/FlowableWorkflowContext.java","status":"modified","additions":19,"deletions":34,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -52,7 +52,6 @@\n import org.flowable.idm.spring.SpringIdmEngineConfiguration;\n import org.flowable.idm.spring.configurator.SpringIdmEngineConfigurator;\n import org.flowable.spring.SpringProcessEngineConfiguration;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -63,34 +62,23 @@\n import org.springframework.core.io.ResourceLoader;\n \n @EnableConfigurationProperties(WorkflowFlowableProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class FlowableWorkflowContext {\n \n-    @Autowired\n-    private WorkflowFlowableProperties props;\n-\n-    @Autowired\n-    private ResourceLoader resourceLoader;\n-\n-    @Autowired\n-    private ConfigurableApplicationContext ctx;\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    public SpringIdmEngineConfiguration syncopeIdmEngineConfiguration() {\n+    public SpringIdmEngineConfiguration syncopeIdmEngineConfiguration(final ConfigurableApplicationContext ctx) {\n         SpringIdmEngineConfiguration conf = new SpringIdmEngineConfiguration();\n         conf.setIdmIdentityService(new SyncopeIdmIdentityService(conf, ctx));\n         return conf;\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SpringIdmEngineConfigurator syncopeIdmEngineConfigurator() {\n+    public SpringIdmEngineConfigurator syncopeIdmEngineConfigurator(\n+        final SpringIdmEngineConfiguration syncopeIdmEngineConfiguration) {\n         SpringIdmEngineConfigurator configurator = new SpringIdmEngineConfigurator();\n-        configurator.setIdmEngineConfiguration(syncopeIdmEngineConfiguration());\n+        configurator.setIdmEngineConfiguration(syncopeIdmEngineConfiguration);\n         return configurator;\n     }\n \n@@ -102,15 +90,14 @@ public SyncopeFormHandlerHelper syncopeFormHandlerHelper() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public FlowableBpmnProcessManager bpmnProcessManager(final DomainProcessEngine engine) {\n         return new FlowableBpmnProcessManager(engine);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public FlowableUserRequestHandler userRequestHandler(\n+            final SecurityProperties securityProperties,\n             final UserDataBinder userDataBinder,\n             final DomainProcessEngine engine,\n             final UserDAO userDAO,\n@@ -126,7 +113,6 @@ public FlowableUserRequestHandler userRequestHandler(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public FlowableWorkflowUtils flowableUtils(final DomainProcessEngine engine) {\n         return new FlowableWorkflowUtils(engine);\n     }\n@@ -146,34 +132,39 @@ public IdGenerator idGenerator() {\n     @ConditionalOnMissingBean\n     @Bean\n     @Scope(\"prototype\")\n-    public SpringProcessEngineConfiguration processEngineConfiguration() {\n+    public SpringProcessEngineConfiguration processEngineConfiguration(\n+        final WorkflowFlowableProperties props,\n+        final SpringIdmEngineConfigurator syncopeIdmEngineConfigurator,\n+        final IdGenerator idGenerator,\n+        final SyncopeEntitiesVariableType syncopeEntitiesVariableType,\n+        final SyncopeFormHandlerHelper syncopeFormHandlerHelper) {\n         SpringProcessEngineConfiguration conf = new SpringProcessEngineConfiguration();\n         conf.setDatabaseSchemaUpdate(AbstractEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);\n         conf.setJpaHandleTransaction(true);\n         conf.setJpaCloseEntityManager(false);\n         conf.setHistoryLevel(props.getHistoryLevel());\n-        conf.setIdmEngineConfigurator(syncopeIdmEngineConfigurator());\n-        conf.setCustomPreVariableTypes(List.of(syncopeEntitiesVariableType()));\n-        conf.setFormHandlerHelper(syncopeFormHandlerHelper());\n-        conf.setIdGenerator(idGenerator());\n+        conf.setIdmEngineConfigurator(syncopeIdmEngineConfigurator);\n+        conf.setCustomPreVariableTypes(List.of(syncopeEntitiesVariableType));\n+        conf.setFormHandlerHelper(syncopeFormHandlerHelper);\n+        conf.setIdGenerator(idGenerator);\n         conf.setPreBpmnParseHandlers(List.of(new ShellServiceTaskDisablingBpmnParseHandler()));\n         return conf;\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DomainProcessEngineFactoryBean domainProcessEngineFactoryBean() {\n+    public DomainProcessEngineFactoryBean domainProcessEngineFactoryBean(final ConfigurableApplicationContext ctx) {\n         return new DomainProcessEngineFactoryBean(ctx);\n     }\n \n     @Bean\n-    public Resource userWorkflowDef() {\n+    public Resource userWorkflowDef(final WorkflowFlowableProperties props,\n+                                    final ResourceLoader resourceLoader) {\n         return resourceLoader.getResource(props.getUserWorkflowDef());\n     }\n \n     @ConditionalOnMissingBean(name = \"flowableUWFAdapter\")\n     @Bean\n-    @Autowired\n     public UserWorkflowAdapter uwfAdapter(\n             final UserDataBinder userDataBinder,\n             final UserDAO userDAO,\n@@ -191,14 +182,12 @@ public UserWorkflowAdapter uwfAdapter(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public AutoActivate autoActivate(final UserDataBinder userDataBinder, final UserDAO userDAO) {\n         return new AutoActivate(userDataBinder, userDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public Create create(final UserDataBinder userDataBinder, final EntityFactory entityFactory) {\n         return new Create(userDataBinder, entityFactory);\n     }\n@@ -211,21 +200,18 @@ public Delete delete() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GenerateToken generateToken(final ConfParamOps confParamOps) {\n         return new GenerateToken(confParamOps);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public Notify notify(final NotificationManager notificationManager) {\n         return new Notify(notificationManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public PasswordReset passwordReset(final UserDataBinder userDataBinder, final UserDAO userDAO) {\n         return new PasswordReset(userDataBinder, userDAO);\n     }\n@@ -244,7 +230,6 @@ public Suspend suspend() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public Update update(final UserDataBinder userDataBinder, final UserDAO userDAO) {\n         return new Update(userDataBinder, userDAO);\n     }"},{"sha":"884e0d3f84e6ac65926d4d7576d1fd345d952e0b","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/FlowableLogicContext.java","status":"modified","additions":17,"deletions":27,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFlowableLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFlowableLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFlowableLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -27,50 +27,37 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.Resource;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class FlowableLogicContext {\n \n-    @javax.annotation.Resource(name = \"userWorkflowDef\")\n-    private Resource userWorkflowDef;\n-\n-    @Autowired\n-    private BpmnProcessManager bpmnProcessManager;\n-\n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n-\n-    @Autowired\n-    private UserDataBinder binder;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public FlowableLoader flowableLoader(final DomainProcessEngine engine) {\n+    public FlowableLoader flowableLoader(final DomainProcessEngine engine,\n+                                         @Qualifier(\"userWorkflowDef\")\n+                                         final Resource userWorkflowDef) {\n         return new FlowableLoader(userWorkflowDef, engine);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public BpmnProcessLogic bpmnProcessLogic() {\n+    public BpmnProcessLogic bpmnProcessLogic(final BpmnProcessManager bpmnProcessManager) {\n         return new BpmnProcessLogic(bpmnProcessManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public UserRequestLogic userRequestLogic(final UserRequestHandler userRequestHandler) {\n+    public UserRequestLogic userRequestLogic(final UserRequestHandler userRequestHandler,\n+                                             final UserDataBinder binder,\n+                                             final BpmnProcessManager bpmnProcessManager,\n+                                             final PropagationTaskExecutor taskExecutor,\n+                                             final UserDAO userDAO,\n+                                             final PropagationManager propagationManager) {\n         return new UserRequestLogic(\n                 bpmnProcessManager,\n                 userRequestHandler,\n@@ -82,8 +69,11 @@ public UserRequestLogic userRequestLogic(final UserRequestHandler userRequestHan\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public UserWorkflowTaskLogic userWorkflowTaskLogic(final WorkflowTaskManager wfTaskManager) {\n+    public UserWorkflowTaskLogic userWorkflowTaskLogic(final WorkflowTaskManager wfTaskManager,\n+                                                       final UserDataBinder binder,\n+                                                       final UserDAO userDAO,\n+                                                       final PropagationTaskExecutor taskExecutor,\n+                                                       final PropagationManager propagationManager) {\n         return new UserWorkflowTaskLogic(wfTaskManager, propagationManager, taskExecutor, binder, userDAO);\n     }\n }"},{"sha":"e2f3f7975f8c488f12fbc13a74122628ae6cb370","filename":"ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/FlowableRESTCXFContext.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FFlowableRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FFlowableRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FFlowableRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -28,31 +28,27 @@\n import org.apache.syncope.core.rest.cxf.service.BpmnProcessServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserRequestServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserWorkflowTaskServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class FlowableRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public BpmnProcessService bpmnProcessService(final BpmnProcessLogic bpmnProcessLogic) {\n         return new BpmnProcessServiceImpl(bpmnProcessLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserRequestService userRequestService(final UserRequestLogic userRequestLogic, final UserDAO userDAO) {\n         return new UserRequestServiceImpl(userRequestLogic, userDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserWorkflowTaskService userWorkflowTaskService(final UserWorkflowTaskLogic userWorkflowTaskLogic) {\n         return new UserWorkflowTaskServiceImpl(userWorkflowTaskLogic);\n     }"},{"sha":"5dd20346802ce976276db48e3ee5710010c5fa9a","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogicContext.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -31,17 +31,13 @@\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class OIDCC4UILogicContext {\n \n-    @Autowired\n-    private OIDCC4UIProviderDAO opDAO;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public OIDCClientCache oidcClientCache() {\n@@ -56,7 +52,6 @@ public OIDCC4UILoader oidcc4UILoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCUserManager oidcUserManager(\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n@@ -76,20 +71,21 @@ public OIDCUserManager oidcUserManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCC4UILogic oidcc4UILogic(\n+            final OIDCC4UIProviderDAO opDAO,\n             final OIDCClientCache oidcClientCache,\n             final AuthDataAccessor authDataAccessor,\n             final AccessTokenDataBinder accessTokenDataBinder,\n             final OIDCUserManager userManager) {\n \n-        return new OIDCC4UILogic(oidcClientCache, authDataAccessor, accessTokenDataBinder, opDAO, userManager);\n+        return new OIDCC4UILogic(oidcClientCache, authDataAccessor,\n+            accessTokenDataBinder, opDAO, userManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCC4UIProviderLogic oidcc4UIProviderLogic(\n+            final OIDCC4UIProviderDAO opDAO,\n             final OIDCClientCache oidcClientCache,\n             final OIDCC4UIProviderDataBinder binder) {\n "},{"sha":"694973212702ba0be3ab47c461ff7b22443b0a08","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UIProviderLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UIProviderLogic.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -141,7 +141,7 @@ protected OIDCC4UIProviderTO resolveReference(\n         if (key != null) {\n             try {\n                 return binder.getOIDCProviderTO(opDAO.find(key));\n-            } catch (Throwable ignore) {\n+            } catch (final Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);\n             }"},{"sha":"0fd0b0a3818204ea2256bd209a2e50d6c7819951","filename":"ext/oidcc4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/OIDCC4UIPersistenceContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOIDCC4UIPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOIDCC4UIPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOIDCC4UIPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -26,7 +26,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class OIDCC4UIPersistenceContext {\n \n     @ConditionalOnMissingBean"},{"sha":"844584a090cb9b4eb51e3c764b27112729076891","filename":"ext/oidcc4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCC4UIProvisioningContext.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCC4UIProvisioningContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,17 +24,15 @@\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIEntityFactory;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.data.OIDCC4UIProviderDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class OIDCC4UIProvisioningContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCC4UIProviderDataBinder oidcc4UIProviderDataBinder(\n             final AnyTypeDAO anyTypeDAO,\n             final OIDCC4UIProviderDAO oidcOPDAO,"},{"sha":"9c0f12ec986ee8cc73b1d5c480e5744de643b1a6","filename":"ext/oidcc4ui/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/OIDCC4UIRESTCXFContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FOIDCC4UIRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Foidcc4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FOIDCC4UIRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FOIDCC4UIRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,24 +24,21 @@\n import org.apache.syncope.core.logic.OIDCC4UIProviderLogic;\n import org.apache.syncope.core.rest.cxf.service.OIDCC4UIProviderServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.OIDCC4UIServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class OIDCC4UIRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCC4UIService oidcc4UIService(final OIDCC4UILogic oidcc4UILogic) {\n         return new OIDCC4UIServiceImpl(oidcc4UILogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public OIDCC4UIProviderService oidcc4UIProviderService(final OIDCC4UIProviderLogic oidcc4UIProviderLogic) {\n         return new OIDCC4UIProviderServiceImpl(oidcc4UIProviderLogic);\n     }"},{"sha":"5b1e86bd7a7cb4a8cdc7f95a955437ea6e7cd8b2","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogicContext.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -31,23 +31,16 @@\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.support.ResourcePatternResolver;\n \n @EnableConfigurationProperties(SAML2SP4UIProperties.class)\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SAML2SP4UILogicContext {\n \n-    @Autowired\n-    private SAML2SP4UIProperties props;\n-\n-    @Autowired\n-    private SAML2SP4UIIdPDAO idpDAO;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public SAML2ClientCache saml2ClientCache() {\n@@ -56,15 +49,15 @@ public SAML2ClientCache saml2ClientCache() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n-    public SAML2SP4UILoader saml2SP4UILoader(final ResourcePatternResolver resourceResolver) {\n+    public SAML2SP4UILoader saml2SP4UILoader(final ResourcePatternResolver resourceResolver,\n+                                             final SAML2SP4UIProperties props) {\n         return new SAML2SP4UILoader(props, resourceResolver);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UIIdPLogic saml2SP4UIIdPLogic(\n+            final SAML2SP4UIIdPDAO idpDAO,\n             final SAML2ClientCache saml2ClientCache,\n             final SAML2SP4UILoader loader,\n             final SAML2SP4UIIdPDataBinder binder) {\n@@ -74,8 +67,8 @@ public SAML2SP4UIIdPLogic saml2SP4UIIdPLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UIUserManager saml2SP4UIUserManager(\n+            final SAML2SP4UIIdPDAO idpDAO,\n             final InboundMatcher inboundMatcher,\n             final UserDAO userDAO,\n             final IntAttrNameParser intAttrNameParser,\n@@ -95,8 +88,8 @@ public SAML2SP4UIUserManager saml2SP4UIUserManager(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UILogic saml2SP4UILogic(\n+            final SAML2SP4UIIdPDAO idpDAO,\n             final SAML2ClientCache saml2ClientCache,\n             final SAML2SP4UILoader loader,\n             final AccessTokenDataBinder accessTokenDataBinder,"},{"sha":"9c4816d7f2ce58f740965af8efec5440878efeaf","filename":"ext/saml2sp4ui/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/SAML2SP4UIPersistenceContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FSAML2SP4UIPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FSAML2SP4UIPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FSAML2SP4UIPersistenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -26,7 +26,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SAML2SP4UIPersistenceContext {\n \n     @ConditionalOnMissingBean"},{"sha":"47296eb0db400829a1aa775c572c88f10ab6e1ad","filename":"ext/saml2sp4ui/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/SAML2SP4UIProvisioningContext.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FSAML2SP4UIProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FSAML2SP4UIProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FSAML2SP4UIProvisioningContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -25,17 +25,15 @@\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.data.SAML2SP4UIIdPDataBinder;\n import org.apache.syncope.core.provisioning.java.data.SAML2SP4UIIdPDataBinderImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SAML2SP4UIProvisioningContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UIIdPDataBinder saml2SP4UIIdPDataBinder(\n             final AnyTypeDAO anyTypeDAO,\n             final SAML2SP4UIIdPDAO idapDAO,"},{"sha":"a608dfe0edf42fbdf7526fbd7bacdc917decab73","filename":"ext/saml2sp4ui/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SAML2SP4UIRESTCXFContext.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSAML2SP4UIRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSAML2SP4UIRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSAML2SP4UIRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -24,24 +24,21 @@\n import org.apache.syncope.core.logic.SAML2SP4UILogic;\n import org.apache.syncope.core.rest.cxf.service.SAML2SP4UIIdPServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.SAML2SP4UIServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SAML2SP4UIRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UIService saml2SP4UIService(final SAML2SP4UILogic saml2SP4UIService) {\n         return new SAML2SP4UIServiceImpl(saml2SP4UIService);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SAML2SP4UIIdPService saml2SP4UIIdPService(final SAML2SP4UIIdPLogic saml2SP4UIIdPLogic) {\n         return new SAML2SP4UIIdPServiceImpl(saml2SP4UIIdPLogic);\n     }"},{"sha":"559146e2731dbe1f142961ace8f78746ce783987","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMLogicContext.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMLogicContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -22,12 +22,11 @@\n import org.apache.syncope.core.logic.init.SCIMLoader;\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SCIMLogicContext {\n \n     @ConditionalOnMissingBean\n@@ -38,14 +37,12 @@ public SCIMLoader scimLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SCIMConfManager scimConfManager(final ConfParamOps confParamOps, final SchemaLogic schemaLogic) {\n         return new SCIMConfManager(confParamOps, schemaLogic);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SCIMDataBinder scimDataBinder(\n             final SCIMConfManager confManager,\n             final UserLogic userLogic,\n@@ -56,7 +53,6 @@ public SCIMDataBinder scimDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SCIMLogic scimLogic(final SCIMConfManager confManager) {\n         return new SCIMLogic(confManager);\n     }"},{"sha":"e94a747d67fbce52dc83b791ee678f9b9725a9dc","filename":"ext/scimv2/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SCIMRESTCXFContext.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSCIMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSCIMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSCIMRESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -21,17 +21,15 @@\n import org.apache.syncope.common.rest.api.service.SCIMConfService;\n import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.rest.cxf.service.SCIMConfServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SCIMRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SCIMConfService scimConfService(final SCIMConfManager scimConfManager) {\n         return new SCIMConfServiceImpl(scimConfManager);\n     }"},{"sha":"abc84e0c3975a8a9300a6bbec16619bf791fb61e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMv2RESTCXFContext.java","status":"modified","additions":8,"deletions":15,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMv2RESTCXFContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -40,21 +40,14 @@\n import org.apache.syncope.ext.scimv2.cxf.service.GroupServiceImpl;\n import org.apache.syncope.ext.scimv2.cxf.service.SCIMServiceImpl;\n import org.apache.syncope.ext.scimv2.cxf.service.UserServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SCIMv2RESTCXFContext {\n \n-    @Autowired\n-    private Bus bus;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public SCIMJacksonJsonProvider scimJacksonJsonProvider() {\n@@ -75,7 +68,10 @@ public AddETagFilter scimAddETagFilter() {\n \n     @ConditionalOnMissingBean(name = \"scimv2Container\")\n     @Bean\n-    public Server scimv2Container() {\n+    public Server scimv2Container(final ApplicationContext ctx, final Bus bus,\n+                                  final SCIMJacksonJsonProvider scimJacksonJsonProvider,\n+                                  final SCIMExceptionMapper scimExceptionMapper,\n+                                  final AddETagFilter scimAddETagFilter) {\n         SpringJAXRSServerFactoryBean scimv2Container = new SpringJAXRSServerFactoryBean();\n         scimv2Container.setBus(bus);\n         scimv2Container.setAddress(\"/scim\");\n@@ -93,17 +89,16 @@ public Server scimv2Container() {\n                 ctx.getBean(GZIPOutInterceptor.class)));\n \n         scimv2Container.setProviders(List.of(\n-                scimJacksonJsonProvider(),\n-                scimExceptionMapper(),\n-                scimAddETagFilter()));\n+                scimJacksonJsonProvider,\n+                scimExceptionMapper,\n+                scimAddETagFilter));\n \n         scimv2Container.setApplicationContext(ctx);\n         return scimv2Container.create();\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SCIMService scimService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n@@ -118,7 +113,6 @@ public SCIMService scimService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public GroupService scimv2GroupService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n@@ -132,7 +126,6 @@ public GroupService scimv2GroupService(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public UserService scimv2UserService(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,"},{"sha":"ec1ea7249bc5226d5054283a47f14cb6d0b7d570","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/SyncopeBuildToolsApplication.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FSyncopeBuildToolsApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.fit.buildtools.cxf.GreenMailService;\n import org.apache.syncope.fit.buildtools.cxf.ProvisioningImpl;\n import org.apache.syncope.fit.buildtools.cxf.UserService;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.SpringApplication;\n@@ -50,7 +49,7 @@\n @SpringBootApplication(exclude = {\n     ErrorMvcAutoConfiguration.class,\n     WebMvcAutoConfiguration.class,\n-    HttpMessageConvertersAutoConfiguration.class })\n+    HttpMessageConvertersAutoConfiguration.class }, proxyBeanMethods = false)\n public class SyncopeBuildToolsApplication extends SpringBootServletInitializer {\n \n     public static void main(final String[] args) {\n@@ -69,12 +68,6 @@ public static void main(final String[] args) {\n     @Value(\"${testdb.password}\")\n     private String testDbPassword;\n \n-    @Autowired\n-    private Bus bus;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @Bean\n     public DriverManagerDataSource testDataSource() {\n         DriverManagerDataSource testDataSource = new DriverManagerDataSource(testDbUrl, testDbUsername, testDbPassword);\n@@ -83,14 +76,13 @@ public DriverManagerDataSource testDataSource() {\n     }\n \n     @Bean\n-    @Autowired\n     public Provisioning provisioningImpl(@Qualifier(\"testDataSource\") final DataSource dataSource) {\n         return new ProvisioningImpl(dataSource);\n     }\n \n     @Bean\n-    @Autowired\n-    public Endpoint soapProvisioning(final Provisioning provisioning) {\n+    public Endpoint soapProvisioning(final Provisioning provisioning,\n+                                     final Bus bus) {\n         EndpointImpl soapProvisioning = new EndpointImpl(provisioning);\n         soapProvisioning.setBus(bus);\n         soapProvisioning.publish(\"/soap\");\n@@ -108,8 +100,8 @@ public UserService userService() {\n     }\n \n     @Bean\n-    @Autowired\n-    public Server restProvisioning(final GreenMailService greenMailService, final UserService userService) {\n+    public Server restProvisioning(final GreenMailService greenMailService, final UserService userService,\n+                                   final ApplicationContext ctx, final Bus bus) {\n         SpringJAXRSServerFactoryBean restProvisioning = new SpringJAXRSServerFactoryBean();\n         restProvisioning.setApplicationContext(ctx);\n         restProvisioning.setBus(bus);"},{"sha":"523385c6aec7d9a541b8ae571184824ae72eb07c","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -28,17 +28,15 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.flowable.engine.delegate.DelegateExecution;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AssignDirectorGroup extends FlowableServiceTask {\n+    private final UserDataBinder dataBinder;\n+    private final UserDAO userDAO;\n \n-    @Autowired\n-    private UserDataBinder dataBinder;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n+    public AssignDirectorGroup(final UserDataBinder dataBinder, final UserDAO userDAO) {\n+        this.dataBinder = dataBinder;\n+        this.userDAO = userDAO;\n+    }\n \n     @Override\n     protected void doExecute(final DelegateExecution execution) {"},{"sha":"e781bf43e19983a5bd8eced9ddaf46094b93e355","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,17 +29,17 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.flowable.engine.delegate.DelegateExecution;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class CreateARelationship extends FlowableServiceTask {\n \n-    @Autowired\n-    private UserDataBinder dataBinder;\n+    private final UserDataBinder dataBinder;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    private final UserDAO userDAO;\n+\n+    public CreateARelationship(final UserDataBinder dataBinder, final UserDAO userDAO) {\n+        this.dataBinder = dataBinder;\n+        this.userDAO = userDAO;\n+    }\n \n     @Override\n     protected void doExecute(final DelegateExecution execution) {"},{"sha":"6adbde0befe7420626e737e3df64480524f18c5f","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/FlowableConfiguration.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FFlowableConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FFlowableConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FFlowableConfiguration.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core.reference.flowable;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration(proxyBeanMethods = false)\n+public class FlowableConfiguration {\n+    @Bean\n+    public AssignDirectorGroup assignDirectorGroup(final UserDataBinder dataBinder,\n+                                                   final UserDAO userDAO) {\n+        return new AssignDirectorGroup(dataBinder, userDAO);\n+    }\n+\n+    @Bean\n+    public CreateARelationship createARelationship(final UserDataBinder dataBinder,\n+                                                   final UserDAO userDAO) {\n+        return new CreateARelationship(dataBinder, userDAO);\n+    }\n+\n+    @Bean\n+    public PrintersValueProvider printersValueProvider(final AnySearchDAO anySearchDAO) {\n+        return new PrintersValueProvider(anySearchDAO);\n+    }\n+}"},{"sha":"00672dcb96c4e553cb064459a8b8b1091be2278a","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/PrintersValueProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FPrintersValueProvider.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -29,11 +29,8 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class PrintersValueProvider implements DropdownValueProvider {\n \n     private static final SearchCond PRINTER_COND;\n@@ -51,8 +48,11 @@ public class PrintersValueProvider implements DropdownValueProvider {\n         ORDER_BY = List.of(orderByNameAsc);\n     }\n \n-    @Autowired\n-    private AnySearchDAO anySearchDAO;\n+    private final AnySearchDAO anySearchDAO;\n+\n+    public PrintersValueProvider(final AnySearchDAO anySearchDAO) {\n+        this.anySearchDAO = anySearchDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"81534b7ac67cc28ae8ce03c490c2a7adf4bf23d8","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CoreReferenceContext.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -26,19 +26,17 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n \n @AutoConfigureBefore(IdRepoLogicContext.class)\n @ComponentScan(\"org.apache.syncope.fit.core.reference\")\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CoreReferenceContext {\n \n     @Bean\n-    @Autowired\n     public ElasticsearchInit elasticsearchInit(\n             final ImplementationDAO implementationDAO,\n             final EntityFactory entityFactory,\n@@ -48,13 +46,11 @@ public ElasticsearchInit elasticsearchInit(\n     }\n \n     @Bean\n-    @Autowired\n     public EnableFlowableForTestUsers enableFlowableForTestUsers(final UserDAO userDAO) {\n         return new EnableFlowableForTestUsers(userDAO);\n     }\n \n     @Bean\n-    @Autowired\n     public ImplementationLookup implementationLookup(\n             final UserWorkflowAdapter uwf,\n             final AnySearchDAO anySearchDAO,"},{"sha":"a22404086840db5dd085b4bca4b2f86949d2c289","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -20,7 +20,6 @@ under the License.\n <configuration status=\"WARN\">\n \n   <appenders>\n-\n     <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/core.log\"\n                              filePattern=\"${log.directory}/core-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">"},{"sha":"985da5cf43c12d74d20fcfe896e5786ff5cb73e8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -60,7 +60,7 @@\n public abstract class AbstractConsoleITCase extends AbstractUIITCase {\n \n     @ImportAutoConfiguration(classes = { SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n-    @Configuration\n+    @Configuration(proxyBeanMethods = false)\n     public static class SyncopeConsoleWebApplicationTestConfig {\n \n         @Bean"},{"sha":"b0fad1739bdf5a702136c8bfd009bb267849127f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CoreITContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCoreITContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCoreITContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCoreITContext.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -26,7 +26,7 @@\n import org.springframework.jdbc.datasource.DriverManagerDataSource;\n \n @PropertySource(\"classpath:test.properties\")\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class CoreITContext {\n \n     @Value(\"${testdb.driver}\")"},{"sha":"f8788ed45ecb139d292ff6345baf63c3d09fa0d7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AbstractEnduserITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAbstractEnduserITCase.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -64,7 +64,7 @@\n public abstract class AbstractEnduserITCase extends AbstractUIITCase {\n \n     @ImportAutoConfiguration(classes = { SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n-    @Configuration\n+    @Configuration(proxyBeanMethods = false)\n     public static class SyncopeEnduserWebApplicationTestConfig {\n \n         @Bean"},{"sha":"c126ea340a59464010e21f7c011d1490764c67a3","filename":"fit/wa-reference/src/main/resources/log4j2.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -63,7 +63,7 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n-    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n "},{"sha":"d27ffdfc4a9034cc3756730ae647fc5f50fb7de2","filename":"fit/wa-reference/src/test/resources/log4j2.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -45,7 +45,11 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n-    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+    <asyncLogger name=\"org.springframework.security\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n "},{"sha":"14aeb37bc173a552edfe111201f2668209785cf8","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":71,"deletions":45,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -40,7 +40,8 @@\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -56,11 +57,13 @@\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n+import org.springframework.security.core.userdetails.ReactiveUserDetailsService;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.ClientRegistrations;\n import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n@@ -76,15 +79,9 @@\n import reactor.core.publisher.Mono;\n \n @EnableWebFluxSecurity\n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n public class SecurityConfig {\n \n-    @Autowired\n-    private ResourcePatternResolver resourceResolver;\n-\n-    @Autowired\n-    private SRAProperties props;\n-\n     @Bean\n     @Order(0)\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"SAML2\")\n@@ -109,7 +106,7 @@ public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecuri\n     }\n \n     @Bean\n-    public MapReactiveUserDetailsService userDetailsService() {\n+    public ReactiveUserDetailsService userDetailsService(final SRAProperties props) {\n         UserDetails user = User.builder().\n                 username(props.getAnonymousUser()).\n                 password(\"{noop}\" + props.getAnonymousKey()).\n@@ -120,20 +117,26 @@ public MapReactiveUserDetailsService userDetailsService() {\n \n     @Bean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OIDC\")\n-    public InMemoryReactiveClientRegistrationRepository oidcClientRegistrationRepository() {\n-        return new InMemoryReactiveClientRegistrationRepository(\n-                ClientRegistrations.fromOidcIssuerLocation(props.getOidc().getConfiguration()).\n-                        registrationId(SRAProperties.AMType.OIDC.name()).\n-                        clientId(props.getOidc().getClientId()).\n-                        clientSecret(props.getOidc().getClientSecret()).\n-                        scope(props.getOidc().getScopes().toArray(new String[0])).\n-                        build());\n+    public ClientRegistration oidcClientRegistration(final SRAProperties props) {\n+        return ClientRegistrations.fromOidcIssuerLocation(props.getOidc().getConfiguration()).\n+            registrationId(SRAProperties.AMType.OIDC.name()).\n+            clientId(props.getOidc().getClientId()).\n+            clientSecret(props.getOidc().getClientSecret()).\n+            scope(props.getOidc().getScopes().toArray(new String[0])).\n+            build();\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OIDC\")\n+    public ReactiveClientRegistrationRepository oidcClientRegistrationRepository(\n+        @Qualifier(\"oidcClientRegistration\") final ClientRegistration oidcClientRegistration) {\n+        return new InMemoryReactiveClientRegistrationRepository(oidcClientRegistration);\n     }\n \n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OIDC\")\n-    public OAuth2TokenValidator<Jwt> oidcJWTValidator() {\n+    public OAuth2TokenValidator<Jwt> oidcJWTValidator(final SRAProperties props) {\n         return JwtValidators.createDefaultWithIssuer(props.getOidc().getConfiguration());\n     }\n \n@@ -146,39 +149,51 @@ public Converter<Map<String, Object>, Map<String, Object>> jwtClaimSetConverter(\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OIDC\")\n-    public ReactiveJwtDecoder oidcJWTDecoder() {\n-        String jwkSetUri = oidcClientRegistrationRepository().iterator().next().getProviderDetails().getJwkSetUri();\n+    public ReactiveJwtDecoder oidcJWTDecoder(\n+        @Qualifier(\"oidcClientRegistration\")\n+        final ClientRegistration oidcClientRegistration,\n+        @Qualifier(\"oidcJWTValidator\")\n+        final OAuth2TokenValidator<Jwt> oidcJWTValidator,\n+        @Qualifier(\"jwtClaimSetConverter\")\n+        final Converter<Map<String, Object>, Map<String, Object>> jwtClaimSetConverter) {\n+        String jwkSetUri = oidcClientRegistration.getProviderDetails().getJwkSetUri();\n         NimbusReactiveJwtDecoder jwtDecoder = NimbusReactiveJwtDecoder.withJwkSetUri(jwkSetUri)\n             .jwsAlgorithm(SignatureAlgorithm.RS256)\n             .jwsAlgorithm(SignatureAlgorithm.RS512)\n             .build();\n-        jwtDecoder.setJwtValidator(oidcJWTValidator());\n-        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter());\n+        jwtDecoder.setJwtValidator(oidcJWTValidator);\n+        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter);\n         return jwtDecoder;\n     }\n \n     @Bean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OAUTH2\")\n-    public InMemoryReactiveClientRegistrationRepository oauth2ClientRegistrationRepository() {\n-        return new InMemoryReactiveClientRegistrationRepository(\n-                ClientRegistration.withRegistrationId(SRAProperties.AMType.OAUTH2.name()).\n-                        redirectUri(\"{baseUrl}/{action}/oauth2/code/{registrationId}\").\n-                        tokenUri(props.getOauth2().getTokenUri()).\n-                        authorizationUri(props.getOauth2().getAuthorizationUri()).\n-                        userInfoUri(props.getOauth2().getUserInfoUri()).\n-                        userNameAttributeName(props.getOauth2().getUserNameAttributeName()).\n-                        clientId(props.getOauth2().getClientId()).\n-                        clientSecret(props.getOauth2().getClientSecret()).\n-                        scope(props.getOauth2().getScopes().toArray(new String[0])).\n-                        authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).\n-                        jwkSetUri(props.getOauth2().getJwkSetUri()).\n-                        build());\n+    public ClientRegistration oauth2ClientRegistration(final SRAProperties props) {\n+        return ClientRegistration.withRegistrationId(SRAProperties.AMType.OAUTH2.name()).\n+            redirectUri(\"{baseUrl}/{action}/oauth2/code/{registrationId}\").\n+            tokenUri(props.getOauth2().getTokenUri()).\n+            authorizationUri(props.getOauth2().getAuthorizationUri()).\n+            userInfoUri(props.getOauth2().getUserInfoUri()).\n+            userNameAttributeName(props.getOauth2().getUserNameAttributeName()).\n+            clientId(props.getOauth2().getClientId()).\n+            clientSecret(props.getOauth2().getClientSecret()).\n+            scope(props.getOauth2().getScopes().toArray(new String[0])).\n+            authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).\n+            jwkSetUri(props.getOauth2().getJwkSetUri()).\n+            build();\n+    }\n+    \n+    @Bean\n+    @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OAUTH2\")\n+    public ReactiveClientRegistrationRepository oauth2ClientRegistrationRepository(\n+        @Qualifier(\"oauth2ClientRegistration\") final ClientRegistration oauth2ClientRegistration) {\n+        return new InMemoryReactiveClientRegistrationRepository(oauth2ClientRegistration);\n     }\n \n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OAUTH2\")\n-    public OAuth2TokenValidator<Jwt> oauth2JWTValidator() {\n+    public OAuth2TokenValidator<Jwt> oauth2JWTValidator(final SRAProperties props) {\n         return props.getOauth2().getIssuer() == null\n                 ? JwtValidators.createDefault()\n                 : JwtValidators.createDefaultWithIssuer(props.getOauth2().getIssuer());\n@@ -187,8 +202,15 @@ public OAuth2TokenValidator<Jwt> oauth2JWTValidator() {\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"OAUTH2\")\n-    public ReactiveJwtDecoder oauth2JWTDecoder() {\n-        String jwkSetUri = oauth2ClientRegistrationRepository().iterator().next().getProviderDetails().getJwkSetUri();\n+    public ReactiveJwtDecoder oauth2JWTDecoder(\n+        @Qualifier(\"oauth2ClientRegistration\")\n+        final ClientRegistration oauth2ClientRegistration,\n+        @Qualifier(\"oauth2JWTValidator\")\n+        final OAuth2TokenValidator<Jwt> oauth2JWTValidator,\n+        @Qualifier(\"jwtClaimSetConverter\")\n+        final Converter<Map<String, Object>, Map<String, Object>> jwtClaimSetConverter) {\n+\n+        String jwkSetUri = oauth2ClientRegistration.getProviderDetails().getJwkSetUri();\n         NimbusReactiveJwtDecoder jwtDecoder;\n         if (StringUtils.isBlank(jwkSetUri)) {\n             jwtDecoder = new NimbusReactiveJwtDecoder(jwt -> {\n@@ -201,15 +223,16 @@ public ReactiveJwtDecoder oauth2JWTDecoder() {\n         } else {\n             jwtDecoder = NimbusReactiveJwtDecoder.withJwkSetUri(jwkSetUri).build();\n         }\n-        jwtDecoder.setJwtValidator(oauth2JWTValidator());\n-        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter());\n+        jwtDecoder.setJwtValidator(oauth2JWTValidator);\n+        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter);\n         return jwtDecoder;\n     }\n \n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE, havingValue = \"SAML2\")\n-    public SAML2Client saml2Client() {\n+    public SAML2Client saml2Client(final ResourcePatternResolver resourceResolver,\n+                              final SRAProperties props) {\n         SAML2Configuration cfg = new SAML2Configuration(\n                 resourceResolver.getResource(props.getSaml2().getKeystore()),\n                 props.getSaml2().getKeystoreStorePass(),\n@@ -265,6 +288,8 @@ public InputStream retrieve() throws Exception {\n     @Order(2)\n     @ConditionalOnProperty(prefix = SRAProperties.PREFIX, name = SRAProperties.AM_TYPE)\n     public SecurityWebFilterChain routesSecurityFilterChain(\n+            @Qualifier(\"saml2Client\") final ObjectProvider<SAML2Client> saml2Client,\n+            final SRAProperties props,\n             final ServerHttpSecurity http,\n             final CacheManager cacheManager,\n             final LogoutRouteMatcher logoutRouteMatcher,\n@@ -285,9 +310,10 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n                 break;\n \n             case SAML2:\n-                SAML2Client saml2Client = saml2Client();\n-                SAML2SecurityConfigUtils.forLogin(http, saml2Client, publicRouteMatcher);\n-                SAML2SecurityConfigUtils.forLogout(builder, saml2Client, cacheManager, logoutRouteMatcher, ctx);\n+                saml2Client.ifAvailable(client -> {\n+                    SAML2SecurityConfigUtils.forLogin(http, client, publicRouteMatcher);\n+                    SAML2SecurityConfigUtils.forLogout(builder, client, cacheManager, logoutRouteMatcher, ctx);\n+                });\n                 break;\n \n             case CAS:"},{"sha":"2f65be59b94c152e85f8981b694726a240cfc21f","filename":"sra/src/main/java/org/apache/syncope/sra/SessionConfig.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -31,7 +31,7 @@\n import org.springframework.session.ReactiveSessionRepository;\n import org.springframework.session.config.annotation.web.server.EnableSpringWebSession;\n \n-@Configuration\n+@Configuration(proxyBeanMethods = false)\n @EnableCaching\n @EnableSpringWebSession\n public class SessionConfig {"},{"sha":"0714783c57e3b70220517539204c25ca0015629f","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":34,"deletions":17,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -25,7 +25,10 @@\n import org.apache.syncope.sra.actuate.SRASessions;\n import org.apache.syncope.sra.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.sra.actuate.SyncopeSRAInfoContributor;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.sra.security.CsrfRouteMatcher;\n+import org.apache.syncope.sra.security.LogoutRouteMatcher;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n@@ -35,9 +38,10 @@\n import org.springframework.cloud.gateway.route.RouteLocator;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.web.server.WebExceptionHandler;\n import reactor.core.publisher.Flux;\n \n-@SpringBootApplication\n+@SpringBootApplication(proxyBeanMethods = false)\n @EnableConfigurationProperties(SRAProperties.class)\n public class SyncopeSRAApplication {\n \n@@ -47,21 +51,26 @@ public static void main(final String[] args) {\n                 build().run(args);\n     }\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n-\n-    @Autowired\n-    private SRAProperties props;\n-\n-    @Autowired\n-    private CacheManager cacheManager;\n+    @Bean\n+    public LogoutRouteMatcher logoutRouteMatcher() {\n+        return new LogoutRouteMatcher();\n+    }\n \n-    @Autowired\n-    private ConfigurableApplicationContext ctx;\n+    @Bean\n+    public PublicRouteMatcher publicRouteMatcher() {\n+        return new PublicRouteMatcher();\n+    }\n+    \n+    @Bean\n+    public CsrfRouteMatcher csrfRouteMatcher(final PublicRouteMatcher publicRouteMatcher) {\n+        return new CsrfRouteMatcher(publicRouteMatcher);\n+    }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RouteProvider routeProvider() {\n+    public RouteProvider routeProvider(final ConfigurableApplicationContext ctx,\n+                                       final ServiceOps serviceOps,\n+                                       final SRAProperties props) {\n         return new RouteProvider(\n                 serviceOps,\n                 ctx,\n@@ -72,19 +81,20 @@ public RouteProvider routeProvider() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RouteLocator routes() {\n-        return () -> Flux.fromIterable(routeProvider().fetch()).map(Route.AbstractBuilder::build);\n+    public RouteLocator routes(@Qualifier(\"routeProvider\") final RouteProvider routeProvider) {\n+        return () -> Flux.fromIterable(routeProvider.fetch()).map(Route.AbstractBuilder::build);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SRASessions sraSessionsActuatorEndpoint() {\n+    public SRASessions sraSessionsActuatorEndpoint(final CacheManager cacheManager) {\n         return new SRASessions(cacheManager);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator() {\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final ServiceOps serviceOps,\n+                                                                 final SRAProperties props) {\n         return new SyncopeCoreHealthIndicator(\n                 serviceOps,\n                 props.getAnonymousUser(),\n@@ -107,4 +117,11 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.SRA);\n     }\n+\n+    @Bean\n+    public WebExceptionHandler syncopeSRAWebExceptionHandler(\n+        @Qualifier(\"routeProvider\") final RouteProvider routeProvider,\n+        final SRAProperties props) {\n+        return new SyncopeSRAWebExceptionHandler(routeProvider, props);\n+    }\n }"},{"sha":"3ddd232cda49fb736814acba2c88ca566dd89bf4","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAWebExceptionHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n import org.springframework.cloud.gateway.support.NotFoundException;\n import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n@@ -42,24 +41,25 @@\n import org.springframework.http.MediaType;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n-import org.springframework.stereotype.Component;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebExceptionHandler;\n import reactor.core.publisher.Mono;\n \n-@Component\n @Order(-2)\n public class SyncopeSRAWebExceptionHandler implements WebExceptionHandler, ApplicationListener<RefreshRoutesEvent> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeSRAWebExceptionHandler.class);\n \n     private static final Map<String, Optional<URI>> CACHE = new ConcurrentHashMap<>();\n \n-    @Autowired\n-    private RouteProvider routeProvider;\n+    private final RouteProvider routeProvider;\n \n-    @Autowired\n-    private SRAProperties props;\n+    private final SRAProperties props;\n+\n+    public SyncopeSRAWebExceptionHandler(final RouteProvider routeProvider, final SRAProperties props) {\n+        this.routeProvider = routeProvider;\n+        this.props = props;\n+    }\n \n     @Override\n     public void onApplicationEvent(final RefreshRoutesEvent event) {"},{"sha":"9dc6f505c7fb966499b7e437e9f90ac3477499c8","filename":"sra/src/main/java/org/apache/syncope/sra/security/CsrfRouteMatcher.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -21,15 +21,12 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.cloud.gateway.route.Route;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpRequest;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n-@Component\n public class CsrfRouteMatcher extends AbstractRouteMatcher {\n \n     private static final String CACHE_NAME = CsrfRouteMatcher.class.getName();\n@@ -41,8 +38,11 @@ public class CsrfRouteMatcher extends AbstractRouteMatcher {\n         CACHE.put(CACHE_NAME, new ConcurrentHashMap<>());\n     }\n \n-    @Autowired\n-    private PublicRouteMatcher publicRouteMatcher;\n+    private final PublicRouteMatcher publicRouteMatcher;\n+\n+    public CsrfRouteMatcher(final PublicRouteMatcher publicRouteMatcher) {\n+        this.publicRouteMatcher = publicRouteMatcher;\n+    }\n \n     @Override\n     protected String getCacheName() {"},{"sha":"a3be13e7b52464ce904656c7b3799be2c425c103","filename":"sra/src/main/java/org/apache/syncope/sra/security/LogoutRouteMatcher.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -21,9 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.springframework.cloud.gateway.route.Route;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class LogoutRouteMatcher extends AbstractRouteMatcher {\n \n     private static final String CACHE_NAME = LogoutRouteMatcher.class.getName();"},{"sha":"3687040d1875df5823924ede35a524548a1b0355","filename":"sra/src/main/java/org/apache/syncope/sra/security/PublicRouteMatcher.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -21,9 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import org.apache.syncope.common.lib.types.SRARouteType;\n import org.springframework.cloud.gateway.route.Route;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class PublicRouteMatcher extends AbstractRouteMatcher {\n \n     private static final String CACHE_NAME = PublicRouteMatcher.class.getName();"},{"sha":"290fe4ec5566030f96df72f2f6f5c44d058bef37","filename":"sra/src/main/java/org/apache/syncope/sra/security/oauth2/OidcClientInitiatedServerLogoutSuccessHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Foauth2%2FOidcClientInitiatedServerLogoutSuccessHandler.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -20,8 +20,9 @@\n \n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n-import javax.annotation.Resource;\n import org.apache.syncope.sra.security.AbstractServerLogoutSuccessHandler;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import reactor.core.publisher.Mono;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\n@@ -41,7 +42,8 @@\n  */\n public class OidcClientInitiatedServerLogoutSuccessHandler extends AbstractServerLogoutSuccessHandler {\n \n-    @Resource(name = \"oidcClientRegistrationRepository\")\n+    @Autowired\n+    @Qualifier(\"oidcClientRegistrationRepository\")\n     private ReactiveClientRegistrationRepository clientRegistrationRepository;\n \n     protected final RedirectServerLogoutSuccessHandler serverLogoutSuccessHandler ="},{"sha":"551efc7ca5dcc7262baab41f69e54b9d2cba0494","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -36,3 +36,8 @@ sra.useGZIPCompression=true\n \n sra.global.error=/error\n sra.global.postLogout=/logout\n+\n+##\n+# Disable CGLib Proxies\n+spring.aop.auto=true\n+spring.aop.proxy-target-class=false"},{"sha":"45a3b725a04899ebd4e283e9758f42f4aff199b2","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWABootstrapConfiguration.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n import org.springframework.context.annotation.Bean;\n@@ -49,7 +48,6 @@ public WARestClient waRestClient() {\n \n     @Configuration(proxyBeanMethods = false)\n     public static class PropertySourceConfiguration {\n-        @Autowired\n         @Bean\n         public PropertySourceLocator configPropertySourceLocator(final WARestClient waRestClient) {\n             return new SyncopeWAPropertySourceLocator(waRestClient);"},{"sha":"3c620392a6e42dad19dd40260b83a7d800150021","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -34,7 +34,6 @@\n import org.quartz.TriggerBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\n@@ -74,9 +73,9 @@\n     RedisRepositoriesAutoConfiguration.class\n })\n @EnableConfigurationProperties({ WAProperties.class, CasConfigurationProperties.class })\n-@EnableAsync\n-@EnableAspectJAutoProxy(proxyTargetClass = true)\n-@EnableTransactionManagement(proxyTargetClass = true)\n+@EnableAsync(proxyTargetClass = false)\n+@EnableAspectJAutoProxy(proxyTargetClass = false)\n+@EnableTransactionManagement(proxyTargetClass = false)\n @EnableScheduling\n public class SyncopeWAApplication extends SpringBootServletInitializer {\n \n@@ -88,12 +87,6 @@ public static void main(final String[] args) {\n             build().run(args);\n     }\n \n-    @Autowired\n-    protected WAProperties waProperties;\n-\n-    @Autowired\n-    protected SchedulerFactoryBean scheduler;\n-\n     @Override\n     protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n         return builder.properties(Map.of(\"spring.config.name\", \"wa\",\n@@ -108,10 +101,13 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n     @EventListener\n     public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n         new CasConfigurationPropertiesValidator(event.getApplicationContext()).validate();\n-        scheduleJobToRefreshContext();\n+        final WAProperties waProperties = event.getApplicationContext().getBean(WAProperties.class);\n+        final SchedulerFactoryBean scheduler = event.getApplicationContext().getBean(SchedulerFactoryBean.class);\n+        scheduleJobToRefreshContext(waProperties, scheduler);\n     }\n \n-    protected void scheduleJobToRefreshContext() {\n+    protected void scheduleJobToRefreshContext(final  WAProperties waProperties,\n+                                               final SchedulerFactoryBean scheduler) {\n         try {\n             Date date = Date.from(LocalDateTime.now().plusSeconds(waProperties.getContextRefreshDelay()).\n                     atZone(ZoneId.systemDefault()).toInstant());"},{"sha":"21625d90b6d0efe7fae42277465f5bcbccca442d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/actuate/SyncopeWAInfoContributor.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeWAInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeWAInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Factuate%2FSyncopeWAInfoContributor.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -19,15 +19,17 @@\n package org.apache.syncope.wa.starter.actuate;\n \n import org.apache.syncope.wa.bootstrap.WAProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.info.Info;\n import org.springframework.boot.actuate.info.InfoContributor;\n import org.springframework.security.access.prepost.PreAuthorize;\n \n public class SyncopeWAInfoContributor implements InfoContributor {\n \n-    @Autowired\n-    protected WAProperties waProperties;\n+    protected final WAProperties waProperties;\n+\n+    public SyncopeWAInfoContributor(final WAProperties waProperties) {\n+        this.waProperties = waProperties;\n+    }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Override"},{"sha":"28916714a11e027bb3a29443a568522b9a3445ec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":4,"deletions":25,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n+import org.apache.syncope.wa.bootstrap.WAProperties;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.actuate.SyncopeCoreHealthIndicator;\n import org.apache.syncope.wa.starter.actuate.SyncopeWAInfoContributor;\n@@ -78,7 +79,6 @@\n import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryListener;\n-import org.apereo.cas.services.web.CasThymeleafLoginFormDirector;\n import org.apereo.cas.support.events.CasEventRepository;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n@@ -87,19 +87,16 @@\n import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n import org.apereo.cas.util.DateTimeUtils;\n import org.apereo.cas.util.crypto.CipherExecutor;\n-import org.apereo.cas.web.flow.CasWebflowExecutionPlan;\n import org.apereo.cas.webauthn.storage.WebAuthnCredentialRepository;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.cloud.context.config.annotation.RefreshScope;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration(value = \"SyncopeWAConfiguration\", proxyBeanMethods = false)\n+@Configuration(proxyBeanMethods = false)\n public class SyncopeWAConfiguration {\n \n     private static String version(final ConfigurableApplicationContext ctx) {\n@@ -202,7 +199,6 @@ public RegisteredServiceMapper registeredServiceMapper(final ConfigurableApplica\n                 clientAppTOMappers);\n     }\n \n-    @Autowired\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n             final ConfigurableApplicationContext ctx,\n@@ -217,7 +213,6 @@ public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n-    @Autowired\n     @Bean\n     public SamlIdPMetadataGenerator samlIdPMetadataGenerator(\n             final WARestClient restClient,\n@@ -226,7 +221,6 @@ public SamlIdPMetadataGenerator samlIdPMetadataGenerator(\n         return new RestfulSamlIdPMetadataGenerator(context, restClient);\n     }\n \n-    @Autowired\n     @Bean\n     public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClient) {\n         return new RestfulSamlIdPMetadataLocator(\n@@ -235,7 +229,6 @@ public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClie\n                 restClient);\n     }\n \n-    @Autowired\n     @Bean\n     public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n         return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n@@ -247,15 +240,13 @@ public CasEventRepositoryFilter syncopeWAEventRepositoryFilter() {\n         return CasEventRepositoryFilter.noOp();\n     }\n \n-    @Autowired\n     @Bean\n     public CasEventRepository casEventRepository(final WARestClient restClient,\n             @Qualifier(\"syncopeWAEventRepositoryFilter\")\n             final CasEventRepositoryFilter syncopeWAEventRepositoryFilter) {\n         return new SyncopeWAEventRepository(syncopeWAEventRepositoryFilter, restClient);\n     }\n \n-    @Autowired\n     @Bean\n     public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n         return new SyncopeWASAML2ClientCustomizer(restClient);\n@@ -269,15 +260,13 @@ public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(\n                 restClient, casProperties.getAuthn().getMfa().getGauth().getCore().getTimeStepSize());\n     }\n \n-    @Autowired\n     @Bean\n     public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n             final IGoogleAuthenticator googleAuthenticatorInstance, final WARestClient restClient) {\n \n         return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n     }\n \n-    @Autowired\n     @Bean\n     public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n             final ConfigurableApplicationContext ctx,\n@@ -289,7 +278,6 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n         return new SyncopeWAOIDCJWKSGeneratorService(restClient, size, algorithm);\n     }\n \n-    @RefreshScope\n     @Bean\n     public WebAuthnCredentialRepository webAuthnCredentialRepository(\n             final CasConfigurationProperties casProperties,\n@@ -298,7 +286,6 @@ public WebAuthnCredentialRepository webAuthnCredentialRepository(\n     }\n \n     @Bean\n-    @RefreshScope\n     public U2FDeviceRepository u2fDeviceRepository(\n             final CasConfigurationProperties casProperties,\n             final WARestClient restClient) {\n@@ -313,22 +300,20 @@ public U2FDeviceRepository u2fDeviceRepository(\n     }\n \n     @Bean\n-    @Autowired\n     public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient restClient) {\n         return new SyncopeWASurrogateAuthenticationService(restClient);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    @Autowired\n     public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final WARestClient restClient) {\n         return new SyncopeCoreHealthIndicator(restClient);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeWAInfoContributor syncopeWAInfoContributor() {\n-        return new SyncopeWAInfoContributor();\n+    public SyncopeWAInfoContributor syncopeWAInfoContributor(final WAProperties waProperties) {\n+        return new SyncopeWAInfoContributor(waProperties);\n     }\n \n     @Bean\n@@ -340,10 +325,4 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.WA);\n     }\n-\n-    @Bean\n-    public CasThymeleafLoginFormDirector casThymeleafLoginFormDirector(\n-            @Qualifier(\"casWebflowExecutionPlan\") final CasWebflowExecutionPlan webflowExecutionPlan) {\n-        return new CasThymeleafLoginFormDirector(webflowExecutionPlan);\n-    }\n }"},{"sha":"d7aee55a1fe43892c430c6dd981b4fce17fa6d53","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWARefreshContextJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -62,7 +62,7 @@ public void execute(final JobExecutionContext jobExecutionContext) throws JobExe\n             LOG.info(\"Generated SAML2 IdP metadata for {}\", document.getAppliesTo());\n \n             advertiseReady();\n-        } catch (Exception e) {\n+        } catch (final Exception e) {\n             throw new JobExecutionException(\"While generating SAML2 IdP metadata\", e);\n         }\n     }"},{"sha":"1b2bbbc3d903a66c63e948fe9984ac48b56750e7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -50,7 +50,7 @@ public RestfulSamlIdPMetadataGenerator(\n     @Override\n     protected SamlIdPMetadataDocument finalizeMetadataDocument(\n             final SamlIdPMetadataDocument doc,\n-            final Optional<SamlRegisteredService> registeredService) {\n+            final Optional<SamlRegisteredService> registeredService) throws Exception {\n \n         LOG.info(\"Generating new SAML2 IdP metadata document\");\n \n@@ -84,14 +84,14 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n \n     @Override\n     public Pair<String, String> buildSelfSignedEncryptionCert(final Optional<SamlRegisteredService> registeredService)\n-            throws Exception {\n+        throws Exception {\n \n         return generateCertificateAndKey();\n     }\n \n     @Override\n     public Pair<String, String> buildSelfSignedSigningCert(final Optional<SamlRegisteredService> registeredService)\n-            throws Exception {\n+        throws Exception {\n \n         return generateCertificateAndKey();\n     }"},{"sha":"8ae2d177c0c17f3fc3dc059910018289398cfeb3","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/273ca7bf2608ba53e3c9594068a6416e0c31622b/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=273ca7bf2608ba53e3c9594068a6416e0c31622b","patch":"@@ -110,3 +110,8 @@ cas.authn.syncope.name=DefaultSyncopeAuthModule\n # Default strategy for matching request paths against\n # registered Spring MVC handler mappings\n spring.mvc.pathmatch.matching-strategy=ant-path-matcher\n+\n+##\n+# Disable CGLib Proxies\n+spring.aop.auto=true\n+spring.aop.proxy-target-class=false"}]}