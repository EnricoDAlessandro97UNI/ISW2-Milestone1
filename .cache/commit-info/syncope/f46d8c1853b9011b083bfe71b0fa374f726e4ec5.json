{"sha":"f46d8c1853b9011b083bfe71b0fa374f726e4ec5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0NmQ4YzE4NTNiOTAxMWIwODNiZmU3MWIwZmEzNzRmNzI2ZTRlYzU=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-31T14:24:26Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-31T14:24:26Z"},"message":"SYNCOPE-231 Fixing create issues in PolicyTestITCase and authorization issue in UserTestITCase\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1440971 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d7076e2754880ecda27b5eb1282a03e5a7f1edf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2d7076e2754880ecda27b5eb1282a03e5a7f1edf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f46d8c1853b9011b083bfe71b0fa374f726e4ec5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f46d8c1853b9011b083bfe71b0fa374f726e4ec5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f46d8c1853b9011b083bfe71b0fa374f726e4ec5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"284922d2a8c9427bc0d747f070d0568ed4e23503","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/284922d2a8c9427bc0d747f070d0568ed4e23503","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/284922d2a8c9427bc0d747f070d0568ed4e23503"}],"stats":{"total":35,"additions":24,"deletions":11},"files":[{"sha":"d4f03648e80a0b74f10de17d884e2ff4a8f8b491","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f46d8c1853b9011b083bfe71b0fa374f726e4ec5","patch":"@@ -70,9 +70,11 @@\n import org.apache.syncope.common.services.SchemaService.SchemaType;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -375,4 +377,15 @@ protected RoleTO createRole(RoleService roleService, RoleTO newRoleTO) {\n         return getObject(response, RoleTO.class, roleService);\n     }\n \n+\n+    protected Response createPolicy(PolicyService policyService, PolicyType policyType, PolicyTO policy) {\n+        Response response = policyService.create(policyType, policy);\n+        if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n+            Exception ex = clientExceptionMapper.fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return response;\n+    }\n }"},{"sha":"00bcfce85a5c0200045aaa6ae33cd4559e164ec7","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=f46d8c1853b9011b083bfe71b0fa374f726e4ec5","patch":"@@ -81,36 +81,32 @@ public void createWithException() {\n         policy.setDescription(\"global password policy\");\n         System.out.println(policy.getType());\n \n-        Throwable t = null;\n         try {\n-            policyService.create(PolicyType.PASSWORD, policy);\n+            createPolicy(policyService, PolicyType.PASSWORD, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            t = sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy);\n+            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));\n         }\n-        assertNotNull(t);\n     }\n \n     @Test\n     public void createMissingDescription() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n \n-        Throwable t = null;\n         try {\n-            policyService.create(PolicyType.SYNC, policy);\n+            createPolicy(policyService, PolicyType.SYNC, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            t = sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy);\n+            assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));\n         }\n-        assertNotNull(t);\n     }\n \n     @Test\n     public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        Response response = policyService.create(PolicyType.SYNC, policy);\n+        Response response = createPolicy(policyService, PolicyType.SYNC, policy);\n         SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n \n         assertNotNull(policyTO);\n@@ -127,7 +123,7 @@ public void update() {\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        Response response = policyService.create(PolicyType.PASSWORD, policy);\n+        Response response = createPolicy(policyService, PolicyType.PASSWORD, policy);\n         policy = getObject(response, PasswordPolicyTO.class, policyService);\n \n         // read new password policy\n@@ -152,7 +148,7 @@ public void update() {\n     @Test\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n-        Response response = policyService.create(PolicyType.SYNC, policy);\n+        Response response = createPolicy(policyService, PolicyType.SYNC, policy);\n         SyncPolicyTO policyTO = getObject(response, SyncPolicyTO.class, policyService);\n         assertNotNull(policyTO);\n "},{"sha":"214c76451d0540e552443cea1b61f7f1be7a0851","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f46d8c1853b9011b083bfe71b0fa374f726e4ec5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=f46d8c1853b9011b083bfe71b0fa374f726e4ec5","patch":"@@ -26,6 +26,7 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.security.AccessControlException;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Collections;\n@@ -114,6 +115,9 @@ public void selfRead() {\n             fail();\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        } catch (AccessControlException e) {\n+            // Will be thrown by cxf service\n+            assertNotNull(e);\n         }\n \n         UserTO userTO = userService2.readSelf();"}]}