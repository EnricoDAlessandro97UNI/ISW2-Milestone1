{"sha":"2a99db9ce64bd9461fad9e1ac89bed7830b957dc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhOTlkYjljZTY0YmQ5NDYxZmFkOWUxYWM4OWJlZDc4MzBiOTU3ZGM=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-15T15:27:41Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-15T15:27:41Z"},"message":"Fixed SYNCOPE-592, messages improvement SYNCOPE-158","tree":{"sha":"11c584cbfc6b53f8b95ced739b93015bc1d61fd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/11c584cbfc6b53f8b95ced739b93015bc1d61fd9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a99db9ce64bd9461fad9e1ac89bed7830b957dc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a99db9ce64bd9461fad9e1ac89bed7830b957dc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a99db9ce64bd9461fad9e1ac89bed7830b957dc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"405f212346b7714f1b21c67d37e35d9cf1e30809","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/405f212346b7714f1b21c67d37e35d9cf1e30809","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/405f212346b7714f1b21c67d37e35d9cf1e30809"}],"stats":{"total":811,"additions":690,"deletions":121},"files":[{"sha":"d5034984de5503b154e3c25567244fa4b3e48332","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":22,"deletions":16,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -20,27 +20,14 @@\n \n import org.apache.syncope.client.cli.commands.AbstractCommand;\n import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public final class SyncopeAdm {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeAdm.class);\n \n-    private static final String HELP_MESSAGE = \"Usage: Main [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    logger --help \\n\"\n-            + \"    config --help \\n\"\n-            + \"    notification --help \\n\"\n-            + \"    report --help \\n\"\n-            + \"    policy --help \\n\"\n-            + \"    entitlement --help \\n\"\n-            + \"    schema --help \\n\"\n-            + \"    install --help \\n\"\n-            + \"    info --help\\n\"\n-            + \"    domain --help\\n\"\n-            + \"    help\\n\";\n-\n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n \n@@ -50,15 +37,34 @@ public static void main(final String[] args) {\n             final AbstractCommand command = input.getCommand();\n             command.execute(input);\n         } catch (final IllegalAccessException | InstantiationException e) {\n-            System.out.println(HELP_MESSAGE);\n+            System.out.println(helpMessage());\n         } catch (final IllegalArgumentException ex) {\n             LOG.error(\"Error in main\", ex);\n             Messages.printMessage(ex.getMessage());\n             if (!ex.getMessage().startsWith(\"It seems you\")) {\n-                System.out.println(HELP_MESSAGE);\n+                System.out.println(helpMessage());\n+            }\n+        }\n+\n+    }\n+\n+    private static String helpMessage() {\n+        final StringBuilder helpMessageBuilder = new StringBuilder(\"Usage: Main [options]\\n\");\n+        helpMessageBuilder.append(\"  Options:\\n\");\n+        try {\n+            for (AbstractCommand command : CommandUtils.commands()) {\n+                final String commandName = command.getClass().getAnnotation(Command.class).name();\n+                helpMessageBuilder.append(\"    \").append(commandName);\n+                if (!\"help\".equalsIgnoreCase(commandName)) {\n+                    helpMessageBuilder.append(\" --help\");\n+                }\n+                helpMessageBuilder.append(\"\\n\");\n             }\n+        } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException ex) {\n+            Messages.printMessage(ex.getMessage());\n         }\n \n+        return helpMessageBuilder.toString();\n     }\n \n     private SyncopeAdm() {"},{"sha":"7cee2026b237b83428bf918f2bf7e285f66a579b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -35,4 +35,13 @@ protected String helpMessage(final String command, final List<String> options) {\n     }\n \n     public abstract String getHelpMessage();\n+\n+    protected static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass) {\n+        final String[] types = new String[enumClass.getFields().length];\n+        for (int i = 0; i < enumClass.getFields().length; i++) {\n+            types[i] = enumClass.getFields()[i].getName();\n+\n+        }\n+        return types;\n+    }\n }"},{"sha":"ee225d7b5ee731e8ad4c064aa385cdc836f571ab","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -264,9 +264,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n                 break;\n         }\n     }"},{"sha":"a2a097756a0e57b4c0a99ebffc0da5def10b2cd0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/DomainCommand.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FDomainCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -112,9 +112,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n \n     }"},{"sha":"85b7d73a73758844715dd479027dab5bf0e6f4a5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/HelpCommand.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FHelpCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -63,9 +63,7 @@ public void execute(final Input input) {\n                 }\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(helpMessage(\"help\", Options.toList()));\n+                Messages.printDefaultMessage(input.getOption(), helpMessage(\"info\", Options.toList()));\n                 break;\n         }\n     }"},{"sha":"07bb9526ed8cc06739c9b4335fa603c0146412dc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/InfoCommand.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FInfoCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -267,9 +267,7 @@ public void execute(final Input input) {\n                 System.out.println(helpMessage(\"info\", Options.toList()));\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(helpMessage(\"info\", Options.toList()));\n+                Messages.printDefaultMessage(input.getOption(), helpMessage(\"info\", Options.toList()));\n                 break;\n         }\n     }"},{"sha":"6c11c6ff8d9017a1fb6a4c0c3e528b00102944b0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"modified","additions":8,"deletions":26,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -106,7 +106,7 @@ public void execute(final Input input) {\n                 final String updateErrorMessage = \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n \n                 if (parameters.length >= 1) {\n-                    Input.PairParameter pairParameter = null;\n+                    Input.PairParameter pairParameter;\n                     for (final String parameter : parameters) {\n                         try {\n                             pairParameter = input.toPairParameter(parameter);\n@@ -119,12 +119,8 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                             if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printMessage(ex.getMessage());\n-                                System.out.println(\"Try with:\");\n-                                for (final LoggerLevel level : LoggerLevel.values()) {\n-                                    System.out.println(\"  *** \" + level.name());\n-                                }\n-                                System.out.println(\"\");\n+                                Messages.printTypeNotValidMessage(\n+                                        \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n                             } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n                                 Messages.printMessage(ex.getMessage(), updateErrorMessage);\n                             } else if (ex.getMessage().startsWith(\"NotFound\")) {\n@@ -153,12 +149,8 @@ public void execute(final Input input) {\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n                             if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printMessage(ex.getMessage());\n-                                System.out.println(\"Try with:\");\n-                                for (final LoggerLevel level : LoggerLevel.values()) {\n-                                    System.out.println(\"  *** \" + level.name());\n-                                }\n-                                System.out.println(\"\");\n+                                Messages.printTypeNotValidMessage(\n+                                        \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n                             } else {\n                                 Messages.printMessage(ex.getMessage(), updateAllErrorMessage);\n                             }\n@@ -187,16 +179,8 @@ public void execute(final Input input) {\n                             System.out.println(\"   - level: \" + loggerTO.getLevel());\n                             System.out.println(\"\");\n                         } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                Messages.printMessage(ex.getMessage());\n-                                System.out.println(\"Try with:\");\n-                                for (final LoggerLevel level : LoggerLevel.values()) {\n-                                    System.out.println(\"  *** \" + level.name());\n-                                }\n-                                System.out.println(\"\");\n-                            } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n-                                Messages.printMessage(ex.getMessage(), createErrorMessage);\n-                            }\n+                            Messages.printTypeNotValidMessage(\n+                                    \"logger level\", input.firstParameter(), fromEnumToArray(LoggerLevel.class));\n                             break;\n                         }\n                     }\n@@ -228,9 +212,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"194ee114d4328a70a96bb0ac4c4bf778dce0d929","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/NotificationCommand.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -78,7 +78,7 @@ public void execute(final Input input) {\n                         try {\n                             System.out.println(notificationService.read(Long.valueOf(parameter)));\n                         } catch (final NumberFormatException ex) {\n-                            System.out.println(\"Error reading \" + parameter + \". It isn't a valid notification id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"notification\", parameter);\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n                                 Messages.printNofFoundMessage(\"Notification\", parameter);\n@@ -106,8 +106,7 @@ public void execute(final Input input) {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid notification id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"notification\", parameter);\n                         }\n                     }\n                 } else {\n@@ -118,9 +117,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"a69be18e0c18a81a0c57952e3e1f88d1114126a8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -77,12 +77,8 @@ public void execute(final Input input) {\n                     } catch (final SyncopeClientException ex) {\n                         Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        Messages.printMessage(\n-                                \"Error: \" + parameters[0] + \" isn't a valid policy type, try with:\");\n-                        for (final PolicyType type : PolicyType.values()) {\n-                            System.out.println(\"  *** \" + type.name());\n-                        }\n-                        System.out.println(\"\");\n+                        Messages.printTypeNotValidMessage(\n+                                \"policy\", input.firstParameter(), fromEnumToArray(PolicyType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(listPolicyErrorMessage);\n@@ -96,8 +92,7 @@ public void execute(final Input input) {\n                         try {\n                             System.out.println(policyService.read(Long.valueOf(parameter)));\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid policy id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"policy\", parameter);\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n                                 Messages.printNofFoundMessage(\"Policy\", parameter);\n@@ -128,8 +123,7 @@ public void execute(final Input input) {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid policy id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"policy\", parameter);\n                         }\n                     }\n                 } else {\n@@ -140,9 +134,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"2178d2222d1dc1e59ab620da872ce6a9484874fe","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":16,"deletions":26,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -109,14 +109,13 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case READ:\n-                final String readErrorMessage = \"Usage: report --read {REPORT-ID} {REPORT-ID} [...]\";\n+                final String readErrorMessage = \"report --read {REPORT-ID} {REPORT-ID} [...]\";\n                 if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n                         try {\n                             System.out.println(reportService.read(Long.valueOf(parameter)));\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n                         } catch (final WebServiceException | SyncopeClientException ex) {\n                             if (ex.getMessage().startsWith(\"NotFound\")) {\n                                 Messages.printNofFoundMessage(\"Report\", parameter);\n@@ -130,9 +129,9 @@ public void execute(final Input input) {\n                 }\n                 break;\n             case DELETE:\n-                final String deleteErrorMessage = \"report --execute {REPORT-ID}\";\n+                final String deleteErrorMessage = \"report --delete {REPORT-ID} {REPORT-ID} [...]\";\n \n-                if (parameters.length == 1) {\n+                if (parameters.length >= 1) {\n                     for (final String parameter : parameters) {\n                         try {\n                             reportService.delete(Long.valueOf(parameter));\n@@ -146,16 +145,15 @@ public void execute(final Input input) {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n                         }\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(deleteErrorMessage);\n                 }\n                 break;\n             case EXECUTE:\n-                final String executeErrorMessage = \"Usage: report --execute {REPORT-ID}\";\n+                final String executeErrorMessage = \"report --execute {REPORT-ID}\";\n \n                 if (parameters.length == 1) {\n \n@@ -178,8 +176,7 @@ public void execute(final Input input) {\n                             Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final NumberFormatException ex) {\n-                        Messages.printMessage(\n-                                \"Error reading \" + parameters[0] + \". It isn't a valid report id\");\n+                        Messages.printIdNotNumberDeletedMessage(\"report\", parameters[0]);\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(executeErrorMessage);\n@@ -205,8 +202,7 @@ public void execute(final Input input) {\n                                 Messages.printMessage(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            Messages.printMessage(\n-                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n                         }\n                     }\n                 } else {\n@@ -232,7 +228,7 @@ public void execute(final Input input) {\n                                 System.out.println(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            System.out.println(\"Error reading \" + parameter + \". It isn't a valid report id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n                         }\n                     }\n                 } else {\n@@ -241,7 +237,7 @@ public void execute(final Input input) {\n                 break;\n             case EXPORT_EXECUTION_RESULT:\n                 final String exportExecutionErrorMessage\n-                        = \"Usage: report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+                        = \"report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n                         + \"          Format: CSV / HTML / PDF / XML / RTF\";\n \n                 if (parameters.length >= 2) {\n@@ -281,19 +277,15 @@ public void execute(final Input input) {\n                                 System.out.println(ex.getMessage());\n                             }\n                         } catch (final NumberFormatException ex) {\n-                            System.out.println(\"Error reading \" + parameter + \". It isn't a valid report id\");\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n                         } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n                             System.out.println(\" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n                         } catch (final IllegalArgumentException ex) {\n-                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n-                                System.out.println(\" - Error: \" + input.lastParameter()\n-                                        + \" isn't a valid policy type, try with:\");\n-                                for (final ReportExecExportFormat type : ReportExecExportFormat.values()) {\n-                                    System.out.println(\"  *** \" + type.name());\n-                                }\n-                            }\n-                            break;\n+                            Messages.printTypeNotValidMessage(\n+                                    \"format\", input.firstParameter(),\n+                                    fromEnumToArray(ReportExecExportFormat.class));\n                         }\n+                        break;\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(exportExecutionErrorMessage);\n@@ -303,9 +295,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"7cb9ca1a98ece53ee790d8c1ff2d2dedc6668a72","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/SchemaCommand.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FSchemaCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import static org.apache.syncope.client.cli.commands.AbstractCommand.fromEnumToArray;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -98,12 +100,8 @@ public void execute(final Input input) {\n                     } catch (final SyncopeClientException ex) {\n                         Messages.printMessage(ex.getMessage());\n                     } catch (final IllegalArgumentException ex) {\n-                        Messages.printMessage(\n-                                input.firstParameter() + \" isn't a valid schema type, try with:\");\n-                        for (final SchemaType type : SchemaType.values()) {\n-                            System.out.println(\"  *** \" + type.name());\n-                        }\n-                        System.out.println(\"\");\n+                        Messages.printTypeNotValidMessage(\n+                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(listErrorMessage);\n@@ -217,12 +215,8 @@ public void execute(final Input input) {\n                             Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        Messages.printMessage(\n-                                parameters[0] + \" isn't a valid schema type, try with:\");\n-                        for (final SchemaType type : SchemaType.values()) {\n-                            System.out.println(\"  *** \" + type.name());\n-                        }\n-                        System.out.println(\"\");\n+                        Messages.printTypeNotValidMessage(\n+                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(readErrorMessage);\n@@ -248,12 +242,8 @@ public void execute(final Input input) {\n                             Messages.printMessage(ex.getMessage());\n                         }\n                     } catch (final IllegalArgumentException ex) {\n-                        Messages.printMessage(\n-                                parameters[0] + \" isn't a valid schema type, try with:\");\n-                        for (final SchemaType type : SchemaType.values()) {\n-                            System.out.println(\"  *** \" + type.name());\n-                        }\n-                        System.out.println(\"\");\n+                        Messages.printTypeNotValidMessage(\n+                                \"schema\", input.firstParameter(), fromEnumToArray(SchemaType.class));\n                     }\n                 } else {\n                     Messages.printCommandOptionMessage(deleteErrorMessage);\n@@ -263,9 +253,7 @@ public void execute(final Input input) {\n                 System.out.println(HELP_MESSAGE);\n                 break;\n             default:\n-                System.out.println(input.getOption() + \" is not a valid option.\");\n-                System.out.println(\"\");\n-                System.out.println(HELP_MESSAGE);\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n         }\n     }\n "},{"sha":"9dcb7950427b75310d1af7ae6c182ab5e80989a1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/TaskCommand.java","status":"added","additions":583,"deletions":0,"changes":583,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FTaskCommand.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -0,0 +1,583 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Command(name = \"task\")\n+public class TaskCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n+\n+    private static final String HELP_MESSAGE = \"Usage: task [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-task \\n\"\n+            + \"       Syntax: --list-task {TASK-TYPE} \\n\"\n+            + \"          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\\n\"\n+            + \"    --list-running-jobs \\n\"\n+            + \"    --list-scheduled-jobs \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {TASK-ID} {TASK-ID} [...]\\n\"\n+            + \"    --read-execution \\n\"\n+            + \"       Syntax: --read-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {TASK-ID} {TASK-ID} [...]\\n\"\n+            + \"    --delete-execution \\n\"\n+            + \"       Syntax: --delete-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n\"\n+            + \"    --execute \\n\"\n+            + \"       Syntax: --execute {TASK-ID} {DRY-RUN}\"\n+            + \"          Dry run: true / false\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        final String[] parameters = input.getParameters();\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        final TaskService taskService = SyncopeServices.get(TaskService.class);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST_TASK:\n+                final String listTaskErrorMessage = \"task --list-task {TASK-TYPE}\\n\"\n+                        + \"   Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\";\n+                if (parameters.length == 1) {\n+                    try {\n+                        final TaskType taskType = TaskType.valueOf(parameters[0]);\n+                        for (final AbstractTaskTO taskTO : taskService.list(taskType, new TaskQuery()).getResult()) {\n+                            switch (taskType) {\n+                                case NOTIFICATION:\n+                                    final NotificationTaskTO notificationTaskTO = (NotificationTaskTO) taskTO;\n+                                    System.out.println(\"\");\n+                                    System.out.println(\" - Notification task key: \" + notificationTaskTO.getKey());\n+                                    System.out.println(\"     executed: \" + notificationTaskTO.isExecuted());\n+                                    System.out.println(\"     sender: \" + notificationTaskTO.getSender());\n+                                    System.out.println(\"     subjetc: \" + notificationTaskTO.getSubject());\n+                                    System.out.println(\"     text body: \" + notificationTaskTO.getTextBody());\n+                                    System.out.println(\"     html body: \" + notificationTaskTO.getHtmlBody());\n+                                    System.out.println(\"     latest execution status: \"\n+                                            + notificationTaskTO.getLatestExecStatus());\n+                                    System.out.println(\"     start date: \" + notificationTaskTO.getStartDate());\n+                                    System.out.println(\"     end date: \" + notificationTaskTO.getEndDate());\n+                                    System.out.println(\"     recipients: \" + notificationTaskTO.getRecipients());\n+                                    System.out.println(\"     trace level: \" + notificationTaskTO.getTraceLevel());\n+                                    for (final TaskExecTO taskExecTO : notificationTaskTO.getExecutions()) {\n+                                        printTaskExecTO(taskExecTO);\n+                                    }\n+                                    System.out.println(\"\");\n+                                    break;\n+                                case PROPAGATION:\n+                                    final PropagationTaskTO propagationTaskTO = (PropagationTaskTO) taskTO;\n+                                    System.out.println(\"\");\n+                                    System.out.println(\" - Propagation task key: \" + propagationTaskTO.getKey());\n+                                    System.out.println(\"     resource: \" + propagationTaskTO.getResource());\n+                                    System.out.println(\"     any key: \" + propagationTaskTO.getAnyKey());\n+                                    System.out.println(\"     any type kind: \" + propagationTaskTO.getAnyTypeKind());\n+                                    System.out.println(\"     connector object key: \"\n+                                            + propagationTaskTO.getConnObjectKey());\n+                                    System.out.println(\"     old connector object key: \"\n+                                            + propagationTaskTO.getOldConnObjectKey());\n+                                    System.out.println(\"     latest execution status: \"\n+                                            + propagationTaskTO.getLatestExecStatus());\n+                                    System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n+                                    System.out.println(\"     xml attribute: \" + propagationTaskTO.getXmlAttributes());\n+                                    System.out.println(\"     start date: \" + propagationTaskTO.getStartDate());\n+                                    System.out.println(\"     end date: \" + propagationTaskTO.getEndDate());\n+                                    System.out.println(\"     operation: \" + propagationTaskTO.getOperation());\n+                                    for (final TaskExecTO taskExecTO : propagationTaskTO.getExecutions()) {\n+                                        printTaskExecTO(taskExecTO);\n+                                    }\n+                                    System.out.println(\"\");\n+                                    break;\n+                                case PUSH:\n+                                    final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+                                    System.out.println(\"\");\n+                                    System.out.println(\" - Push task key: \" + pushTaskTO.getKey());\n+                                    System.out.println(\"     name: \" + pushTaskTO.getName());\n+                                    System.out.println(\"     resource: \" + pushTaskTO.getResource());\n+                                    System.out.println(\"     cron expression: \" + pushTaskTO.getCronExpression());\n+                                    System.out.println(\"     description: \" + pushTaskTO.getDescription());\n+                                    System.out.println(\"     is perform create: \" + pushTaskTO.isPerformCreate());\n+                                    System.out.println(\"     is perform delete: \" + pushTaskTO.isPerformDelete());\n+                                    System.out.println(\"     is perform update: \" + pushTaskTO.isPerformUpdate());\n+                                    System.out.println(\"     is sync status: \" + pushTaskTO.isSyncStatus());\n+                                    System.out.println(\"     start date: \" + pushTaskTO.getStartDate());\n+                                    System.out.println(\"     end date: \" + pushTaskTO.getEndDate());\n+                                    System.out.println(\"     last execution: \" + pushTaskTO.getLastExec());\n+                                    System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n+                                    System.out.println(\"     latest execution status: \"\n+                                            + pushTaskTO.getLatestExecStatus());\n+                                    System.out.println(\"     filters: \" + pushTaskTO.getFilters());\n+                                    System.out.println(\"     delegate class: \" + pushTaskTO.getJobDelegateClassName());\n+                                    System.out.println(\"     action class: \" + pushTaskTO.getActionsClassNames());\n+                                    System.out.println(\"     matching rule: \" + pushTaskTO.getMatchingRule());\n+                                    System.out.println(\"     not matching rule: \" + pushTaskTO.getUnmatchingRule());\n+                                    for (final TaskExecTO taskExecTO : pushTaskTO.getExecutions()) {\n+                                        printTaskExecTO(taskExecTO);\n+                                    }\n+                                    System.out.println(\"\");\n+                                    break;\n+                                case SCHEDULED:\n+                                    final SchedTaskTO schedTaskTO = (SchedTaskTO) taskTO;\n+                                    System.out.println(\"\");\n+                                    System.out.println(\" - Scheduled task key: \" + schedTaskTO.getKey());\n+                                    System.out.println(\"     name: \" + schedTaskTO.getName());\n+                                    System.out.println(\"     cron expression: \" + schedTaskTO.getCronExpression());\n+                                    System.out.println(\"     description: \" + schedTaskTO.getDescription());\n+                                    System.out.println(\"     start date: \" + schedTaskTO.getStartDate());\n+                                    System.out.println(\"     end date: \" + schedTaskTO.getEndDate());\n+                                    System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n+                                    System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n+                                    System.out.println(\"     latest execution status: \"\n+                                            + schedTaskTO.getLatestExecStatus());\n+                                    System.out.println(\"     job delegate class: \"\n+                                            + schedTaskTO.getJobDelegateClassName());\n+                                    for (final TaskExecTO taskExecTO : schedTaskTO.getExecutions()) {\n+                                        printTaskExecTO(taskExecTO);\n+                                    }\n+                                    System.out.println(\"\");\n+                                    break;\n+                                case SYNCHRONIZATION:\n+                                    final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n+                                    System.out.println(\"\");\n+                                    System.out.println(\" - Sync task key: \" + syncTaskTO.getKey());\n+                                    System.out.println(\"     name: \" + syncTaskTO.getName());\n+                                    System.out.println(\"     resource: \" + syncTaskTO.getResource());\n+                                    System.out.println(\"     realm destination: \" + syncTaskTO.getDestinationRealm());\n+                                    System.out.println(\"     cron expression: \" + syncTaskTO.getCronExpression());\n+                                    System.out.println(\"     description: \" + syncTaskTO.getDescription());\n+                                    System.out.println(\"     is full reconciliation: \"\n+                                            + syncTaskTO.isFullReconciliation());\n+                                    System.out.println(\"     is perform create: \" + syncTaskTO.isPerformCreate());\n+                                    System.out.println(\"     is perform delete: \" + syncTaskTO.isPerformDelete());\n+                                    System.out.println(\"     is perform update: \" + syncTaskTO.isPerformUpdate());\n+                                    System.out.println(\"     is sync status: \" + syncTaskTO.isSyncStatus());\n+                                    System.out.println(\"     templates:\");\n+                                    for (Map.Entry<String, AnyTO> entrySet : syncTaskTO.getTemplates().entrySet()) {\n+                                        final String key = entrySet.getKey();\n+                                        final AnyTO value = entrySet.getValue();\n+                                        System.out.println(\"        \" + key + \" key: \" + value.getKey()\n+                                                + \" of realm\" + value.getRealm()\n+                                                + \" on resource \" + value.getResources());\n+\n+                                    }\n+                                    System.out.println(\"     start date: \" + syncTaskTO.getStartDate());\n+                                    System.out.println(\"     end date: \" + syncTaskTO.getEndDate());\n+                                    System.out.println(\"     next execution: \" + syncTaskTO.getNextExec());\n+                                    System.out.println(\"     last execution: \" + syncTaskTO.getLastExec());\n+                                    System.out.println(\"     latest execution status: \"\n+                                            + syncTaskTO.getLatestExecStatus());\n+                                    System.out.println(\"     job delegate class: \"\n+                                            + syncTaskTO.getJobDelegateClassName());\n+                                    System.out.println(\"     action class name: \" + syncTaskTO.getActionsClassNames());\n+                                    System.out.println(\"     matching rule: \" + syncTaskTO.getMatchingRule());\n+                                    System.out.println(\"     unmatching rule: \" + syncTaskTO.getUnmatchingRule());\n+                                    for (final TaskExecTO taskExecTO : syncTaskTO.getExecutions()) {\n+                                        printTaskExecTO(taskExecTO);\n+                                    }\n+                                    System.out.println(\"\");\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        }\n+                    } catch (final SyncopeClientException ex) {\n+                        Messages.printMessage(ex.getMessage());\n+                    } catch (final IllegalArgumentException ex) {\n+                        Messages.printTypeNotValidMessage(\"task\", parameters[0], fromEnumToArray(TaskType.class));\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(listTaskErrorMessage);\n+                }\n+                break;\n+            case LIST_RUNNING_JOBS:\n+                try {\n+                    for (final TaskExecTO taskExecTO : taskService.listJobs(JobStatusType.RUNNING)) {\n+                        printTaskExecTO(taskExecTO);\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                }\n+                break;\n+            case LIST_SCHEDULED_JOBS:\n+                try {\n+                    for (final TaskExecTO taskExecTO : taskService.listJobs(JobStatusType.SCHEDULED)) {\n+                        printTaskExecTO(taskExecTO);\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                }\n+                break;\n+            case READ:\n+                final String readErrorMessage = \"task --read {TASK-ID} {TASK-ID} [...]\";\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            final AbstractTaskTO taskTO = taskService.read(Long.valueOf(parameter));\n+                            if (taskTO instanceof NotificationTaskTO) {\n+                                final NotificationTaskTO notificationTaskTO = (NotificationTaskTO) taskTO;\n+                                System.out.println(\"\");\n+                                System.out.println(\" - Notification task key: \" + notificationTaskTO.getKey());\n+                                System.out.println(\"     executed: \" + notificationTaskTO.isExecuted());\n+                                System.out.println(\"     sender: \" + notificationTaskTO.getSender());\n+                                System.out.println(\"     subjetc: \" + notificationTaskTO.getSubject());\n+                                System.out.println(\"     text body: \" + notificationTaskTO.getTextBody());\n+                                System.out.println(\"     html body: \" + notificationTaskTO.getHtmlBody());\n+                                System.out.println(\"     latest execution status: \"\n+                                        + notificationTaskTO.getLatestExecStatus());\n+                                System.out.println(\"     start date: \" + notificationTaskTO.getStartDate());\n+                                System.out.println(\"     end date: \" + notificationTaskTO.getEndDate());\n+                                System.out.println(\"     recipients: \" + notificationTaskTO.getRecipients());\n+                                System.out.println(\"     trace level: \" + notificationTaskTO.getTraceLevel());\n+                                for (final TaskExecTO taskExecTO : notificationTaskTO.getExecutions()) {\n+                                    printTaskExecTO(taskExecTO);\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (taskTO instanceof PropagationTaskTO) {\n+                                final PropagationTaskTO propagationTaskTO = (PropagationTaskTO) taskTO;\n+                                System.out.println(\"\");\n+                                System.out.println(\" - Propagation task key: \" + propagationTaskTO.getKey());\n+                                System.out.println(\"     resource: \" + propagationTaskTO.getResource());\n+                                System.out.println(\"     any key: \" + propagationTaskTO.getAnyKey());\n+                                System.out.println(\"     any type kind: \" + propagationTaskTO.getAnyTypeKind());\n+                                System.out.println(\"     connector object key: \"\n+                                        + propagationTaskTO.getConnObjectKey());\n+                                System.out.println(\"     old connector object key: \"\n+                                        + propagationTaskTO.getOldConnObjectKey());\n+                                System.out.println(\"     latest execution status: \"\n+                                        + propagationTaskTO.getLatestExecStatus());\n+                                System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n+                                System.out.println(\"     xml attribute: \" + propagationTaskTO.getXmlAttributes());\n+                                System.out.println(\"     start date: \" + propagationTaskTO.getStartDate());\n+                                System.out.println(\"     end date: \" + propagationTaskTO.getEndDate());\n+                                System.out.println(\"     operation: \" + propagationTaskTO.getOperation());\n+                                for (final TaskExecTO taskExecTO : propagationTaskTO.getExecutions()) {\n+                                    printTaskExecTO(taskExecTO);\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (taskTO instanceof PushTaskTO) {\n+                                final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+                                System.out.println(\"\");\n+                                System.out.println(\" - Push task key: \" + pushTaskTO.getKey());\n+                                System.out.println(\"     name: \" + pushTaskTO.getName());\n+                                System.out.println(\"     resource: \" + pushTaskTO.getResource());\n+                                System.out.println(\"     cron expression: \" + pushTaskTO.getCronExpression());\n+                                System.out.println(\"     description: \" + pushTaskTO.getDescription());\n+                                System.out.println(\"     is perform create: \" + pushTaskTO.isPerformCreate());\n+                                System.out.println(\"     is perform delete: \" + pushTaskTO.isPerformDelete());\n+                                System.out.println(\"     is perform update: \" + pushTaskTO.isPerformUpdate());\n+                                System.out.println(\"     is sync status: \" + pushTaskTO.isSyncStatus());\n+                                System.out.println(\"     start date: \" + pushTaskTO.getStartDate());\n+                                System.out.println(\"     end date: \" + pushTaskTO.getEndDate());\n+                                System.out.println(\"     last execution: \" + pushTaskTO.getLastExec());\n+                                System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n+                                System.out.println(\"     latest execution status: \"\n+                                        + pushTaskTO.getLatestExecStatus());\n+                                System.out.println(\"     filters: \" + pushTaskTO.getFilters());\n+                                System.out.println(\"     delegate class: \" + pushTaskTO.getJobDelegateClassName());\n+                                System.out.println(\"     action class: \" + pushTaskTO.getActionsClassNames());\n+                                System.out.println(\"     matching rule: \" + pushTaskTO.getMatchingRule());\n+                                System.out.println(\"     not matching rule: \" + pushTaskTO.getUnmatchingRule());\n+                                for (final TaskExecTO taskExecTO : pushTaskTO.getExecutions()) {\n+                                    printTaskExecTO(taskExecTO);\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (taskTO instanceof SchedTaskTO) {\n+                                final SchedTaskTO schedTaskTO = (SchedTaskTO) taskTO;\n+                                System.out.println(\"\");\n+                                System.out.println(\" - Scheduled task key: \" + schedTaskTO.getKey());\n+                                System.out.println(\"     name: \" + schedTaskTO.getName());\n+                                System.out.println(\"     cron expression: \" + schedTaskTO.getCronExpression());\n+                                System.out.println(\"     description: \" + schedTaskTO.getDescription());\n+                                System.out.println(\"     start date: \" + schedTaskTO.getStartDate());\n+                                System.out.println(\"     end date: \" + schedTaskTO.getEndDate());\n+                                System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n+                                System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n+                                System.out.println(\"     latest execution status: \"\n+                                        + schedTaskTO.getLatestExecStatus());\n+                                System.out.println(\"     job delegate class: \"\n+                                        + schedTaskTO.getJobDelegateClassName());\n+                                for (final TaskExecTO taskExecTO : schedTaskTO.getExecutions()) {\n+                                    printTaskExecTO(taskExecTO);\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (taskTO instanceof SyncTaskTO) {\n+                                final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n+                                System.out.println(\"\");\n+                                System.out.println(\" - Sync task key: \" + syncTaskTO.getKey());\n+                                System.out.println(\"     name: \" + syncTaskTO.getName());\n+                                System.out.println(\"     resource: \" + syncTaskTO.getResource());\n+                                System.out.println(\"     realm destination: \" + syncTaskTO.getDestinationRealm());\n+                                System.out.println(\"     cron expression: \" + syncTaskTO.getCronExpression());\n+                                System.out.println(\"     description: \" + syncTaskTO.getDescription());\n+                                System.out.println(\"     is full reconciliation: \"\n+                                        + syncTaskTO.isFullReconciliation());\n+                                System.out.println(\"     is perform create: \" + syncTaskTO.isPerformCreate());\n+                                System.out.println(\"     is perform delete: \" + syncTaskTO.isPerformDelete());\n+                                System.out.println(\"     is perform update: \" + syncTaskTO.isPerformUpdate());\n+                                System.out.println(\"     is sync status: \" + syncTaskTO.isSyncStatus());\n+                                System.out.println(\"     templates:\");\n+                                for (Map.Entry<String, AnyTO> entrySet : syncTaskTO.getTemplates().entrySet()) {\n+                                    final String key = entrySet.getKey();\n+                                    final AnyTO value = entrySet.getValue();\n+                                    System.out.println(\"        \" + key + \"key : \" + value.getKey()\n+                                            + \" of realm\" + value.getRealm()\n+                                            + \" on resource \" + value.getResources());\n+\n+                                }\n+                                System.out.println(\"     start date: \" + syncTaskTO.getStartDate());\n+                                System.out.println(\"     end date: \" + syncTaskTO.getEndDate());\n+                                System.out.println(\"     next execution: \" + syncTaskTO.getNextExec());\n+                                System.out.println(\"     last execution: \" + syncTaskTO.getLastExec());\n+                                System.out.println(\"     latest execution status: \"\n+                                        + syncTaskTO.getLatestExecStatus());\n+                                System.out.println(\"     job delegate class: \"\n+                                        + syncTaskTO.getJobDelegateClassName());\n+                                System.out.println(\"     action class name: \" + syncTaskTO.getActionsClassNames());\n+                                System.out.println(\"     matching rule: \" + syncTaskTO.getMatchingRule());\n+                                System.out.println(\"     unmatching rule: \" + syncTaskTO.getUnmatchingRule());\n+                                for (final TaskExecTO taskExecTO : syncTaskTO.getExecutions()) {\n+                                    printTaskExecTO(taskExecTO);\n+                                }\n+                                System.out.println(\"\");\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"task\", parameter);\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Task\", parameter);\n+                            } else {\n+                                Messages.printMessage(\"Error: \" + ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(readErrorMessage);\n+                }\n+                break;\n+            case READ_EXECUTION:\n+                final String readExecutionErrorMessage = \"task --read-execution {TASK-ID} {TASK-ID} [...]\";\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            final TaskExecTO taskExecTO = taskService.readExecution(Long.valueOf(parameter));\n+                            printTaskExecTO(taskExecTO);\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"task execution\", parameter);\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Task execution\", parameter);\n+                            } else {\n+                                Messages.printMessage(\"Error: \" + ex.getMessage());\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(readExecutionErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = \"task --delete {TASK-ID} {TASK-ID} [...]\";\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            taskService.delete(Long.valueOf(parameter));\n+                            Messages.printDeletedMessage(\"Task\", parameter);\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Task\", parameter);\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                Messages.printMessage(\"You cannot delete task \" + parameter);\n+                            } else {\n+                                Messages.printMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"task\", parameter);\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(deleteErrorMessage);\n+                }\n+                break;\n+            case DELETE_EXECUTION:\n+                final String deleteExecutionErrorMessage = \"task --delete-execution \"\n+                        + \"{TASK-EXEC-ID} {TASK-EXEC-ID} [...]\";\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            taskService.deleteExecution(Long.valueOf(parameter));\n+                            Messages.printDeletedMessage(\"Task execution\", parameter);\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Task execution\", parameter);\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                Messages.printMessage(\"You cannot delete task execution\" + parameter);\n+                            } else {\n+                                Messages.printMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"task execution\", parameter);\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(deleteExecutionErrorMessage);\n+                }\n+                break;\n+            case EXECUTE:\n+                final String executeErrorMessage = \"task --execute {TASK-ID} {DRY-RUN}\\n\"\n+                        + \"          Dry run: true / false\";\n+\n+                if (parameters.length == 2) {\n+\n+                    try {\n+                        final Long taskIdToExecute = Long.valueOf(parameters[0]);\n+                        boolean dryRun;\n+                        if (\"false\".equalsIgnoreCase(parameters[1])) {\n+                            dryRun = false;\n+                        } else if (\"true\".equalsIgnoreCase(parameters[1])) {\n+                            dryRun = true;\n+                        } else {\n+                            Messages.printNotBooleanDeletedMessage(\"dry run\", parameters[1]);\n+                            break;\n+                        }\n+                        final TaskExecTO taskExecTO = taskService.execute(taskIdToExecute, dryRun);\n+                        printTaskExecTO(taskExecTO);\n+                    } catch (final WebServiceException | SyncopeClientException ex) {\n+                        System.out.println(\"Error:\");\n+                        if (ex.getMessage().startsWith(\"NotFound\")) {\n+                            Messages.printNofFoundMessage(\"Task\", parameters[0]);\n+                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                            Messages.printMessage(\"You cannot delete task \" + parameters[0]);\n+                        } else {\n+                            Messages.printMessage(ex.getMessage());\n+                        }\n+                    } catch (final NumberFormatException ex) {\n+                        Messages.printIdNotNumberDeletedMessage(\"task\", parameters[0]);\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(executeErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+\n+    }\n+\n+    private void printTaskExecTO(final TaskExecTO taskExecTO) {\n+        System.out.println(\"     EXECUTIONS: \");\n+        System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n+        System.out.println(\"       task: \" + taskExecTO.getTask());\n+        System.out.println(\"       message: \");\n+        System.out.println(\"       ###############     <BEGIN MESSAGE>     ###############\");\n+        System.out.println(\"       message: \" + taskExecTO.getMessage());\n+        System.out.println(\"       ###############     <END   MESSAGE>     ###############\");\n+        System.out.println(\"       status: \" + taskExecTO.getStatus());\n+        System.out.println(\"       start date: \" + taskExecTO.getStartDate());\n+        System.out.println(\"       end date: \" + taskExecTO.getEndDate());\n+        System.out.println(\"\");\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST_TASK(\"--list-task\"),\n+        LIST_RUNNING_JOBS(\"--list-running-jobs\"),\n+        LIST_SCHEDULED_JOBS(\"--list-scheduled-jobs\"),\n+        READ(\"--read\"),\n+        READ_EXECUTION(\"--read-execution\"),\n+        DELETE(\"--delete\"),\n+        DELETE_EXECUTION(\"--delete-execution\"),\n+        EXECUTE(\"--execute\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"e2cb15907b90e500458cd4c5c03a3497d27ea259","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Messages.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -26,6 +26,16 @@ public final class Messages {\n \n     private static final String DOESNT_EXIST_MESSAGE_TEMPLATE = \"%s %s doesn't exist\";\n \n+    private static final String TYPE_NOT_VALID_MESSAGE_TEMPLATE = \"%s isn't a valid %s type, try with: %s\";\n+\n+    private static final String ID_NOT_NUMBER_MESSAGE_TEMPLATE = \"Error reading %s. It isn't a valid %s \"\n+            + \"id because it isn't a long value\";\n+\n+    private static final String NOT_BOOLEAN_MESSAGE_TEMPLATE = \"Error reading %s. It isn't a valid %s \"\n+            + \"value because it isn't a boolean value\";\n+\n+    private static final String DEFAULT_MESSAGE_TEMPLATE = \"%s is not a valid option. \\n\\b %s\";\n+\n     public static void printCommandOptionMessage(final String message) {\n         System.out.println(String.format(OPTION_COMMAND_MESSAGE_TEMPLATE, message));\n     }\n@@ -46,6 +56,26 @@ public static void printDeletedMessage(final String what, final String key) {\n         printMessage(String.format(DELETED_MESSAGE_TEMPLATE, what, key));\n     }\n \n+    public static void printIdNotNumberDeletedMessage(final String what, final String key) {\n+        printMessage(String.format(ID_NOT_NUMBER_MESSAGE_TEMPLATE, key, what));\n+    }\n+    \n+    public static void printNotBooleanDeletedMessage(final String what, final String key) {\n+        printMessage(String.format(NOT_BOOLEAN_MESSAGE_TEMPLATE, key, what));\n+    }\n+\n+    public static void printTypeNotValidMessage(final String what, final String key, final String[] types) {\n+        final StringBuilder typesBuilder = new StringBuilder();\n+        for (final String type : types) {\n+            typesBuilder.append(\"\\n     *** \").append(type);\n+        }\n+        printMessage(String.format(TYPE_NOT_VALID_MESSAGE_TEMPLATE, key, what, typesBuilder.toString()));\n+    }\n+\n+    public static void printDefaultMessage(final String option, final String helpMessage) {\n+        printMessage(String.format(DEFAULT_MESSAGE_TEMPLATE, option, helpMessage));\n+    }\n+\n     private Messages() {\n \n     }"},{"sha":"a60a5af2a8d45f2fe476d37628c601de5f7f5911","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a99db9ce64bd9461fad9e1ac89bed7830b957dc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=2a99db9ce64bd9461fad9e1ac89bed7830b957dc","patch":"@@ -29,7 +29,7 @@ public enum TaskType {\n     SYNCHRONIZATION(\"sync\"),\n     PUSH(\"push\");\n \n-    private String name;\n+    private final String name;\n \n     private TaskType(final String name) {\n         this.name = name;"}]}