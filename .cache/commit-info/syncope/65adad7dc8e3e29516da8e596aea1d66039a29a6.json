{"sha":"65adad7dc8e3e29516da8e596aea1d66039a29a6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY1YWRhZDdkYzhlM2UyOTUxNmRhOGU1OTZhZWExZDY2MDM5YTI5YTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T16:47:29Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T16:47:29Z"},"message":"[SYNCOPE-620] common-rest-api","tree":{"sha":"9520b986a6b79f35a9612c603166921c7f326bb7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9520b986a6b79f35a9612c603166921c7f326bb7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/65adad7dc8e3e29516da8e596aea1d66039a29a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65adad7dc8e3e29516da8e596aea1d66039a29a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/65adad7dc8e3e29516da8e596aea1d66039a29a6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65adad7dc8e3e29516da8e596aea1d66039a29a6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7fea5778f4235fe41c8a8f9aa6b790366d26d070","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fea5778f4235fe41c8a8f9aa6b790366d26d070","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7fea5778f4235fe41c8a8f9aa6b790366d26d070"}],"stats":{"total":2962,"additions":2962,"deletions":0},"files":[{"sha":"e171dad2fd85493bda1cd9f736e0b53957a0bc0a","filename":"syncope620/common/lib/pom.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fpom.xml?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -62,5 +62,16 @@ under the License.\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-api</artifactId>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n </project>"},{"sha":"fd4d0b79ec0a3f5632f12d60b89f091db74940a3","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnIdObjectClassTO.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+/**\n+ * Mimic ConnId's ObjectClass information.\n+ */\n+@XmlRootElement(name = \"connIdObjectClass\")\n+@XmlType\n+public class ConnIdObjectClassTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5802458031138859994L;\n+\n+    @XmlEnum\n+    public enum DefaultType {\n+\n+        ACCOUNT(\"__ACCOUNT__\"),\n+        GROUP(\"__GROUP__\");\n+\n+        private String specialName;\n+\n+        private DefaultType(final String specialName) {\n+            this.specialName = specialName;\n+        }\n+\n+        public String getSpecialName() {\n+            return specialName;\n+        }\n+    }\n+\n+    public static ConnIdObjectClassTO ACCOUNT = new ConnIdObjectClassTO(DefaultType.ACCOUNT.getSpecialName());\n+\n+    public static ConnIdObjectClassTO GROUP = new ConnIdObjectClassTO(DefaultType.GROUP.getSpecialName());\n+\n+    private String type;\n+\n+    public ConnIdObjectClassTO() {\n+    }\n+\n+    public ConnIdObjectClassTO(final String type) {\n+        this.type = type;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"7693ca3c2c1961bd23edde5811621f377225bef1","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceAssociationActionType.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationActionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationActionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceAssociationActionType.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ResourceAssociationActionType {\n+\n+    /**\n+     * Add association between user/role on Syncope and external resource(s) without any propagation.\n+     */\n+    LINK,\n+    /**\n+     * Add user/role into external resource(s).\n+     */\n+    PROVISION,\n+    /**\n+     * Assign (link + provision) external resource(s) with user/role.\n+     */\n+    ASSIGN\n+\n+}"},{"sha":"c88f4532787900e9412417647f8fe547b2eb2603","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceDeassociationActionType.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationActionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationActionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationActionType.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ResourceDeassociationActionType {\n+\n+    /**\n+     * Remove association between user/role on Syncope and external resource(s) without any propagation.\n+     */\n+    UNLINK,\n+    /**\n+     * Remove user/role from external resource(s).\n+     */\n+    DEPROVISION,\n+    /**\n+     * Unassign (unlink + de-provision) external resource(s) from user/role.\n+     */\n+    UNASSIGN\n+\n+}"},{"sha":"008c226d32793516aec746070629ec3e6a6f2625","filename":"syncope620/common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.junit.Test;\n+\n+public class JSONTest {\n+\n+    @Test\n+    public void map() throws IOException {\n+        WorkflowFormPropertyTO prop = new WorkflowFormPropertyTO();\n+        prop.getEnumValues().put(\"key1\", \"value1\");\n+        prop.getEnumValues().put(\"key2\", \"value2\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, prop);\n+\n+        WorkflowFormPropertyTO unserializedProp = mapper.readValue(writer.toString(), WorkflowFormPropertyTO.class);\n+        assertEquals(prop, unserializedProp);\n+    }\n+\n+    @Test\n+    public void reportletConfImplementations() throws IOException {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForCreate\");\n+        report.getReportletConfs().add(new UserReportletConf(\"first\"));\n+        report.getReportletConfs().add(new UserReportletConf(\"second\"));\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, report);\n+\n+        ReportTO actual = mapper.readValue(writer.toString(), ReportTO.class);\n+        assertEquals(report, actual);\n+    }\n+}"},{"sha":"a137eb5e2a7a4e881d8f02ac2ec902311fd2446d","filename":"syncope620/common/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Fpom.xml?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -35,6 +35,7 @@ under the License.\n \n   <modules>\n     <module>lib</module>\n+    <module>rest-api</module>\n   </modules>\n \n </project>"},{"sha":"432aa9e855bd70bed62ed73507b6e29a7609862b","filename":"syncope620/common/rest-api/pom.xml","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fpom.xml?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-common</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Common REST API</name>\n+  <description>Apache Syncope Common REST API</description>\n+  <groupId>org.apache.syncope.common</groupId>\n+  <artifactId>syncope-common-rest-api</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.validation</groupId>\n+      <artifactId>validation-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>javax.ws.rs-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-extension-search</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-service-description</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+</project>"},{"sha":"c76a5c6b3a6926c2487a108b3ea1c82089182f14","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ConfigurationService.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConfigurationService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.lib.wrap.MailTemplate;\n+import org.apache.syncope.common.lib.wrap.Validator;\n+\n+/**\n+ * REST operations for configuration.\n+ */\n+@Path(\"configurations\")\n+public interface ConfigurationService extends JAXRSService {\n+\n+    /**\n+     * Exports internal storage content as downloadable XML file.\n+     *\n+     * @return internal storage content as downloadable XML file\n+     */\n+    @GET\n+    @Path(\"stream\")\n+    Response export();\n+\n+    /**\n+     * Returns a list of known mail-template names.\n+     *\n+     * @return a list of known mail-template names\n+     */\n+    @GET\n+    @Path(\"mailTemplates\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<MailTemplate> getMailTemplates();\n+\n+    /**\n+     * Returns a list of known validator names.\n+     *\n+     * @return a list of known validator names\n+     */\n+    @GET\n+    @Path(\"validators\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<Validator> getValidators();\n+\n+    /**\n+     * Returns all configuration parameters.\n+     *\n+     * @return all configuration parameters\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConfTO list();\n+\n+    /**\n+     * Returns configuration parameter with matching key.\n+     *\n+     * @param key identifier of configuration to be read\n+     * @return configuration parameter with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    AttrTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates / updates the configuration parameter with the given key.\n+     *\n+     * @param key parameter key\n+     * @param value parameter value\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void set(@NotNull @PathParam(\"key\") String key, @NotNull AttrTO value);\n+\n+    /**\n+     * Deletes the configuration parameter with matching key.\n+     *\n+     * @param key configuration parameter key\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"793a2cf5c046fe46cdb2c914e7fa215dff7c6885","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ConnectorService.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FConnectorService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+\n+/**\n+ * REST operations for connector bundles and instances.\n+ */\n+@Path(\"connectors\")\n+public interface ConnectorService extends JAXRSService {\n+\n+    /**\n+     * Returns available connector bundles with property keys in selected language.\n+     *\n+     * @param lang language to select property keys; default language is English\n+     * @return available connector bundles with property keys in selected language\n+     */\n+    @GET\n+    @Path(\"bundles\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n+\n+    /**\n+     * Returns configuration for given connector instance.\n+     *\n+     * @param connInstanceId connector instance id to read configuration from\n+     * @return configuration for given connector instance\n+     */\n+    @GET\n+    @Path(\"{connInstanceId}/configuration\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * Returns schema names for connector bundle matching the given connector instance id.\n+     *\n+     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceTO connector instance object to provide special configuration properties\n+     * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\n+     * default is false\n+     * @return schema names for connector bundle matching the given connector instance id\n+     */\n+    @POST\n+    @Path(\"{connInstanceId}/schemaNames\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<PlainSchemaTO> getSchemaNames(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+            @NotNull ConnInstanceTO connInstanceTO,\n+            @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n+\n+    /**\n+     * Returns supported object classes for connector bundle matching the given connector instance id.\n+     *\n+     * @param connInstanceId connector instance id to be used for schema lookup\n+     * @param connInstanceTO connector instance object to provide special configuration properties\n+     * @return supported object classes for connector bundle matching the given connector instance id\n+     */\n+    @POST\n+    @Path(\"{connInstanceId}/supportedObjectClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnIdObjectClassTO> getSupportedObjectClasses(\n+            @NotNull @PathParam(\"connInstanceId\") Long connInstanceId,\n+            @NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Returns connector instance with matching id.\n+     *\n+     * @param connInstanceId connector instance id to be read\n+     * @return connector instance with matching id\n+     */\n+    @GET\n+    @Path(\"{connInstanceId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnInstanceTO read(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * Returns connector instance for matching resource.\n+     *\n+     * @param resourceName resource name to be used for connector lookup\n+     * @return connector instance for matching resource\n+     */\n+    @GET\n+    @Path(\"byResource/{resourceName}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnInstanceTO readByResource(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Returns a list of all connector instances with property keys in the matching language.\n+     *\n+     * @param lang language to select property keys, null for default (English).\n+     * An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.\n+     * @return list of all connector instances with property keys in the matching language\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\n+\n+    /**\n+     * Creates a new connector instance.\n+     *\n+     * @param connInstanceTO connector instance to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created connector instance\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created connector instance\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Updates the connector instance matching the provided id.\n+     *\n+     * @param connInstanceId connector instance id to be updated\n+     * @param connInstanceTO connector instance to be stored\n+     */\n+    @PUT\n+    @Path(\"{connInstanceId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId, @NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Deletes the connector instance matching the provided id.\n+     *\n+     * @param connInstanceId connector instance id to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{connInstanceId}\")\n+    void delete(@NotNull @PathParam(\"connInstanceId\") Long connInstanceId);\n+\n+    /**\n+     * @param connInstanceTO connector instance to be used for connection check\n+     * @return true if connection could be established\n+     */\n+    @POST\n+    @Path(\"check\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    boolean check(@NotNull ConnInstanceTO connInstanceTO);\n+\n+    /**\n+     * Reload all connector bundles and instances.\n+     */\n+    @POST\n+    @Path(\"reload\")\n+    void reload();\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of connector instance ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"220980ae7d497a474a2fc4a04dadb4ca4fbf0fec","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/EntitlementService.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FEntitlementService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.wrap.EntitlementTO;\n+\n+/**\n+ * REST operations for entitlements.\n+ */\n+@Path(\"entitlements\")\n+public interface EntitlementService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all known entitlements.\n+     *\n+     * @return list of all known entitlements\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EntitlementTO> getAllEntitlements();\n+\n+    /**\n+     * Returns a list of entitlements assigned to user making the current request.\n+     *\n+     * @return list of entitlements assigned to user making the current request\n+     */\n+    @GET\n+    @Path(\"own\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EntitlementTO> getOwnEntitlements();\n+}"},{"sha":"417058401d5515ef6373cfa1af416621903fd3d3","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/JAXRSService.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FJAXRSService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+public interface JAXRSService {\n+\n+    final String PARAM_FIQL = \"fiql\";\n+\n+    final String PARAM_PAGE = \"page\";\n+\n+    final String DEFAULT_PARAM_PAGE = \"1\";\n+\n+    final int DEFAULT_PARAM_PAGE_VALUE = Integer.valueOf(DEFAULT_PARAM_PAGE);\n+\n+    final String PARAM_SIZE = \"size\";\n+\n+    final String DEFAULT_PARAM_SIZE = \"25\";\n+\n+    final int DEFAULT_PARAM_SIZE_VALUE = Integer.valueOf(DEFAULT_PARAM_SIZE);\n+\n+    final String PARAM_ORDERBY = \"orderby\";\n+\n+}"},{"sha":"cfe3a32cb35ad4c213c5577b0ea4c43145b2d2fc","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/LoggerService.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+/**\n+ * REST operations for logging and auditing.\n+ */\n+@Path(\"logger\")\n+public interface LoggerService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all managed events in audit.\n+     *\n+     * @return list of all managed events in audit\n+     */\n+    @GET\n+    @Path(\"events\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<EventCategoryTO> events();\n+\n+    /**\n+     * Returns logger with matching type and name.\n+     *\n+     * @param type LoggerType to be selected.\n+     * @param name Logger name to be read\n+     * @return logger with matching type and name\n+     */\n+    @GET\n+    @Path(\"{type}/{name}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") final String name);\n+\n+    /**\n+     * Returns a list of loggers with matching type.\n+     *\n+     * @param type LoggerType to be selected\n+     * @return list of loggers with matching type\n+     */\n+    @GET\n+    @Path(\"{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);\n+\n+    /**\n+     * Creates or updates (if existing) the logger with matching name.\n+     *\n+     * @param type LoggerType to be selected\n+     * @param name Logger name to be updated\n+     * @param logger Logger to be created or updated\n+     */\n+    @PUT\n+    @Path(\"{type}/{name}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name,\n+            @NotNull LoggerTO logger);\n+\n+    /**\n+     * Deletes the logger with matching name.\n+     *\n+     * @param type LoggerType to be selected\n+     * @param name Logger name to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{type}/{name}\")\n+    void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n+\n+}"},{"sha":"348f25b169017604b5acae8890be1b6b92f13d72","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/NotificationService.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FNotificationService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+\n+/**\n+ * REST operations for notifications.\n+ */\n+@Path(\"notifications\")\n+public interface NotificationService extends JAXRSService {\n+\n+    /**\n+     * Returns notification with matching id.\n+     *\n+     * @param notificationId id of notification to be read\n+     * @return notification with matching id\n+     */\n+    @GET\n+    @Path(\"{notificationId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    NotificationTO read(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+\n+    /**\n+     * Returns a list of all notifications.\n+     *\n+     * @return list of all notifications.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<NotificationTO> list();\n+\n+    /**\n+     * Creates a new notification.\n+     *\n+     * @param notificationTO Creates a new notification.\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created notification\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created notification\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull NotificationTO notificationTO);\n+\n+    /**\n+     * Updates the notification matching the given id.\n+     *\n+     * @param notificationId id of notification to be updated\n+     * @param notificationTO notification to be stored\n+     */\n+    @PUT\n+    @Path(\"{notificationId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"notificationId\") Long notificationId, @NotNull NotificationTO notificationTO);\n+\n+    /**\n+     * Deletes the notification matching the given id.\n+     *\n+     * @param notificationId id for notification to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{notificationId}\")\n+    void delete(@NotNull @PathParam(\"notificationId\") Long notificationId);\n+}"},{"sha":"18cfe29f5c66dc9931593c8149487e50af18b5fd","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/PolicyService.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPolicyService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.wrap.CorrelationRuleClass;\n+\n+/**\n+ * REST operations for policies.\n+ */\n+@Path(\"policies\")\n+public interface PolicyService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of classes to be used as correlation rules.\n+     *\n+     * @return list of classes to be used as correlation rules\n+     */\n+    @GET\n+    @Path(\"syncCorrelationRuleClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<CorrelationRuleClass> getSyncCorrelationRuleClasses();\n+\n+    /**\n+     * Returns the policy matching the given id.\n+     *\n+     * @param policyId id of requested policy\n+     * @param <T> response type (extending PolicyTO)\n+     * @return policy with matching id\n+     */\n+    @GET\n+    @Path(\"{policyId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyId\") Long policyId);\n+\n+    /**\n+     * Returns the global policy for the given type.\n+     *\n+     * @param type PolicyType to read global policy from\n+     * @param <T> response type (extending PolicyTO)\n+     * @return global policy for matching type\n+     */\n+    @GET\n+    @Path(\"global\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> T readGlobal(@NotNull @MatrixParam(\"type\") PolicyType type);\n+\n+    /**\n+     * Returns a list of policies of the matching type.\n+     *\n+     * @param type Type selector for requested policies\n+     * @param <T> response type (extending PolicyTO)\n+     * @return list of policies with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\n+\n+    /**\n+     * Create a new policy.\n+     *\n+     * @param policyTO Policy to be created (needs to match type)\n+     * @param <T> response type (extending PolicyTO)\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created policy\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created policy\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> Response create(@NotNull T policyTO);\n+\n+    /**\n+     * Updates policy matching the given id.\n+     *\n+     * @param policyId id of policy to be updated\n+     * @param policyTO Policy to replace existing policy\n+     * @param <T> response type (extending PolicyTO)\n+     */\n+    @PUT\n+    @Path(\"{policyId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractPolicyTO> void update(@NotNull @PathParam(\"policyId\") Long policyId, @NotNull T policyTO);\n+\n+    /**\n+     * Delete policy matching the given id.\n+     *\n+     * @param policyId id of policy to be deleted\n+     * @param <T> response type (extending PolicyTO)\n+     */\n+    @DELETE\n+    @Path(\"{policyId}\")\n+    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"policyId\") Long policyId);\n+\n+}"},{"sha":"715270b9a2ba1c98924cf9143ec1537cd06c287e","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+/**\n+ * Custom HTTP headers in use with REST services.\n+ */\n+public final class RESTHeaders {\n+\n+    /**\n+     * UserId option key.\n+     */\n+    public static final String USER_ID = \"Syncope.UserId\";\n+\n+    /**\n+     * Username option key.\n+     */\n+    public static final String USERNAME = \"Syncope.Username\";\n+\n+    /**\n+     * Option key stating if user request create is allowed or not.\n+     */\n+    public static final String SELFREG_ALLOWED = \"Syncope.SelfRegistration.Allowed\";\n+\n+    /**\n+     * Option key stating if password reset is allowed or not.\n+     */\n+    public static final String PWDRESET_ALLOWED = \"Syncope.PasswordReset.Allowed\";\n+\n+    /**\n+     * Option key stating if password reset requires security question or not.\n+     */\n+    public static final String PWDRESET_NEEDS_SECURITYQUESTIONS = \"Syncope.PasswordReset.SecurityQuestions\";\n+\n+    /**\n+     * Option key stating if Activiti workflow adapter is in use for users.\n+     */\n+    public static final String ACTIVITI_USER_ENABLED = \"Syncope.Activiti.User.Enabled\";\n+\n+    /**\n+     * Option key stating if Activiti workflow adapter is in use for roles.\n+     */\n+    public static final String ACTIVITI_ROLE_ENABLED = \"Syncope.Activiti.Role.Enabled\";\n+    \n+     /**\n+     * Option key stating if Camel is the current provisioning manager engine.\n+     */\n+    public static final String CAMEL_USER_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.User.Enabled\";\n+    \n+    /**\n+     * Option key stating if Camel is the current provisioning manager engine.\n+     */\n+    public static final String CAMEL_ROLE_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.Role.Enabled\";\n+\n+\n+    /**\n+     * HTTP header key for object ID assigned to an object after its creation.\n+     */\n+    public static final String RESOURCE_ID = \"Syncope.Id\";\n+\n+    /**\n+     * Declares the type of exception being raised.\n+     *\n+     * @see ClientExceptionType\n+     */\n+    public static final String ERROR_CODE = \"X-Application-Error-Code\";\n+\n+    /**\n+     * Declares additional information for the exception being raised.\n+     */\n+    public static final String ERROR_INFO = \"X-Application-Error-Info\";\n+\n+    /**\n+     * Mediatype for PNG images, not defined in <tt>javax.ws.rs.core.MediaType</tt>.\n+     *\n+     * @see javax.ws.rs.core.MediaType\n+     */\n+    public static final String MEDIATYPE_IMAGE_PNG = \"image/png\";\n+\n+    /**\n+     * Allows the client to specify a preference for the result to be returned from the server.\n+     * <a href=\"http://msdn.microsoft.com/en-us/library/hh537533.aspx\">More information</a>.\n+     *\n+     * @see Preference\n+     */\n+    public static final String PREFER = \"Prefer\";\n+\n+    /**\n+     * Allowd the server to inform the client about the fact that a specified preference was applied.\n+     * <a href=\"http://msdn.microsoft.com/en-us/library/hh554623.aspx\">More information</a>.\n+     *\n+     * @see Preference\n+     */\n+    public static final String PREFERENCE_APPLIED = \"Preference-Applied\";\n+\n+    private RESTHeaders() {\n+        // Empty constructor for static utility class.\n+    }\n+}"},{"sha":"4911af74f8ddd9321bd441dbea13b5fa3707ac0d","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ReportService.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FReportService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n+\n+/**\n+ * REST operations for reports.\n+ */\n+@Path(\"reports\")\n+public interface ReportService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of available classes for reportlet configuration.\n+     *\n+     * @return list of available classes for reportlet configuration\n+     */\n+    @GET\n+    @Path(\"reportletConfClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportletConfClass> getReportletConfClasses();\n+\n+    /**\n+     * Returns report with matching id.\n+     *\n+     * @param reportId id of report to be read\n+     * @return report with matching id\n+     */\n+    @GET\n+    @Path(\"{reportId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportTO read(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Returns report execution with matching id.\n+     *\n+     * @param executionId report execution id to be selected\n+     * @return report execution with matching id\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Returns a paged list of all existing reports.\n+     *\n+     * @return paged list of all existing reports\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list();\n+\n+    /**\n+     * Returns a paged list of all existing reports.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of all existing reports\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of all existing reports matching page/size conditions.\n+     *\n+     * @param page selected page in relation to size\n+     * @param size number of entries per page\n+     * @return paged list of existing reports matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of all existing reports matching page/size conditions.\n+     *\n+     * @param page selected page in relation to size\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of existing reports matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<ReportTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Creates a new report.\n+     *\n+     * @param reportTO report to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created report\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created report\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ReportTO reportTO);\n+\n+    /**\n+     * Updates report with matching id.\n+     *\n+     * @param reportId id for report to be updated\n+     * @param reportTO report to be stored\n+     */\n+    @PUT\n+    @Path(\"{reportId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"reportId\") Long reportId, ReportTO reportTO);\n+\n+    /**\n+     * Deletes report with matching id.\n+     *\n+     * @param reportId Deletes report with matching id\n+     */\n+    @DELETE\n+    @Path(\"{reportId}\")\n+    void delete(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Deletes report execution with matching id.\n+     *\n+     * @param executionId id of execution report to be deleted\n+     */\n+    @DELETE\n+    @Path(\"executions/{executionId}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Executes the report with matching id.\n+     *\n+     * @param reportId id of report to be executed\n+     * @return report execution result\n+     */\n+    @POST\n+    @Path(\"{reportId}/execute\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ReportExecTO execute(@NotNull @PathParam(\"reportId\") Long reportId);\n+\n+    /**\n+     * Exports the report execution with matching id in the requested format.\n+     *\n+     * @param executionId id of execution report to be selected\n+     * @param fmt file-format selection\n+     * @return a stream for content download\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}/stream\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long executionId,\n+            @QueryParam(\"format\") ReportExecExportFormat fmt);\n+}"},{"sha":"6ddd3af84e4d904b2e939925eb379fac9716cd9d","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/ResourceService.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FResourceService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.wrap.PropagationActionClass;\n+import org.apache.syncope.common.lib.wrap.SubjectId;\n+\n+/**\n+ * REST operations for external resources.\n+ */\n+@Path(\"resources\")\n+public interface ResourceService extends JAXRSService {\n+\n+    /**\n+     * Returns connector object from the external resource, for the given type and id.\n+     *\n+     * @param resourceName Name of resource to read connector object from\n+     * @param type user / role\n+     * @param id user id / role id\n+     * @return connector object from the external resource, for the given type and id\n+     */\n+    @GET\n+    @Path(\"{resourceName}/{type}/{id}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ConnObjectTO getConnectorObject(@NotNull @PathParam(\"resourceName\") String resourceName,\n+            @NotNull @PathParam(\"type\") SubjectType type, @NotNull @PathParam(\"id\") Long id);\n+\n+    /**\n+     * Returns a list of classes that can be used to customize the propagation process.\n+     *\n+     * @return list of classes that can be used to customize the propagation process\n+     */\n+    @GET\n+    @Path(\"propagationActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<PropagationActionClass> getPropagationActionsClasses();\n+\n+    /**\n+     * Returns the resource with matching name.\n+     *\n+     * @param resourceName Name of resource to be read\n+     * @return resource with matching name\n+     */\n+    @GET\n+    @Path(\"{resourceName}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    ResourceTO read(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Returns a list of all resources.\n+     *\n+     * @return list of all resources\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ResourceTO> list();\n+\n+    /**\n+     * Returns a list of resources using matching connector instance id.\n+     *\n+     * @param connInstanceId Connector id to filter for resources\n+     * @return resources using matching connector instance id\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ResourceTO> list(@NotNull @MatrixParam(\"connectorId\") Long connInstanceId);\n+\n+    /**\n+     * Creates a new resource.\n+     *\n+     * @param resourceTO Resource to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created resource\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created resource\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * Updates the resource matching the given name.\n+     *\n+     * @param resourceName name of resource to be updated\n+     * @param resourceTO resource to be stored\n+     */\n+    @PUT\n+    @Path(\"{resourceName}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"resourceName\") String resourceName, @NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * Deletes the resource matching the given name.\n+     *\n+     * @param resourceName name of resource to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{resourceName}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void delete(@NotNull @PathParam(\"resourceName\") String resourceName);\n+\n+    /**\n+     * Checks wether the connection to resource could be established.\n+     *\n+     * @param resourceTO resource to be checked\n+     * @return true if connection to resource could be established\n+     */\n+    @POST\n+    @Path(\"check\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    boolean check(@NotNull ResourceTO resourceTO);\n+\n+    /**\n+     * De-associate users or roles (depending on the provided subject type) from the given resource.\n+     *\n+     * @param resourceName name of resource\n+     * @param subjectType subject type (user or role)\n+     * @param type resource de-association action type\n+     * @param subjectIds users or roles against which the bulk action will be performed\n+     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{resourceName}/bulkDeassociation/{subjType}/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"resourceName\") String resourceName,\n+            @NotNull @PathParam(\"subjType\") SubjectType subjectType,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<SubjectId> subjectIds);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of resource names against which the bulk action will be performed\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"669264893462527db7be50ef5b9f195a23940b5f","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RoleService.java","status":"added","additions":313,"deletions":0,"changes":313,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRoleService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,313 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+\n+/**\n+ * REST operations for roles.\n+ */\n+@Path(\"roles\")\n+public interface RoleService extends JAXRSService {\n+\n+    /**\n+     * Returns children roles of given role.\n+     *\n+     * @param roleId id of role to get children from\n+     * @return children roles of given role\n+     */\n+    @GET\n+    @Path(\"{roleId}/children\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RoleTO> children(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Returns parent role of the given role (or null if no parent exists).\n+     *\n+     * @param roleId id of role to get parent role from\n+     * @return parent role of the given role (or null if no parent exists)\n+     */\n+    @GET\n+    @Path(\"{roleId}/parent\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO parent(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Reads the role matching the provided roleId.\n+     *\n+     * @param roleId id of role to be read\n+     * @return role with matching id\n+     */\n+    @GET\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO read(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\n+     * can read his own roles.\n+     *\n+     * @param roleId id of role to be read\n+     * @return role with matching id\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD,\n+                value = \"This method is similar to <tt>read()</tt>, but uses different authentication handling to \"\n+                + \"ensure that a user can read his own roles.\")\n+    })\n+    @GET\n+    @Path(\"{roleId}/own\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    RoleTO readSelf(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Returns a paged list of existing roles.\n+     *\n+     * @return paged list of all existing roles\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list();\n+\n+    /**\n+     * Returns a paged list of existing roles.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of all existing roles\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing roles matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of existing roles matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of existing roles matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of existing roles matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of roles matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of roles matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Creates a new role.\n+     *\n+     * @param roleTO role to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role as well as the role itself\n+     * enriched with propagation status information - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created role as well as the \"\n+                + \"role itself enriched with propagation status information - <tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull RoleTO roleTO);\n+\n+    /**\n+     * Updates role matching the provided roleId.\n+     *\n+     * @param roleId id of role to be updated\n+     * @param roleMod modification to be applied to role matching the provided roleId\n+     * @return <tt>Response</tt> object featuring the updated role enriched with propagation status information\n+     * - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the updated role enriched with propagation status information - \"\n+                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull @PathParam(\"roleId\") Long roleId, @NotNull RoleMod roleMod);\n+\n+    /**\n+     * Deletes role matching provided roleId.\n+     *\n+     * @param roleId id of role to be deleted\n+     * @return <tt>Response</tt> object featuring the deleted role enriched with propagation status information\n+     * - {@link RoleTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the deleted role enriched with propagation status information - \"\n+                + \"<tt>RoleTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @DELETE\n+    @Path(\"{roleId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response delete(@NotNull @PathParam(\"roleId\") Long roleId);\n+\n+    /**\n+     * Executes resource-related operations on given role.\n+     *\n+     * @param roleId role id.\n+     * @param type resource association action type\n+     * @param resourceNames external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring\n+     * {@link org.apache.syncope.common.reqres.BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}/deassociate/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkDeassociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n+            @NotNull List<ResourceName> resourceNames);\n+\n+    /**\n+     * Executes resource-related operations on given role.\n+     *\n+     * @param roleId role id.\n+     * @param type resource association action type\n+     * @param resourceNames external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring {@link org.apache.syncope.common.reqres.BulkActionResult}\n+     * as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{roleId}/associate/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkAssociation(@NotNull @PathParam(\"roleId\") Long roleId,\n+            @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n+            @NotNull List<ResourceName> resourceNames);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of role ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"84ac9d68a7c46ff932c29e4338ab9abe9b72d0f0","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/SchemaService.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSchemaService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+/**\n+ * REST operations for attribute schemas.\n+ */\n+@Path(\"schemas/{kind}/{type}\")\n+public interface SchemaService extends JAXRSService {\n+\n+    /**\n+     * Returns schema matching the given kind, type and name.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be read\n+     * @param schemaType type for schemas to be read\n+     * @param schemaName name of schema to be read\n+     * @return schema matching the given kind, type and name\n+     */\n+    @GET\n+    @Path(\"{name}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> T read(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull @PathParam(\"name\") String schemaName);\n+\n+    /**\n+     * Returns a list of schemas with matching kind and type.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be listed\n+     * @param schemaType type for schemas to be listed\n+     * @return list of schemas with matching kind and type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> List<T> list(\n+            @NotNull @PathParam(\"kind\") AttributableType attrType, @NotNull @PathParam(\"type\") SchemaType schemaType);\n+\n+    /**\n+     * Creates a new schema.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schema to be created\n+     * @param schemaType type for schema to be created\n+     * @param schemaTO schema to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created schema\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created schema\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType, @NotNull T schemaTO);\n+\n+    /**\n+     * Updates the schema matching the given kind, type and name.\n+     *\n+     * @param <T> actual SchemaTO\n+     * @param attrType kind for schemas to be updated\n+     * @param schemaType type for schemas to be updated\n+     * @param schemaName name of schema to be updated\n+     * @param schemaTO updated schema to be stored\n+     */\n+    @PUT\n+    @Path(\"{name}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+            @NotNull @PathParam(\"name\") String schemaName, @NotNull T schemaTO);\n+\n+    /**\n+     * Deletes the schema matching the given kind, type and name.\n+     *\n+     * @param attrType kind for schema to be deleted\n+     * @param schemaType type for schema to be deleted\n+     * @param schemaName name of schema to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{name}\")\n+    void delete(@NotNull @PathParam(\"kind\") AttributableType attrType,\n+            @NotNull @PathParam(\"type\") SchemaType schemaType,\n+            @NotNull @PathParam(\"name\") String schemaName);\n+}"},{"sha":"b52fbcf6c1beab2f6833a1bba050f52a8e38dd71","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/SecurityQuestionService.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSecurityQuestionService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSecurityQuestionService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FSecurityQuestionService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+\n+/**\n+ * REST operations for configuration.\n+ */\n+@Path(\"securityQuestions\")\n+public interface SecurityQuestionService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all security questions.\n+     *\n+     * @return list of all security questions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<SecurityQuestionTO> list();\n+\n+    /**\n+     * Returns security question with matching id.\n+     *\n+     * @param securityQuestionId security question id to be read\n+     * @return security question with matching id\n+     */\n+    @GET\n+    @Path(\"{securityQuestionId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    SecurityQuestionTO read(@NotNull @PathParam(\"securityQuestionId\") Long securityQuestionId);\n+\n+    /**\n+     * Creates a new security question.\n+     *\n+     * @param securityQuestionTO security question to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created security question\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created security question\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull SecurityQuestionTO securityQuestionTO);\n+\n+    /**\n+     * Updates the security question matching the provided id.\n+     *\n+     * @param securityQuestionId security question id to be updated\n+     * @param securityQuestionTO security question to be stored\n+     */\n+    @PUT\n+    @Path(\"{securityQuestionId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"securityQuestionId\") Long securityQuestionId,\n+            @NotNull SecurityQuestionTO securityQuestionTO);\n+\n+    /**\n+     * Deletes the security question matching the provided id.\n+     *\n+     * @param securityQuestionId security question id to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{securityQuestionId}\")\n+    void delete(@NotNull @PathParam(\"securityQuestionId\") Long securityQuestionId);\n+\n+    /**\n+     * Ask for security question configured for the user matching the given username, if any.\n+     *\n+     * @param username username for which the security question is requested\n+     * @return security question, if configured for the user matching the given username\n+     */\n+    @GET\n+    @Path(\"byUser/{username}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    SecurityQuestionTO readByUser(@NotNull @PathParam(\"username\") String username);\n+}"},{"sha":"7ca24e5e2be0be2fff6730e836cb2072b40bd512","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/TaskService.java","status":"added","additions":245,"deletions":0,"changes":245,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FTaskService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.wrap.JobClass;\n+import org.apache.syncope.common.lib.wrap.PushActionClass;\n+import org.apache.syncope.common.lib.wrap.SyncActionClass;\n+\n+/**\n+ * REST operations for tasks.\n+ */\n+@Path(\"tasks\")\n+public interface TaskService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of classes to be used for jobs.\n+     *\n+     * @return list of classes to be used for jobs\n+     */\n+    @GET\n+    @Path(\"jobClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<JobClass> getJobClasses();\n+\n+    /**\n+     * Returns a list of classes to be used as synchronization actions.\n+     *\n+     * @return list of classes to be used as synchronization actions\n+     */\n+    @GET\n+    @Path(\"syncActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<SyncActionClass> getSyncActionsClasses();\n+\n+    /**\n+     * Returns a list of classes to be used as push actions.\n+     *\n+     * @return list of classes to be used as push actions\n+     */\n+    @GET\n+    @Path(\"pushActionsClasses\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<PushActionClass> getPushActionsClasses();\n+\n+    /**\n+     * Returns the task matching the given id.\n+     *\n+     * @param taskId id of task to be read\n+     * @param <T> type of taskTO\n+     * @return task with matching id\n+     */\n+    @GET\n+    @Path(\"{taskId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"taskId\") Long taskId);\n+\n+    /**\n+     * Returns the task execution with the given id.\n+     *\n+     * @param executionId id of task execution to be read\n+     * @return task execution with matching Id\n+     */\n+    @GET\n+    @Path(\"executions/{executionId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    TaskExecTO readExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Returns a list of tasks with matching type.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param <T> type of taskTO\n+     * @return list of tasks with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType);\n+\n+    /**\n+     * Returns a list of tasks with matching type.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @param <T> type of taskTO\n+     * @return list of tasks with matching type\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing tasks matching type and page/size conditions.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param page page number of tasks in relation to page size\n+     * @param size number of tasks listed per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @param <T> type of taskTO\n+     * @return paged list of existing tasks matching type and page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@NotNull @MatrixParam(\"type\") TaskType taskType,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing tasks matching type and page/size conditions.\n+     *\n+     * @param taskType type of tasks to be listed\n+     * @param page page number of tasks in relation to page size\n+     * @param size number of tasks listed per page\n+     * @param <T> type of taskTO\n+     * @return paged list of existing tasks matching type and page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Creates a new task.\n+     *\n+     * @param taskTO task to be created\n+     * @param <T> type of taskTO\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created task\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>Location</tt> header of created task\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    <T extends SchedTaskTO> Response create(@NotNull T taskTO);\n+\n+    /**\n+     * Updates the task matching the provided id.\n+     *\n+     * @param taskId id of task to be updated\n+     * @param taskTO updated task to be stored\n+     */\n+    @PUT\n+    @Path(\"{taskId}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"taskId\") Long taskId, @NotNull AbstractTaskTO taskTO);\n+\n+    /**\n+     * Deletes the task matching the provided id.\n+     *\n+     * @param taskId id of task to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{taskId}\")\n+    void delete(@NotNull @PathParam(\"taskId\") Long taskId);\n+\n+    /**\n+     * Deletes the task execution matching the provided id.\n+     *\n+     * @param executionId id of task execution to be deleted\n+     */\n+    @DELETE\n+    @Path(\"executions/{executionId}\")\n+    void deleteExecution(@NotNull @PathParam(\"executionId\") Long executionId);\n+\n+    /**\n+     * Executes the task matching the given id.\n+     *\n+     * @param taskId id of task to be executed\n+     * @param dryRun if true, task will only be simulated\n+     * @return execution report for the task matching the given id\n+     */\n+    @POST\n+    @Path(\"{taskId}/execute\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\n+            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\n+\n+    /**\n+     * Reports task execution result.\n+     *\n+     * @param executionId id of task execution being reported\n+     * @param reportExec execution being reported\n+     */\n+    @POST\n+    @Path(\"executions/{executionId}/report\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void report(@NotNull @PathParam(\"executionId\") Long executionId, @NotNull ReportExecTO reportExec);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of task ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"bfb95615674de5ba3c8eb26a180bb9fc9ebcbc74","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserSelfService.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserSelfService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.UserTO;\n+\n+/**\n+ * REST operations for user self-management.\n+ */\n+@Path(\"users/self\")\n+public interface UserSelfService extends JAXRSService {\n+\n+    /**\n+     * Checks whether self-registration is allowed.\n+     *\n+     * @return <tt>Response</tt> contains special Syncope HTTP header indicating if user self registration and / or\n+     * password reset is allowed\n+     * @see org.apache.syncope.common.types.RESTHeaders#SELFREG_ALLOWED\n+     * @see org.apache.syncope.common.types.RESTHeaders#PWDRESET_ALLOWED\n+     * @see org.apache.syncope.common.types.RESTHeaders#PWDRESET_NEEDS_SECURITYQUESTIONS\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Contains special Syncope HTTP header indicating if user self registration \"\n+                + \"and / or password reset is allowed\")\n+    })\n+    @OPTIONS\n+    Response getOptions();\n+\n+    /**\n+     * Returns the user making the service call.\n+     *\n+     * @return calling user data\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    UserTO read();\n+\n+    /**\n+     * Self-registration for new user.\n+     *\n+     * @param userTO user to be created\n+     * @param storePassword whether password shall be stored internally\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of self-registered user as well as the user\n+     * itself - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of self-registered user as well \"\n+                + \"as the user itself - {@link UserTO} as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull UserTO userTO,\n+            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n+\n+    /**\n+     * Self-updates user.\n+     *\n+     * @param userId id of user to be updated\n+     * @param userMod modification to be applied to user matching the provided userId\n+     * @return <tt>Response</tt> object featuring the updated user - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{userId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull @PathParam(\"userId\") Long userId, @NotNull UserMod userMod);\n+\n+    /**\n+     * Self-deletes user.\n+     *\n+     * @return <tt>Response</tt> object featuring the deleted user - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the deleted user - <tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @DELETE\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response delete();\n+\n+    /**\n+     * Provides answer for the security question configured for user matching the given username, if any.\n+     * If provided anwser matches the one stored for that user, a password reset token is internally generated,\n+     * otherwise an error is returned.\n+     *\n+     * @param username username for which the security answer is provided\n+     * @param securityAnswer actual answer text\n+     */\n+    @POST\n+    @Path(\"requestPasswordReset\")\n+    void requestPasswordReset(@NotNull @QueryParam(\"username\") String username, String securityAnswer);\n+\n+    /**\n+     * Reset the password value for the user matching the provided token, if available and still valid.\n+     * If the token actually matches one of users, and if it is still valid at the time of submission, the matching\n+     * user's password value is set as provided. The new password value will need anyway to comply with all relevant\n+     * password policies.\n+     *\n+     * @param token password reset token\n+     * @param password new password to be set\n+     */\n+    @POST\n+    @Path(\"confirmPasswordReset\")\n+    void confirmPasswordReset(@NotNull @QueryParam(\"token\") String token, String password);\n+}"},{"sha":"5e6279599a93ace1912a52cd218ac5bf37af3254","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserService.java","status":"added","additions":321,"deletions":0,"changes":321,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,321 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.wrap.ResourceName;\n+\n+/**\n+ * REST operations for users.\n+ */\n+@Path(\"users\")\n+public interface UserService extends JAXRSService {\n+\n+    /**\n+     * Gives the username for the provided user id.\n+     *\n+     * @param userId user id\n+     * @return <tt>Response</tt> object featuring HTTP header with username matching the given userId\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring HTTP header with username matching the given userId\")\n+    })\n+    @OPTIONS\n+    @Path(\"{userId}/username\")\n+    Response getUsername(@NotNull @PathParam(\"userId\") Long userId);\n+\n+    /**\n+     * Gives the user id for the provided username.\n+     *\n+     * @param username username\n+     * @return <tt>Response</tt> object featuring HTTP header with userId matching the given username\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring HTTP header with userId matching the given username\")\n+    })\n+    @OPTIONS\n+    @Path(\"{username}/userId\")\n+    Response getUserId(@NotNull @PathParam(\"username\") String username);\n+\n+    /**\n+     * Reads the user matching the provided userId.\n+     *\n+     * @param userId id of user to be read\n+     * @return User matching the provided userId\n+     */\n+    @GET\n+    @Path(\"{userId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    UserTO read(@NotNull @PathParam(\"userId\") Long userId);\n+\n+    /**\n+     * Returns a paged list of existing users.\n+     *\n+     * @return paged list of all existing users\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> list();\n+\n+    /**\n+     * Returns a paged list of existing users.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of all existing users\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing users matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of existing users matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of existing users matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of existing users matching page/size conditions\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> list(\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @return paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\n+\n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @return paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n+\n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+            @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n+            @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Creates a new user.\n+     *\n+     * @param userTO user to be created\n+     * @param storePassword whether password shall be stored internally\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created user as well as the user itself\n+     * enriched with propagation status information - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created user as well as the \"\n+                + \"user itself enriched with propagation status information - <tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull UserTO userTO,\n+            @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n+\n+    /**\n+     * Updates user matching the provided userId.\n+     *\n+     * @param userId id of user to be updated\n+     * @param userMod modification to be applied to user matching the provided userId\n+     * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n+     * - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the updated user enriched with propagation status information - \"\n+                + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{userId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull @PathParam(\"userId\") Long userId, @NotNull UserMod userMod);\n+\n+    /**\n+     * Performs a status update on user matching provided userId.\n+     *\n+     * @param userId id of user to be subjected to status update\n+     * @param statusMod status update details\n+     * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n+     * - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the updated user enriched with propagation status information - \"\n+                + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{userId}/status\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response status(@NotNull @PathParam(\"userId\") Long userId, @NotNull StatusMod statusMod);\n+\n+    /**\n+     * Deletes user matching provided userId.\n+     *\n+     * @param userId id of user to be deleted\n+     * @return <tt>Response</tt> object featuring the deleted user enriched with propagation status information\n+     * - {@link UserTO} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring the deleted user enriched with propagation status information - \"\n+                + \"<tt>UserTO</tt> as <tt>Entity</tt>\")\n+    })\n+    @DELETE\n+    @Path(\"{userId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response delete(@NotNull @PathParam(\"userId\") Long userId);\n+\n+    /**\n+     * Executes resource-related operations on given user.\n+     *\n+     * @param userId user id\n+     * @param type resource de-association action type\n+     * @param resourceNames external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{userId}/bulkDeassociation/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkDeassociation(@NotNull @PathParam(\"userId\") Long userId,\n+            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n+            @NotNull List<ResourceName> resourceNames);\n+\n+    /**\n+     * Executes resource-related operations on given user.\n+     *\n+     * @param userId user id.\n+     * @param type resource association action type\n+     * @param associationMod external resources to be used for propagation-related operations\n+     * @return <tt>Response</tt> object featuring {@link BulkActionResult} as <tt>Entity</tt>\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE, value = \"Featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\")\n+    })\n+    @POST\n+    @Path(\"{userId}/bulkAssociation/{type}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response bulkAssociation(@NotNull @PathParam(\"userId\") Long userId,\n+            @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n+            @NotNull ResourceAssociationMod associationMod);\n+\n+    /**\n+     * Executes the provided bulk action.\n+     *\n+     * @param bulkAction list of user ids against which the bulk action will be performed.\n+     * @return Bulk action result\n+     */\n+    @POST\n+    @Path(\"bulk\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+}"},{"sha":"0dab6c200044959f28cbb12cc7e87abcfdc9eca0","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/UserWorkflowService.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FUserWorkflowService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+\n+/**\n+ * REST operations related to user workflow.\n+ */\n+@Path(\"userworkflow\")\n+public interface UserWorkflowService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all available workflow forms.\n+     *\n+     * @return list of all available workflow forms\n+     */\n+    @GET\n+    @Path(\"forms\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<WorkflowFormTO> getForms();\n+\n+    /**\n+     * Returns a list of all available workflow forms with matching name, for the given user id.\n+     *\n+     * @param userId user id\n+     * @param name form name\n+     * @return list of all available workflow forms with matching name, fir the given user id.\n+     */\n+    @GET\n+    @Path(\"forms/{userId}/{name}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<WorkflowFormTO> getFormsByName(\n+            @NotNull @PathParam(\"userId\") final Long userId, @NotNull @PathParam(\"name\") final String name);\n+\n+    /**\n+     * Returns a list of available forms for the given user id.\n+     *\n+     * @param userId user id\n+     * @return list of available forms for the given user id\n+     */\n+    @GET\n+    @Path(\"forms/{userId}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    WorkflowFormTO getFormForUser(@NotNull @PathParam(\"userId\") Long userId);\n+\n+    /**\n+     * Claims the form for the given task id.\n+     *\n+     * @param taskId workflow task id\n+     * @return the workflow form for the given task id\n+     */\n+    @POST\n+    @Path(\"forms/{taskId}/claim\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    WorkflowFormTO claimForm(@NotNull @PathParam(\"taskId\") String taskId);\n+\n+    /**\n+     * Submits a workflow form.\n+     *\n+     * @param form workflow form.\n+     * @return updated user\n+     */\n+    @POST\n+    @Path(\"forms\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    UserTO submitForm(@NotNull WorkflowFormTO form);\n+\n+    /**\n+     * Executes workflow task for matching id.\n+     *\n+     * @param taskId workflow task id\n+     * @param userTO argument to be passed to workflow task\n+     * @return updated user\n+     */\n+    @POST\n+    @Path(\"tasks/{taskId}/execute\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    UserTO executeTask(@NotNull @PathParam(\"taskId\") String taskId, @NotNull UserTO userTO);\n+}"},{"sha":"786d2341217cd60da99d806b1236dd06960e7c1f","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/WorkflowService.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65adad7dc8e3e29516da8e596aea1d66039a29a6/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FWorkflowService.java?ref=65adad7dc8e3e29516da8e596aea1d66039a29a6","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+\n+/**\n+ * REST operations for workflow definition management.\n+ */\n+@Path(\"workflows/{kind}\")\n+public interface WorkflowService extends JAXRSService {\n+\n+    /**\n+     * Checks whether Activiti is enabled (for users or roles).\n+     *\n+     * @param kind user or role\n+     * @return <tt>Response</tt> contains special syncope HTTP header indicating if Activiti is enabled for\n+     * users / roles\n+     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_USER_ENABLED\n+     * @see org.apache.syncope.common.types.RESTHeaders#ACTIVITI_ROLE_ENABLED\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Contains special syncope HTTP header indicating if Activiti is enabled for users / roles\")\n+    })\n+    @OPTIONS\n+    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Exports workflow definition for matching kind.\n+     *\n+     * @param kind user or role\n+     * @return workflow definition for matching kind\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response exportDefinition(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Exports workflow diagram representation.\n+     *\n+     * @param kind user or role\n+     * @return workflow diagram representation\n+     */\n+    @GET\n+    @Path(\"diagram.png\")\n+    @Produces({ RESTHeaders.MEDIATYPE_IMAGE_PNG })\n+    Response exportDiagram(@NotNull @PathParam(\"kind\") SubjectType kind);\n+\n+    /**\n+     * Imports workflow definition for matching kind.\n+     *\n+     * @param kind user or role\n+     * @param definition workflow definition for matching kind\n+     */\n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void importDefinition(@NotNull @PathParam(\"kind\") SubjectType kind, @NotNull String definition);\n+\n+}"}]}