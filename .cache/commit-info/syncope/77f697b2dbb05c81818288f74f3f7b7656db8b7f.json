{"sha":"77f697b2dbb05c81818288f74f3f7b7656db8b7f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc3ZjY5N2IyZGJiMDVjODE4MTgyODhmNzRmM2Y3Yjc2NTZkYjhiN2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-20T09:41:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-20T09:41:11Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"1f95a93c1cdbae7a3487228788e1e6cb31c51b74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f95a93c1cdbae7a3487228788e1e6cb31c51b74"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/77f697b2dbb05c81818288f74f3f7b7656db8b7f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77f697b2dbb05c81818288f74f3f7b7656db8b7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/77f697b2dbb05c81818288f74f3f7b7656db8b7f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77f697b2dbb05c81818288f74f3f7b7656db8b7f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8e219725d643ac5475257b85fc821de9521c64f0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e219725d643ac5475257b85fc821de9521c64f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8e219725d643ac5475257b85fc821de9521c64f0"},{"sha":"4cdb34b3c9719541dc6b19d12d7a7d8015c7d96e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4cdb34b3c9719541dc6b19d12d7a7d8015c7d96e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4cdb34b3c9719541dc6b19d12d7a7d8015c7d96e"}],"stats":{"total":2779,"additions":2774,"deletions":5},"files":[{"sha":"8fe5e245255d9f0ad30a559104129661bfd2e453","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccountRuleConf.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, GroupReportletConf.class })\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+\n+    private static final long serialVersionUID = -6130008602014516608L;\n+\n+    private String name;\n+\n+    public AbstractReportletConf() {\n+        this(StringUtils.EMPTY);\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractReportletConf(final String name) {\n+        super();\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"8fe5e245255d9f0ad30a559104129661bfd2e453","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPasswordRuleConf.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, GroupReportletConf.class })\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+\n+    private static final long serialVersionUID = -6130008602014516608L;\n+\n+    private String name;\n+\n+    public AbstractReportletConf() {\n+        this(StringUtils.EMPTY);\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractReportletConf(final String name) {\n+        super();\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"9157ba2b0b0273b1c2211976a0bb91ca953bc1a8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPolicyTO.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+@XmlRootElement(name = \"abstractPolicy\")\n+@XmlType\n+@XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public abstract class AbstractPolicyTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2903888572649721035L;\n+\n+    private long key;\n+\n+    private String description;\n+\n+    private final PolicyType type;\n+\n+    private final List<String> usedByResources = new ArrayList<>();\n+\n+    private final List<String> usedByRealms = new ArrayList<>();\n+\n+    private AbstractPolicyTO() {\n+        super();\n+        throw new UnsupportedOperationException(\"No-arg constructor is just to keep JAXB from complaining\");\n+    }\n+\n+    protected AbstractPolicyTO(final PolicyType type) {\n+        super();\n+        this.type = type;\n+    }\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    @XmlElementWrapper(name = \"usedByResources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"usedByResources\")\n+    public List<String> getUsedByResources() {\n+        return usedByResources;\n+    }\n+\n+    @XmlElementWrapper(name = \"usedByRealms\")\n+    @XmlElement(name = \"group\")\n+    @JsonProperty(\"usedByRealms\")\n+    public List<String> getUsedByRealms() {\n+        return usedByRealms;\n+    }\n+\n+}"},{"sha":"67d9fe074c5eda15b1c4639bce65c09344bee78f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+@XmlRootElement(name = \"accountPolicy\")\n+@XmlType\n+public class AccountPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = -1557150042828800134L;\n+\n+    private boolean propagateSuspension;\n+\n+    private int maxAuthenticationAttempts;\n+\n+    private final List<AccountRuleConf> ruleConfs = new ArrayList<>();\n+\n+    private final List<String> resources = new ArrayList<>();\n+\n+    public AccountPolicyTO() {\n+        super(PolicyType.ACCOUNT);\n+    }\n+\n+    public boolean isPropagateSuspension() {\n+        return propagateSuspension;\n+    }\n+\n+    public void setPropagateSuspension(final boolean propagateSuspension) {\n+        this.propagateSuspension = propagateSuspension;\n+    }\n+\n+    public int getMaxAuthenticationAttempts() {\n+        return maxAuthenticationAttempts;\n+    }\n+\n+    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n+        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n+    }\n+\n+    @XmlElementWrapper(name = \"ruleConfs\")\n+    @XmlElement(name = \"ruleConf\")\n+    @JsonProperty(\"ruleConfs\")\n+    public List<AccountRuleConf> getRuleConfs() {\n+        return ruleConfs;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public List<String> getResources() {\n+        return resources;\n+    }\n+}"},{"sha":"aa107fcf773accce8ac24bad0e85066cec0267e5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+public interface AccountRuleConf extends RuleConf {\n+\n+}"},{"sha":"929f05b1f8a978728d509894bc42f70fe5571cff","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"defaultAccountRuleConf\")\n+@XmlType\n+public class DefaultAccountRuleConf extends AbstractRuleConf implements AccountRuleConf {\n+\n+    private static final long serialVersionUID = 3259256974414758406L;\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Pattern (regular expression) that must match.\n+     */\n+    private String pattern;\n+\n+    /**\n+     * Specify if one or more lowercase characters are permitted.\n+     */\n+    private boolean allUpperCase;\n+\n+    /**\n+     * Specify if one or more uppercase characters are permitted.\n+     */\n+    private boolean allLowerCase;\n+\n+    public boolean isAllLowerCase() {\n+        return allLowerCase;\n+    }\n+\n+    public void setAllLowerCase(final boolean allLowerCase) {\n+        this.allLowerCase = allLowerCase;\n+    }\n+\n+    public boolean isAllUpperCase() {\n+        return allUpperCase;\n+    }\n+\n+    public void setAllUpperCase(final boolean allUpperCase) {\n+        this.allUpperCase = allUpperCase;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(final int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(final int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public String getPattern() {\n+        return pattern;\n+    }\n+\n+    public void setPattern(final String pattern) {\n+        this.pattern = pattern;\n+    }\n+}"},{"sha":"629e820b3b81e1ddf34f896ea7ebfd320916a877","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"defaultPasswordRuleConf\")\n+@XmlType\n+public class DefaultPasswordRuleConf extends AbstractRuleConf implements PasswordRuleConf {\n+\n+    private static final long serialVersionUID = -7988778083915548547L;\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Specify if one or more non alphanumeric characters are required.\n+     */\n+    private boolean nonAlphanumericRequired;\n+\n+    /**\n+     * Specify if one or more alphanumeric characters are required.\n+     */\n+    private boolean alphanumericRequired;\n+\n+    /**\n+     * Specify if one or more digits are required.\n+     */\n+    private boolean digitRequired;\n+\n+    /**\n+     * Specify if one or more lowercase alphabetic characters are required.\n+     */\n+    private boolean lowercaseRequired;\n+\n+    /**\n+     * Specify if one or more uppercase alphabetic characters are required.\n+     */\n+    private boolean uppercaseRequired;\n+\n+    /**\n+     * Specify if must start with a digit.\n+     */\n+    private boolean mustStartWithDigit;\n+\n+    /**\n+     * Specify if mustn't start with a digit.\n+     */\n+    private boolean mustntStartWithDigit;\n+\n+    /**\n+     * Specify if must end with a digit.\n+     */\n+    private boolean mustEndWithDigit;\n+\n+    /**\n+     * Specify if mustn't end with a digit.\n+     */\n+    private boolean mustntEndWithDigit;\n+\n+    /**\n+     * Specify if must start with a non alphanumeric character.\n+     */\n+    private boolean mustStartWithNonAlpha;\n+\n+    /**\n+     * Specify if must start with a alphanumeric character.\n+     */\n+    private boolean mustStartWithAlpha;\n+\n+    /**\n+     * Specify if mustn't start with a non alphanumeric character.\n+     */\n+    private boolean mustntStartWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't start with a alphanumeric character.\n+     */\n+    private boolean mustntStartWithAlpha;\n+\n+    /**\n+     * Specify if must end with a non alphanumeric character.\n+     */\n+    private boolean mustEndWithNonAlpha;\n+\n+    /**\n+     * Specify if must end with a alphanumeric character.\n+     */\n+    private boolean mustEndWithAlpha;\n+\n+    /**\n+     * Specify if mustn't end with a non alphanumeric character.\n+     */\n+    private boolean mustntEndWithNonAlpha;\n+\n+    /**\n+     * Specify if mustn't end with a alphanumeric character.\n+     */\n+    private boolean mustntEndWithAlpha;\n+\n+    public boolean isDigitRequired() {\n+        return digitRequired;\n+    }\n+\n+    public void setDigitRequired(final boolean digitRequired) {\n+        this.digitRequired = digitRequired;\n+    }\n+\n+    public boolean isLowercaseRequired() {\n+        return lowercaseRequired;\n+    }\n+\n+    public void setLowercaseRequired(final boolean lowercaseRequired) {\n+        this.lowercaseRequired = lowercaseRequired;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(final int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(final int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public boolean isMustEndWithDigit() {\n+        return mustEndWithDigit;\n+    }\n+\n+    public void setMustEndWithDigit(final boolean mustEndWithDigit) {\n+        this.mustEndWithDigit = mustEndWithDigit;\n+    }\n+\n+    public boolean isMustEndWithNonAlpha() {\n+        return mustEndWithNonAlpha;\n+    }\n+\n+    public void setMustEndWithNonAlpha(final boolean mustEndWithNonAlpha) {\n+        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustStartWithDigit() {\n+        return mustStartWithDigit;\n+    }\n+\n+    public void setMustStartWithDigit(final boolean mustStartWithDigit) {\n+        this.mustStartWithDigit = mustStartWithDigit;\n+    }\n+\n+    public boolean isMustStartWithNonAlpha() {\n+        return mustStartWithNonAlpha;\n+    }\n+\n+    public void setMustStartWithNonAlpha(final boolean mustStartWithNonAlpha) {\n+        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n+    }\n+\n+    public boolean isMustntEndWithDigit() {\n+        return mustntEndWithDigit;\n+    }\n+\n+    public void setMustntEndWithDigit(final boolean mustntEndWithDigit) {\n+        this.mustntEndWithDigit = mustntEndWithDigit;\n+    }\n+\n+    public boolean isMustntEndWithNonAlpha() {\n+        return mustntEndWithNonAlpha;\n+    }\n+\n+    public void setMustntEndWithNonAlpha(final boolean mustntEndWithNonAlpha) {\n+        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n+    }\n+\n+    public boolean isMustntStartWithDigit() {\n+        return mustntStartWithDigit;\n+    }\n+\n+    public void setMustntStartWithDigit(final boolean mustntStartWithDigit) {\n+        this.mustntStartWithDigit = mustntStartWithDigit;\n+    }\n+\n+    public boolean isMustntStartWithNonAlpha() {\n+        return mustntStartWithNonAlpha;\n+    }\n+\n+    public void setMustntStartWithNonAlpha(final boolean mustntStartWithNonAlpha) {\n+        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n+    }\n+\n+    public boolean isNonAlphanumericRequired() {\n+        return nonAlphanumericRequired;\n+    }\n+\n+    public void setNonAlphanumericRequired(final boolean nonAlphanumericRequired) {\n+        this.nonAlphanumericRequired = nonAlphanumericRequired;\n+    }\n+\n+    public boolean isUppercaseRequired() {\n+        return uppercaseRequired;\n+    }\n+\n+    public void setUppercaseRequired(final boolean uppercaseRequired) {\n+        this.uppercaseRequired = uppercaseRequired;\n+    }\n+\n+    public boolean isAlphanumericRequired() {\n+        return alphanumericRequired;\n+    }\n+\n+    public void setAlphanumericRequired(final boolean alphanumericRequired) {\n+        this.alphanumericRequired = alphanumericRequired;\n+    }\n+\n+    public boolean isMustEndWithAlpha() {\n+        return mustEndWithAlpha;\n+    }\n+\n+    public void setMustEndWithAlpha(final boolean mustEndWithAlpha) {\n+        this.mustEndWithAlpha = mustEndWithAlpha;\n+    }\n+\n+    public boolean isMustStartWithAlpha() {\n+        return mustStartWithAlpha;\n+    }\n+\n+    public void setMustStartWithAlpha(final boolean mustStartWithAlpha) {\n+        this.mustStartWithAlpha = mustStartWithAlpha;\n+    }\n+\n+    public boolean isMustntEndWithAlpha() {\n+        return mustntEndWithAlpha;\n+    }\n+\n+    public void setMustntEndWithAlpha(final boolean mustntEndWithAlpha) {\n+        this.mustntEndWithAlpha = mustntEndWithAlpha;\n+    }\n+\n+    public boolean isMustntStartWithAlpha() {\n+        return mustntStartWithAlpha;\n+    }\n+\n+    public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n+        this.mustntStartWithAlpha = mustntStartWithAlpha;\n+    }\n+\n+}"},{"sha":"cf91df20d94d56c9e88294b2cc4069d7d1f57ca3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+@XmlRootElement(name = \"passwordPolicy\")\n+@XmlType\n+public class PasswordPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = -5606086441294799690L;\n+\n+    private boolean allowNullPassword;\n+\n+    private int historyLength;\n+\n+    private final List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+\n+    public PasswordPolicyTO() {\n+        super(PolicyType.PASSWORD);\n+    }\n+\n+    public boolean isAllowNullPassword() {\n+        return allowNullPassword;\n+    }\n+\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        this.allowNullPassword = allowNullPassword;\n+    }\n+\n+    public int getHistoryLength() {\n+        return historyLength;\n+    }\n+\n+    public void setHistoryLength(final int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n+\n+    @XmlElementWrapper(name = \"ruleConfs\")\n+    @XmlElement(name = \"ruleConf\")\n+    @JsonProperty(\"ruleConfs\")\n+    public List<PasswordRuleConf> getRuleConfs() {\n+        return ruleConfs;\n+    }\n+}"},{"sha":"cf715002033205a550e4724fd488a7ae672e35a7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+public interface PasswordRuleConf extends RuleConf {\n+\n+}"},{"sha":"7f1c11ee0c1a38e956b0a2d1f7c97b1fd2a41e56","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyType.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum PolicyType {\n+\n+    /**\n+     * How username values should look like.\n+     */\n+    ACCOUNT,\n+    /**\n+     * How password values should look like.\n+     */\n+    PASSWORD,\n+    /**\n+     * For handling conflicts resolution during synchronization.\n+     */\n+    SYNC,\n+    /**\n+     * For handling conflicts resolution during push.\n+     */\n+    PUSH;\n+\n+}"},{"sha":"4b613740c7e9e1b9b7a61752f710360a8a51cf21","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicySpec.java","status":"renamed","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -16,15 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.wrap;\n+package org.apache.syncope.common.lib.policy;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"reportletConfClass\")\n @XmlType\n-public class ReportletConfClass extends AbstractWrappable<String> {\n+public class PushPolicySpec {\n \n-    private static final long serialVersionUID = 1343357929074360450L;\n+    private static final long serialVersionUID = 3641030189482617497L;\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/ReportletConfClass.java"},{"sha":"5a99cd19ebf9ac9e6f8e15a7f5dc65431a9a43be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/RuleConf.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface RuleConf {\n+\n+    /**\n+     * Give name of related rule instance.\n+     *\n+     * @return name of this rule instance\n+     */\n+    String getName();\n+}"},{"sha":"1eb578e5d286ec3b94f863423a60a70e70526563","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/SyncPolicySpec.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+\n+@XmlType\n+public class SyncPolicySpec {\n+\n+    private static final long serialVersionUID = -3144027171719498127L;\n+\n+    private ConflictResolutionAction conflictResolutionAction;\n+\n+    /**\n+     * Associates anyTypeKey to either:\n+     * <ol>\n+     * <li>Java class name, implementing {@code SyncCorrelationRule}</li>\n+     * <li>JSON array containing plain schema names - this will be used to feed\n+     * {@code PlainAttrsSyncCorrelationRule}</li>\n+     * </ol>\n+     */\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, String> correlationRules = new HashMap<>();\n+\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction == null\n+                ? ConflictResolutionAction.IGNORE\n+                : conflictResolutionAction;\n+    }\n+\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, String> getCorrelationRules() {\n+        return correlationRules;\n+    }\n+}"},{"sha":"911c4457707628859a0bd553a29b5ee2feaeec28","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/SyncPolicyTO.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+@XmlRootElement(name = \"syncPolicy\")\n+@XmlType\n+public class SyncPolicyTO extends AbstractPolicyTO {\n+\n+    private static final long serialVersionUID = 993024634238024242L;\n+\n+    private SyncPolicySpec specification;\n+\n+    public SyncPolicyTO() {\n+        super(PolicyType.SYNC);\n+    }\n+\n+    public SyncPolicySpec getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(final SyncPolicySpec specification) {\n+        this.specification = specification;\n+    }\n+\n+}"},{"sha":"4b1380783d36ec9c584bee45ca4675ba7060b1d1","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/InvalidPasswordRuleConf.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.policy;\n+\n+/**\n+ * Raise when the merge of two or more PasswordRuleconf instances led to an inconsistent condition.\n+ *\n+ * @see org.apache.syncope.common.lib.policy.PasswordRuleConf\n+ */\n+public class InvalidPasswordRuleConf extends Exception {\n+\n+    private static final long serialVersionUID = 4810651743226663580L;\n+\n+    public InvalidPasswordRuleConf(final String msg) {\n+        super(msg);\n+    }\n+\n+    public InvalidPasswordRuleConf(final String msg, final Exception e) {\n+        super(msg, e);\n+    }\n+}"},{"sha":"a1a18228381d155bc9dc58432e61a154cbf9a210","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/DefaultPasswordGenerator.java","status":"added","additions":330,"deletions":0,"changes":330,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,330 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Generate random passwords according to given policies.\n+ * When no minimum and / or maximum length are specified, default values are set.\n+ *\n+ * <strong>WARNING</strong>: This class only takes {@link DefaultPasswordRuleConf} into account.\n+ */\n+public class DefaultPasswordGenerator implements PasswordGenerator {\n+\n+    private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n+\n+    private static final int VERY_MIN_LENGTH = 0;\n+\n+    private static final int VERY_MAX_LENGTH = 64;\n+\n+    private static final int MIN_LENGTH_IF_ZERO = 6;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Override\n+    public String generate(final User user) throws InvalidPasswordRuleConf {\n+        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+\n+        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n+            if (ancestor.getPasswordPolicy() != null) {\n+                ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n+            }\n+        }\n+\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n+            if (resource.getPasswordPolicy() != null) {\n+                ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n+            }\n+        }\n+\n+        return generate(ruleConfs);\n+    }\n+\n+    @Override\n+    public String generate(final List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf {\n+        List<DefaultPasswordRuleConf> defaultRuleConfs = new ArrayList<>();\n+        for (PasswordRuleConf ruleConf : ruleConfs) {\n+            if (ruleConf instanceof DefaultPasswordRuleConf) {\n+                defaultRuleConfs.add((DefaultPasswordRuleConf) ruleConf);\n+            }\n+        }\n+\n+        DefaultPasswordRuleConf ruleConf = merge(defaultRuleConfs);\n+        check(ruleConf);\n+        return generate(ruleConf);\n+    }\n+\n+    private DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaultRuleConfs) {\n+        DefaultPasswordRuleConf fpps = new DefaultPasswordRuleConf();\n+        fpps.setMinLength(VERY_MIN_LENGTH);\n+        fpps.setMaxLength(VERY_MAX_LENGTH);\n+\n+        for (DefaultPasswordRuleConf ruleConf : defaultRuleConfs) {\n+            if (ruleConf.getMinLength() > fpps.getMinLength()) {\n+                fpps.setMinLength(ruleConf.getMinLength());\n+            }\n+\n+            if ((ruleConf.getMaxLength() != 0) && ((ruleConf.getMaxLength() < fpps.getMaxLength()))) {\n+                fpps.setMaxLength(ruleConf.getMaxLength());\n+            }\n+            fpps.getPrefixesNotPermitted().addAll(ruleConf.getPrefixesNotPermitted());\n+            fpps.getSuffixesNotPermitted().addAll(ruleConf.getSuffixesNotPermitted());\n+\n+            if (!fpps.isNonAlphanumericRequired()) {\n+                fpps.setNonAlphanumericRequired(ruleConf.isNonAlphanumericRequired());\n+            }\n+\n+            if (!fpps.isAlphanumericRequired()) {\n+                fpps.setAlphanumericRequired(ruleConf.isAlphanumericRequired());\n+            }\n+            if (!fpps.isDigitRequired()) {\n+                fpps.setDigitRequired(ruleConf.isDigitRequired());\n+            }\n+\n+            if (!fpps.isLowercaseRequired()) {\n+                fpps.setLowercaseRequired(ruleConf.isLowercaseRequired());\n+            }\n+            if (!fpps.isUppercaseRequired()) {\n+                fpps.setUppercaseRequired(ruleConf.isUppercaseRequired());\n+            }\n+            if (!fpps.isMustStartWithDigit()) {\n+                fpps.setMustStartWithDigit(ruleConf.isMustStartWithDigit());\n+            }\n+            if (!fpps.isMustntStartWithDigit()) {\n+                fpps.setMustntStartWithDigit(ruleConf.isMustntStartWithDigit());\n+            }\n+            if (!fpps.isMustEndWithDigit()) {\n+                fpps.setMustEndWithDigit(ruleConf.isMustEndWithDigit());\n+            }\n+            if (fpps.isMustntEndWithDigit()) {\n+                fpps.setMustntEndWithDigit(ruleConf.isMustntEndWithDigit());\n+            }\n+            if (!fpps.isMustStartWithAlpha()) {\n+                fpps.setMustStartWithAlpha(ruleConf.isMustStartWithAlpha());\n+            }\n+            if (!fpps.isMustntStartWithAlpha()) {\n+                fpps.setMustntStartWithAlpha(ruleConf.isMustntStartWithAlpha());\n+            }\n+            if (!fpps.isMustStartWithNonAlpha()) {\n+                fpps.setMustStartWithNonAlpha(ruleConf.isMustStartWithNonAlpha());\n+            }\n+            if (!fpps.isMustntStartWithNonAlpha()) {\n+                fpps.setMustntStartWithNonAlpha(ruleConf.isMustntStartWithNonAlpha());\n+            }\n+            if (!fpps.isMustEndWithNonAlpha()) {\n+                fpps.setMustEndWithNonAlpha(ruleConf.isMustEndWithNonAlpha());\n+            }\n+            if (!fpps.isMustntEndWithNonAlpha()) {\n+                fpps.setMustntEndWithNonAlpha(ruleConf.isMustntEndWithNonAlpha());\n+            }\n+            if (!fpps.isMustEndWithAlpha()) {\n+                fpps.setMustEndWithAlpha(ruleConf.isMustEndWithAlpha());\n+            }\n+            if (!fpps.isMustntEndWithAlpha()) {\n+                fpps.setMustntEndWithAlpha(ruleConf.isMustntEndWithAlpha());\n+            }\n+        }\n+\n+        if (fpps.getMinLength() == 0) {\n+            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n+        }\n+\n+        return fpps;\n+    }\n+\n+    private void check(final DefaultPasswordRuleConf defaultPasswordRuleConf)\n+            throws InvalidPasswordRuleConf {\n+\n+        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustntEndWithAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustEndWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithDigit() && defaultPasswordRuleConf.isMustntEndWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithNonAlpha() && defaultPasswordRuleConf.isMustntEndWithNonAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustntStartWithAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustStartWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithDigit() && defaultPasswordRuleConf.isMustntStartWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithNonAlpha() && defaultPasswordRuleConf.isMustntStartWithNonAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.getMinLength() > defaultPasswordRuleConf.getMaxLength()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"Minimun length (\" + defaultPasswordRuleConf.getMinLength() + \")\"\n+                    + \"is greater than maximum length (\" + defaultPasswordRuleConf.getMaxLength() + \")\");\n+        }\n+    }\n+\n+    private String generate(final DefaultPasswordRuleConf ruleConf) {\n+        String[] generatedPassword = new String[ruleConf.getMinLength()];\n+\n+        for (int i = 0; i < generatedPassword.length; i++) {\n+            generatedPassword[i] = StringUtils.EMPTY;\n+        }\n+\n+        checkStartChar(generatedPassword, ruleConf);\n+\n+        checkEndChar(generatedPassword, ruleConf);\n+\n+        checkRequired(generatedPassword, ruleConf);\n+\n+        for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n+                firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n+\n+            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        checkPrefixAndSuffix(generatedPassword, ruleConf);\n+\n+        return StringUtils.join(generatedPassword);\n+    }\n+\n+    private void checkStartChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isMustStartWithAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustStartWithNonAlpha() || ruleConf.isMustStartWithDigit()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntStartWithAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntStartWithDigit()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustntStartWithNonAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+    }\n+\n+    private void checkEndChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isMustEndWithAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustEndWithNonAlpha() || ruleConf.isMustEndWithDigit()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n+        }\n+\n+        if (ruleConf.isMustntEndWithAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntEndWithDigit()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustntEndWithNonAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[ruleConf.getMinLength() - 1])) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+    }\n+\n+    private int firstEmptyChar(final String[] generatedPStrings) {\n+        int index = 0;\n+        while (!generatedPStrings[index].isEmpty()) {\n+            index++;\n+        }\n+        return index;\n+    }\n+\n+    private void checkRequired(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isDigitRequired()\n+                && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n+        }\n+\n+        if (ruleConf.isUppercaseRequired()\n+                && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n+        }\n+\n+        if (ruleConf.isLowercaseRequired()\n+                && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n+        }\n+\n+        if (ruleConf.isNonAlphanumericRequired()\n+                && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomSpecialCharacter(SPECIAL_CHARS);\n+        }\n+    }\n+\n+    private void checkPrefixAndSuffix(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        for (String prefix : ruleConf.getPrefixesNotPermitted()) {\n+            if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n+                checkStartChar(generatedPassword, ruleConf);\n+            }\n+        }\n+\n+        for (String suffix : ruleConf.getSuffixesNotPermitted()) {\n+            if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n+                checkEndChar(generatedPassword, ruleConf);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"25e9e8648d3f2ff401d4ac6fed08be6682964bab","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+\n+public interface AccountRule extends PolicyRule {\n+\n+    void setConf(AccountRuleConf conf);\n+\n+}"},{"sha":"5b6bace97e0cd474809659f54e2da272c59f40b1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface AccountRuleConfClass {\n+\n+    Class<? extends AccountRuleConf> value();\n+}"},{"sha":"4f92092a9bf79be22d39a44eb4918c34b353f777","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+\n+public interface PasswordRule extends PolicyRule {\n+\n+    void setConf(PasswordRuleConf conf);\n+\n+}"},{"sha":"745e3366b1ad36e247cf1412b459bfacac3a23b5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface PasswordRuleConfClass {\n+\n+    Class<? extends PasswordRuleConf> value();\n+}"},{"sha":"f9a8277b0f559a13dace569b3a020c4a49b3212d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+\n+public interface AccountPolicy extends Policy {\n+\n+    boolean isPropagateSuspension();\n+\n+    void setPropagateSuspension(boolean propagateSuspension);\n+\n+    int getMaxAuthenticationAttempts();\n+\n+    void setMaxAuthenticationAttempts(int maxAuthenticationAttempts);\n+\n+    boolean add(AccountRuleConf accountRuleConf);\n+\n+    boolean remove(AccountRuleConf accountRuleConf);\n+\n+    List<AccountRuleConf> getRuleConfs();\n+\n+    boolean add(ExternalResource resource);\n+\n+    boolean remove(ExternalResource resource);\n+\n+    Set<String> getResourceNames();\n+\n+    Set<? extends ExternalResource> getResources();\n+}"},{"sha":"173608ea2165dd99144891f3a4447bc417fd6a3b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PasswordPolicy.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+\n+public interface PasswordPolicy extends Policy {\n+\n+    boolean isAllowNullPassword();\n+\n+    void setAllowNullPassword(final boolean allowNullPassword);\n+\n+    int getHistoryLength();\n+\n+    void setHistoryLength(int historyLength);\n+\n+    boolean add(PasswordRuleConf passwordRuleConf);\n+\n+    boolean remove(PasswordRuleConf passwordRuleConf);\n+\n+    List<PasswordRuleConf> getRuleConfs();\n+}"},{"sha":"4365e7238c417bc2a34eb7a6afba3e153071bbc6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushPolicy.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.PushPolicySpec;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+\n+public interface PushPolicy extends Policy {\n+\n+    PushPolicySpec getSpecification();\n+\n+    void setSpecification(PushPolicySpec spec);\n+}"},{"sha":"78a9882425cd5baa200731ba88cd25eb58e825a3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/SyncPolicy.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+\n+public interface SyncPolicy extends Policy {\n+\n+    SyncPolicySpec getSpecification();\n+\n+    void setSpecification(SyncPolicySpec spec);\n+\n+}"},{"sha":"7ef2ebf546df7c970c92a5c222200c4a5d9f41f1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@AccountRuleConfClass(DefaultAccountRuleConf.class)\n+public class DefaultAccountRule implements AccountRule {\n+\n+    private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n+\n+    private DefaultAccountRuleConf conf;\n+\n+    @Override\n+    public void setConf(final AccountRuleConf conf) {\n+        if (conf instanceof DefaultAccountRuleConf) {\n+            this.conf = (DefaultAccountRuleConf) conf;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void isCompliant(final User user) {\n+        for (String schema : conf.getSchemasNotPermitted()) {\n+            PlainAttr<?> attr = user.getPlainAttr(schema);\n+            if (attr != null) {\n+                List<String> values = attr.getValuesAsStrings();\n+                if (values != null && !values.isEmpty()) {\n+                    conf.getWordsNotPermitted().add(values.get(0));\n+                }\n+            }\n+        }\n+\n+        if (user.getUsername() == null) {\n+            throw new AccountPolicyException(\"Invalid account\");\n+        }\n+\n+        // check min length\n+        if (conf.getMinLength() > 0 && conf.getMinLength() > user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too short\");\n+        }\n+\n+        // check max length\n+        if (conf.getMaxLength() > 0 && conf.getMaxLength() < user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : conf.getWordsNotPermitted()) {\n+            if (user.getUsername().contains(word)) {\n+                throw new AccountPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check case\n+        if (conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n+            throw new AccountPolicyException(\"No lowercase characters permitted\");\n+        }\n+        if (conf.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n+            throw new AccountPolicyException(\"No uppercase characters permitted\");\n+        }\n+\n+        // check pattern\n+        Pattern pattern = (conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(conf.getPattern());\n+        if (!pattern.matcher(user.getUsername()).matches()) {\n+            throw new AccountPolicyException(\"Username does not match pattern\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : conf.getPrefixesNotPermitted()) {\n+            if (user.getUsername().startsWith(prefix)) {\n+                throw new AccountPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : conf.getSuffixesNotPermitted()) {\n+            if (user.getUsername().endsWith(suffix)) {\n+                throw new AccountPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"8eaad0e8d28dde62c7ebefde51be0d07f35094e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"added","additions":218,"deletions":0,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n+import org.apache.syncope.core.misc.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n+public class DefaultPasswordRule implements PasswordRule {\n+\n+    private DefaultPasswordRuleConf conf;\n+\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n+        if (conf instanceof DefaultPasswordRuleConf) {\n+            this.conf = (DefaultPasswordRuleConf) conf;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void isCompliant(final User user) {\n+        for (String schema : conf.getSchemasNotPermitted()) {\n+            PlainAttr<?> attr = user.getPlainAttr(schema);\n+            if (attr != null) {\n+                List<String> values = attr.getValuesAsStrings();\n+                if (values != null && !values.isEmpty()) {\n+                    conf.getWordsNotPermitted().add(values.get(0));\n+                }\n+            }\n+        }\n+\n+        String clearPassword = user.getClearPassword();\n+        String password = user.getPassword();\n+\n+        if (password != null && clearPassword != null) {\n+            // check length\n+            if (conf.getMinLength() > 0 && conf.getMinLength() > clearPassword.length()) {\n+                throw new PasswordPolicyException(\"Password too short\");\n+            }\n+\n+            if (conf.getMaxLength() > 0 && conf.getMaxLength() < clearPassword.length()) {\n+                throw new PasswordPolicyException(\"Password too long\");\n+            }\n+\n+            // check words not permitted\n+            for (String word : conf.getWordsNotPermitted()) {\n+                if (clearPassword.contains(word)) {\n+                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+                }\n+            }\n+\n+            // check digits occurrence\n+            if (conf.isDigitRequired() && !checkDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+            }\n+\n+            // check lowercase alphabetic characters occurrence\n+            if (conf.isLowercaseRequired() && !checkLowercase(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+            }\n+\n+            // check uppercase alphabetic characters occurrence\n+            if (conf.isUppercaseRequired() && !checkUppercase(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+            }\n+\n+            // check prefix\n+            for (String prefix : conf.getPrefixesNotPermitted()) {\n+                if (clearPassword.startsWith(prefix)) {\n+                    throw new PasswordPolicyException(\"Prefix not permitted\");\n+                }\n+            }\n+\n+            // check suffix\n+            for (String suffix : conf.getSuffixesNotPermitted()) {\n+                if (clearPassword.endsWith(suffix)) {\n+                    throw new PasswordPolicyException(\"Suffix not permitted\");\n+                }\n+            }\n+\n+            // check digit first occurrence\n+            if (conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with a digit\");\n+            }\n+\n+            if (conf.isMustntStartWithDigit() && checkFirstDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n+            }\n+\n+            // check digit last occurrence\n+            if (conf.isMustEndWithDigit() && !checkLastDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with a digit\");\n+            }\n+\n+            if (conf.isMustntEndWithDigit() && checkLastDigit(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+            }\n+\n+            // check alphanumeric characters occurence\n+            if (conf.isAlphanumericRequired() && !checkAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n+            }\n+\n+            // check non alphanumeric characters occurence\n+            if (conf.isNonAlphanumericRequired() && !checkNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+            }\n+\n+            // check alphanumeric character first occurrence\n+            if (conf.isMustStartWithAlpha() && !checkFirstAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n+            }\n+\n+            if (conf.isMustntStartWithAlpha() && checkFirstAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n+            }\n+\n+            // check alphanumeric character last occurrence\n+            if (conf.isMustEndWithAlpha() && !checkLastAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n+            }\n+\n+            if (conf.isMustntEndWithAlpha() && checkLastAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n+            }\n+\n+            // check non alphanumeric character first occurrence\n+            if (conf.isMustStartWithNonAlpha() && !checkFirstNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n+            }\n+\n+            if (conf.isMustntStartWithNonAlpha() && checkFirstNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+            }\n+\n+            // check non alphanumeric character last occurrence\n+            if (conf.isMustEndWithNonAlpha() && !checkLastNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+            }\n+\n+            if (conf.isMustntEndWithNonAlpha() && checkLastNonAlphanumeric(clearPassword)) {\n+                throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+            }\n+        }\n+    }\n+\n+    private boolean checkDigit(final String str) {\n+        return PolicyPattern.DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkLowercase(final String str) {\n+        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkUppercase(final String str) {\n+        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n+    }\n+\n+    private boolean checkFirstDigit(final String str) {\n+        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkLastDigit(final String str) {\n+        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n+    }\n+\n+    private boolean checkAlphanumeric(final String str) {\n+        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkFirstAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkLastAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkNonAlphanumeric(final String str) {\n+        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkFirstNonAlphanumeric(final String str) {\n+        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkLastNonAlphanumeric(final String str) {\n+        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n+    }\n+}"},{"sha":"843bbcd49ff59e92f9b4fbd75ae6a5649e542bb6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public abstract class AbstractPolicy extends AbstractEntity<Long> implements Policy {\n+\n+    private static final long serialVersionUID = -5844833125843247458L;\n+\n+    @Id\n+    private Long id;\n+\n+    @NotNull\n+    private String description;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected PolicyType type;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public PolicyType getType() {\n+        return type;\n+    }\n+}"},{"sha":"87aa04f28035ca8e9617711424924a8a2fef6090","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+\n+@Entity\n+@Table(name = JPAAccountPolicy.TABLE)\n+public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n+\n+    private static final long serialVersionUID = -2767606675667839060L;\n+\n+    public static final String TABLE = \"AccountPolicy\";\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer propagateSuspension;\n+\n+    private int maxAuthenticationAttempts;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"accountPolicy\")\n+    private List<JPAAccountRuleConfInstance> ruleConfs;\n+\n+    /**\n+     * Resources for alternative user authentication: if empty, only internal storage will be used.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"accountPolicy_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_name\"))\n+    private Set<JPAExternalResource> resources = new HashSet<>();\n+\n+    public JPAAccountPolicy() {\n+        super();\n+        this.type = PolicyType.ACCOUNT;\n+    }\n+\n+    @Override\n+    public boolean isPropagateSuspension() {\n+        return isBooleanAsInteger(propagateSuspension);\n+    }\n+\n+    @Override\n+    public void setPropagateSuspension(final boolean propagateSuspension) {\n+        this.propagateSuspension = getBooleanAsInteger(propagateSuspension);\n+    }\n+\n+    @Override\n+    public int getMaxAuthenticationAttempts() {\n+        return maxAuthenticationAttempts;\n+    }\n+\n+    @Override\n+    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n+        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n+    }\n+\n+    @Override\n+    public boolean add(final AccountRuleConf accountRuleConf) {\n+        if (accountRuleConf == null) {\n+            return false;\n+        }\n+\n+        JPAAccountRuleConfInstance instance = new JPAAccountRuleConfInstance();\n+        instance.setAccountPolicy(this);\n+        instance.setInstance(accountRuleConf);\n+\n+        return ruleConfs.add(instance);\n+    }\n+\n+    @Override\n+    public boolean remove(final AccountRuleConf accountRuleConf) {\n+        return CollectionUtils.filter(ruleConfs, new Predicate<JPAAccountRuleConfInstance>() {\n+\n+            @Override\n+            public boolean evaluate(final JPAAccountRuleConfInstance object) {\n+                return accountRuleConf.equals(object.getInstance());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<AccountRuleConf> getRuleConfs() {\n+        return CollectionUtils.collect(ruleConfs, new Transformer<JPAAccountRuleConfInstance, AccountRuleConf>() {\n+\n+            @Override\n+            public AccountRuleConf transform(final JPAAccountRuleConfInstance input) {\n+                return input.getInstance();\n+            }\n+        }, new ArrayList<AccountRuleConf>());\n+    }\n+\n+    @Override\n+    public boolean add(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public boolean remove(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.remove((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public Set<? extends ExternalResource> getResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public Set<String> getResourceNames() {\n+        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n+\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        }, new HashSet<String>());\n+    }\n+}"},{"sha":"782e6b448d2532883a206f33ffa0bc9aba92d55c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountRuleConfInstance.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPAAccountRuleConfInstance.TABLE)\n+public class JPAAccountRuleConfInstance extends AbstractEntity<Long> {\n+\n+    private static final long serialVersionUID = -2436055132955674610L;\n+\n+    public static final String TABLE = \"AccountRuleConfInstance\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Lob\n+    private String serializedInstance;\n+\n+    @ManyToOne\n+    private JPAAccountPolicy accountPolicy;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    public AccountPolicy getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final AccountPolicy report) {\n+        checkType(report, JPAAccountPolicy.class);\n+        this.accountPolicy = (JPAAccountPolicy) report;\n+    }\n+\n+    public AccountRuleConf getInstance() {\n+        return serializedInstance == null\n+                ? null\n+                : POJOHelper.deserialize(serializedInstance, AccountRuleConf.class);\n+    }\n+\n+    public void setInstance(final AccountRuleConf instance) {\n+        this.serializedInstance = instance == null\n+                ? null\n+                : POJOHelper.serialize(instance);\n+    }\n+}"},{"sha":"1491c25c9f923db5e7faf22ccbbdc1a3f6624833","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+\n+@Entity\n+@Table(name = JPAPasswordPolicy.TABLE)\n+public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+\n+    public static final String TABLE = \"PasswordPolicy\";\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer allowNullPassword;\n+\n+    private int historyLength;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"passwordPolicy\")\n+    private List<JPAPasswordRuleConfInstance> ruleConfs;\n+\n+    public JPAPasswordPolicy() {\n+        super();\n+        this.type = PolicyType.PASSWORD;\n+    }\n+\n+    @Override\n+    public boolean isAllowNullPassword() {\n+        return isBooleanAsInteger(allowNullPassword);\n+    }\n+\n+    @Override\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        this.allowNullPassword = getBooleanAsInteger(allowNullPassword);\n+    }\n+\n+    @Override\n+    public int getHistoryLength() {\n+        return historyLength;\n+    }\n+\n+    @Override\n+    public void setHistoryLength(final int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n+\n+    @Override\n+    public boolean add(final PasswordRuleConf passwordRuleConf) {\n+        if (passwordRuleConf == null) {\n+            return false;\n+        }\n+\n+        JPAPasswordRuleConfInstance instance = new JPAPasswordRuleConfInstance();\n+        instance.setPasswordPolicy(this);\n+        instance.setInstance(passwordRuleConf);\n+\n+        return ruleConfs.add(instance);\n+    }\n+\n+    @Override\n+    public boolean remove(final PasswordRuleConf passwordRuleConf) {\n+        return CollectionUtils.filter(ruleConfs, new Predicate<JPAPasswordRuleConfInstance>() {\n+\n+            @Override\n+            public boolean evaluate(final JPAPasswordRuleConfInstance object) {\n+                return passwordRuleConf.equals(object.getInstance());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<PasswordRuleConf> getRuleConfs() {\n+        return CollectionUtils.collect(ruleConfs, new Transformer<JPAPasswordRuleConfInstance, PasswordRuleConf>() {\n+\n+            @Override\n+            public PasswordRuleConf transform(final JPAPasswordRuleConfInstance input) {\n+                return input.getInstance();\n+            }\n+        }, new ArrayList<PasswordRuleConf>());\n+    }\n+}"},{"sha":"4b39dc8747e7882b87ff7df111027344b94cbe0e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordRuleConfInstance.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPAPasswordRuleConfInstance.TABLE)\n+public class JPAPasswordRuleConfInstance extends AbstractEntity<Long> {\n+\n+    private static final long serialVersionUID = -2436055132955674610L;\n+\n+    public static final String TABLE = \"PasswordRuleConfInstance\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Lob\n+    private String serializedInstance;\n+\n+    @ManyToOne\n+    private JPAPasswordPolicy passwordPolicy;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    public PasswordPolicy getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final PasswordPolicy report) {\n+        checkType(report, JPAPasswordPolicy.class);\n+        this.passwordPolicy = (JPAPasswordPolicy) report;\n+    }\n+\n+    public PasswordRuleConf getInstance() {\n+        return serializedInstance == null\n+                ? null\n+                : POJOHelper.deserialize(serializedInstance, PasswordRuleConf.class);\n+    }\n+\n+    public void setInstance(final PasswordRuleConf instance) {\n+        this.serializedInstance = instance == null\n+                ? null\n+                : POJOHelper.serialize(instance);\n+    }\n+}"},{"sha":"3bc0009bea965e329a2a85a67a82ac79d3675324","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushPolicy.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.policy.PushPolicySpec;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+\n+@Entity\n+@Table(name = JPAPushPolicy.TABLE)\n+public class JPAPushPolicy extends AbstractPolicy implements PushPolicy {\n+\n+    private static final long serialVersionUID = -5875589156893921113L;\n+\n+    public static final String TABLE = \"PushPolicy\";\n+\n+    @Lob\n+    private String specification;\n+\n+    public JPAPushPolicy() {\n+        super();\n+        this.type = PolicyType.PUSH;\n+    }\n+\n+    @Override\n+    public PushPolicySpec getSpecification() {\n+        return POJOHelper.deserialize(specification, PushPolicySpec.class);\n+    }\n+\n+    @Override\n+    public void setSpecification(final PushPolicySpec policy) {\n+        this.specification = POJOHelper.serialize(policy);\n+    }\n+\n+}"},{"sha":"913ee54469602a1aecfcd5d78dc4a906b000923a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPASyncPolicy.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n+\n+@Entity\n+@Table(name = JPASyncPolicy.TABLE)\n+public class JPASyncPolicy extends AbstractPolicy implements SyncPolicy {\n+\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public static final String TABLE = \"SyncPolicy\";\n+\n+    @Lob\n+    private String specification;\n+\n+    public JPASyncPolicy() {\n+        super();\n+        this.type = PolicyType.SYNC;\n+    }\n+\n+    @Override\n+    public SyncPolicySpec getSpecification() {\n+        return POJOHelper.deserialize(specification, SyncPolicySpec.class);\n+    }\n+\n+    @Override\n+    public void setSpecification(final SyncPolicySpec policy) {\n+        this.specification = POJOHelper.serialize(policy);\n+    }\n+}"},{"sha":"36c52a31f6b5374a06c322ffad3cc234f45ef276","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractTask.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = AbstractTask.TABLE)\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"DTYPE\")\n+public abstract class AbstractTask extends AbstractEntity<Long> implements Task {\n+\n+    private static final long serialVersionUID = 5837401178128177511L;\n+\n+    public static final String TABLE = \"Task\";\n+\n+    /**\n+     * Id.\n+     */\n+    @Id\n+    private Long id;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected TaskType type;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n+    private List<JPATaskExec> executions;\n+\n+    public AbstractTask() {\n+        super();\n+\n+        executions = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public TaskType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public boolean addExec(final TaskExec exec) {\n+        checkType(exec, JPATaskExec.class);\n+        return exec != null && !executions.contains((JPATaskExec) exec) && executions.add((JPATaskExec) exec);\n+    }\n+\n+    @Override\n+    public boolean removeExec(final TaskExec exec) {\n+        checkType(exec, JPATaskExec.class);\n+        return exec != null && executions.remove((JPATaskExec) exec);\n+    }\n+\n+    @Override\n+    public List<? extends TaskExec> getExecs() {\n+        return executions;\n+    }\n+\n+}"},{"sha":"2b67f37ddd4ef3aab1fda75a8ad9c6fe00d7ae92","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@AccountRuleConfClass(TestAccountRuleConf.class)\n+public class TestAccountRule implements AccountRule {\n+\n+    private TestAccountRuleConf conf;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final AccountRuleConf conf, final User user) {\n+        if (conf instanceof TestAccountRuleConf) {\n+            this.conf = TestAccountRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+\n+        if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n+            throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n+        }\n+    }\n+\n+}"},{"sha":"89030585acff22b2c3ae140f812c34bd54d446e4","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRuleConf.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+\n+public class TestAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n+\n+    private static final long serialVersionUID = -1803947511928491978L;\n+\n+    @Override\n+    public String getName() {\n+        return getClass().getName();\n+    }\n+\n+    public String getMustContainSubstring() {\n+        return \"YYY\";\n+    }\n+}"},{"sha":"2b67f37ddd4ef3aab1fda75a8ad9c6fe00d7ae92","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@AccountRuleConfClass(TestAccountRuleConf.class)\n+public class TestAccountRule implements AccountRule {\n+\n+    private TestAccountRuleConf conf;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final AccountRuleConf conf, final User user) {\n+        if (conf instanceof TestAccountRuleConf) {\n+            this.conf = TestAccountRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+\n+        if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n+            throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n+        }\n+    }\n+\n+}"},{"sha":"89030585acff22b2c3ae140f812c34bd54d446e4","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRuleConf.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f697b2dbb05c81818288f74f3f7b7656db8b7f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java?ref=77f697b2dbb05c81818288f74f3f7b7656db8b7f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+\n+public class TestAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n+\n+    private static final long serialVersionUID = -1803947511928491978L;\n+\n+    @Override\n+    public String getName() {\n+        return getClass().getName();\n+    }\n+\n+    public String getMustContainSubstring() {\n+        return \"YYY\";\n+    }\n+}"}]}