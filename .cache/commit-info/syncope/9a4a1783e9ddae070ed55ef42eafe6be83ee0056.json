{"sha":"9a4a1783e9ddae070ed55ef42eafe6be83ee0056","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhNGExNzgzZTlkZGFlMDcwZWQ1NWVmNDJlYWZlNmJlODNlZTAwNTY=","commit":{"author":{"name":"Misagh Moayyed","email":"mmoayyed@apache.org","date":"2020-04-09T11:38:20Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-1545] allow wa to lazy-load application context by scheduling a quartz job to retry/refresh the context after startup","tree":{"sha":"78583176afdd1433d277977908de9e692522e073","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/78583176afdd1433d277977908de9e692522e073"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9a4a1783e9ddae070ed55ef42eafe6be83ee0056","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4a1783e9ddae070ed55ef42eafe6be83ee0056","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a4a1783e9ddae070ed55ef42eafe6be83ee0056","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"90a3d3290e3bf641a89a66d74883f3cb9d72342c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90a3d3290e3bf641a89a66d74883f3cb9d72342c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90a3d3290e3bf641a89a66d74883f3cb9d72342c"}],"stats":{"total":814,"additions":764,"deletions":50},"files":[{"sha":"c98a6e7888630e9d92a8249c5ee988bf300733ef","filename":"docker/wa/src/main/resources/wa.properties","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -23,3 +23,30 @@ useGZIPCompression=true\n conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n cas.authn.oidc.jwks.jwksFile=file:${conf.directory}/oidc.keystore\n+\n+cas.server.name=http://localhost:8080\n+cas.server.prefix=${cas.server.name}/syncope-wa\n+cas.server.scope=syncope.org\n+\n+cas.authn.samlIdp.entityId=https://syncope.apache.org/saml\n+cas.authn.samlIdp.metadata.location=file:${conf.directory}\n+\n+# Disable access to the login endpoint\n+# if no target application is specified.\n+cas.sso.allow-missing-service-parameter=true\n+\n+# Disable the acceptable usage policy\n+# by default for now.\n+cas.acceptableUsagePolicy.enabled=false\n+\n+management.endpoints.web.exposure.include=health,loggers,refresh\n+management.endpoint.health.show-details=always\n+\n+management.endpoint.health.enabled=true\n+management.endpoint.loggers.enabled=true\n+management.endpoint.refresh.enabled=true\n+\n+cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n+\n+spring.security.user.name=${anonymousUser}\n+spring.security.user.password=${anonymousKey}"},{"sha":"e3b4dcb8cd7cc604d16024778ccf4d9ec0713cf7","filename":"fit/wa-reference/pom.xml","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -143,18 +143,18 @@ under the License.\n                 <context>syncope</context>\n               </properties>\n             </deployable>\n-            <deployable>\n-              <location>${basedir}/../console-reference/target/syncope-fit-console-reference-${project.version}</location>\n-              <properties>\n-                <context>syncope-console</context>\n-              </properties>\n-            </deployable>\n-            <deployable>\n-              <location>${basedir}/../enduser-reference/target/syncope-fit-enduser-reference-${project.version}</location>\n-              <properties>\n-                <context>syncope-enduser</context>\n-              </properties>\n-            </deployable>\n+<!--            <deployable>-->\n+<!--              <location>${basedir}/../console-reference/target/syncope-fit-console-reference-${project.version}</location>-->\n+<!--              <properties>-->\n+<!--                <context>syncope-console</context>-->\n+<!--              </properties>-->\n+<!--            </deployable>-->\n+<!--            <deployable>-->\n+<!--              <location>${basedir}/../enduser-reference/target/syncope-fit-enduser-reference-${project.version}</location>-->\n+<!--              <properties>-->\n+<!--                <context>syncope-enduser</context>-->\n+<!--              </properties>-->\n+<!--            </deployable>-->\n             <deployable>\n               <location>${project.build.directory}/${project.build.finalName}</location>\n               <properties>"},{"sha":"c98a6e7888630e9d92a8249c5ee988bf300733ef","filename":"fit/wa-reference/src/main/resources/wa.properties","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -23,3 +23,30 @@ useGZIPCompression=true\n conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n cas.authn.oidc.jwks.jwksFile=file:${conf.directory}/oidc.keystore\n+\n+cas.server.name=http://localhost:8080\n+cas.server.prefix=${cas.server.name}/syncope-wa\n+cas.server.scope=syncope.org\n+\n+cas.authn.samlIdp.entityId=https://syncope.apache.org/saml\n+cas.authn.samlIdp.metadata.location=file:${conf.directory}\n+\n+# Disable access to the login endpoint\n+# if no target application is specified.\n+cas.sso.allow-missing-service-parameter=true\n+\n+# Disable the acceptable usage policy\n+# by default for now.\n+cas.acceptableUsagePolicy.enabled=false\n+\n+management.endpoints.web.exposure.include=health,loggers,refresh\n+management.endpoint.health.show-details=always\n+\n+management.endpoint.health.enabled=true\n+management.endpoint.loggers.enabled=true\n+management.endpoint.refresh.enabled=true\n+\n+cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n+\n+spring.security.user.name=${anonymousUser}\n+spring.security.user.password=${anonymousKey}"},{"sha":"9ea1e9744998b182116258405e32de046536dc15","filename":"wa/bootstrap/pom.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fpom.xml?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -43,11 +43,19 @@ under the License.\n       <artifactId>syncope-client-am-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.apache.syncope.common.keymaster</groupId>\n+      <artifactId>syncope-common-keymaster-client-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-configuration-api</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-util-api</artifactId>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"ca2d048709392bea478a334508b95540c70ab7e0","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/WARestClient.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2FWARestClient.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa;\n+\n+import org.apereo.cas.util.spring.ApplicationContextProvider;\n+\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+\n+import java.util.Collection;\n+\n+public class WARestClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(WARestClient.class);\n+\n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final boolean useGZIPCompression;\n+\n+    private SyncopeClient client;\n+\n+    public WARestClient(\n+        final String anonymousUser,\n+        final String anonymousKey,\n+        final boolean useGZIPCompression) {\n+\n+        this.anonymousUser = anonymousUser;\n+        this.anonymousKey = anonymousKey;\n+        this.useGZIPCompression = useGZIPCompression;\n+    }\n+\n+    public SyncopeClient getSyncopeClient() {\n+        synchronized (this) {\n+            if (client == null && isReady()) {\n+                try {\n+                    client = new SyncopeClientFactoryBean().\n+                        setAddress(getCore().getAddress()).\n+                        setUseCompression(useGZIPCompression).\n+                        create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey));\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not init SyncopeClient\", e);\n+                }\n+            }\n+        }\n+\n+        return client;\n+    }\n+\n+    private static NetworkService getCore() {\n+        try {\n+            final ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+            if (context == null) {\n+                return null;\n+            }\n+\n+            Collection<ServiceOps> serviceOpsList = context.getBeansOfType(ServiceOps.class).values();\n+            if (serviceOpsList.isEmpty()) {\n+                return null;\n+            }\n+            ServiceOps serviceOps = serviceOpsList.iterator().next();\n+            return serviceOps.get(NetworkService.Type.CORE);\n+        } catch (KeymasterException e) {\n+            LOG.trace(e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static boolean isReady() {\n+        try {\n+            return getCore() != null;\n+        } catch (Exception e) {\n+            LOG.trace(e.getMessage());\n+        }\n+        return false;\n+    }\n+}"},{"sha":"2330c3f5c6e1b86701916502c6e83f908d8df6ab","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWABootstrapConfiguration.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWABootstrapConfiguration.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.bootstrap;\n+\n+import org.apache.syncope.wa.WARestClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration(proxyBeanMethods = false)\n+@PropertySource(\"classpath:wa.properties\")\n+@PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n+public class SyncopeWABootstrapConfiguration {\n+    @Value(\"${anonymousUser}\")\n+    private String anonymousUser;\n+\n+    @Value(\"${anonymousKey}\")\n+    private String anonymousKey;\n+\n+    @Value(\"${useGZIPCompression}\")\n+    private boolean useGZIPCompression;\n+\n+    @Bean\n+    public WARestClient waRestClient() {\n+        return new WARestClient(anonymousUser, anonymousKey, useGZIPCompression);\n+    }\n+\n+    @Autowired\n+    @Bean\n+    public PropertySourceLocator configPropertySourceLocator(final WARestClient waRestClient) {\n+        return new SyncopeWAPropertySourceLocator(waRestClient);\n+    }\n+}"},{"sha":"22f3669dde8e9f96ae657eb5f5a8eeb170256cfc","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"renamed","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n@@ -16,36 +16,42 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.syncope.wa.bootstrap;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.net.URI;\n-import java.util.Map;\n-import javax.ws.rs.core.MediaType;\n-import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.wa.WARestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n-import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.env.Environment;\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n \n-@Configuration(value = \"restfulCloudConfigBootstrapConfiguration\", proxyBeanMethods = false)\n-public class RestfulCloudConfigBootstrapConfiguration implements PropertySourceLocator {\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Order\n+public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWABootstrapConfiguration.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n+        this.waRestClient = waRestClient;\n+    }\n \n     @Override\n     public PropertySource<?> locate(final Environment environment) {\n         try {\n-            String content = WebClient.create(URI.create(\"https://demo5926981.mockable.io/casproperties\")).\n-                    accept(MediaType.APPLICATION_JSON_TYPE).\n-                    get().\n-                    readEntity(String.class);\n-\n-            Map<String, Object> payload = MAPPER.readValue(content, new TypeReference<Map<String, Object>>() {\n-            });\n-            return new MapPropertySource(getClass().getName(), payload);\n+            Map<String, Object> properties = new HashMap<>();\n+            if (WARestClient.isReady()) {\n+                LOG.info(\"Bootstrapping WA configuration\");\n+                return new MapPropertySource(getClass().getName(), properties);\n+            }\n+\n+            LOG.warn(\"Application context is not ready to bootstrap WA configuration\");\n+            return null;\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Unable to fetch settings\", e);\n         }","previous_filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/RestfulCloudConfigBootstrapConfiguration.java"},{"sha":"0729129e10ebcf53fe1632caaa8b45141c43ba62","filename":"wa/bootstrap/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -16,4 +16,4 @@\n # under the License.\n \n org.springframework.cloud.bootstrap.BootstrapConfiguration=\\\n- org.apache.syncope.wa.bootstrap.RestfulCloudConfigBootstrapConfiguration\n+ org.apache.syncope.wa.bootstrap.SyncopeWABootstrapConfiguration"},{"sha":"afd48ac7175383c737ce1dd7484d727bf6eedd14","filename":"wa/starter/pom.xml","status":"modified","additions":48,"deletions":1,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -88,6 +88,14 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-services</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-services-registry</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-services-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-tickets</artifactId>\n@@ -144,10 +152,30 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-themes</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-radius</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-radius-mfa</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-saml-idp</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-saml-idp-core</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-oidc</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-oauth-services</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-validation</artifactId>\n@@ -176,6 +204,21 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-webapp-config</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-oidc-services</artifactId>\n+      <version>6.2.0-SNAPSHOT</version>\n+    </dependency>   \n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-authentication-attributes</artifactId>\n+      <version>6.2.0-SNAPSHOT</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-services-authentication</artifactId>\n+      <version>6.2.0-SNAPSHOT</version>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n@@ -196,6 +239,11 @@ under the License.\n       <artifactId>spring-boot-starter-security</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n       <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n@@ -273,7 +321,6 @@ under the License.\n           <groupId>org.apache.syncope.common.keymaster</groupId>\n           <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n           <version>${project.version}</version>\n-          <scope>compile</scope>\n         </dependency>\n         <dependency>\n           <groupId>org.apache.curator</groupId>"},{"sha":"c81d1a74f47ec3cfa86889cc996c7d1115fdc22a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/mapper/RegisteredServiceMapper.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.mapper;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n+import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n+import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+\n+public class RegisteredServiceMapper {\n+\n+    public RegisteredService toRegisteredService(final RegisteredClientAppTO clientApp) {\n+\n+        DefaultRegisteredServiceAuthenticationPolicy authenticationPolicy =\n+                new DefaultRegisteredServiceAuthenticationPolicy();\n+        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n+                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n+        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) clientApp.getAuthPolicyConf().getCriteria()).isAll());\n+        authenticationPolicy.setCriteria(criteria);\n+\n+        RegisteredServiceAccessStrategy accessStrategy =\n+                new DefaultRegisteredServiceAccessStrategy(\n+                        clientApp.getAccessPolicyConf().isEnabled(), clientApp.getAccessPolicyConf().isSsoEnabled());\n+        accessStrategy.getRequiredAttributes().putAll(clientApp.getAccessPolicyConf().getRequiredAttributes());\n+\n+        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n+        if (clientApp.getAttrReleasePolicyConf() != null\n+                && clientApp.getAttrReleasePolicyConf() instanceof AllowedAttrReleasePolicyConf\n+                && !((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).\n+                        getAllowedAttributes().isEmpty()) {\n+            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n+            ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes();\n+            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n+                    ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes());\n+        } else {\n+            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+        }\n+\n+        if (clientApp.getClientAppTO() instanceof OIDCRPTO) {\n+            OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n+            OidcRegisteredService registeredService = new OidcRegisteredService();\n+\n+            String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n+            registeredService.setServiceId(redirectURIs);\n+            registeredService.setName(rp.getName());\n+            registeredService.setDescription(rp.getDescription());\n+            registeredService.setAccessStrategy(accessStrategy);\n+            registeredService.setAuthenticationPolicy(authenticationPolicy);\n+            registeredService.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+            registeredService.setClientId(rp.getClientId());\n+            registeredService.setClientSecret(rp.getClientSecret());\n+            registeredService.setSignIdToken(rp.isSignIdToken());\n+            registeredService.setJwks(rp.getJwks());\n+            registeredService.setSubjectType(rp.getSubjectType().name());\n+            registeredService.setRedirectUrl(redirectURIs);\n+            registeredService.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n+            registeredService.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n+\n+            return registeredService;\n+        } else if (clientApp.getClientAppTO() instanceof SAML2SPTO) {\n+            SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n+            SamlRegisteredService registeredService = new SamlRegisteredService();\n+\n+            registeredService.setServiceId(sp.getEntityId());\n+            registeredService.setName(sp.getName());\n+            registeredService.setDescription(sp.getDescription());\n+            registeredService.setAccessStrategy(accessStrategy);\n+            registeredService.setAuthenticationPolicy(authenticationPolicy);\n+            registeredService.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+            registeredService.setMetadataLocation(sp.getMetadataLocation());\n+            registeredService.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n+            registeredService.setSignAssertions(sp.isSignAssertions());\n+            registeredService.setSignResponses(sp.isSignResponses());\n+            registeredService.setEncryptionOptional(sp.isEncryptionOptional());\n+            registeredService.setEncryptAssertions(sp.isEncryptAssertions());\n+            registeredService.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n+            registeredService.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n+            registeredService.setSkewAllowance(sp.getSkewAllowance());\n+            registeredService.setNameIdQualifier(sp.getNameIdQualifier());\n+            registeredService.setAssertionAudiences(sp.getAssertionAudiences());\n+            registeredService.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n+            return registeredService;\n+        }\n+        return null;\n+    }\n+\n+    public RegisteredClientAppTO fromRegisteredService(final RegisteredService registeredService) {\n+        RegisteredClientAppTO clientApp = new RegisteredClientAppTO();\n+\n+        if (registeredService.getAuthenticationPolicy() != null) {\n+            DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n+            DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n+            criteria.setAll(((DefaultAuthPolicyCriteriaConf) registeredService.\n+                    getAuthenticationPolicy().getCriteria()).isAll());\n+            authPolicyConf.setCriteria(criteria);\n+\n+            clientApp.setAuthPolicyConf(authPolicyConf);\n+        }\n+\n+        if (registeredService.getAccessStrategy() != null) {\n+            DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n+            accessPolicyConf.setEnabled(\n+                    ((DefaultRegisteredServiceAccessStrategy) registeredService.getAccessStrategy()).\n+                            isEnabled());\n+            accessPolicyConf.setSsoEnabled(((DefaultRegisteredServiceAccessStrategy) registeredService.\n+                    getAccessStrategy()).\n+                    isSsoEnabled());\n+            accessPolicyConf.getRequiredAttributes().putAll(((DefaultRegisteredServiceAccessStrategy) registeredService.\n+                    getAccessStrategy()).getRejectedAttributes());\n+\n+            clientApp.setAccessPolicyConf(accessPolicyConf);\n+        }\n+\n+        if (registeredService.getAttributeReleasePolicy() != null) {\n+\n+            if (registeredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy) {\n+                ReturnAllowedAttributeReleasePolicy returnAllowedAttributeReleasePolicy =\n+                        ReturnAllowedAttributeReleasePolicy.class.cast(registeredService.getAttributeReleasePolicy());\n+                AllowedAttrReleasePolicyConf allowedAttrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n+                allowedAttrReleasePolicyConf.getAllowedAttributes().addAll(returnAllowedAttributeReleasePolicy.\n+                        getAllowedAttributes());\n+\n+                clientApp.setAttrReleasePolicyConf(allowedAttrReleasePolicyConf);\n+            }\n+        }\n+\n+        if (registeredService instanceof OidcRegisteredService) {\n+            OidcRegisteredService oidcRegisteredService = OidcRegisteredService.class.cast(registeredService);\n+            OIDCRPTO oidcrpto = new OIDCRPTO();\n+\n+            Arrays.asList(registeredService.getServiceId().split(\"|\")).forEach(redirectURI\n+                    -> oidcrpto.getRedirectUris().add(redirectURI));\n+            oidcrpto.setName(oidcRegisteredService.getName());\n+            oidcrpto.setDescription(oidcRegisteredService.getDescription());\n+            oidcrpto.setClientId(oidcRegisteredService.getClientId());\n+            oidcrpto.setClientSecret(oidcRegisteredService.getClientSecret());\n+            oidcrpto.setSignIdToken(oidcRegisteredService.isSignIdToken());\n+            oidcrpto.setJwks(oidcRegisteredService.getJwks());\n+            oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidcRegisteredService.getSubjectType()));\n+            oidcrpto.getSupportedGrantTypes().addAll(oidcRegisteredService.getSupportedGrantTypes());\n+            oidcrpto.getSupportedResponseTypes().addAll(oidcRegisteredService.getSupportedResponseTypes());\n+\n+            clientApp.setClientAppTO(oidcrpto);\n+        } else if (registeredService instanceof SamlRegisteredService) {\n+            SamlRegisteredService samlRegisteredService = SamlRegisteredService.class.cast(registeredService);\n+            SAML2SPTO saml2spto = new SAML2SPTO();\n+\n+            saml2spto.setEntityId(samlRegisteredService.getServiceId());\n+            saml2spto.setName(samlRegisteredService.getName());\n+            saml2spto.setDescription(samlRegisteredService.getDescription());\n+\n+            saml2spto.setMetadataLocation(samlRegisteredService.getMetadataLocation());\n+            saml2spto.setMetadataSignatureLocation(samlRegisteredService.getMetadataSignatureLocation());\n+            saml2spto.setSignAssertions(samlRegisteredService.isSignAssertions());\n+            saml2spto.setSignResponses(samlRegisteredService.isSignResponses());\n+            saml2spto.setEncryptionOptional(samlRegisteredService.isEncryptionOptional());\n+            saml2spto.setEncryptAssertions(samlRegisteredService.isEncryptAssertions());\n+            saml2spto.setRequiredAuthenticationContextClass(samlRegisteredService.\n+                    getRequiredAuthenticationContextClass());\n+            saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(samlRegisteredService.getRequiredNameIdFormat()));\n+            saml2spto.setSkewAllowance(samlRegisteredService.getSkewAllowance());\n+            saml2spto.setNameIdQualifier(samlRegisteredService.getNameIdQualifier());\n+            saml2spto.setAssertionAudiences(samlRegisteredService.getAssertionAudiences());\n+            saml2spto.setServiceProviderNameIdQualifier(samlRegisteredService.getServiceProviderNameIdQualifier());\n+\n+            clientApp.setClientAppTO(saml2spto);\n+        }\n+        return clientApp;\n+    }\n+}"},{"sha":"887ad97103843e238bb271dbb5fe04df1bf6c570","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":64,"deletions":6,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -24,8 +24,18 @@\n import org.apereo.cas.util.DateTimeUtils;\n \n import org.apache.commons.lang.StringUtils;\n+import org.quartz.Job;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobKey;\n+import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\n@@ -43,13 +53,19 @@\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.cloud.context.refresh.ContextRefresher;\n import org.springframework.context.annotation.EnableAspectJAutoProxy;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.EnableAsync;\n import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n+\n @PropertySource(\"classpath:wa.properties\")\n @PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n @SpringBootApplication(exclude = {\n@@ -75,24 +91,66 @@ public class SyncopeWAApplication extends SpringBootServletInitializer {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAApplication.class);\n \n+    @Autowired\n+    private ContextRefresher contextRefresher;\n+\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n+\n+    @Value(\"${contextRefreshDelay:15}\")\n+    private long contextRefreshDelay;\n+\n     public static void main(final String[] args) {\n         new SpringApplicationBuilder(SyncopeWAApplication.class).run(args);\n     }\n \n+    private static void advertiseReady(final ApplicationReadyEvent event) {\n+        AsciiArtUtils.printAsciiArtReady(LOG, StringUtils.EMPTY);\n+        LOG.info(\"Ready to process requests @ [{}]\", DateTimeUtils.zonedDateTimeOf(event.getTimestamp()));\n+    }\n+\n+    private static void validateConfiguration(final ApplicationReadyEvent event) {\n+        if (!Boolean.getBoolean(\"SKIP_CONFIG_VALIDATION\")) {\n+            CasConfigurationPropertiesValidator validator =\n+                new CasConfigurationPropertiesValidator(event.getApplicationContext());\n+            validator.validate();\n+        }\n+    }\n+\n     /**\n      * Handle application ready event.\n      *\n      * @param event the event\n      */\n     @EventListener\n     public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n-        if (!Boolean.getBoolean(\"SKIP_CONFIG_VALIDATION\")) {\n-            CasConfigurationPropertiesValidator validator =\n-                new CasConfigurationPropertiesValidator(event.getApplicationContext());\n-            validator.validate();\n+        validateConfiguration(event);\n+        scheduleJobToRefreshContext();\n+        advertiseReady(event);\n+    }\n+\n+    private void scheduleJobToRefreshContext() {\n+        try {\n+            Date date = Date.from(LocalDateTime.now().plusSeconds(this.contextRefreshDelay).\n+                atZone(ZoneId.systemDefault()).toInstant());\n+            Trigger trigger = TriggerBuilder.newTrigger().startAt(date).build();\n+            JobKey jobKey = new JobKey(getClass().getSimpleName());\n+\n+            JobDetail job = JobBuilder.newJob(RefreshApplicationContextJob.class).withIdentity(jobKey).build();\n+            scheduler.getScheduler().scheduleJob(job, trigger);\n+        } catch (SchedulerException e) {\n+            throw new RuntimeException(\"Could not schedule refresh job\", e);\n         }\n+    }\n \n-        AsciiArtUtils.printAsciiArtReady(LOG, StringUtils.EMPTY);\n-        LOG.info(\"Ready to process requests @ [{}]\", DateTimeUtils.zonedDateTimeOf(event.getTimestamp()));\n+    private class RefreshApplicationContextJob implements Job {\n+        @Override\n+        public void execute(final JobExecutionContext jobExecutionContext) {\n+            try {\n+                LOG.debug(\"Refreshed context: {}\", contextRefresher.refresh());\n+            } catch (final Exception e) {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n     }\n }"},{"sha":"07661e008ee1fa7894534b57f3f0dd2baf7f4b8b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -18,24 +18,36 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import java.io.Serializable;\n-import org.apereo.cas.services.DefaultRegisteredServiceEntityMapper;\n-import org.apereo.cas.services.RegisteredService;\n-import org.apereo.cas.services.RegisteredServiceEntityMapper;\n+import java.util.Collection;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.starter.rest.SyncopeServiceRegistry;\n+import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryListener;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-@Configuration(proxyBeanMethods = false)\n+@Configuration\n public class SyncopeWAConfiguration {\n \n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"serviceRegistryListeners\")\n+    private Collection<ServiceRegistryListener> serviceRegistryListeners;\n+\n+    @Autowired\n     @Bean\n-    @ConditionalOnProperty(name = \"cas.serviceRegistry.rest.url\")\n-    public RegisteredServiceEntityMapper<RegisteredService, Serializable> registeredServiceEntityMapper() {\n-        return new DefaultRegisteredServiceEntityMapper();\n+    public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(final WARestClient restClient) {\n+        SyncopeServiceRegistry registry =\n+                new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n+        return plan -> plan.registerServiceRegistry(registry);\n     }\n \n     @Bean"},{"sha":"b042262a37dd25e2ca9595a63e618f9edf12cd68","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/rest/SyncopeServiceRegistry.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Frest%2FSyncopeServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Frest%2FSyncopeServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Frest%2FSyncopeServiceRegistry.java?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.rest;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n+import org.apache.syncope.wa.WARestClient;\n+import org.apache.syncope.wa.mapper.RegisteredServiceMapper;\n+import org.apereo.cas.services.AbstractServiceRegistry;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.ServiceRegistryListener;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+public class SyncopeServiceRegistry extends AbstractServiceRegistry {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeServiceRegistry.class);\n+\n+    private final WARestClient restClient;\n+\n+    private final RegisteredServiceMapper mapper;\n+\n+    public SyncopeServiceRegistry(final WARestClient restClient,\n+            final ConfigurableApplicationContext applicationContext,\n+            final Collection<ServiceRegistryListener> serviceRegistryListeners) {\n+\n+        super(applicationContext, serviceRegistryListeners);\n+        this.restClient = restClient;\n+        this.mapper = new RegisteredServiceMapper();\n+    }\n+\n+    @Override\n+    public RegisteredService save(final RegisteredService registeredService) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Create application definitions\");\n+            Response response =\n+                    restClient.getSyncopeClient().getService(RegisteredClientAppService.class).create(mapper.\n+                            fromRegisteredService(registeredService));\n+            if (response.getStatusInfo().getStatusCode() == Response.Status.CREATED.getStatusCode()) {\n+                return registeredService;\n+            }\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete(final RegisteredService registeredService) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Delete application definitions\");\n+            return restClient.getSyncopeClient().getService(RegisteredClientAppService.class).\n+                    delete(registeredService.getName());\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return false;\n+    }\n+\n+    @Override\n+    public Collection<RegisteredService> load() {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Loading application definitions\");\n+            return restClient.getSyncopeClient().getService(RegisteredClientAppService.class).list().stream().\n+                    map(clientApp -> mapper.toRegisteredService(clientApp)).collect(Collectors.toList());\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return List.of();\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceById(final long id) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Searching for application definition by id {}\", id);\n+            return mapper.toRegisteredService(restClient.getSyncopeClient().\n+                    getService(RegisteredClientAppService.class).read(id));\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return null;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends RegisteredService> T findServiceByExactServiceName(final String name, final Class<T> clazz) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Searching for application definition by name {} and type {}\", name, clazz);\n+            if (clazz.isInstance(OidcRegisteredService.class)) {\n+                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(RegisteredClientAppService.class).read(name, ClientAppType.OIDCRP));\n+            } else if (clazz.isInstance(SamlRegisteredService.class)) {\n+                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(RegisteredClientAppService.class).read(name, ClientAppType.SAML2SP));\n+            }\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return null;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceName(final String name) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Searching for application definition by name {}\", name);\n+            return mapper.toRegisteredService(restClient.getSyncopeClient().\n+                    getService(RegisteredClientAppService.class).read(name));\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return null;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends RegisteredService> T findServiceById(final long id, final Class<T> clazz) {\n+        if (WARestClient.isReady()) {\n+            LOG.info(\"Searching for application definition by id {} and type {}\", id, clazz);\n+            if (clazz.isInstance(OidcRegisteredService.class)) {\n+                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(RegisteredClientAppService.class).read(id, ClientAppType.OIDCRP));\n+            } else if (clazz.isInstance(SamlRegisteredService.class)) {\n+                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(RegisteredClientAppService.class).read(id, ClientAppType.SAML2SP));\n+            }\n+        }\n+        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+        return null;\n+    }\n+\n+}"},{"sha":"1104f29673aa9cc52a6ae1e3694780fee68a0de7","filename":"wa/starter/src/main/resources/application.properties","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -28,9 +28,13 @@ server.servlet.contextPath=/syncope-wa\n \n spring.resources.static-locations=classpath:/thymeleaf/static,classpath:/static\n \n-management.endpoints.web.exposure.include=health,loggers\n+management.endpoints.web.exposure.include=health,loggers,refresh\n management.endpoint.health.show-details=always\n \n+management.endpoint.health.enabled=true\n+management.endpoint.loggers.enabled=true\n+management.endpoint.refresh.enabled=true\n+\n ##\n # Allow configuration classes to override bean definitions from Spring Boot\n #"},{"sha":"c98a6e7888630e9d92a8249c5ee988bf300733ef","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4a1783e9ddae070ed55ef42eafe6be83ee0056/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=9a4a1783e9ddae070ed55ef42eafe6be83ee0056","patch":"@@ -24,10 +24,29 @@ conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n cas.authn.oidc.jwks.jwksFile=file:${conf.directory}/oidc.keystore\n \n+cas.server.name=http://localhost:8080\n+cas.server.prefix=${cas.server.name}/syncope-wa\n+cas.server.scope=syncope.org\n+\n+cas.authn.samlIdp.entityId=https://syncope.apache.org/saml\n+cas.authn.samlIdp.metadata.location=file:${conf.directory}\n+\n # Disable access to the login endpoint\n # if no target application is specified.\n cas.sso.allow-missing-service-parameter=true\n \n # Disable the acceptable usage policy\n # by default for now.\n cas.acceptableUsagePolicy.enabled=false\n+\n+management.endpoints.web.exposure.include=health,loggers,refresh\n+management.endpoint.health.show-details=always\n+\n+management.endpoint.health.enabled=true\n+management.endpoint.loggers.enabled=true\n+management.endpoint.refresh.enabled=true\n+\n+cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n+\n+spring.security.user.name=${anonymousUser}\n+spring.security.user.password=${anonymousKey}"}]}