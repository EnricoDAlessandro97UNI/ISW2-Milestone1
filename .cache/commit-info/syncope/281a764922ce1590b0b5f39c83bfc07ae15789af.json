{"sha":"281a764922ce1590b0b5f39c83bfc07ae15789af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI4MWE3NjQ5MjJjZTE1OTBiMGI1ZjM5YzgzYmZjMDdhZTE1Nzg5YWY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-25T10:00:28Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-25T10:00:28Z"},"message":"[SYNCOPE-231]\n* Adding ResourceService\n* Adding JAX-B Annotations\n* Code cleanup (according to Checkstyle and PMD)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1438409 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"721c08c17dcf60a84ef400c674540ecc62e270db","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/721c08c17dcf60a84ef400c674540ecc62e270db"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/281a764922ce1590b0b5f39c83bfc07ae15789af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/281a764922ce1590b0b5f39c83bfc07ae15789af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/281a764922ce1590b0b5f39c83bfc07ae15789af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/281a764922ce1590b0b5f39c83bfc07ae15789af/comments","author":null,"committer":null,"parents":[{"sha":"d9357309cee12550983d6ec62944df0df33a88e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9357309cee12550983d6ec62944df0df33a88e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9357309cee12550983d6ec62944df0df33a88e1"}],"stats":{"total":376,"additions":324,"deletions":52},"files":[{"sha":"0caa597860bf607ce43b9f794a6c174e1c8b9c77","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ResourceServiceProxy.java","status":"modified","additions":22,"deletions":12,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -18,14 +18,20 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n+import java.net.URI;\r\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.common.services.ResourceService;\r\n import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n import org.apache.syncope.common.to.ResourceTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n@@ -35,19 +41,21 @@ public ResourceServiceProxy(final String baseUrl, final RestTemplate restTemplat\n     }\r\n \r\n     @Override\r\n-    public ResourceTO create(final ResourceTO resourceTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n+    public Response create(final ResourceTO resourceTO) {\r\n+        ResourceTO resource = getRestTemplate().postForObject(baseUrl + \"resource/create.json\", resourceTO,\r\n+                ResourceTO.class);\r\n+\r\n+        return Response.created(URI.create(baseUrl + \"resource/read/\" + resource.getName() + \".json\")).build();\r\n     }\r\n \r\n     @Override\r\n-    public ResourceTO update(final String resourceName, final ResourceTO resourceTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n+    public void update(final String resourceName, final ResourceTO resourceTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ResourceTO delete(final String resourceName) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n-                resourceName);\r\n+    public void delete(final String resourceName) {\r\n+        getRestTemplate().getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class, resourceName);\r\n     }\r\n \r\n     @Override\r\n@@ -57,9 +65,11 @@ public ResourceTO read(final String resourceName) {\n     }\r\n \r\n     @Override\r\n-    public Set<String> getPropagationActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n-                + \"resource/propagationActionsClasses.json\", String[].class)));\r\n+    public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n+        Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"resource/propagationActionsClasses.json\", String[].class)));\r\n+\r\n+        return CollectionWrapper.wrapPropagationActionClasses(classes);\r\n     }\r\n \r\n     @Override\r\n@@ -85,7 +95,7 @@ public ConnObjectTO getConnector(final String resourceName, final AttributableTy\n \r\n     @Override\r\n     public boolean check(final ResourceTO resourceTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class).\r\n-                booleanValue();\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class)\r\n+                .booleanValue();\r\n     }\r\n }\r"},{"sha":"98a482d0b8e86b3f6d4ebeca6a7b709e979d2ce0","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -27,33 +27,36 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.core.Response;\r\n \r\n import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n import org.apache.syncope.common.to.ResourceTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n \r\n @Path(\"resources\")\r\n public interface ResourceService {\r\n \r\n     @POST\r\n-    ResourceTO create(ResourceTO resourceTO);\r\n+    @Path(\"validate\")\r\n+    boolean check(ResourceTO resourceTO);\r\n \r\n-    @PUT\r\n-    @Path(\"{resourceName}\")\r\n-    ResourceTO update(@PathParam(\"resourceName\") String resourceName, ResourceTO resourceTO);\r\n+    @POST\r\n+    Response create(ResourceTO resourceTO);\r\n \r\n     @DELETE\r\n     @Path(\"{resourceName}\")\r\n-    ResourceTO delete(@PathParam(\"resourceName\") String resourceName);\r\n+    void delete(@PathParam(\"resourceName\") String resourceName);\r\n \r\n     @GET\r\n-    @Path(\"{resourceName}\")\r\n-    ResourceTO read(@PathParam(\"resourceName\") String resourceName);\r\n+    @Path(\"{resourceName}/{type}/{objectId}\")\r\n+    ConnObjectTO getConnector(@PathParam(\"resourceName\") String resourceName,\r\n+            @PathParam(\"type\") AttributableType type, @PathParam(\"objectId\") String objectId);\r\n \r\n-    // TODO: is it resource method?\r\n+    // TODO: is it a resource method?\r\n     @GET\r\n     @Path(\"propagationActionsClasses\")\r\n-    Set<String> getPropagationActionsClasses();\r\n+    Set<PropagationActionClassTO> getPropagationActionsClasses();\r\n \r\n     @GET\r\n     List<ResourceTO> list();\r\n@@ -62,11 +65,11 @@ public interface ResourceService {\n     List<ResourceTO> list(@MatrixParam(\"connInstanceId\") Long connInstanceId);\r\n \r\n     @GET\r\n-    @Path(\"{resourceName}/{type}/{objectId}\")\r\n-    ConnObjectTO getConnector(@PathParam(\"resourceName\") String resourceName,\r\n-            @PathParam(\"type\") AttributableType type, @PathParam(\"objectId\") String objectId);\r\n+    @Path(\"{resourceName}\")\r\n+    ResourceTO read(@PathParam(\"resourceName\") String resourceName);\r\n+\r\n+    @PUT\r\n+    @Path(\"{resourceName}\")\r\n+    void update(@PathParam(\"resourceName\") String resourceName, ResourceTO resourceTO);\r\n \r\n-    @POST\r\n-    @Path(\"validate\")\r\n-    boolean check(ResourceTO resourceTO);\r\n }\r"},{"sha":"001eab58372c16b4ed06cf8244c81c7e3d063cd8","filename":"common/src/main/java/org/apache/syncope/common/to/MappingItemTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -18,9 +18,14 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n+@XmlRootElement(name = \"mappingItem\")\r\n+@XmlType\r\n public class MappingItemTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 2983498836767176862L;\r"},{"sha":"32ffb896ea6e366cbad6f516d42be25a9fbcae9c","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -21,16 +21,24 @@\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n+@XmlRootElement(name = \"mapping\")\r\n+@XmlType\r\n public class MappingTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 8447688036282611118L;\r\n \r\n     private String accountLink;\r\n \r\n-    private List<MappingItemTO> items;\r\n+    private final List<MappingItemTO> items;\r\n \r\n     public MappingTO() {\r\n         super();\r\n@@ -104,6 +112,8 @@ public boolean setPasswordItem(final MappingItemTO passwordItem) {\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n+    @XmlElementWrapper(name = \"items\")\r\n+    @XmlElement(name = \"item\")\r\n     public <T extends MappingItemTO> List<T> getItems() {\r\n         return (List<T>) items;\r\n     }\r"},{"sha":"2572828d6a0eb4a4070a7f91daf3bfb128a31388","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationActionClassTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationActionClassTO.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"propagationActionClass\")\r\n+@XmlType\r\n+public class PropagationActionClassTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2187654394121198308L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static PropagationActionClassTO instance(final String name) {\r\n+        PropagationActionClassTO instance = new PropagationActionClassTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"d1a97a95aee544a6a0e29fc1aa81c5bb914b71a6","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -21,11 +21,16 @@\n import java.util.HashSet;\r\n import java.util.Set;\r\n \r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n import org.apache.syncope.common.types.PropagationMode;\r\n import org.apache.syncope.common.types.TraceLevel;\r\n \r\n+@XmlRootElement(name = \"resource\")\r\n+@XmlType\r\n public class ResourceTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -9193551354041698963L;\r"},{"sha":"1f1210f423dd45b4e5b491ae2a482e652826941f","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -22,9 +22,12 @@\n import java.util.HashSet;\r\n import java.util.Set;\r\n \r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n /**\r\n  * Internal attribute mapping type.\r\n  */\r\n+@XmlEnum\r\n public enum IntMappingType {\r\n \r\n     // Unfortunately enum type cannot be extended ...\r"},{"sha":"7d942cc6896bb6e100d3c7ef268012b46ead8fea","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -18,7 +18,6 @@\n  */\r\n package org.apache.syncope.common.util;\r\n \r\n-import java.text.ParseException;\r\n import java.util.ArrayList;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n@@ -28,6 +27,7 @@\n import org.apache.syncope.common.to.JobClassTO;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.ValidatorTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n@@ -169,4 +169,20 @@ public static List<String> unwrapSyncActionClasses(List<SyncActionClassTO> actio\n         }\r\n         return respons;\r\n     }\r\n+\r\n+    public static Set<PropagationActionClassTO> wrapPropagationActionClasses(Set<String> classes) {\r\n+        Set<PropagationActionClassTO> respons = new HashSet<PropagationActionClassTO>();\r\n+        for (String cl : classes) {\r\n+            respons.add(PropagationActionClassTO.instance(cl));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapPropagationActionClasses(Set<PropagationActionClassTO> actions) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (PropagationActionClassTO e : actions) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n }\r"},{"sha":"ead3fdaae969a64742dc2742ce30ab10fd274dcc","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -20,9 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.to.PropagationActionClassTO;\n import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n@@ -38,7 +41,8 @@ public List<String> getPropagationActionsClasses() {\n         List<String> actions = null;\n \n         try {\n-            actions = new ArrayList<String>(getService(ResourceService.class).getPropagationActionsClasses());\n+            Set<PropagationActionClassTO> response = getService(ResourceService.class).getPropagationActionsClasses();\n+            actions = CollectionWrapper.unwrapPropagationActionClasses(response);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all propagation actions classes\", e);\n         }\n@@ -76,7 +80,7 @@ public void update(final ResourceTO resourceTO) {\n         getService(ResourceService.class).update(resourceTO.getName(), resourceTO);\n     }\n \n-    public ResourceTO delete(final String name) {\n-        return getService(ResourceService.class).delete(name);\n+    public void delete(final String name) {\n+        getService(ResourceService.class).delete(name);\n     }\n }"},{"sha":"0b0e10b9432abd1c3bdc53b701816d007db3b8eb","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -91,7 +91,7 @@ public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int\n         return result;\n     }\n \n-    private TaskType getTaskType(Class<?> reference) {\n+    private TaskType getTaskType(final Class<?> reference) {\n         TaskType result = null;\n         if (PropagationTaskTO.class.equals(reference)) {\n             result = TaskType.PROPAGATION;\n@@ -149,7 +149,7 @@ public void startExecution(final Long taskId) {\n      *\n      * @param taskId task id\n      */\n-    public void startExecution(final Long taskId, boolean dryRun) {\n+    public void startExecution(final Long taskId, final boolean dryRun) {\n         getService(TaskService.class).execute(taskId, dryRun);\n     }\n "},{"sha":"570d0b8b9b1e70b96943274c372bb84fa1690c81","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -0,0 +1,146 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.services.ResourceService;\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.PropagationActionClassTO;\r\n+import org.apache.syncope.common.to.ResourceTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.core.rest.controller.ResourceController;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class ResourceServiceImpl implements ResourceService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private ResourceController resourceController;\r\n+\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public Response create(final ResourceTO resourceTO) {\r\n+        try {\r\n+            ResourceTO resource = resourceController.create(new DummyHTTPServletResponse(), resourceTO);\r\n+            URI location = uriInfo.getAbsolutePathBuilder().path(resource.getName()).build();\r\n+            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, resource.getName()).build();\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final String resourceName, final ResourceTO resourceTO) {\r\n+        try {\r\n+            resourceController.update(resourceTO);\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final String resourceName) {\r\n+        try {\r\n+            resourceController.delete(resourceName);\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO read(final String resourceName) {\r\n+        try {\r\n+            return resourceController.read(resourceName);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        Set<String> classes = (Set<String>) resourceController.getPropagationActionsClasses().getModel().values()\r\n+                .iterator().next();\r\n+        return CollectionWrapper.wrapPropagationActionClasses(classes);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ResourceTO> list() {\r\n+        try {\r\n+            return resourceController.list(null);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ResourceTO> list(final Long connInstanceId) {\r\n+        try {\r\n+            return resourceController.list(connInstanceId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnObjectTO getConnector(final String resourceName, final AttributableType type, final String objectId) {\r\n+        try {\r\n+            return resourceController.getObject(resourceName, type, objectId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean check(final ResourceTO resourceTO) {\r\n+        try {\r\n+            return (Boolean) resourceController.check(new DummyHTTPServletResponse(), resourceTO).getModel().values()\r\n+                    .iterator().next();\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+\r\n+}\r"},{"sha":"f3111f70bede44c61586d73867458aafcd67edb1","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -66,13 +66,15 @@ under the License.\n \n   <jaxrs:server id=\"restContainer\" address=\"/\">\n     <jaxrs:serviceBeans>\n-      <ref bean=\"configurationServiceImpl\"/>\n-      <ref bean=\"notificationServiceImpl\"/>\n       <ref bean=\"connectorServiceImpl\"/>\n+      <ref bean=\"configurationServiceImpl\"/>\n       <ref bean=\"entitlementServiceImpl\"/>\n+      <ref bean=\"loggerServiceImpl\"/>\n+      <ref bean=\"notificationServiceImpl\"/>\n       <ref bean=\"policyServiceImpl\"/>\n-      <ref bean=\"schemaServiceImpl\"/>\n       <ref bean=\"reportServiceImpl\"/>\n+      <ref bean=\"resourceServiceImpl\"/>\n+      <ref bean=\"schemaServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>\n       <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComperator\"/>"},{"sha":"e84d6743be6fc22e117dd63ad1b62d0643b0b476","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -58,7 +58,7 @@ public class ConnInstanceTestITCase extends AbstractTest {\n     private static String bundlesDirectory;\n \n     // Enable running test more than once with parameters\n-    public ConnInstanceTestITCase(String contentType) {\n+    public ConnInstanceTestITCase(final String contentType) {\n         super(contentType);\n     }\n \n@@ -288,7 +288,8 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Check for connector instance update after resource creation.\n         // ----------------------------------\n-        resourceTO = resourceService.create(resourceTO);\n+        response = resourceService.create(resourceTO);\n+        resourceTO = getObject(response, ResourceTO.class, resourceService);\n \n         assertNotNull(resourceTO);\n "},{"sha":"4ec186c1f4cffef286bb0a93956935a8d88aedc2","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":21,"deletions":11,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -30,8 +30,11 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n+import org.apache.syncope.common.to.PropagationActionClassTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n@@ -49,13 +52,13 @@\n public class ResourceTestITCase extends AbstractTest {\n \n     // Enable running test more than once with parameters\n-    public ResourceTestITCase(String contentType) {\n+    public ResourceTestITCase(final String contentType) {\n         super(contentType);\n     }\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        Set<String> actions = resourceService.getPropagationActionsClasses();\n+        Set<PropagationActionClassTO> actions = resourceService.getPropagationActionsClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -65,7 +68,8 @@ public void create() {\n         String resourceName = \"ws-target-resource-create\";\n         ResourceTO resourceTO = buildResourceTO(resourceName);\n \n-        ResourceTO actual = resourceService.create(resourceTO);\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n         assertNotNull(actual);\n \n         // check for existence\n@@ -116,7 +120,8 @@ public void createOverridingProps() {\n         Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<ConnConfProperty>(Arrays.asList(p));\n         resourceTO.setConnectorConfigurationProperties(connectorConfigurationProperties);\n \n-        ResourceTO actual = resourceService.create(resourceTO);\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -150,7 +155,9 @@ public void createWithSingleMappingItem() {\n \n         resourceTO.setRmapping(rmapping);\n \n-        ResourceTO actual = resourceService.create(resourceTO);\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+\n         assertNotNull(actual);\n         assertNotNull(actual.getUmapping());\n         assertNotNull(actual.getUmapping().getItems());\n@@ -240,7 +247,8 @@ public void createWithPasswordPolicy() {\n \n         resourceTO.setUmapping(mapping);\n \n-        ResourceTO actual = resourceService.create(resourceTO);\n+        Response response = resourceService.create(resourceTO);\n+        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -297,7 +305,8 @@ public void update() {\n \n         resourceTO.setUmapping(mapping);\n \n-        ResourceTO actual = resourceService.update(resourceTO.getName(), resourceTO);\n+        resourceService.update(resourceTO.getName(), resourceTO);\n+        ResourceTO actual = resourceService.read(resourceTO.getName());\n         assertNotNull(actual);\n \n         // check for existence\n@@ -324,7 +333,8 @@ public void updateResetSyncToken() {\n         resourceService.create(pre);\n \n         pre.setUsyncToken(null);\n-        ResourceTO actual = resourceService.update(pre.getName(), pre);\n+        resourceService.update(pre.getName(), pre);\n+        ResourceTO actual = resourceService.read(pre.getName());\n         // check that the synctoken has been reset\n         assertNull(actual.getUsyncToken());\n     }\n@@ -334,11 +344,11 @@ public void delete() {\n         String resourceName = \"ws-target-resource-delete\";\n \n         ResourceTO resource = buildResourceTO(resourceName);\n-        ResourceTO actual = resourceService.create(resource);\n+        Response response = resourceService.create(resource);\n+        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n         assertNotNull(actual);\n \n-        ResourceTO deletedResource = resourceService.delete(resourceName);\n-        assertNotNull(deletedResource);\n+        resourceService.delete(resourceName);\n \n         try {\n             resourceService.read(resourceName);"},{"sha":"c30065da6b0917796948f2f606142dfa497a7bf4","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/281a764922ce1590b0b5f39c83bfc07ae15789af/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=281a764922ce1590b0b5f39c83bfc07ae15789af","patch":"@@ -31,7 +31,9 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -75,7 +77,7 @@\n public class UserTestITCase extends AbstractTest {\n \n     // Enable running test more than once with parameters\n-    public UserTestITCase(String contentType) {\n+    public UserTestITCase(final String contentType) {\n         super(contentType);\n     }\n \n@@ -289,7 +291,9 @@ public void testEnforceMandatoryConditionOnDerived() {\n         assertNotNull(resourceTO);\n         resourceTO.setName(\"resource-csv-enforcing\");\n         resourceTO.setEnforceMandatoryCondition(true);\n-        resourceTO = resourceService.create(resourceTO);\n+\n+        Response response = resourceService.create(resourceTO);\n+        resourceTO = getObject(response, ResourceTO.class, resourceService);\n         assertNotNull(resourceTO);\n \n         UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");"}]}