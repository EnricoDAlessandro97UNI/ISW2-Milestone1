{"sha":"9386dc0e1421b46c08278a3fb427365e41729ac5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzODZkYzBlMTQyMWI0NmMwODI3OGEzZmI0MjczNjVlNDE3MjlhYzU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-25T15:57:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-25T15:57:55Z"},"message":"static web service connector added - case study: RCS Quotidiani\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246247 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"925f8b9aaa9c83f2784ed6a0795cefad091e4364","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/925f8b9aaa9c83f2784ed6a0795cefad091e4364"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9386dc0e1421b46c08278a3fb427365e41729ac5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9386dc0e1421b46c08278a3fb427365e41729ac5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9386dc0e1421b46c08278a3fb427365e41729ac5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9386dc0e1421b46c08278a3fb427365e41729ac5/comments","author":null,"committer":null,"parents":[{"sha":"1eac50f46309083f6bb19fc401ebe6033deccefe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1eac50f46309083f6bb19fc401ebe6033deccefe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1eac50f46309083f6bb19fc401ebe6033deccefe"}],"stats":{"total":3815,"additions":3805,"deletions":10},"files":[{"sha":"5da7e2883db77759a92390e9eb7d6e17952111d2","filename":"identityconnectors/bundles/pom.xml","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -1,5 +1,21 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project\n+            xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n     <modelVersion>4.0.0</modelVersion>\n \n@@ -9,15 +25,16 @@\n         <version>0.1-SNAPSHOT</version>\n     </parent>\n \n+    <groupId>org.syncope.identityconnectors.bundles</groupId>\n+    <artifactId>bundles</artifactId>\n+\n     <name>IdentityConnectors: bundles</name>\n     <description>bundles</description>\n-    <groupId>org.syncope.identityconnectors</groupId>\n-    <artifactId>bundles</artifactId>\n \n     <packaging>pom</packaging>\n \n     <modules>\n-\n+        <module>staticws</module>\n     </modules>\n \n </project>"},{"sha":"cb25cee848f0a7295d245bc6cd824b1a59ad0f49","filename":"identityconnectors/bundles/staticws/pom.xml","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project\n+            xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>bundles</artifactId>\n+        <groupId>org.syncope.identityconnectors.bundles</groupId>\n+        <version>0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+    <artifactId>staticws</artifactId>\n+\n+    <name>IdentityConnectors: bundles: static web service</name>\n+    <description>bundles</description>\n+\n+    <packaging>pom</packaging>\n+\n+    <modules>\n+        <module>utilities</module>\n+        <module>ws-target-resource</module>\n+        <module>staticwebservice</module>\n+    </modules>\n+\n+</project>"},{"sha":"2f00a52da1c611d82df8ffc59f6e32e45cdf9bf8","filename":"identityconnectors/bundles/staticws/staticwebservice/pom.xml","status":"added","additions":223,"deletions":0,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,223 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+            xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>staticws</artifactId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+        <version>0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+    <artifactId>staticwebservice</artifactId>\n+\n+    <name>identityconnectors: bundles: static web service: connector</name>\n+    <url>http://maven.apache.org</url>\n+\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+        <!-- Logger -->\n+        <dependency>\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+        </dependency>\n+\n+        <!-- CXF -->\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-transports-http</artifactId>\n+        </dependency>\n+\n+        <!-- Spring -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+        <!-- identity connectors framework -->\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors</groupId>\n+            <artifactId>framework</artifactId>\n+            <version>${parent.version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors</groupId>\n+            <artifactId>framework-internal</artifactId>\n+            <version>${parent.version}</version>\n+            <scope>runtime</scope>\n+        </dependency>\n+\n+        <!-- to be excluded to deploy on jetty and test the connector -->\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-activation_1.1_spec</artifactId>\n+            <version>1.0.2</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+\t<!-- utilities -->\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+            <artifactId>utilities</artifactId>\n+            <version>${parent.version}</version>\n+        </dependency>\n+\n+        <!-- TEST -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-test</artifactId>\n+            <scope>test</scope>\n+            <type>jar</type>\n+        </dependency>\n+        \n+        <dependency>\n+            <groupId>org.syncope.identityconnectors</groupId>\n+            <artifactId>test-common</artifactId>\n+            <version>${parent.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors.bundles</groupId>\n+            <artifactId>ws-target-resource</artifactId>\n+            <type>war</type>\n+            <version>${parent.version}</version>\n+            <scope>runtime</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        \n+    </dependencies>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <index>true</index>\n+                        <manifestEntries>\n+\n+                            <ConnectorBundle-FrameworkVersion>\n+                                1.2\n+                            </ConnectorBundle-FrameworkVersion>\n+\n+                            <ConnectorBundle-Name>\n+                                ${groupId}\n+                            </ConnectorBundle-Name>\n+\n+                            <ConnectorBundle-Version>\n+                                ${version}\n+                            </ConnectorBundle-Version>\n+\n+                        </manifestEntries>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+\n+            <!-- Test Plugins -->\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>failsafe-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <encoding>utf-8</encoding>\n+                </configuration>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.mortbay.jetty</groupId>\n+                <artifactId>maven-jetty-plugin</artifactId>\n+                <configuration>\n+                    <scanIntervalSeconds>10</scanIntervalSeconds>\n+                    <stopKey>foo</stopKey>\n+                    <stopPort>9999</stopPort>\n+\n+                    <connectors>\n+                        <connector implementation=\"org.mortbay.jetty.nio.SelectChannelConnector\">\n+                            <port>8888</port>\n+                            <maxIdleTime>60000</maxIdleTime>\n+                        </connector>\n+                    </connectors>\n+\n+                    <webApp>${basedir}/../ws-target-resource/target/ws-target-resource-0.1-SNAPSHOT.war</webApp>\n+                    <contextPath>/wstarget</contextPath>\n+                </configuration>\n+\n+                <executions>\n+                    <execution>\n+                        <id>start-jetty</id>\n+                        <phase>pre-integration-test</phase>\n+                        \n+                        <goals>\n+                            <goal>run-war</goal>\n+                        </goals>\n+\n+                        <configuration>\n+                            <scanIntervalSeconds>0</scanIntervalSeconds>\n+                            <daemon>true</daemon>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>stop-jetty</id>\n+                        <phase>post-integration-test</phase>\n+                        <goals>\n+                            <goal>stop</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+        </plugins>\n+    </build>\n+\n+</project>"},{"sha":"e8aa9df524179b943748937d6b398259b2f17e6e","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConfiguration.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConfiguration.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,97 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.identityconnectors.framework.spi.AbstractConfiguration;\n+import org.identityconnectors.framework.spi.ConfigurationProperty;\n+import org.identityconnectors.common.StringUtil;\n+\n+/**\n+ * Extends the {@link AbstractConfiguration} class to provide all the necessary\n+ * parameters to initialize the WebService Connector.\n+ */\n+public class WebServiceConfiguration extends AbstractConfiguration {\n+\n+    /*\n+     * Web Service Endpoint.\n+     */\n+    private String endpoint = null;\n+\n+    /*\n+     * Public Web Service interface class\n+     */\n+    private String servicename = null;\n+\n+    /**\n+     * Accessor for the example property. Uses ConfigurationProperty annotation\n+     * to provide property metadata to the application.\n+     */\n+    @ConfigurationProperty(displayMessageKey = \"ENDPOINT_DISPLAY\",\n+    helpMessageKey = \"ENDPOINT_HELP\",\n+    confidential = false)\n+    public String getEndpoint() {\n+        return endpoint;\n+    }\n+\n+    /**\n+     * Setter for the example property.\n+     */\n+    public void setEndpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+    }\n+\n+    /**\n+     * Accessor for the example property. Uses ConfigurationProperty annotation\n+     * to provide property metadata to the application.\n+     */\n+    @ConfigurationProperty(displayMessageKey = \"CLASSNAME_DISPLAY\",\n+    helpMessageKey = \"CLASSNAME_HELP\",\n+    confidential = false)\n+    public String getServicename() {\n+        return servicename;\n+    }\n+\n+    public void setServicename(String classname) {\n+        this.servicename = classname;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void validate() {\n+        // Check if endpoint has been specified.\n+        if (StringUtil.isBlank(endpoint)) {\n+            throw new IllegalArgumentException(\n+                    \"Endpoint cannot be null or empty.\");\n+        }\n+\n+        // Check if servicename has been specified.\n+        if (StringUtil.isBlank(servicename)) {\n+            throw new IllegalArgumentException(\n+                    \"Service name cannot be null or empty.\");\n+        }\n+\n+        try {\n+            // Check if the specified enpoint is a well-formed URL.\n+            new URL(endpoint);\n+        } catch (MalformedURLException ex) {\n+            throw new IllegalArgumentException(\n+                    \"ExampleProperty cannot be null or empty.\");\n+        }\n+    }\n+}"},{"sha":"42447a13104737e920e4009fc6aa7a53d9012fc5","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnection.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnection.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnection.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnection.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,91 @@\n+package org.syncope.identityconnectors.bundles.staticwebservice;\n+\n+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;\n+import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class WebServiceConnection {\n+\n+    /**\n+     * Logger definition.\n+     */\n+    private static final Logger log =\n+            LoggerFactory.getLogger(WebServiceConnection.class);\n+\n+    private final String SUCCESS = \"OK\";\n+\n+    private final String APPLICATIONCONTEXT = \"/beans.xml\";\n+\n+    private Provisioning provisioning;\n+\n+    public WebServiceConnection(WebServiceConfiguration configuration) {\n+        try {\n+\n+            ApplicationContext context = new ClassPathXmlApplicationContext(\n+                    new String[]{APPLICATIONCONTEXT});\n+\n+            JaxWsProxyFactoryBean proxyFactory =\n+                    (JaxWsProxyFactoryBean) context.getBean(\n+                    JaxWsProxyFactoryBean.class);\n+\n+            configuration.validate();\n+\n+            proxyFactory.setAddress(\n+                    configuration.getEndpoint());\n+\n+            proxyFactory.setServiceClass(\n+                    Class.forName(configuration.getServicename()));\n+\n+            provisioning = (Provisioning) proxyFactory.create();\n+\n+        } catch (IllegalArgumentException e) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Invalid confoguration\", e);\n+            }\n+\n+        } catch (ClassNotFoundException e) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Provisioning class\" +\n+                        \" \\\"\" + configuration.getServicename() + \"\\\" \" +\n+                        \"not found\", e);\n+            }\n+\n+        } catch (Throwable t) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Unknown exception\", t);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Release internal resources\n+     */\n+    public void dispose() {\n+        provisioning = null;\n+    }\n+\n+    /**\n+     * If internal connection is not usable, throw IllegalStateException\n+     */\n+    public void test() {\n+        if (provisioning == null)\n+            throw new IllegalStateException(\"Service port not found.\");\n+\n+        String res = provisioning.checkAlive();\n+\n+        if (!SUCCESS.equals(res))\n+            throw new IllegalStateException(\"Invalid response.\");\n+    }\n+\n+    public Provisioning getProvisioning() {\n+        return provisioning;\n+    }\n+}"},{"sha":"83506b2a8a19fd95ac07ed4162c61cac801ffc86","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"added","additions":879,"deletions":0,"changes":879,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,879 @@\n+package org.syncope.identityconnectors.bundles.staticwebservice;\n+\n+import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import org.identityconnectors.common.security.GuardedByteArray;\n+import org.identityconnectors.framework.common.objects.filter.FilterTranslator;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.exceptions.InvalidCredentialException;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeInfo;\n+import org.identityconnectors.framework.common.objects.AttributeInfoBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfoBuilder;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.OperationalAttributeInfos;\n+import org.identityconnectors.framework.common.objects.ResultsHandler;\n+import org.identityconnectors.framework.common.objects.Schema;\n+import org.identityconnectors.framework.common.objects.SchemaBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.spi.Configuration;\n+import org.identityconnectors.framework.spi.Connector;\n+import org.identityconnectors.framework.spi.ConnectorClass;\n+import org.identityconnectors.framework.spi.PoolableConnector;\n+import org.identityconnectors.framework.spi.operations.AuthenticateOp;\n+import org.identityconnectors.framework.spi.operations.CreateOp;\n+import org.identityconnectors.framework.spi.operations.DeleteOp;\n+import org.identityconnectors.framework.spi.operations.ResolveUsernameOp;\n+import org.identityconnectors.framework.spi.operations.SchemaOp;\n+import org.identityconnectors.framework.spi.operations.SearchOp;\n+import org.identityconnectors.framework.spi.operations.SyncOp;\n+import org.identityconnectors.framework.spi.operations.TestOp;\n+import org.identityconnectors.framework.spi.operations.UpdateOp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.AttributeType;\n+import org.syncope.identityconnectors.bundles.staticwebservice.exceptions.ProvisioningException;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttribute;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttributeValue;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSChange;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSUser;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operand;\n+\n+@ConnectorClass(displayNameKey = \"STATICWEBSERVICE_CONNECTOR\",\n+configurationClass = WebServiceConfiguration.class)\n+public class WebServiceConnector implements\n+        PoolableConnector,\n+        AuthenticateOp,\n+        CreateOp,\n+        DeleteOp,\n+        SchemaOp,\n+        SearchOp<Operand>,\n+        SyncOp,\n+        TestOp,\n+        UpdateOp,\n+        ResolveUsernameOp {\n+\n+    /**\n+     * Setup logging for the {@link WebServiceConnector}.\n+     */\n+    private static final Logger log =\n+            LoggerFactory.getLogger(WebServiceConnector.class);\n+\n+    /**\n+     * Place holder for the Connection created in the init method.\n+     */\n+    private WebServiceConnection connection;\n+\n+    /**\n+     * Place holder for the {@link Configuration} passed into the init() method\n+     * {@link WebServiceConnector#init}.\n+     */\n+    private WebServiceConfiguration config;\n+\n+    /**\n+     * Schema.\n+     */\n+    private Schema schema = null;\n+\n+    /**\n+     * Web Service Attributes.\n+     */\n+    private HashMap<String, WSAttribute> wsAttributes = null;\n+\n+    /**\n+     * Gets the Configuration context for this connector.\n+     */\n+    @Override\n+    public Configuration getConfiguration() {\n+        return this.config;\n+    }\n+\n+    /**\n+     * Callback method to receive the {@link Configuration}.\n+     * \n+     * @see Connector#init\n+     */\n+    @Override\n+    public void init(Configuration cfg) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Connector initialization\");\n+        }\n+\n+        this.config = (WebServiceConfiguration) cfg;\n+        this.connection = new WebServiceConnection(this.config);\n+    }\n+\n+    /**\n+     * Disposes of the {@link WebServiceConnector}'s resources.\n+     * \n+     * @see Connector#dispose()\n+     */\n+    @Override\n+    public void dispose() {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Dispose connector resources\");\n+        }\n+\n+        config = null;\n+\n+        if (connection != null) {\n+            connection.dispose();\n+        }\n+\n+        connection = null;\n+    }\n+\n+    /**\n+     * Checks if resource is alive.\n+     *\n+     * @see Connector#test()\n+     */\n+    @Override\n+    public void checkAlive() {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Connection test\");\n+        }\n+\n+        connection.test();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Uid authenticate(\n+            final ObjectClass objectClass,\n+            final String username,\n+            final GuardedString password,\n+            final OperationOptions options) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"User uthentication\");\n+        }\n+\n+        // check objectclass\n+        if (objectClass == null || (!objectClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check creadentials\n+        if (username == null || password == null) {\n+            throw new IllegalArgumentException(\"Invalid credentuals\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        String accountid = null;\n+\n+        try {\n+\n+            accountid =\n+                    provisioning.authenticate(username, password.toString());\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Authentication failed\", e);\n+            }\n+\n+            throw new InvalidCredentialException(\"Authentication failed\");\n+        }\n+\n+        return new Uid(accountid);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Uid create(\n+            final ObjectClass objClass,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Account creation\");\n+        }\n+\n+        // check objectclass\n+        if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check attributes\n+        if (attrs == null || attrs.size() == 0) {\n+            throw new IllegalArgumentException(\"No attribute specified\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null)\n+            throw new IllegalStateException(\"Web Service client not found\");\n+\n+        // get account name\n+        Name name = AttributeUtil.getNameFromAttributes(attrs);\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"No name specified\");\n+        }\n+        final String accountName = name.getNameValue();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Account to be created: \" + accountName);\n+        }\n+\n+        // check schema\n+        if (schema == null || wsAttributes == null) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Reload schema\");\n+            }\n+\n+            schema();\n+        }\n+\n+        // to be used in order to check for mandatory attributes\n+        Set<String> mandatoryAttributes = new HashSet<String>();\n+\n+        for (WSAttribute wsAttr : wsAttributes.values()) {\n+            if (!wsAttr.isNullable()) {\n+                mandatoryAttributes.add(getAttributeName(wsAttr));\n+            }\n+        }\n+\n+        // to be user in order to pass information to the web service\n+        Set<WSAttributeValue> attributes =\n+                new HashSet<WSAttributeValue>();\n+\n+        WSAttributeValue wsAttributeValue = null;\n+\n+        String attribute = null;\n+\n+        // retrieve attributes\n+        for (Attribute attr : attrs) {\n+            attribute = attr.getName();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Attribute name: \" + attribute);\n+            }\n+\n+            wsAttributeValue =\n+                    new WSAttributeValue(wsAttributes.get(attribute));\n+\n+            Object value = AttributeUtil.getSingleValue(attr);\n+\n+            if (value == null && !wsAttributeValue.isNullable()) {\n+                // TODO: provisioningexception\n+                throw new IllegalArgumentException(\n+                        \"Missing required parameter\");\n+            }\n+\n+            if (value instanceof GuardedString ||\n+                    value instanceof GuardedByteArray) {\n+\n+                wsAttributeValue.setValue(value.toString());\n+            } else {\n+                wsAttributeValue.setValue(value);\n+            }\n+\n+            attributes.add(wsAttributeValue);\n+\n+            if (!wsAttributeValue.isNullable()) {\n+                mandatoryAttributes.remove(attribute);\n+            }\n+        }\n+\n+        // check for mandatory attributes\n+        if (mandatoryAttributes.size() > 0) {\n+            // TODO: it should be forwarded some details about this exception\n+            throw new IllegalArgumentException(\"Missing required parameters\");\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nUser \" + accountName +\n+                    \"\\n\\tattributes: \" + attributes.size());\n+        }\n+\n+        try {\n+\n+            // user creation\n+            provisioning.create(attributes);\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Creation failed\", e);\n+            }\n+        }\n+\n+        // return Uid\n+        return new Uid(accountName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void delete(\n+            final ObjectClass objClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Account deletion\");\n+        }\n+\n+        // check objectclass\n+        if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        final String accountName = uid.getUidValue();\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        try {\n+            provisioning.delete(accountName);\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Deletion failed\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Schema schema() {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Schema retrieving\");\n+        }\n+\n+        Provisioning provisioning = connection.getProvisioning();\n+\n+        if (provisioning == null)\n+            throw new IllegalStateException(\"Web Service client not found\");\n+\n+        Set<WSAttribute> wsAttrs = provisioning.schema();\n+\n+        Set<AttributeInfo> attributes = new HashSet<AttributeInfo>();\n+\n+        if (wsAttributes != null) {\n+            wsAttributes.clear();\n+        }\n+\n+        wsAttributes = new HashMap<String, WSAttribute>();\n+\n+        for (WSAttribute attribute : wsAttrs) {\n+\n+            wsAttributes.put(getAttributeName(attribute), attribute);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nAttribute: \" +\n+                        \"\\n\\tName: \" + attribute.getName() +\n+                        \"\\n\\tType: \" + attribute.getType() +\n+                        \"\\n\\tIsKey: \" + attribute.isKey() +\n+                        \"\\n\\tIsPassword: \" + attribute.isPassword() +\n+                        \"\\n\\tIsNullable: \" + attribute.isNullable());\n+            }\n+\n+            try {\n+\n+                attributes.add(buildAttribute(attribute));\n+\n+            } catch (IllegalArgumentException ila) {\n+\n+                if (log.isErrorEnabled()) {\n+                    log.error(\"Invalid attribute \" + attribute.getName(), ila);\n+                }\n+            }\n+\n+        }\n+\n+        final SchemaBuilder schemaBld = new SchemaBuilder(getClass());\n+\n+        final ObjectClassInfoBuilder objectclassInfoBuilder =\n+                new ObjectClassInfoBuilder();\n+\n+        objectclassInfoBuilder.setType(ObjectClass.ACCOUNT_NAME);\n+        objectclassInfoBuilder.addAllAttributeInfo(attributes);\n+\n+        final ObjectClassInfo objectclassInfo = objectclassInfoBuilder.build();\n+        schemaBld.defineObjectClass(objectclassInfo);\n+\n+        /*\n+         * Note: AuthenticateOp, and all the 'SPIOperation'-s are by default\n+         * added by Reflection API to the Schema.\n+         *\n+         * See for details: FrameworkUtil.getDefaultSupportedOperations()\n+         * ReflectionUtil.getAllInterfaces(connector); is the line that *does*\n+         * acquire the implemented interfaces by the connector class.\n+         */\n+        if (!provisioning.isAuthenticationSupported()) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.info(\"Authentication is not supported.\");\n+            }\n+\n+            schemaBld.removeSupportedObjectClass(\n+                    AuthenticateOp.class, objectclassInfo);\n+        }\n+\n+        if (!provisioning.isSyncSupported()) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.info(\"Synchronization is not supported.\");\n+            }\n+\n+            schemaBld.removeSupportedObjectClass(\n+                    SyncOp.class, objectclassInfo);\n+        }\n+\n+        schema = schemaBld.build();\n+        return schema;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public FilterTranslator<Operand> createFilterTranslator(\n+            ObjectClass oclass,\n+            OperationOptions options) {\n+\n+        if (oclass == null || (!oclass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        return new WebServiceFilterTranslator();\n+\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void executeQuery(\n+            ObjectClass objClass,\n+            Operand query,\n+            ResultsHandler handler,\n+            OperationOptions options) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Execute query\");\n+        }\n+\n+        // check objectclass\n+        if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check handler\n+        if (handler == null) {\n+            throw new IllegalArgumentException(\"Invalid handler\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        try {\n+\n+            Set<WSUser> resultSet = provisioning.query(query);\n+\n+            Iterator i = resultSet.iterator();\n+\n+            WSUser user = null;\n+            boolean handle = true;\n+\n+            while (i.hasNext() && handle) {\n+                user = (WSUser) i.next();\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Found user: \" + user.getAccountid());\n+                }\n+\n+                handle = handler.handle(\n+                        buildConnectorObject(user.getAttributes()).build());\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Handle:\" + handle);\n+                }\n+            }\n+\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void test() {\n+        connection.test();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Uid update(ObjectClass objclass,\n+            Uid uid,\n+            Set<Attribute> replaceAttributes,\n+            OperationOptions options) {\n+        // check objectclass\n+        if (objclass == null || (!objclass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check accountid\n+        if (uid == null) {\n+            throw new IllegalArgumentException(\"No uid specified\");\n+        }\n+\n+        // check attributes\n+        if (replaceAttributes == null || replaceAttributes.size() == 0) {\n+            throw new IllegalArgumentException(\"No attribute specified\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        // check schema\n+        if (schema == null || wsAttributes == null) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Reload schema\");\n+            }\n+\n+            schema();\n+        }\n+\n+        // to be user in order to pass information to the web service\n+        Set<WSAttributeValue> attributes =\n+                new HashSet<WSAttributeValue>();\n+\n+        WSAttributeValue wsAttributeValue = null;\n+\n+        String attribute = null;\n+\n+        // retrieve attributes\n+        for (Attribute attr : replaceAttributes) {\n+            attribute = attr.getName();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Attribute name: \" + attribute);\n+            }\n+\n+            wsAttributeValue =\n+                    new WSAttributeValue(wsAttributes.get(attribute));\n+\n+            Object value = AttributeUtil.getSingleValue(attr);\n+\n+            if (value == null && !wsAttributeValue.isNullable()) {\n+                // TODO: provisioningexception\n+                throw new IllegalArgumentException(\n+                        \"Missing required parameter\");\n+            }\n+\n+            if (value instanceof GuardedString ||\n+                    value instanceof GuardedByteArray) {\n+\n+                wsAttributeValue.setValue(value.toString());\n+            } else {\n+                wsAttributeValue.setValue(value);\n+            }\n+\n+            attributes.add(wsAttributeValue);\n+        }\n+\n+        Uid uuid = null;\n+\n+        try {\n+\n+            // user creation\n+            uuid = new Uid(provisioning.update(uid.getUidValue(), attributes));\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Creation failed\", e);\n+            }\n+        }\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void sync(\n+            ObjectClass objClass,\n+            SyncToken token,\n+            SyncResultsHandler handler,\n+            final OperationOptions options) {\n+\n+        // check objectclass\n+        if (objClass == null || (!objClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check objectclass\n+        if (handler == null) {\n+            throw new IllegalArgumentException(\"Invalid handler\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        try {\n+\n+            Set<WSChange> changes = provisioning.sync();\n+\n+            SyncDeltaBuilder sdb = null;\n+\n+            Iterator i = changes.iterator();\n+            boolean handle = true;\n+\n+            while (i.hasNext() && handle) {\n+\n+                sdb = buildSyncDelta((WSChange) i.next());\n+                handle = handler.handle(sdb.build());\n+\n+            }\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Synchronization failed\");\n+            }\n+\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SyncToken getLatestSyncToken(ObjectClass objectClass) {\n+\n+        // check objectclass\n+        if (objectClass == null || (!objectClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        SyncToken token = null;\n+\n+        try {\n+\n+            token = new SyncToken(provisioning.getLatestChangeNumber());\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Resolve username failed\", e);\n+            }\n+        }\n+\n+        return token;\n+    }\n+\n+    @Override\n+    public Uid resolveUsername(ObjectClass objectClass, String username,\n+            OperationOptions options) {\n+\n+        // check objectclass\n+        if (objectClass == null || (!objectClass.equals(ObjectClass.ACCOUNT))) {\n+            throw new IllegalArgumentException(\"Invalid objectclass\");\n+        }\n+\n+        // check accountid\n+        if (username == null) {\n+            throw new IllegalArgumentException(\"No username specified\");\n+        }\n+\n+        // get web service client\n+        Provisioning provisioning = connection.getProvisioning();\n+        if (provisioning == null) {\n+            throw new IllegalStateException(\"Web Service client not found\");\n+        }\n+\n+        Uid uuid = null;\n+\n+        try {\n+\n+            String uid = provisioning.resolve(username);\n+            uuid = new Uid(uid);\n+\n+        } catch (ProvisioningException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Resolve username failed\", e);\n+            }\n+        }\n+\n+        return uuid;\n+\n+    }\n+\n+    private AttributeInfo buildAttribute(WSAttribute attribute) {\n+        final AttributeInfoBuilder builder = new AttributeInfoBuilder();\n+\n+        try {\n+\n+            if (attribute.isPassword()) {\n+                return OperationalAttributeInfos.PASSWORD;\n+            }\n+\n+            if (attribute.isKey()) {\n+                builder.setName(Name.NAME);\n+                builder.setReadable(true);\n+\n+                return builder.build();\n+            }\n+\n+            // Check the type\n+            Class.forName(\n+                    AttributeType.valueOf(attribute.getType()).getClassName());\n+\n+            builder.setName(attribute.getName());\n+            builder.setRequired(attribute.isNullable());\n+\n+            return builder.build();\n+\n+        } catch (ClassNotFoundException e) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Invalid data type\", e);\n+            }\n+\n+            throw new IllegalArgumentException(e);\n+\n+        } catch (Throwable t) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Unexpected exception\", t);\n+            }\n+\n+            throw new IllegalArgumentException(t);\n+        }\n+    }\n+\n+    private ConnectorObjectBuilder buildConnectorObject(\n+            Set<WSAttributeValue> attributes) {\n+\n+        ConnectorObjectBuilder bld = new ConnectorObjectBuilder();\n+\n+        String uid = null;\n+\n+        for (WSAttributeValue attribute : attributes) {\n+\n+            if (attribute.isKey()) {\n+                uid = attribute.getStringValue();\n+                bld.setName(uid);\n+            }\n+\n+            if (!attribute.isKey() && !attribute.isPassword()) {\n+\n+                if (attribute.getValue() == null) {\n+                    bld.addAttribute(AttributeBuilder.build(\n+                            attribute.getName()));\n+                } else {\n+                    bld.addAttribute(AttributeBuilder.build(\n+                            attribute.getName(), attribute.getValue()));\n+                }\n+\n+            }\n+        }\n+\n+        // To be sure that uid and name are present\n+        if (uid == null) {\n+            throw new IllegalStateException(\"Invalid uid\");\n+        }\n+\n+        // Add Uid attribute to object\n+        bld.setUid(new Uid(uid));\n+\n+        // Add objectclass\n+        bld.setObjectClass(ObjectClass.ACCOUNT);\n+\n+\n+        return bld;\n+    }\n+\n+    private String getAttributeName(WSAttribute attribute) {\n+        String attributeName = null;\n+\n+        if (attribute.isKey())\n+            attributeName = Name.NAME;\n+\n+        if (attribute.isPassword())\n+            attributeName = OperationalAttributeInfos.PASSWORD.getName();\n+\n+        if (!attribute.isKey() && !attribute.isPassword())\n+            attributeName = attribute.getName();\n+\n+        return attributeName;\n+    }\n+\n+    private SyncDeltaBuilder buildSyncDelta(WSChange change) {\n+        SyncDeltaBuilder bld = new SyncDeltaBuilder();\n+\n+        ConnectorObject object =\n+                buildConnectorObject(change.getAttributes()).build();\n+\n+        bld.setToken(new SyncToken(change.getId()));\n+        bld.setObject(object);\n+\n+        if (\"CREATE_OR_UPDATE\".equalsIgnoreCase(change.getType())) {\n+            bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n+        }\n+\n+        if (\"DELETE\".equalsIgnoreCase(change.getType())) {\n+            bld.setDeltaType(SyncDeltaType.DELETE);\n+        }\n+\n+        bld.setUid(object.getUid());\n+\n+        return bld;\n+    }\n+}"},{"sha":"07fa410b27c3eb0dc3f5cdbdee0916653abd74a3","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceFilterTranslator.java","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceFilterTranslator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceFilterTranslator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceFilterTranslator.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,224 @@\n+/*\n+ * ====================\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ * Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.     \n+ * \n+ * The contents of this file are subject to the terms of the Common Development \n+ * and Distribution License(\"CDDL\") (the \"License\").  You may not use this file \n+ * except in compliance with the License.\n+ * \n+ * You can obtain a copy of the License at \n+ * http://IdentityConnectors.dev.java.net/legal/license.txt\n+ * See the License for the specific language governing permissions and limitations \n+ * under the License. \n+ * \n+ * When distributing the Covered Code, include this CDDL Header Notice in each file\n+ * and include the License file at identityconnectors/legal/license.txt.\n+ * If applicable, add the following below this CDDL Header, with the fields \n+ * enclosed by brackets [] replaced by your own identifying information: \n+ * \"Portions Copyrighted [year] [name of copyright owner]\"\n+ * ====================\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.filter.*;\n+import org.identityconnectors.common.StringUtil;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operator;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operand;\n+\n+/**\n+ * This is an implementation of AbstractFilterTranslator that gives a concrete representation\n+ * of which filters can be applied at the connector level (natively). If the \n+ * WebService doesn't support a certain expression type, that factory\n+ * method should return null. This level of filtering is present only to allow any\n+ * native contructs that may be available to help reduce the result set for the framework,\n+ * which will (strictly) reapply all filters specified after the connector does the initial\n+ * filtering.<p><p>Note: The generic query type is most commonly a String, but does not have to be.\n+ * \n+ * @author fabio\n+ * @version 1.0\n+ * @since 1.0\n+ */\n+public class WebServiceFilterTranslator\n+        extends AbstractFilterTranslator<Operand> {\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createContainsExpression(\n+            ContainsFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.CONTAINS, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createEndsWithExpression(\n+            EndsWithFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.ENDS, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createStartsWithExpression(\n+            StartsWithFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.STARTS, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createEqualsExpression(\n+            EqualsFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.EQ, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createAndExpression(\n+            Operand leftExpression, Operand rightExpression) {\n+\n+        if (leftExpression == null || rightExpression == null) return null;\n+\n+        Set<Operand> operands = new HashSet<Operand>();\n+        operands.add(leftExpression);\n+        operands.add(rightExpression);\n+\n+        return new Operand(Operator.AND, operands);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createOrExpression(\n+            Operand leftExpression, Operand rightExpression) {\n+\n+        if (leftExpression == null || rightExpression == null) return null;\n+\n+        Set<Operand> operands = new HashSet<Operand>();\n+        operands.add(leftExpression);\n+        operands.add(rightExpression);\n+\n+        return new Operand(Operator.OR, operands);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createGreaterThanExpression(\n+            GreaterThanFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.GT, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createGreaterThanOrEqualExpression(\n+            GreaterThanOrEqualFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.LT, name, value, !not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createLessThanExpression(\n+            LessThanFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.LT, name, value, not);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected Operand createLessThanOrEqualExpression(\n+            LessThanOrEqualFilter filter, boolean not) {\n+\n+        if (filter == null) return null;\n+\n+        String name = filter.getAttribute().getName();\n+        String value = AttributeUtil.getAsStringValue(filter.getAttribute());\n+        if (StringUtil.isBlank(value)) {\n+            return null;\n+        }\n+\n+        return new Operand(Operator.GT, name, value, !not);\n+    }\n+}"},{"sha":"4c8bd3c5fa4e6aedf60ea6ddfd4f3de2de0ce21e","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/resources/beans.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Fbeans.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://cxf.apache.org/jaxws \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/context\n+        http://www.springframework.org/schema/context/spring-context.xsd\">\n+   \n+    <bean id=\"proxyFactory\" class=\"org.apache.cxf.jaxws.JaxWsProxyFactoryBean\">\n+        <property name=\"serviceClass\" value=\"\"/>\n+        <property name=\"address\" value=\"\"/>\n+    </bean>\n+\n+</beans>\n+"},{"sha":"ed53eb99ae1beb2c259262581042a7cfcdf53034","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/resources/log4j.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration>\n+    <appender name=\"main\" class=\"org.apache.log4j.RollingFileAppender\">\n+        <param name=\"File\" value=\"/tmp/staticws.log\"/>\n+        <param name=\"Append\" value=\"true\"/>\n+        <param name=\"MaxFileSize\" value=\"10240KB\" />\n+        <param name=\"MaxBackupIndex\" value=\"10\" />\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <root>\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"main\"/>\n+    </root>\n+</log4j:configuration>\n+"},{"sha":"8ac22a6327d8abd3c0b4680f05be11d5cd11a3a2","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/resources/org/syncope/identityconnectors/bundles/staticwebservice/Messages.properties","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FMessages.properties?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,6 @@\n+STATICWEBSERVICE_CONNECTOR = Stati Web Service Connector\n+\n+ENDPOINT_DISPLAY = Service Endpoint\n+ENDPOINT_HELP = Service Endpoint\n+CLASSNAME_DISPLAY = Service name\n+CLASSNAME_HELP = Service name"},{"sha":"6423983557e8d71ea55bf47c91957dbd06488ec6","filename":"identityconnectors/bundles/staticws/staticwebservice/src/test/java/org/syncope/identityconnectors/bundles/StaticWSTestITCase.java","status":"added","additions":339,"deletions":0,"changes":339,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,339 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.identityconnectors.common.IOUtil;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.api.APIConfiguration;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConfigurationProperty;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.identityconnectors.framework.api.ConnectorKey;\n+import org.identityconnectors.framework.api.operations.APIOperation;\n+import org.identityconnectors.framework.api.operations.CreateApiOp;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeInfo;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n+import org.identityconnectors.framework.common.objects.ResultsHandler;\n+import org.identityconnectors.framework.common.objects.Schema;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n+import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n+\n+public class StaticWSTestITCase {\n+\n+    private static final Logger log =\n+            LoggerFactory.getLogger(WebServiceConnector.class);\n+\n+    final private String ENDPOINT_PREFIX =\n+            \"http://localhost:8888/wstarget/services\";\n+\n+    final private String SERVICE =\n+            \"/provisioning\";\n+\n+    final private String bundlename =\n+            \"org.syncope.identityconnectors.bundles.staticwebservice\";\n+\n+    final private String bundleversion =\n+            \"0.1-SNAPSHOT\";\n+\n+    final private String bundleclass =\n+            WebServiceConnector.class.getName();\n+\n+    private ConnectorFacade connector;\n+\n+    /**\n+     * Uses the ConnectorInfoManager to retrieve a ConnectorInfo object\n+     * for the connector.\n+     */\n+    @Before\n+    public void init() {\n+\n+        ConnectorInfoManagerFactory connectorInfoManagerFactory =\n+                ConnectorInfoManagerFactory.getInstance();\n+\n+        File bundleDirectory = new File(\"target\");\n+\n+        APIConfiguration apiConfig = null;\n+\n+        Throwable t = null;\n+\n+        try {\n+            // take bundles repository (directory or jar).\n+            URL url = IOUtil.makeURL(\n+                    bundleDirectory, \"staticwebservice-0.1-SNAPSHOT.jar\");\n+\n+\n+            assertNotNull(url);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"URL: \" + url.toString());\n+            }\n+\n+            ConnectorInfoManager manager =\n+                    connectorInfoManagerFactory.getLocalManager(url);\n+\n+            assertNotNull(manager);\n+\n+            // list connectors info\n+            List<ConnectorInfo> infos = manager.getConnectorInfos();\n+            if (infos != null) {\n+                log.debug(\"infos size: \" + infos.size());\n+                for (ConnectorInfo i : infos) {\n+                    log.debug(\"Name: \" + i.getConnectorDisplayName());\n+                }\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nBundle name: \" + bundlename +\n+                        \"\\nBundle version: \" + bundleversion +\n+                        \"\\nBundle class: \" + bundleclass);\n+            }\n+\n+            // specify a connector.\n+            ConnectorKey key = new ConnectorKey(\n+                    bundlename,\n+                    bundleversion,\n+                    bundleclass);\n+\n+            assertNotNull(key);\n+\n+            // get the specified connector.\n+            ConnectorInfo info = manager.findConnectorInfo(key);\n+\n+            assertNotNull(info);\n+\n+            // create default configuration\n+            apiConfig = info.createDefaultAPIConfiguration();\n+\n+            assertNotNull(apiConfig);\n+\n+        } catch (IOException e) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Bundle file not found\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+\n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                apiConfig.getConfigurationProperties();\n+\n+        assertNotNull(properties);\n+\n+        // Print out what the properties are (not necessary)\n+        List<String> propertyNames = properties.getPropertyNames();\n+\n+        for (String propName : propertyNames) {\n+            ConfigurationProperty prop = properties.getProperty(propName);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nProperty Name: \" + prop.getName() +\n+                        \"\\nProperty Type: \" + prop.getType());\n+            }\n+        }\n+\n+        // Set all of the ConfigurationProperties needed by the connector.\n+        properties.setPropertyValue(\n+                \"endpoint\", ENDPOINT_PREFIX + SERVICE);\n+        properties.setPropertyValue(\n+                \"servicename\", Provisioning.class.getName());\n+\n+        // Use the ConnectorFacadeFactory's newInstance() method to get\n+        // a new connector.\n+        connector =\n+                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+\n+        assertNotNull(connector);\n+\n+        // Make sure we have set up the Configuration properly\n+        t = null;\n+        try {\n+\n+            connector.validate();\n+            connector.test();\n+\n+        } catch (RuntimeException re) {\n+            t = re;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    /**\n+     * Checks if a particular operation is supported.\n+     */\n+    @Test\n+    public void checkForOperation() {\n+        Set<Class<? extends APIOperation>> ops =\n+                connector.getSupportedOperations();\n+\n+        // check to see if the set contains the operation you care about\n+        assertTrue(ops.contains(CreateApiOp.class));\n+    }\n+\n+    /**\n+     * Gets schema from the target resource.\n+     */\n+    @Test\n+    public void schema() {\n+        Schema schema = connector.schema();\n+\n+        assertNotNull(schema);\n+\n+        Set<ObjectClassInfo> ocis = schema.getObjectClassInfo();\n+\n+        assertNotNull(ocis);\n+\n+        Set<AttributeInfo> attrs = null;\n+\n+        for (ObjectClassInfo oci : ocis) {\n+            attrs = oci.getAttributeInfo();\n+\n+            assertNotNull(attrs);\n+\n+            for (AttributeInfo attr : attrs) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\nAttribute name: \" + attr.getName() +\n+                            \"\\nAttribute type: \" + attr.getType().getName());\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Seraches for user accounts.\n+     */\n+    @Test\n+    public void search() {\n+        final List<ConnectorObject> results = new ArrayList<ConnectorObject>();\n+\n+        ResultsHandler resultsHandler = new ResultsHandler() {\n+\n+            @Override\n+            public boolean handle(ConnectorObject obj) {\n+                results.add(obj);\n+                return true;\n+            }\n+        };\n+\n+        Filter usernameFilter = FilterBuilder.startsWith(\n+                AttributeBuilder.build(Name.NAME, \"test\"));\n+\n+        Filter nameFilter = FilterBuilder.equalTo(\n+                AttributeBuilder.build(\"nome\", \"jhon\"));\n+\n+        Filter surnameFilter = FilterBuilder.equalTo(\n+                AttributeBuilder.build(\"cognome\", \"doe\"));\n+\n+        Filter filter = FilterBuilder.or(\n+                usernameFilter,\n+                FilterBuilder.and(nameFilter, surnameFilter));\n+\n+        connector.search(ObjectClass.ACCOUNT, filter, resultsHandler, null);\n+\n+        // pay attention: results will be returned according to the filter\n+        assertFalse(results.isEmpty());\n+\n+        if (log.isDebugEnabled()) {\n+            for (ConnectorObject obj : results) {\n+                log.debug(\n+                        \"\\nName: \" + obj.getName() +\n+                        \"\\nUID: \" + obj.getUid());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates user account.\n+     */\n+    @Test\n+    public void create() {\n+        Set<Attribute> attrs = new HashSet<Attribute>();\n+        attrs.add(new Name(\"TESTUSER\"));\n+\n+        attrs.add(AttributeBuilder.buildPassword(\"TESTPASSWORD\".toCharArray()));\n+\n+        attrs.add(AttributeBuilder.build(\"cognome\", \"Doe\"));\n+        attrs.add(AttributeBuilder.build(\"privacy\", true));\n+        attrs.add(AttributeBuilder.build(\"data di nascita\", \"12/03/1990\"));\n+\n+        Uid userUid = connector.create(ObjectClass.ACCOUNT, attrs, null);\n+\n+        assertNotNull(userUid);\n+        assertEquals(\"TESTUSER\", userUid.getUidValue());\n+    }\n+\n+    /**\n+     * Updates user account.\n+     */\n+    @Test\n+    public void update() {\n+        Set attrs = new HashSet();\n+        attrs.add(new Name(\"TESTUSER\"));\n+\n+        attrs.add(AttributeBuilder.buildPassword(\"NEWPASSWORD\".toCharArray()));\n+\n+        Uid userUid = connector.update(\n+                ObjectClass.ACCOUNT, new Uid(\"TESTUSER\"), attrs, null);\n+\n+        assertNotNull(userUid);\n+        assertEquals(\"TESTUSER\", userUid.getUidValue());\n+    }\n+\n+    /**\n+     * Deletes user account.\n+     */\n+    @Test\n+    public void delete() {\n+        Uid userUid = connector.authenticate(\n+                ObjectClass.ACCOUNT, \"TESTUSER\",\n+                new GuardedString(\"TESTPASSWORD\".toCharArray()),\n+                null);\n+\n+        assertNotNull(userUid);\n+\n+        connector.delete(ObjectClass.ACCOUNT, userUid, null);\n+    }\n+}"},{"sha":"3e34b09d6a98b09650be84577097e1111d76c04c","filename":"identityconnectors/bundles/staticws/utilities/pom.xml","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+            xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>staticws</artifactId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+        <version>0.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+    <artifactId>utilities</artifactId>\n+\n+    <name>identityconnectors: bundles: static web service: utilities</name>\n+    <url>http://maven.apache.org</url>\n+\n+    <packaging>jar</packaging>\n+\n+    <dependencies>\n+\n+        <!-- CXF -->\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+        </dependency>\n+\n+        <!-- Spring -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+    </dependencies>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+</project>"},{"sha":"887a1d45d85d42f621b0f3edd86a2ae3a78b33d4","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSAttribute.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,122 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n+\n+public class WSAttribute {\n+\n+    /**\n+     * The name of the attribute.\n+     */\n+    private String name = null;\n+\n+    /**\n+     * The type of the attribute:\n+     * String, Long, Double, Boolean, Character, Float, Integer, URI,\n+     * File, GuardedByteArray, GuardedString, Date.\n+     */\n+    private String type = \"String\";\n+\n+    /**\n+     * Specifies if the attribute is a key.\n+     */\n+    private boolean key = false;\n+\n+    /**\n+     * Specifies if the attribute is the password.\n+     */\n+    private boolean password = false;\n+\n+    /**\n+     * Specifies if the attribute is nullable.\n+     */\n+    private boolean nullable = true;\n+\n+    public WSAttribute() {\n+    }\n+\n+    /**\n+     * Constructor: default attribute is a string nullable.\n+     * \n+     * @param name defines the name of the attribute.\n+     */\n+    public WSAttribute(String name) {\n+        this.name = name;\n+    }\n+\n+    /**\n+     * Constructor: default attribute is nullable.\n+     *\n+     * @param name defines the name of the attribute.\n+     * @param type defines the type of the attribute.\n+     */\n+    public WSAttribute(String name, String type) {\n+        this.name = name;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Constructor: default attribute is not a key nor a password.\n+     *\n+     * @param name defines the name of the attribute.\n+     * @param type defines the type of the attribute.\n+     * @param isNullable defines if the attribute is nullable.\n+     */\n+    public WSAttribute(String name, String type, Boolean nullable) {\n+        this.name = name;\n+        this.type = type;\n+        this.nullable = nullable;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public boolean isKey() {\n+        return key;\n+    }\n+\n+    public void setKey(boolean key) {\n+        this.key = key;\n+        this.nullable = false;\n+    }\n+\n+    public boolean isNullable() {\n+        return nullable;\n+    }\n+\n+    public void setNullable(boolean nullable) {\n+        this.nullable = nullable;\n+    }\n+\n+    public boolean isPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(boolean password) {\n+        this.password = password;\n+    }\n+}"},{"sha":"756fd65563a389c12af8895859265194df61bcaf","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSAttributeValue.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,128 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.Date;\n+\n+public class WSAttributeValue extends WSAttribute {\n+\n+    private Object value = null;\n+\n+    public WSAttributeValue() {\n+        super();\n+    }\n+\n+    public WSAttributeValue(WSAttribute wsAttribute) {\n+        super();\n+\n+        if (wsAttribute != null) {\n+            setType(wsAttribute.getType());\n+            setName(wsAttribute.getName());\n+            setKey(wsAttribute.isKey());\n+            setNullable(wsAttribute.isNullable());\n+            setPassword(wsAttribute.isPassword());\n+        }\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(Object value) {\n+        this.value = value;\n+    }\n+\n+    public String getStringValue() {\n+        if (getType() == null || !\"String\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (String) value;\n+    }\n+\n+    public Boolean getBooleanValue() {\n+        if (getType() == null || !\"Boolean\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Boolean) value;\n+    }\n+\n+    public Long getLongValue() {\n+        if (getType() == null || !\"Long\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Long) value;\n+    }\n+\n+    public Float getFloadValue() {\n+        if (getType() == null || !\"Float\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Float) value;\n+    }\n+\n+    public Double getDoubleValue() {\n+        if (getType() == null || !\"Double\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Double) value;\n+    }\n+\n+    public Integer getIntegerValue() {\n+        if (getType() == null || !\"Integer\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Integer) value;\n+    }\n+\n+    public Date getDateValue() {\n+        if (getType() == null || !\"Date\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Date) value;\n+    }\n+\n+    public Character getCharacterValue() {\n+        if (getType() == null || !\"Character\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (Character) value;\n+    }\n+\n+    public URI getURIValue() {\n+        if (getType() == null || !\"URI\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (URI) value;\n+    }\n+\n+    public File getFileValue() {\n+        if (getType() == null || !\"File\".equals(getType())) {\n+            throw new IllegalArgumentException(\"Invalid type declaration\");\n+        }\n+\n+        return (File) value;\n+    }\n+}"},{"sha":"c5c359b1b25967ff7dfbff4bb8b70114b3c9a0ed","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSChange.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,62 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n+\n+import java.util.Set;\n+\n+public class WSChange {\n+\n+    /**\n+     * Attributes changed.\n+     */\n+    private Set<WSAttributeValue> attributes;\n+\n+    /**\n+     * ID of the change.\n+     */\n+    private int id;\n+\n+    /**\n+     * Type of the change:\n+     * - CREATE_OR_UPDATE\n+     * - DELETE\n+     */\n+    private String type;\n+\n+    public Set<WSAttributeValue> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(Set<WSAttributeValue> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+}"},{"sha":"6177c08337dc2d23da0cf12afef4d34b1d67654f","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSUser.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,56 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class WSUser {\n+\n+    private String accountid;\n+\n+    private Set<WSAttributeValue> attributes;\n+\n+    public String getAccountid() {\n+        return accountid;\n+    }\n+\n+    public void setAccountid(String accountid) {\n+        this.accountid = accountid;\n+    }\n+\n+    public Set<WSAttributeValue> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(Set<WSAttributeValue> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public void addAttribute(WSAttributeValue attribute) {\n+        if (attributes == null)\n+            attributes = new HashSet<WSAttributeValue>();\n+\n+        this.attributes.add(attribute);\n+    }\n+\n+    public WSUser() {\n+    }\n+\n+    public WSUser(String accountid, Set<WSAttributeValue> attributes) {\n+        this.accountid = accountid;\n+        this.attributes = attributes;\n+    }\n+}"},{"sha":"7ef4c06654a1fb119ef75a4f5ff32c2d1e5d266b","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/exceptions/ProvisioningException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,33 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.exceptions;\n+\n+public class ProvisioningException extends Exception {\n+\n+    /**\n+     * Creates a new instance of <code>ProvisioningException</code> without detail message.\n+     */\n+    public ProvisioningException() {\n+    }\n+\n+\n+    /**\n+     * Constructs an instance of <code>ProvisioningException</code> with the specified detail message.\n+     * @param msg the detail message.\n+     */\n+    public ProvisioningException(String msg) {\n+        super(msg);\n+    }\n+}"},{"sha":"24d49979dd93b1aa8d4426b2af8b9c7ffc5e1f50","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/provisioning/interfaces/Provisioning.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fprovisioning%2Finterfaces%2FProvisioning.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fprovisioning%2Finterfaces%2FProvisioning.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fprovisioning%2Finterfaces%2FProvisioning.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,144 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces;\n+\n+import java.util.Set;\n+import javax.jws.WebMethod;\n+import javax.jws.WebParam;\n+import javax.jws.WebService;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttribute;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttributeValue;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSChange;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSUser;\n+import org.syncope.identityconnectors.bundles.staticwebservice.exceptions.ProvisioningException;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operand;\n+\n+\n+@WebService\n+public interface Provisioning {\n+\n+    /**\n+     * Checks if authentication is supported.\n+     * @return true if the resource support authentication.\n+     */\n+    @WebMethod(operationName = \"isAuthenticationSupported\")\n+    public Boolean isAuthenticationSupported();\n+\n+    /**\n+     * Checks if synchronization is supported.\n+     * @return true if the resource support synchronization.\n+     */\n+    @WebMethod(operationName = \"isSyncSupported\")\n+    public Boolean isSyncSupported();\n+\n+    /**\n+     * Verify user creentials\n+     * @param username\n+     * @param password\n+     * @return\n+     * the accountid of the first account that match username and password.\n+     * @throws\n+     * ProvisioningException in case of authentication failed.\n+     */\n+    @WebMethod(operationName = \"authenticate\")\n+    public String authenticate(\n+            @WebParam(name = \"username\") final String username,\n+            @WebParam(name = \"password\") final String password)\n+            throws ProvisioningException;\n+\n+    /**\n+     * Returns \"OK\" if the resource is available.\n+     * @return the string \"OK\" in case of availability of the resource.\n+     */\n+    @WebMethod(operationName = \"checkAlive\")\n+    public String checkAlive();\n+\n+    /**\n+     * Returns the schema.\n+     * @return a set of attributes.\n+     */\n+    @WebMethod(operationName = \"schema\")\n+    public Set<WSAttribute> schema();\n+\n+    /**\n+     * Creates user account.\n+     * @param a set of account attributes.\n+     * @return accountid of the account created.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @WebMethod(operationName = \"create\")\n+    public String create(\n+            @WebParam(name = \"data\") final Set<WSAttributeValue> data)\n+            throws ProvisioningException;\n+\n+    /**\n+     * Updates user account.\n+     * @param accountid.\n+     * @param a set of attributes to be updated.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure\n+     */\n+    @WebMethod(operationName = \"update\")\n+    public String update(\n+            @WebParam(name = \"accountid\") final String accountid,\n+            @WebParam(name = \"data\") final Set<WSAttributeValue> data)\n+            throws ProvisioningException;\n+\n+    /**\n+     * Deletes user account.\n+     * @param accountid.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @WebMethod(operationName = \"delete\")\n+    public String delete(@WebParam(name = \"accountid\") final String accountid)\n+            throws ProvisioningException;\n+\n+    /**\n+     * Searches for user accounts.\n+     * @param query filter\n+     * @return a set of user accounts.\n+     */\n+    @WebMethod(operationName = \"query\")\n+    public Set<WSUser> query(@WebParam(name = \"query\") final Operand query);\n+\n+    /**\n+     * Returns accountid related to the specified username.\n+     * @param username.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure or username not found.\n+     */\n+    @WebMethod(operationName = \"resolve\")\n+    public String resolve(@WebParam(name = \"username\") final String username)\n+            throws ProvisioningException;\n+\n+    /**\n+     * Gets the latest change id.\n+     * @return change id.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @WebMethod(operationName = \"getLatestChangeNumber\")\n+    public int getLatestChangeNumber()\n+            throws ProvisioningException;\n+\n+    /**\n+     * Returns changes to be synchronized.\n+     * @return a set of changes\n+     * @throws ProvisioningException in case of failure\n+     */\n+    @WebMethod(operationName = \"sync\")\n+    public Set<WSChange> sync()\n+            throws ProvisioningException;\n+}"},{"sha":"6b28fc7fc40100b042dc2f33561d14a44c73c4be","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/utilities/AttributeType.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FAttributeType.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.utilities;\n+\n+import java.text.DecimalFormat;\n+import java.text.Format;\n+import java.text.SimpleDateFormat;\n+\n+public enum AttributeType {\n+\n+    String(\"java.lang.String\"),\n+    Long(\"java.lang.Long\"),\n+    Double(\"java.lang.Double\"),\n+    Boolean(\"java.lang.Boolean\"),\n+    Character(\"java.lang.Character\"),\n+    Float(\"java.lang.Float\"),\n+    Integer(\"java.lang.Integer\"),\n+    URI(\"java.net.uri\"),\n+    File(\"java.io.file\"),\n+    // Date type is not supported by identityconnectors\n+    Date(\"java.lang.String\");\n+\n+    final private String className;\n+\n+    private Format formatter;\n+\n+    AttributeType(String className) {\n+        this.className = className;\n+        this.formatter = null;\n+    }\n+\n+    public String getClassName() {\n+        return className;\n+    }\n+\n+    public Format getBasicFormatter() {\n+        if (formatter == null) {\n+            switch (this) {\n+                case Date:\n+                    this.formatter = new SimpleDateFormat();\n+                case Long:\n+                case Double:\n+                    this.formatter = new DecimalFormat();\n+            }\n+        }\n+\n+        return formatter;\n+    }\n+\n+    public boolean isConversionPatternNeeded() {\n+        return this == AttributeType.Date || this == AttributeType.Double || this == AttributeType.Long;\n+    }\n+}"},{"sha":"b3633b8aeec1784a65c1975cbb10147e07be3f64","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/utilities/Operand.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,145 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.utilities;\n+\n+import java.util.Set;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttribute;\n+\n+public class Operand extends WSAttribute {\n+\n+    private Operator op;\n+\n+    private String value;\n+\n+    private Set<Operand> operands;\n+\n+    private boolean logical;\n+\n+    boolean not;\n+\n+    public Operand() {\n+        super(null);\n+        this.op = Operator.EQ;\n+        this.value = \"*\";\n+        this.not = false;\n+        this.logical = false;\n+        this.operands = null;\n+    }\n+\n+    public Operand(Operator op, String name, String value) {\n+        super(name);\n+        this.op = op;\n+        this.value = value;\n+        this.not = false;\n+        this.logical = false;\n+        this.operands = null;\n+    }\n+\n+    public Operand(Operator op, Set<Operand> operands) {\n+        super(null);\n+        this.value = null;\n+        this.op = op;\n+        this.operands = operands;\n+        this.logical = true;\n+    }\n+\n+    public Operand(Operator op, String name, String value, boolean not) {\n+        super(name);\n+        this.op = op;\n+        this.value = value;\n+        this.not = not;\n+        this.logical = false;\n+        this.operands = null;\n+    }\n+\n+    public Operand(Operator op, Set<Operand> operands, boolean not) {\n+        super(null);\n+        this.value = null;\n+        this.op = op;\n+        this.operands = operands;\n+        this.logical = true;\n+        this.not = not;\n+    }\n+\n+    public Operator getOp() {\n+        return op;\n+    }\n+\n+    public Set<Operand> getOperands() {\n+        return operands;\n+    }\n+\n+    public void setOperands(Set<Operand> operands) {\n+        if (logical)\n+            this.operands = operands;\n+    }\n+\n+    public void setOp(final Operator op) {\n+        this.op = op;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final String value) {\n+        if (!logical)\n+            this.value = value;\n+    }\n+\n+    public boolean isLogical() {\n+        return logical;\n+    }\n+\n+    public void setLogical(boolean logical) {\n+        this.logical = logical;\n+    }\n+\n+    public boolean isNot() {\n+        return not;\n+    }\n+\n+    public void setNot(boolean not) {\n+        this.not = not;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuffer str = new StringBuffer();\n+\n+        if (not)\n+            str.append(\"(! \");\n+\n+        if (logical && operands != null) {\n+            str.append(\"(\" + this.op.toString());\n+            for (Operand o : operands)\n+                str.append(o.toString());\n+            str.append(\")\");\n+        } else\n+            str.append(\n+                    \"(\" +\n+                    getName() +\n+                    \" \" +\n+                    op.toString() +\n+                    \" \" +\n+                    getValue().toString() +\n+                    \")\");\n+\n+        if (not)\n+            str.append(\")\");\n+\n+        return str.toString();\n+    }\n+}"},{"sha":"91365dfa4208e29a9e32fd2d6897ff0b0a2471cf","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/utilities/Operator.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.utilities;\n+\n+public enum Operator {\n+\n+    GT(\">\"),\n+    LT(\"<\"),\n+    EQ(\"=\"),\n+    CONTAINS(\"contains\"),\n+    ENDS(\"endswith\"),\n+    STARTS(\"startswith\"),\n+    AND(\"&\"),\n+    OR(\"|\");\n+\n+    final private String op;\n+\n+    Operator(String op) {\n+        this.op = op;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return op;\n+    }\n+}"},{"sha":"60bc5307957958e20f7d941f440e1984a00edee8","filename":"identityconnectors/bundles/staticws/ws-target-resource/pom.xml","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,185 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project \n+            xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>staticws</artifactId>\n+        <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+        <version>0.1-SNAPSHOT</version>\n+    </parent>\n+    \n+    <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+    <artifactId>ws-target-resource</artifactId>\n+\n+    <name>identityconnectors: bundles: static web service: ws provisioning sample</name>\n+    <url>http://maven.apache.org</url>\n+\n+    <packaging>war</packaging>\n+\n+    <dependencies>\n+        <!-- Logger -->\n+        <dependency>\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+        </dependency>\n+\n+        <!-- CXF Dependencies -->\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.cxf</groupId>\n+            <artifactId>cxf-rt-transports-http</artifactId>\n+        </dependency>\n+\n+        <!-- Spring Dependencies -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+        <!-- to be excluded to deploy on jetty and test the connector -->\n+        <dependency>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-activation_1.1_spec</artifactId>\n+            <version>1.0.2</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <!-- utilities -->\n+        <dependency>\n+            <groupId>org.syncope.identityconnectors.bundles.staticwebservice</groupId>\n+            <artifactId>utilities</artifactId>\n+            <version>${parent.version}</version>\n+        </dependency>\n+\n+        <!-- Test dependencies -->\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-test</artifactId>\n+            <scope>test</scope>\n+            <type>jar</type>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+\n+    <repositories>\n+        \n+        <repository>\n+            <id>ibiblio</id>\n+            <name>ibiblio mirror for maven 2</name>\n+            <url>http://mirrors.ibiblio.org/pub/mirrors/maven2/</url>\n+        </repository>\n+\n+        <repository>\n+            <id>jboss</id>\n+            <url>http://repository.jboss.com/maven2/</url>\n+            <releases>\n+                <enabled>true</enabled>\n+            </releases>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+        </repository>\n+\n+    </repositories>\n+\n+    <build>\n+        <plugins>\n+\n+            <!-- Test Plugins -->\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>failsafe-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <encoding>utf-8</encoding>\n+                </configuration>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.mortbay.jetty</groupId>\n+                <artifactId>maven-jetty-plugin</artifactId>\n+                <configuration>\n+                    <scanIntervalSeconds>10</scanIntervalSeconds>\n+                    <stopKey>foo</stopKey>\n+                    <stopPort>9999</stopPort>\n+\n+                    <connectors>\n+                        <connector implementation=\"org.mortbay.jetty.nio.SelectChannelConnector\">\n+                            <port>8888</port>\n+                            <maxIdleTime>60000</maxIdleTime>\n+                        </connector>\n+                    </connectors>\n+                    \n+                    <contextPath>/wstarget</contextPath>\n+                </configuration>\n+\n+                <executions>\n+                    <execution>\n+                        <id>start-jetty</id>\n+                        <phase>pre-integration-test</phase>\n+\n+                        <goals>\n+                            <goal>run-war</goal>\n+                        </goals>\n+\n+                        <configuration>\n+                            <scanIntervalSeconds>0</scanIntervalSeconds>\n+                            <daemon>true</daemon>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>stop-jetty</id>\n+                        <phase>post-integration-test</phase>\n+                        <goals>\n+                            <goal>stop</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+        </plugins>\n+    </build>\n+</project>\n+"},{"sha":"7481e8c0cc471bf41a2aa26167ddd4fbb00867b3","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,296 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.staticwebservice.wstarget;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.jws.WebService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttribute;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttributeValue;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSChange;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSUser;\n+import org.syncope.identityconnectors.bundles.staticwebservice.exceptions.ProvisioningException;\n+import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operand;\n+\n+@WebService(endpointInterface = \"org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning\",\n+serviceName = \"Provisioning\")\n+public class ProvisioningImpl implements Provisioning {\n+\n+    private static final Logger log =\n+            LoggerFactory.getLogger(Provisioning.class);\n+\n+    /**\n+     * Returns true if authentication is supported false otherwise.\n+     * @return true if authentication is supported false otherwise.\n+     */\n+    @Override\n+    public Boolean isAuthenticationSupported() {\n+        return Boolean.TRUE;\n+    }\n+\n+    /**\n+     * Returns true if synchronization is supported false otherwise.\n+     * @return true if synchronization is supported false otherwise.\n+     */\n+    @Override\n+    public Boolean isSyncSupported() {\n+        return Boolean.TRUE;\n+    }\n+\n+    /**\n+     * Verify user creentials\n+     * @param username\n+     * @param password\n+     * @return \n+     * the accountid of the first account that match username and password.\n+     * @throws\n+     * ProvisioningException in case of authentication failed.\n+     */\n+    @Override\n+    public String authenticate(final String username, final String password)\n+            throws ProvisioningException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nUsername: \" + username +\n+                    \"\\nPassword: \" + password);\n+        }\n+\n+        return \"TESTUSER\";\n+    }\n+\n+    /**\n+     * Returns \"OK\" if the resource is available.\n+     * @return the string \"OK\" in case of availability of the resource.\n+     */\n+    @Override\n+    public String checkAlive() {\n+        return \"OK\";\n+    }\n+\n+    /**\n+     * Returns the schema.\n+     * @return a set of attributes.\n+     */\n+    @Override\n+    public Set<WSAttribute> schema() {\n+        Set<WSAttribute> attrs = new HashSet<WSAttribute>();\n+\n+        WSAttribute attr = null;\n+\n+        attr = new WSAttribute(\"nome\");\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"cognome\");\n+        attr.setNullable(false);\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"username\");\n+        attr.setKey(true);\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"password\");\n+        attr.setPassword(true);\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"data di nascita\", \"Date\", false);\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"privacy\", \"Boolean\", false);\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"altezza\", \"Double\");\n+        attrs.add(attr);\n+\n+        attr = new WSAttribute(\"eta\", \"Long\");\n+        attrs.add(attr);\n+\n+        return attrs;\n+    }\n+\n+    /**\n+     * Creates user account.\n+     * @param a set of account attributes.\n+     * @return accountid of the account created.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @Override\n+    public String create(final Set<WSAttributeValue> data)\n+            throws ProvisioningException {\n+\n+        String res = null;\n+\n+\n+        for (WSAttributeValue value : data) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nName: \" + value.getName() +\n+                        \"\\nType: \" + value.getType() +\n+                        \"\\nNullable: \" + value.isNullable() +\n+                        \"\\nKey: \" + value.isKey() +\n+                        \"\\nPassword: \" + value.isPassword() +\n+                        \"\\nValue: \" + value.getValue().toString());\n+            }\n+\n+            if (value.isKey())\n+                res = value.getValue().toString();\n+        }\n+\n+        return res;\n+    }\n+\n+    /**\n+     * Deletes user account.\n+     * @param accountid.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @Override\n+    public String delete(final String accountid) throws ProvisioningException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Account name: \" + accountid);\n+        }\n+\n+        return accountid;\n+    }\n+\n+    /**\n+     * Updates user account.\n+     * @param accountid.\n+     * @param a set of attributes to be updated.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure\n+     */\n+    @Override\n+    public String update(\n+            final String accountid,\n+            final Set<WSAttributeValue> data) throws ProvisioningException {\n+\n+        for (WSAttributeValue value : data) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nName: \" + value.getName() +\n+                        \"\\nType: \" + value.getType() +\n+                        \"\\nNullable: \" + value.isNullable() +\n+                        \"\\nKey: \" + value.isKey() +\n+                        \"\\nPassword: \" + value.isPassword() +\n+                        \"\\nValue: \" + value.getValue().toString());\n+            }\n+        }\n+\n+        return accountid;\n+    }\n+\n+    /**\n+     * Searches for user accounts.\n+     * @param query filter\n+     * @return a set of user accounts.\n+     */\n+    @Override\n+    public Set<WSUser> query(Operand query) {\n+\n+        Set<WSUser> resultSet = new HashSet<WSUser>();\n+\n+        WSUser user = null;\n+        WSAttributeValue attr = null;\n+\n+        for (int i = 0; i < 5; i++) {\n+            user = new WSUser(\"test\" + i, new HashSet<WSAttributeValue>());\n+\n+            attr = new WSAttributeValue();\n+            attr.setName(\"username\");\n+            attr.setKey(true);\n+            attr.setValue(\"test\" + i);\n+\n+            user.addAttribute(attr);\n+\n+            attr = new WSAttributeValue();\n+            attr.setName(\"nome\");\n+            attr.setValue(\"ntest\" + i);\n+\n+            user.addAttribute(attr);\n+\n+            attr = new WSAttributeValue();\n+            attr.setName(\"cognome\");\n+            attr.setValue(\"ctest\" + i);\n+\n+            user.addAttribute(attr);\n+\n+            resultSet.add(user);\n+        }\n+\n+        return resultSet;\n+    }\n+\n+    /**\n+     * Returns accountid related to the specified username.\n+     * @param username.\n+     * @return accountid.\n+     * @throws ProvisioningException in case of failure or username not found.\n+     */\n+    @Override\n+    public String resolve(final String username) throws ProvisioningException {\n+        return \"TESTUSER\";\n+    }\n+\n+    /**\n+     * Gets the latest change id.\n+     * @return change id.\n+     * @throws ProvisioningException in case of failure.\n+     */\n+    @Override\n+    public int getLatestChangeNumber() throws ProvisioningException {\n+        return 1;\n+    }\n+\n+    /**\n+     * Returns changes to be synchronized.\n+     * @return a set of changes\n+     * @throws ProvisioningException in case of failure\n+     */\n+    @Override\n+    public Set<WSChange> sync() throws ProvisioningException {\n+\n+        WSChange change = new WSChange();\n+        \n+        // specify the change id\n+        change.setId(1);\n+        change.setType(\"CREATE_OR_UPDATE\");\n+\n+        // specify the account id\n+        WSAttributeValue uid = new WSAttributeValue();\n+        uid.setName(\"username\");\n+        uid.setValue(\"test1\");\n+        uid.setKey(true);\n+\n+        // specify the attributes changed\n+        WSAttributeValue attr = new WSAttributeValue();\n+        attr.setName(\"name\");\n+\n+        Set<WSAttributeValue> attrs = new HashSet<WSAttributeValue>();\n+        attrs.add(uid);\n+        attrs.add(attr);\n+\n+        change.setAttributes(attrs);\n+\n+        Set<WSChange> changes = new HashSet<WSChange>();\n+        changes.add(change);\n+\n+        return changes;\n+    }\n+}"},{"sha":"d778c67b5251529ac580f2f5807fa9821a2cba8e","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/beans.xml","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,17 @@\n+\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+\txsi:schemaLocation=\"\n+http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd\">\n+\n+    <import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n+    <import resource=\"classpath:META-INF/cxf/cxf-extension-soap.xml\" />\n+    <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\" />\n+\n+    <jaxws:endpoint\n+\t  id=\"provisioning\"\n+\t  implementor=\"org.syncope.identityconnectors.bundles.staticwebservice.wstarget.ProvisioningImpl\"\n+\t  address=\"/provisioning\" />\n+</beans>"},{"sha":"0376cc3a0ce12ec626f915eadf1e93d301fd07a9","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/log4j.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration>\n+    <appender name=\"main\" class=\"org.apache.log4j.RollingFileAppender\">\n+        <param name=\"File\" value=\"/tmp/wssample.log\"/>\n+        <param name=\"Append\" value=\"true\"/>\n+        <param name=\"MaxFileSize\" value=\"10240KB\" />\n+        <param name=\"MaxBackupIndex\" value=\"10\" />\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <root>\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"main\"/>\n+    </root>\n+</log4j:configuration>\n+"},{"sha":"e24237b28fedb1b16e27ca0f4cfd045a19aeeae9","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/webapp/WEB-INF/web.xml","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,32 @@\n+<!DOCTYPE web-app PUBLIC\n+ \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n+ \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n+\n+<web-app>\n+    <display-name>CXF Sample Service</display-name>\n+    \n+    <context-param>\n+        <param-name>contextConfigLocation</param-name>\n+        <param-value>classpath:/beans.xml</param-value>\n+    </context-param>\n+\n+    <listener>\n+        <listener-class>\n+            org.springframework.web.context.ContextLoaderListener\n+        </listener-class>\n+    </listener>\n+\n+    <servlet>\n+        <servlet-name>CXFServlet</servlet-name>\n+        <display-name>CXF Servlet</display-name>\n+        <servlet-class>\n+            org.apache.cxf.transport.servlet.CXFServlet\n+        </servlet-class>\n+        <load-on-startup>1</load-on-startup>\n+    </servlet>\n+\n+    <servlet-mapping>\n+        <servlet-name>CXFServlet</servlet-name>\n+        <url-pattern>/services/*</url-pattern>\n+    </servlet-mapping>\n+</web-app>"},{"sha":"dcaaf2fe3bb40dea6481d80abd74a0e6e199a161","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/test/java/it/eposse/samples/cxf/test/ProvisioningTestITCase.java","status":"added","additions":366,"deletions":0,"changes":366,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Fit%2Feposse%2Fsamples%2Fcxf%2Ftest%2FProvisioningTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Fit%2Feposse%2Fsamples%2Fcxf%2Ftest%2FProvisioningTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Fit%2Feposse%2Fsamples%2Fcxf%2Ftest%2FProvisioningTestITCase.java?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,366 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package it.eposse.samples.cxf.test;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;\n+import org.junit.Before;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttributeValue;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSChange;\n+import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSUser;\n+import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operand;\n+import org.syncope.identityconnectors.bundles.staticwebservice.utilities.Operator;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"classpath:beans.xml\"})\n+public class ProvisioningTestITCase {\n+\n+    private static final Logger log =\n+            LoggerFactory.getLogger(ProvisioningTestITCase.class);\n+\n+    final private String ENDPOINT_PREFIX =\n+            \"http://localhost:8888/wstarget/services\";\n+\n+    final private String SERVICE =\n+            \"/provisioning\";\n+\n+    @Autowired\n+    JaxWsProxyFactoryBean proxyFactory;\n+\n+    Provisioning provisioning;\n+\n+    @Before\n+    public void init() {\n+        assertNotNull(proxyFactory);\n+\n+        proxyFactory.setAddress(ENDPOINT_PREFIX + SERVICE);\n+\n+        proxyFactory.setServiceClass(Provisioning.class);\n+\n+        provisioning = (Provisioning) proxyFactory.create();\n+    }\n+\n+    @Test\n+    public void authenticate() {\n+        Throwable t = null;\n+\n+        try {\n+\n+            String uid = provisioning.authenticate(\n+                    \"TESTUSER\",\n+                    \"password\");\n+\n+            assertEquals(\"TESTUSER\", uid);\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void checkAlive() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            provisioning.checkAlive();\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+\n+    }\n+\n+    @Test\n+    public void schema() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            provisioning.schema();\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void create() {\n+\n+        Throwable t = null;\n+\n+        try {\n+            WSAttributeValue uid = new WSAttributeValue();\n+            uid.setName(\"username\");\n+            uid.setValue(\"test1\");\n+            uid.setKey(true);\n+\n+            WSAttributeValue password = new WSAttributeValue();\n+            password.setName(\"password\");\n+            password.setValue(\"password\");\n+            password.setPassword(true);\n+\n+            WSAttributeValue name = new WSAttributeValue();\n+            name.setName(\"nome\");\n+            name.setValue(\"test1\");\n+\n+            WSAttributeValue surname = new WSAttributeValue();\n+            surname.setName(\"cognome\");\n+            surname.setValue(\"test1\");\n+\n+            WSAttributeValue privacy = new WSAttributeValue();\n+            privacy.setName(\"privacy\");\n+            privacy.setValue(Boolean.TRUE);\n+\n+            WSAttributeValue birthday = new WSAttributeValue();\n+            birthday.setName(\"data di nascita\");\n+            birthday.setValue(\"12/09/1990\");\n+\n+            Set<WSAttributeValue> attrs = new HashSet<WSAttributeValue>();\n+            attrs.add(uid);\n+            attrs.add(password);\n+            attrs.add(name);\n+            attrs.add(surname);\n+            attrs.add(privacy);\n+            attrs.add(birthday);\n+\n+            provisioning.create(attrs);\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void update() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            WSAttributeValue surname = new WSAttributeValue();\n+            surname.setName(\"surname\");\n+            surname.setValue(\"test1\");\n+            surname.setKey(true);\n+\n+            WSAttributeValue name = new WSAttributeValue();\n+            name.setName(\"nome\");\n+            name.setValue(\"test1\");\n+\n+\n+            Set<WSAttributeValue> attrs = new HashSet<WSAttributeValue>();\n+            attrs.add(surname);\n+            attrs.add(name);\n+\n+            String uid = provisioning.update(\"test1\", attrs);\n+\n+            assertNotNull(uid);\n+            assertEquals(\"test1\", uid);\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void delete() {\n+\n+        Throwable t = null;\n+\n+\n+        try {\n+\n+            provisioning.delete(\"TESTUSER\");\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void query() {\n+\n+        Throwable t = null;\n+\n+\n+        try {\n+\n+            Operand op1 = new Operand(Operator.EQ, \"nome\", \"john\");\n+            Operand op2 = new Operand(Operator.EQ, \"cognome\", \"doe\");\n+            Operand op3 = new Operand(Operator.EQ, \"cognome\", \"black\");\n+\n+            Set<Operand> sop1 = new HashSet<Operand>();\n+            sop1.add(op1);\n+            sop1.add(op2);\n+\n+            Set<Operand> sop2 = new HashSet<Operand>();\n+            sop2.add(op1);\n+            sop2.add(op3);\n+\n+            Operand op4 = new Operand(Operator.AND, sop1);\n+            Operand op5 = new Operand(Operator.AND, sop2);\n+\n+            Set<Operand> sop = new HashSet<Operand>();\n+            sop.add(op4);\n+            sop.add(op5);\n+\n+            Operand query = new Operand(Operator.OR, sop, true);\n+\n+            Set<WSUser> results = provisioning.query(query);\n+\n+            for (WSUser user : results) {\n+                log.debug(\"Name: \" + user.getAccountid());\n+            }\n+\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void resolve() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            String uid = provisioning.resolve(\"fmartelli\");\n+\n+            assertEquals(\"TESTUSER\", uid);\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void getLatestChangeNumber() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            int token = provisioning.getLatestChangeNumber();\n+\n+            assertEquals(1, token);\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+\n+    @Test\n+    public void sync() {\n+\n+        Throwable t = null;\n+\n+        try {\n+\n+            Set<WSChange> results = provisioning.sync();\n+\n+            for (WSChange change : results) {\n+                log.debug(\"Delta: \" + change.getId());\n+            }\n+\n+        } catch (Exception e) {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unknown exception!\", e);\n+            }\n+\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+    }\n+}"},{"sha":"4c8bd3c5fa4e6aedf60ea6ddfd4f3de2de0ce21e","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/test/resources/beans.xml","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Fbeans.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Fbeans.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Fbeans.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:jaxws=\"http://cxf.apache.org/jaxws\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+       xsi:schemaLocation=\"\n+        http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://cxf.apache.org/jaxws \n+        http://cxf.apache.org/schemas/jaxws.xsd\n+        http://www.springframework.org/schema/context\n+        http://www.springframework.org/schema/context/spring-context.xsd\">\n+   \n+    <bean id=\"proxyFactory\" class=\"org.apache.cxf.jaxws.JaxWsProxyFactoryBean\">\n+        <property name=\"serviceClass\" value=\"\"/>\n+        <property name=\"address\" value=\"\"/>\n+    </bean>\n+\n+</beans>\n+"},{"sha":"062fdbc07602f9b748ff2e7d0f28a4b1921e24e2","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/test/resources/log4j.xml","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fresources%2Flog4j.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration>\n+    <appender name=\"main\" class=\"org.apache.log4j.RollingFileAppender\">\n+        <param name=\"File\" value=\"/tmp/CXFSample.log\"/>\n+        <param name=\"Append\" value=\"true\"/>\n+        <param name=\"MaxFileSize\" value=\"10240KB\" />\n+        <param name=\"MaxBackupIndex\" value=\"10\" />\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <param name=\"ConversionPattern\" value=\"%-5p %d %C{1}.%M:%L %m%n\"/>\n+        </layout>\n+    </appender>\n+\n+    <root>\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"main\"/>\n+    </root>\n+</log4j:configuration>\n+"},{"sha":"410a2da5b88bc3a96c3cee5f8a4838e72d08450f","filename":"identityconnectors/framework-internal/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fframework-internal%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fframework-internal%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fframework-internal%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -12,6 +12,7 @@\n \n     <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>framework-internal</artifactId>\n+\n     <name>IdentityConnectors: framework-internal</name>\n     <url>http://maven.apache.org</url>\n \n@@ -41,7 +42,6 @@\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <version>${junit.version}</version>\n             <scope>test</scope>\n         </dependency>\n "},{"sha":"5652f524dcbd84f145dd1991139bc9dd091930a0","filename":"identityconnectors/framework/pom.xml","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fframework%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fframework%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fframework%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -12,18 +12,29 @@\n \n     <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>framework</artifactId>\n-    <name>IdentityConnectors: framework</name>\n     \n+    <name>IdentityConnectors: framework</name>\n     <url>http://maven.apache.org</url>\n \n     <dependencies>\n \n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <version>${junit.version}</version>\n             <scope>test</scope>\n         </dependency>\n         \n     </dependencies>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>${basedir}/src/main/java</directory>\n+                <includes>\n+                    <include>**/*.properties</include>\n+                    <include>**/*.html</include>\n+                </includes>\n+            </resource>\n+        </resources>\n+    </build>\n </project>"},{"sha":"636469333fc6a821efe70a7fe0e54e2a2f333a69","filename":"identityconnectors/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -93,14 +93,12 @@\n \n     <properties>\n \n-        <junit.version>4.8.1</junit.version>\n         <groovy-all.version>1.7.2</groovy-all.version>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n \n     </properties>\n \n     <dependencyManagement>\n-\n     </dependencyManagement>\n \n     <repositories>"},{"sha":"f83d7353a1211df6d52f97d6782687838fc1c0fa","filename":"identityconnectors/test-common/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Ftest-common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/identityconnectors%2Ftest-common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Ftest-common%2Fpom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -12,6 +12,7 @@\n \n     <groupId>org.syncope.identityconnectors</groupId>\n     <artifactId>test-common</artifactId>\n+    \n     <name>IdentityConnectors: test-common</name>\n     <url>http://maven.apache.org</url>\n \n@@ -33,7 +34,6 @@\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <version>${junit.version}</version>\n             <scope>test</scope>\n         </dependency>\n         "},{"sha":"b030ef4d1e1ad35b52a756aaa0326983e9097336","filename":"pom.xml","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9386dc0e1421b46c08278a3fb427365e41729ac5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9386dc0e1421b46c08278a3fb427365e41729ac5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9386dc0e1421b46c08278a3fb427365e41729ac5","patch":"@@ -133,6 +133,8 @@\n \n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n \n+        <org.apache.cxf.version>2.2.9</org.apache.cxf.version>\n+\n     </properties>\n \n     <dependencyManagement>\n@@ -230,8 +232,26 @@\n                 <artifactId>spring-tx</artifactId>\n                 <version>${org.springframework.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-web</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n             <!-- /Spring -->\n \n+            <!-- CXF -->\n+            <dependency>\n+                <groupId>org.apache.cxf</groupId>\n+                <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+                <version>${org.apache.cxf.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.cxf</groupId>\n+                <artifactId>cxf-rt-transports-http</artifactId>\n+                <version>${org.apache.cxf.version}</version>\n+            </dependency>\n+            <!-- /CXF -->\n+\n             <dependency>\n                 <groupId>cglib</groupId>\n                 <artifactId>cglib</artifactId>"}]}