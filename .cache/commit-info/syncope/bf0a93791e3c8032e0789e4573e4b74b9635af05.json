{"sha":"bf0a93791e3c8032e0789e4573e4b74b9635af05","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJmMGE5Mzc5MWUzYzgwMzJlMDc4OWU0NTczZTRiNzRiOTYzNWFmMDU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-12T12:31:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-12T12:31:44Z"},"message":"[SYNCOPE-172] Small fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1420642 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69b327d87b95ab4362d2c398e3bdf15d447517c9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/69b327d87b95ab4362d2c398e3bdf15d447517c9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bf0a93791e3c8032e0789e4573e4b74b9635af05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf0a93791e3c8032e0789e4573e4b74b9635af05","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf0a93791e3c8032e0789e4573e4b74b9635af05","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf0a93791e3c8032e0789e4573e4b74b9635af05/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f00d8e3c118d16b55820fc0eb3f492578cfd57b4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f00d8e3c118d16b55820fc0eb3f492578cfd57b4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f00d8e3c118d16b55820fc0eb3f492578cfd57b4"}],"stats":{"total":27,"additions":13,"deletions":14},"files":[{"sha":"47eb3a12923e4aecf314b27e869a9627b57ade7b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMapping.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java?ref=bf0a93791e3c8032e0789e4573e4b74b9635af05","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -79,7 +78,7 @@ public <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdIt\n                     + accountIdItem.getClass().getName());\n         }\n \n-        addAccountIdItem(accountIdItem);\n+        this.addAccountIdItem(accountIdItem);\n     }\n \n     @Override\n@@ -112,7 +111,7 @@ public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n                 throw new ClassCastException(\"items are expected to be typed RMappingItem: \"\n                         + item.getClass().getName());\n             }\n-            this.items.addAll((Set<RMappingItem>) items);\n+            this.items.addAll((List<RMappingItem>) items);\n         }\n     }\n }"},{"sha":"029220e4f61349ee55a4d27eaf089bb5d75d528b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UMapping.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java?ref=bf0a93791e3c8032e0789e4573e4b74b9635af05","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -80,7 +79,7 @@ public <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdIt\n                     + accountIdItem.getClass().getName());\n         }\n \n-        addAccountIdItem(accountIdItem);\n+        this.addAccountIdItem(accountIdItem);\n     }\n \n     public UMappingItem getPasswordItem() {\n@@ -96,7 +95,7 @@ public UMappingItem getPasswordItem() {\n     public boolean setPasswordItem(final UMappingItem passwordItem) {\n         passwordItem.setExtAttrName(OperationalAttributes.PASSWORD_NAME);\n         passwordItem.setPassword(true);\n-        return addItem(passwordItem);\n+        return this.addItem(passwordItem);\n     }\n \n     @Override\n@@ -129,7 +128,7 @@ public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n                 throw new ClassCastException(\"items are expected to be typed UMappingItem: \"\n                         + item.getClass().getName());\n             }\n-            this.items.addAll((Set<UMappingItem>) items);\n+            this.items.addAll((List<UMappingItem>) items);\n         }\n     }\n }"},{"sha":"c2817cae6bd6244e0b08da706f61cd11f567db04","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bf0a93791e3c8032e0789e4573e4b74b9635af05/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=bf0a93791e3c8032e0789e4573e4b74b9635af05","patch":"@@ -109,11 +109,13 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         if (resourceTO.getUmapping() != null) {\n             UMapping mapping = new UMapping();\n+            mapping.setResource(resource);\n             resource.setUmapping(mapping);\n             populateMapping(resourceTO.getUmapping(), mapping, new UMappingItem());\n         }\n         if (resourceTO.getRmapping() != null) {\n             RMapping mapping = new RMapping();\n+            mapping.setResource(resource);\n             resource.setRmapping(mapping);\n             populateMapping(resourceTO.getRmapping(), mapping, new RMappingItem());\n         }\n@@ -152,6 +154,7 @@ private void populateMapping(final MappingTO mappingTO, final AbstractMapping ma\n         mapping.setAccountLink(mappingTO.getAccountLink());\n \n         for (AbstractMappingItem item : getMappingItems(mappingTO.getItems(), prototype)) {\n+            item.setMapping(mapping);\n             if (item.isAccountid()) {\n                 mapping.setAccountIdItem(item);\n             } else if (item.isPassword()) {\n@@ -176,18 +179,16 @@ private Set<AbstractMappingItem> getMappingItems(final Collection<MappingItemTO>\n     private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final AbstractMappingItem prototype)\n             throws SyncopeClientCompositeErrorException {\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-\n-        SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-        // this control needs to be free to get schema names\n-        // without a complete/good resourceTO object\n         if (itemTO == null || itemTO.getIntMappingType() == null) {\n             LOG.error(\"Null mappingTO provided\");\n             return null;\n         }\n \n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n+\n         if (itemTO.getIntAttrName() == null) {\n             if (IntMappingType.getEmbedded().contains(itemTO.getIntMappingType())) {\n                 itemTO.setIntAttrName(itemTO.getIntMappingType().toString());"}]}