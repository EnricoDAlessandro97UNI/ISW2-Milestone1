{"sha":"797fd1cbd801aedabb54b5d1dcb65d34636adec5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5N2ZkMWNiZDgwMWFlZGFiYjU0YjVkMWRjYjY1ZDM0NjM2YWRlYzU=","commit":{"author":{"name":"dayash","email":"dima.ayash@tirasa.net","date":"2018-05-02T07:50:13Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2018-05-03T14:57:56Z"},"message":"[SYNCOPE-1270] implementation for OpenID Connect for Admin Console and Enduser - This closes #74","tree":{"sha":"3910d321ad33cea2500b2b7451e49b7895891cec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3910d321ad33cea2500b2b7451e49b7895891cec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/797fd1cbd801aedabb54b5d1dcb65d34636adec5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/797fd1cbd801aedabb54b5d1dcb65d34636adec5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/797fd1cbd801aedabb54b5d1dcb65d34636adec5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/797fd1cbd801aedabb54b5d1dcb65d34636adec5/comments","author":{"login":"DimaAy","id":19169906,"node_id":"MDQ6VXNlcjE5MTY5OTA2","avatar_url":"https://avatars.githubusercontent.com/u/19169906?v=4","gravatar_id":"","url":"https://api.github.com/users/DimaAy","html_url":"https://github.com/DimaAy","followers_url":"https://api.github.com/users/DimaAy/followers","following_url":"https://api.github.com/users/DimaAy/following{/other_user}","gists_url":"https://api.github.com/users/DimaAy/gists{/gist_id}","starred_url":"https://api.github.com/users/DimaAy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DimaAy/subscriptions","organizations_url":"https://api.github.com/users/DimaAy/orgs","repos_url":"https://api.github.com/users/DimaAy/repos","events_url":"https://api.github.com/users/DimaAy/events{/privacy}","received_events_url":"https://api.github.com/users/DimaAy/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"064b7efac7c2e96433caf4c079e514c620f074cf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/064b7efac7c2e96433caf4c079e514c620f074cf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/064b7efac7c2e96433caf4c079e514c620f074cf"}],"stats":{"total":6863,"additions":6861,"deletions":2},"files":[{"sha":"27eccc4302606767f5cb937464380e85846f1dbc","filename":"archetype/pom.xml","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -232,6 +232,13 @@ under the License.\n           <include>saml2sp-agent.properties</include>\n         </includes>\n       </resource>\n+      <resource>\n+        <directory>../ext/oidcclient/agent/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/resources/all</targetPath>\n+        <includes>\n+          <include>oidcclient-agent.properties</include>\n+        </includes>\n+      </resource>\n       <resource>\n         <directory>../fit/console-reference/src/main/resources</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/resources</targetPath>\n@@ -251,6 +258,14 @@ under the License.\n           <include>saml2sp-agent.properties</include>\n         </includes>\n       </resource>\n+      <resource>\n+        <directory>../fit/console-reference/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/test/resources</targetPath>\n+        <includes>\n+          <include>console.properties</include>\n+          <include>oidcclient-agent.properties</include>\n+        </includes>\n+      </resource>\n       <resource>\n         <directory>../fit/console-reference/src/main/webapp/WEB-INF</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/console/src/main/webapp/WEB-INF</targetPath>\n@@ -271,6 +286,13 @@ under the License.\n           <include>saml2sp-agent.properties</include>\n         </includes>\n       </resource>\n+      <resource>\n+        <directory>../ext/oidcclient/agent/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/resources/all</targetPath>\n+        <includes>\n+          <include>oidcclient-agent.properties</include>\n+        </includes>\n+      </resource>\n       <resource>\n         <directory>../client/enduser/src/main/resources/META-INF/resources/app</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/webapp/app</targetPath>\n@@ -291,6 +313,15 @@ under the License.\n           <include>customForm.json</include>\n         </includes>\n       </resource>\n+      <resource>\n+        <directory>../fit/enduser-reference/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/test/resources</targetPath>\n+        <includes>\n+          <include>enduser.properties</include>\n+          <include>oidcclient-agent.properties</include>\n+          <include>customForm.json</include>\n+        </includes>\n+      </resource>\n       <resource>\n         <directory>../fit/enduser-reference/src/main/webapp/WEB-INF</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/webapp/WEB-INF</targetPath>"},{"sha":"479126c69254f11fcfbcb4b1ed98c743123094ad","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -140,6 +140,12 @@ under the License.\n           <version>${syncope.version}</version>\n         </dependency>\n         \n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+          <version>${syncope.version}</version>\n+        </dependency>\n+        \n         <dependency>\n           <groupId>org.apache.syncope.ext.scimv2</groupId>\n           <artifactId>syncope-ext-scimv2-client-console</artifactId>"},{"sha":"f248d9a79a239ca2e75bfe6c90c95ca355859da0","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -192,6 +192,17 @@ under the License.\n           <version>${syncope.version}</version>\n         </dependency>\n \n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>\n+          <version>${syncope.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-persistence-jpa</artifactId>\n+          <version>${syncope.version}</version>\n+        </dependency>\n+\n         <dependency>\n           <groupId>org.apache.syncope.ext.scimv2</groupId>\n           <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>"},{"sha":"5f98d31f92091bf218d89cf7f68dc1832316a3ab","filename":"archetype/src/main/resources/archetype-resources/enduser/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -332,6 +332,12 @@ under the License.\n           <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n           <version>${syncope.version}</version>\n         </dependency>\n+\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+          <version>${syncope.version}</version>\n+        </dependency>\n       </dependencies>\n       \n       <build>"},{"sha":"2613a6e0b6d5dfe826d28872d2fefab701bf49c8","filename":"client/enduser/src/main/resources/META-INF/resources/app/index.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -100,6 +100,7 @@\n   <script src=\"js/services/groupService.js\"></script>\n   <script src=\"js/services/anyService.js\"></script>\n   <script src=\"js/services/saml2IdPService.js\"></script>\n+  <script src=\"js/services/oidcProviderService.js\"></script>\n   <script src=\"js/services/saml2SPService.js\"></script>\n   <!--controllers-->\n   <script src=\"js/controllers/HomeController.js\"></script>"},{"sha":"1019cad5bc7b15d174d9d21a0cfff18223381c5e","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/app.js","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -341,7 +341,8 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',\n     };\n   }]);\n app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'InfoService', 'SAML2IdPService',\n-  function ($scope, $rootScope, $location, InfoService, SAML2IdPService) {\n+  'OIDCProviderService',\n+  function ($scope, $rootScope, $location, InfoService, SAML2IdPService, OIDCProviderService) {\n     $scope.initApplication = function () {\n       /* \n        * disable by default wizard buttons in self-registration\n@@ -377,6 +378,10 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I\n         available: [],\n         selected: {}\n       };\n+      $rootScope.oidcops = {\n+        available: [],\n+        selected: {}\n+      };\n \n       InfoService.getInfo().then(\n               function (response) {\n@@ -403,6 +408,19 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I\n                 console.debug(\"No SAML 2.0 SP extension available\", response);\n               });\n       /* </Extensions> */\n+      /* \n+       * configuration getters\n+       */\n+\n+      /* <Extensions> */\n+      OIDCProviderService.getAvailableOIDCProviders().then(\n+              function (response) {\n+                $rootScope.oidcops.available = response;\n+              },\n+              function (response) {\n+                console.debug(\"No OIDC Client extension available\", response);\n+              });\n+      /* </Extensions> */\n       /* \n        * configuration getters\n        */\n@@ -418,6 +436,13 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I\n       $rootScope.saml2login = function () {\n         window.location.href = '../saml2sp/login?idp=' + $rootScope.saml2idps.selected.entityID;\n       };\n+\n+      $rootScope.oidcclientExtAvailable = function () {\n+        return $rootScope.oidcops.available.length > 0;\n+      };\n+      $rootScope.oidclogin = function () {\n+        window.location.href = '../oidcclient/login?op=' + $rootScope.oidcops.selected.name;\n+      };\n       $rootScope.getVersion = function () {\n         return $rootScope.version;\n       };"},{"sha":"d2b755c030ba41ca49ddfe7a06a395cbff35dc59","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -34,6 +34,8 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '\n         $scope.credentials.errorMessage = '';\n         // reset SAML 2.0 entityID\n         $rootScope.saml2idps.selected.entityID = null;\n+        // reset OIDC name\n+        $rootScope.oidcops.selected.name = null;\n         // got to update page\n         $location.path(\"/self/update\");\n       }, function (response) {"},{"sha":"d2ce926b1fd556a619e1348b3137635ac336955e","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/services/oidcProviderService.js","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FoidcProviderService.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FoidcProviderService.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FoidcProviderService.js?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,42 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+'use strict';\n+\n+angular.module('self')\n+        .factory('OIDCProviderService', ['$resource', '$q', '$http',\n+          function ($resource, $q, $http) {\n+\n+            var oidcProviderService = {};\n+\n+            oidcProviderService.getAvailableOIDCProviders = function () {\n+              return $http.get(\"../api/oidcProviders\")\n+                      .then(function (response) {\n+                        return response.data;\n+                      }, function (response) {\n+                        console.error(\"Something went wrong during oidcProviders extension retrieval, exit with status: \",\n+                                response);\n+                        return $q.reject(response.data || response.statusText);\n+                      });\n+            };\n+\n+            return oidcProviderService;\n+          }]);\n+\n+"},{"sha":"cedb21c7e7adf2cf7c76f0ec2340ac4dfea54b2f","filename":"client/enduser/src/main/resources/META-INF/resources/app/views/self.html","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -62,6 +62,14 @@\n                           ng-model=\"saml2idps.selected\" ng-change=\"saml2login()\">\n                   </select>\n                 </div>\n+                <div class=\"form-group\">\n+                  <span ng-if=\"$root.oidcclientExtAvailable()\">OpenID Connect</span>\n+                  <select id=\"oiscclient\" style=\"width: 100%; text-align: left;\" class=\"btn dropdown-toggle btn-default\"\n+                          ng-if=\"$root.oidcclientExtAvailable()\"\n+                          ng-options=\"op.name for op in oidcops.available track by op.name\"\n+                          ng-model=\"oidcops.selected\" ng-change=\"oidclogin()\">\n+                  </select>\n+                </div>\n               </fieldset>\n             </form>\n           </div>"},{"sha":"85c6495b03e4410fbb0dbfdafffdd77f0863944f","filename":"deb/console/pom.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fconsole%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -54,6 +54,11 @@ under the License.\n       <artifactId>syncope-ext-saml2sp-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.ext.scimv2</groupId>\n       <artifactId>syncope-ext-scimv2-client-console</artifactId>\n@@ -115,6 +120,14 @@ under the License.\n         <targetPath>${project.build.directory}/etc</targetPath>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>${project.basedir}/../../ext/oidcclient/agent/src/main/resources</directory>\n+        <includes>\n+          <include>oidcclient-agent.properties</include>\n+        </includes>\n+        <targetPath>${project.build.directory}/etc</targetPath>\n+        <filtering>true</filtering>\n+      </resource>\n       <resource>\n         <directory>${basedir}/../../fit/console-reference/src/main/resources</directory>\n         <includes>"},{"sha":"a9bfb08572309b1aff41eafc97c4c8ffef34d97a","filename":"deb/console/src/deb/control/conffiles","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fconsole%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fconsole%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fconsole%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -1,3 +1,5 @@\n /etc/tomcat8/Catalina/localhost/syncope-console.xml\n /etc/apache-syncope/console.properties\n /etc/apache-syncope/saml2sp-agent.properties\n+/etc/apache-syncope/oidcclient-agent.properties\n+"},{"sha":"c27bf758c1e3b5ec93fd39fb51dde1e1c0f4b8f6","filename":"deb/enduser/pom.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -43,6 +43,11 @@ under the License.\n       <artifactId>syncope-ext-saml2sp-client-enduser</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.client</groupId>\n       <artifactId>syncope-client-enduser</artifactId>\n@@ -105,6 +110,14 @@ under the License.\n         <targetPath>${project.build.directory}/etc</targetPath>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>${project.basedir}/../../ext/oidcclient/agent/src/main/resources</directory>\n+        <includes>\n+          <include>oidcclient-agent.properties</include>\n+        </includes>\n+        <targetPath>${project.build.directory}/etc</targetPath>\n+        <filtering>true</filtering>\n+      </resource>\n       <resource>\n         <directory>${basedir}/../../fit/enduser-reference/src/main/resources</directory>\n         <includes>"},{"sha":"8fb2453717784ceee3a0110ad94d2a2a7e412fb1","filename":"deb/enduser/src/deb/control/conffiles","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -2,3 +2,5 @@\n /etc/apache-syncope/enduser.properties\n /etc/apache-syncope/customForm.json\n /etc/apache-syncope/saml2sp-agent.properties\n+/etc/apache-syncope/oidcclient-agent.properties\n+"},{"sha":"0e8878552757f6b9d32232baace615f0a6b88ff3","filename":"deb/enduser/src/deb/control/preinst","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fpreinst","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fpreinst","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fpreinst?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -16,3 +16,4 @@\n # specific language governing permissions and limitations\n # under the License.\n dpkg-divert --add --package apache-syncope-enduser --rename --divert /etc/apache-syncope/saml2sp-agent.properties.disabled /etc/apache-syncope/saml2sp-agent.properties\n+dpkg-divert --add --package apache-syncope-enduser --rename --divert /etc/apache-syncope/oidcclient-agent.properties.disabled /etc/apache-syncope/oidcclient-agent.properties"},{"sha":"b4c218e69a8e4b47a6f7047b3f20baebccafd11f","filename":"ext/oidcclient/agent/pom.xml","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,126 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Agent</name>\n+  <description>Apache Syncope Ext: OIDC Client Agent</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-agent</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet.jsp</groupId>\n+      <artifactId>javax.servlet.jsp-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jstl</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+  \n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+      \n+      <resource>\n+        <directory>${basedir}</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>apache-release</id>\n+\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-source-plugin</artifactId>\n+            <inherited>false</inherited>\n+            <executions>\n+              <execution>\n+                <id>attach-sources</id>\n+                <goals>\n+                  <goal>jar-no-fork</goal>\n+                </goals>\n+                <configuration>\n+                  <includes>\n+                    <include>${basedir}/LICENSE</include>\n+                    <include>${basedir}/NOTICE</include>\n+                  </includes>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+</project>"},{"sha":"08e9d234d81b3cc7d389011b738dc52b50b334af","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/CodeConsumer.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.oidcclient.agent;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.OIDCConstants;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@WebServlet(name = \"codeConsumer\", urlPatterns = { \"/oidcclient/code-consumer\" })\n+public class CodeConsumer extends HttpServlet {\n+\n+    private static final long serialVersionUID = 968480296813639041L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(CodeConsumer.class);\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        try {\n+            String authorizationCode = request.getParameter(OIDCConstants.CODE);\n+            String state = request.getParameter(OIDCConstants.STATE);\n+            if (StringUtils.isBlank(authorizationCode) || StringUtils.isBlank(state)) {\n+                throw new IllegalArgumentException(\"Empty \" + OIDCConstants.CODE + \" or \" + OIDCConstants.STATE);\n+            }\n+            if (state.equals(request.getSession().getAttribute(OIDCConstants.STATE).toString())) {\n+                SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n+                        getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+\n+                OIDCLoginResponseTO responseTO = anonymous.getService(OIDCClientService.class).login(\n+                        request.getRequestURL().toString(),\n+                        authorizationCode,\n+                        request.getSession().getAttribute(OIDCConstants.OP).toString());\n+                request.getSession().setAttribute(\n+                        Constants.OIDCCLIENTJWT, responseTO.getAccessToken());\n+                request.getSession().setAttribute(\n+                        Constants.OIDCCLIENTJWT_EXPIRE, responseTO.getAccessTokenExpiryTime());\n+\n+                String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_SUCCESS_URL);\n+                if (successURL == null) {\n+                    request.setAttribute(\"responseTO\", responseTO);\n+                    request.getRequestDispatcher(\"loginSuccess.jsp\").forward(request, response);\n+                } else {\n+                    response.sendRedirect(successURL);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid \" + OIDCConstants.STATE + \" provided\");\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While processing authentication response from OP\", e);\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n+\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?errorMessage=\"\n+                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8.name()));\n+            }\n+        }\n+    }\n+}"},{"sha":"1ff33273fba351817a52d601c825b79232c6266c","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/Constants.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FConstants.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.oidcclient.agent;\n+\n+public final class Constants {\n+\n+    public static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n+\n+    public static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n+\n+    public static final String PARAM_OP = \"op\";\n+\n+    public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"oidcclient.login.success.url\";\n+\n+    public static final String CONTEXT_PARAM_LOGIN_ERROR_URL = \"oidcclient.login.error.url\";\n+\n+    public static final String OIDCCLIENTJWT = \"oidcclient.jwt\";\n+\n+    public static final String OIDCCLIENTJWT_EXPIRE = \"oidcclient.jwt.expire\";\n+\n+    private Constants() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"36850e49610a62d409581c0448ac054e66d77e3a","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/Login.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FLogin.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.oidcclient.agent;\n+\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.UriBuilder;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.OIDCConstants;\n+import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n+import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@WebServlet(name = \"oidcclientLogin\", urlPatterns = { \"/oidcclient/login\" })\n+public class Login extends HttpServlet {\n+\n+    private static final long serialVersionUID = 968480296813639041L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(Login.class);\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        String op = request.getParameter(Constants.PARAM_OP);\n+\n+        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        try {\n+            String redirectURI = StringUtils.substringBefore(request.getRequestURL().toString(), \"/login\")\n+                    + \"/code-consumer\";\n+            OIDCLoginRequestTO requestTO = anonymous.getService(OIDCClientService.class).\n+                    createLoginRequest(redirectURI, op);\n+\n+            request.getSession().setAttribute(OIDCConstants.STATE, requestTO.getState());\n+            request.getSession().setAttribute(OIDCConstants.OP, op);\n+\n+            response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n+            response.setHeader(\"Pragma\", \"no-cache\");\n+            response.setStatus(HttpServletResponse.SC_SEE_OTHER);\n+\n+            UriBuilder ub = UriBuilder.fromUri(requestTO.getProviderAddress());\n+            ub.queryParam(OIDCConstants.CLIENT_ID, requestTO.getClientId());\n+            ub.queryParam(OIDCConstants.REDIRECT_URI, requestTO.getRedirectURI());\n+            ub.queryParam(OIDCConstants.RESPOSNSE_TYPE, requestTO.getResponseType());\n+            ub.queryParam(OIDCConstants.SCOPE, requestTO.getScope());\n+            ub.queryParam(OIDCConstants.STATE, requestTO.getState());\n+            response.setHeader(\"Location\", ub.build().toASCIIString());\n+        } catch (Exception e) {\n+            LOG.error(\"While preparing the Authentication Request\", e);\n+\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?errorMessage=\"\n+                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8.name()));\n+            }\n+        }\n+    }\n+}"},{"sha":"887d0d60e6d5dadb3f5bb207cb74730341605ffe","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/OIDCClientAgentSetup.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FOIDCClientAgentSetup.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.oidcclient.agent;\n+\n+import java.util.Properties;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.PropertyUtils;\n+\n+@WebListener\n+public class OIDCClientAgentSetup implements ServletContextListener {\n+\n+    private static final String OIDCCLIENT_AGENT_PROPERTIES = \"oidcclient-agent.properties\";\n+\n+    private static <T> T assertNotNull(final T argument, final String name) {\n+        if (argument == null) {\n+            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n+        }\n+        return argument;\n+    }\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        // read oidcclientagent.properties\n+        Properties props = PropertyUtils.read(getClass(), OIDCCLIENT_AGENT_PROPERTIES, \"conf.directory\").getLeft();\n+\n+        String anonymousUser = props.getProperty(\"anonymousUser\");\n+        assertNotNull(anonymousUser, \"<anonymousUser>\");\n+        String anonymousKey = props.getProperty(\"anonymousKey\");\n+        assertNotNull(anonymousKey, \"<anonymousKey>\");\n+\n+        String scheme = props.getProperty(\"scheme\");\n+        assertNotNull(scheme, \"<scheme>\");\n+        String host = props.getProperty(\"host\");\n+        assertNotNull(host, \"<host>\");\n+        String port = props.getProperty(\"port\");\n+        assertNotNull(port, \"<port>\");\n+        String rootPath = props.getProperty(\"rootPath\");\n+        assertNotNull(rootPath, \"<rootPath>\");\n+        String useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n+        assertNotNull(useGZIPCompression, \"<useGZIPCompression>\");\n+\n+        SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().\n+                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n+                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n+\n+        sce.getServletContext().setAttribute(Constants.SYNCOPE_CLIENT_FACTORY, clientFactory);\n+        sce.getServletContext().setAttribute(\n+                Constants.SYNCOPE_ANONYMOUS_CLIENT,\n+                clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)));\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+    }\n+\n+}"},{"sha":"b3c80d97eeb041ec20bcead515c91b1efc181c5a","filename":"ext/oidcclient/agent/src/main/resources/META-INF/resources/oidcclient/loginError.jsp","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginError.jsp?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,35 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<%\n+    Exception exception = (Exception) request.getAttribute(\"exception\");\n+%>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - OIDC CLIENT - Login Error</title>\n+  </head>\n+  <body>\n+    <h1>An error was found</h1>\n+\n+    <h2><%=exception.getMessage()%></h2>\n+    <pre>\n+      <%exception.printStackTrace(new java.io.PrintWriter(out));%>\n+    </pre>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"7361842adaa4183f3890b8af315cf5ea5932d4b2","filename":"ext/oidcclient/agent/src/main/resources/META-INF/resources/oidcclient/loginSuccess.jsp","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginSuccess.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginSuccess.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Foidcclient%2FloginSuccess.jsp?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,33 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<%@page import=\"org.apache.syncope.common.lib.to.OIDCLoginResponseTO\"%>\n+<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n+<c:set var=\"responseTO\" value=\"${requestScope['responseTO']}\"/>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - OIDC CLIENT - Successful Login</title>\n+  </head>\n+  <body>\n+    <h1>Welcome ${responseTO.userName}</h1>\n+\n+    <p>You have been successfully authenticated by the requested OIDC Provider</p>\n+\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"fab858afd86ee0eee96398395e3b2675040ca67c","filename":"ext/oidcclient/agent/src/main/resources/META-INF/web-fragment.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<web-fragment xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n+              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n+                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd\"\n+              id=\"${pom.artifactId}\" version=\"3.1\">\n+\n+</web-fragment>"},{"sha":"d3fee301868b829256d41401d39d0e9c76245c29","filename":"ext/oidcclient/agent/src/main/resources/oidcclient-agent.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+scheme=http\n+host=localhost\n+port=8080\n+rootPath=/syncope/rest/\n+useGZIPCompression=true"},{"sha":"59ba01abf230257a104263e478f0e4a50b6d3f40","filename":"ext/oidcclient/client-console/pom.xml","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Console</name>\n+  <description>Apache Syncope Ext: OIDC Client Console</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-agent</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-console</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"f588733761dc96559f84ae5da854e83ce4569100","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/pages/OIDCClient.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.annotations.ExtPage;\n+import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n+import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+@ExtPage(label = \"OIDC Client\", icon = \"fa-openid \", listEntitlement = OIDCClientEntitlement.OP_READ, priority = 100)\n+public class OIDCClient extends BaseExtPage {\n+\n+    private static final long serialVersionUID = -599601954212606001L;\n+\n+    public OIDCClient(final PageParameters parameters) {\n+        super(parameters);\n+\n+        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n+\n+        WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+        content.setOutputMarkupId(true);\n+        content.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList()));\n+        body.add(content);\n+    }\n+\n+    private List<ITab> buildTabList() {\n+\n+        final List<ITab> tabs = new ArrayList<>(1);\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"op\")) {\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new OIDCProvidersDirectoryPanel(panelId, getPageReference());\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+\n+}"},{"sha":"41b6cdc386c879cf664c34995d95bce1ff11117b","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/pages/OIDCClientLogin.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClientLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClientLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClientLogin.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+\n+import org.apache.wicket.authentication.IAuthenticationStrategy;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.protocol.http.servlet.ServletWebRequest;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OIDCClientLogin extends WebPage {\n+\n+    private static final long serialVersionUID = 8581614051773949262L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCClientLogin.class);\n+\n+    private static final String OIDC_ACCESS_ERROR = \"OIDC access error\";\n+\n+    public OIDCClientLogin(final PageParameters parameters) {\n+        super(parameters);\n+\n+        String token = (String) ((ServletWebRequest) getRequest()).getContainerRequest().\n+                getSession().getAttribute(org.apache.syncope.ext.oidcclient.agent.Constants.OIDCCLIENTJWT);\n+        if (StringUtils.isBlank(token)) {\n+            LOG.error(\"No JWT found, redirecting to default greeter\");\n+\n+            PageParameters params = new PageParameters();\n+            params.add(\"errorMessage\", OIDC_ACCESS_ERROR);\n+            setResponsePage(Login.class, params);\n+        }\n+\n+        IAuthenticationStrategy strategy = getApplication().getSecuritySettings().getAuthenticationStrategy();\n+\n+        if (SyncopeConsoleSession.get().authenticate(token)) {\n+\n+            // If login has been called because the user was not yet logged in, than continue to the\n+            // original destination, otherwise to the Home page\n+            continueToOriginalDestination();\n+            setResponsePage(getApplication().getHomePage());\n+        } else {\n+            PageParameters params = new PageParameters();\n+            params.add(\"errorMessage\", OIDC_ACCESS_ERROR);\n+            setResponsePage(Login.class, params);\n+        }\n+        strategy.remove();\n+    }\n+\n+}"},{"sha":"dd66cc6173c7426f7d592252d78a3404ccf7d86c","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.java","status":"added","additions":291,"deletions":0,"changes":291,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n+import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel.OIDCProvidersProvider;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.OIDCProviderRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksTogglePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.wizards.AjaxWizard;\n+import org.apache.syncope.client.console.wizards.OIDCProviderWizardBuilder;\n+import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.console.wizards.any.AnyWrapper;\n+import org.apache.syncope.client.console.wizards.any.UserTemplateWizardBuilder;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class OIDCProvidersDirectoryPanel extends DirectoryPanel<\n+        OIDCProviderTO, OIDCProviderTO, OIDCProvidersProvider, OIDCProviderRestClient> {\n+\n+    private static final long serialVersionUID = -1356497878858616714L;\n+\n+    private static final String PREF_OIDC_PROVIDERS_PAGINATOR_ROWS = \"oidc.providers.paginator.rows\";\n+\n+    private final BaseModal<Serializable> templateModal;\n+\n+    public OIDCProvidersDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, new Builder<OIDCProviderTO, OIDCProviderTO, OIDCProviderRestClient>(new OIDCProviderRestClient(),\n+                pageRef) {\n+\n+            private static final long serialVersionUID = -5542535388772406165L;\n+\n+            @Override\n+            protected WizardMgtPanel<OIDCProviderTO> newInstance(final String id, final boolean wizardInModal) {\n+                throw new UnsupportedOperationException();\n+            }\n+        }.disableCheckBoxes());\n+\n+        this.addNewItemPanelBuilder(new OIDCProviderWizardBuilder(this, new OIDCProviderTO(), pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, OIDCClientEntitlement.OP_CREATE);\n+\n+        modal.size(Modal.Size.Large);\n+\n+        actionTogglePanel = new ActionLinksTogglePanel<OIDCProviderTO>(\"outer\", pageRef) {\n+\n+            private static final long serialVersionUID = -7688359318035249200L;\n+\n+            @Override\n+            public void toggleWithContent(\n+                    final AjaxRequestTarget target,\n+                    final ActionsPanel<OIDCProviderTO> actionsPanel,\n+                    final OIDCProviderTO modelObject) {\n+\n+                super.toggleWithContent(target, actionsPanel, modelObject);\n+                setHeader(target, StringUtils.abbreviate(modelObject.getName(), 25));\n+                this.toggle(target, true);\n+            }\n+\n+        };\n+        addOuterObject(actionTogglePanel);\n+\n+        templateModal = new BaseModal<Serializable>(\"outer\") {\n+\n+            private static final long serialVersionUID = 5787433530654262016L;\n+\n+            @Override\n+            protected void onConfigure() {\n+                super.onConfigure();\n+                setFooterVisible(false);\n+            }\n+        };\n+        templateModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+//                target.add(content);\n+                templateModal.show(false);\n+            }\n+        });\n+        templateModal.size(Modal.Size.Large);\n+        addOuterObject(templateModal);\n+\n+        initResultTable();\n+\n+    }\n+\n+    @Override\n+    protected OIDCProvidersProvider dataProvider() {\n+        return new OIDCProvidersProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return PREF_OIDC_PROVIDERS_PAGINATOR_ROWS;\n+\n+    }\n+\n+    @Override\n+    protected List<IColumn<OIDCProviderTO, String>> getColumns() {\n+        List<IColumn<OIDCProviderTO, String>> columns = new ArrayList<>();\n+        columns.add(new KeyPropertyColumn<OIDCProviderTO>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<OIDCProviderTO, String>(new ResourceModel(\"name\"), \"name\", \"name\"));\n+        columns.add(new PropertyColumn<OIDCProviderTO, String>(new ResourceModel(\"issuer\"), \"issuer\", \"issuer\"));\n+        columns.add(new PropertyColumn<OIDCProviderTO, String>(new ResourceModel(\"clientID\"), \"clientID\", \"clientID\"));\n+        return columns;\n+\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBulkActions() {\n+        return Collections.<ActionLink.ActionType>emptyList();\n+\n+    }\n+\n+    @Override\n+    public ActionsPanel<OIDCProviderTO> getActions(final IModel<OIDCProviderTO> model) {\n+        final ActionsPanel<OIDCProviderTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<OIDCProviderTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final OIDCProviderTO ignore) {\n+                OIDCProviderTO object = restClient.read(model.getObject().getKey());\n+                send(OIDCProvidersDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(object, target));\n+                modal.header(Model.of(StringUtils.capitalize((\"Edit \" + object.getName()))));\n+            }\n+        }, ActionLink.ActionType.EDIT, OIDCClientEntitlement.OP_UPDATE);\n+\n+        panel.add(new ActionLink<OIDCProviderTO>() {\n+\n+            private static final long serialVersionUID = 8557679125857348178L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final OIDCProviderTO ignore) {\n+                final OIDCProviderTO object = restClient.read(model.getObject().getKey());\n+\n+                UserTemplateWizardBuilder builder = new UserTemplateWizardBuilder(\n+                        object.getUserTemplate(),\n+                        new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),\n+                        new UserFormLayoutInfo(),\n+                        pageRef) {\n+\n+                    private static final long serialVersionUID = -7978723352517770634L;\n+\n+                    @Override\n+                    protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n+                        object.setUserTemplate(modelObject.getInnerObject());\n+                        restClient.update(object);\n+\n+                        return modelObject;\n+                    }\n+                };\n+                templateModal.header(Model.of(StringUtils.capitalize(\n+                        new StringResourceModel(\"template.title\", OIDCProvidersDirectoryPanel.this).getString())));\n+                templateModal.setContent(builder.build(BaseModal.CONTENT_ID));\n+                templateModal.show(true);\n+                target.add(templateModal);\n+\n+            }\n+        }, ActionLink.ActionType.TEMPLATE, OIDCClientEntitlement.OP_UPDATE);\n+\n+        panel.add(new ActionLink<OIDCProviderTO>() {\n+\n+            private static final long serialVersionUID = -5467832321897812767L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final OIDCProviderTO ignore) {\n+                try {\n+                    restClient.delete(model.getObject().getKey());\n+                    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(container);\n+                } catch (SyncopeClientException e) {\n+                    LOG.error(\"While deleting object {}\", model.getObject().getKey(), e);\n+                    SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n+                            ? e.getClass().getName() : e.getMessage());\n+                }\n+                ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, OIDCClientEntitlement.OP_DELETE, true);\n+        return panel;\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+\n+        if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {\n+            AjaxWizard.NewItemEvent<?> newItemEvent = AjaxWizard.NewItemEvent.class.cast(event.getPayload());\n+            WizardModalPanel<?> modalPanel = newItemEvent.getModalPanel();\n+\n+            if (event.getPayload() instanceof AjaxWizard.NewItemActionEvent && modalPanel != null) {\n+                final IModel<Serializable> model = new CompoundPropertyModel<>(modalPanel.getItem());\n+                templateModal.setFormModel(model);\n+                templateModal.header(newItemEvent.getResourceModel());\n+                newItemEvent.getTarget().add(templateModal.setContent(modalPanel));\n+                templateModal.show(true);\n+            } else if (event.getPayload() instanceof AjaxWizard.NewItemCancelEvent) {\n+                templateModal.close(newItemEvent.getTarget());\n+            } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n+                templateModal.close(newItemEvent.getTarget());\n+            }\n+        }\n+    }\n+\n+    protected final class OIDCProvidersProvider extends DirectoryDataProvider<OIDCProviderTO> {\n+\n+        private static final long serialVersionUID = -2865055116864423761L;\n+\n+        private final SortableDataProviderComparator<OIDCProviderTO> comparator;\n+\n+        public OIDCProvidersProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+\n+            setSort(\"name\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<OIDCProviderTO> iterator(final long first, final long count) {\n+            List<OIDCProviderTO> list = restClient.list();\n+            Collections.sort(list, comparator);\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return restClient.list().size();\n+        }\n+\n+        @Override\n+        public IModel<OIDCProviderTO> model(final OIDCProviderTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+\n+    }\n+}"},{"sha":"5b108e581b989375a7132786988dc28eec77e36e","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/panels/OIDCSSOLoginFormPanel.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.UrlUtils;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.apache.wicket.request.http.handler.RedirectRequestHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OIDCSSOLoginFormPanel extends SSOLoginFormPanel {\n+\n+    private static final long serialVersionUID = 1154933731474854671L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCSSOLoginFormPanel.class);\n+\n+    public OIDCSSOLoginFormPanel(final String id) {\n+        super(id);\n+\n+        List<OIDCProviderTO> available =\n+                SyncopeConsoleSession.get().getAnonymousClient().getService(OIDCProviderService.class).list();\n+\n+        final Model<OIDCProviderTO> model = new Model<>();\n+        AjaxDropDownChoicePanel<OIDCProviderTO> ops =\n+                new AjaxDropDownChoicePanel<>(\"ops\", \"OpenID Connect\", model, false);\n+        ops.setChoices(available);\n+        ops.setChoiceRenderer(new IChoiceRenderer<OIDCProviderTO>() {\n+\n+            private static final long serialVersionUID = 1814750973898916102L;\n+\n+            @Override\n+            public Object getDisplayValue(final OIDCProviderTO object) {\n+                return object.getName();\n+            }\n+\n+            @Override\n+            public String getIdValue(final OIDCProviderTO object, final int index) {\n+                return object.getName();\n+            }\n+\n+            @Override\n+            public OIDCProviderTO getObject(final String id,\n+                    final IModel<? extends List<? extends OIDCProviderTO>> choices) {\n+                return IterableUtils.find(choices.getObject(), new Predicate<OIDCProviderTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final OIDCProviderTO object) {\n+                        return object.getName().equals(id);\n+                    }\n+                });\n+            }\n+        });\n+\n+        ops.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (model.getObject() != null) {\n+                    try {\n+                        RequestCycle.get().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler(\n+                                UrlUtils.rewriteToContextRelative(\"oidcclient/login?op=\"\n+                                        + URLEncoder.encode(\n+                                                model.getObject().getName(), StandardCharsets.UTF_8.name()),\n+                                        RequestCycle.get())));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not redirect to the selected OP {}\", model.getObject().getName(), e);\n+                    }\n+                }\n+            }\n+        });\n+        ops.setOutputMarkupPlaceholderTag(true);\n+        ops.setVisible(!available.isEmpty());\n+        add(ops);\n+    }\n+\n+}"},{"sha":"a666d74ea6671e1a6609d13a15f810264fba6c27","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/rest/OIDCProviderRestClient.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+\n+public class OIDCProviderRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -4006712447589576324L;\n+\n+    public List<OIDCProviderTO> list() {\n+        return getService(OIDCProviderService.class).list();\n+    }\n+\n+    public Set<String> getActionsClasses() {\n+        return getService(OIDCProviderService.class).getActionsClasses();\n+    }\n+\n+    public void create(final OIDCProviderTO op) {\n+        SyncopeConsoleSession.get().getService(OIDCProviderService.class).create(op);\n+    }\n+\n+    public void createFromDiscovery(final OIDCProviderTO op) {\n+        SyncopeConsoleSession.get().getService(OIDCProviderService.class).createFromDiscovery(op);\n+    }\n+\n+    public OIDCProviderTO read(final String key) {\n+        return getService(OIDCProviderService.class).read(key);\n+    }\n+\n+    public void update(final OIDCProviderTO op) {\n+        getService(OIDCProviderService.class).update(op);\n+    }\n+\n+    public void delete(final String key) {\n+        getService(OIDCProviderService.class).delete(key);\n+    }\n+\n+}"},{"sha":"d12965eeac54437ed7a8911106f418304b2b6ddb","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderMappingPanel.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderMappingPanel.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class OIDCProviderMappingPanel extends AbstractMappingPanel {\n+\n+    private static final long serialVersionUID = -4123879435574382968L;\n+\n+    public OIDCProviderMappingPanel(\n+            final String id,\n+            final OIDCProviderTO opTO,\n+            final ItemTransformersTogglePanel mapItemTransformers,\n+            final JEXLTransformersTogglePanel jexlTransformers) {\n+\n+        super(id,\n+                mapItemTransformers,\n+                jexlTransformers,\n+                new ListModel<ItemTO>(opTO.getItems()),\n+                true,\n+                true,\n+                MappingPurpose.NONE);\n+\n+        setOutputMarkupId(true);\n+    }\n+\n+    @Override\n+    protected void onBeforeRender() {\n+        super.onBeforeRender();\n+        purposeLabel.setVisible(false);\n+    }\n+\n+    @Override\n+    protected IModel<List<String>> getExtAttrNames() {\n+        List<String> extAttrNames = new ArrayList<>();\n+        extAttrNames.add(\"email\");\n+        extAttrNames.add(\"family_name\");\n+        extAttrNames.add(\"name\");\n+        extAttrNames.add(\"middle_name\");\n+        extAttrNames.add(\"given_name\");\n+        extAttrNames.add(\"preferred_username\");\n+        extAttrNames.add(\"nickname\");\n+        extAttrNames.add(\"profile\");\n+        extAttrNames.add(\"gender\");\n+        extAttrNames.add(\"locale\");\n+        extAttrNames.add(\"zoneinfo\");\n+        extAttrNames.add(\"birthdate\");\n+        extAttrNames.add(\"phone_number\");\n+        extAttrNames.add(\"address\");\n+        extAttrNames.add(\"updated_at\");\n+\n+        return Model.ofList(extAttrNames);\n+    }\n+\n+    @Override\n+    protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n+        toBeUpdated.setRequired(true);\n+        toBeUpdated.setEnabled(true);\n+\n+        List<String> choices = new ArrayList<>(USER_FIELD_NAMES);\n+\n+        for (AnyTypeClassTO anyTypeClassTO : anyTypeClassRestClient.list(\n+                anyTypeRestClient.read(AnyTypeKind.USER.name()).getClasses())) {\n+\n+            choices.addAll(anyTypeClassTO.getPlainSchemas());\n+            choices.addAll(anyTypeClassTO.getDerSchemas());\n+            choices.addAll(anyTypeClassTO.getVirSchemas());\n+        }\n+\n+        Collections.sort(choices);\n+        toBeUpdated.setChoices(choices);\n+    }\n+\n+}"},{"sha":"2fa465a944e5c49b6b90cbb3d77d3d869bb0cda2","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder.java","status":"added","additions":290,"deletions":0,"changes":290,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n+import org.apache.syncope.client.console.rest.OIDCProviderRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.validation.validator.UrlValidator;\n+\n+public class OIDCProviderWizardBuilder extends AjaxWizardBuilder<OIDCProviderTO> {\n+\n+    private static final long serialVersionUID = -3310772400714122768L;\n+\n+    private final OIDCProviderRestClient restClient = new OIDCProviderRestClient();\n+\n+    private final OIDCProvidersDirectoryPanel directoryPanel;\n+\n+    private final IModel<List<String>> actionsClasses = new LoadableDetachableModel<List<String>>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return new ArrayList<>(restClient.getActionsClasses());\n+        }\n+    };\n+\n+    public OIDCProviderWizardBuilder(final OIDCProvidersDirectoryPanel directoryPanel, final OIDCProviderTO defaultItem,\n+            final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+        this.directoryPanel = directoryPanel;\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final OIDCProviderTO modelObject) {\n+        if (modelObject.getKey() == null) {\n+            if (modelObject.getHasDiscovery()) {\n+                restClient.createFromDiscovery(modelObject);\n+            } else {\n+                restClient.create(modelObject);\n+            }\n+\n+        } else {\n+            restClient.update(modelObject);\n+        }\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final OIDCProviderTO modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new OP(modelObject));\n+        if (modelObject.getKey() == null) {\n+            wizardModel.add(new OPContinue(modelObject));\n+        } else {\n+            wizardModel.add(new OPContinue(modelObject, true));\n+        }\n+\n+        Mapping mapping = new Mapping(modelObject);\n+        mapping.setOutputMarkupId(true);\n+\n+        ItemTransformersTogglePanel mapItemTransformers = new ItemTransformersTogglePanel(mapping, pageRef);\n+        addOuterObject(mapItemTransformers);\n+        JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n+        addOuterObject(jexlTransformers);\n+        mapping.add(new OIDCProviderMappingPanel(\"mapping\", modelObject, mapItemTransformers, jexlTransformers));\n+\n+        wizardModel.add(mapping);\n+\n+        return wizardModel;\n+    }\n+\n+    public class OP extends WizardStep {\n+\n+        private static final long serialVersionUID = 7127421283216134900L;\n+\n+        public OP(final OIDCProviderTO opTO) {\n+            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n+                    \"name\", \"name\", new PropertyModel<String>(opTO, \"name\"), false);\n+            name.addRequiredLabel();\n+            name.setEnabled(true);\n+            add(name);\n+\n+            AjaxTextFieldPanel clientID = new AjaxTextFieldPanel(\n+                    \"clientID\", \"clientID\", new PropertyModel<String>(opTO, \"clientID\"), false);\n+            clientID.addRequiredLabel();\n+            clientID.setEnabled(true);\n+            add(clientID);\n+\n+            AjaxTextFieldPanel clientSecret = new AjaxTextFieldPanel(\n+                    \"clientSecret\", \"clientSecret\", new PropertyModel<String>(opTO, \"clientSecret\"), false);\n+            clientSecret.addRequiredLabel();\n+            clientSecret.setEnabled(true);\n+            add(clientSecret);\n+\n+            AjaxCheckBoxPanel createUnmatching = new AjaxCheckBoxPanel(\n+                    \"createUnmatching\", \"createUnmatching\", new PropertyModel<Boolean>(opTO, \"createUnmatching\"),\n+                    false);\n+            add(createUnmatching);\n+\n+            AjaxCheckBoxPanel updateMatching = new AjaxCheckBoxPanel(\n+                    \"updateMatching\", \"updateMatching\", new PropertyModel<Boolean>(opTO, \"updateMatching\"), false);\n+            add(updateMatching);\n+\n+            AjaxPalettePanel<String> actionsClassNames = new AjaxPalettePanel.Builder<String>().\n+                    setAllowMoveAll(true).setAllowOrder(true).\n+                    setName(new StringResourceModel(\"actionsClassNames\", directoryPanel).getString()).\n+                    build(\"actionsClassNames\",\n+                            new PropertyModel<List<String>>(opTO, \"actionsClassNames\"),\n+                            new ListModel<>(actionsClasses.getObject()));\n+            actionsClassNames.setOutputMarkupId(true);\n+            add(actionsClassNames);\n+        }\n+    }\n+\n+    public class OPContinue extends WizardStep {\n+\n+        private static final long serialVersionUID = -7087008312629522790L;\n+\n+        public OPContinue(final OIDCProviderTO opTO) {\n+\n+            final WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+            this.setOutputMarkupId(true);\n+            content.setOutputMarkupId(true);\n+            add(content);\n+\n+            UrlValidator urlValidator = new UrlValidator();\n+            final AjaxTextFieldPanel issuer = new AjaxTextFieldPanel(\n+                    \"issuer\", \"issuer\", new PropertyModel<String>(opTO, \"issuer\"));\n+            issuer.addValidator(urlValidator);\n+            issuer.addRequiredLabel();\n+            content.add(issuer);\n+\n+            final AjaxCheckBoxPanel hasDiscovery = new AjaxCheckBoxPanel(\n+                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<Boolean>(opTO, \"hasDiscovery\"));\n+            content.add(hasDiscovery);\n+\n+            final AjaxTextFieldPanel authorizationEndpoint = new AjaxTextFieldPanel(\"authorizationEndpoint\",\n+                    \"authorizationEndpoint\", new PropertyModel<String>(opTO, \"authorizationEndpoint\"));\n+            authorizationEndpoint.addRequiredLabel();\n+            authorizationEndpoint.addValidator(urlValidator);\n+            content.add(authorizationEndpoint);\n+\n+            final AjaxTextFieldPanel userinfoEndpoint = new AjaxTextFieldPanel(\"userinfoEndpoint\",\n+                    \"userinfoEndpoint\", new PropertyModel<String>(opTO, \"userinfoEndpoint\"));\n+            userinfoEndpoint.addRequiredLabel();\n+            userinfoEndpoint.addValidator(urlValidator);\n+            content.add(userinfoEndpoint);\n+\n+            final AjaxTextFieldPanel tokenEndpoint = new AjaxTextFieldPanel(\"tokenEndpoint\",\n+                    \"tokenEndpoint\", new PropertyModel<String>(opTO, \"tokenEndpoint\"));\n+            tokenEndpoint.addRequiredLabel();\n+            tokenEndpoint.addValidator(urlValidator);\n+            content.add(tokenEndpoint);\n+\n+            final AjaxTextFieldPanel jwksUri = new AjaxTextFieldPanel(\"jwksUri\",\n+                    \"jwksUri\", new PropertyModel<String>(opTO, \"jwksUri\"));\n+            jwksUri.addRequiredLabel();\n+            jwksUri.addValidator(urlValidator);\n+            content.add(jwksUri);\n+\n+            final WebMarkupContainer visibleParam = new WebMarkupContainer(\"visibleParams\");\n+            visibleParam.setOutputMarkupPlaceholderTag(true);\n+            visibleParam.add(authorizationEndpoint);\n+            visibleParam.add(userinfoEndpoint);\n+            visibleParam.add(tokenEndpoint);\n+            visibleParam.add(jwksUri);\n+            content.add(visibleParam);\n+\n+            showHide(hasDiscovery, visibleParam);\n+\n+            hasDiscovery.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    showHide(hasDiscovery, visibleParam);\n+                    target.add(visibleParam);\n+                }\n+            });\n+\n+        }\n+\n+        public OPContinue(final OIDCProviderTO opTO, final boolean readOnly) {\n+\n+            final WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+            this.setOutputMarkupId(true);\n+            content.setOutputMarkupId(true);\n+            add(content);\n+\n+            final AjaxTextFieldPanel issuer = new AjaxTextFieldPanel(\n+                    \"issuer\", \"issuer\", new PropertyModel<String>(opTO, \"issuer\"));\n+            issuer.setReadOnly(readOnly);\n+            content.add(issuer);\n+\n+            final AjaxCheckBoxPanel hasDiscovery = new AjaxCheckBoxPanel(\n+                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<Boolean>(opTO, \"hasDiscovery\"));\n+            hasDiscovery.setReadOnly(readOnly);\n+            content.add(hasDiscovery);\n+\n+            final AjaxTextFieldPanel authorizationEndpoint = new AjaxTextFieldPanel(\"authorizationEndpoint\",\n+                    \"authorizationEndpoint\", new PropertyModel<String>(opTO, \"authorizationEndpoint\"));\n+            authorizationEndpoint.setReadOnly(readOnly);\n+            content.add(authorizationEndpoint);\n+\n+            final AjaxTextFieldPanel userinfoEndpoint = new AjaxTextFieldPanel(\"userinfoEndpoint\",\n+                    \"userinfoEndpoint\", new PropertyModel<String>(opTO, \"userinfoEndpoint\"));\n+            userinfoEndpoint.setReadOnly(readOnly);\n+            content.add(userinfoEndpoint);\n+\n+            final AjaxTextFieldPanel tokenEndpoint = new AjaxTextFieldPanel(\"tokenEndpoint\",\n+                    \"tokenEndpoint\", new PropertyModel<String>(opTO, \"tokenEndpoint\"));\n+            tokenEndpoint.setReadOnly(readOnly);\n+            content.add(tokenEndpoint);\n+\n+            final AjaxTextFieldPanel jwksUri = new AjaxTextFieldPanel(\"jwksUri\",\n+                    \"jwksUri\", new PropertyModel<String>(opTO, \"jwksUri\"));\n+            jwksUri.setReadOnly(readOnly);\n+            content.add(jwksUri);\n+\n+            final WebMarkupContainer visibleParam = new WebMarkupContainer(\"visibleParams\");\n+            visibleParam.setOutputMarkupPlaceholderTag(true);\n+            visibleParam.add(authorizationEndpoint);\n+            visibleParam.add(userinfoEndpoint);\n+            visibleParam.add(tokenEndpoint);\n+            visibleParam.add(jwksUri);\n+            content.add(visibleParam);\n+        }\n+    }\n+\n+    private void showHide(final AjaxCheckBoxPanel hasDiscovery, final WebMarkupContainer visibleParams) {\n+        if (hasDiscovery.getField().getValue().equals(\"false\")) {\n+            visibleParams.setVisible(true);\n+        } else {\n+            visibleParams.setVisible(false);\n+        }\n+    }\n+\n+    /**\n+     * Mapping definition step.\n+     */\n+    private static final class Mapping extends WizardStep {\n+\n+        private static final long serialVersionUID = 3454904947720856253L;\n+\n+        Mapping(final OIDCProviderTO item) {\n+            setTitleModel(Model.of(\"Mapping\"));\n+            setSummaryModel(Model.of(StringUtils.EMPTY));\n+        }\n+    }\n+\n+}"},{"sha":"a1a0aed185f956ac383e3a994009742c03b56bd0","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/pages/OIDCClient.html","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,37 @@\n+<!DOCTYPE html>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <section class=\"content-header\">\n+      <h1>&nbsp;</h1>\n+      <ol class=\"breadcrumb\">\n+        <li><a wicket:id=\"dashboardBr\"><i class=\"fa fa-dashboard\"></i> <wicket:message key=\"dashboard\"/></a></li>\n+        <li class=\"active\"><wicket:message key=\"extensions\"/></li>\n+        <li class=\"active\">OIDC Client</li>\n+      </ol>\n+    </section>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+      <div class=\"box\">\n+        <div class=\"box-body\" wicket:id=\"tabbedPanel\"/>\n+      </div>\n+    </section>\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"b34f11c366797b70370a25da34b3e42be36014d0","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/pages/OIDCClient.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+op=OIDC Providers"},{"sha":"b34f11c366797b70370a25da34b3e42be36014d0","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/pages/OIDCClient_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_it.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+op=OIDC Providers"},{"sha":"b34f11c366797b70370a25da34b3e42be36014d0","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/pages/OIDCClient_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_pt_BR.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+op=OIDC Providers"},{"sha":"b34f11c366797b70370a25da34b3e42be36014d0","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/pages/OIDCClient_ru.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FOIDCClient_ru.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+op=OIDC Providers"},{"sha":"ce0dbe8f344fd162dab43c231a0033ab30d2e42c","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+\n+  </wicket:extend>\n+</html>"},{"sha":"569d0dceb6aa12e99f6e3cec747205d471f5ef80","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.properties","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+clientID=Client ID\n+clientSecret=Client Secret\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+any.new=New Provider\n+template.title=user template\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+\n+"},{"sha":"569d0dceb6aa12e99f6e3cec747205d471f5ef80","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_it.properties","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+clientID=Client ID\n+clientSecret=Client Secret\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+any.new=New Provider\n+template.title=user template\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+\n+"},{"sha":"569d0dceb6aa12e99f6e3cec747205d471f5ef80","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_pt_BR.properties","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+clientID=Client ID\n+clientSecret=Client Secret\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+any.new=New Provider\n+template.title=user template\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+\n+"},{"sha":"569d0dceb6aa12e99f6e3cec747205d471f5ef80","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_ru.properties","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,30 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+clientID=Client ID\n+clientSecret=Client Secret\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+any.new=New Provider\n+template.title=user template\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+\n+"},{"sha":"3b30b4cacb5c6100731241742eaddec4e1391487","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCSSOLoginFormPanel.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCSSOLoginFormPanel.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\">\n+      <span wicket:id=\"ops\"></span>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"11b1a5259058e6902e02b9f380d437cc5cdb4442","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$Mapping.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24Mapping.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24Mapping.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24Mapping.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"mapping\" />\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"4ad49d8d59a0f3fd266a8588f8a4bc43f2bb4f5f","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,28 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.  actionsClassNames\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\"><span wicket:id=\"name\">[name]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"clientID\">[clientID]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"clientSecret\">[clientSecret]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"createUnmatching\">[createUnmatching]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"updateMatching\">[updateMatching]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"actionsClassNames\">[actionsClassNames]</span></div>\n+  </wicket:panel>\n+</html>"},{"sha":"5ed531add4528e8305f79167a77f795b9486fa59","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+clientID=Client ID\n+clientSecret=Client Secret\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+"},{"sha":"01da6ecc61050f68540d782ff866a4a8989078cb","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OPContinue.html","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.html?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,33 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"content\">\n+      <span wicket:id=\"issuer\">[issuer]</span>\n+      <span wicket:id=\"hasDiscovery\">[hasDiscovery]</span>\n+\n+      <div wicket:id=\"visibleParams\">\n+        <span wicket:id=\"authorizationEndpoint\">[authorizationEndpoint]</span>\n+        <span wicket:id=\"tokenEndpoint\">[tokenEndpoint]</span>\n+        <span wicket:id=\"jwksUri\">[jwksUri]</span>\n+        <span wicket:id=\"userinfoEndpoint\">[userinfoEndpoint]</span>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"3f1d0859f89fd57f9fdf2f76c3c061f9b56b8188","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OPContinue.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+tokenEndpoint= Token Endpoint\n+jwksUri= JWKS URI\n+\n+\n+\n+\n+"},{"sha":"3f1d0859f89fd57f9fdf2f76c3c061f9b56b8188","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OPContinue_it.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_it.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+tokenEndpoint= Token Endpoint\n+jwksUri= JWKS URI\n+\n+\n+\n+\n+"},{"sha":"3f1d0859f89fd57f9fdf2f76c3c061f9b56b8188","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OPContinue_pt_BR.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_pt_BR.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+tokenEndpoint= Token Endpoint\n+jwksUri= JWKS URI\n+\n+\n+\n+\n+"},{"sha":"3f1d0859f89fd57f9fdf2f76c3c061f9b56b8188","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OPContinue_ru.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OPContinue_ru.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+issuer=Issuer\n+hasDiscovery= Has Discovery Document\n+authorizationEndpoint= Authorization Endpoint\n+userinfoEndpoint= Userinfo Endpoint\n+tokenEndpoint= Token Endpoint\n+jwksUri= JWKS URI\n+\n+\n+\n+\n+"},{"sha":"5ed531add4528e8305f79167a77f795b9486fa59","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_it.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+clientID=Client ID\n+clientSecret=Client Secret\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+"},{"sha":"5ed531add4528e8305f79167a77f795b9486fa59","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_pt_BR.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+clientID=Client ID\n+clientSecret=Client Secret\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+"},{"sha":"5ed531add4528e8305f79167a77f795b9486fa59","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_ru.properties","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+clientID=Client ID\n+clientSecret=Client Secret\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+\n+"},{"sha":"c7213c8a806a6e51f3ba6139495ca23f57769cac","filename":"ext/oidcclient/client-enduser/pom.xml","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-enduser%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Enduser</name>\n+  <description>Apache Syncope Ext: OIDC Client Enduser</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-agent</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"5aa8578f0a71b7cbf560ece7f1915178faf65967","filename":"ext/oidcclient/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/OIDCClientLogin.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FOIDCClientLogin.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.pages;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.wicket.authentication.IAuthenticationStrategy;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.protocol.http.servlet.ServletWebRequest;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OIDCClientLogin extends WebPage {\n+\n+    private static final long serialVersionUID = 8581614051773949262L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCClientLogin.class);\n+\n+    private static final String OIDC_ACCESS_ERROR = \"OIDC access error\";\n+\n+    public OIDCClientLogin(final PageParameters parameters) {\n+        super(parameters);\n+\n+        String token = (String) ((ServletWebRequest) getRequest()).getContainerRequest().\n+                getSession().getAttribute(org.apache.syncope.ext.oidcclient.agent.Constants.OIDCCLIENTJWT);\n+        if (StringUtils.isBlank(token)) {\n+            LOG.error(\"No JWT found, redirecting to default greeter\");\n+\n+            PageParameters params = new PageParameters();\n+            params.add(\"errorMessage\", OIDC_ACCESS_ERROR);\n+            setResponsePage(getApplication().getHomePage(), params);\n+        }\n+\n+        IAuthenticationStrategy strategy = getApplication().getSecuritySettings().getAuthenticationStrategy();\n+\n+        if (SyncopeEnduserSession.get().authenticate(token)) {\n+            setResponsePage(getApplication().getHomePage());\n+        } else {\n+            PageParameters params = new PageParameters();\n+            params.add(\"errorMessage\", OIDC_ACCESS_ERROR);\n+            setResponsePage(getApplication().getHomePage(), params);\n+        }\n+        strategy.remove();\n+    }\n+\n+}"},{"sha":"0faeba69ea2f9074e85b379e2b7dd2f0785715a2","filename":"ext/oidcclient/client-enduser/src/main/java/org/apache/syncope/client/enduser/resources/OIDCProvidersResource.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FOIDCProvidersResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FOIDCProvidersResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FOIDCProvidersResource.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.resources;\n+\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.apache.wicket.request.resource.AbstractResource;\n+\n+@Resource(key = \"oidcProviders\", path = \"/api/oidcProviders\")\n+public class OIDCProvidersResource extends BaseResource {\n+\n+    private static final long serialVersionUID = -6595407257133697170L;\n+\n+    @Override\n+    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+        ResourceResponse response = new ResourceResponse();\n+        response.setContentType(MediaType.APPLICATION_JSON);\n+        response.setTextEncoding(StandardCharsets.UTF_8.name());\n+        try {\n+            final ArrayNode result = MAPPER.createArrayNode();\n+\n+            SyncopeEnduserSession.get().getService(OIDCProviderService.class).list().forEach(op -> {\n+                ObjectNode opNode = MAPPER.createObjectNode();\n+                opNode.put(\"name\", op.getName());\n+                result.add(opNode);\n+            });\n+\n+            response.setWriteCallback(new AbstractResource.WriteCallback() {\n+\n+                @Override\n+                public void writeData(final Attributes attributes) throws IOException {\n+                    attributes.getResponse().write(MAPPER.writeValueAsString(result));\n+                }\n+            });\n+            response.setStatusCode(Response.Status.OK.getStatusCode());\n+        } catch (Exception e) {\n+            LOG.error(\"Error retrieving available OIDC Providers\", e);\n+            response.setError(\n+                    Response.Status.BAD_REQUEST.getStatusCode(),\n+                    \"ErrorMessage{{ \" + e.getMessage() + \"}}\");\n+        }\n+\n+        return response;\n+    }\n+\n+}"},{"sha":"a3354526b16a8cf7aa4a8756dd161189fde4faa4","filename":"ext/oidcclient/common-lib/pom.xml","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Common Lib</name>\n+  <description>Apache Syncope Ext: OIDC Client Common Lib</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-common-lib</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"12daa0a867ae947a3b72eac5fb296a9c94974b50","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/OIDCConstants.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FOIDCConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FOIDCConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FOIDCConstants.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+public final class OIDCConstants {\n+\n+    public static final String CLIENT_ID = \"client_id\";\n+\n+    public static final String CLIENT_SECRET = \"client_secret\";\n+\n+    public static final String SCOPE = \"scope\";\n+\n+    public static final String RESPOSNSE_TYPE = \"response_type\";\n+\n+    public static final String REDIRECT_URI = \"redirect_uri\";\n+\n+    public static final String STATE = \"state\";\n+\n+    public static final String CODE = \"code\";\n+\n+    public static final String GRANT_TYPE = \"grant_type\";\n+\n+    public static final String OP = \"op\";\n+\n+    private OIDCConstants() {\n+        // private constructor for static utility class\n+    }\n+\n+}"},{"sha":"5d4dc318a7de11c01b27a41fce43197409fe4ca9","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCLoginRequestTO.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginRequestTO.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"oidcLoginRequest\")\n+@XmlType\n+public class OIDCLoginRequestTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -3509031322459942441L;\n+\n+    private String providerAddress;\n+\n+    private String clientId;\n+\n+    private String scope;\n+\n+    private String responseType;\n+\n+    private String redirectURI;\n+\n+    private String state;\n+\n+    public String getProviderAddress() {\n+        return providerAddress;\n+    }\n+\n+    public void setProviderAddress(final String providerAddress) {\n+        this.providerAddress = providerAddress;\n+    }\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(final String scope) {\n+        this.scope = scope;\n+    }\n+\n+    public String getResponseType() {\n+        return responseType;\n+    }\n+\n+    public void setResponseType(final String responseType) {\n+        this.responseType = responseType;\n+    }\n+\n+    public String getRedirectURI() {\n+        return redirectURI;\n+    }\n+\n+    public void setRedirectURI(final String redirectURI) {\n+        this.redirectURI = redirectURI;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public void setState(final String state) {\n+        this.state = state;\n+    }\n+\n+}"},{"sha":"8e7798a2a58f8ffd7fc412b645ef99e493447d6b","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCLoginResponseTO.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCLoginResponseTO.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"oidcLoginResponse\")\n+@XmlType\n+public class OIDCLoginResponseTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -5971442076182154492L;\n+\n+    private String username;\n+\n+    private String email;\n+\n+    private String name;\n+\n+    private String subject;\n+\n+    private String givenName;\n+\n+    private String familyName;\n+\n+    private String accessToken;\n+\n+    private Date accessTokenExpiryTime;\n+\n+    private final Set<AttrTO> attrs = new HashSet<>();\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public void setEmail(final String email) {\n+        this.email = email;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(final String subject) {\n+        this.subject = subject;\n+    }\n+\n+    public String getGivenName() {\n+        return givenName;\n+    }\n+\n+    public void setGivenName(final String givenName) {\n+        this.givenName = givenName;\n+    }\n+\n+    public String getFamilyName() {\n+        return familyName;\n+    }\n+\n+    public void setFamilyName(final String familyName) {\n+        this.familyName = familyName;\n+    }\n+\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    public void setAccessToken(final String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    public Date getAccessTokenExpiryTime() {\n+        return accessTokenExpiryTime;\n+    }\n+\n+    public void setAccessTokenExpiryTime(final Date accessTokenExpiryTime) {\n+        this.accessTokenExpiryTime = accessTokenExpiryTime;\n+    }\n+\n+    @JsonIgnore\n+    public Optional<AttrTO> getAttr(final String schema) {\n+        return attrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"attrs\")\n+    @XmlElement(name = \"attr\")\n+    @JsonProperty(\"attrs\")\n+    public Set<AttrTO> getAttrs() {\n+        return attrs;\n+    }\n+\n+}"},{"sha":"eec4a8314c837b53b4116940825180e15df06f9c","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCProviderTO.java","status":"added","additions":219,"deletions":0,"changes":219,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"oidcprovider\")\n+@XmlType\n+public class OIDCProviderTO extends AbstractBaseBean implements EntityTO, ItemContainerTO {\n+\n+    private static final long serialVersionUID = -1229802774546135794L;\n+\n+    private String key;\n+\n+    private String name;\n+\n+    private String clientID;\n+\n+    private String clientSecret;\n+\n+    private String authorizationEndpoint;\n+\n+    private String tokenEndpoint;\n+\n+    private String jwksUri;\n+\n+    private String issuer;\n+\n+    private String userinfoEndpoint;\n+\n+    private boolean hasDiscovery;\n+\n+    private UserTO userTemplate;\n+\n+    private boolean createUnmatching;\n+\n+    private boolean updateMatching;\n+\n+    private final List<ItemTO> items = new ArrayList<>();\n+\n+    private final Set<String> actionsClassNames = new HashSet<>();\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getClientID() {\n+        return clientID;\n+    }\n+\n+    public void setClientID(final String clientID) {\n+        this.clientID = clientID;\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    public String getAuthorizationEndpoint() {\n+        return authorizationEndpoint;\n+    }\n+\n+    public void setAuthorizationEndpoint(final String authorizationEndpoint) {\n+        this.authorizationEndpoint = authorizationEndpoint;\n+    }\n+\n+    public String getTokenEndpoint() {\n+        return tokenEndpoint;\n+    }\n+\n+    public void setTokenEndpoint(final String tokenEndpoint) {\n+        this.tokenEndpoint = tokenEndpoint;\n+    }\n+\n+    public String getJwksUri() {\n+        return jwksUri;\n+    }\n+\n+    public void setJwksUri(final String jwksUri) {\n+        this.jwksUri = jwksUri;\n+    }\n+\n+    public String getIssuer() {\n+        return issuer;\n+    }\n+\n+    public void setIssuer(final String issuer) {\n+        this.issuer = issuer;\n+    }\n+\n+    public String getUserinfoEndpoint() {\n+        return userinfoEndpoint;\n+    }\n+\n+    public void setUserinfoEndpoint(final String userinfoEndpoint) {\n+        this.userinfoEndpoint = userinfoEndpoint;\n+    }\n+\n+    public UserTO getUserTemplate() {\n+        return userTemplate;\n+    }\n+\n+    public boolean getHasDiscovery() {\n+        return hasDiscovery;\n+    }\n+\n+    public void setHasDiscovery(final boolean hasDiscovery) {\n+        this.hasDiscovery = hasDiscovery;\n+    }\n+\n+    public void setUserTemplate(final UserTO userTemplate) {\n+        this.userTemplate = userTemplate;\n+    }\n+\n+    public boolean isCreateUnmatching() {\n+        return createUnmatching;\n+    }\n+\n+    public void setCreateUnmatching(final boolean createUnmatching) {\n+        this.createUnmatching = createUnmatching;\n+    }\n+\n+    public boolean isUpdateMatching() {\n+        return updateMatching;\n+    }\n+\n+    public void setUpdateMatching(final boolean updateMatching) {\n+        this.updateMatching = updateMatching;\n+    }\n+\n+    @Override\n+    public ItemTO getConnObjectKeyItem() {\n+        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().get();\n+    }\n+\n+    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n+        connObjectItem.setMandatoryCondition(\"true\");\n+        connObjectItem.setConnObjectKey(true);\n+\n+        return this.add(connObjectItem);\n+    }\n+\n+    @Override\n+    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n+        return connObjectKeyItem == null\n+                ? remove(getConnObjectKeyItem())\n+                : addConnObjectKeyItem(connObjectKeyItem);\n+    }\n+\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    @Override\n+    public List<ItemTO> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public boolean add(final ItemTO item) {\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+    }\n+\n+    public boolean remove(final ItemTO item) {\n+        return this.items.remove(item);\n+    }\n+\n+    @XmlElementWrapper(name = \"actionsClassNames\")\n+    @XmlElement(name = \"actionsClassName\")\n+    @JsonProperty(\"actionsClassNames\")\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+}"},{"sha":"98cf4d61c2b3ea7cac9df66c57124372ac008b9f","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/types/OIDCClientEntitlement.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientEntitlement.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class OIDCClientEntitlement {\n+\n+    public static final String OP_READ = \"OP_READ\";\n+\n+    public static final String OP_CREATE = \"OP_CREATE\";\n+\n+    public static final String OP_UPDATE = \"OP_UPDATE\";\n+\n+    public static final String OP_DELETE = \"OP_DELETE\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : OIDCClientEntitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private OIDCClientEntitlement() {\n+        // private constructor for static utility class\n+    }\n+\n+}"},{"sha":"6701bc3ce8734dbc1084fe241fdabdaa20b06a99","filename":"ext/oidcclient/logic/pom.xml","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Logic</name>\n+  <description>Apache Syncope Ext: OIDC Client Logic</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-logic</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-extension-providers</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-security-sso-oidc</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+      <artifactId>jackson-jaxrs-json-provider</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"638ae5e98c1c6a82bfc58cc837ed43463e4c1377","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java","status":"added","additions":406,"deletions":0,"changes":406,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,406 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.jaxrs.provider.json.JsonMapObjectProvider;\n+import org.apache.cxf.rs.security.jose.jaxrs.JsonWebKeysProvider;\n+import org.apache.cxf.rs.security.oauth2.client.Consumer;\n+import org.apache.cxf.rs.security.oauth2.common.ClientAccessToken;\n+import org.apache.cxf.rs.security.oidc.common.IdToken;\n+import org.apache.cxf.rs.security.oidc.common.UserInfo;\n+import org.apache.cxf.rs.security.oidc.rp.IdTokenReader;\n+import org.apache.cxf.rs.security.oidc.rp.UserInfoClient;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.OIDCConstants;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.logic.model.TokenEndpointResponse;\n+import org.apache.syncope.core.logic.oidc.OIDCUserManager;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.AuthDataAccessor;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OIDCClientLogic extends AbstractTransactionalLogic<AbstractBaseBean> {\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n+    private static final String JWT_CLAIM_OP_ENTITYID = \"OP_ENTITYID\";\n+\n+    private static final String JWT_CLAIM_USERID = \"USERID\";\n+\n+    @Autowired\n+    private AuthDataAccessor authDataAccessor;\n+\n+    @Autowired\n+    private AccessTokenDataBinder accessTokenDataBinder;\n+\n+    @Autowired\n+    private OIDCProviderDAO opDAO;\n+\n+    @Autowired\n+    private OIDCUserManager userManager;\n+\n+    private OIDCProvider getOIDCProvider(final String opName) {\n+        OIDCProvider op = null;\n+        if (StringUtils.isBlank(opName)) {\n+            List<OIDCProvider> ops = opDAO.findAll();\n+            if (!ops.isEmpty()) {\n+                op = ops.get(0);\n+            }\n+        } else {\n+            op = opDAO.findByName(opName);\n+        }\n+        if (op == null) {\n+            throw new NotFoundException(StringUtils.isBlank(opName)\n+                    ? \"Any OIDC Provider\"\n+                    : \"OIDC Provider '\" + opName + \"'\");\n+        }\n+        return op;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    public OIDCLoginRequestTO createLoginRequest(final String redirectURI, final String opName) {\n+        // 1. look for Provider\n+        OIDCProvider op = getOIDCProvider(opName);\n+\n+        // 2. create AuthnRequest\n+        OIDCLoginRequestTO requestTO = new OIDCLoginRequestTO();\n+        requestTO.setProviderAddress(op.getAuthorizationEndpoint());\n+        requestTO.setClientId(op.getClientID());\n+        requestTO.setScope(\"openid email profile\");\n+        requestTO.setResponseType(\"code\");\n+        requestTO.setRedirectURI(redirectURI);\n+        requestTO.setState(UUID_GENERATOR.generate().toString());\n+        return requestTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    public OIDCLoginResponseTO login(final String redirectURI, final String authorizationCode, final String opName) {\n+        OIDCProvider op = getOIDCProvider(opName);\n+\n+        // 1. get OpenID Connect tokens\n+        String body = OIDCConstants.CODE + \"=\" + authorizationCode\n+                + \"&\" + OIDCConstants.CLIENT_ID + \"=\" + op.getClientID()\n+                + \"&\" + OIDCConstants.CLIENT_SECRET + \"=\" + op.getClientSecret()\n+                + \"&\" + OIDCConstants.REDIRECT_URI + \"=\" + redirectURI\n+                + \"&\" + OIDCConstants.GRANT_TYPE + \"=authorization_code\";\n+        TokenEndpointResponse tokenEndpointResponse = getOIDCTokens(op.getTokenEndpoint(), body);\n+\n+        // 1. get OpenID Connect tokens\n+        Consumer consumer = new Consumer(op.getClientID(), op.getClientSecret());\n+\n+        // 2. validate token\n+        IdToken idToken = getValidatedIdToken(op, consumer, tokenEndpointResponse.getIdToken());\n+\n+        // 3. extract user information\n+        UserInfo userInfo = getUserInfo(op, tokenEndpointResponse.getAccessToken(), idToken, consumer);\n+\n+        // 4. prepare the result: find matching user (if any) and return the received attributes\n+        final OIDCLoginResponseTO responseTO = new OIDCLoginResponseTO();\n+        responseTO.setEmail(userInfo.getEmail());\n+        responseTO.setFamilyName(userInfo.getFamilyName());\n+        responseTO.setGivenName(userInfo.getGivenName());\n+        responseTO.setName(userInfo.getName());\n+        responseTO.setSubject(userInfo.getSubject());\n+\n+        String keyValue = null;\n+        for (OIDCProviderItem item : op.getItems()) {\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(item.getExtAttrName());\n+            switch (item.getExtAttrName()) {\n+                case UserInfo.PREFERRED_USERNAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getPreferredUserName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getPreferredUserName();\n+                    }\n+                    break;\n+\n+                case UserInfo.PROFILE_CLAIM:\n+                    attrTO.getValues().add(userInfo.getProfile());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getProfile();\n+                    }\n+                    break;\n+\n+                case UserInfo.EMAIL_CLAIM:\n+                    attrTO.getValues().add(userInfo.getEmail());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getEmail();\n+                    }\n+                    break;\n+\n+                case UserInfo.NAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getName();\n+                    }\n+                    break;\n+\n+                case UserInfo.FAMILY_NAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getFamilyName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getFamilyName();\n+                    }\n+                    break;\n+\n+                case UserInfo.MIDDLE_NAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getMiddleName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getMiddleName();\n+                    }\n+                    break;\n+\n+                case UserInfo.GIVEN_NAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getGivenName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getGivenName();\n+                    }\n+                    break;\n+\n+                case UserInfo.NICKNAME_CLAIM:\n+                    attrTO.getValues().add(userInfo.getNickName());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getNickName();\n+                    }\n+                    break;\n+\n+                case UserInfo.GENDER_CLAIM:\n+                    attrTO.getValues().add(userInfo.getGender());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getGender();\n+                    }\n+                    break;\n+\n+                case UserInfo.LOCALE_CLAIM:\n+                    attrTO.getValues().add(userInfo.getLocale());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getLocale();\n+                    }\n+                    break;\n+\n+                case UserInfo.ZONEINFO_CLAIM:\n+                    attrTO.getValues().add(userInfo.getZoneInfo());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getZoneInfo();\n+                    }\n+                    break;\n+\n+                case UserInfo.BIRTHDATE_CLAIM:\n+                    attrTO.getValues().add(userInfo.getBirthDate());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getBirthDate();\n+                    }\n+                    break;\n+\n+                case UserInfo.PHONE_CLAIM:\n+                    attrTO.getValues().add(userInfo.getPhoneNumber());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getPhoneNumber();\n+                    }\n+                    break;\n+\n+                case UserInfo.ADDRESS_CLAIM:\n+                    attrTO.getValues().add(userInfo.getUserAddress().getFormatted());\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = userInfo.getUserAddress().getFormatted();\n+                    }\n+                    break;\n+\n+                case UserInfo.UPDATED_AT_CLAIM:\n+                    attrTO.getValues().add(Long.toString(userInfo.getUpdatedAt()));\n+                    responseTO.getAttrs().add(attrTO);\n+                    if (item.isConnObjectKey()) {\n+                        keyValue = Long.toString(userInfo.getUpdatedAt());\n+                    }\n+                    break;\n+\n+                default:\n+                    LOG.warn(\"Unsupported: {} \", item.getExtAttrName());\n+            }\n+        }\n+\n+        final List<String> matchingUsers = keyValue == null\n+                ? Collections.<String>emptyList()\n+                : userManager.findMatchingUser(keyValue, op.getConnObjectKeyItem().get());\n+        LOG.debug(\"Found {} matching users for {}\", matchingUsers.size(), keyValue);\n+\n+        String username;\n+        if (matchingUsers.isEmpty()) {\n+            if (op.isCreateUnmatching()) {\n+                LOG.debug(\"No user matching {}, about to create\", keyValue);\n+\n+                final String emailValue = userInfo.getEmail();\n+                username = AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(),\n+                        () -> userManager.create(op, responseTO, emailValue));\n+            } else {\n+                throw new NotFoundException(\"User matching the provided value \" + keyValue);\n+            }\n+        } else if (matchingUsers.size() > 1) {\n+            throw new IllegalArgumentException(\"Several users match the provided value \" + keyValue);\n+        } else {\n+            if (op.isUpdateMatching()) {\n+                LOG.debug(\"About to update {} for {}\", matchingUsers.get(0), keyValue);\n+\n+                username = AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(),\n+                        () -> userManager.update(matchingUsers.get(0), op, responseTO));\n+            } else {\n+                username = matchingUsers.get(0);\n+            }\n+\n+        }\n+\n+        responseTO.setUsername(username);\n+\n+        // 5. generate JWT for further access\n+        Map<String, Object> claims = new HashMap<>();\n+        claims.put(JWT_CLAIM_OP_ENTITYID, idToken.getIssuer());\n+        claims.put(JWT_CLAIM_USERID, idToken.getSubject());\n+\n+        byte[] authorities = null;\n+        try {\n+            authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n+                    authDataAccessor.getAuthorities(responseTO.getUsername())), CipherAlgorithm.AES).\n+                    getBytes();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch authorities\", e);\n+        }\n+\n+        Pair<String, Date> accessTokenInfo =\n+                accessTokenDataBinder.create(responseTO.getUsername(), claims, authorities, true);\n+        responseTO.setAccessToken(accessTokenInfo.getLeft());\n+        responseTO.setAccessTokenExpiryTime(accessTokenInfo.getRight());\n+\n+        return responseTO;\n+    }\n+\n+    private TokenEndpointResponse getOIDCTokens(final String url, final String body) {\n+        String oidcTokens = WebClient.create(url).\n+                type(MediaType.APPLICATION_FORM_URLENCODED).accept(MediaType.APPLICATION_JSON).\n+                post(body).\n+                readEntity(String.class);\n+        TokenEndpointResponse endpointResponse = null;\n+        try {\n+            endpointResponse = MAPPER.readValue(oidcTokens, TokenEndpointResponse.class);\n+        } catch (Exception e) {\n+            LOG.error(\"While getting the Tokens from the OP\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+        return endpointResponse;\n+    }\n+\n+    private IdToken getValidatedIdToken(final OIDCProvider op, final Consumer consumer, final String jwtIdToken) {\n+        IdTokenReader idTokenReader = new IdTokenReader();\n+        idTokenReader.setClockOffset(10);\n+        idTokenReader.setIssuerId(op.getIssuer());\n+        WebClient jwkSetClient = WebClient.create(\n+                op.getJwksUri(), Arrays.asList(new JsonWebKeysProvider())).\n+                accept(MediaType.APPLICATION_JSON);\n+        idTokenReader.setJwkSetClient(jwkSetClient);\n+        IdToken idToken = null;\n+        try {\n+            idToken = idTokenReader.getIdToken(jwtIdToken, consumer);\n+        } catch (Exception e) {\n+            LOG.error(\"While validating the id_token\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+        return idToken;\n+    }\n+\n+    private UserInfo getUserInfo(\n+            final OIDCProvider op,\n+            final String accessToken,\n+            final IdToken idToken,\n+            final Consumer consumer) {\n+\n+        WebClient userInfoServiceClient = WebClient.create(\n+                op.getUserinfoEndpoint(), Arrays.asList(new JsonMapObjectProvider())).\n+                accept(MediaType.APPLICATION_JSON);\n+        ClientAccessToken clientAccessToken = new ClientAccessToken(\"Bearer\", accessToken);\n+        UserInfoClient userInfoClient = new UserInfoClient();\n+        userInfoClient.setUserInfoServiceClient(userInfoServiceClient);\n+        UserInfo userInfo = null;\n+        try {\n+            userInfo = userInfoClient.getUserInfo(clientAccessToken, idToken, consumer);\n+        } catch (Exception e) {\n+            LOG.error(\"While getting the userInfo\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+        return userInfo;\n+    }\n+\n+    @Override\n+    protected AbstractBaseBean resolveReference(\n+            final Method method, final Object... args) throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"af8e57974c466fe41dbf5d996ec187568bff6a99","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCProviderLogic.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n+import org.apache.syncope.core.logic.init.OIDCClientClassPathScanImplementationLookup;\n+import org.apache.syncope.core.logic.model.OIDCProviderDiscoveryDocument;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.provisioning.api.data.OIDCProviderDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class OIDCProviderLogic extends AbstractTransactionalLogic<OIDCProviderTO> {\n+\n+    @Autowired\n+    private OIDCProviderDAO opDAO;\n+\n+    @Autowired\n+    private OIDCProviderDataBinder binder;\n+\n+    @Autowired\n+    private OIDCClientClassPathScanImplementationLookup implLookup;\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public Set<String> getActionsClasses() {\n+        return implLookup.getActionsClasses();\n+    }\n+\n+    private OIDCProviderDiscoveryDocument getDiscoveryDocument(final String issuer) {\n+        WebClient client = WebClient.create(\n+                issuer + \"/.well-known/openid-configuration\", Arrays.asList(new JacksonJsonProvider())).\n+                accept(MediaType.APPLICATION_JSON);\n+        return client.get(OIDCProviderDiscoveryDocument.class);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + OIDCClientEntitlement.OP_CREATE + \"')\")\n+    public String createFromDiscovery(final OIDCProviderTO opTO) {\n+        OIDCProviderDiscoveryDocument discoveryDocument = getDiscoveryDocument(opTO.getIssuer());\n+\n+        opTO.setAuthorizationEndpoint(discoveryDocument.getAuthorizationEndpoint());\n+        opTO.setIssuer(discoveryDocument.getIssuer());\n+        opTO.setJwksUri(discoveryDocument.getJwksUri());\n+        opTO.setTokenEndpoint(discoveryDocument.getTokenEndpoint());\n+        opTO.setUserinfoEndpoint(discoveryDocument.getUserinfoEndpoint());\n+\n+        return create(opTO);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + OIDCClientEntitlement.OP_CREATE + \"')\")\n+    public String create(final OIDCProviderTO opTO) {\n+        if (opTO.getConnObjectKeyItem() == null) {\n+            ItemTO connObjectKeyItem = new ItemTO();\n+            connObjectKeyItem.setIntAttrName(\"username\");\n+            connObjectKeyItem.setExtAttrName(\"email\");\n+            opTO.setConnObjectKeyItem(connObjectKeyItem);\n+        }\n+\n+        OIDCProvider provider = opDAO.save(binder.create(opTO));\n+\n+        return provider.getKey();\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    public List<OIDCProviderTO> list() {\n+        return opDAO.findAll().stream().map(binder::getOIDCProviderTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + OIDCClientEntitlement.OP_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public OIDCProviderTO read(final String key) {\n+        OIDCProvider op = opDAO.find(key);\n+        if (op == null) {\n+            throw new NotFoundException(\"OIDC Provider '\" + key + \"'\");\n+        }\n+        return binder.getOIDCProviderTO(op);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + OIDCClientEntitlement.OP_UPDATE + \"')\")\n+    public void update(final OIDCProviderTO oidcProviderTO) {\n+        OIDCProvider oidcProvider = opDAO.find(oidcProviderTO.getKey());\n+        if (oidcProvider == null) {\n+            throw new NotFoundException(\"OIDC Provider '\" + oidcProviderTO.getKey() + \"'\");\n+        }\n+\n+        if (!oidcProvider.getIssuer().equals(oidcProviderTO.getIssuer())) {\n+            LOG.error(\"Issuers do not match: expected {}, found {}\",\n+                    oidcProvider.getIssuer(), oidcProviderTO.getIssuer());\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            sce.getElements().add(\"Issuers do not match\");\n+            throw sce;\n+        }\n+\n+        opDAO.save(binder.update(oidcProvider, oidcProviderTO));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + OIDCClientEntitlement.OP_DELETE + \"')\")\n+    public void delete(final String key) {\n+        OIDCProvider op = opDAO.find(key);\n+        if (op == null) {\n+            throw new NotFoundException(\"OIDC Provider '\" + key + \"'\");\n+        }\n+        opDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected OIDCProviderTO resolveReference(\n+            final Method method, final Object... args) throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof OIDCProviderTO) {\n+                    key = ((OIDCProviderTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getOIDCProviderTO(opDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"82d6d8a0ec758b7587065dc6e27ecc4343e66089","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/init/OIDCClientClassPathScanImplementationLookup.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.ClassUtils;\n+\n+@Component\n+public class OIDCClientClassPathScanImplementationLookup implements SyncopeLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n+\n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n+\n+    private Set<String> actionsClasses;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        actionsClasses = new HashSet<>();\n+\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(OIDCProviderActions.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(DEFAULT_BASE_PACKAGE)) {\n+            try {\n+                Class<?> clazz = ClassUtils.resolveClassName(\n+                        bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n+\n+                if (OIDCProviderActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    actionsClasses.add(clazz.getName());\n+                }\n+            } catch (Throwable t) {\n+                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n+            }\n+        }\n+\n+        actionsClasses = Collections.unmodifiableSet(actionsClasses);\n+    }\n+\n+    public Set<String> getActionsClasses() {\n+        return actionsClasses;\n+    }\n+\n+}"},{"sha":"f24eb794a550358d762776aa272e4e65adefa4f8","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/init/OIDCClientLoader.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n+import org.apache.syncope.core.persistence.api.DomainsHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OIDCClientLoader implements SyncopeLoader {\n+\n+    @Autowired\n+    private DomainsHolder domainsHolder;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return 1000;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().init(OIDCClientEntitlement.values());\n+\n+        for (String domain : domainsHolder.getDomains().keySet()) {\n+            AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    return null;\n+                }\n+            });\n+        }\n+    }\n+\n+}"},{"sha":"aae3f0cec57f8c60a5810e59803ceca298047157","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/model/OIDCProviderDiscoveryDocument.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FOIDCProviderDiscoveryDocument.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FOIDCProviderDiscoveryDocument.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FOIDCProviderDiscoveryDocument.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonPropertyOrder({\n+    \"issuer\",\n+    \"authorization_endpoint\",\n+    \"token_endpoint\",\n+    \"userinfo_endpoint\",\n+    \"end_session_endpoint\",\n+    \"jwks_uri\",\n+    \"registration_endpoint\"\n+})\n+public class OIDCProviderDiscoveryDocument {\n+\n+    @JsonProperty(\"issuer\")\n+    private String issuer;\n+\n+    @JsonProperty(\"authorization_endpoint\")\n+    private String authorizationEndpoint;\n+\n+    @JsonProperty(\"token_endpoint\")\n+    private String tokenEndpoint;\n+\n+    @JsonProperty(\"userinfo_endpoint\")\n+    private String userinfoEndpoint;\n+\n+    @JsonProperty(\"end_session_endpoint\")\n+    private String endSessionEndpoint;\n+\n+    @JsonProperty(\"jwks_uri\")\n+    private String jwksUri;\n+\n+    @JsonProperty(\"registration_endpoint\")\n+    private String registrationEndpoint;\n+\n+    @JsonProperty(\"issuer\")\n+    public String getIssuer() {\n+        return issuer;\n+    }\n+\n+    @JsonProperty(\"issuer\")\n+    public void setIssuer(final String issuer) {\n+        this.issuer = issuer;\n+    }\n+\n+    @JsonProperty(\"authorization_endpoint\")\n+    public String getAuthorizationEndpoint() {\n+        return authorizationEndpoint;\n+    }\n+\n+    @JsonProperty(\"authorization_endpoint\")\n+    public void setAuthorizationEndpoint(final String authorizationEndpoint) {\n+        this.authorizationEndpoint = authorizationEndpoint;\n+    }\n+\n+    @JsonProperty(\"token_endpoint\")\n+    public String getTokenEndpoint() {\n+        return tokenEndpoint;\n+    }\n+\n+    @JsonProperty(\"token_endpoint\")\n+    public void setTokenEndpoint(final String tokenEndpoint) {\n+        this.tokenEndpoint = tokenEndpoint;\n+    }\n+\n+    @JsonProperty(\"userinfo_endpoint\")\n+    public String getUserinfoEndpoint() {\n+        return userinfoEndpoint;\n+    }\n+\n+    @JsonProperty(\"userinfo_endpoint\")\n+    public void setUserinfoEndpoint(final String userinfoEndpoint) {\n+        this.userinfoEndpoint = userinfoEndpoint;\n+    }\n+\n+    @JsonProperty(\"end_session_endpoint\")\n+    public String getEndSessionEndpoint() {\n+        return endSessionEndpoint;\n+    }\n+\n+    @JsonProperty(\"end_session_endpoint\")\n+    public void setEndSessionEndpoint(final String endSessionEndpoint) {\n+        this.endSessionEndpoint = endSessionEndpoint;\n+    }\n+\n+    @JsonProperty(\"jwks_uri\")\n+    public String getJwksUri() {\n+        return jwksUri;\n+    }\n+\n+    @JsonProperty(\"jwks_uri\")\n+    public void setJwksUri(final String jwksUri) {\n+        this.jwksUri = jwksUri;\n+    }\n+\n+    @JsonProperty(\"registration_endpoint\")\n+    public String getRegistrationEndpoint() {\n+        return registrationEndpoint;\n+    }\n+\n+    @JsonProperty(\"registration_endpoint\")\n+    public void setRegistrationEndpoint(final String registrationEndpoint) {\n+        this.registrationEndpoint = registrationEndpoint;\n+    }\n+\n+}"},{"sha":"7908b8881ae50e557b65668e1482c2aab9a83743","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/model/TokenEndpointResponse.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FTokenEndpointResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FTokenEndpointResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fmodel%2FTokenEndpointResponse.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.model;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonPropertyOrder({\n+    \"access_token\",\n+    \"id_token\",\n+    \"expires_in\",\n+    \"token_type\"\n+})\n+public class TokenEndpointResponse {\n+\n+    @JsonProperty(\"access_token\")\n+    private String accessToken;\n+\n+    @JsonProperty(\"id_token\")\n+    private String idToken;\n+\n+    @JsonProperty(\"expires_in\")\n+    private int expiresIn;\n+\n+    @JsonProperty(\"token_type\")\n+    private String tokenType;\n+\n+    @JsonProperty(\"access_token\")\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    @JsonProperty(\"access_token\")\n+    public void setAccessToken(final String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    @JsonProperty(\"id_token\")\n+    public String getIdToken() {\n+        return idToken;\n+    }\n+\n+    @JsonProperty(\"id_token\")\n+    public void setIdToken(final String idToken) {\n+        this.idToken = idToken;\n+    }\n+\n+    @JsonProperty(\"expires_in\")\n+    public int getExpiresIn() {\n+        return expiresIn;\n+    }\n+\n+    @JsonProperty(\"expires_in\")\n+    public void setExpiresIn(final int expiresIn) {\n+        this.expiresIn = expiresIn;\n+    }\n+\n+    @JsonProperty(\"token_type\")\n+    public String getTokenType() {\n+        return tokenType;\n+    }\n+\n+    @JsonProperty(\"token_type\")\n+    public void setTokenType(final String tokenType) {\n+        this.tokenType = tokenType;\n+    }\n+\n+}"},{"sha":"25cb784625a317e5ec36dbd0e9eeea5ca44533d0","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,292 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.oidc;\n+\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class OIDCUserManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCUserManager.class);\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private IntAttrNameParser intAttrNameParser;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    @Autowired\n+    private UserProvisioningManager provisioningManager;\n+\n+    @Autowired\n+    private UserDataBinder binder;\n+\n+    @Transactional(readOnly = true)\n+    public List<String> findMatchingUser(final String keyValue, final OIDCProviderItem connObjectKeyItem) {\n+        List<String> result = new ArrayList<>();\n+\n+        String transformed = keyValue;\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+            List<Object> output = transformer.beforePull(\n+                    null,\n+                    null,\n+                    Collections.<Object>singletonList(transformed));\n+            if (output != null && !output.isEmpty()) {\n+                transformed = output.get(0).toString();\n+            }\n+        }\n+\n+        IntAttrName intAttrName;\n+        try {\n+            intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n+        } catch (ParseException e) {\n+            LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", connObjectKeyItem.getIntAttrName(), e);\n+            return result;\n+        }\n+\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    User byKey = userDAO.find(transformed);\n+                    if (byKey != null) {\n+                        result.add(byKey.getUsername());\n+                    }\n+                    break;\n+\n+                case \"username\":\n+                    User byUsername = userDAO.findByUsername(transformed);\n+                    if (byUsername != null) {\n+                        result.add(byUsername.getUsername());\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n+\n+                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (schema == null) {\n+                        value.setStringValue(transformed);\n+                    } else {\n+                        try {\n+                            value.parseValue(schema, transformed);\n+                        } catch (ParsingValidationException e) {\n+                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n+                            value.setStringValue(transformed);\n+                        }\n+                    }\n+\n+                    result.addAll(userDAO.findByPlainAttrValue(intAttrName.getSchemaName(), value, false).stream().\n+                            map(User::getUsername).collect(Collectors.toList()));\n+                    break;\n+\n+                case DERIVED:\n+                    result.addAll(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed, false).stream().\n+                            map(User::getUsername).collect(Collectors.toList()));\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private List<OIDCProviderActions> getActions(final OIDCProvider op) {\n+        List<OIDCProviderActions> actions = new ArrayList<>();\n+\n+        op.getActionsClassNames().forEach(className -> {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+                OIDCProviderActions opActions = (OIDCProviderActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                actions.add(opActions);\n+            } catch (Exception e) {\n+                LOG.warn(\"Class '{}' not found\", className, e);\n+            }\n+        });\n+\n+        return actions;\n+    }\n+\n+    public void fill(final OIDCProvider op, final OIDCLoginResponseTO responseTO, final UserTO userTO) {\n+        op.getItems().forEach(item -> {\n+            List<String> values = Collections.emptyList();\n+            Optional<AttrTO> oidcAttr = responseTO.getAttr(item.getExtAttrName());\n+            if (oidcAttr.isPresent() && !oidcAttr.get().getValues().isEmpty()) {\n+                values = oidcAttr.get().getValues();\n+\n+                List<Object> transformed = new ArrayList<>(values);\n+                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item)) {\n+                    transformed = transformer.beforePull(null, userTO, transformed);\n+                }\n+                values.clear();\n+                for (Object value : transformed) {\n+                    values.add(value.toString());\n+                }\n+            }\n+\n+            IntAttrName intAttrName = null;\n+            try {\n+                intAttrName = intAttrNameParser.parse(item.getIntAttrName(), AnyTypeKind.USER);\n+            } catch (ParseException e) {\n+                LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", item.getIntAttrName(), e);\n+            }\n+\n+            if (intAttrName != null && intAttrName.getField() != null) {\n+                switch (intAttrName.getField()) {\n+                    case \"username\":\n+                        if (!values.isEmpty()) {\n+                            userTO.setUsername(values.get(0));\n+                        }\n+                        break;\n+\n+                    default:\n+                        LOG.warn(\"Unsupported: {}\", intAttrName.getField());\n+                }\n+            } else if (intAttrName != null && intAttrName.getSchemaType() != null) {\n+                switch (intAttrName.getSchemaType()) {\n+                    case PLAIN:\n+                        Optional<AttrTO> attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n+                        if (attr.isPresent()) {\n+                            attr.get().getValues().clear();\n+                        } else {\n+                            attr = Optional.of(new AttrTO.Builder().schema(intAttrName.getSchemaName()).build());\n+                            userTO.getPlainAttrs().add(attr.get());\n+                        }\n+                        attr.get().getValues().addAll(values);\n+                        break;\n+\n+                    default:\n+                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchemaName());\n+                }\n+            }\n+        });\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n+    public String create(final OIDCProvider op, final OIDCLoginResponseTO responseTO, final String email) {\n+        UserTO userTO = new UserTO();\n+\n+        if (op.getUserTemplate() != null && op.getUserTemplate().get() != null) {\n+            templateUtils.apply(userTO, op.getUserTemplate().get());\n+        }\n+\n+        List<OIDCProviderActions> actions = getActions(op);\n+        for (OIDCProviderActions action : actions) {\n+            userTO = action.beforeCreate(userTO, responseTO);\n+        }\n+\n+        fill(op, responseTO, userTO);\n+\n+        if (userTO.getRealm() == null) {\n+            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        }\n+        if (userTO.getUsername() == null) {\n+            userTO.setUsername(email);\n+        }\n+\n+        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userTO, false, false);\n+        userTO = binder.getUserTO(created.getKey());\n+\n+        for (OIDCProviderActions action : actions) {\n+            userTO = action.afterCreate(userTO, responseTO);\n+        }\n+\n+        return userTO.getUsername();\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n+    public String update(final String username, final OIDCProvider op, final OIDCLoginResponseTO responseTO) {\n+        UserTO userTO = binder.getUserTO(userDAO.findKey(username));\n+        UserTO original = SerializationUtils.clone(userTO);\n+\n+        fill(op, responseTO, userTO);\n+\n+        UserPatch userPatch = AnyOperations.diff(userTO, original, true);\n+\n+        List<OIDCProviderActions> actions = getActions(op);\n+        for (OIDCProviderActions action : actions) {\n+            userPatch = action.beforeUpdate(userPatch, responseTO);\n+        }\n+\n+        Pair<UserPatch, List<PropagationStatus>> updated = provisioningManager.update(userPatch, false);\n+        userTO = binder.getUserTO(updated.getLeft().getKey());\n+\n+        for (OIDCProviderActions action : actions) {\n+            userTO = action.afterUpdate(userTO, responseTO);\n+        }\n+\n+        return userTO.getUsername();\n+    }\n+}"},{"sha":"321602b66b47b60036bcdb25337f1232544c9d7c","filename":"ext/oidcclient/persistence-api/pom.xml","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Persistence API</name>\n+  <description>Apache Syncope Ext: OIDC Client Persistence API</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-persistence-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"793e461fa483bca29f56865c1a75c85db9e10474","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/OIDCProviderDAO.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCProviderDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCProviderDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FOIDCProviderDAO.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+\n+public interface OIDCProviderDAO {\n+\n+    OIDCProvider find(String key);\n+\n+    OIDCProvider findByName(String name);\n+\n+    List<OIDCProvider> findAll();\n+\n+    OIDCProvider save(final OIDCProvider op);\n+\n+    void delete(String key);\n+}"},{"sha":"489ce867938e7769a8f326349177c8f524a2e8af","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCEntityFactory.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCEntityFactory.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface OIDCEntityFactory {\n+\n+    <E extends Entity> E newEntity(Class<E> reference);\n+\n+}"},{"sha":"b0c7deef3bcbbd0437b74e3c6d8d8119c70c839b","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCProvider.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface OIDCProvider extends Entity {\n+\n+    String getName();\n+\n+    void setName(String entityID);\n+\n+    String getClientID();\n+\n+    void setClientID(String clientId);\n+\n+    String getClientSecret();\n+\n+    void setClientSecret(String clientSecret);\n+\n+    String getAuthorizationEndpoint();\n+\n+    void setAuthorizationEndpoint(String authorizationEndpoint);\n+\n+    String getTokenEndpoint();\n+\n+    void setTokenEndpoint(String tokenEndpoint);\n+\n+    String getJwksUri();\n+\n+    void setJwksUri(String jwsUri);\n+\n+    String getIssuer();\n+\n+    void setIssuer(String issuer);\n+\n+    String getUserinfoEndpoint();\n+\n+    void setUserinfoEndpoint(String userinfoEndpoint);\n+\n+    boolean getHasDiscovery();\n+\n+    void setHasDiscovery(boolean hasDiscovery);\n+\n+    boolean isCreateUnmatching();\n+\n+    void setCreateUnmatching(boolean createUnmatching);\n+\n+    boolean isUpdateMatching();\n+\n+    void setUpdateMatching(boolean updateMatching);\n+\n+    OIDCUserTemplate getUserTemplate();\n+\n+    void setUserTemplate(OIDCUserTemplate userTemplate);\n+\n+    List<? extends OIDCProviderItem> getItems();\n+\n+    Optional<? extends OIDCProviderItem> getConnObjectKeyItem();\n+\n+    void setConnObjectKeyItem(OIDCProviderItem item);\n+\n+    boolean add(OIDCProviderItem item);\n+\n+    Set<String> getActionsClassNames();\n+\n+}"},{"sha":"3047c881eeb8d88a722db9ac25042f87d5ebd0ee","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCProviderItem.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProviderItem.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+\n+public interface OIDCProviderItem extends Item {\n+\n+    OIDCProvider getOP();\n+\n+    void setOP(OIDCProvider op);\n+\n+}"},{"sha":"339f6ec93ae2bcfbf29e6f26254aeca67272ab03","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCUserTemplate.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCUserTemplate.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface OIDCUserTemplate extends AnyTemplate {\n+\n+    OIDCProvider getOP();\n+\n+    void setOP(OIDCProvider op);\n+\n+}"},{"sha":"f642ef61fbfb68381a3dbaba163fb639c74c2b9b","filename":"ext/oidcclient/persistence-jpa/pom.xml","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Persistence JPA</name>\n+  <description>Apache Syncope Ext: OIDC Client Persistence JPA</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-persistence-jpa</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>    \n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${rootpom.basedir}/core/persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> \n+          <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>${rootpom.basedir}/core/persistence-jpa/src/main/resources</directory>\n+        <filtering>true</filtering>        \n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgenr</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+        \n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"91e3af0cda0c9dd4b224b94db6c81ff860ef3ea9","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAOIDCProviderDAO.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCProviderDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCProviderDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAOIDCProviderDAO.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAOIDCProvider;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAOIDCProviderDAO extends AbstractDAO<OIDCProvider> implements OIDCProviderDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public OIDCProvider find(final String key) {\n+        return entityManager().find(JPAOIDCProvider.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public OIDCProvider findByName(final String name) {\n+        TypedQuery<OIDCProvider> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCProvider.class.getSimpleName()\n+                + \" e WHERE e.name = :name\", OIDCProvider.class);\n+        query.setParameter(\"name\", name);\n+\n+        OIDCProvider result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No OIDC Provider found with name {}\", name, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<OIDCProvider> findAll() {\n+        TypedQuery<OIDCProvider> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCProvider.class.getSimpleName() + \" e\", OIDCProvider.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public OIDCProvider save(final OIDCProvider op) {\n+        return entityManager().merge(op);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        OIDCProvider op = find(key);\n+        if (op != null) {\n+            entityManager().remove(op);\n+        }\n+    }\n+\n+}"},{"sha":"e5870bf75a6be88b0d42b89c18f16bc90ca4b42c","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCEntityFactory.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCEntityFactory.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.OIDCEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPAOIDCEntityFactory implements OIDCEntityFactory {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <E extends Entity> E newEntity(final Class<E> reference) {\n+        E result;\n+\n+        if (reference.equals(OIDCProvider.class)) {\n+            result = (E) new JPAOIDCProvider();\n+        } else if (reference.equals(OIDCProviderItem.class)) {\n+            result = (E) new JPAOIDCProviderItem();\n+        } else if (reference.equals(OIDCUserTemplate.class)) {\n+            result = (E) new JPAOIDCUserTemplate();\n+        } else {\n+            throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"c32f91e46cea3cefd4b4a351f9013ec4ab4c0bfa","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProvider.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+\n+@Entity\n+@Table(name = JPAOIDCProvider.TABLE)\n+@Cacheable\n+public class JPAOIDCProvider extends AbstractGeneratedKeyEntity implements OIDCProvider {\n+\n+    public static final String TABLE = \"OIDCProvider\";\n+\n+    private static final long serialVersionUID = 1423093003585826403L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @Column(unique = true, nullable = false)\n+    private String clientID;\n+\n+    @Column(unique = true, nullable = false)\n+    private String clientSecret;\n+\n+    @Column(nullable = false)\n+    private String authorizationEndpoint;\n+\n+    @Column(nullable = false)\n+    private String tokenEndpoint;\n+\n+    @Column(nullable = false)\n+    private String jwksUri;\n+\n+    @Column(nullable = false)\n+    private String issuer;\n+\n+    @Column(nullable = false)\n+    private String userinfoEndpoint;\n+\n+    @Column(nullable = false)\n+    private boolean hasDiscovery;\n+\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"op\")\n+    private JPAOIDCUserTemplate userTemplate;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"op\")\n+    private List<JPAOIDCProviderItem> items = new ArrayList<>();\n+\n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer createUnmatching;\n+\n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer updateMatching;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = TABLE + \"_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"oidcOP_id\", referencedColumnName = \"id\"))\n+    private Set<String> actionsClassNames = new HashSet<>();\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getClientID() {\n+        return clientID;\n+    }\n+\n+    @Override\n+    public void setClientID(final String clientID) {\n+        this.clientID = clientID;\n+    }\n+\n+    @Override\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    @Override\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    @Override\n+    public String getAuthorizationEndpoint() {\n+        return authorizationEndpoint;\n+    }\n+\n+    @Override\n+    public void setAuthorizationEndpoint(final String authorizationEndpoint) {\n+        this.authorizationEndpoint = authorizationEndpoint;\n+    }\n+\n+    @Override\n+    public String getTokenEndpoint() {\n+        return tokenEndpoint;\n+    }\n+\n+    @Override\n+    public void setTokenEndpoint(final String tokenEndpoint) {\n+        this.tokenEndpoint = tokenEndpoint;\n+    }\n+\n+    @Override\n+    public String getJwksUri() {\n+        return jwksUri;\n+    }\n+\n+    @Override\n+    public void setJwksUri(final String jwksUri) {\n+        this.jwksUri = jwksUri;\n+    }\n+\n+    @Override\n+    public String getIssuer() {\n+        return issuer;\n+    }\n+\n+    @Override\n+    public void setIssuer(final String issuer) {\n+        this.issuer = issuer;\n+    }\n+\n+    @Override\n+    public String getUserinfoEndpoint() {\n+        return userinfoEndpoint;\n+    }\n+\n+    @Override\n+    public void setUserinfoEndpoint(final String userinfoEndpoint) {\n+        this.userinfoEndpoint = userinfoEndpoint;\n+    }\n+\n+    @Override\n+    public boolean getHasDiscovery() {\n+        return hasDiscovery;\n+    }\n+\n+    @Override\n+    public void setHasDiscovery(final boolean hasDiscovery) {\n+        this.hasDiscovery = hasDiscovery;\n+    }\n+\n+    @Override\n+    public boolean isCreateUnmatching() {\n+        return isBooleanAsInteger(createUnmatching);\n+    }\n+\n+    @Override\n+    public void setCreateUnmatching(final boolean createUnmatching) {\n+        this.createUnmatching = getBooleanAsInteger(createUnmatching);\n+    }\n+\n+    @Override\n+    public boolean isUpdateMatching() {\n+        return isBooleanAsInteger(updateMatching);\n+    }\n+\n+    @Override\n+    public void setUpdateMatching(final boolean updateMatching) {\n+        this.updateMatching = getBooleanAsInteger(updateMatching);\n+    }\n+\n+    @Override\n+    public OIDCUserTemplate getUserTemplate() {\n+        return userTemplate;\n+    }\n+\n+    @Override\n+    public void setUserTemplate(final OIDCUserTemplate userTemplate) {\n+        checkType(userTemplate, JPAOIDCUserTemplate.class);\n+        this.userTemplate = (JPAOIDCUserTemplate) userTemplate;\n+    }\n+\n+    @Override\n+    public boolean add(final OIDCProviderItem item) {\n+        checkType(item, JPAOIDCProviderItem.class);\n+        return items.contains((JPAOIDCProviderItem) item) || items.add((JPAOIDCProviderItem) item);\n+    }\n+\n+    @Override\n+    public List<? extends OIDCProviderItem> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public Optional<? extends OIDCProviderItem> getConnObjectKeyItem() {\n+        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst();\n+    }\n+\n+    @Override\n+    public void setConnObjectKeyItem(final OIDCProviderItem item) {\n+        item.setConnObjectKey(true);\n+        this.add(item);\n+    }\n+\n+    @Override\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+}"},{"sha":"69268cb63964223aadc0d54b650c1376ebfa5887","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProviderItem.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractItem;\n+\n+@Entity\n+@Table(name = JPAOIDCProviderItem.TABLE)\n+@Cacheable\n+public class JPAOIDCProviderItem extends AbstractItem implements OIDCProviderItem {\n+\n+    public static final String TABLE = \"OIDCProviderItem\";\n+\n+    private static final long serialVersionUID = -6903418265811089724L;\n+\n+    @ManyToOne\n+    private JPAOIDCProvider op;\n+\n+    @Override\n+    public OIDCProvider getOP() {\n+        return op;\n+    }\n+\n+    @Override\n+    public void setOP(final OIDCProvider op) {\n+        checkType(op, JPAOIDCProvider.class);\n+        this.op = (JPAOIDCProvider) op;\n+    }\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Transformer\",\n+            joinColumns =\n+            @JoinColumn(name = \"item_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> transformers = new ArrayList<>();\n+\n+    @Override\n+    public boolean add(final Implementation transformer) {\n+        checkType(transformer, JPAImplementation.class);\n+        checkImplementationType(transformer, ImplementationType.ITEM_TRANSFORMER);\n+        return this.transformers.add((JPAImplementation) transformer);\n+    }\n+\n+    @Override\n+    public List<? extends Implementation> getTransformers() {\n+        return transformers;\n+    }\n+}"},{"sha":"54eea721c874e5242cdf347f44b066d77af2ca13","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCUserTemplate.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCUserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCUserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCUserTemplate.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPAOIDCUserTemplate.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"op_id\" }))\n+public class JPAOIDCUserTemplate extends AbstractAnyTemplate implements OIDCUserTemplate {\n+\n+    public static final String TABLE = \"OIDCUserTemplate\";\n+\n+    private static final long serialVersionUID = 3964321047520954968L;\n+\n+    @ManyToOne\n+    private JPAOIDCProvider op;\n+\n+    @Override\n+    public OIDCProvider getOP() {\n+        return op;\n+    }\n+\n+    @Override\n+    public void setOP(final OIDCProvider op) {\n+        checkType(op, JPAOIDCProvider.class);\n+        this.op = (JPAOIDCProvider) op;\n+    }\n+\n+}"},{"sha":"6bdb3369648081678f6a692cd97b60a93f25248b","filename":"ext/oidcclient/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-ext</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client</name>\n+  <description>Apache Syncope Ext: OIDC Client</description>\n+  <groupId>org.apache.syncope.ext</groupId>\n+  <artifactId>syncope-ext-oidcclient</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+ \n+\n+  <modules>\n+    <module>common-lib</module>\n+    <module>rest-api</module>\n+    <module>logic</module>\n+    <module>rest-cxf</module>\n+    <module>persistence-api</module>\n+    <module>persistence-jpa</module>\n+    <module>agent</module>\n+    <module>client-console</module>\n+    <module>client-enduser</module>\n+    <module>provisioning-api</module>\n+    <module>provisioning-java</module>\n+  </modules>\n+\n+</project>"},{"sha":"3d5872140af4614beb97376d822b17b6ea88d3f1","filename":"ext/oidcclient/provisioning-api/pom.xml","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-api%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Provisioning API</name>\n+  <description>Apache Syncope Ext: OIDC Client Provisioning API</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-provisioning-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"40ea6a8f958529e963cbb3169b2a56d007f3e2aa","filename":"ext/oidcclient/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/OIDCProviderActions.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+\n+public interface OIDCProviderActions {\n+\n+    UserTO beforeCreate(UserTO input, OIDCLoginResponseTO loginResponse);\n+\n+    UserTO afterCreate(UserTO input, OIDCLoginResponseTO loginResponse);\n+\n+    UserPatch beforeUpdate(UserPatch input, OIDCLoginResponseTO loginResponse);\n+\n+    UserTO afterUpdate(UserTO input, OIDCLoginResponseTO loginResponse);\n+\n+}"},{"sha":"acea05dcbf60b5e729a02bb1fb7629967f2593a9","filename":"ext/oidcclient/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/OIDCProviderDataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCProviderDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCProviderDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCProviderDataBinder.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+\n+public interface OIDCProviderDataBinder {\n+\n+    OIDCProvider create(OIDCProviderTO op);\n+\n+    OIDCProvider update(OIDCProvider op, OIDCProviderTO opTO);\n+\n+    OIDCProviderTO getOIDCProviderTO(OIDCProvider op);\n+\n+}"},{"sha":"962c2b76679d4d3b8976817c5bcb403553254073","filename":"ext/oidcclient/provisioning-java/pom.xml","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client Provisioning Java</name>\n+  <description>Apache Syncope Ext: OIDC Client Provisioning Java</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-provisioning-java</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"e6b060c8c8a7ad41a47c8d575dd4e1bc96d9ed02","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultOIDCProviderActions.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n+\n+public class DefaultOIDCProviderActions implements OIDCProviderActions {\n+\n+    @Override\n+    public UserTO beforeCreate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserTO afterCreate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserPatch beforeUpdate(final UserPatch input, final OIDCLoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserTO afterUpdate(final UserTO input, final OIDCLoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+}"},{"sha":"75ead03746cdb18d1d23d0557e01d9e4aa5aa38c","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.text.ParseException;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.OIDCEntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n+import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n+import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.data.OIDCProviderDataBinder;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.spring.BeanUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OIDCProviderDataBinderImpl implements OIDCProviderDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCProviderDataBinder.class);\n+\n+    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"purpose\" };\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private OIDCProviderDAO oidcOPDAO;\n+\n+    @Autowired\n+    private OIDCEntityFactory entityFactory;\n+\n+    @Autowired\n+    private IntAttrNameParser intAttrNameParser;\n+\n+    @Override\n+    public OIDCProvider create(final OIDCProviderTO opTO) {\n+        return update(entityFactory.newEntity(OIDCProvider.class), opTO);\n+\n+    }\n+\n+    private void populateItems(\n+            final OIDCProviderTO opTO,\n+            final OIDCProvider op,\n+            final AnyTypeClassTO allowedSchemas) {\n+\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+        SyncopeClientException invalidMapping =\n+                SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n+        SyncopeClientException requiredValuesMissing =\n+                SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+\n+        for (ItemTO itemTO : opTO.getItems()) {\n+            if (itemTO == null) {\n+                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+            } else if (itemTO.getIntAttrName() == null) {\n+                requiredValuesMissing.getElements().add(\"intAttrName\");\n+                scce.addException(requiredValuesMissing);\n+            } else {\n+                IntAttrName intAttrName = null;\n+                try {\n+                    intAttrName = intAttrNameParser.parse(itemTO.getIntAttrName(), AnyTypeKind.USER);\n+                } catch (ParseException e) {\n+                    LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", itemTO.getIntAttrName(), e);\n+                }\n+\n+                if (intAttrName == null || intAttrName.getSchemaType() == null && intAttrName.getField() == null) {\n+                    LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n+                    invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not existing\");\n+                } else {\n+                    boolean allowed = true;\n+                    if (intAttrName.getSchemaType() != null\n+                            && intAttrName.getEnclosingGroup() == null\n+                            && intAttrName.getRelatedAnyObject() == null) {\n+                        switch (intAttrName.getSchemaType()) {\n+                            case PLAIN:\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case DERIVED:\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case VIRTUAL:\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            default:\n+                        }\n+                    }\n+\n+                    if (allowed) {\n+                        // no mandatory condition implies mandatory condition false\n+                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                                ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                    ClientExceptionType.InvalidValues);\n+                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                            scce.addException(invalidMandatoryCondition);\n+                        }\n+\n+                        OIDCProviderItem item = entityFactory.newEntity(OIDCProviderItem.class);\n+                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setOP(op);\n+                        item.setPurpose(MappingPurpose.NONE);\n+                        if (item.isConnObjectKey()) {\n+                            if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                                invalidMapping.getElements().\n+                                        add(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                            }\n+                            if (\"password\".equals(intAttrName.getField())) {\n+                                invalidMapping.getElements().add(\n+                                        \"Password attributes cannot be set as ConnObjectKey\");\n+                            }\n+\n+                            op.setConnObjectKeyItem(item);\n+                        } else {\n+                            op.add(item);\n+                        }\n+                    } else {\n+                        LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n+                        invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not allowed\");\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!invalidMapping.getElements().isEmpty()) {\n+            scce.addException(invalidMapping);\n+        }\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+    }\n+\n+    @Override\n+    public OIDCProvider update(final OIDCProvider op, final OIDCProviderTO opTO) {\n+        op.setAuthorizationEndpoint(opTO.getAuthorizationEndpoint());\n+        op.setClientID(opTO.getClientID());\n+        op.setClientSecret(opTO.getClientSecret());\n+        op.setName(opTO.getName());\n+        op.setIssuer(opTO.getIssuer());\n+        op.setJwksUri(opTO.getJwksUri());\n+        op.setTokenEndpoint(opTO.getTokenEndpoint());\n+        op.setUserinfoEndpoint(opTO.getUserinfoEndpoint());\n+        op.setHasDiscovery(opTO.getHasDiscovery());\n+        op.setCreateUnmatching(opTO.isCreateUnmatching());\n+        op.setUpdateMatching(opTO.isUpdateMatching());\n+\n+        if (opTO.getUserTemplate() == null) {\n+            op.setUserTemplate(null);\n+        } else {\n+            OIDCUserTemplate userTemplate = op.getUserTemplate();\n+            if (userTemplate == null) {\n+                userTemplate = entityFactory.newEntity(OIDCUserTemplate.class);\n+                userTemplate.setAnyType(anyTypeDAO.findUser());\n+                userTemplate.setOP(op);\n+                op.setUserTemplate(userTemplate);\n+            }\n+            userTemplate.set(opTO.getUserTemplate());\n+        }\n+\n+        op.getItems().clear();\n+        AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n+        anyTypeDAO.findUser().getClasses().forEach(anyTypeClass -> {\n+            allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n+                    map(Entity::getKey).collect(Collectors.toList()));\n+            allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n+                    map(Entity::getKey).collect(Collectors.toList()));\n+            allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n+                    map(Entity::getKey).collect(Collectors.toList()));\n+        });\n+        populateItems(opTO, op, allowedSchemas);\n+\n+        op.getActionsClassNames().clear();\n+        op.getActionsClassNames().addAll(opTO.getActionsClassNames());\n+\n+        return oidcOPDAO.save(op);\n+    }\n+\n+    private void populateItems(final OIDCProvider op, final OIDCProviderTO opTO) {\n+        op.getItems().forEach(item -> {\n+            ItemTO itemTO = new ItemTO();\n+            itemTO.setKey(item.getKey());\n+            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n+            itemTO.setPurpose(MappingPurpose.NONE);\n+\n+            if (itemTO.isConnObjectKey()) {\n+                opTO.setConnObjectKeyItem(itemTO);\n+            } else {\n+                opTO.add(itemTO);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public OIDCProviderTO getOIDCProviderTO(final OIDCProvider op) {\n+        OIDCProviderTO opTO = new OIDCProviderTO();\n+\n+        opTO.setKey(op.getKey());\n+        opTO.setAuthorizationEndpoint(op.getAuthorizationEndpoint());\n+        opTO.setClientID(op.getClientID());\n+        opTO.setClientSecret(op.getClientSecret());\n+        opTO.setName(op.getName());\n+        opTO.setIssuer(op.getIssuer());\n+        opTO.setJwksUri(op.getJwksUri());\n+        opTO.setTokenEndpoint(op.getTokenEndpoint());\n+        opTO.setUserinfoEndpoint(op.getUserinfoEndpoint());\n+        opTO.setHasDiscovery(op.getHasDiscovery());\n+        opTO.setCreateUnmatching(op.isCreateUnmatching());\n+        opTO.setUpdateMatching(op.isUpdateMatching());\n+\n+        if (op.getUserTemplate() != null) {\n+            opTO.setUserTemplate((UserTO) op.getUserTemplate().get());\n+        }\n+\n+        populateItems(op, opTO);\n+\n+        opTO.getActionsClassNames().addAll(op.getActionsClassNames());\n+\n+        return opTO;\n+    }\n+}"},{"sha":"60c469fd0f061c68c706538bf6c0318cbcdc112c","filename":"ext/oidcclient/rest-api/pom.xml","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client REST API</name>\n+  <description>Apache Syncope Ext: OIDC Client REST API</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-common-lib</artifactId>      \n+      <version>${project.version}</version>\n+    </dependency>    \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <!-- Generating javadoc JAR artifact for usage with CXF's WADL generator (for core) -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>attach-javadocs</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"d599e7503ddaf336bba94a92a08e7de846d7a76d","filename":"ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCClientService.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCClientService.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.OIDCConstants;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+\n+/**\n+ * REST operations for OpenID Connect Clients.\n+ */\n+@Tag(name = \"OIDCClients\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"oidcclient/clients\")\n+public interface OIDCClientService extends JAXRSService {\n+\n+    /**\n+     * Generates OpenID Connect authentication request for the Provider matching the provided op.\n+     *\n+     * @param redirectURI redirect URI\n+     * @param op OpenID Connect Provider\n+     * @return OpenID Connect authentication request\n+     */\n+    @POST\n+    @Path(\"loginRequest\")\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    OIDCLoginRequestTO createLoginRequest(\n+            @QueryParam(OIDCConstants.REDIRECT_URI) String redirectURI,\n+            @QueryParam(OIDCConstants.OP) String op);\n+\n+    /**\n+     * Uses the provided authorization code to go through the OpenID Connect tokens process and finally creates JWT for\n+     * the matching user, if found.\n+     *\n+     * @param redirectURI redirect URI\n+     * @param authorizationCode authorization code generated by the remote OpenID Connect Provider\n+     * @param op OpenID Connect Provider\n+     * @return JWT for the matching user plus attributes returned in the response\n+     */\n+    @POST\n+    @Path(\"login\")\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    OIDCLoginResponseTO login(\n+            @QueryParam(OIDCConstants.REDIRECT_URI) String redirectURI,\n+            @QueryParam(\"authorizationCode\") String authorizationCode,\n+            @QueryParam(OIDCConstants.OP) String op);\n+\n+}"},{"sha":"9705b31df2085505b398b9f589c7bccab7dd2f95","filename":"ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.core.HttpHeaders;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for OpenID Connect Providers.\n+ */\n+@Tag(name = \"OIDCProviders\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"oidcclient/providers\")\n+public interface OIDCProviderService extends JAXRSService {\n+\n+    /**\n+     * Returns the list of available OIDCProviderActions implementations.\n+     *\n+     * @return the list of available OIDCProviderActions implementations\n+     */\n+    @GET\n+    @Path(\"actionsClasses\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Set<String> getActionsClasses();\n+\n+    /**\n+     * Returns a list of all defined OIDC Providers.\n+     *\n+     * @return list of all defined OIDC Providers\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<OIDCProviderTO> list();\n+\n+    /**\n+     * Returns the OIDC Provider with matching key, if available.\n+     *\n+     * @param key OIDC Provider's key\n+     * @return OIDC Providers with matching key, if available\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    OIDCProviderTO read(@PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new OIDC Provider.\n+     *\n+     * @param oidcProviderTO OpenID Connect Provider configuration to be stored\n+     * @return Response object featuring Location header of created OIDC Provider\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"OIDC Provider successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(OIDCProviderTO oidcProviderTO);\n+\n+    /**\n+     * Creates a new OIDC Provider by using its Discovery Document.\n+     *\n+     * @param oidcProviderTO OpenID Connect Provider configuration to be stored  \n+     * @return Response object featuring Location header of created OIDC Provider\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"OIDC Provider successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Path(\"fromDiscovery\")\n+    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response createFromDiscovery(OIDCProviderTO oidcProviderTO);\n+\n+    /**\n+     * Updates the OIDC Provider with matching key.\n+     *\n+     * @param oidcProviderTO OpenID Connect Provider configuration to be stored\n+     */\n+    @Parameter(name = \"key\", description = \"OIDC Provider's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull OIDCProviderTO oidcProviderTO);\n+\n+    /**\n+     * Deletes the OIDC Provider with matching key.\n+     *\n+     * @param key OIDC Provider key\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@PathParam(\"key\") String key);\n+\n+}"},{"sha":"38798beb9b7f2a9b2cad05f684441cec3086cb14","filename":"ext/oidcclient/rest-cxf/pom.xml","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-cxf%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-oidcclient</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: OIDC Client REST CXF</name>\n+  <description>Apache Syncope Ext: OIDC Client REST CXF</description>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-api</artifactId>\n+      <version>${project.version}</version>\n+      <classifier>javadoc</classifier>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"74c14b94811f77725002e259071a149efb9ad08f","filename":"ext/oidcclient/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCClientServiceImpl.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCClientServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCClientServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCClientServiceImpl.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n+import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.apache.syncope.core.logic.OIDCClientLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n+\n+@Service\n+public class OIDCClientServiceImpl extends AbstractServiceImpl implements OIDCClientService {\n+\n+    @Autowired\n+    private OIDCClientLogic logic;\n+\n+    @Override\n+    public OIDCLoginRequestTO createLoginRequest(final String redirectURI, final String op) {\n+        return logic.createLoginRequest(redirectURI, op);\n+    }\n+\n+    @Override\n+    public OIDCLoginResponseTO login(final String redirectURI, final String authorizationCode, final String op) {\n+        return logic.login(redirectURI, authorizationCode, op);\n+    }\n+\n+}"},{"sha":"7af4366fbf02e48bb7e05736a1b66c58f0e8442b","filename":"ext/oidcclient/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCProviderServiceImpl.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.apache.syncope.core.logic.OIDCProviderLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OIDCProviderServiceImpl extends AbstractServiceImpl implements OIDCProviderService {\n+\n+    @Autowired\n+    private OIDCProviderLogic logic;\n+\n+    @Override\n+    public Set<String> getActionsClasses() {\n+        return logic.getActionsClasses();\n+    }\n+\n+    @Override\n+    public Response create(final OIDCProviderTO oidcProviderTO) {\n+        String created = logic.create(oidcProviderTO);\n+\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created).\n+                build();\n+    }\n+\n+    @Override\n+    public Response createFromDiscovery(final OIDCProviderTO oidcProviderTO) {\n+        String created = logic.createFromDiscovery(oidcProviderTO);\n+\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created).\n+                build();\n+    }\n+\n+    @Override\n+    public List<OIDCProviderTO> list() {\n+        return logic.list();\n+\n+    }\n+\n+    @Override\n+    public OIDCProviderTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void update(final OIDCProviderTO oidcProviderTO) {\n+        logic.update(oidcProviderTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+}"},{"sha":"d1e5b1bfe09280eaf5bf92719d88baf193630a65","filename":"ext/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -82,6 +82,7 @@ under the License.\n     <module>saml2sp</module>\n     <module>elasticsearch</module>\n     <module>scimv2</module>\n+    <module>oidcclient</module>\n   </modules>\n \n </project>"},{"sha":"98d45046e948caee067a10f3d1abaaf51a0b8bed","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Login.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n \n-@WebServlet(name = \"login\", urlPatterns = { \"/saml2sp/login\" })\n+@WebServlet(name = \"saml2spLogin\", urlPatterns = { \"/saml2sp/login\" })\n public class Login extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;"},{"sha":"698bc94ee93e04217c7cf12b49ab8a303ba3b121","filename":"fit/console-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -74,6 +74,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"1d53d49db4816f429b6e3c6af4a088d5f5dc8ffb","filename":"fit/console-reference/src/main/resources/oidcclient-agent.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+scheme=http\n+host=localhost\n+port=9080\n+rootPath=/syncope/rest/\n+useGZIPCompression=true"},{"sha":"1dc41d13024be6c8b63254cd1627f815d1fb9af4","filename":"fit/console-reference/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -53,6 +53,16 @@ under the License.\n     <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.SAML2SPSelfReg</param-value>\n   </context-param>\n   \n+  <!-- OIDC Client Parameters -->\n+  <context-param>\n+    <param-name>oidcclient.login.success.url</param-name>\n+    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.OIDCClientLogin</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>oidcclient.login.error.url</param-name>\n+    <param-value>../wicket/bookmarkable/org.apache.syncope.client.console.pages.Login</param-value>\n+  </context-param>\n+\n   <!-- SESSION TIMEOUT (MINUTES)-->\n   <session-config>\n     <session-timeout>30</session-timeout>"},{"sha":"876c58fbbb9777d29382558379db802c696e63d5","filename":"fit/console-reference/src/test/resources/rebel.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -34,6 +34,10 @@ under the License.\n     </dir>\n     <dir name=\"${basedir}/../../ext/scimv2/client-console/target/classes\">\n     </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/agent/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/client-console/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>\n@@ -57,6 +61,10 @@ under the License.\n       <dir name=\"${basedir}/../../ext/scimv2/client-console/target/classes\">\n       </dir>\n     </link>\n+    <link target=\"/\">\n+      <dir name=\"${basedir}/../../ext/oidcclient/client-console/target/classes\">\n+      </dir>\n+    </link>\n   </web>\n \n </application>"},{"sha":"9b5d7179446b0162bcddd2b11aca1c6050679a9e","filename":"fit/core-reference/pom.xml","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -184,6 +184,18 @@ under the License.\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>          \n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-test</artifactId>\n@@ -1098,6 +1110,17 @@ under the License.\n           <version>${project.version}</version>\n         </dependency>\n         \n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+          <artifactId>syncope-ext-oidcclient-persistence-jpa</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        \n         <dependency>\n           <groupId>org.apache.syncope.ext.scimv2</groupId>\n           <artifactId>syncope-ext-scimv2-rest-cxf</artifactId>"},{"sha":"9e7d541c157bf213a86441a3aa515f29e4478251","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -84,6 +84,8 @@\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n+import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n@@ -252,6 +254,10 @@ public abstract class AbstractITCase {\n     protected static SAML2SPService saml2SpService;\n \n     protected static SAML2IdPService saml2IdPService;\n+    \n+    protected static OIDCClientService oidcClientService;\n+\n+    protected static OIDCProviderService oidcProviderService;\n \n     protected static SCIMConfService scimConfService;\n \n@@ -322,6 +328,8 @@ public static void restSetup() {\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);\n+        oidcClientService = adminClient.getService(OIDCClientService.class);\n+        oidcProviderService = adminClient.getService(OIDCProviderService.class);\n         scimConfService = adminClient.getService(SCIMConfService.class);\n     }\n "},{"sha":"b08342ef3e9c8a476f782f22a83c04b27d1700a5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/OIDCClientDetector.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FOIDCClientDetector.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit;\n+\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OIDCClientDetector {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCClientDetector.class);\n+\n+    private static Boolean ENABLED;\n+\n+    public static boolean isOIDCClientAvailable() {\n+        synchronized (LOG) {\n+            if (ENABLED == null) {\n+                try {\n+                    new SyncopeClientFactoryBean().\n+                            setAddress(AbstractITCase.ADDRESS).\n+                            setContentType(SyncopeClientFactoryBean.ContentType.XML).\n+                            create(new AnonymousAuthenticationHandler(\n+                                    AbstractITCase.ANONYMOUS_UNAME, AbstractITCase.ANONYMOUS_KEY)).\n+                            getService(OIDCProviderService.class).list();\n+                    ENABLED = true;\n+                } catch (Exception e) {\n+                    // ignore\n+                    ENABLED = false;\n+                }\n+            }\n+        }\n+        return ENABLED;\n+    }\n+}"},{"sha":"33a9d44403622810f739d2a9bcce2185096572aa","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCClientITCase.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.BasicAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.OIDCLoginRequestTO;\n+import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.service.OIDCClientService;\n+import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.OIDCClientDetector;\n+import org.junit.AfterClass;\n+import org.junit.Assume;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class OIDCClientITCase extends AbstractITCase {\n+\n+    private static SyncopeClient anonymous;\n+\n+    private static SyncopeClient admin;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        anonymous = new SyncopeClientFactoryBean().\n+                setAddress(ADDRESS).\n+                create(new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+\n+        admin = new SyncopeClientFactoryBean().\n+                setAddress(ADDRESS).\n+                create(new BasicAuthenticationHandler(ADMIN_UNAME, ADMIN_PWD));\n+    }\n+\n+    @BeforeClass\n+    public static void createOIDCProviderWithoutDiscovery() throws Exception {\n+        if (!OIDCClientDetector.isOIDCClientAvailable()) {\n+            return;\n+        }\n+\n+        assertTrue(oidcProviderService.list().isEmpty());\n+\n+        OIDCProviderTO oidcProviderTO = new OIDCProviderTO();\n+        oidcProviderTO.setAuthorizationEndpoint(\"AuthorizationEndpoint\");\n+        oidcProviderTO.setClientID(\"ClientID\");\n+        oidcProviderTO.setClientSecret(\"ClientSecret\");\n+        oidcProviderTO.setIssuer(\"https://accounts.google.com\");\n+        oidcProviderTO.setJwksUri(\"JwksUri\");\n+        oidcProviderTO.setName(\"Google\");\n+        oidcProviderTO.setTokenEndpoint(\"TokenEndpoint\");\n+        oidcProviderTO.setUserinfoEndpoint(\"UserinfoEndpoint\");\n+\n+        admin.getService(OIDCProviderService.class).create(oidcProviderTO);\n+    }\n+\n+    @AfterClass\n+    public static void clearProviders() throws Exception {\n+        if (!OIDCClientDetector.isOIDCClientAvailable()) {\n+            return;\n+        }\n+\n+        for (OIDCProviderTO op : oidcProviderService.list()) {\n+            oidcProviderService.delete(op.getKey());\n+        }\n+    }\n+\n+    @Test\n+    public void createLoginRequest() {\n+        Assume.assumeTrue(OIDCClientDetector.isOIDCClientAvailable());\n+\n+        OIDCLoginRequestTO loginRequest = anonymous.getService(OIDCClientService.class).\n+                createLoginRequest(\"http://localhost:9080/syncope-console/oidcclient/code-consumer\", \"Google\");\n+\n+        assertNotNull(loginRequest);\n+        assertEquals(\"http://localhost:9080/syncope-console/oidcclient/code-consumer\", loginRequest.getRedirectURI());\n+        assertNotNull(loginRequest.getProviderAddress());\n+        assertNotNull(loginRequest.getClientId());\n+        assertNotNull(loginRequest.getResponseType());\n+        assertNotNull(loginRequest.getScope());\n+        assertNotNull(loginRequest.getState());\n+    }\n+\n+    @Test\n+    public void setProviderMapping() {\n+        Assume.assumeTrue(OIDCClientDetector.isOIDCClientAvailable());\n+\n+        OIDCProviderTO ssoCircle = IterableUtils.find(oidcProviderService.list(), new Predicate<OIDCProviderTO>() {\n+\n+            @Override\n+            public boolean evaluate(final OIDCProviderTO object) {\n+                return \"Google\".equals(object.getName());\n+            }\n+        });\n+        assertNotNull(ssoCircle);\n+        assertFalse(ssoCircle.isCreateUnmatching());\n+        assertNull(ssoCircle.getUserTemplate());\n+        assertFalse(ssoCircle.getItems().isEmpty());\n+        assertNotNull(ssoCircle.getConnObjectKeyItem());\n+        assertNotEquals(\"fullname\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n+        assertNotEquals(\"given_name\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n+\n+        ssoCircle.setCreateUnmatching(true);\n+\n+        UserTO userTemplate = new UserTO();\n+        userTemplate.setRealm(\"'/'\");\n+        ssoCircle.setUserTemplate(userTemplate);\n+\n+        ssoCircle.getItems().clear();\n+        ItemTO keyMapping = new ItemTO();\n+        keyMapping.setIntAttrName(\"fullname\");\n+        keyMapping.setExtAttrName(\"given_name\");\n+        ssoCircle.setConnObjectKeyItem(keyMapping);\n+\n+        oidcProviderService.update(ssoCircle);\n+\n+        ssoCircle = oidcProviderService.read(ssoCircle.getKey());\n+        assertTrue(ssoCircle.isCreateUnmatching());\n+        assertEquals(userTemplate, ssoCircle.getUserTemplate());\n+        assertEquals(\"fullname\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n+        assertEquals(\"given_name\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n+    }\n+\n+}"},{"sha":"0a3965bdff35e6829229df88e7e93fc032072122","filename":"fit/core-reference/src/test/resources/rebel.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -103,6 +103,23 @@ under the License.\n     </dir>\n     <dir name=\"${basedir}/../../ext/scimv2/logic/target/classes\">\n     </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/common-lib/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/logic/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/persistence-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/persistence-jpa/target/classes\">\n+      <exclude name=\"org/apache/syncope/core/persistence/jpa/entity/**\"/>\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/provisioning-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/provisioning-java/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/rest-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/rest-cxf/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>"},{"sha":"127d62d9da859caac6a4a5c6f26219f37322e43e","filename":"fit/enduser-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fpom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -67,6 +67,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+      <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"1d53d49db4816f429b6e3c6af4a088d5f5dc8ffb","filename":"fit/enduser-reference/src/main/resources/oidcclient-agent.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2Foidcclient-agent.properties?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+scheme=http\n+host=localhost\n+port=9080\n+rootPath=/syncope/rest/\n+useGZIPCompression=true"},{"sha":"81a7651780dc13db7a543d106ce006c536d57827","filename":"fit/enduser-reference/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -53,6 +53,16 @@ under the License.\n     <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.SAML2SPSelfReg</param-value>\n   </context-param>\n \n+  <context-param>\n+    <param-name>oidcclient.login.success.url</param-name>\n+    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.OIDCClientLogin</param-value>\n+  </context-param>\n+  <context-param>\n+    <param-name>oidcclient.login.error.url</param-name>\n+    <param-value>../wicket/bookmarkable/org.apache.syncope.client.enduser.pages.HomePage</param-value>\n+  </context-param>\n+\n+\n   <!-- SESSION TIMEOUT (MINUTES)-->\n   <session-config>\n     <session-timeout>30</session-timeout>"},{"sha":"d544b8de1ba16112afbc18ef3cb099136065718e","filename":"fit/enduser-reference/src/test/resources/rebel.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -30,6 +30,10 @@ under the License.\n     </dir>\n     <dir name=\"${basedir}/../../ext/saml2sp/client-enduser/target/classes\">\n     </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/agent/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/oidcclient/client-enduser/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>\n@@ -45,6 +49,10 @@ under the License.\n       <dir name=\"${basedir}/../../ext/saml2sp/client-enduser/target/classes\">\n       </dir>\n     </link>\n+    <link target=\"/\">\n+      <dir name=\"${basedir}/../../ext/oidcclient/client-enduser/target/classes\">\n+      </dir>\n+    </link>\n   </web>\n \n </application>"},{"sha":"e20e47786c749fd378116c3dc9691001ad1dbf01","filename":"pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -604,6 +604,16 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.cxf</groupId>\n+        <artifactId>cxf-rt-rs-security-sso-oidc</artifactId>\n+        <version>${cxf.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.cxf</groupId>\n+        <artifactId>cxf-rt-rs-extension-providers</artifactId>\n+        <version>${cxf.version}</version>\n+      </dependency>\n       <!-- /CXF -->\n \n       <!-- Swagger -->      "},{"sha":"52d245e1cb56866e3ab33817a3fa90855e0148d7","filename":"src/main/asciidoc/reference-guide/concepts/extensions.adoc","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -116,6 +116,39 @@ This extension adds features to all components and layers that are available, an\n <<customization-extensions,new extensions>>.\n ====\n \n+==== OpenID Connect Client \n+\n+This extension can be leveraged to provide http://openid.net/connect/[OpenID Connect^]-based\n+https://en.wikipedia.org/wiki/Single_sign-on[Single Sign-On^] access to the <<admin-console-component>>,\n+the <<enduser-component>> or any other Java EE application dealing with the <<core>>.\n+\n+Once installed, one or more OpenID Providers can be created either from \n+the http://openid.net/specs/openid-connect-discovery-1_0.html[discovery document^] if it is supported or from inserting \n+manually the required attributes, in any case the client_id and the secret_id from the OAuth 2.0 credential and the issuer \n+are required.\n+After configuration the OpenID provider, the http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth[Authorization Code Flow^]\n+is going to be implemented in order to reach the user information to be used by Syncope to match the internal users.\n+\n+\n+[NOTE]\n+.Extension Sources\n+====\n+The source code of this extension is available from the Apache Syncope\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/tree/syncope-{docVersion}/ext/oidcclient[source tree^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/tree/2_0_X/ext/oidcclient[source tree^]\n+endif::[]\n+.\n+====\n+\n+[TIP]\n+====\n+This extension adds features to all components and layers that are available, and can be taken as reference when creating\n+<<customization-extensions,new extensions>>.\n+====\n+\n ==== Elasticsearch\n \n This extension provides an alternate internal search engine for <<users-groups-and-any-objects>>, requiring an external "},{"sha":"622f51f9ba80b7fae5339ba73f88cb1e319ba11a","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/797fd1cbd801aedabb54b5d1dcb65d34636adec5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/797fd1cbd801aedabb54b5d1dcb65d34636adec5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=797fd1cbd801aedabb54b5d1dcb65d34636adec5","patch":"@@ -349,6 +349,25 @@ Copy `core/src/main/resources/all/saml2sp-logic.properties` to `core/src/main/re\n Setup a <<keystore,keystore>> and place it under the <<properties-files-location,configuration directory>>, then review\n the content of `core/src/main/resources/saml2sp-logic.properties` accordingly.\n \n+[discrete]\n+===== Enable the <<openid-connect-client>> extension\n+\n+Add the following dependencies to `core/pom.xml`:\n+\n+[source,xml,subs=\"verbatim,attributes\"]\n+----\n+<dependency>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-rest-cxf</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+<dependency>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-persistence-jpa</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+----\n+\n [discrete]\n ===== Enable the <<elasticsearch>> extension\n \n@@ -473,6 +492,23 @@ Add the following dependencies to `console/pom.xml`:\n \n Copy `console/src/main/resources/all/saml2sp-agent.properties` to `console/src/main/resources/saml2sp-agent.properties`.\n \n+[discrete]\n+===== Enable the <<openid-connect-client>> extension\n+\n+Add the following dependencies to `console/pom.xml`:\n+\n+[source,xml,subs=\"verbatim,attributes\"]\n+----\n+<dependency>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-client-console</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+----\n+\n+Copy `console/src/main/resources/all/oidcclient-agent.properties` to `console/src/main/resources/oidcclient-agent.properties`.\n+\n+\n [discrete]\n ===== Enable the <<SCIM>> extension\n \n@@ -512,6 +548,22 @@ Add the following dependencies to `enduser/pom.xml`:\n \n Copy `enduser/src/main/resources/all/saml2sp-agent.properties` to `enduser/src/main/resources/saml2sp-agent.properties`.\n \n+[discrete]\n+===== Enable the <<openid-connect-client>> extension\n+\n+Add the following dependencies to `enduser/pom.xml`:\n+\n+[source,xml,subs=\"verbatim,attributes\"]\n+----\n+<dependency>\n+  <groupId>org.apache.syncope.ext.oidcclient</groupId>\n+  <artifactId>syncope-ext-oidcclient-client-enduser</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+----\n+\n+Copy `enduser/src/main/resources/all/oidcclient-agent.properties` to `enduser/src/main/resources/oidcclient-agent.properties`.\n+\n [[customization-enduser-i18n]]\n ===== i18n \n "}]}