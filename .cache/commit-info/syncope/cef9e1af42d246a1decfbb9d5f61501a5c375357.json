{"sha":"cef9e1af42d246a1decfbb9d5f61501a5c375357","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlZjllMWFmNDJkMjQ2YTFkZWNmYmI5ZDVmNjE1MDFhNWMzNzUzNTc=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T11:01:43Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T11:01:43Z"},"message":"[SYNCOPE-259]\nIntroduces ConfigurationService Interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1428273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"074fe9896e4ee2dbb96a75c2053e905dc900b034","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/074fe9896e4ee2dbb96a75c2053e905dc900b034"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cef9e1af42d246a1decfbb9d5f61501a5c375357","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cef9e1af42d246a1decfbb9d5f61501a5c375357","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cef9e1af42d246a1decfbb9d5f61501a5c375357","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cef9e1af42d246a1decfbb9d5f61501a5c375357/comments","author":null,"committer":null,"parents":[{"sha":"6a72cdf1aef16d29186afe49062e7463ae3f9a56","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a72cdf1aef16d29186afe49062e7463ae3f9a56","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a72cdf1aef16d29186afe49062e7463ae3f9a56"}],"stats":{"total":510,"additions":327,"deletions":183},"files":[{"sha":"5c0af5186bfa28b540c564f677e86995bd80a2d9","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.client.to.ConfigurationTO;\r\n+\r\n+@Path(\"configuration\")\r\n+public interface ConfigurationService {\r\n+\r\n+\t@POST\r\n+\tConfigurationTO create(final ConfigurationTO configurationTO);\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"{key}\")\r\n+\tConfigurationTO delete(@PathParam(\"key\") final String key);\r\n+\r\n+\t@GET\r\n+\tList<ConfigurationTO> list();\r\n+\r\n+\t@GET\r\n+\t@Path(\"{key}\")\r\n+\tConfigurationTO read(@PathParam(\"key\") final String key);\r\n+\r\n+\t@PUT\r\n+\t@Path(\"{key}\")\r\n+\tConfigurationTO update(final ConfigurationTO configurationTO);\r\n+\r\n+\t@GET\r\n+\t@Path(\"validators\")\r\n+\tSet<String> getValidators();\r\n+\r\n+\t@GET\r\n+\t@Path(\"mailTemplates\")\r\n+\tSet<String> getMailTemplates();\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n+\tResponse dbExport();\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"dbda33e453d18584c960555c479549b79b098c2d","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationServiceProxy.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import org.apache.syncope.client.to.ConfigurationTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ConfigurationServiceProxy extends SpringServiceProxy implements\r\n+\t\tConfigurationService {\r\n+\r\n+\tpublic ConfigurationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+\t\tsuper(baseUrl, restTemplate);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic ConfigurationTO create(ConfigurationTO configurationTO) {\r\n+\t\treturn restTemplate.postForObject(BASE_URL + \"configuration/create\",\r\n+\t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic ConfigurationTO delete(String key) {\r\n+\t\treturn restTemplate\r\n+\t\t\t\t.getForObject(BASE_URL + \"configuration/delete/{key}.json\",\r\n+\t\t\t\t\t\tConfigurationTO.class, key);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic List<ConfigurationTO> list() {\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+\t\t\t\t+ \"configuration/list.json\", ConfigurationTO[].class));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic ConfigurationTO read(String key) {\r\n+\t\treturn restTemplate.getForObject(BASE_URL\r\n+\t\t\t\t+ \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic ConfigurationTO update(ConfigurationTO configurationTO) {\r\n+\t\treturn restTemplate.postForObject(BASE_URL + \"configuration/update\",\r\n+\t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Set<String> getValidators() {\r\n+\t\t// TODO Auto-generated method stub\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Set<String> getMailTemplates() {\r\n+\t\t// TODO Auto-generated method stub\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Response dbExport() {\r\n+\t\t// TODO Auto-generated method stub\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"e9fbf33b459d8e51a52e62585d829a1156e34ee7","filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -23,20 +23,14 @@\n import javax.ws.rs.GET;\r\n import javax.ws.rs.Path;\r\n \r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.bind.annotation.RequestMethod;\r\n-\r\n-@Path(\"/entitlements\")\r\n-@RequestMapping(\"/auth\")\r\n+@Path(\"entitlements\")\r\n public interface EntitlementService {\r\n \r\n     @GET\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/allentitlements\")\r\n     public abstract Set<String> getAllEntitlements();\r\n \r\n     @GET\r\n-    @Path(\"/own\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/entitlements\")\r\n+    @Path(\"own\")\r\n     public abstract Set<String> getMyEntitlements();\r\n \r\n }\n\\ No newline at end of file"},{"sha":"3d39b796d248f0a787846b7e2035ef26081e8ed5","filename":"client/src/main/java/org/apache/syncope/services/EntitlementServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -33,12 +33,12 @@ public EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \t@Override\r\n \tpublic Set<String> getAllEntitlements() {\r\n \t\treturn new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n-                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n+                BASE_URL + \"auth/allentitlements.json\", String[].class)));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic Set<String> getMyEntitlements() {\r\n-\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n+\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n                 + \"auth/entitlements.json\", String[].class)));\r\n \t}\r\n \r"},{"sha":"e9e56a9d5bd68ffbc072896ad05e6ff3c1390e8a","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"modified","additions":27,"deletions":36,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -21,73 +21,64 @@\n import java.util.List;\r\n \r\n import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n \r\n import org.apache.syncope.client.mod.RoleMod;\r\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n-import org.springframework.web.bind.annotation.PathVariable;\r\n-import org.springframework.web.bind.annotation.RequestBody;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.bind.annotation.RequestMethod;\r\n \r\n-@Path(\"/role\")\r\n-@RequestMapping(\"/role\")\r\n+@Path(\"role\")\r\n public interface RoleService {\r\n \r\n \t@GET\r\n-    @Path(\"/{roleId}/children\")\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\r\n-\tList<RoleTO> children(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+    @Path(\"{roleId}/children\")\r\n+\tList<RoleTO> children(@PathParam(\"roleId\") final Long roleId);\r\n \r\n \t@POST\r\n-    @Path(\"/\")\r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/create\")\r\n-\tRoleTO create(@RequestBody final RoleTO roleTO);\r\n+    @Path(\"\")\r\n+\tRoleTO create(final RoleTO roleTO);\r\n \r\n \t@DELETE\r\n-    @Path(\"/{roleId}\")\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\r\n-\tRoleTO delete(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+    @Path(\"{roleId}\")\r\n+\tRoleTO delete(@PathParam(\"roleId\") final Long roleId);\r\n \r\n \t@GET\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/list\")\r\n \tList<RoleTO> list();\r\n \r\n \t@GET\r\n-    @Path(\"/{roleId}/parent\")\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\r\n-\tRoleTO parent(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+    @Path(\"{roleId}/parent\")\r\n+\tRoleTO parent(@PathParam(\"roleId\") final Long roleId);\r\n \r\n \t@GET\r\n-\t@Path(\"/{roleId}\")\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\r\n-\tRoleTO read(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+\t@Path(\"{roleId}\")\r\n+\tRoleTO read(@PathParam(\"roleId\") final Long roleId);\r\n \r\n-\t\r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/search\")\r\n-\tList<RoleTO> search(@RequestBody final NodeCond searchCondition);\r\n+\t@POST\r\n+\t@Path(\"search\")\r\n+\tList<RoleTO> search(final NodeCond searchCondition);\r\n \r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\r\n-\tList<RoleTO> search(@RequestBody final NodeCond searchCondition,\r\n-\t\t\t@PathVariable(\"page\") final int page,\r\n-\t\t\t@PathVariable(\"size\") final int size);\r\n+\t@POST\r\n+\t@Path(\"search\")\r\n+\tList<RoleTO> search(final NodeCond searchCondition,\r\n+\t\t\t@QueryParam(\"page\") final int page,\r\n+\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n \r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\r\n-\tint searchCount(@RequestBody final NodeCond searchCondition);\r\n+\t@POST\r\n+\t@Path(\"search/count\")\r\n+\tint searchCount(final NodeCond searchCondition);\r\n \r\n \t/**\r\n \t * @deprecated Authentication checks should not depend on the method called\r\n \t */\r\n \t@Deprecated\r\n-\t@RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\r\n-\tRoleTO selfRead(@PathVariable(\"roleId\") final Long roleId);\r\n+\tRoleTO selfRead(final Long roleId);\r\n \r\n \t@POST\r\n-    @Path(\"/{roleId}\")\r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/update\")\r\n-\tRoleTO update(@PathParam(\"roleId\") final Long roleId, @RequestBody final RoleMod roleMod);\r\n+    @Path(\"{roleId}\")\r\n+\tRoleTO update(@PathParam(\"roleId\") final Long roleId, final RoleMod roleMod);\r\n }\n\\ No newline at end of file"},{"sha":"787cf6e6356dbc868bb53775d36c8b3b4607d077","filename":"client/src/main/java/org/apache/syncope/services/RoleServiceProxy.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -34,67 +34,67 @@ public RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n \t@Override\r\n \tpublic List<RoleTO> children(Long roleId) {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n \t\t\t\t+ \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO create(RoleTO roleTO) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/create\", roleTO,\r\n+\t\treturn restTemplate.postForObject(BASE_URL + \"role/create\", roleTO,\r\n \t\t\t\tRoleTO.class);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO delete(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/delete/{roleId}\",\r\n+\t\treturn restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> list() {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n \t\t\t\t+ \"role/list.json\", RoleTO[].class));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO parent(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/parent/{roleId}.json\",\r\n+\t\treturn restTemplate.getForObject(BASE_URL + \"role/parent/{roleId}.json\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO read(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/read/{roleId}.json\",\r\n+\t\treturn restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> search(NodeCond searchCondition) {\r\n \t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tbaseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n+\t\t\t\tBASE_URL + \"role/search\", searchCondition, RoleTO[].class));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n \t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tbaseUrl + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n+\t\t\t\tBASE_URL + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic int searchCount(NodeCond searchCondition) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/search/count.json\",\r\n+\t\treturn restTemplate.postForObject(BASE_URL + \"role/search/count.json\",\r\n \t\t\t\tsearchCondition, Integer.class);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO selfRead(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/selfRead/{roleId}\",\r\n+\t\treturn restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO update(Long roleId, RoleMod roleMod) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/update\", roleMod,\r\n+\t\treturn restTemplate.postForObject(BASE_URL + \"role/update\", roleMod,\r\n \t\t\t\tRoleTO.class);\r\n \t}\r\n \r"},{"sha":"9c06f58231854132c9f24705689990598c1bcba6","filename":"client/src/main/java/org/apache/syncope/services/SpringServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -24,10 +24,10 @@ public abstract class SpringServiceProxy {\n \r\n \tprotected RestTemplate restTemplate;\r\n \r\n-\tprotected String baseUrl;\r\n+\tprotected String BASE_URL;\r\n \r\n \tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n \t\tthis.restTemplate = restTemplate;\r\n-\t\tthis.baseUrl = baseUrl;\r\n+\t\tthis.BASE_URL = baseUrl;\r\n \t}\r\n }\r"},{"sha":"2e37a7787a54c3ea07eae75bfd7cd5cc614f0744","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n \n-@Path(\"/user\")\n+@Path(\"user\")\n public interface UserService {\n \n \t/**\n@@ -55,19 +55,19 @@ public interface UserService {\n \t */\n \t@Deprecated\n \t@POST\n-\t@Path(\"/workflow/task/{taskId}/claim\")\n+\t@Path(\"workflow/task/{taskId}/claim\")\n \tWorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n \n \t@GET\n-\t@Path(\"/count\")\n+\t@Path(\"count\")\n \tint count();\n \n \t@POST\n-\t@Path(\"/\")\n+\t@Path(\"\")\n \tUserTO create(final UserTO userTO);\n \n \t@DELETE\n-\t@Path(\"/{userId}\")\n+\t@Path(\"{userId}\")\n \tUserTO delete(@PathParam(\"userId\") final Long userId);\n \n \t/**\n@@ -83,15 +83,15 @@ UserTO executeWorkflow(@PathParam(\"taskId\") final String taskId,\n \t */\n \t@Deprecated\n \t@GET\n-\t@Path(\"/{userId}/workflow/form\")\n+\t@Path(\"{userId}/workflow/form\")\n \tWorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n \n \t/**\n \t * @deprecated This method needs to be moved to a new workflow service.\n \t */\n \t@Deprecated\n \t@GET\n-\t@Path(\"/workflow/form\")\n+\t@Path(\"workflow/form\")\n \tList<WorkflowFormTO> getForms();\n \n \t@GET\n@@ -120,7 +120,7 @@ List<UserTO> list(@QueryParam(\"page\") final int page,\n \tUserTO reactivateByUsername(String username);\n \n \t@GET\n-\t@Path(\"/{userId}\")\n+\t@Path(\"{userId}\")\n \tUserTO read(@PathParam(\"userId\") final Long userId);\n \n \t@GET\n@@ -144,11 +144,11 @@ List<UserTO> search(final NodeCond searchCondition,\n \t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n \n \t@POST\n-\t@Path(\"/count\")\n+\t@Path(\"search/count\")\n \tint searchCount(final NodeCond searchCondition);\n \n //\t@POST\n-//\t@Path(\"/user/{userId}/status\")\n+//\t@Path(\"user/{userId}/status\")\n //\tpublic abstract UserTO setStatus(@PathParam(\"userId\") final Long userId,\n //\t\t\tfinal StatusMod statusUpdate);\n \n@@ -157,7 +157,7 @@ List<UserTO> search(final NodeCond searchCondition,\n \t */\n \t@Deprecated\n \t@POST\n-\t@Path(\"/workflow/form\")\n+\t@Path(\"workflow/form\")\n \tUserTO submitForm(final WorkflowFormTO form);\n \n \t/**\n@@ -179,7 +179,7 @@ List<UserTO> search(final NodeCond searchCondition,\n \tUserTO suspendByUsername(String username);\n \n \t@POST\n-\t@Path(\"/{userId}\")\n+\t@Path(\"{userId}\")\n \tUserTO update(@PathParam(\"userId\") final Long userId, final UserMod userMod);\n \n \t@GET"},{"sha":"c43ed396f0cf9042f43d4690aac393ec29d6e1b7","filename":"client/src/main/java/org/apache/syncope/services/UserServiceProxy.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -45,30 +45,30 @@ public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \tpublic Boolean verifyPassword(@MatrixParam(\"uname\") String username,\n \t\t\t@MatrixParam(\"pwd\") String password) {\n \t\treturn restTemplate.\n-                getForObject(baseUrl + \"user/verifyPassword/{username}.json?password={password}\",\n+                getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password={password}\",\n                 Boolean.class, username, password);\n \t}\n \n \t@Override\n \tpublic int count() {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/count.json\", Integer.class);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n \t}\n \n \t@Override\n \tpublic List<UserTO> list() {\n-\t\treturn  Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n+\t\treturn  Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n \t}\n \n \t@Override\n \tpublic List<UserTO> list(@QueryParam(\"page\") int page,\n \t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") int size) {\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n+\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, page, size));\n \t}\n \n \t@Override\n \tpublic UserTO read(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userId);\n \t}\n \n \t@Override\n@@ -80,17 +80,17 @@ public UserTO read(@MatrixParam(\"uname\") String username) {\n \t@POST\n \t@Path(\"/\")\n \tpublic UserTO create(UserTO userTO) {\n-\t\treturn restTemplate.postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n+\t\treturn restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \t}\n \n \t@Override\n \tpublic UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod) {\n-\t\treturn restTemplate.postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n+\t\treturn restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n \t}\n \n \t@Override\n \tpublic UserTO delete(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userId);\n \t}\n \n \t@Override\n@@ -102,85 +102,85 @@ public UserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO)\n \t@GET\n \t@Path(\"/workflow/form\")\n \tpublic List<WorkflowFormTO> getForms() {\n-\t\treturn  Arrays.asList(restTemplate.getForObject(baseUrl + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+\t\treturn  Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n \t}\n \n \t@Override\n \tpublic WorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userId);\n \t}\n \n \t@Override\n \tpublic WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n \t}\n \n \t@Override\n \tpublic UserTO submitForm(WorkflowFormTO form) {\n-\t\treturn restTemplate.postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n+\t\treturn restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n \t}\n \n \t@Override\n \tpublic UserTO activate(long userId, String token) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n \t}\n \n \t@Override\n \tpublic UserTO activateByUsername(String username, String token) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/activateByUsername/{username}.json?token=\" + token,\n                 UserTO.class, username);\n \t}\n \n \t@Override\n \tpublic UserTO suspend(long userId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/suspend/{userId}\", UserTO.class, userId);\n \t}\n \n \t@Override\n \tpublic UserTO reactivate(long userId) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/{userId}\", UserTO.class, userId);\n \t}\n \t\n \t@Override\n \tpublic UserTO reactivate(long userId, String query) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userId + query, UserTO.class);\n \t}\n \n \t@Override\n \tpublic UserTO suspendByUsername(String username) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class, username);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class, username);\n \t}\n \n \t@Override\n \tpublic UserTO reactivateByUsername(String username) {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\", UserTO.class, username);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivateByUsername/{username}.json\", UserTO.class, username);\n \t}\n \n \t@Override\n \tpublic UserTO suspend(long userId, String query) {\n-\t\treturn  restTemplate.getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n+\t\treturn  restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userId + query, UserTO.class);\n \t}\n \n \t@Override\n \tpublic UserTO readSelf() {\n-\t\treturn restTemplate.getForObject(baseUrl + \"user/read/self\", UserTO.class);\n+\t\treturn restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n \t}\n \n \t@Override\n \tpublic List<UserTO> search(NodeCond searchCondition) {\n-\t\treturn Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search\", searchCondition,\n+\t\treturn Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n                 UserTO[].class));\n \t}\n \n \t@Override\n \tpublic List<UserTO> search(NodeCond searchCondition, int page, int size) {\n-\t\treturn Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search/{page}/{size}\",\n+\t\treturn Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, page, size));\n \t}\n \n \t@Override\n \tpublic int searchCount(NodeCond searchCondition) {\n-\t\treturn restTemplate.postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n+\t\treturn restTemplate.postForObject(BASE_URL + \"user/search/count.json\", searchCondition, Integer.class);\n \t}\n \n }"},{"sha":"87c0c3f33d6d1fbb890d3a1e60a2430a60b93896","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -23,20 +23,10 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.http.MediaType;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n+\n import org.apache.syncope.client.to.ConfigurationTO;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n@@ -49,6 +39,18 @@\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.ConfigurationSubCategory;\n import org.apache.syncope.types.AuditElements.Result;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n @RequestMapping(\"/configuration\")"},{"sha":"a76c9af0abaa935f7fb4fb116415e22a7ed9a0e1","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -25,9 +25,9 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.services.ConfigurationServiceProxy;\n import org.apache.syncope.services.EntitlementServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n-import org.apache.syncope.services.UserService;\n import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -74,11 +74,13 @@ protected static AttributeMod attributeMod(final String schema,\n \t@Autowired\n \tprotected RestTemplate restTemplate;\n \n-\tprotected UserService userService;\n+\tprotected UserServiceProxy userService;\n \n \tprotected RoleServiceProxy roleService;\n \n \tprotected EntitlementServiceProxy entitlementService;\n+\t\n+\tprotected ConfigurationServiceProxy configurationService;\n \n \t@Autowired\n \tprotected DataSource testDataSource;\n@@ -103,5 +105,6 @@ public void resetRestTemplate() {\n \t\tuserService = new UserServiceProxy(BASE_URL, restTemplate);\n \t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n \t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n+\t\tconfigurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"ec8c06ac5f184e7585d443a9d21785c1d06a3b63","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":73,"deletions":74,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cef9e1af42d246a1decfbb9d5f61501a5c375357/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=cef9e1af42d246a1decfbb9d5f61501a5c375357","patch":"@@ -18,88 +18,87 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n import java.io.UnsupportedEncodingException;\n-import java.util.Arrays;\n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n+\n import org.apache.syncope.client.to.ConfigurationTO;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ConfigurationTestITCase extends AbstractTest {\n \n-    @Test\n-    public void create() {\n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setKey(\"testKey\");\n-        configurationTO.setValue(\"testValue\");\n-\n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(BASE_URL + \"configuration/create\",\n-                configurationTO, ConfigurationTO.class);\n-        assertEquals(configurationTO, newConfigurationTO);\n-    }\n-\n-    @Test\n-    public void delete() throws UnsupportedEncodingException {\n-\n-        try {\n-            restTemplate.getForObject(\n-                    BASE_URL + \"configuration/delete/{key}.json\", ConfigurationTO.class, \"nonExistent\");\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-        }\n-\n-        ConfigurationTO tokenLengthTO = restTemplate.getForObject(BASE_URL + \"configuration/read/{key}.json\",\n-                ConfigurationTO.class, \"token.length\");\n-\n-        ConfigurationTO deletedConfig =\n-                restTemplate.getForObject(\n-                BASE_URL + \"configuration/delete/{key}.json\", ConfigurationTO.class, \"token.length\");\n-        assertNotNull(deletedConfig);\n-        try {\n-            restTemplate\n-                    .getForObject(BASE_URL + \"configuration/read/{key}.json\", ConfigurationTO.class, \"token.length\");\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n-        }\n-\n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(BASE_URL + \"configuration/create\",\n-                tokenLengthTO, ConfigurationTO.class);\n-        assertEquals(tokenLengthTO, newConfigurationTO);\n-    }\n-\n-    @Test\n-    public void list() {\n-        List<ConfigurationTO> configurations = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"configuration/list.json\", ConfigurationTO[].class));\n-        assertNotNull(configurations);\n-        for (ConfigurationTO configuration : configurations) {\n-            assertNotNull(configuration);\n-        }\n-    }\n-\n-    @Test\n-    public void read() {\n-        ConfigurationTO configurationTO = restTemplate.getForObject(BASE_URL + \"configuration/read/{key}.json\",\n-                ConfigurationTO.class, \"token.expireTime\");\n-\n-        assertNotNull(configurationTO);\n-    }\n-\n-    @Test\n-    public void update() {\n-        ConfigurationTO configurationTO = new ConfigurationTO();\n-        configurationTO.setKey(\"token.expireTime\");\n-        configurationTO.setValue(\"61\");\n-\n-        ConfigurationTO newConfigurationTO = restTemplate.postForObject(BASE_URL + \"configuration/update\",\n-                configurationTO, ConfigurationTO.class);\n-\n-        assertEquals(configurationTO, newConfigurationTO);\n-    }\n+\t@Test\n+\tpublic void create() {\n+\t\tConfigurationTO configurationTO = new ConfigurationTO();\n+\t\tconfigurationTO.setKey(\"testKey\");\n+\t\tconfigurationTO.setValue(\"testValue\");\n+\n+\t\tConfigurationTO newConfigurationTO = configurationService\n+\t\t\t\t.create(configurationTO);\n+\t\tassertEquals(configurationTO, newConfigurationTO);\n+\t}\n+\n+\t@Test\n+\tpublic void delete() throws UnsupportedEncodingException {\n+\n+\t\ttry {\n+\t\t\tconfigurationService.delete(\"nonExistent\");\n+\t\t} catch (HttpStatusCodeException e) {\n+\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+\t\t}\n+\n+\t\tConfigurationTO tokenLengthTO = configurationService\n+\t\t\t\t.read(\"token.length\");\n+\n+\t\tConfigurationTO deletedConfig = configurationService\n+\t\t\t\t.delete(\"token.length\");\n+\t\tassertNotNull(deletedConfig);\n+\t\ttry {\n+\t\t\tconfigurationService.read(\"token.length\");\n+\t\t} catch (HttpStatusCodeException e) {\n+\t\t\tassertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+\t\t}\n+\n+\t\tConfigurationTO newConfigurationTO = configurationService\n+\t\t\t\t.create(tokenLengthTO);\n+\t\tassertEquals(tokenLengthTO, newConfigurationTO);\n+\t}\n+\n+\t@Test\n+\tpublic void list() {\n+\t\tList<ConfigurationTO> configurations = configurationService.list();\n+\t\tassertNotNull(configurations);\n+\t\tfor (ConfigurationTO configuration : configurations) {\n+\t\t\tassertNotNull(configuration);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void read() {\n+\t\tConfigurationTO configurationTO = configurationService\n+\t\t\t\t.read(\"token.expireTime\");\n+\n+\t\tassertNotNull(configurationTO);\n+\t}\n+\n+\t@Test\n+\tpublic void update() {\n+\t\tConfigurationTO configurationTO = configurationService.read(\"token.expireTime\");\n+\t\tint value = Integer.parseInt(configurationTO.getValue());\n+\t\tvalue++;\n+\t\tconfigurationTO.setValue(value + \"\");\n+\n+\t\tConfigurationTO newConfigurationTO = configurationService.update(configurationTO);\n+\t\tassertEquals(configurationTO, newConfigurationTO);\n+\t\t\n+\t\tnewConfigurationTO = configurationService.read(\"token.expireTime\");\n+\t\tassertEquals(configurationTO, newConfigurationTO);\n+\t}\n }"}]}