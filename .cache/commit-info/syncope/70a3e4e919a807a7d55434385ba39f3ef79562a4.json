{"sha":"70a3e4e919a807a7d55434385ba39f3ef79562a4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcwYTNlNGU5MTlhODA3YTdkNTU0MzQzODViYTM5ZjNlZjc5NTYyYTQ=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-15T09:40:58Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-15T09:40:58Z"},"message":"[SYNCOPE-268] Make rest integration tests re-runnable\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8f396cb1335b93f8040d9f3d9b7b3a6ce22c74a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c8f396cb1335b93f8040d9f3d9b7b3a6ce22c74a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/70a3e4e919a807a7d55434385ba39f3ef79562a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/70a3e4e919a807a7d55434385ba39f3ef79562a4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/70a3e4e919a807a7d55434385ba39f3ef79562a4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/70a3e4e919a807a7d55434385ba39f3ef79562a4/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"668882fd2bacd920da441e7e04b4b364ad834f66","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/668882fd2bacd920da441e7e04b4b364ad834f66","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/668882fd2bacd920da441e7e04b4b364ad834f66"}],"stats":{"total":219,"additions":101,"deletions":118},"files":[{"sha":"bbd69b27f17358a8d4039077182dc9248f8c584f","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":36,"deletions":42,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=70a3e4e919a807a7d55434385ba39f3ef79562a4","patch":"@@ -59,34 +59,13 @@ public void list() {\n \n     @Test\n     public void create() {\n-        NotificationTO notificationTO = new NotificationTO();\n-        notificationTO.setTraceLevel(TraceLevel.SUMMARY);\n-        notificationTO.addEvent(\"create\");\n-\n-        AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond1.setSchema(\"fullname\");\n-        fullnameLeafCond1.setExpression(\"%o%\");\n-        AttributeCond fullnameLeafCond2 = new AttributeCond(AttributeCond.Type.LIKE);\n-        fullnameLeafCond2.setSchema(\"fullname\");\n-        fullnameLeafCond2.setExpression(\"%i%\");\n-        NodeCond about = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),\n-                NodeCond.getLeafCond(fullnameLeafCond2));\n-\n-        notificationTO.setAbout(about);\n+        NotificationTO notificationTO = buildNotificationTO();\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setRoleId(7L);\n         NodeCond recipients = NodeCond.getLeafCond(membCond);\n-\n         notificationTO.setRecipients(recipients);\n \n-        notificationTO.setRecipientAttrName(\"email\");\n-        notificationTO.setRecipientAttrType(IntMappingType.UserSchema);\n-\n-        notificationTO.setSender(\"syncope@syncope.apache.org\");\n-        notificationTO.setSubject(\"Test notification\");\n-        notificationTO.setTemplate(\"test\");\n-\n         NotificationTO actual = notificationService.create(notificationTO);\n \n         assertNotNull(actual);\n@@ -123,12 +102,23 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        NotificationTO deletedNotification = notificationService.delete(101L);\n+    \tNotificationTO notification = null;\n+    \ttry {\n+    \t\t// Check for pre-loaded notification: must be deleted for other create tests success\n+    \t\tnotification = notificationService.read(101L);\t\n+    \t} catch (SyncopeClientCompositeErrorException e) {\n+    \t\tassertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n+    \t\tnotification = buildNotificationTO();\n+            notification.setSelfAsRecipient(true);\n+            notification = notificationService.create(notification);\n+    \t}\n+    \t\n+        NotificationTO deletedNotification = notificationService.delete(notification.getId());\n         assertNotNull(deletedNotification);\n \n         SyncopeClientException exception = null;\n         try {\n-            notificationService.read(101L);\n+            notificationService.read(notification.getId());\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.NotFound);\n         }\n@@ -137,6 +127,25 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE83() {\n+        NotificationTO notificationTO = buildNotificationTO();\n+        notificationTO.setSelfAsRecipient(true);\n+\n+        NotificationTO actual = null;\n+        SyncopeClientException exception = null;\n+        try {\n+            actual = notificationService.create(notificationTO);\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e.getException(SyncopeClientExceptionType.InvalidNotification);\n+        }\n+        assertNull(exception);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getId());\n+        notificationTO.setId(actual.getId());\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+\tprivate NotificationTO buildNotificationTO() {\n         NotificationTO notificationTO = new NotificationTO();\n         notificationTO.setTraceLevel(TraceLevel.SUMMARY);\n         notificationTO.addEvent(\"create\");\n@@ -155,24 +164,9 @@ public void issueSYNCOPE83() {\n         notificationTO.setRecipientAttrName(\"email\");\n         notificationTO.setRecipientAttrType(IntMappingType.UserSchema);\n \n-        notificationTO.setSelfAsRecipient(true);\n-\n         notificationTO.setSender(\"syncope@syncope.apache.org\");\n-        notificationTO.setSubject(\"Test notification without\");\n+        notificationTO.setSubject(\"Test notification\");\n         notificationTO.setTemplate(\"test\");\n-\n-        NotificationTO actual = null;\n-        SyncopeClientException exception = null;\n-        try {\n-            actual = notificationService.create(notificationTO);\n-\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.InvalidNotification);\n-        }\n-        assertNull(exception);\n-        assertNotNull(actual);\n-        assertNotNull(actual.getId());\n-        notificationTO.setId(actual.getId());\n-        assertEquals(actual, notificationTO);\n-    }\n+\t\treturn notificationTO;\n+\t}\n }"},{"sha":"2939a06384a3c4e6411819a2131640111ac674c1","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":42,"deletions":58,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=70a3e4e919a807a7d55434385ba39f3ef79562a4","patch":"@@ -62,28 +62,11 @@ public void createWithException() {\n \n     @Test\n     public void create() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"lastRole\");\n-        roleTO.setParent(8L);\n-\n-        // verify inheritance password and account policies\n-        roleTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        roleTO.setAccountPolicy(6L);\n-\n-        roleTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        roleTO.setPasswordPolicy(2L);\n-\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n+        RoleTO roleTO = buildRoleTO(\"lastRole\");\n         roleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n-\n         roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n-\n         roleTO.setRoleOwner(8L);\n \n-        roleTO.addResource(\"resource-ldap\");\n \n         roleTO = roleService.create(roleTO);\n         assertNotNull(roleTO);\n@@ -102,15 +85,15 @@ public void create() {\n         assertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n \n         ConnObjectTO connObjectTO = resourceService.getConnector(\"resource-ldap\", AttributableType.ROLE,\n-                \"lastRole\");\n+        \t\troleTO.getName());\n         assertNotNull(connObjectTO);\n         assertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n     }\n \n     @Test\n     public void createWithPasswordPolicy() {\n         RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"roleWithPassword\");\n+        roleTO.setName(\"roleWithPassword\" + getUUIDString());\n         roleTO.setParent(8L);\n         roleTO.setPasswordPolicy(4L);\n \n@@ -207,23 +190,7 @@ public void selfRead() {\n \n     @Test\n     public void update() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"latestRole\");\n-        roleTO.setParent(8L);\n-\n-        // verify inheritance password and account policies\n-        roleTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        roleTO.setAccountPolicy(6L);\n-\n-        roleTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        roleTO.setPasswordPolicy(2L);\n-\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-        roleTO.addResource(\"resource-ldap\");\n-\n+        RoleTO roleTO = buildRoleTO(\"latestRole\");\n         roleTO = roleService.create(roleTO);\n \n         assertEquals(1, roleTO.getAttributes().size());\n@@ -236,15 +203,16 @@ public void update() {\n \n         RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleTO.getId());\n-        roleMod.setName(\"finalRole\");\n+        String modName = \"finalRole\" + getUUIDString(); \n+        roleMod.setName(modName);\n         roleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n \n         // change password policy inheritance\n         roleMod.setInheritPasswordPolicy(Boolean.FALSE);\n \n         roleTO = roleService.update(roleMod.getId(), roleMod);\n \n-        assertEquals(\"finalRole\", roleTO.getName());\n+        assertEquals(modName, roleTO.getName());\n         assertEquals(2, roleTO.getAttributes().size());\n \n         // changes ignored because not requested (null ReferenceMod)\n@@ -257,9 +225,7 @@ public void update() {\n \n     @Test\n     public void updateRemovingVirAttribute() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"withvirtual\");\n-        roleTO.setParent(8L);\n+        RoleTO roleTO = buildBasicRoleTO(\"withvirtual\");\n         roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", null));\n \n         roleTO = roleService.create(roleTO);\n@@ -279,9 +245,7 @@ public void updateRemovingVirAttribute() {\n \n     @Test\n     public void updateRemovingDerAttribute() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"withderived\");\n-        roleTO.setParent(8L);\n+        RoleTO roleTO = buildBasicRoleTO(\"withderived\");\n         roleTO.addDerivedAttribute(attributeTO(\"rderivedschema\", null));\n \n         roleTO = roleService.create(roleTO);\n@@ -338,36 +302,30 @@ public void updateAsRoleOwner() {\n     @Test\n     public void issue178() {\n         RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"torename\");\n+        String roleName = \"torename\" + getUUIDString(); \n+        roleTO.setName(roleName);\n \n         RoleTO actual = roleService.create(roleTO);\n \n         assertNotNull(actual);\n-        assertEquals(\"torename\", actual.getName());\n+        assertEquals(roleName, actual.getName());\n         assertEquals(0L, actual.getParent());\n \n         RoleMod roleMod = new RoleMod();\n         roleMod.setId(actual.getId());\n-        roleMod.setName(\"renamed\");\n+        String renamedRole = \"renamed\" + getUUIDString(); \n+        roleMod.setName(renamedRole);\n \n         actual = roleService.update(roleMod.getId(), roleMod);\n-        ;\n \n         assertNotNull(actual);\n-        assertEquals(\"renamed\", actual.getName());\n+        assertEquals(renamedRole, actual.getName());\n         assertEquals(0L, actual.getParent());\n     }\n \n     @Test\n     public void issueSYNCOPE228() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"issueSYNCOPE228\");\n-        roleTO.setParent(8L);\n-        roleTO.setInheritAccountPolicy(false);\n-        roleTO.setAccountPolicy(6L);\n-        roleTO.setInheritPasswordPolicy(true);\n-        roleTO.setPasswordPolicy(2L);\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+        RoleTO roleTO = buildRoleTO(\"issueSYNCOPE228\");\n         roleTO.addEntitlement(\"USER_READ\");\n         roleTO.addEntitlement(\"SCHEMA_READ\");\n \n@@ -394,4 +352,30 @@ public void issueSYNCOPE228() {\n         assertNotNull(roleTO);\n         assertTrue(roleTO.getEntitlements().isEmpty());\n     }\n+\n+\tprivate RoleTO buildBasicRoleTO(String name) {\n+\t\tRoleTO roleTO = new RoleTO();\n+        roleTO.setName(name + getUUIDString());\n+        roleTO.setParent(8L);\n+\t\treturn roleTO;\n+\t}\n+\n+\tprivate RoleTO buildRoleTO(String name) {\n+\t\tRoleTO roleTO = buildBasicRoleTO(name);\n+\n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n+        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+        roleTO.addResource(\"resource-ldap\");\n+\t\treturn roleTO;\n+\t}\n+\n }"},{"sha":"c0c088703b89ec790aa0f8ddc89967345d451bcf","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":19,"deletions":14,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=70a3e4e919a807a7d55434385ba39f3ef79562a4","patch":"@@ -44,10 +44,8 @@ public class SchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void create() {\n-        SchemaTO schemaTO = new SchemaTO();\n-        schemaTO.setName(\"testAttribute\");\n+        SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", SchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n-        schemaTO.setType(SchemaType.String);\n \n         SchemaTO newSchemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n@@ -115,11 +113,15 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        SchemaTO deletedSchema = schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"cool\");\n+        SchemaTO schemaTO = buildSchemaTO(\"todelete\", SchemaType.String);\n+        schemaTO.setMandatoryCondition(\"false\");\n+        schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+\n+        SchemaTO deletedSchema = schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n         assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n-            firstname = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"cool\");\n+            firstname = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -174,7 +176,7 @@ public void issue258() {\n         schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n-        UserTO userTO = UserTestITCase.getSampleTO(\"issue258@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1.2\"));\n \n         userTO = userService.create(userTO);\n@@ -192,15 +194,13 @@ public void issue258() {\n \n     @Test\n     public void issue259() {\n-        SchemaTO schemaTO = new SchemaTO();\n-        schemaTO.setName(\"schema_issue259\");\n+        SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n-        schemaTO.setType(SchemaType.Long);\n \n         schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n-        UserTO userTO = UserTestITCase.getSampleTO(\"issue259@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1\"));\n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n@@ -218,15 +218,13 @@ public void issue259() {\n \n     @Test\n     public void issue260() {\n-        SchemaTO schemaTO = new SchemaTO();\n-        schemaTO.setName(\"schema_issue260\");\n-        schemaTO.setType(SchemaType.Double);\n+        SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n         schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n-        UserTO userTO = UserTestITCase.getSampleTO(\"issue260@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n         userTO.addAttribute(attributeTO(schemaTO.getName(), \"1.2\"));\n         userTO = userService.create(userTO);\n         assertNotNull(userTO);\n@@ -240,4 +238,11 @@ public void issue260() {\n             assertNotNull(sce);\n         }\n     }\n+\n+\tprivate SchemaTO buildSchemaTO(String name, SchemaType type) {\n+\t\tSchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(name + getUUIDString());\n+        schemaTO.setType(type);\n+\t\treturn schemaTO;\n+\t}\n }"},{"sha":"bfc564a2fb5544096239c5fb62fbc89bb3ff332c","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/70a3e4e919a807a7d55434385ba39f3ef79562a4/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=70a3e4e919a807a7d55434385ba39f3ef79562a4","patch":"@@ -54,7 +54,7 @@ public void create() {\n         configurationTO = configurationService.create(configurationTO);\n         assertNotNull(configurationTO);\n \n-        UserTO userTO = UserTestITCase.getSampleTO(\"selfcreate@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         // 2. get unauthorized when trying to request user create\n         SyncopeClientException exception = null;\n@@ -83,7 +83,7 @@ public void create() {\n         // 6. try to find user\n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n         attrCond.setSchema(\"userId\");\n-        attrCond.setExpression(\"selfcreate@syncope.apache.org\");\n+        attrCond.setExpression(userTO.getUsername());\n \n         final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(attrCond));\n         assertTrue(matchingUsers.isEmpty());\n@@ -96,7 +96,7 @@ public void create() {\n     @Test\n     public void update() {\n         // 1. create an user (as admin)\n-        UserTO userTO = UserTestITCase.getSampleTO(\"selfupdate@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n         String initialPassword = userTO.getPassword();\n \n         userTO = userService.create(userTO);\n@@ -152,7 +152,7 @@ public void update() {\n     @Test\n     public void delete() {\n         // 1. create an user (as admin)\n-        UserTO userTO = UserTestITCase.getSampleTO(\"selfdelete@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n         String initialPassword = userTO.getPassword();\n \n         userTO = userService.create(userTO);"}]}