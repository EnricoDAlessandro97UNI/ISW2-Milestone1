{"sha":"37db31c5ef93a212c623cfc40af74ea882006479","node_id":"C_kwDOJfYA1toAKDM3ZGIzMWM1ZWY5M2EyMTJjNjIzY2ZjNDBhZjc0ZWE4ODIwMDY0Nzk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-24T07:06:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-27T13:30:34Z"},"message":"Upgrading modernizer-maven-plugin","tree":{"sha":"2ef357a167f2a7de130d11d73e28c2d4acd5a1f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ef357a167f2a7de130d11d73e28c2d4acd5a1f6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/37db31c5ef93a212c623cfc40af74ea882006479","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/37db31c5ef93a212c623cfc40af74ea882006479","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/37db31c5ef93a212c623cfc40af74ea882006479","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/37db31c5ef93a212c623cfc40af74ea882006479/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bdcb360bf8f2e6ef9a40ca13998a4d4f03d9efee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdcb360bf8f2e6ef9a40ca13998a4d4f03d9efee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bdcb360bf8f2e6ef9a40ca13998a4d4f03d9efee"}],"stats":{"total":221,"additions":103,"deletions":118},"files":[{"sha":"80a7baf098c6cf00181a4405f5861974749eb4f7","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -111,11 +111,8 @@ public Attr read(final String key, final SchemaType schemaType, final String sch\n                 result = any.getPlainAttr(schema);\n         }\n \n-        if (result.isEmpty()) {\n-            throw new NotFoundException(\"Attribute for type \" + schemaType + \" and schema \" + schema);\n-        }\n-\n-        return result.get();\n+        return result.\n+                orElseThrow(() -> new NotFoundException(\"Attribute for type \" + schemaType + \" and schema \" + schema));\n     }\n \n     @Override"},{"sha":"ad1ce5f06184d28de48564a5f8b27e01772cb3c7","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -228,7 +228,9 @@ private void checkList(final PagedResult<AnyObjectTO> list) {\n         assertEquals(\"printer1\", list.getResult().get(0).getName());\n         assertEquals(\"PRINTER\", list.getResult().get(0).getType());\n \n-        assertEquals(\"there\", list.getResult().get(1).getPlainAttr(\"location\").get().getValues().get(0));\n+        Attr location = list.getResult().get(1).getPlainAttr(\"location\").orElse(null);\n+        assertNotNull(location);\n+        assertEquals(\"there\", location.getValues().get(0));\n     }\n \n     @Test"},{"sha":"5786905f3201865801be515de9ee6a7b1ba0d85e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -350,10 +350,10 @@ protected void exportTable(\n                     findFirst().\n                     map(Map.Entry::getValue);\n \n-            String outputTableName = entity.isPresent()\n-                    ? entities.getKey(entity.get())\n-                    : relationTables.keySet().stream().filter(tableName::equalsIgnoreCase).findFirst().\n-                            orElse(tableName);\n+            String outputTableName = entity.map(entities::getKey).\n+                    orElseGet(() -> relationTables.keySet().stream().\n+                    filter(tableName::equalsIgnoreCase).findFirst().\n+                    orElse(tableName));\n             if (isTask(tableName)) {\n                 outputTableName = \"Task\";\n             }\n@@ -373,11 +373,9 @@ protected void exportTable(\n                     if (value != null && (!COLUMNS_TO_BE_NULLIFIED.containsKey(tableName)\n                             || !COLUMNS_TO_BE_NULLIFIED.get(tableName).contains(columnName))) {\n \n-                        String name = columnName;\n-                        if (entity.isPresent()) {\n-                            name = columnName(\n-                                    () -> (Stream<Attribute<?, ?>>) entity.get().getAttributes().stream(), columnName);\n-                        }\n+                        String name = entity.map(e -> columnName(\n+                                () -> (Stream<Attribute<?, ?>>) e.getAttributes().stream(), columnName)).\n+                                orElse(columnName);\n \n                         if (isTask(tableName)) {\n                             name = columnName("},{"sha":"71193d34baa83212c98e051f2a945a50eaf615b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -370,7 +370,7 @@ protected boolean matches(final Any<?> any, final AttrCond cond, final boolean n\n                     return false;\n                 }\n \n-                found = attr.isPresent() && matches(attr.get().getValues(), attrValue, schema, cond);\n+                found = attr.map(a -> matches(a.getValues(), attrValue, schema, cond)).orElse(false);\n         }\n         return not ? !found : found;\n     }"},{"sha":"dc12e2e71b8a3596390fc2130aa91ba4996b76a7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -29,7 +29,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -137,8 +137,10 @@ public void securityChecks(\n             final Collection<String> groups) {\n \n         // 1. check if AuthContextUtils.getUsername() is owner of at least one group of which anyObject is member\n-        boolean authorized = authRealms.stream().map(RealmUtils::parseGroupOwnerRealm).filter(Optional::isPresent).\n-                anyMatch(pair -> groups.contains(pair.get().getRight()));\n+        boolean authorized = authRealms.stream().\n+                map(authRealm -> RealmUtils.parseGroupOwnerRealm(authRealm).orElse(null)).\n+                filter(Objects::nonNull).\n+                anyMatch(pair -> groups.contains(pair.getRight()));\n \n         // 2. check if anyObject is in at least one DynRealm for which AuthContextUtils.getUsername() owns entitlement\n         if (!authorized) {"},{"sha":"1297e0aa15cf59bbd864c1728e09ad9b83db06d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -127,29 +126,29 @@ protected Triple<String, Set<String>, Set<String>> getAdminRealmsFilter(\n         Set<String> groupOwners = new HashSet<>();\n \n         if (recursive) {\n-            adminRealms.forEach(realmPath -> {\n-                Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n-                if (goRealm.isPresent()) {\n-                    groupOwners.add(goRealm.get().getRight());\n-                } else if (realmPath.startsWith(\"/\")) {\n-                    Realm realm = realmDAO.findByFullPath(realmPath);\n-                    if (realm == null) {\n-                        SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-                        noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                        throw noRealm;\n-                    } else {\n-                        realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                                map(Realm::getKey).collect(Collectors.toSet()));\n-                    }\n-                } else {\n-                    DynRealm dynRealm = dynRealmDAO.find(realmPath);\n-                    if (dynRealm == null) {\n-                        LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n-                    } else {\n-                        dynRealmKeys.add(dynRealm.getKey());\n-                    }\n-                }\n-            });\n+            adminRealms.forEach(realmPath -> RealmUtils.parseGroupOwnerRealm(realmPath).ifPresentOrElse(\n+                    goRealm -> groupOwners.add(goRealm.getRight()),\n+                    () -> {\n+                        if (realmPath.startsWith(\"/\")) {\n+                            Realm realm = realmDAO.findByFullPath(realmPath);\n+                            if (realm == null) {\n+                                SyncopeClientException noRealm = SyncopeClientException.build(\n+                                        ClientExceptionType.InvalidRealm);\n+                                noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n+                                throw noRealm;\n+                            } else {\n+                                realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n+                                        map(Realm::getKey).collect(Collectors.toSet()));\n+                            }\n+                        } else {\n+                            DynRealm dynRealm = dynRealmDAO.find(realmPath);\n+                            if (dynRealm == null) {\n+                                LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+                            } else {\n+                                dynRealmKeys.add(dynRealm.getKey());\n+                            }\n+                        }\n+                    }));\n             if (!dynRealmKeys.isEmpty()) {\n                 realmKeys.clear();\n             }\n@@ -591,19 +590,20 @@ protected Pair<StringBuilder, Set<String>> getQuery(\n                 cond.getLeaf(ResourceCond.class).\n                         ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n \n-                Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n-                if (anyCond.isPresent()) {\n-                    query.append(getQuery(anyCond.get(), not, parameters, svs));\n-                } else {\n-                    cond.getLeaf(AttrCond.class).ifPresent(leaf -> {\n-                        query.append(getQuery(leaf, not, parameters, svs));\n-                        try {\n-                            involvedPlainAttrs.add(check(leaf, svs.anyTypeKind).getLeft().getKey());\n-                        } catch (IllegalArgumentException e) {\n-                            // ignore\n-                        }\n-                    });\n-                }\n+                cond.getLeaf(AnyCond.class).ifPresentOrElse(\n+                        anyCond -> {\n+                            query.append(getQuery(anyCond, not, parameters, svs));\n+                        },\n+                        () -> {\n+                            cond.getLeaf(AttrCond.class).ifPresent(leaf -> {\n+                                query.append(getQuery(leaf, not, parameters, svs));\n+                                try {\n+                                    involvedPlainAttrs.add(check(leaf, svs.anyTypeKind).getLeft().getKey());\n+                                } catch (IllegalArgumentException e) {\n+                                    // ignore\n+                                }\n+                            });\n+                        });\n \n                 // allow for additional search conditions\n                 getQueryForCustomConds(cond, parameters, svs, not, query);"},{"sha":"b21162c908d2185fd52ab01eb4157b24f4871e44","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -22,7 +22,6 @@\n import jakarta.persistence.TypedQuery;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n@@ -89,12 +88,11 @@ public Realm findByFullPath(final String fullPath) {\n         }\n \n         Realm current = root;\n-        for (final String pathElement : fullPath.substring(1).split(\"/\")) {\n-            Optional<Realm> first = findChildren(current).stream().\n-                    filter(realm -> pathElement.equals(realm.getName())).findFirst();\n-            if (first.isPresent()) {\n-                current = first.get();\n-            } else {\n+        for (String pathElement : fullPath.substring(1).split(\"/\")) {\n+            current = findChildren(current).stream().\n+                    filter(realm -> pathElement.equals(realm.getName())).findFirst().\n+                    orElse(null);\n+            if (current == null) {\n                 return null;\n             }\n         }"},{"sha":"88fa71bf08c699df9e7a528dc587a61204c24d6c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -196,8 +196,10 @@ public void securityChecks(\n             final Collection<String> groups) {\n \n         // 1. check if AuthContextUtils.getUsername() is owner of at least one group of which user is member\n-        boolean authorized = authRealms.stream().map(RealmUtils::parseGroupOwnerRealm).filter(Optional::isPresent).\n-                anyMatch(pair -> groups.contains(pair.get().getRight()));\n+        boolean authorized = authRealms.stream().\n+                map(authRealm -> RealmUtils.parseGroupOwnerRealm(authRealm).orElse(null)).\n+                filter(Objects::nonNull).\n+                anyMatch(pair -> groups.contains(pair.getRight()));\n \n         // 2. check if user is in at least one DynRealm for which AuthContextUtils.getUsername() owns entitlement\n         if (!authorized) {"},{"sha":"9497512eb9a7f49cf69bc15d128fde05ef3db437","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -415,11 +415,10 @@ protected String getRecipientEmail(final String recipientAttrName, final User us\n                     Optional<? extends UPlainAttr> attr = membership == null\n                             ? user.getPlainAttr(recipientAttrName)\n                             : user.getPlainAttr(recipientAttrName, membership);\n-                    if (attr.isPresent()) {\n-                        email = attr.get().getValuesAsStrings().isEmpty()\n-                                ? null\n-                                : attr.get().getValuesAsStrings().get(0);\n-                    }\n+                    email = attr.map(a -> a.getValuesAsStrings().isEmpty()\n+                            ? null\n+                            : a.getValuesAsStrings().get(0)).\n+                            orElse(null);\n                     break;\n \n                 case DERIVED:"},{"sha":"6deb8cc09f2315fbd2e4f54d87696bd1b1da13af","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -58,9 +58,7 @@ protected String getCipherAlgorithm(final ConnInstance connInstance) {\n                 filter(property -> \"cipherAlgorithm\".equals(property.getSchema().getName())\n                 && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n \n-        return cipherAlgorithm.isPresent()\n-                ? (String) cipherAlgorithm.get().getValues().get(0)\n-                : CLEARTEXT;\n+        return cipherAlgorithm.map(a -> (String) a.getValues().get(0)).orElse(CLEARTEXT);\n     }\n \n     protected boolean cipherAlgorithmMatches(final String connectorAlgorithm, final CipherAlgorithm userAlgorithm) {"},{"sha":"d3efe11ce642a0b26830b148e53239229894558b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -110,9 +110,9 @@ public void before(final PropagationTaskInfo taskInfo) {\n             return;\n         }\n \n-        Optional<Provision> groupProvision = taskInfo.getResource().getProvisionByAnyType(AnyTypeKind.GROUP.name());\n-        if (groupProvision.isPresent() && groupProvision.get().getMapping() != null\n-                && StringUtils.isNotBlank(groupProvision.get().getMapping().getConnObjectLink())) {\n+        taskInfo.getResource().getProvisionByAnyType(AnyTypeKind.GROUP.name()).\n+                map(Provision::getMapping).\n+                filter(mapping -> StringUtils.isNotBlank(mapping.getConnObjectLink())).ifPresentOrElse(mapping -> {\n \n             User user = userDAO.find(taskInfo.getEntityKey());\n             Set<String> groups = new HashSet<>();\n@@ -124,7 +124,7 @@ public void before(final PropagationTaskInfo taskInfo) {\n                     filter(group -> group.getResources().contains(taskInfo.getResource())).\n                     forEach(group -> {\n                         String groupConnObjectLink = evaluateGroupConnObjectLink(\n-                                groupProvision.get().getMapping().getConnObjectLink(), group);\n+                                mapping.getConnObjectLink(), group);\n \n                         LOG.debug(\"ConnObjectLink for {} is '{}'\", group, groupConnObjectLink);\n                         if (StringUtils.isNotBlank(groupConnObjectLink)) {\n@@ -153,7 +153,7 @@ public void before(final PropagationTaskInfo taskInfo) {\n                         Set<String> connObjectLinks = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         buildManagedGroupConnObjectLinks(\n                                 taskInfo.getResource(),\n-                                groupProvision.get().getMapping().getConnObjectLink(),\n+                                mapping.getConnObjectLink(),\n                                 connObjectLinks);\n \n                         LOG.debug(\"Memberships not managed by Syncope: {}\", beforeLdapGroups);\n@@ -172,7 +172,7 @@ public void before(final PropagationTaskInfo taskInfo) {\n                 // if groups were added or removed by last update, compute and add the group's connector object link\n                 for (MembershipUR memb : ((UserUR) taskInfo.getUpdateRequest()).getMemberships()) {\n                     String connObjectLink = evaluateGroupConnObjectLink(\n-                            groupProvision.get().getMapping().getConnObjectLink(),\n+                            mapping.getConnObjectLink(),\n                             groupDAO.find(memb.getGroup()));\n                     if (memb.getOperation() == PatchOperation.ADD_REPLACE) {\n                         groupsToAdd.add(connObjectLink);\n@@ -197,11 +197,10 @@ public void before(final PropagationTaskInfo taskInfo) {\n                     LOG.debug(\"Adding Group connObjectLinks to attribute deltas: {}={},{}\",\n                             getGroupMembershipAttrName(), groupsToAdd, groupsToRemove);\n                     data.getAttributeDeltas().add(\n-                            AttributeDeltaBuilder.build(getGroupMembershipAttrName(), groupsToAdd, groupsToRemove));\n+                            AttributeDeltaBuilder.build(getGroupMembershipAttrName(), groupsToAdd,\n+                                    groupsToRemove));\n                 }\n             }\n-        } else {\n-            LOG.debug(\"Not about user, or group mapping missing for resource: not doing anything\");\n-        }\n+        }, () -> LOG.debug(\"Not about user, or group mapping missing for resource: not doing anything\"));\n     }\n }"},{"sha":"dc0bf2c995b7cd3da3d918476852b5e6d55d3f27","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultAccountRule.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -20,14 +20,15 @@\n \n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.Optional;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.rules.AccountRule;\n@@ -103,9 +104,9 @@ public void enforce(final User user) {\n         Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n         wordsNotPermitted.addAll(\n                 conf.getSchemasNotPermitted().stream().\n-                        map(user::getPlainAttr).\n-                        filter(Optional::isPresent).\n-                        map(attr -> attr.get().getValuesAsStrings()).\n+                        map(schema -> user.getPlainAttr(schema).\n+                        map(PlainAttr::getValuesAsStrings).orElse(null)).\n+                        filter(Objects::nonNull).\n                         filter(values -> !CollectionUtils.isEmpty(values)).\n                         flatMap(Collection::stream).\n                         collect(Collectors.toSet()));\n@@ -123,9 +124,9 @@ public void enforce(final LinkedAccount account) {\n         Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n         wordsNotPermitted.addAll(\n                 conf.getSchemasNotPermitted().stream().\n-                        map(account::getPlainAttr).\n-                        filter(Optional::isPresent).\n-                        map(attr -> attr.get().getValuesAsStrings()).\n+                        map(schema -> account.getPlainAttr(schema).\n+                        map(PlainAttr::getValuesAsStrings).orElse(null)).\n+                        filter(Objects::nonNull).\n                         filter(values -> !CollectionUtils.isEmpty(values)).\n                         flatMap(Collection::stream).\n                         collect(Collectors.toSet()));"},{"sha":"4182b35cc7745ca24857efdc5e671b800c987fe9","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -23,14 +23,15 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.Objects;\n import java.util.Properties;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.rules.PasswordRule;\n@@ -169,9 +170,9 @@ public void enforce(final User user) {\n             Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n             wordsNotPermitted.addAll(\n                     conf.getSchemasNotPermitted().stream().\n-                            map(user::getPlainAttr).\n-                            filter(Optional::isPresent).\n-                            map(attr -> attr.get().getValuesAsStrings()).\n+                            map(schema -> user.getPlainAttr(schema).\n+                            map(PlainAttr::getValuesAsStrings).orElse(null)).\n+                            filter(Objects::nonNull).\n                             filter(values -> !CollectionUtils.isEmpty(values)).\n                             flatMap(Collection::stream).\n                             collect(Collectors.toSet()));\n@@ -185,9 +186,9 @@ public void enforce(final User user) {\n     public void enforce(final LinkedAccount account) {\n         conf.getWordsNotPermitted().addAll(\n                 conf.getSchemasNotPermitted().stream().\n-                        map(account::getPlainAttr).\n-                        filter(Optional::isPresent).\n-                        map(attr -> attr.get().getValuesAsStrings()).\n+                        map(schema -> account.getPlainAttr(schema).\n+                        map(PlainAttr::getValuesAsStrings).orElse(null)).\n+                        filter(Objects::nonNull).\n                         filter(values -> !CollectionUtils.isEmpty(values)).\n                         flatMap(Collection::stream).\n                         collect(Collectors.toList()));\n@@ -206,9 +207,9 @@ public void enforce(final LinkedAccount account) {\n                 Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n                 wordsNotPermitted.addAll(\n                         conf.getSchemasNotPermitted().stream().\n-                                map(account::getPlainAttr).\n-                                filter(Optional::isPresent).\n-                                map(attr -> attr.get().getValuesAsStrings()).\n+                                map(schema -> account.getPlainAttr(schema).\n+                                map(PlainAttr::getValuesAsStrings).orElse(null)).\n+                                filter(Objects::nonNull).\n                                 filter(values -> !CollectionUtils.isEmpty(values)).\n                                 flatMap(Collection::stream).\n                                 collect(Collectors.toSet()));"},{"sha":"2a9dfc5923cfb0e65f3185c20c7468cb23e534dd","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/UserService.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FUserService.java?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -162,11 +162,9 @@ public User authenticate(\n         if (user.isEmpty()) {\n             throw new NotFoundException(username);\n         }\n-        if (!password.equals(user.get().getPassword())) {\n-            throw new ForbiddenException();\n-        }\n \n-        return user.get();\n+        return user.filter(u -> password.equals(u.getPassword())).\n+                orElseThrow(() -> new ForbiddenException());\n     }\n \n     @POST"},{"sha":"a73e6dae19b6d882fbebae19f557098835761ff6","filename":"pom.xml","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -435,8 +435,6 @@ under the License.\n     <commons-jexl.version>3.2.1</commons-jexl.version>\n     <commons-text.version>1.10.0</commons-text.version>\n \n-    <modernizer-maven.version>2.5.0</modernizer-maven.version>\n-\n     <pac4j.version>6.0.0-RC6-SNAPSHOT</pac4j.version>\n \n     <cas.version>7.0.0-RC5</cas.version>\n@@ -884,12 +882,6 @@ under the License.\n         <version>${commons-text.version}</version>\n       </dependency>\n \n-      <dependency>\n-        <groupId>org.gaul</groupId>\n-        <artifactId>modernizer-maven-annotations</artifactId>\n-        <version>${modernizer-maven.version}</version>\n-      </dependency>\n-\n       <dependency>\n         <groupId>org.apache.tika</groupId>\n         <artifactId>tika-core</artifactId>\n@@ -1753,12 +1745,15 @@ under the License.\n       <plugin>\n         <groupId>org.gaul</groupId>\n         <artifactId>modernizer-maven-plugin</artifactId>\n-        <version>${modernizer-maven.version}</version>\n+        <version>2.6.0</version>\n         <configuration>\n           <javaVersion>${targetJdk}</javaVersion>\n           <ignorePackages>\n             <ignorePackage>org.apache.syncope.core.persistence.jpa.entity</ignorePackage>\n           </ignorePackages>\n+          <exclusions>\n+            <exclusion>java/util/Optional.get:()Ljava/lang/Object;</exclusion>\n+          </exclusions>\n         </configuration>\n         <executions>\n           <execution>"},{"sha":"fd90d5c26ab15415fe604897e601394e1ea49d5f","filename":"sra/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/37db31c5ef93a212c623cfc40af74ea882006479/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/37db31c5ef93a212c623cfc40af74ea882006479/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=37db31c5ef93a212c623cfc40af74ea882006479","patch":"@@ -119,11 +119,6 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.gaul</groupId>\n-      <artifactId>modernizer-maven-annotations</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n       <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>"}]}