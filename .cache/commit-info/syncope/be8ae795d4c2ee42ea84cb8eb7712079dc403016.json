{"sha":"be8ae795d4c2ee42ea84cb8eb7712079dc403016","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJlOGFlNzk1ZDRjMmVlNDJlYTg0Y2I4ZWI3NzEyMDc5ZGM0MDMwMTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-31T06:56:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-31T06:56:48Z"},"message":"Small fixes","tree":{"sha":"45898b16f38ebe6b750b5978d9749fab9e9719a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/45898b16f38ebe6b750b5978d9749fab9e9719a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/be8ae795d4c2ee42ea84cb8eb7712079dc403016","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/be8ae795d4c2ee42ea84cb8eb7712079dc403016","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/be8ae795d4c2ee42ea84cb8eb7712079dc403016","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/be8ae795d4c2ee42ea84cb8eb7712079dc403016/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"22900099e40b5b478f7085e5a838435f461fd6ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22900099e40b5b478f7085e5a838435f461fd6ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22900099e40b5b478f7085e5a838435f461fd6ad"}],"stats":{"total":48,"additions":13,"deletions":35},"files":[{"sha":"0aa49fd5d610c58d4d0d80d49373cded5fd41521","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n \n+import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n@@ -49,29 +49,25 @@ public AttrColumn(final String name, final SchemaType schemaType) {\n     public void populateItem(\n             final Item<ICellPopulator<T>> cellItem, final String componentId, final IModel<T> rowModel) {\n \n-        List<String> values = null;\n+        List<String> values = new ArrayList<>();\n \n-        AttrTO attr = null;\n         switch (schemaType) {\n             case PLAIN:\n-                attr = rowModel.getObject().getPlainAttr(name).get();\n+                rowModel.getObject().getPlainAttr(name).ifPresent(attr -> values.addAll(attr.getValues()));\n                 break;\n \n             case DERIVED:\n-                attr = rowModel.getObject().getDerAttr(name).get();\n+                rowModel.getObject().getDerAttr(name).ifPresent(attr -> values.addAll(attr.getValues()));\n                 break;\n \n             case VIRTUAL:\n-                attr = rowModel.getObject().getVirAttr(name).get();\n+                rowModel.getObject().getVirAttr(name).ifPresent(attr -> values.addAll(attr.getValues()));\n                 break;\n \n             default:\n         }\n-        if (attr != null) {\n-            values = attr.getValues();\n-        }\n \n-        if (values == null || values.isEmpty()) {\n+        if (values.isEmpty()) {\n             cellItem.add(new Label(componentId, \"\"));\n         } else if (values.size() == 1) {\n             cellItem.add(new Label(componentId, values.get(0)));"},{"sha":"34b7d08c1084c70bc6ab683f084ea527ef06a428","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":7,"deletions":25,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/be8ae795d4c2ee42ea84cb8eb7712079dc403016/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=be8ae795d4c2ee42ea84cb8eb7712079dc403016","patch":"@@ -21,7 +21,6 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -147,6 +146,7 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends SchemaTO> List<T> search(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n \n@@ -171,29 +171,17 @@ public <T extends SchemaTO> List<T> search(\n                         ? keyword == null\n                                 ? virSchemaDAO.findAll()\n                                 : virSchemaDAO.findByKeyword(keyword)\n-                        : virSchemaDAO.findByAnyTypeClasses(classes)).\n-                        stream().map(new Function<VirSchema, T>() {\n-\n-                            @Override\n-                            public T apply(final VirSchema schema) {\n-                                return (T) binder.getVirSchemaTO(schema);\n-                            }\n-                        }).collect(Collectors.toList());\n+                        : virSchemaDAO.findByAnyTypeClasses(classes)).stream().\n+                        map(schema -> (T) binder.getVirSchemaTO(schema)).collect(Collectors.toList());\n                 break;\n \n             case DERIVED:\n                 result = (classes.isEmpty()\n                         ? keyword == null\n                                 ? derSchemaDAO.findAll()\n                                 : derSchemaDAO.findByKeyword(keyword)\n-                        : derSchemaDAO.findByAnyTypeClasses(classes)).\n-                        stream().map(new Function<DerSchema, T>() {\n-\n-                            @Override\n-                            public T apply(final DerSchema schema) {\n-                                return (T) binder.getDerSchemaTO(schema);\n-                            }\n-                        }).collect(Collectors.toList());\n+                        : derSchemaDAO.findByAnyTypeClasses(classes)).stream().\n+                        map(schema -> (T) binder.getDerSchemaTO(schema)).collect(Collectors.toList());\n                 break;\n \n             case PLAIN:\n@@ -202,14 +190,8 @@ public T apply(final DerSchema schema) {\n                         ? keyword == null\n                                 ? plainSchemaDAO.findAll()\n                                 : plainSchemaDAO.findByKeyword(keyword)\n-                        : plainSchemaDAO.findByAnyTypeClasses(classes)).\n-                        stream().map(new Function<PlainSchema, T>() {\n-\n-                            @Override\n-                            public T apply(final PlainSchema schema) {\n-                                return (T) binder.getPlainSchemaTO(schema);\n-                            }\n-                        }).collect(Collectors.toList());\n+                        : plainSchemaDAO.findByAnyTypeClasses(classes)).stream().\n+                        map(schema -> (T) binder.getPlainSchemaTO(schema)).collect(Collectors.toList());\n         }\n \n         return result;"}]}