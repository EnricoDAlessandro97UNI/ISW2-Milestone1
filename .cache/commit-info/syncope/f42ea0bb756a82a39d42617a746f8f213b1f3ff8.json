{"sha":"f42ea0bb756a82a39d42617a746f8f213b1f3ff8","node_id":"C_kwDOJfYA1toAKGY0MmVhMGJiNzU2YTgyYTM5ZDQyNjE3YTc0NmY4ZjIxM2IxZjNmZjg","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-11-03T12:05:46Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-11-03T12:05:46Z"},"message":"[SYNCOPE-1696] Adding support to manage Audit entries via Elasticsearch (#387)","tree":{"sha":"b8b5c5e4f60c3d0e73bd83001ab41bd6c88c72d5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b8b5c5e4f60c3d0e73bd83001ab41bd6c88c72d5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f42ea0bb756a82a39d42617a746f8f213b1f3ff8","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjY66aCRBK7hj4Ov3rIwAADwcIAKW4fcNeSZAecQYCG5/0seqk\nZMp6MCUydsYyyORTwY2pWDNiifSW6oA3AYHioybNYW+G2hVzZ4nQ2164CzcosTl5\neC41+pdhI8Ay0CIn2na+GPqKxrYx5GYSvWoEMBhdMceVKA+42YWLvFvu6DVcUNkB\nSkbPTb8nIvOTrL8DcyBgiP3reXOQb8KRe0cuvFJRjPS1fYpSI5iwlmZmAh4RsA9r\nQnH1YUKWDGkKX7teRWqGXLVPmmatPTLLuXy5nCp2cpxCSG78BB4b50V2QVMHmhPw\nYv+bmP/JiYmnWTlIs919gYHlmBrBWDHSLiCM2UakGcqu4nXUgRKf3Q/80j85ic0=\n=uuxh\n-----END PGP SIGNATURE-----\n","payload":"tree b8b5c5e4f60c3d0e73bd83001ab41bd6c88c72d5\nparent ee88940efc0a256d3c8b5c03151ebfb87d9bf157\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1667477146 +0100\ncommitter GitHub <noreply@github.com> 1667477146 +0100\n\n[SYNCOPE-1696] Adding support to manage Audit entries via Elasticsearch (#387)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f42ea0bb756a82a39d42617a746f8f213b1f3ff8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f42ea0bb756a82a39d42617a746f8f213b1f3ff8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"ee88940efc0a256d3c8b5c03151ebfb87d9bf157","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee88940efc0a256d3c8b5c03151ebfb87d9bf157","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ee88940efc0a256d3c8b5c03151ebfb87d9bf157"}],"stats":{"total":2409,"additions":1288,"deletions":1121},"files":[{"sha":"49fd9e03a00b0a17c515cbc5e290ccc8d05ced89","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/NumbersInfo.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FNumbersInfo.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -57,7 +57,7 @@ public static int getScore(final String name) {\n         }\n     }\n \n-    public class TaskExecutorInfo {\n+    public static class TaskExecutorInfo {\n \n         private int size;\n \n@@ -158,9 +158,7 @@ public boolean equals(final Object obj) {\n \n     private final Map<String, Boolean> confCompleteness = new HashMap<>();\n \n-    private final TaskExecutorInfo asyncConnectorExecutor = new TaskExecutorInfo();\n-\n-    private final TaskExecutorInfo propagationTaskExecutor = new TaskExecutorInfo();\n+    private final Map<String, TaskExecutorInfo> taskExecutorInfos = new HashMap<>();\n \n     public int getTotalUsers() {\n         return totalUsers;\n@@ -250,12 +248,8 @@ public Map<String, Boolean> getConfCompleteness() {\n         return confCompleteness;\n     }\n \n-    public TaskExecutorInfo getAsyncConnectorExecutor() {\n-        return asyncConnectorExecutor;\n-    }\n-\n-    public TaskExecutorInfo getPropagationTaskExecutor() {\n-        return propagationTaskExecutor;\n+    public Map<String, TaskExecutorInfo> getTaskExecutorInfos() {\n+        return taskExecutorInfos;\n     }\n \n     @Override\n@@ -275,8 +269,7 @@ public int hashCode() {\n                 append(totalResources).\n                 append(totalRoles).\n                 append(confCompleteness).\n-                append(asyncConnectorExecutor).\n-                append(propagationTaskExecutor).\n+                append(taskExecutorInfos).\n                 build();\n     }\n \n@@ -307,8 +300,7 @@ public boolean equals(final Object obj) {\n                 append(totalAny2, other.totalAny2).\n                 append(any2ByRealm, other.any2ByRealm).\n                 append(confCompleteness, other.confCompleteness).\n-                append(asyncConnectorExecutor, other.asyncConnectorExecutor).\n-                append(propagationTaskExecutor, other.propagationTaskExecutor).\n+                append(taskExecutorInfos, other.taskExecutorInfos).\n                 build();\n     }\n }"},{"sha":"c81cd389e7a4a3bfbc05202a7877cd78c03d5918","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":0,"deletions":243,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -32,211 +32,6 @@ public class PlatformInfo implements BaseBean {\n \n     private static final long serialVersionUID = -7941853999417673827L;\n \n-    public static class ProvisioningInfo implements BaseBean {\n-\n-        private static final long serialVersionUID = 533340357732839568L;\n-\n-        private String propagationTaskExecutor;\n-\n-        private String virAttrCache;\n-\n-        private String anyObjectProvisioningManager;\n-\n-        private String userProvisioningManager;\n-\n-        private String groupProvisioningManager;\n-\n-        private String notificationManager;\n-\n-        private String auditManager;\n-\n-        public String getPropagationTaskExecutor() {\n-            return propagationTaskExecutor;\n-        }\n-\n-        public void setPropagationTaskExecutor(final String propagationTaskExecutor) {\n-            this.propagationTaskExecutor = propagationTaskExecutor;\n-        }\n-\n-        public String getVirAttrCache() {\n-            return virAttrCache;\n-        }\n-\n-        public void setVirAttrCache(final String virAttrCache) {\n-            this.virAttrCache = virAttrCache;\n-        }\n-\n-        public String getAnyObjectProvisioningManager() {\n-            return anyObjectProvisioningManager;\n-        }\n-\n-        public void setAnyObjectProvisioningManager(final String anyObjectProvisioningManager) {\n-            this.anyObjectProvisioningManager = anyObjectProvisioningManager;\n-        }\n-\n-        public String getUserProvisioningManager() {\n-            return userProvisioningManager;\n-        }\n-\n-        public void setUserProvisioningManager(final String userProvisioningManager) {\n-            this.userProvisioningManager = userProvisioningManager;\n-        }\n-\n-        public String getGroupProvisioningManager() {\n-            return groupProvisioningManager;\n-        }\n-\n-        public void setGroupProvisioningManager(final String groupProvisioningManager) {\n-            this.groupProvisioningManager = groupProvisioningManager;\n-        }\n-\n-        public String getNotificationManager() {\n-            return notificationManager;\n-        }\n-\n-        public void setNotificationManager(final String notificationManager) {\n-            this.notificationManager = notificationManager;\n-        }\n-\n-        public String getAuditManager() {\n-            return auditManager;\n-        }\n-\n-        public void setAuditManager(final String auditManager) {\n-            this.auditManager = auditManager;\n-        }\n-    }\n-\n-    public static class WorkflowInfo implements BaseBean {\n-\n-        private static final long serialVersionUID = 6736937721099195324L;\n-\n-        private String anyObjectWorkflowAdapter;\n-\n-        private String userWorkflowAdapter;\n-\n-        private String groupWorkflowAdapter;\n-\n-        public String getAnyObjectWorkflowAdapter() {\n-            return anyObjectWorkflowAdapter;\n-        }\n-\n-        public void setAnyObjectWorkflowAdapter(final String anyObjectWorkflowAdapter) {\n-            this.anyObjectWorkflowAdapter = anyObjectWorkflowAdapter;\n-        }\n-\n-        public String getUserWorkflowAdapter() {\n-            return userWorkflowAdapter;\n-        }\n-\n-        public void setUserWorkflowAdapter(final String userWorkflowAdapter) {\n-            this.userWorkflowAdapter = userWorkflowAdapter;\n-        }\n-\n-        public String getGroupWorkflowAdapter() {\n-            return groupWorkflowAdapter;\n-        }\n-\n-        public void setGroupWorkflowAdapter(final String groupWorkflowAdapter) {\n-            this.groupWorkflowAdapter = groupWorkflowAdapter;\n-        }\n-    }\n-\n-    public static class PersistenceInfo implements BaseBean {\n-\n-        private static final long serialVersionUID = 2902980556801069487L;\n-\n-        private String entityFactory;\n-\n-        private String plainSchemaDAO;\n-\n-        private String plainAttrDAO;\n-\n-        private String plainAttrValueDAO;\n-\n-        private String anySearchDAO;\n-\n-        private String userDAO;\n-\n-        private String groupDAO;\n-\n-        private String anyObjectDAO;\n-\n-        public String getEntityFactory() {\n-            return entityFactory;\n-        }\n-\n-        public void setEntityFactory(final String entityFactory) {\n-            this.entityFactory = entityFactory;\n-        }\n-\n-        public String getPlainSchemaDAO() {\n-            return plainSchemaDAO;\n-        }\n-\n-        public void setPlainSchemaDAO(final String plainSchemaDAO) {\n-            this.plainSchemaDAO = plainSchemaDAO;\n-        }\n-\n-        public String getPlainAttrDAO() {\n-            return plainAttrDAO;\n-        }\n-\n-        public void setPlainAttrDAO(final String plainAttrDAO) {\n-            this.plainAttrDAO = plainAttrDAO;\n-        }\n-\n-        public String getPlainAttrValueDAO() {\n-            return plainAttrValueDAO;\n-        }\n-\n-        public void setPlainAttrValueDAO(final String plainAttrValueDAO) {\n-            this.plainAttrValueDAO = plainAttrValueDAO;\n-        }\n-\n-        public String getAnySearchDAO() {\n-            return anySearchDAO;\n-        }\n-\n-        public void setAnySearchDAO(final String anySearchDAO) {\n-            this.anySearchDAO = anySearchDAO;\n-        }\n-\n-        public String getUserDAO() {\n-            return userDAO;\n-        }\n-\n-        public void setUserDAO(final String userDAO) {\n-            this.userDAO = userDAO;\n-        }\n-\n-        public String getGroupDAO() {\n-            return groupDAO;\n-        }\n-\n-        public void setGroupDAO(final String groupDAO) {\n-            this.groupDAO = groupDAO;\n-        }\n-\n-        public String getAnyObjectDAO() {\n-            return anyObjectDAO;\n-        }\n-\n-        public void setAnyObjectDAO(final String anyObjectDAO) {\n-            this.anyObjectDAO = anyObjectDAO;\n-        }\n-    }\n-\n-    private String keymasterConfParamOps;\n-\n-    private String keymasterServiceOps;\n-\n-    private final ProvisioningInfo provisioningInfo = new ProvisioningInfo();\n-\n-    private final WorkflowInfo workflowInfo = new WorkflowInfo();\n-\n-    private final PersistenceInfo persistenceInfo = new PersistenceInfo();\n-\n     private boolean selfRegAllowed;\n \n     private boolean pwdResetAllowed;\n@@ -245,8 +40,6 @@ public void setAnyObjectDAO(final String anyObjectDAO) {\n \n     private final Set<String> connIdLocations = new HashSet<>();\n \n-    private String passwordGenerator;\n-\n     private final List<String> anyTypes = new ArrayList<>();\n \n     private final List<String> userClasses = new ArrayList<>();\n@@ -261,26 +54,6 @@ public void setAnyObjectDAO(final String anyObjectDAO) {\n \n     private final Set<JavaImplInfo> javaImplInfos = new HashSet<>();\n \n-    public String getKeymasterConfParamOps() {\n-        return keymasterConfParamOps;\n-    }\n-\n-    public String getKeymasterServiceOps() {\n-        return keymasterServiceOps;\n-    }\n-\n-    public ProvisioningInfo getProvisioningInfo() {\n-        return provisioningInfo;\n-    }\n-\n-    public WorkflowInfo getWorkflowInfo() {\n-        return workflowInfo;\n-    }\n-\n-    public PersistenceInfo getPersistenceInfo() {\n-        return persistenceInfo;\n-    }\n-\n     public boolean isSelfRegAllowed() {\n         return selfRegAllowed;\n     }\n@@ -299,14 +72,6 @@ public Set<String> getConnIdLocations() {\n         return connIdLocations;\n     }\n \n-    public String getPasswordGenerator() {\n-        return passwordGenerator;\n-    }\n-\n-    public void setPasswordGenerator(final String passwordGenerator) {\n-        this.passwordGenerator = passwordGenerator;\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"anyTypes\")\n     @JacksonXmlProperty(localName = \"anyType\")\n     public List<String> getAnyTypes() {\n@@ -354,14 +119,6 @@ public Set<JavaImplInfo> getJavaImplInfos() {\n         return javaImplInfos;\n     }\n \n-    public void setKeymasterConfParamOps(final String keymasterConfParamOps) {\n-        this.keymasterConfParamOps = keymasterConfParamOps;\n-    }\n-\n-    public void setKeymasterServiceOps(final String keymasterServiceOps) {\n-        this.keymasterServiceOps = keymasterServiceOps;\n-    }\n-\n     public void setSelfRegAllowed(final boolean selfRegAllowed) {\n         this.selfRegAllowed = selfRegAllowed;\n     }"},{"sha":"3586e23cae5076a183838612cb2619ad3b459357","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -29,7 +29,6 @@ public enum ClientExceptionType {\n     DataIntegrityViolation(Response.Status.CONFLICT),\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n-    HasChildren(Response.Status.BAD_REQUEST),\n     InvalidAccessToken(Response.Status.INTERNAL_SERVER_ERROR),\n     InvalidPrivilege(Response.Status.BAD_REQUEST),\n     InvalidImplementation(Response.Status.BAD_REQUEST),"},{"sha":"ec237ee3d1e09af0d9a525dd804d86043fb4e9de","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -82,9 +82,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return null;\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return Set.of();\n-    }\n }"},{"sha":"38d054e81d1f3cc10dc1e2904e75389d7448bd35","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.init.AuditLoader;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -57,6 +58,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.core.io.support.ResourcePatternResolver;\n@@ -72,8 +74,6 @@ public class AuditLogic extends AbstractTransactionalLogic<AuditConfTO> {\n \n     protected static final List<EventCategory> EVENTS = new ArrayList<>();\n \n-    protected final AuditLoader auditLoader;\n-\n     protected final AuditConfDAO auditConfDAO;\n \n     protected final ExternalResourceDAO resourceDAO;\n@@ -84,20 +84,22 @@ public class AuditLogic extends AbstractTransactionalLogic<AuditConfTO> {\n \n     protected final AuditManager auditManager;\n \n+    protected final ApplicationContext ctx;\n+\n     public AuditLogic(\n-            final AuditLoader auditLoader,\n             final AuditConfDAO auditConfDAO,\n             final ExternalResourceDAO resourceDAO,\n             final EntityFactory entityFactory,\n             final AuditDataBinder binder,\n-            final AuditManager auditManager) {\n+            final AuditManager auditManager,\n+            final ApplicationContext ctx) {\n \n-        this.auditLoader = auditLoader;\n         this.auditConfDAO = auditConfDAO;\n         this.resourceDAO = resourceDAO;\n         this.entityFactory = entityFactory;\n         this.binder = binder;\n         this.auditManager = auditManager;\n+        this.ctx = ctx;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"')\")\n@@ -141,17 +143,17 @@ public void delete(final String key) {\n     protected void setLevel(final String key, final Level level) {\n         String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), key);\n \n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(auditLoggerName);\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n+        LoggerConfig logConf = logCtx.getConfiguration().getLoggerConfig(auditLoggerName);\n \n         // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-        auditLoader.auditAppenders(AuthContextUtils.getDomain()).stream().\n+        ctx.getBeansOfType(AuditAppender.class).values().stream().\n                 filter(appender -> appender.getEvents().stream().\n                 anyMatch(event -> key.equalsIgnoreCase(event.toAuditKey()))).\n-                forEach(auditAppender -> AuditLoader.addAppenderToContext(ctx, auditAppender, logConf));\n+                forEach(auditAppender -> AuditLoader.addAppenderToLoggerContext(logCtx, auditAppender, logConf));\n \n         logConf.setLevel(level);\n-        ctx.updateLoggers();\n+        logCtx.updateLoggers();\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"') \"\n@@ -270,11 +272,11 @@ public Pair<Integer, List<AuditEntry>> search(\n             final String subcategory,\n             final List<String> events,\n             final AuditElements.Result result,\n-            final List<OrderByClause> orderByClauses) {\n+            final List<OrderByClause> orderBy) {\n \n         int count = auditConfDAO.countEntries(entityKey, type, category, subcategory, events, result);\n         List<AuditEntry> matching = auditConfDAO.searchEntries(\n-                entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n+                entityKey, page, size, type, category, subcategory, events, result, orderBy);\n         return Pair.of(count, matching);\n     }\n "},{"sha":"d04964193a80134e87415ffa7ad46c8930ee4268","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":38,"deletions":10,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -18,13 +18,23 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n+import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.logic.init.AuditAccessor;\n import org.apache.syncope.core.logic.init.AuditLoader;\n import org.apache.syncope.core.logic.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.core.logic.init.EntitlementAccessor;\n import org.apache.syncope.core.logic.init.IdRepoEntitlementLoader;\n import org.apache.syncope.core.logic.init.IdRepoImplementationTypeLoader;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n@@ -98,14 +108,13 @@\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.EnableAspectJAutoProxy;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n @EnableAspectJAutoProxy(proxyTargetClass = false)\n-@EnableConfigurationProperties(LogicProperties.class)\n @Configuration(proxyBeanMethods = false)\n public class IdRepoLogicContext {\n \n@@ -134,10 +143,29 @@ public AuditAccessor auditAccessor(final AuditConfDAO auditConfDAO) {\n     @Bean\n     public AuditLoader auditLoader(\n             final AuditAccessor auditAccessor,\n-            final ImplementationLookup implementationLookup,\n-            final LogicProperties logicProperties) {\n+            final ApplicationContext ctx) {\n \n-        return new AuditLoader(auditAccessor, implementationLookup, logicProperties);\n+        return new AuditLoader(auditAccessor, ctx);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"defaultAuditAppenders\")\n+    @Bean\n+    public List<AuditAppender> defaultAuditAppenders(final DomainHolder domainHolder) {\n+        List<AuditAppender> auditAppenders = new ArrayList<>();\n+\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n+        domainHolder.getDomains().forEach((domain, dataSource) -> {\n+            AuditAppender appender = new JdbcAuditAppender(domain, dataSource);\n+\n+            LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(domain), null, false);\n+            logConf.addAppender(appender.getTargetAppender(), Level.DEBUG, null);\n+            logConf.setLevel(Level.DEBUG);\n+            logCtx.getConfiguration().addLogger(logConf.getName(), logConf);\n+\n+            auditAppenders.add(appender);\n+        });\n+\n+        return auditAppenders;\n     }\n \n     @ConditionalOnMissingBean\n@@ -220,20 +248,20 @@ public ApplicationLogic applicationLogic(\n     @ConditionalOnMissingBean\n     @Bean\n     public AuditLogic auditLogic(\n-            final AuditManager auditManager,\n-            final AuditLoader auditLoader,\n             final AuditConfDAO auditConfDAO,\n             final ExternalResourceDAO externalResourceDAO,\n             final EntityFactory entityFactory,\n-            final AuditDataBinder binder) {\n+            final AuditDataBinder binder,\n+            final AuditManager auditManager,\n+            final ApplicationContext ctx) {\n \n         return new AuditLogic(\n-                auditLoader,\n                 auditConfDAO,\n                 externalResourceDAO,\n                 entityFactory,\n                 binder,\n-                auditManager);\n+                auditManager,\n+                ctx);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"0b6991077763611928cb5934ce216e14ae1630b2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicProperties.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java?ref=ee88940efc0a256d3c8b5c03151ebfb87d9bf157","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import org.springframework.boot.context.properties.ConfigurationProperties;\n-\n-@ConfigurationProperties(\"logic\")\n-public class LogicProperties {\n-\n-    private boolean enableJDBCAuditAppender = true;\n-\n-    public boolean isEnableJDBCAuditAppender() {\n-        return enableJDBCAuditAppender;\n-    }\n-\n-    public void setEnableJDBCAuditAppender(final boolean enableJDBCAuditAppender) {\n-        this.enableJDBCAuditAppender = enableJDBCAuditAppender;\n-    }\n-}"},{"sha":"5c259913eef9196dab4c179c835b23290bc50379","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -222,7 +222,7 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n                 orElseThrow(() -> new NotFoundException(\"Realm \" + fullPath));\n \n         if (!realmDAO.findChildren(realm).isEmpty()) {\n-            throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n+            throw SyncopeClientException.build(ClientExceptionType.RealmContains);\n         }\n \n         Set<String> adminRealms = Set.of(realm.getFullPath());"},{"sha":"9a8d8122b037aad616f2085f3f92e829d005a7f9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditAppender.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -32,8 +32,6 @@\n  */\n public interface AuditAppender {\n \n-    void init(String domain);\n-\n     default Set<AuditLoggerName> getEvents() {\n         return Set.of();\n     }"},{"sha":"a18d7c7d30417d08a2c93b6161d6fdf7307b1852","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -29,18 +29,14 @@\n  */\n public abstract class DefaultAuditAppender implements AuditAppender {\n \n-    protected String domain;\n+    protected final String domain;\n \n     protected Appender targetAppender;\n \n-    @Override\n-    public void init(final String domain) {\n+    protected DefaultAuditAppender(final String domain) {\n         this.domain = domain;\n-        initTargetAppender();\n     }\n \n-    protected abstract void initTargetAppender();\n-\n     @Override\n     public Appender getTargetAppender() {\n         return targetAppender;"},{"sha":"008752226a03e1ca197d822beef44bb4c031922a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -39,9 +39,8 @@ public abstract class DefaultRewriteAuditAppender extends DefaultAuditAppender {\n \n     protected RewriteAppender rewriteAppender;\n \n-    @Override\n-    public void init(final String domain) {\n-        super.init(domain);\n+    public DefaultRewriteAuditAppender(final String domain) {\n+        super(domain);\n \n         rewriteAppender = RewriteAppender.createAppender(\n                 getTargetAppenderName() + \"_rewrite\","},{"sha":"4ecce56d9b06fecef2764775741d7f4119616635","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/JdbcAuditAppender.java","status":"modified","additions":24,"deletions":28,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -21,61 +21,57 @@\n import java.sql.Connection;\n import java.sql.SQLException;\n import java.sql.Timestamp;\n+import java.util.Optional;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.appender.db.ColumnMapping;\n import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n-import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n \n public class JdbcAuditAppender extends DefaultAuditAppender {\n \n-    @Autowired\n-    protected DomainHolder domainHolder;\n+    public JdbcAuditAppender(final String domain, final DataSource domainDataSource) {\n+        super(domain);\n \n-    @Override\n-    protected void initTargetAppender() {\n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n \n         ColumnMapping[] columnMappings = {\n             ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setType(Timestamp.class).build(),\n+            setConfiguration(logCtx.getConfiguration()).setName(\"EVENT_DATE\").setType(Timestamp.class).build(),\n             ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER_LEVEL\").setPattern(\"%level\").build(),\n+            setConfiguration(logCtx.getConfiguration()).setName(\"LOGGER_LEVEL\").setPattern(\"%level\").build(),\n             ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n+            setConfiguration(logCtx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n             ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).\n+            setConfiguration(logCtx.getConfiguration()).\n             setName(AuditConfDAO.AUDIT_ENTRY_MESSAGE_COLUMN).setPattern(\"%message\").build(),\n             ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n+            setConfiguration(logCtx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n         };\n \n-        Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + domain);\n-        if (appender == null) {\n-            appender = JdbcAppender.newBuilder().\n-                    setName(\"audit_for_\" + domain).\n-                    setIgnoreExceptions(false).\n-                    setConnectionSource(new DataSourceConnectionSource(domain, domainHolder.getDomains().get(domain))).\n-                    setBufferSize(0).\n-                    setTableName(AuditConfDAO.AUDIT_ENTRY_TABLE).\n-                    setColumnMappings(columnMappings).\n-                    build();\n-            appender.start();\n-            ctx.getConfiguration().addAppender(appender);\n-        }\n-        targetAppender = appender;\n+        targetAppender = Optional.ofNullable(logCtx.getConfiguration().<Appender>getAppender(getTargetAppenderName())).\n+                orElseGet(() -> {\n+                    JdbcAppender a = JdbcAppender.newBuilder().\n+                            setName(getTargetAppenderName()).\n+                            setIgnoreExceptions(false).\n+                            setConnectionSource(new DataSourceConnectionSource(domain, domainDataSource)).\n+                            setBufferSize(0).\n+                            setTableName(AuditConfDAO.AUDIT_ENTRY_TABLE).\n+                            setColumnMappings(columnMappings).\n+                            build();\n+                    a.start();\n+                    logCtx.getConfiguration().addAppender(a);\n+                    return a;\n+                });\n     }\n \n     @Override\n     public String getTargetAppenderName() {\n-        // not used\n-        return null;\n+        return \"audit_for_\" + domain;\n     }\n \n     protected static class DataSourceConnectionSource extends AbstractConnectionSource {"},{"sha":"f906c52ed81c9d45c88db2a25a501b3d4d183d09","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditLoader.java","status":"modified","additions":34,"deletions":72,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n@@ -29,34 +27,43 @@\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.logic.LogicProperties;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n-import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.context.ApplicationContext;\n \n public class AuditLoader implements SyncopeCoreLoader {\n \n     protected static final String ROOT_LOGGER = \"ROOT\";\n \n-    protected final AuditAccessor auditAccessor;\n+    public static void addAppenderToLoggerContext(\n+            final LoggerContext ctx,\n+            final AuditAppender auditAppender,\n+            final LoggerConfig eventLogConf) {\n+\n+        Appender targetAppender = ctx.getConfiguration().getAppender(auditAppender.getTargetAppenderName());\n+        if (targetAppender == null) {\n+            targetAppender = auditAppender.getTargetAppender();\n+        }\n+        targetAppender.start();\n+        ctx.getConfiguration().addAppender(targetAppender);\n \n-    protected final ImplementationLookup implementationLookup;\n+        Optional<RewriteAppender> rewriteAppender = auditAppender.getRewriteAppender();\n+        if (rewriteAppender.isPresent()) {\n+            rewriteAppender.get().start();\n+            eventLogConf.addAppender(rewriteAppender.get(), Level.DEBUG, null);\n+        } else {\n+            eventLogConf.addAppender(targetAppender, Level.DEBUG, null);\n+        }\n+    }\n \n-    protected final LogicProperties props;\n+    protected final AuditAccessor auditAccessor;\n \n-    public AuditLoader(\n-            final AuditAccessor auditAccessor,\n-            final ImplementationLookup implementationLookup,\n-            final LogicProperties props) {\n+    protected final ApplicationContext ctx;\n \n+    public AuditLoader(final AuditAccessor auditAccessor, final ApplicationContext ctx) {\n         this.auditAccessor = auditAccessor;\n-        this.implementationLookup = implementationLookup;\n-        this.props = props;\n+        this.ctx = ctx;\n     }\n \n     @Override\n@@ -66,77 +73,32 @@ public int getOrder() {\n \n     @Override\n     public void load(final String domain, final DataSource datasource) {\n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-\n-        if (props.isEnableJDBCAuditAppender()) {\n-            JdbcAuditAppender jdbcAuditAppender = (JdbcAuditAppender) ApplicationContextProvider.getBeanFactory().\n-                    createBean(JdbcAuditAppender.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-            jdbcAuditAppender.init(domain);\n-\n-            LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(domain), null, false);\n-            logConf.addAppender(jdbcAuditAppender.getTargetAppender(), Level.DEBUG, null);\n-            logConf.setLevel(Level.DEBUG);\n-            ctx.getConfiguration().addLogger(logConf.getName(), logConf);\n-        }\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n \n         // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-        auditAppenders(domain).forEach(auditAppender -> auditAppender.getEvents().stream().\n+        ctx.getBeansOfType(AuditAppender.class).values().forEach(auditAppender -> auditAppender.getEvents().stream().\n                 map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toAuditKey())).\n                 forEach(domainAuditLoggerName -> {\n-                    LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+                    LoggerConfig eventLogConf = logCtx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n                     boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n+\n                     if (isRootLogConf) {\n                         eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n                     }\n-                    addAppenderToContext(ctx, auditAppender, eventLogConf);\n+\n+                    addAppenderToLoggerContext(logCtx, auditAppender, eventLogConf);\n                     eventLogConf.setLevel(Level.DEBUG);\n+\n                     if (isRootLogConf) {\n-                        ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                        logCtx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n                     }\n                 }));\n \n         AuthContextUtils.callAsAdmin(domain, () -> {\n-            auditAccessor.synchronizeLoggingWithAudit(ctx);\n+            auditAccessor.synchronizeLoggingWithAudit(logCtx);\n             return null;\n         });\n \n-        ctx.updateLoggers();\n-    }\n-\n-    public List<AuditAppender> auditAppenders(final String domain) throws BeansException {\n-        return implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {\n-            AuditAppender auditAppender;\n-            if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n-                auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n-                        getSingleton(clazz.getName());\n-            } else {\n-                auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n-                        createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                ApplicationContextProvider.getBeanFactory().registerSingleton(clazz.getName(), auditAppender);\n-                auditAppender.init(domain);\n-            }\n-            return auditAppender;\n-        }).collect(Collectors.toList());\n-    }\n-\n-    public static void addAppenderToContext(\n-            final LoggerContext ctx,\n-            final AuditAppender auditAppender,\n-            final LoggerConfig eventLogConf) {\n-\n-        Appender targetAppender = ctx.getConfiguration().getAppender(auditAppender.getTargetAppenderName());\n-        if (targetAppender == null) {\n-            targetAppender = auditAppender.getTargetAppender();\n-        }\n-        targetAppender.start();\n-        ctx.getConfiguration().addAppender(targetAppender);\n-\n-        Optional<RewriteAppender> rewriteAppender = auditAppender.getRewriteAppender();\n-        if (rewriteAppender.isPresent()) {\n-            rewriteAppender.get().start();\n-            eventLogConf.addAppender(rewriteAppender.get(), Level.DEBUG, null);\n-        } else {\n-            eventLogConf.addAppender(targetAppender, Level.DEBUG, null);\n-        }\n+        logCtx.updateLoggers();\n     }\n }"},{"sha":"8036954740a0b7b9b9db43f8c8c6223eef284ccd","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -35,8 +35,6 @@\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.logic.api.Command;\n import org.apache.syncope.core.logic.api.LogicActions;\n-import org.apache.syncope.core.logic.audit.AuditAppender;\n-import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n@@ -92,8 +90,6 @@ public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n     private Map<Class<? extends PushCorrelationRuleConf>, Class<? extends PushCorrelationRule>> pushCRClasses;\n \n-    private Set<Class<?>> auditAppenderClasses;\n-\n     @Override\n     public int getOrder() {\n         return Ordered.HIGHEST_PRECEDENCE + 1;\n@@ -129,7 +125,6 @@ public void load() {\n         passwordRuleClasses = new HashMap<>();\n         pullCRClasses = new HashMap<>();\n         pushCRClasses = new HashMap<>();\n-        auditAppenderClasses = new HashSet<>();\n \n         scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n@@ -234,13 +229,6 @@ public void load() {\n                     classNames.get(IdRepoImplementationType.RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n \n-                if (AuditAppender.class.isAssignableFrom(clazz)\n-                        && !JdbcAuditAppender.class.equals(clazz) && !isAbstractClazz) {\n-\n-                    classNames.get(IdRepoImplementationType.AUDIT_APPENDER).add(clazz.getName());\n-                    auditAppenderClasses.add(clazz);\n-                }\n-\n                 if (ProvisionSorter.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(IdMImplementationType.PROVISION_SORTER).add(bd.getBeanClassName());\n                 }\n@@ -262,7 +250,6 @@ public void load() {\n         passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);\n         pullCRClasses = Collections.unmodifiableMap(pullCRClasses);\n         pushCRClasses = Collections.unmodifiableMap(pushCRClasses);\n-        auditAppenderClasses = Collections.unmodifiableSet(auditAppenderClasses);\n     }\n \n     @Override\n@@ -309,9 +296,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return pushCRClasses.get(correlationRuleConfClass);\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return auditAppenderClasses;\n-    }\n }"},{"sha":"92acd2764d74489bb39893969733e98233cde8a3","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -88,9 +88,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return null;\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return Set.of();\n-    }\n }"},{"sha":"ab01ca51ad8bd08b074451b6178ea8d20f6e9bc1","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -130,6 +130,7 @@\n import org.apache.syncope.core.rest.cxf.service.TaskServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserSelfServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n@@ -145,7 +146,6 @@\n @Configuration(proxyBeanMethods = false)\n public class IdRepoRESTCXFContext {\n \n-    @ConditionalOnMissingBean\n     @Bean\n     public ThreadPoolTaskExecutor batchExecutor(final RESTProperties props) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n@@ -480,6 +480,7 @@ public SecurityQuestionService securityQuestionService(final SecurityQuestionLog\n     public SyncopeService syncopeService(\n             final Bus bus,\n             final SyncopeLogic syncopeLogic,\n+            @Qualifier(\"batchExecutor\")\n             final ThreadPoolTaskExecutor batchExecutor,\n             final BatchDAO batchDAO,\n             final EntityFactory entityFactory) {"},{"sha":"fd94f324206b3a0a5641d6e1469c67ac8e9ded8f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -50,6 +50,4 @@ Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n \n     Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n             Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass);\n-\n-    Set<Class<?>> getAuditAppenderClasses();\n }"},{"sha":"4e060e54991e0fc5f689f844beb22586948d42fb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditConfDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -49,11 +49,11 @@ int countEntries(\n     List<AuditEntry> searchEntries(\n             String entityKey,\n             int page,\n-            int size,\n+            int itemsPerPage,\n             AuditElements.EventCategoryType type,\n             String category,\n             String subcategory,\n             List<String> events,\n             AuditElements.Result result,\n-            List<OrderByClause> orderByClauses);\n+            List<OrderByClause> orderBy);\n }"},{"sha":"2f68b4cf2d8450193fb4c6d72e77e51493c8f606","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditConfDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -165,7 +165,7 @@ public List<AuditEntry> searchEntries(\n             final String subcategory,\n             final List<String> events,\n             final AuditElements.Result result,\n-            final List<OrderByClause> orderByClauses) {\n+            final List<OrderByClause> orderBy) {\n \n         String queryString = \"SELECT \" + select()\n                 + \" FROM \" + AUDIT_ENTRY_TABLE\n@@ -176,9 +176,9 @@ public List<AuditEntry> searchEntries(\n                         result(result).\n                         events(events).\n                         build();\n-        if (!orderByClauses.isEmpty()) {\n-            queryString += \" ORDER BY \" + orderByClauses.stream().\n-                    map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n+        if (!orderBy.isEmpty()) {\n+            queryString += \" ORDER BY \" + orderBy.stream().\n+                    map(clause -> clause.getField() + ' ' + clause.getDirection().name()).\n                     collect(Collectors.joining(\",\"));\n         }\n "},{"sha":"9118e6851798c8f9edea7730c53104b0cb2807d0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -86,9 +86,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return DefaultPushCorrelationRule.class;\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return Set.of();\n-    }\n }"},{"sha":"3f019807e9c6653c12a22fea6727762ab742b6b2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -107,6 +107,18 @@ public static <T extends Object> T deserialize(final String serialized, final Ty\n \n         return result;\n     }\n+    \n+    public static <T extends Object> T convertValue(final Object value, final Class<T> reference) {\n+        T result = null;\n+\n+        try {\n+            result = MAPPER.convertValue(value, reference);\n+        } catch (Exception e) {\n+            LOG.error(\"During conversion\", e);\n+        }\n+\n+        return result;\n+    }\n \n     private POJOHelper() {\n     }"},{"sha":"80c43b09318a2d541805073cbd7e6f696bdeb292","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -20,6 +20,7 @@\n \n import java.time.OffsetDateTime;\n import java.util.Arrays;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n@@ -139,12 +140,12 @@ public void audit(\n \n         AuditLoggerName auditLoggerName = new AuditLoggerName(type, category, subcategory, event, condition);\n \n-        AuditConf audit = auditConfDAO.find(auditLoggerName.toAuditKey());\n-        if (audit != null && audit.isActive()) {\n-            Throwable throwable = null;\n-            if (output instanceof Throwable) {\n-                throwable = (Throwable) output;\n-            }\n+        Optional.ofNullable(auditConfDAO.find(auditLoggerName.toAuditKey())).\n+                filter(AuditConf::isActive).ifPresent(audit -> {\n+\n+            Throwable throwable = output instanceof Throwable\n+                    ? (Throwable) output\n+                    : null;\n \n             AuditEntry auditEntry = new AuditEntry();\n             auditEntry.setWho(who);\n@@ -176,6 +177,6 @@ public void audit(\n                 logger.debug(serializedAuditEntry, throwable);\n                 eventLogger.debug(serializedAuditEntry, throwable);\n             }\n-        }\n+        });\n     }\n }"},{"sha":"02b992f1c5752df477c3565ab21f76e3deaca444","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -646,8 +646,7 @@ protected TaskExec<PropagationTask> doExecute(\n             action.after(taskInfo, exec, afterObj);\n         }\n         // SYNCOPE-1136\n-        String anyTypeKind = Optional.ofNullable(taskInfo.getAnyTypeKind()).\n-                map(Enum::name).orElse(\"realm\");\n+        String anyTypeKind = Optional.ofNullable(taskInfo.getAnyTypeKind()).map(Enum::name).orElse(\"realm\");\n         String operation = taskInfo.getOperation().name().toLowerCase();\n         boolean notificationsAvailable = notificationManager.notificationsAvailable(\n                 AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, taskInfo.getResource().getKey(), operation);"},{"sha":"23522633849cc8b2863d851ef54a45f4f6ba8f6c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -576,7 +576,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<Realm>\n \n                     try {\n                         if (!realmDAO.findChildren(realm).isEmpty()) {\n-                            throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n+                            throw SyncopeClientException.build(ClientExceptionType.RealmContains);\n                         }\n \n                         Set<String> adminRealms = Set.of(realm.getFullPath());"},{"sha":"ec1f54d72a2e3f320dd675281dc534877ea8de0a","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -86,9 +86,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return DefaultPushCorrelationRule.class;\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return Set.of();\n-    }\n }"},{"sha":"019430e81eccfdfdbd8449d2df4402b62a97cfad","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDummyImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -82,9 +82,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return null;\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return Set.of();\n-    }\n }"},{"sha":"90aaa2894357966861c68a652b76e69d1ee063c4","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":14,"deletions":79,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -21,50 +21,29 @@\n import java.util.Map;\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.core.logic.LogicProperties;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.ProvisioningProperties;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.starter.actuate.DefaultSyncopeCoreInfoContributor;\n import org.apache.syncope.core.starter.actuate.DomainsHealthIndicator;\n import org.apache.syncope.core.starter.actuate.EntityCacheEndpoint;\n import org.apache.syncope.core.starter.actuate.ExternalResourcesHealthIndicator;\n import org.apache.syncope.core.starter.actuate.SyncopeCoreInfoContributor;\n-import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.actuate.mail.MailHealthIndicator;\n@@ -80,6 +59,7 @@\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.PayloadApplicationEvent;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.event.EventListener;\n@@ -134,85 +114,40 @@ public KeymasterStop keymasterStop(final DomainHolder domainHolder) {\n     @ConditionalOnMissingBean\n     @Bean\n     public SyncopeCoreInfoContributor syncopeCoreInfoContributor(\n-            final SecurityProperties securityProperties,\n-            final PersistenceProperties persistenceProperties,\n-            final ProvisioningProperties provisioningProperties,\n-            final LogicProperties logicProperties,\n             final AnyTypeDAO anyTypeDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n+            final ExternalResourceDAO resourceDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final AnyObjectDAO anyObjectDAO,\n-            final ExternalResourceDAO resourceDAO,\n-            final ConfParamOps confParamOps,\n-            final ServiceOps serviceOps,\n-            final ConnIdBundleManager bundleManager,\n-            final PropagationTaskExecutor propagationTaskExecutor,\n-            final AnyObjectWorkflowAdapter awfAdapter,\n-            final UserWorkflowAdapter uwfAdapter,\n-            final GroupWorkflowAdapter gwfAdapter,\n-            final AnyObjectProvisioningManager aProvisioningManager,\n-            final UserProvisioningManager uProvisioningManager,\n-            final GroupProvisioningManager gProvisioningManager,\n-            final VirAttrCache virAttrCache,\n-            final NotificationManager notificationManager,\n-            final AuditManager auditManager,\n-            final PasswordGenerator passwordGenerator,\n-            final EntityFactory entityFactory,\n-            final PlainSchemaDAO plainSchemaDAO,\n-            final PlainAttrDAO plainAttrDAO,\n-            final PlainAttrValueDAO plainAttrValueDAO,\n-            final AnySearchDAO anySearchDAO,\n-            final ImplementationLookup implLookup,\n+            final RoleDAO roleDAO,\n             final PolicyDAO policyDAO,\n             final NotificationDAO notificationDAO,\n             final TaskDAO taskDAO,\n             final VirSchemaDAO virSchemaDAO,\n-            final RoleDAO roleDAO,\n             final SecurityQuestionDAO securityQuestionDAO,\n-            @Qualifier(\"asyncConnectorFacadeExecutor\")\n-            final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n-            @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n-            final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+            final ConfParamOps confParamOps,\n+            final ConnIdBundleManager bundleManager,\n+            final ImplementationLookup implLookup,\n+            final ApplicationContext ctx) {\n \n-        return new DefaultSyncopeCoreInfoContributor(securityProperties,\n-                persistenceProperties,\n-                provisioningProperties,\n-                logicProperties,\n+        return new DefaultSyncopeCoreInfoContributor(\n                 anyTypeDAO,\n                 anyTypeClassDAO,\n+                resourceDAO,\n                 userDAO,\n                 groupDAO,\n                 anyObjectDAO,\n-                resourceDAO,\n-                confParamOps,\n-                serviceOps,\n-                bundleManager,\n-                propagationTaskExecutor,\n-                awfAdapter,\n-                uwfAdapter,\n-                gwfAdapter,\n-                aProvisioningManager,\n-                uProvisioningManager,\n-                gProvisioningManager,\n-                virAttrCache,\n-                notificationManager,\n-                auditManager,\n-                passwordGenerator,\n-                entityFactory,\n-                plainSchemaDAO,\n-                plainAttrDAO,\n-                plainAttrValueDAO,\n-                anySearchDAO,\n-                implLookup,\n+                roleDAO,\n                 policyDAO,\n                 notificationDAO,\n                 taskDAO,\n                 virSchemaDAO,\n-                roleDAO,\n                 securityQuestionDAO,\n-                asyncConnectorFacadeExecutor,\n-                propagationTaskExecutorAsyncExecutor);\n+                confParamOps,\n+                bundleManager,\n+                implLookup,\n+                ctx.getBeansOfType(ThreadPoolTaskExecutor.class));\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"5b869e0183e9efa1d9e31f9d9796d3db0c8ab0c1","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DefaultSyncopeCoreInfoContributor.java","status":"modified","additions":39,"deletions":197,"changes":236,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -31,26 +31,20 @@\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.logic.LogicProperties;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n@@ -59,29 +53,13 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.ProvisioningProperties;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n-import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.aop.support.AopUtils;\n import org.springframework.boot.actuate.info.Info;\n import org.springframework.boot.actuate.info.InfoContributor;\n import org.springframework.context.PayloadApplicationEvent;\n@@ -105,30 +83,34 @@ public class DefaultSyncopeCoreInfoContributor implements SyncopeCoreInfoContrib\n             + \"queued tasks = ([0-9]+), \"\n             + \"completed tasks = ([0-9]+).*\");\n \n-    protected static void setTaskExecutorInfo(final String toString, final NumbersInfo.TaskExecutorInfo info) {\n+    protected static NumbersInfo.TaskExecutorInfo getTaskExecutorInfo(final String toString) {\n+        NumbersInfo.TaskExecutorInfo info = new NumbersInfo.TaskExecutorInfo();\n+\n         Matcher matcher = THREADPOOLTASKEXECUTOR_PATTERN.matcher(toString);\n         if (matcher.matches() && matcher.groupCount() == 4) {\n             try {\n-                info.setSize(Integer.valueOf(matcher.group(1)));\n+                info.setSize(Integer.parseInt(matcher.group(1)));\n             } catch (NumberFormatException e) {\n                 LOG.error(\"While parsing thread pool size\", e);\n             }\n             try {\n-                info.setActive(Integer.valueOf(matcher.group(2)));\n+                info.setActive(Integer.parseInt(matcher.group(2)));\n             } catch (NumberFormatException e) {\n                 LOG.error(\"While parsing active threads #\", e);\n             }\n             try {\n-                info.setQueued(Integer.valueOf(matcher.group(3)));\n+                info.setQueued(Integer.parseInt(matcher.group(3)));\n             } catch (NumberFormatException e) {\n                 LOG.error(\"While parsing queued threads #\", e);\n             }\n             try {\n-                info.setCompleted(Integer.valueOf(matcher.group(4)));\n+                info.setCompleted(Integer.parseInt(matcher.group(4)));\n             } catch (NumberFormatException e) {\n                 LOG.error(\"While parsing completed threads #\", e);\n             }\n         }\n+\n+        return info;\n     }\n \n     protected static void initSystemInfo() {\n@@ -155,160 +137,72 @@ protected static void initSystemInfo() {\n         }\n     }\n \n-    private final SecurityProperties securityProperties;\n-\n-    private final PersistenceProperties persistenceProperties;\n-\n-    private final ProvisioningProperties provisioningProperties;\n-\n-    private final LogicProperties logicProperties;\n-\n-    private final AnyTypeDAO anyTypeDAO;\n-\n-    private final AnyTypeClassDAO anyTypeClassDAO;\n-\n-    private final UserDAO userDAO;\n-\n-    private final GroupDAO groupDAO;\n-\n-    private final AnyObjectDAO anyObjectDAO;\n-\n-    private final ExternalResourceDAO resourceDAO;\n-\n-    private final ConfParamOps confParamOps;\n-\n-    private final ServiceOps serviceOps;\n-\n-    private final ConnIdBundleManager bundleManager;\n-\n-    private final PropagationTaskExecutor propagationTaskExecutor;\n-\n-    private final AnyObjectWorkflowAdapter awfAdapter;\n-\n-    private final UserWorkflowAdapter uwfAdapter;\n-\n-    private final GroupWorkflowAdapter gwfAdapter;\n-\n-    private final AnyObjectProvisioningManager aProvisioningManager;\n-\n-    private final UserProvisioningManager uProvisioningManager;\n-\n-    private final GroupProvisioningManager gProvisioningManager;\n-\n-    private final VirAttrCache virAttrCache;\n-\n-    private final NotificationManager notificationManager;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    private final AuditManager auditManager;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    private final PasswordGenerator passwordGenerator;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    private final EntityFactory entityFactory;\n+    protected final UserDAO userDAO;\n \n-    private final PlainSchemaDAO plainSchemaDAO;\n+    protected final GroupDAO groupDAO;\n \n-    private final PlainAttrDAO plainAttrDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    private final PlainAttrValueDAO plainAttrValueDAO;\n+    protected final RoleDAO roleDAO;\n \n-    private final AnySearchDAO anySearchDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    private final ImplementationLookup implLookup;\n+    protected final TaskDAO taskDAO;\n \n-    private final PolicyDAO policyDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    private final NotificationDAO notificationDAO;\n+    protected final SecurityQuestionDAO securityQuestionDAO;\n \n-    private final TaskDAO taskDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    private final VirSchemaDAO virSchemaDAO;\n+    protected final ConfParamOps confParamOps;\n \n-    private final RoleDAO roleDAO;\n+    protected final ConnIdBundleManager bundleManager;\n \n-    private final SecurityQuestionDAO securityQuestionDAO;\n+    protected final ImplementationLookup implLookup;\n \n-    private final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor;\n-\n-    private final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n+    protected final Map<String, ThreadPoolTaskExecutor> taskExecutors;\n \n     public DefaultSyncopeCoreInfoContributor(\n-            final SecurityProperties securityProperties,\n-            final PersistenceProperties persistenceProperties,\n-            final ProvisioningProperties provisioningProperties,\n-            final LogicProperties logicProperties,\n             final AnyTypeDAO anyTypeDAO,\n             final AnyTypeClassDAO anyTypeClassDAO,\n+            final ExternalResourceDAO resourceDAO,\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final AnyObjectDAO anyObjectDAO,\n-            final ExternalResourceDAO resourceDAO,\n-            final ConfParamOps confParamOps,\n-            final ServiceOps serviceOps,\n-            final ConnIdBundleManager bundleManager,\n-            final PropagationTaskExecutor propagationTaskExecutor,\n-            final AnyObjectWorkflowAdapter awfAdapter,\n-            final UserWorkflowAdapter uwfAdapter,\n-            final GroupWorkflowAdapter gwfAdapter,\n-            final AnyObjectProvisioningManager aProvisioningManager,\n-            final UserProvisioningManager uProvisioningManager,\n-            final GroupProvisioningManager gProvisioningManager,\n-            final VirAttrCache virAttrCache,\n-            final NotificationManager notificationManager,\n-            final AuditManager auditManager,\n-            final PasswordGenerator passwordGenerator,\n-            final EntityFactory entityFactory,\n-            final PlainSchemaDAO plainSchemaDAO,\n-            final PlainAttrDAO plainAttrDAO,\n-            final PlainAttrValueDAO plainAttrValueDAO,\n-            final AnySearchDAO anySearchDAO,\n-            final ImplementationLookup implLookup,\n+            final RoleDAO roleDAO,\n             final PolicyDAO policyDAO,\n             final NotificationDAO notificationDAO,\n             final TaskDAO taskDAO,\n             final VirSchemaDAO virSchemaDAO,\n-            final RoleDAO roleDAO,\n             final SecurityQuestionDAO securityQuestionDAO,\n-            final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n-            final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+            final ConfParamOps confParamOps,\n+            final ConnIdBundleManager bundleManager,\n+            final ImplementationLookup implLookup,\n+            final Map<String, ThreadPoolTaskExecutor> taskExecutors) {\n \n-        this.securityProperties = securityProperties;\n-        this.persistenceProperties = persistenceProperties;\n-        this.provisioningProperties = provisioningProperties;\n-        this.logicProperties = logicProperties;\n         this.anyTypeDAO = anyTypeDAO;\n         this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.resourceDAO = resourceDAO;\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n         this.anyObjectDAO = anyObjectDAO;\n-        this.resourceDAO = resourceDAO;\n-        this.confParamOps = confParamOps;\n-        this.serviceOps = serviceOps;\n-        this.bundleManager = bundleManager;\n-        this.propagationTaskExecutor = propagationTaskExecutor;\n-        this.awfAdapter = awfAdapter;\n-        this.uwfAdapter = uwfAdapter;\n-        this.gwfAdapter = gwfAdapter;\n-        this.aProvisioningManager = aProvisioningManager;\n-        this.uProvisioningManager = uProvisioningManager;\n-        this.gProvisioningManager = gProvisioningManager;\n-        this.virAttrCache = virAttrCache;\n-        this.notificationManager = notificationManager;\n-        this.auditManager = auditManager;\n-        this.passwordGenerator = passwordGenerator;\n-        this.entityFactory = entityFactory;\n-        this.plainSchemaDAO = plainSchemaDAO;\n-        this.plainAttrDAO = plainAttrDAO;\n-        this.plainAttrValueDAO = plainAttrValueDAO;\n-        this.anySearchDAO = anySearchDAO;\n-        this.implLookup = implLookup;\n+        this.roleDAO = roleDAO;\n         this.policyDAO = policyDAO;\n         this.notificationDAO = notificationDAO;\n         this.taskDAO = taskDAO;\n         this.virSchemaDAO = virSchemaDAO;\n-        this.roleDAO = roleDAO;\n         this.securityQuestionDAO = securityQuestionDAO;\n-        this.asyncConnectorFacadeExecutor = asyncConnectorFacadeExecutor;\n-        this.propagationTaskExecutorAsyncExecutor = propagationTaskExecutorAsyncExecutor;\n+        this.confParamOps = confParamOps;\n+        this.bundleManager = bundleManager;\n+        this.implLookup = implLookup;\n+        this.taskExecutors = taskExecutors;\n     }\n \n     protected boolean isSelfRegAllowed() {\n@@ -327,53 +221,10 @@ protected void buildPlatform() {\n         synchronized (this) {\n             if (PLATFORM_INFO == null) {\n                 PLATFORM_INFO = new PlatformInfo();\n-                PLATFORM_INFO.setKeymasterConfParamOps(AopUtils.getTargetClass(confParamOps).getName());\n-                PLATFORM_INFO.setKeymasterServiceOps(AopUtils.getTargetClass(serviceOps).getName());\n \n                 PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n                         map(URI::toASCIIString).collect(Collectors.toList()));\n \n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n-                PLATFORM_INFO.getWorkflowInfo().\n-                        setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n-\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAnyObjectProvisioningManager(AopUtils.getTargetClass(aProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setUserProvisioningManager(AopUtils.getTargetClass(uProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setGroupProvisioningManager(AopUtils.getTargetClass(gProvisioningManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setVirAttrCache(AopUtils.getTargetClass(virAttrCache).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setNotificationManager(AopUtils.getTargetClass(notificationManager).getName());\n-                PLATFORM_INFO.getProvisioningInfo().\n-                        setAuditManager(AopUtils.getTargetClass(auditManager).getName());\n-\n-                PLATFORM_INFO.setPasswordGenerator(AopUtils.getTargetClass(passwordGenerator).getName());\n-\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setEntityFactory(AopUtils.getTargetClass(entityFactory).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainSchemaDAO(AopUtils.getTargetClass(plainSchemaDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrDAO(AopUtils.getTargetClass(plainAttrDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setPlainAttrValueDAO(AopUtils.getTargetClass(plainAttrValueDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnySearchDAO(AopUtils.getTargetClass(anySearchDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setUserDAO(AopUtils.getTargetClass(userDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setGroupDAO(AopUtils.getTargetClass(groupDAO).getName());\n-                PLATFORM_INFO.getPersistenceInfo().\n-                        setAnyObjectDAO(AopUtils.getTargetClass(anyObjectDAO).getName());\n-\n                 ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n                     Set<String> classNames = implLookup.getClassNames(typeName);\n                     if (classNames != null) {\n@@ -467,12 +318,8 @@ protected NumbersInfo buildNumbers() {\n         numbersInfo.getConfCompleteness().put(\n                 NumbersInfo.ConfItem.ROLE.name(), numbersInfo.getTotalRoles() > 0);\n \n-        setTaskExecutorInfo(\n-                asyncConnectorFacadeExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getAsyncConnectorExecutor());\n-        setTaskExecutorInfo(\n-                propagationTaskExecutorAsyncExecutor.getThreadPoolExecutor().toString(),\n-                numbersInfo.getPropagationTaskExecutor());\n+        taskExecutors.forEach((name, bean) -> numbersInfo.getTaskExecutorInfos().\n+                put(name, getTaskExecutorInfo(bean.getThreadPoolExecutor().toString())));\n \n         return numbersInfo;\n     }\n@@ -494,11 +341,6 @@ public void contribute(final Info.Builder builder) {\n \n         buildSystem();\n         builder.withDetail(\"system\", SYSTEM_INFO);\n-\n-        builder.withDetail(\"securityProperties\", securityProperties);\n-        builder.withDetail(\"persistenceProperties\", persistenceProperties);\n-        builder.withDetail(\"provisioningProperties\", provisioningProperties);\n-        builder.withDetail(\"logicProperties\", logicProperties);\n     }\n \n     @Override"},{"sha":"19b4ffaa7cd49992ec0d4dae29764f5aa16af734","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -109,12 +109,6 @@ security.digester.invertPositionOfPlainSaltInEncryptionResults=true\n security.digester.invertPositionOfSaltInMessageBeforeDigesting=true\n security.digester.useLenientSaltSizeCheck=true\n \n-#########\n-# Logic #\n-#########\n-\n-logic.enableJDBCAuditAppender=true\n-\n #########\n # Disable CGLib Proxies #\n #########"},{"sha":"1995c1bf82fcb9b0ee05eeac92e0e1b41d66f701","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java","status":"modified","additions":17,"deletions":9,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchClientContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -25,18 +25,20 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n+@EnableConfigurationProperties(ElasticsearchProperties.class)\n @Configuration(proxyBeanMethods = false)\n public class ElasticsearchClientContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ElasticsearchClientFactoryBean elasticsearchClientFactoryBean() {\n+    public ElasticsearchClientFactoryBean elasticsearchClientFactoryBean(final ElasticsearchProperties props) {\n         return new ElasticsearchClientFactoryBean(\n-                List.of(new HttpHost(\"localhost\", 9200, \"http\")));\n+                List.of(new HttpHost(props.getHostname(), props.getPort(), props.getScheme())));\n     }\n \n     @ConditionalOnMissingBean\n@@ -46,20 +48,26 @@ public ElasticsearchUtils elasticsearchUtils(\n             final @Lazy GroupDAO groupDAO,\n             final @Lazy AnyObjectDAO anyObjectDAO) {\n \n-        ElasticsearchUtils utils = new ElasticsearchUtils(userDAO, groupDAO, anyObjectDAO);\n-        utils.setIndexMaxResultWindow(10000);\n-        utils.setRetryOnConflict(5);\n-        utils.setNumberOfShards(1);\n-        utils.setNumberOfReplicas(1);\n-        return utils;\n+        return new ElasticsearchUtils(userDAO, groupDAO, anyObjectDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n     public ElasticsearchIndexManager elasticsearchIndexManager(\n+            final ElasticsearchProperties props,\n             final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {\n \n-        return new ElasticsearchIndexManager(client, elasticsearchUtils);\n+        return new ElasticsearchIndexManager(\n+                client,\n+                elasticsearchUtils,\n+                props.getNumberOfShards(),\n+                props.getNumberOfReplicas());\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ElasticsearchIndexLoader elasticsearchIndexLoader(final ElasticsearchIndexManager indexManager) {\n+        return new ElasticsearchIndexLoader(indexManager);\n     }\n }"},{"sha":"c3fe69d34db21be66f25d4dde78678dfea18134d","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexLoader.java","status":"renamed","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexLoader.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -16,23 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa;\n+package org.apache.syncope.ext.elasticsearch.client;\n \n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.core.Ordered;\n \n-public class DomainIndexLoader implements SyncopeCoreLoader {\n+public class ElasticsearchIndexLoader implements SyncopeCoreLoader {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(DomainIndexLoader.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ElasticsearchIndexLoader.class);\n \n     protected final ElasticsearchIndexManager indexManager;\n \n-    public DomainIndexLoader(final ElasticsearchIndexManager indexManager) {\n+    public ElasticsearchIndexLoader(final ElasticsearchIndexManager indexManager) {\n         this.indexManager = indexManager;\n     }\n \n@@ -44,20 +43,25 @@ public int getOrder() {\n     @Override\n     public void load(final String domain, final DataSource datasource) {\n         try {\n-            if (!indexManager.existsIndex(domain, AnyTypeKind.USER)) {\n-                indexManager.createIndex(domain, AnyTypeKind.USER,\n-                        indexManager.defaultSettings(), indexManager.defaultMapping());\n+            if (!indexManager.existsAnyIndex(domain, AnyTypeKind.USER)) {\n+                indexManager.createAnyIndex(domain, AnyTypeKind.USER,\n+                        indexManager.defaultSettings(), indexManager.defaultAnyMapping());\n             }\n-            if (!indexManager.existsIndex(domain, AnyTypeKind.GROUP)) {\n-                indexManager.createIndex(domain, AnyTypeKind.GROUP,\n-                        indexManager.defaultSettings(), indexManager.defaultMapping());\n+            if (!indexManager.existsAnyIndex(domain, AnyTypeKind.GROUP)) {\n+                indexManager.createAnyIndex(domain, AnyTypeKind.GROUP,\n+                        indexManager.defaultSettings(), indexManager.defaultAnyMapping());\n             }\n-            if (!indexManager.existsIndex(domain, AnyTypeKind.ANY_OBJECT)) {\n-                indexManager.createIndex(domain, AnyTypeKind.ANY_OBJECT,\n-                        indexManager.defaultSettings(), indexManager.defaultMapping());\n+            if (!indexManager.existsAnyIndex(domain, AnyTypeKind.ANY_OBJECT)) {\n+                indexManager.createAnyIndex(domain, AnyTypeKind.ANY_OBJECT,\n+                        indexManager.defaultSettings(), indexManager.defaultAnyMapping());\n+            }\n+\n+            if (!indexManager.existsAuditIndex(domain)) {\n+                indexManager.createAuditIndex(domain,\n+                        indexManager.defaultSettings(), indexManager.defaultAuditMapping());\n             }\n         } catch (Exception e) {\n-            LOG.error(\"While creating index for domain {}\", domain, e);\n+            LOG.error(\"While creating indexes for domain {}\", domain, e);\n         }\n     }\n }","previous_filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainIndexLoader.java"},{"sha":"1a9bc7ad987924b1cfc9c5a6736db8e266d07cd8","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":132,"deletions":26,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -24,7 +24,9 @@\n import co.elastic.clients.elasticsearch._types.analysis.Normalizer;\n import co.elastic.clients.elasticsearch._types.mapping.DynamicTemplate;\n import co.elastic.clients.elasticsearch._types.mapping.KeywordProperty;\n+import co.elastic.clients.elasticsearch._types.mapping.ObjectProperty;\n import co.elastic.clients.elasticsearch._types.mapping.Property;\n+import co.elastic.clients.elasticsearch._types.mapping.TextProperty;\n import co.elastic.clients.elasticsearch._types.mapping.TypeMapping;\n import co.elastic.clients.elasticsearch.core.DeleteRequest;\n import co.elastic.clients.elasticsearch.core.DeleteResponse;\n@@ -34,14 +36,17 @@\n import co.elastic.clients.elasticsearch.indices.CreateIndexResponse;\n import co.elastic.clients.elasticsearch.indices.DeleteIndexRequest;\n import co.elastic.clients.elasticsearch.indices.DeleteIndexResponse;\n+import co.elastic.clients.elasticsearch.indices.ExistsRequest;\n import co.elastic.clients.elasticsearch.indices.IndexSettings;\n import co.elastic.clients.elasticsearch.indices.IndexSettingsAnalysis;\n+import com.fasterxml.jackson.databind.JsonNode;\n import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -58,18 +63,31 @@ public class ElasticsearchIndexManager {\n \n     protected final ElasticsearchUtils elasticsearchUtils;\n \n+    protected final String numberOfShards;\n+\n+    protected final String numberOfReplicas;\n+\n     public ElasticsearchIndexManager(\n             final ElasticsearchClient client,\n-            final ElasticsearchUtils elasticsearchUtils) {\n+            final ElasticsearchUtils elasticsearchUtils,\n+            final String numberOfShards,\n+            final String numberOfReplicas) {\n \n         this.client = client;\n         this.elasticsearchUtils = elasticsearchUtils;\n+        this.numberOfShards = numberOfShards;\n+        this.numberOfReplicas = numberOfReplicas;\n     }\n \n-    public boolean existsIndex(final String domain, final AnyTypeKind kind) throws IOException {\n-        return client.indices().exists(\n-                new co.elastic.clients.elasticsearch.indices.ExistsRequest.Builder().\n-                        index(ElasticsearchUtils.getContextDomainName(domain, kind)).build()).\n+    public boolean existsAnyIndex(final String domain, final AnyTypeKind kind) throws IOException {\n+        return client.indices().exists(new ExistsRequest.Builder().\n+                index(ElasticsearchUtils.getAnyIndex(domain, kind)).build()).\n+                value();\n+    }\n+\n+    public boolean existsAuditIndex(final String domain) throws IOException {\n+        return client.indices().exists(new ExistsRequest.Builder().\n+                index(ElasticsearchUtils.getAuditIndex(domain)).build()).\n                 value();\n     }\n \n@@ -83,12 +101,12 @@ public IndexSettings defaultSettings() throws IOException {\n                                         build()).\n                                 build()).\n                         build()).\n-                numberOfShards(elasticsearchUtils.getNumberOfShards()).\n-                numberOfReplicas(elasticsearchUtils.getNumberOfReplicas()).\n+                numberOfShards(numberOfShards).\n+                numberOfReplicas(numberOfReplicas).\n                 build();\n     }\n \n-    public TypeMapping defaultMapping() throws IOException {\n+    public TypeMapping defaultAnyMapping() throws IOException {\n         return new TypeMapping.Builder().\n                 dynamicTemplates(List.of(Map.of(\n                         \"strings\",\n@@ -101,71 +119,159 @@ public TypeMapping defaultMapping() throws IOException {\n                 build();\n     }\n \n-    protected CreateIndexResponse doCreateIndex(\n+    public TypeMapping defaultAuditMapping() throws IOException {\n+        return new TypeMapping.Builder().\n+                dynamicTemplates(List.of(Map.of(\n+                        \"strings\",\n+                        new DynamicTemplate.Builder().\n+                                matchMappingType(\"string\").\n+                                mapping(new Property.Builder().\n+                                        keyword(new KeywordProperty.Builder().normalizer(\"string_lowercase\").build()).\n+                                        build()).\n+                                build()))).\n+                properties(\n+                        \"message\",\n+                        new Property.Builder().object(new ObjectProperty.Builder().\n+                                properties(\n+                                        \"before\",\n+                                        new Property.Builder().\n+                                                text(new TextProperty.Builder().analyzer(\"standard\").build()).\n+                                                build()).\n+                                properties(\n+                                        \"inputs\",\n+                                        new Property.Builder().\n+                                                text(new TextProperty.Builder().analyzer(\"standard\").build()).\n+                                                build()).\n+                                properties(\n+                                        \"output\",\n+                                        new Property.Builder().\n+                                                text(new TextProperty.Builder().analyzer(\"standard\").build()).\n+                                                build()).\n+                                properties(\n+                                        \"throwable\",\n+                                        new Property.Builder().\n+                                                text(new TextProperty.Builder().analyzer(\"standard\").build()).\n+                                                build()).\n+                                build()).\n+                                build()).\n+                build();\n+    }\n+\n+    protected CreateIndexResponse doCreateAnyIndex(\n             final String domain,\n             final AnyTypeKind kind,\n             final IndexSettings settings,\n             final TypeMapping mappings) throws IOException {\n \n         return client.indices().create(\n                 new CreateIndexRequest.Builder().\n-                        index(ElasticsearchUtils.getContextDomainName(domain, kind)).\n+                        index(ElasticsearchUtils.getAnyIndex(domain, kind)).\n                         settings(settings).\n                         mappings(mappings).\n                         build());\n     }\n \n-    public void createIndex(\n+    public void createAnyIndex(\n             final String domain,\n             final AnyTypeKind kind,\n             final IndexSettings settings,\n             final TypeMapping mappings)\n             throws IOException {\n \n         try {\n-            CreateIndexResponse response = doCreateIndex(domain, kind, settings, mappings);\n+            CreateIndexResponse response = doCreateAnyIndex(domain, kind, settings, mappings);\n \n             LOG.debug(\"Successfully created {} for {}: {}\",\n-                    ElasticsearchUtils.getContextDomainName(domain, kind), kind.name(), response);\n+                    ElasticsearchUtils.getAnyIndex(domain, kind), kind.name(), response);\n         } catch (ElasticsearchException e) {\n             LOG.debug(\"Could not create index {} because it already exists\",\n-                    ElasticsearchUtils.getContextDomainName(domain, kind), e);\n+                    ElasticsearchUtils.getAnyIndex(domain, kind), e);\n \n-            removeIndex(domain, kind);\n-            doCreateIndex(domain, kind, settings, mappings);\n+            removeAnyIndex(domain, kind);\n+            doCreateAnyIndex(domain, kind, settings, mappings);\n         }\n     }\n \n-    public void removeIndex(final String domain, final AnyTypeKind kind) throws IOException {\n+    public void removeAnyIndex(final String domain, final AnyTypeKind kind) throws IOException {\n         DeleteIndexResponse response = client.indices().delete(\n-                new DeleteIndexRequest.Builder().index(ElasticsearchUtils.getContextDomainName(domain, kind)).build());\n-        LOG.debug(\"Successfully removed {}: {}\",\n-                ElasticsearchUtils.getContextDomainName(domain, kind), response);\n+                new DeleteIndexRequest.Builder().index(ElasticsearchUtils.getAnyIndex(domain, kind)).build());\n+        LOG.debug(\"Successfully removed {}: {}\", ElasticsearchUtils.getAnyIndex(domain, kind), response);\n+    }\n+\n+    protected CreateIndexResponse doCreateAuditIndex(\n+            final String domain,\n+            final IndexSettings settings,\n+            final TypeMapping mappings) throws IOException {\n+\n+        return client.indices().create(\n+                new CreateIndexRequest.Builder().\n+                        index(ElasticsearchUtils.getAuditIndex(domain)).\n+                        settings(settings).\n+                        mappings(mappings).\n+                        build());\n+    }\n+\n+    public void createAuditIndex(\n+            final String domain,\n+            final IndexSettings settings,\n+            final TypeMapping mappings)\n+            throws IOException {\n+\n+        try {\n+            CreateIndexResponse response = doCreateAuditIndex(domain, settings, mappings);\n+\n+            LOG.debug(\"Successfully created audit index {}: {}\",\n+                    ElasticsearchUtils.getAuditIndex(domain), response);\n+        } catch (ElasticsearchException e) {\n+            LOG.debug(\"Could not create audit index {} because it already exists\",\n+                    ElasticsearchUtils.getAuditIndex(domain), e);\n+\n+            removeAuditIndex(domain);\n+            doCreateAuditIndex(domain, settings, mappings);\n+        }\n+    }\n+\n+    public void removeAuditIndex(final String domain) throws IOException {\n+        DeleteIndexResponse response = client.indices().delete(\n+                new DeleteIndexRequest.Builder().index(ElasticsearchUtils.getAuditIndex(domain)).build());\n+        LOG.debug(\"Successfully removed {}: {}\", ElasticsearchUtils.getAuditIndex(domain), response);\n     }\n \n     @TransactionalEventListener\n-    public void after(final AnyLifecycleEvent<Any<?>> event) throws IOException {\n+    public void any(final AnyLifecycleEvent<Any<?>> event) throws IOException {\n         LOG.debug(\"About to {} index for {}\", event.getType().name(), event.getAny());\n \n         if (event.getType() == SyncDeltaType.DELETE) {\n             DeleteRequest request = new DeleteRequest.Builder().index(\n-                    ElasticsearchUtils.getContextDomainName(event.getDomain(), event.getAny().getType().getKind())).\n+                    ElasticsearchUtils.getAnyIndex(event.getDomain(), event.getAny().getType().getKind())).\n                     id(event.getAny().getKey()).\n                     build();\n             DeleteResponse response = client.delete(request);\n             LOG.debug(\"Index successfully deleted for {}[{}]: {}\",\n                     event.getAny().getType().getKind(), event.getAny().getKey(), response);\n         } else {\n-            String index = ElasticsearchUtils.getContextDomainName(\n-                    event.getDomain(), event.getAny().getType().getKind());\n-\n             IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n-                    index(index).\n+                    index(ElasticsearchUtils.getAnyIndex(event.getDomain(), event.getAny().getType().getKind())).\n                     id(event.getAny().getKey()).\n                     document(elasticsearchUtils.document(event.getAny(), event.getDomain())).\n                     build();\n             IndexResponse response = client.index(request);\n             LOG.debug(\"Index successfully created or updated for {}: {}\", event.getAny(), response);\n         }\n     }\n+\n+    public void audit(final String domain, final long instant, final JsonNode message)\n+            throws IOException {\n+\n+        LOG.debug(\"About to audit\");\n+\n+        IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n+                index(ElasticsearchUtils.getAuditIndex(domain)).\n+                id(SecureRandomUtils.generateRandomUUID().toString()).\n+                document(elasticsearchUtils.document(instant, message, domain)).\n+                build();\n+        IndexResponse response = client.index(request);\n+\n+        LOG.debug(\"Audit successfully created: {}\", response);\n+    }\n }"},{"sha":"4a86dca7009204e069fffe2da92024b8c7dceaab","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchProperties.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchProperties.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.elasticsearch.client;\n+\n+import org.apache.http.HttpHost;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"elasticsearch\")\n+public class ElasticsearchProperties {\n+\n+    private String hostname = \"localhost\";\n+\n+    private int port = 9200;\n+\n+    private String scheme = HttpHost.DEFAULT_SCHEME_NAME;\n+\n+    private int indexMaxResultWindow = 10000;\n+\n+    private String numberOfShards = \"1\";\n+\n+    private String numberOfReplicas = \"1\";\n+\n+    public String getHostname() {\n+        return hostname;\n+    }\n+\n+    public void setHostname(final String hostname) {\n+        this.hostname = hostname;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(final int port) {\n+        this.port = port;\n+    }\n+\n+    public String getScheme() {\n+        return scheme;\n+    }\n+\n+    public void setScheme(final String scheme) {\n+        this.scheme = scheme;\n+    }\n+\n+    public int getIndexMaxResultWindow() {\n+        return indexMaxResultWindow;\n+    }\n+\n+    public void setIndexMaxResultWindow(final int indexMaxResultWindow) {\n+        this.indexMaxResultWindow = indexMaxResultWindow;\n+    }\n+\n+    public String getNumberOfShards() {\n+        return numberOfShards;\n+    }\n+\n+    public void setNumberOfShards(final String numberOfShards) {\n+        this.numberOfShards = numberOfShards;\n+    }\n+\n+    public String getNumberOfReplicas() {\n+        return numberOfReplicas;\n+    }\n+\n+    public void setNumberOfReplicas(final String numberOfReplicas) {\n+        this.numberOfReplicas = numberOfReplicas;\n+    }\n+}"},{"sha":"7421d0fc26011e5b704ae4c2d70a9805fbc5acb0","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":33,"deletions":41,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.ext.elasticsearch.client;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -47,62 +48,30 @@\n  */\n public class ElasticsearchUtils {\n \n-    public static String getContextDomainName(final String domain, final AnyTypeKind kind) {\n+    public static String getAnyIndex(final String domain, final AnyTypeKind kind) {\n         return domain.toLowerCase() + '_' + kind.name().toLowerCase();\n     }\n \n+    public static String getAuditIndex(final String domain) {\n+        return domain.toLowerCase() + \"_audit\";\n+    }\n+\n     protected final UserDAO userDAO;\n \n     protected final GroupDAO groupDAO;\n \n     protected final AnyObjectDAO anyObjectDAO;\n \n-    protected int indexMaxResultWindow = 10000;\n-\n-    protected int retryOnConflict = 5;\n-\n-    protected String numberOfShards = \"1\";\n-\n-    protected String numberOfReplicas = \"1\";\n+    public ElasticsearchUtils(\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n \n-    public ElasticsearchUtils(final UserDAO userDAO, final GroupDAO groupDAO, final AnyObjectDAO anyObjectDAO) {\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n         this.anyObjectDAO = anyObjectDAO;\n     }\n \n-    public void setIndexMaxResultWindow(final int indexMaxResultWindow) {\n-        this.indexMaxResultWindow = indexMaxResultWindow;\n-    }\n-\n-    public int getIndexMaxResultWindow() {\n-        return indexMaxResultWindow;\n-    }\n-\n-    public void setRetryOnConflict(final int retryOnConflict) {\n-        this.retryOnConflict = retryOnConflict;\n-    }\n-\n-    public int getRetryOnConflict() {\n-        return retryOnConflict;\n-    }\n-\n-    public String getNumberOfShards() {\n-        return numberOfShards;\n-    }\n-\n-    public void setNumberOfShards(final int numberOfShards) {\n-        this.numberOfShards = String.valueOf(numberOfShards);\n-    }\n-\n-    public String getNumberOfReplicas() {\n-        return numberOfReplicas;\n-    }\n-\n-    public void setNumberOfReplicas(final int numberOfReplicas) {\n-        this.numberOfReplicas = String.valueOf(numberOfReplicas);\n-    }\n-\n     /**\n      * Returns the document specialized with content from the provided any.\n      *\n@@ -254,4 +223,27 @@ protected void customizeDocument(\n     protected void customizeDocument(final Map<String, Object> builder, final User user, final String domain)\n             throws IOException {\n     }\n+\n+    public Map<String, Object> document(\n+            final long instant,\n+            final JsonNode message,\n+            final String domain) throws IOException {\n+\n+        Map<String, Object> builder = new HashMap<>();\n+\n+        builder.put(\"instant\", instant);\n+        builder.put(\"message\", message);\n+\n+        customizeDocument(builder, instant, message, domain);\n+\n+        return builder;\n+    }\n+\n+    protected void customizeDocument(\n+            final Map<String, Object> builder,\n+            final long instant,\n+            final JsonNode message,\n+            final String domain)\n+            throws IOException {\n+    }\n }"},{"sha":"50b986fe93dcc40edecad8263119a27089e390a5","filename":"ext/elasticsearch/logic/pom.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Flogic%2Fpom.xml?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-elasticsearch</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Ext: Elasticsearch Logic</name>\n+  <description>Apache Syncope Ext: Elasticsearch Logic</description>\n+  <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+  <artifactId>syncope-ext-elasticsearch-logic</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core.idrepo</groupId>\n+      <artifactId>syncope-core-idrepo-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+      <artifactId>syncope-ext-elasticsearch-client</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"5787e220acc8a604b2021703d221693fdd82d3f7","filename":"ext/elasticsearch/logic/src/main/java/org/apache/syncope/core/logic/audit/ElasticsearchAppender.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.audit;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.Serializable;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.Layout;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.config.Property;\n+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n+\n+public class ElasticsearchAppender extends AbstractAppender {\n+\n+    public static class Builder extends AbstractAppender.Builder<Builder>\n+            implements org.apache.logging.log4j.core.util.Builder<ElasticsearchAppender> {\n+\n+        private ElasticsearchIndexManager elasticsearchIndexManager;\n+\n+        private String domain;\n+\n+        public ElasticsearchAppender.Builder setDomain(final String domain) {\n+            this.domain = domain;\n+            return this;\n+        }\n+\n+        public ElasticsearchAppender.Builder setIndexManager(\n+                final ElasticsearchIndexManager elasticsearchIndexManager) {\n+\n+            this.elasticsearchIndexManager = elasticsearchIndexManager;\n+            return this;\n+        }\n+\n+        @Override\n+        public ElasticsearchAppender build() {\n+            if (domain == null || elasticsearchIndexManager == null) {\n+                LOGGER.error(\"Cannot create ElasticsearchAppender without Domain or IndexManager.\");\n+                return null;\n+            }\n+            return new ElasticsearchAppender(\n+                    getName(), getFilter(), getLayout(), isIgnoreExceptions(), domain, elasticsearchIndexManager);\n+        }\n+    }\n+\n+    @PluginBuilderFactory\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    private final String domain;\n+\n+    protected final ElasticsearchIndexManager elasticsearchIndexManager;\n+\n+    protected ElasticsearchAppender(\n+            final String name,\n+            final Filter filter,\n+            final Layout<? extends Serializable> layout,\n+            final boolean ignoreExceptions,\n+            final String domain,\n+            final ElasticsearchIndexManager elasticsearchIndexManager) {\n+\n+        super(name, filter, layout, ignoreExceptions, Property.EMPTY_ARRAY);\n+        this.domain = domain;\n+        this.elasticsearchIndexManager = elasticsearchIndexManager;\n+    }\n+\n+    @Override\n+    public void append(final LogEvent event) {\n+        try {\n+            elasticsearchIndexManager.audit(\n+                    domain,\n+                    event.getTimeMillis(),\n+                    POJOHelper.deserialize(event.getMessage().getFormattedMessage(), JsonNode.class));\n+        } catch (Exception e) {\n+            LOGGER.error(\"While requesting to index event for appender [{}]\", getName(), e);\n+        }\n+    }\n+}"},{"sha":"33ad815f143aa5d7c397eba5b02eb82ede4e0c99","filename":"ext/elasticsearch/logic/src/main/java/org/apache/syncope/core/logic/audit/ElasticsearchAuditAppender.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.audit;\n+\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n+\n+public class ElasticsearchAuditAppender extends DefaultAuditAppender {\n+\n+    public ElasticsearchAuditAppender(final String domain, final ElasticsearchIndexManager elasticsearchIndexManager) {\n+        super(domain);\n+\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n+\n+        targetAppender = Optional.ofNullable(logCtx.getConfiguration().<Appender>getAppender(getTargetAppenderName())).\n+                orElseGet(() -> {\n+                    ElasticsearchAppender a = ElasticsearchAppender.newBuilder().\n+                            setName(getTargetAppenderName()).\n+                            setIgnoreExceptions(false).\n+                            setDomain(domain).\n+                            setIndexManager(elasticsearchIndexManager).\n+                            build();\n+                    a.start();\n+                    logCtx.getConfiguration().addAppender(a);\n+                    return a;\n+                });\n+    }\n+\n+    @Override\n+    public String getTargetAppenderName() {\n+        return \"audit_for_\" + domain;\n+    }\n+}"},{"sha":"09df992c1a19ee26758ceba94976a826d913dbf0","filename":"ext/elasticsearch/logic/src/main/java/org/apache/syncope/core/logic/audit/ElasticsearchLogicContext.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FElasticsearchLogicContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.audit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.IdRepoLogicContext;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@AutoConfigureBefore(IdRepoLogicContext.class)\n+@Configuration(proxyBeanMethods = false)\n+public class ElasticsearchLogicContext {\n+\n+    @ConditionalOnMissingBean(name = { \"defaultAuditAppenders\", \"elasticsearchDefaultAuditAppenders\" })\n+    @Bean\n+    public List<AuditAppender> defaultAuditAppenders(\n+            final DomainHolder domainHolder,\n+            final ElasticsearchIndexManager elasticsearchIndexManager) {\n+\n+        List<AuditAppender> auditAppenders = new ArrayList<>();\n+\n+        LoggerContext logCtx = (LoggerContext) LogManager.getContext(false);\n+        domainHolder.getDomains().forEach((domain, dataSource) -> {\n+            AuditAppender appender = new ElasticsearchAuditAppender(domain, elasticsearchIndexManager);\n+\n+            LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(domain), null, false);\n+            logConf.addAppender(appender.getTargetAppender(), Level.DEBUG, null);\n+            logConf.setLevel(Level.DEBUG);\n+            logCtx.getConfiguration().addLogger(logConf.getName(), logConf);\n+\n+            auditAppenders.add(appender);\n+        });\n+\n+        return auditAppenders;\n+    }\n+}"},{"sha":"ca8f2cb4bd5276d7f3b45b4714823840cf5bb99c","filename":"ext/elasticsearch/logic/src/main/resources/META-INF/spring.factories","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.logic.audit.ElasticsearchLogicContext"},{"sha":"88e9e1e1609b93266a56b00bae8f91336411bd17","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/ElasticsearchPersistenceContext.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -30,8 +31,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO;\n-import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n-import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAuditConfDAO;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchProperties;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -40,15 +41,10 @@\n @Configuration(proxyBeanMethods = false)\n public class ElasticsearchPersistenceContext {\n \n-    @ConditionalOnMissingBean\n-    @Bean\n-    public DomainIndexLoader domainIndexLoader(final ElasticsearchIndexManager indexManager) {\n-        return new DomainIndexLoader(indexManager);\n-    }\n-\n     @ConditionalOnMissingBean(name = \"elasticsearchAnySearchDAO\")\n     @Bean\n     public AnySearchDAO anySearchDAO(\n+            final ElasticsearchProperties props,\n             final RealmDAO realmDAO,\n             final @Lazy DynRealmDAO dynRealmDAO,\n             final @Lazy UserDAO userDAO,\n@@ -58,8 +54,7 @@ public AnySearchDAO anySearchDAO(\n             final EntityFactory entityFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainAttrValidationManager validator,\n-            final ElasticsearchClient client,\n-            final @Lazy ElasticsearchUtils elasticsearchUtils) {\n+            final ElasticsearchClient client) {\n \n         return new ElasticsearchAnySearchDAO(\n                 realmDAO,\n@@ -72,6 +67,15 @@ public AnySearchDAO anySearchDAO(\n                 anyUtilsFactory,\n                 validator,\n                 client,\n-                elasticsearchUtils);\n+                props.getIndexMaxResultWindow());\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"elasticsearchAuditConfDAO\")\n+    @Bean\n+    public AuditConfDAO auditConfDAO(\n+            final ElasticsearchProperties props,\n+            final ElasticsearchClient client) {\n+\n+        return new ElasticsearchAuditConfDAO(client, props.getIndexMaxResultWindow());\n     }\n }"},{"sha":"b7cb0c09c42a8df3757b4a11d17be767c0c87a66","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -106,7 +106,7 @@ protected static String escapeForLikeRegex(final char c) {\n \n     protected final ElasticsearchClient client;\n \n-    protected final ElasticsearchUtils elasticsearchUtils;\n+    protected final int indexMaxResultWindow;\n \n     public ElasticsearchAnySearchDAO(\n             final RealmDAO realmDAO,\n@@ -119,7 +119,7 @@ public ElasticsearchAnySearchDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainAttrValidationManager validator,\n             final ElasticsearchClient client,\n-            final ElasticsearchUtils elasticsearchUtils) {\n+            final int indexMaxResultWindow) {\n \n         super(\n                 realmDAO,\n@@ -133,7 +133,7 @@ public ElasticsearchAnySearchDAO(\n                 validator);\n \n         this.client = client;\n-        this.elasticsearchUtils = elasticsearchUtils;\n+        this.indexMaxResultWindow = indexMaxResultWindow;\n     }\n \n     protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter(\n@@ -237,7 +237,7 @@ protected int doCount(\n             final AnyTypeKind kind) {\n \n         CountRequest request = new CountRequest.Builder().\n-                index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), kind)).\n                 query(getQuery(base, recursive, adminRealms, cond, kind)).\n                 build();\n         try {\n@@ -298,11 +298,11 @@ protected <T extends Any<?>> List<T> doSearch(\n             final AnyTypeKind kind) {\n \n         SearchRequest request = new SearchRequest.Builder().\n-                index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), kind)).\n                 searchType(SearchType.QueryThenFetch).\n                 query(getQuery(base, recursive, adminRealms, cond, kind)).\n                 from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n-                size(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage).\n+                size(itemsPerPage < 0 ? indexMaxResultWindow : itemsPerPage).\n                 sort(sortBuilders(kind, orderBy)).\n                 build();\n "},{"sha":"4746205ae2e12c8a66bd6c867c989437df708688","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAuditConfDAO.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAuditConfDAO.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import co.elastic.clients.elasticsearch._types.FieldSort;\n+import co.elastic.clients.elasticsearch._types.SearchType;\n+import co.elastic.clients.elasticsearch._types.SortOptions;\n+import co.elastic.clients.elasticsearch._types.SortOrder;\n+import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n+import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n+import co.elastic.clients.elasticsearch.core.CountRequest;\n+import co.elastic.clients.elasticsearch.core.SearchRequest;\n+import co.elastic.clients.elasticsearch.core.search.Hit;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.springframework.util.CollectionUtils;\n+\n+public class ElasticsearchAuditConfDAO extends JPAAuditConfDAO {\n+\n+    protected final ElasticsearchClient client;\n+\n+    protected final int indexMaxResultWindow;\n+\n+    public ElasticsearchAuditConfDAO(final ElasticsearchClient client, final int indexMaxResultWindow) {\n+        this.client = client;\n+        this.indexMaxResultWindow = indexMaxResultWindow;\n+    }\n+\n+    protected Query getQuery(\n+            final String entityKey,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result) {\n+\n+        List<Query> queries = new ArrayList<>();\n+\n+        if (entityKey != null) {\n+            queries.add(new Query.Builder().\n+                    multiMatch(QueryBuilders.multiMatch().\n+                            fields(\"message.before\", \"message.inputs\", \"message.output\", \"message.throwable\").\n+                            query(entityKey).build()).build());\n+        }\n+\n+        if (type != null) {\n+            queries.add(new Query.Builder().\n+                    term(QueryBuilders.term().field(\"message.logger.type\").value(type.name()).build()).\n+                    build());\n+        }\n+\n+        if (StringUtils.isNotBlank(category)) {\n+            queries.add(new Query.Builder().\n+                    term(QueryBuilders.term().field(\"message.logger.category\").value(category).build()).\n+                    build());\n+        }\n+\n+        if (StringUtils.isNotBlank(subcategory)) {\n+            queries.add(new Query.Builder().\n+                    term(QueryBuilders.term().field(\"message.logger.subcategory\").value(subcategory).build()).\n+                    build());\n+        }\n+\n+        List<Query> eventQueries = events.stream().map(event -> new Query.Builder().\n+                term(QueryBuilders.term().field(\"message.logger.event\").value(event).build()).\n+                build()).\n+                collect(Collectors.toList());\n+        if (!eventQueries.isEmpty()) {\n+            queries.add(new Query.Builder().disMax(QueryBuilders.disMax().queries(eventQueries).build()).build());\n+        }\n+\n+        if (result != null) {\n+            queries.add(new Query.Builder().\n+                    term(QueryBuilders.term().field(\"message.logger.result\").value(result.name()).build()).\n+                    build());\n+        }\n+\n+        return new Query.Builder().bool(QueryBuilders.bool().must(queries).build()).build();\n+    }\n+\n+    @Override\n+    public int countEntries(\n+            final String entityKey,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result) {\n+\n+        CountRequest request = new CountRequest.Builder().\n+                index(ElasticsearchUtils.getAuditIndex(AuthContextUtils.getDomain())).\n+                query(getQuery(entityKey, type, category, subcategory, events, result)).\n+                build();\n+        try {\n+            return (int) client.count(request).count();\n+        } catch (IOException e) {\n+            LOG.error(\"Search error\", e);\n+            return 0;\n+        }\n+    }\n+\n+    protected List<SortOptions> sortBuilders(final List<OrderByClause> orderBy) {\n+        return orderBy.stream().map(clause -> {\n+            String sortField = clause.getField();\n+            if (\"EVENT_DATE\".equalsIgnoreCase(sortField)) {\n+                sortField = \"message.date\";\n+            }\n+\n+            return new SortOptions.Builder().field(\n+                    new FieldSort.Builder().\n+                            field(sortField).\n+                            order(clause.getDirection() == OrderByClause.Direction.ASC\n+                                    ? SortOrder.Asc : SortOrder.Desc).\n+                            build()).\n+                    build();\n+        }).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public List<AuditEntry> searchEntries(\n+            final String entityKey,\n+            final int page,\n+            final int itemsPerPage,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result,\n+            final List<OrderByClause> orderBy) {\n+\n+        SearchRequest request = new SearchRequest.Builder().\n+                index(ElasticsearchUtils.getAuditIndex(AuthContextUtils.getDomain())).\n+                searchType(SearchType.QueryThenFetch).\n+                query(getQuery(entityKey, type, category, subcategory, events, result)).\n+                from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n+                size(itemsPerPage < 0 ? indexMaxResultWindow : itemsPerPage).\n+                sort(sortBuilders(orderBy)).\n+                build();\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Hit<Map>> esResult = null;\n+        try {\n+            esResult = client.search(request, Map.class).hits().hits();\n+        } catch (Exception e) {\n+            LOG.error(\"While searching in Elasticsearch\", e);\n+        }\n+\n+        return CollectionUtils.isEmpty(esResult)\n+                ? List.of()\n+                : esResult.stream().\n+                        map(hit -> POJOHelper.convertValue(hit.source().get(\"message\"), AuditEntry.class)).\n+                        filter(Objects::nonNull).collect(Collectors.toList());\n+    }\n+}"},{"sha":"2145da00ac76b07dbdaadf3775f2d3bb3a2818b1","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -54,9 +54,9 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n@@ -81,12 +81,24 @@ public class ElasticsearchAnySearchDAOTest {\n     @Mock\n     private AnyUtilsFactory anyUtilsFactory;\n \n-    @Mock\n-    private ElasticsearchUtils elasticsearchUtils;\n-\n-    @InjectMocks\n     private ElasticsearchAnySearchDAO searchDAO;\n \n+    @BeforeEach\n+    protected void setupSearchDAO() {\n+        searchDAO = new ElasticsearchAnySearchDAO(\n+                realmDAO,\n+                dynRealmDAO,\n+                null,\n+                groupDAO,\n+                null,\n+                null,\n+                entityFactory,\n+                anyUtilsFactory,\n+                null,\n+                null,\n+                10000);\n+    }\n+\n     @Test\n     public void getAdminRealmsFilter4realm() throws IOException {\n         // 1. mock\n@@ -152,7 +164,7 @@ public void searchRequest4groupOwner() throws IOException {\n         when(groupDAO.findKey(\"groupKey\")).thenReturn(\"groupKey\");\n \n         try (MockedStatic<ElasticsearchUtils> utils = Mockito.mockStatic(ElasticsearchUtils.class)) {\n-            utils.when(() -> ElasticsearchUtils.getContextDomainName(\n+            utils.when(() -> ElasticsearchUtils.getAnyIndex(\n                     SyncopeConstants.MASTER_DOMAIN, AnyTypeKind.USER)).thenReturn(\"master_user\");\n \n             // 2. test\n@@ -162,7 +174,7 @@ public void searchRequest4groupOwner() throws IOException {\n             anyCond.setSchema(\"id\");\n \n             SearchRequest request = new SearchRequest.Builder().\n-                    index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n+                    index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                     searchType(SearchType.QueryThenFetch).\n                     query(searchDAO.getQuery(realmDAO.findByFullPath(\"/any\"), true,\n                             adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER))."},{"sha":"a9dcf7e5324d17f6cf52f9c4328a1f009e80a991","filename":"ext/elasticsearch/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpom.xml?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -41,6 +41,7 @@ under the License.\n     <module>client-elasticsearch</module>\n     <module>persistence-jpa</module>\n     <module>provisioning-java</module>\n+    <module>logic</module>\n   </modules>\n \n </project>"},{"sha":"8addb804ef6ced72b8584bb969e620a037f59ebc","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -74,16 +74,24 @@ protected IndexSettings anyObjectSettings() throws IOException {\n         return indexManager.defaultSettings();\n     }\n \n+    protected IndexSettings auditSettings() throws IOException {\n+        return indexManager.defaultSettings();\n+    }\n+\n     protected TypeMapping userMapping() throws IOException {\n-        return indexManager.defaultMapping();\n+        return indexManager.defaultAnyMapping();\n     }\n \n     protected TypeMapping groupMapping() throws IOException {\n-        return indexManager.defaultMapping();\n+        return indexManager.defaultAnyMapping();\n     }\n \n     protected TypeMapping anyObjectMapping() throws IOException {\n-        return indexManager.defaultMapping();\n+        return indexManager.defaultAnyMapping();\n+    }\n+\n+    protected TypeMapping auditMapping() throws IOException {\n+        return indexManager.defaultAuditMapping();\n     }\n \n     @Override\n@@ -94,21 +102,20 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n             LOG.debug(\"Start rebuilding indexes\");\n \n             try {\n-                indexManager.createIndex(\n+                indexManager.createAnyIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.USER, userSettings(), userMapping());\n \n-                indexManager.createIndex(\n+                indexManager.createAnyIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP, groupSettings(), groupMapping());\n \n-                indexManager.createIndex(\n+                indexManager.createAnyIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT, anyObjectSettings(), anyObjectMapping());\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String user : userDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n-                                index(ElasticsearchUtils.getContextDomainName(\n-                                        AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n+                                index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                                 id(user).\n                                 document(utils.document(userDAO.find(user), AuthContextUtils.getDomain())).\n                                 build();\n@@ -125,8 +132,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String group : groupDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n-                                index(ElasticsearchUtils.getContextDomainName(\n-                                        AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n+                                index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n                                 id(group).\n                                 document(utils.document(groupDAO.find(group), AuthContextUtils.getDomain())).\n                                 build();\n@@ -143,7 +149,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (String anyObject : anyObjectDAO.findAllKeys(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest<Map<String, Object>> request = new IndexRequest.Builder<Map<String, Object>>().\n-                                index(ElasticsearchUtils.getContextDomainName(\n+                                index(ElasticsearchUtils.getAnyIndex(\n                                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n                                 id(anyObject).\n                                 document(utils.document(anyObjectDAO.find(anyObject), AuthContextUtils.getDomain())).\n@@ -157,6 +163,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                     }\n                 }\n \n+                indexManager.createAuditIndex(\n+                        AuthContextUtils.getDomain(), auditSettings(), auditMapping());\n+\n                 LOG.debug(\"Rebuild indexes for domain {} successfully completed\", AuthContextUtils.getDomain());\n             } catch (Exception e) {\n                 throw new JobExecutionException(\"While rebuilding index for domain \" + AuthContextUtils.getDomain(), e);"},{"sha":"2db98ef49dcfb47467ddc729bca266897842f43f","filename":"fit/core-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -497,6 +497,11 @@ under the License.\n       </properties>\n \n       <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+          <artifactId>syncope-ext-elasticsearch-logic</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n         <dependency>\n           <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n           <artifactId>syncope-ext-elasticsearch-provisioning-java</artifactId>\n@@ -535,6 +540,7 @@ under the License.\n                       <cluster.name>elasticsearch</cluster.name>\n                       <xpack.security.enabled>false</xpack.security.enabled>\n                       <ingest.geoip.downloader.enabled>false</ingest.geoip.downloader.enabled>\n+                      <ES_JAVA_OPTS>-Xms750m -Xmx750m</ES_JAVA_OPTS>\n                     </env>\n                     <ports>\n                       <port>9200:9200</port>"},{"sha":"29eead687e517b4eb0838038e378677536fdc218","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CoreReferenceContext.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCoreReferenceContext.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.logic.IdRepoLogicContext;\n import org.apache.syncope.core.logic.TaskLogic;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -59,4 +61,14 @@ public ImplementationLookup implementationLookup(\n \n         return new ITImplementationLookup(uwf, anySearchDAO, enableFlowableForTestUsers, elasticsearchInit);\n     }\n+\n+    @Bean\n+    public AuditAppender testFileAuditAppender() {\n+        return new TestFileAuditAppender(SyncopeConstants.MASTER_DOMAIN);\n+    }\n+\n+    @Bean\n+    public AuditAppender testFileRewriteAuditAppender() {\n+        return new TestFileRewriteAuditAppender(SyncopeConstants.MASTER_DOMAIN);\n+    }\n }"},{"sha":"feffedfb01cd8c29cb8594f3fc946fbd0eae81a5","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -125,9 +125,6 @@ public class ITImplementationLookup implements ImplementationLookup {\n                     DummyPushCorrelationRuleConf.class, DummyPushCorrelationRule.class,\n                     DefaultPushCorrelationRuleConf.class, DefaultPushCorrelationRule.class);\n \n-    private static final Set<Class<?>> AUDITAPPENDER_CLASSES =\n-            Set.of(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class);\n-\n     private static final Set<Class<?>> PROVISION_SORTER_CLASSES =\n             Set.of(DefaultProvisionSorter.class);\n \n@@ -216,10 +213,6 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(TestNotificationRecipientsProvider.class.getName());\n             put(IdRepoImplementationType.RECIPIENTS_PROVIDER, classNames);\n \n-            classNames = ITImplementationLookup.AUDITAPPENDER_CLASSES.stream().\n-                    map(Class::getName).collect(Collectors.toSet());\n-            put(IdRepoImplementationType.AUDIT_APPENDER, classNames);\n-\n             classNames = ITImplementationLookup.PROVISION_SORTER_CLASSES.stream().\n                     map(Class::getName).collect(Collectors.toSet());\n             put(IdMImplementationType.PROVISION_SORTER, classNames);\n@@ -327,9 +320,4 @@ public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n \n         return PUSH_CR_CLASSES.get(pushCorrelationRuleConfClass);\n     }\n-\n-    @Override\n-    public Set<Class<?>> getAuditAppenderClasses() {\n-        return AUDITAPPENDER_CLASSES;\n-    }\n }"},{"sha":"6918b73bc24786cfb11bbf52d044965191f62640","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/SyslogRewriteAuditAppender.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -32,6 +32,19 @@\n \n public class SyslogRewriteAuditAppender extends DefaultRewriteAuditAppender {\n \n+    public SyslogRewriteAuditAppender(final String domain) {\n+        super(domain);\n+\n+        targetAppender = SyslogAppender.newSyslogAppenderBuilder().\n+                setName(getTargetAppenderName()).\n+                setHost(\"localhost\").\n+                setPort(514).\n+                setProtocol(Protocol.UDP).\n+                setLayout(PatternLayout.newBuilder().withPattern(\"%d{ISO8601} %-5level %logger - %msg%n\").build()).\n+                setFacility(Facility.LOCAL1).\n+                build();\n+    }\n+\n     @Override\n     public Set<AuditLoggerName> getEvents() {\n         Set<AuditLoggerName> events = new HashSet<>();\n@@ -56,18 +69,6 @@ public Set<AuditLoggerName> getEvents() {\n         return events;\n     }\n \n-    @Override\n-    protected void initTargetAppender() {\n-        targetAppender = SyslogAppender.newSyslogAppenderBuilder().\n-                setName(getTargetAppenderName()).\n-                setHost(\"localhost\").\n-                setPort(514).\n-                setProtocol(Protocol.UDP).\n-                setLayout(PatternLayout.newBuilder().withPattern(\"%d{ISO8601} %-5level %logger - %msg%n\").build()).\n-                setFacility(Facility.LOCAL1).\n-                build();\n-    }\n-\n     @Override\n     public String getTargetAppenderName() {\n         return \"audit_for_\" + domain + \"_syslog\";"},{"sha":"ab542ffe18a33797f02121e41813b888c4c75c01","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -35,26 +35,9 @@\n \n public class TestFileAuditAppender extends DefaultAuditAppender {\n \n-    @Override\n-    public Set<AuditLoggerName> getEvents() {\n-        Set<AuditLoggerName> events = new HashSet<>();\n-        events.add(new AuditLoggerName(\n-                AuditElements.EventCategoryType.LOGIC,\n-                ResourceLogic.class.getSimpleName(),\n-                null,\n-                \"create\",\n-                AuditElements.Result.SUCCESS));\n-        events.add(new AuditLoggerName(\n-                AuditElements.EventCategoryType.LOGIC,\n-                ConnectorLogic.class.getSimpleName(),\n-                null,\n-                \"update\",\n-                AuditElements.Result.SUCCESS));\n-        return events;\n-    }\n+    public TestFileAuditAppender(final String domain) {\n+        super(domain);\n \n-    @Override\n-    protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n         // get log file path from existing file appender\n         RollingRandomAccessFileAppender main =\n@@ -75,6 +58,24 @@ protected void initTargetAppender() {\n                 build();\n     }\n \n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        Set<AuditLoggerName> events = new HashSet<>();\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"create\",\n+                AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ConnectorLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n+        return events;\n+    }\n+\n     @Override\n     public String getTargetAppenderName() {\n         return \"audit_for_\" + domain + \"_norewrite_file\";"},{"sha":"815bc52faef8b74fbbd367f7157c76d81122a617","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -34,18 +34,9 @@\n \n public class TestFileRewriteAuditAppender extends DefaultRewriteAuditAppender {\n \n-    @Override\n-    public Set<AuditLoggerName> getEvents() {\n-        return Collections.singleton(new AuditLoggerName(\n-                AuditElements.EventCategoryType.LOGIC,\n-                ResourceLogic.class.getSimpleName(),\n-                null,\n-                \"update\",\n-                AuditElements.Result.SUCCESS));\n-    }\n+    public TestFileRewriteAuditAppender(final String domain) {\n+        super(domain);\n \n-    @Override\n-    protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n         // get log file path from existing file appender\n@@ -63,6 +54,16 @@ protected void initTargetAppender() {\n                 build();\n     }\n \n+    @Override\n+    public Set<AuditLoggerName> getEvents() {\n+        return Collections.singleton(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n+    }\n+\n     @Override\n     public String getTargetAppenderName() {\n         return \"audit_for_\" + domain + \"_file\";"},{"sha":"d426e44d978637d302c6855c29f5698251dc304d","filename":"fit/core-reference/src/main/resources/core-elasticsearch.properties","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-elasticsearch.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-elasticsearch.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-elasticsearch.properties?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -15,4 +15,9 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-persistence.anySearchDao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+elasticsearch.hostname=localhost\n+elasticsearch.port=9200\n+elasticsearch.scheme=http\n+elasticsearch.indexMaxResultWindow=10000\n+elasticsearch.numberOfShards=1\n+elasticsearch.numberOfReplicas=1"},{"sha":"d0d0fc45f27277fe6e666067bd725396fb2d3f21","filename":"fit/core-reference/src/main/resources/core-embedded.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -14,6 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+\n+management.endpoints.web.exposure.include=health,info,beans,env,loggers,entityCache\n+\n keymaster.address=http://localhost:9080/syncope/rest/keymaster\n keymaster.username=${anonymousUser}\n keymaster.password=${anonymousKey}"},{"sha":"511d0c1d5e73bdce026d6cc14ede8e0e06978334","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.json.JsonMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\n@@ -49,6 +50,7 @@\n import javax.sql.DataSource;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -385,6 +387,10 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     protected static ImpersonationService IMPERSONATION_SERVICE;\n \n+    protected static boolean IS_FLOWABLE_ENABLED = false;\n+\n+    protected static boolean IS_ELASTICSEARCH_ENABLED = false;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/core.properties\")) {\n@@ -473,6 +479,19 @@ public static void restSetup() {\n         WA_CONFIG_SERVICE = ADMIN_CLIENT.getService(WAConfigService.class);\n     }\n \n+    @BeforeAll\n+    public static void actuatorInfoSetup() throws IOException {\n+        JsonNode beans = JSON_MAPPER.readTree(\n+                (InputStream) WebClient.create(StringUtils.substringBeforeLast(ADDRESS, \"/\") + \"/actuator/beans\").\n+                        accept(MediaType.APPLICATION_JSON).get().getEntity());\n+\n+        JsonNode uwfAdapter = beans.findValues(\"uwfAdapter\").get(0);\n+        IS_FLOWABLE_ENABLED = uwfAdapter.get(\"resource\").asText().contains(\"Flowable\");\n+\n+        JsonNode anySearchDAO = beans.findValues(\"anySearchDAO\").get(0);\n+        IS_ELASTICSEARCH_ENABLED = anySearchDAO.get(\"type\").asText().contains(\"Elasticsearch\");\n+    }\n+\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }\n@@ -943,6 +962,14 @@ protected static AccessPolicyTO buildAccessPolicyTO() {\n     }\n \n     protected static List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         int i = 0;\n         List<AuditEntry> results = List.of();\n         do {"},{"sha":"ca5499f7914ef2289440f0c0575805ba2a416d2a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractUIITCase.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractUIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractUIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractUIITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -22,12 +22,18 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.json.JsonMapper;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.Serializable;\n import java.lang.reflect.Method;\n import java.util.Properties;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -46,6 +52,8 @@ public abstract class AbstractUIITCase {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractUIITCase.class);\n \n+    protected static final JsonMapper JSON_MAPPER = JsonMapper.builder().findAndAddModules().build();\n+\n     protected static final String ADMIN_UNAME = \"admin\";\n \n     protected static final String ADMIN_PWD = \"password\";\n@@ -64,6 +72,10 @@ public abstract class AbstractUIITCase {\n \n     protected static SyncopeService SYNCOPE_SERVICE;\n \n+    protected static boolean IS_FLOWABLE_ENABLED = false;\n+\n+    protected static boolean IS_ELASTICSEARCH_ENABLED = false;\n+            \n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/core.properties\")) {\n@@ -80,6 +92,19 @@ public static void securitySetup() {\n         assertNotNull(ANONYMOUS_KEY);\n     }\n \n+    @BeforeAll\n+    public static void actuatorInfoSetup() throws IOException {\n+        JsonNode beans = JSON_MAPPER.readTree(\n+                (InputStream) WebClient.create(StringUtils.substringBeforeLast(ADDRESS, \"/\") + \"/actuator/beans\").\n+                        accept(MediaType.APPLICATION_JSON).get().getEntity());\n+\n+        JsonNode uwfAdapter = beans.findValues(\"uwfAdapter\").get(0);\n+        IS_FLOWABLE_ENABLED = uwfAdapter.get(\"resource\").asText().contains(\"Flowable\");\n+\n+        JsonNode anySearchDAO = beans.findValues(\"anySearchDAO\").get(0);\n+        IS_ELASTICSEARCH_ENABLED = anySearchDAO.get(\"type\").asText().contains(\"Elasticsearch\");\n+    }\n+\n     protected static <V extends Serializable> Component findComponentByProp(\n             final String property, final String path, final V key) {\n "},{"sha":"c643df552c7915c6d2bcfc69a6f9d55d3ba8467b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ElasticsearchDetector.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FElasticsearchDetector.java?ref=ee88940efc0a256d3c8b5c03151ebfb87d9bf157","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n-\n-public final class ElasticsearchDetector {\n-\n-    public static boolean isElasticSearchEnabled(final PlatformInfo platform) {\n-        return platform.getPersistenceInfo().getAnySearchDAO().contains(\"Elasticsearch\");\n-    }\n-    \n-    private ElasticsearchDetector() {\n-        // private constructor for static utility class\n-    }    \n-}"},{"sha":"a35bd69e400bedda9bca1a30c3151188e4089211","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/FlowableDetector.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee88940efc0a256d3c8b5c03151ebfb87d9bf157/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FFlowableDetector.java?ref=ee88940efc0a256d3c8b5c03151ebfb87d9bf157","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import org.apache.syncope.common.lib.info.PlatformInfo;\n-\n-public final class FlowableDetector {\n-\n-    public static boolean isFlowableEnabledForUserWorkflow(final PlatformInfo platform) {\n-        return platform.getWorkflowInfo().getUserWorkflowAdapter().contains(\"Flowable\");\n-    }\n-\n-    private FlowableDetector() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"27b9e0777180e31078a3b30b272af81210089209","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":50,"deletions":27,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -85,7 +85,14 @@\n \n public class AuditITCase extends AbstractITCase {\n \n-    private AuditEntry queryWithFailure(final AuditQuery query, final int maxWaitSeconds) {\n+    private static AuditConfTO buildAuditConf(final String auditLoggerName, final boolean active) {\n+        AuditConfTO auditConfTO = new AuditConfTO();\n+        auditConfTO.setActive(active);\n+        auditConfTO.setKey(auditLoggerName);\n+        return auditConfTO;\n+    }\n+\n+    private static AuditEntry queryWithFailure(final AuditQuery query, final int maxWaitSeconds) {\n         List<AuditEntry> results = query(query, maxWaitSeconds);\n         if (results.isEmpty()) {\n             fail(\"Timeout when executing query for key \" + query.getEntityKey());\n@@ -392,6 +399,14 @@ public void saveAuditEvent() {\n         auditEntry.setOutput(UUID.randomUUID().toString());\n         assertDoesNotThrow(() -> AUDIT_SERVICE.create(auditEntry));\n \n+        if (IS_ELASTICSEARCH_ENABLED) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         PagedResult<AuditEntry> events = AUDIT_SERVICE.search(new AuditQuery.Builder().\n                 size(1).\n                 type(auditEntry.getLogger().getType()).\n@@ -419,6 +434,14 @@ public void saveAuthEvent() {\n         auditEntry.setOutput(UUID.randomUUID().toString());\n         assertDoesNotThrow(() -> AUDIT_SERVICE.create(auditEntry));\n \n+        if (IS_ELASTICSEARCH_ENABLED) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         PagedResult<AuditEntry> events = AUDIT_SERVICE.search(new AuditQuery.Builder().\n                 size(1).\n                 type(auditEntry.getLogger().getType()).\n@@ -461,15 +484,15 @@ public void customAuditAppender() throws IOException, InterruptedException {\n                     auditFilePath,\n                     content -> content.contains(\n                             \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                                    + \" - This is a static test message\"),\n+                            + \" - This is a static test message\"),\n                     10);\n \n             // nothing expected in audit_for_Master_norewrite_file.log instead\n             checkLogFileFor(\n                     auditNoRewriteFilePath,\n                     content -> !content.contains(\n                             \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                                    + \" - This is a static test message\"),\n+                            + \" - This is a static test message\"),\n                     10);\n         } catch (IOException e) {\n             fail(\"Unable to read/write log files\", e);\n@@ -584,25 +607,32 @@ public void issueSYNCOPE1695() {\n             pullTaskTO.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n             pullTaskTO.setMatchingRule(MatchingRule.UPDATE);\n             pullTaskTO.setUnmatchingRule(UnmatchingRule.ASSIGN);\n-            RECONCILIATION_SERVICE.pull(\n-                    new ReconQuery.Builder(AnyTypeKind.USER.name(), RESOURCE_NAME_LDAP).fiql(\"uid==pullFromLDAP\")\n-                            .build(),\n-                    pullTaskTO);\n+            RECONCILIATION_SERVICE.pull(new ReconQuery.Builder(AnyTypeKind.USER.name(), RESOURCE_NAME_LDAP).\n+                    fiql(\"uid==pullFromLDAP\").build(), pullTaskTO);\n+\n             // update pullTaskTO -> another audit entry\n-            pullFromLDAP = updateUser(new UserUR.Builder(USER_SERVICE.read(\"pullFromLDAP\").getKey())\n-                    .plainAttr(new AttrPatch.Builder(new Attr.Builder(\"ctype\").value(\"abcdef\").build()).build())\n-                    .build()).getEntity();\n+            pullFromLDAP = updateUser(new UserUR.Builder(USER_SERVICE.read(\"pullFromLDAP\").getKey()).\n+                    plainAttr(new AttrPatch.Builder(new Attr.Builder(\"ctype\").value(\"abcdef\").build()).build()).\n+                    build()).getEntity();\n+\n             // search by empty type and category events and get both events on testfromLDAP\n-            assertEquals(2,\n-                    AUDIT_SERVICE.search(new AuditQuery.Builder()\n-                            .entityKey(pullFromLDAP.getKey())\n-                            .page(1)\n-                            .size(10)\n-                            .events(List.of(\n-                                    \"create\", \"update\", \"matchingrule_update\", \"unmatchingrule_assign\",\n-                                    \"unmatchingrule_provision\"))\n-                            .result(AuditElements.Result.SUCCESS)\n-                            .build()).getTotalCount());\n+            if (IS_ELASTICSEARCH_ENABLED) {\n+                try {\n+                    Thread.sleep(2000);\n+                } catch (InterruptedException ex) {\n+                    // ignore\n+                }\n+            }\n+\n+            assertEquals(2, AUDIT_SERVICE.search(new AuditQuery.Builder().\n+                    entityKey(pullFromLDAP.getKey()).\n+                    page(1).\n+                    size(10).\n+                    events(List.of(\n+                            \"create\", \"update\", \"matchingrule_update\", \"unmatchingrule_assign\",\n+                            \"unmatchingrule_provision\")).\n+                    result(AuditElements.Result.SUCCESS).\n+                    build()).getTotalCount());\n         } finally {\n             if (pullFromLDAP != null) {\n                 USER_SERVICE.deassociate(new ResourceDR.Builder()\n@@ -625,11 +655,4 @@ public void issueSYNCOPE1695() {\n             }\n         }\n     }\n-\n-    private static AuditConfTO buildAuditConf(final String auditLoggerName, final boolean active) {\n-        AuditConfTO auditConfTO = new AuditConfTO();\n-        auditConfTO.setActive(active);\n-        auditConfTO.setKey(auditLoggerName);\n-        return auditConfTO;\n-    }\n }"},{"sha":"bc343e50a07bd7245d3dfbdd206a8fecdd3488ea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -77,8 +77,6 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.Test;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n@@ -201,7 +199,7 @@ public void userSearch() {\n         UserService userService2 = CLIENT_FACTORY.create(userTO.getUsername(), \"password123\").\n                 getService(UserService.class);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -503,7 +501,7 @@ public void asGroupOwner() {\n         assertEquals(2, member.getMemberships().size());\n         String memberKey = member.getKey();\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -588,7 +586,7 @@ public void asGroupOwner() {\n \n     @Test\n     public void issueSYNCOPE434() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // 1. create user with group 'groupForWorkflowApproval' \n         // (users with group groupForWorkflowApproval are defined in workflow as subject to approval)"},{"sha":"725d8adaf6e518b49664202ab395f1dd50f253c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -44,7 +43,7 @@ public class BpmnProcessITCase extends AbstractITCase {\n     @BeforeAll\n     public static void findDefault() {\n         assumeFalse(CLIENT_FACTORY.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         BPMN_PROCESS_SERVICE.list().stream().\n                 filter(BpmnProcess::isUserWorkflow).findAny().\n@@ -55,7 +54,7 @@ public static void findDefault() {\n     @BeforeEach\n     public void check() {\n         assumeFalse(CLIENT_FACTORY.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n     }\n \n     @Test"},{"sha":"90cd2be1dde0db8c79f9e62122778896465f7916","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DelegationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -49,7 +49,6 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Test;\n \n public class DelegationITCase extends AbstractITCase {\n@@ -241,7 +240,7 @@ public void operations() {\n         // 3b. search users as rossini with delegation -> SUCCESS\n         int forRossini = rossini.delegatedBy(\"bellini\").getService(UserService.class).search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).getTotalCount();\n-        if (!ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (!IS_ELASTICSEARCH_ENABLED) {\n             assertEquals(forBellini, forRossini);\n         }\n "},{"sha":"7e26cd31dc7fb1448f74425af7650a82f568903e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.client.api.ContentResponse;\n import org.eclipse.jetty.client.util.InputStreamContentProvider;\n@@ -151,7 +150,7 @@ public void delegatedAdmin() {\n             assertNotNull(group);\n             final String groupKey = group.getKey();\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -272,7 +271,7 @@ public void issueSYNCOPE1480() throws Exception {\n             assertNotNull(user.getKey());\n \n             // 4a. check that Elasticsearch index was updated correctly\n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -294,7 +293,7 @@ public void issueSYNCOPE1480() throws Exception {\n             DYN_REALM_SERVICE.update(dynRealm);\n \n             // 6a. check that Elasticsearch index was updated correctly\n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"a859b95b1b302b4afcdabf4f3c3f51ccdb311b88","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -99,7 +99,6 @@\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n@@ -718,7 +717,7 @@ public void aDynMembership() {\n         GroupTO group = createGroup(groupCR).getEntity();\n         assertEquals(fiql, group.getADynMembershipConds().get(PRINTER));\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -945,7 +944,7 @@ public void typeExtensions() {\n \n     @Test\n     public void provisionMembers() throws InterruptedException {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform()));\n+        assumeFalse(IS_ELASTICSEARCH_ENABLED);\n \n         // 1. create group without resources\n         GroupCR groupCR = getBasicSample(\"forProvision\");"},{"sha":"d77bfe5f1a21f19ac1f4f6414953007eb2dd69b1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Test;\n \n public class KeymasterITCase extends AbstractITCase {\n@@ -282,7 +281,7 @@ public void domainCRUD() throws Exception {\n         assertNotNull(user);\n         assertEquals(\"monteverdi\", user.getUsername());\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {"},{"sha":"36ecb8a4602c43fdf52621accfe1a82f7228e780","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -56,7 +56,6 @@\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Test;\n import org.springframework.jdbc.core.JdbcTemplate;\n \n@@ -279,7 +278,7 @@ public void pull() {\n             assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has\n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"a8c729c702b0843f7c99edd56d29a61a130c0271","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -70,7 +70,6 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -208,7 +207,7 @@ public void createResourceAndPull() {\n             assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(status));\n \n             // verify that pulled user is found\n-            if (ElasticsearchDetector.isElasticSearchEnabled(ANONYMOUS_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {"},{"sha":"98aef995e46f36dac3286f46fe045caa544466dc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -109,8 +109,6 @@\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.BeforeAll;\n@@ -194,7 +192,7 @@ public void create() {\n \n     @Test\n     public void fromCSV() throws Exception {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform()));\n+        assumeFalse(IS_ELASTICSEARCH_ENABLED);\n \n         removeTestUsers();\n \n@@ -267,7 +265,7 @@ public void fromCSV() throws Exception {\n             UserTO userTO = USER_SERVICE.read(inUserTO.getKey());\n             assertNotNull(userTO);\n             assertEquals(userName, userTO.getUsername());\n-            assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+            assertEquals(IS_FLOWABLE_ENABLED\n                     ? \"active\" : \"created\", userTO.getStatus());\n             assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttr(\"email\").get().getValues().get(0));\n             assertEquals(\"test9@syncope.apache.org\", userTO.getPlainAttr(\"userId\").get().getValues().get(0));\n@@ -569,7 +567,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n             // 4. pull\n             execProvisioningTask(TASK_SERVICE, TaskType.PULL, pullTask.getKey(), MAX_WAIT_SECONDS, false);\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -1082,7 +1080,7 @@ public void issueSYNCOPE272() {\n \n     @Test\n     public void issueSYNCOPE307() {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform()));\n+        assumeFalse(IS_ELASTICSEARCH_ENABLED);\n \n         UserCR userCR = UserITCase.getUniqueSample(\"s307@apache.org\");\n         userCR.setUsername(\"test0\");"},{"sha":"2be1f8767ce88fb05bab6139e90a63ab47cc0594","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -362,7 +362,6 @@ public void deleteNonEmpty() {\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RealmContains, e.getType());\n-            assertEquals(5, e.getElements().size());\n         }\n     }\n \n@@ -380,25 +379,24 @@ public void propagate() {\n         descendantRealm.getResources().add(RESOURCE_NAME_LDAP_ORGUNIT);\n \n         // 2. check propagation\n-        ProvisioningResult<RealmTO> result = REALM_SERVICE.create(\"/\", realm).readEntity(\n-            new GenericType<>() {\n-            });\n+        ProvisioningResult<RealmTO> result = REALM_SERVICE.create(\"/\", realm).readEntity(new GenericType<>() {\n+        });\n         assertNotNull(result);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, result.getPropagationStatuses().get(0).getResource());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         ProvisioningResult<RealmTO> resultChild = REALM_SERVICE.create(\"/test\", childRealm).readEntity(\n-            new GenericType<>() {\n-            });\n+                new GenericType<>() {\n+        });\n         assertNotNull(resultChild);\n         assertEquals(1, resultChild.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultChild.getPropagationStatuses().get(0).getResource());\n         assertEquals(ExecStatus.SUCCESS, resultChild.getPropagationStatuses().get(0).getStatus());\n \n         ProvisioningResult<RealmTO> resultDescendant = REALM_SERVICE.create(\"/test/child\", descendantRealm).readEntity(\n-            new GenericType<>() {\n-            });\n+                new GenericType<>() {\n+        });\n         assertNotNull(resultDescendant);\n         assertEquals(1, resultDescendant.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultDescendant.getPropagationStatuses().get(0).getResource());"},{"sha":"d28f681cfefc1b75fb0f24b3eecb1f82022b8556","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -59,7 +59,6 @@\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n@@ -178,7 +177,7 @@ public void searchByDynGroup() {\n         GroupTO group = createGroup(groupCR).getEntity();\n         assertNotNull(group);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -236,7 +235,7 @@ public void searchByDynRole() {\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -333,7 +332,7 @@ public void searchByBooleanAnyCond() {\n     public void searchByDate() {\n         CLIENT_FACTORY.create(\"bellini\", \"password\").self();\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -687,7 +686,7 @@ public void issueSYNCOPE980() {\n                     build();\n             updateAnyObject(anyObjectUR);\n \n-            if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (IS_ELASTICSEARCH_ENABLED) {\n                 try {\n                     Thread.sleep(2000);\n                 } catch (InterruptedException ex) {\n@@ -726,7 +725,7 @@ public void issueSYNCOPE1223() {\n         req.getPlainAttrs().add(new AttrPatch.Builder(attr(\"ctype\", \"ou=sample,o=isp\")).build());\n         USER_SERVICE.update(req);\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -791,7 +790,7 @@ public void issueSYNCOPE1417() {\n             USER_SERVICE.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n                     orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"surname\").desc(\"firstname\").build()).build());\n-            if (!ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            if (!IS_ELASTICSEARCH_ENABLED) {\n                 fail();\n             }\n         } catch (SyncopeClientException e) {"},{"sha":"3d563da894ad48cfb5c3b61c7bd234797d11f3b1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -91,7 +91,6 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.apache.syncope.fit.core.reference.TestAccountRuleConf;\n import org.apache.syncope.fit.core.reference.TestPasswordRuleConf;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n@@ -703,7 +702,7 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         UserCR userCR = getUniqueSample(\"createActivate@syncope.apache.org\");\n \n@@ -738,7 +737,7 @@ public void suspendReactivate() {\n         UserTO userTO = createUser(userCR).getEntity();\n \n         assertNotNull(userTO);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+        assertEquals(IS_FLOWABLE_ENABLED\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n \n@@ -774,7 +773,7 @@ public void suspendReactivateOnResource() {\n         userCR.getResources().add(RESOURCE_NAME_LDAP);\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+        assertEquals(IS_FLOWABLE_ENABLED\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n         String userKey = userTO.getKey();"},{"sha":"aa3bf1ed5dcf16caf0b7f62a572c9de84e33a21e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -85,7 +85,6 @@\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.jupiter.api.Test;\n@@ -1066,7 +1065,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n \n     @Test\n     public void issueSYNCOPE391() {\n-        assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform()));\n+        assumeFalse(IS_ELASTICSEARCH_ENABLED);\n \n         // 1. create user on Syncope with null password\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope391@syncope.apache.org\");"},{"sha":"5b3b7cfc841a7a3e3ebe632b7928d5c52a08449f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.common.rest.api.beans.UserRequestQuery;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -56,7 +55,7 @@ public class UserRequestITCase extends AbstractITCase {\n     @BeforeAll\n     public static void loadBpmnProcesses() throws IOException {\n         assumeFalse(CLIENT_FACTORY.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         WebClient.client(BPMN_PROCESS_SERVICE).type(MediaType.APPLICATION_XML_TYPE);\n         BPMN_PROCESS_SERVICE.set(\"directorGroupRequest\",\n@@ -70,7 +69,7 @@ public static void loadBpmnProcesses() throws IOException {\n     @BeforeEach\n     public void check() {\n         assumeFalse(CLIENT_FACTORY.getContentType() == SyncopeClientFactoryBean.ContentType.YAML);\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n     }\n \n     @Test"},{"sha":"c4596e7dad5bbd0073978d16432395ce49b1a859","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -63,8 +63,6 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.ElasticsearchDetector;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -78,7 +76,7 @@ public void selfRegistrationAllowed() {\n \n     @Test\n     public void create() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // 1. self-registration as admin: failure\n         try {\n@@ -100,7 +98,7 @@ public void create() {\n \n     @Test\n     public void createAndApprove() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n@@ -139,7 +137,7 @@ public void createAndApprove() {\n \n     @Test\n     public void createAndUnclaim() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n@@ -232,14 +230,14 @@ public void updateWithoutApproval() {\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(updated);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+        assertEquals(IS_FLOWABLE_ENABLED\n                 ? \"active\" : \"created\", updated.getStatus());\n         assertTrue(updated.getUsername().endsWith(\"XX\"));\n     }\n \n     @Test\n     public void updateWithApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // 1. create user as admin\n         UserTO created = createUser(UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\")).getEntity();\n@@ -303,7 +301,7 @@ public void delete() {\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(deleted);\n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+        assertEquals(IS_FLOWABLE_ENABLED\n                 ? \"deleteApproval\" : null, deleted.getStatus());\n     }\n \n@@ -340,7 +338,7 @@ public void passwordReset() {\n         }\n         anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"Rossi\");\n \n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+        if (IS_ELASTICSEARCH_ENABLED) {\n             try {\n                 Thread.sleep(2000);\n             } catch (InterruptedException ex) {\n@@ -456,7 +454,7 @@ public void mustChangePassword() {\n \n     @Test\n     public void createWithReject() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         UserCR userCR = UserITCase.getUniqueSample(\"createWithReject@syncope.apache.org\");\n         userCR.getResources().add(RESOURCE_NAME_TESTDB);\n@@ -532,7 +530,7 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = USER_REQUEST_SERVICE.listForms(new UserRequestQuery.Builder().build());\n@@ -619,7 +617,7 @@ public void createWithApproval() {\n \n     @Test\n     public void updateApproval() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = USER_REQUEST_SERVICE.listForms(\n@@ -682,7 +680,7 @@ public void updateApproval() {\n \n     @Test\n     public void availableTasks() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         UserTO user = createUser(UserITCase.getUniqueSample(\"availableTasks@apache.org\")).getEntity();\n         assertEquals(\"active\", user.getStatus());\n@@ -696,7 +694,7 @@ public void availableTasks() {\n \n     @Test\n     public void issueSYNCOPE15() {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform()));\n+        assumeTrue(IS_FLOWABLE_ENABLED);\n \n         // read forms *before* any operation\n         PagedResult<UserRequestForm> forms = USER_REQUEST_SERVICE.listForms(new UserRequestQuery.Builder().build());"},{"sha":"5a64570ebc1573e5f2d4b7e48bd00248400f054e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/AuthenticatedITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FAuthenticatedITCase.java?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.fit.FlowableDetector;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.util.tester.FormTester;\n import org.junit.jupiter.api.Test;\n@@ -112,7 +111,7 @@ public void selfUpdate() {\n \n         TESTER.assertRenderedPage(SelfResult.class);\n \n-        assertEquals(FlowableDetector.isFlowableEnabledForUserWorkflow(ADMIN_CLIENT.platform())\n+        assertEquals(IS_FLOWABLE_ENABLED\n                 ? \"active\" : \"created\", USER_SERVICE.read(username).getStatus());\n         assertEquals(newEmail, USER_SERVICE.read(username).getPlainAttr(\"email\").get().getValues().get(0));\n "},{"sha":"dd1a717203cfa8d005743d79a8476e8483b80981","filename":"pom.xml","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -415,7 +415,7 @@ under the License.\n     <bouncycastle.version>1.70</bouncycastle.version>\n     <nimbus-jose-jwt.version>9.25.6</nimbus-jose-jwt.version>\n \n-    <jackson.version>2.14.0-rc2</jackson.version>\n+    <jackson.version>2.14.0-rc3</jackson.version>\n \n     <spring-boot.version>2.7.5</spring-boot.version>\n     <spring-cloud-gateway.version>3.1.4</spring-cloud-gateway.version>\n@@ -432,7 +432,7 @@ under the License.\n \n     <slf4j.version>1.7.36</slf4j.version>\n \n-    <elasticsearch.version>8.4.3</elasticsearch.version>\n+    <elasticsearch.version>8.5.0</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>\n@@ -786,6 +786,12 @@ under the License.\n         <version>${jackson.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>com.fasterxml.woodstox</groupId>\n+        <artifactId>woodstox-core</artifactId>\n+        <version>6.4.0</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-dependencies</artifactId>"},{"sha":"4a0cda5a42424de5d5d244db4504f4b0506f5af0","filename":"src/main/asciidoc/reference-guide/concepts/audit.adoc","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -20,7 +20,8 @@\n \n The audit feature allows to capture <<audit-events,events>> occurring within the <<core>> and to log relevant information\n about them. +\n-By default, events are logged as entries into the `AuditEntry` table of the internal storage.\n+By default, events are logged as entries into the `AuditEntry` table of the internal storage. +\n+Audit events can also be processed differently, for example when using the <<elasticsearch>> extension.\n \n Once events are reported, they can be used as input for external tools.\n \n@@ -36,7 +37,7 @@ except for the admin console <<console-configuration-audit,tooling>>, which is n\n \n ==== Audit Appenders\n \n-In addition to insertions into the `AuditEntry` table, events are also available for custom handling via Audit\n+In addition to default processing, events are also available for custom handling via Audit\n Appenders, based on https://logging.apache.org/log4j/2.x/manual/appenders.html[Apache Log4j 2 Appenders^]. +\n This allows to empower the available implementations or to write new ones in order to route audit messages, with optional\n transformation (rewrite), to files, queues, sockets, syslog, etc."},{"sha":"1c09ec00fea254f78271820324477756124d67b1","filename":"src/main/asciidoc/reference-guide/concepts/extensions.adoc","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fextensions.adoc?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -101,11 +101,11 @@ This extension adds features to all components and layers that are available, an\n \n ==== Elasticsearch\n \n-This extension provides an alternate internal search engine for <<users-groups-and-any-objects>>, requiring an external \n-https://www.elastic.co/[Elasticsearch^] cluster.\n+This extension provides an alternate internal search engine for <<users-groups-and-any-objects>> and <<audit-events>>,\n+requiring an external https://www.elastic.co/[Elasticsearch^] cluster.\n \n [WARNING]\n-This extension supports Elasticsearch server versions starting from 7.x.\n+This extension supports Elasticsearch server versions starting from 8.x.\n \n [TIP]\n As search operations are central for different aspects of the <<provisioning,provisioning process>>, the global"},{"sha":"2b065e14569b0a58cd277fe133455922c9ffa1c5","filename":"src/main/asciidoc/reference-guide/usage/customization.adoc","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f42ea0bb756a82a39d42617a746f8f213b1f3ff8/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc?ref=f42ea0bb756a82a39d42617a746f8f213b1f3ff8","patch":"@@ -358,6 +358,11 @@ Add the following dependencies to `core/pom.xml`:\n \n [source,xml,subs=\"verbatim,attributes\"]\n ----\n+<dependency>\n+  <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n+  <artifactId>syncope-ext-elasticsearch-logic</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n <dependency>\n   <groupId>org.apache.syncope.ext.elasticsearch</groupId>\n   <artifactId>syncope-ext-elasticsearch-provisioning-java</artifactId>\n@@ -370,6 +375,24 @@ Add the following dependencies to `core/pom.xml`:\n </dependency>\n ----\n \n+Create\n+\n+[source]\n+....\n+elasticsearch.hostname=localhost\n+elasticsearch.port=9200\n+elasticsearch.scheme=http\n+elasticsearch.indexMaxResultWindow=10000\n+elasticsearch.numberOfShards=1\n+elasticsearch.numberOfReplicas=1\n+....\n+\n+as `core/src/main/resources/core-elasticsearch.properties`.\n+\n+Do not forget to include `elasticsearch` as \n+https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles.adding-active-profiles[Spring Boot profile^]\n+for the Core application.\n+\n If needed, customize the `@Bean` declarations from\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n https://github.com/apache/syncope/blob/syncope-{docVersion}/ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchClientContext.java[ElasticsearchClientContext^]\n@@ -381,12 +404,12 @@ as explained <<extending-configuration,above>>.\n \n It is also required to initialize the Elasticsearch indexes: add a new Java <<implementations,implementation>> for\n `TASKJOB_DELEGATE` and use `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` as class. +\n-Then, create a new <<tasks-scheduled, schedyled task>>, select the implementation just created as job delegate and execute it.\n+Then, create a new <<tasks-scheduled, scheduled task>>, select the implementation just created as job delegate and execute it.\n \n [TIP]\n The `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` task created above is not meant for\n scheduled execution; rather, it can be run every time you want to blank and re-create the Elasticsearch indexes\n-starting from Syncope's users, groups and any objects.\n+starting from Syncope's internal storage.\n \n [discrete]\n ===== Enable the <<SCIM>> extension"}]}