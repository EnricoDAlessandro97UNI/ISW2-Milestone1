{"sha":"d6083f9bab8ed01b460c151080b383b75196d21f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2MDgzZjliYWI4ZWQwMWI0NjBjMTUxMDgwYjM4M2I3NTE5NmQyMWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-19T13:04:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-19T13:04:16Z"},"message":"[SYNCOPE-362] Added new REST method for enquerying supported ConnId object classes + used such method from admin console to enable / disable related schema mapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1469812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06a951a811d94f714b08c901eb5c31ba0a2cf5fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/06a951a811d94f714b08c901eb5c31ba0a2cf5fc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d6083f9bab8ed01b460c151080b383b75196d21f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6083f9bab8ed01b460c151080b383b75196d21f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6083f9bab8ed01b460c151080b383b75196d21f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6083f9bab8ed01b460c151080b383b75196d21f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"879e8ba046ff4ba16ce578a5045605346ecde502","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/879e8ba046ff4ba16ce578a5045605346ecde502","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/879e8ba046ff4ba16ce578a5045605346ecde502"}],"stats":{"total":669,"additions":427,"deletions":242},"files":[{"sha":"c3082724e656c4bfaba550df0b37f21938d48e83","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.common.to.BulkAction;\r\n import org.apache.syncope.common.to.BulkActionRes;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n@@ -85,18 +86,31 @@ public List<ConnBundleTO> getBundles(final String lang) {\n \r\n     @Override\r\n     public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n-            final boolean showall) {\r\n-        final String queryString = \"?showall=\" + showall;\r\n+            final boolean includeSpecial) {\r\n \r\n-        List<String> response = Arrays.asList(getRestTemplate().postForObject(\r\n-                baseUrl + \"connector/schema/list\" + queryString, connInstanceTO, String[].class));\r\n-        List<SchemaTO> schemaNames = new ArrayList<SchemaTO>();\r\n-        for (String name : response) {\r\n+        List<String> schemaNames = Arrays.asList(getRestTemplate().postForObject(\r\n+                baseUrl + \"connector/schemaNames/list?includeSpecial=\" + includeSpecial,\r\n+                connInstanceTO, String[].class));\r\n+        List<SchemaTO> result = new ArrayList<SchemaTO>(schemaNames.size());\r\n+        for (String name : schemaNames) {\r\n             SchemaTO schemaTO = new SchemaTO();\r\n             schemaTO.setName(name);\r\n-            schemaNames.add(schemaTO);\r\n+            result.add(schemaTO);\r\n         }\r\n-        return schemaNames;\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstanceId,\r\n+            final ConnInstanceTO connInstanceTO) {\r\n+\r\n+        List<String> objectClasses = Arrays.asList(getRestTemplate().postForObject(\r\n+                baseUrl + \"connector/supportedObjectClasses/list\", connInstanceTO, String[].class));\r\n+        List<ConnIdObjectClassTO> result = new ArrayList<ConnIdObjectClassTO>(objectClasses.size());\r\n+        for (String objectClass : objectClasses) {\r\n+            result.add(new ConnIdObjectClassTO(objectClass));\r\n+        }\r\n+        return result;\r\n     }\r\n \r\n     @Override\r"},{"sha":"bd5489d8be3a703d2ae2ff94639dc15fc1c3cf7d","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.to.BulkAction;\r\n import org.apache.syncope.common.to.BulkActionRes;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n@@ -73,13 +74,24 @@ public interface ConnectorService {\n     /**\r\n      * @param connInstanceId connector instance id to be used for schema lookup\r\n      * @param connInstanceTO connector instance object to provide special configuration properties\r\n-     * @param showAll if set to true, special schema names (like '__PASSWORD__') will be included; default is false\r\n+     * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\r\n+     * default is false\r\n      * @return schema names for connector bundle matching the given connector instance id\r\n      */\r\n     @POST\r\n-    @Path(\"{connInstanceId}/schemas\")\r\n+    @Path(\"{connInstanceId}/schemaNames\")\r\n     List<SchemaTO> getSchemaNames(@PathParam(\"connInstanceId\") Long connInstanceId, ConnInstanceTO connInstanceTO,\r\n-            @QueryParam(\"showAll\") @DefaultValue(\"false\") boolean showAll);\r\n+            @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\r\n+\r\n+    /**\r\n+     * @param connInstanceId connector instance id to be used for schema lookup\r\n+     * @param connInstanceTO connector instance object to provide special configuration properties\r\n+     * @return supported object classes for connector bundle matching the given connector instance id\r\n+     */\r\n+    @POST\r\n+    @Path(\"{connInstanceId}/supportedObjectClasses\")\r\n+    List<ConnIdObjectClassTO> getSupportedObjectClasses(@PathParam(\"connInstanceId\") Long connInstanceId,\r\n+            ConnInstanceTO connInstanceTO);\r\n \r\n     /**\r\n      * @param lang language to select property keys, null for default (English).\r"},{"sha":"9778e9639600e9d34b79cc75be46a56a93ba476a","filename":"common/src/main/java/org/apache/syncope/common/to/ConnIdObjectClassTO.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnIdObjectClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnIdObjectClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnIdObjectClassTO.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+/**\n+ * Mimic ConnId's ObjectClass information.\n+ */\n+@XmlRootElement(name = \"connIdObjectClass\")\n+@XmlType\n+public class ConnIdObjectClassTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5802458031138859994L;\n+\n+    @XmlEnum\n+    public enum DefaultType {\n+\n+        ACCOUNT(\"__ACCOUNT__\"),\n+        GROUP(\"__GROUP__\");\n+\n+        private String specialName;\n+\n+        private DefaultType(final String specialName) {\n+            this.specialName = specialName;\n+        }\n+\n+        public String getSpecialName() {\n+            return specialName;\n+        }\n+    }\n+\n+    public static ConnIdObjectClassTO ACCOUNT = new ConnIdObjectClassTO(DefaultType.ACCOUNT.getSpecialName());\n+\n+    public static ConnIdObjectClassTO GROUP = new ConnIdObjectClassTO(DefaultType.GROUP.getSpecialName());\n+\n+    private String type;\n+\n+    public ConnIdObjectClassTO() {\n+    }\n+\n+    public ConnIdObjectClassTO(final String type) {\n+        this.type = type;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"02ccdbbb22e0e8636eb5f512ec60bf5983f73430","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -100,6 +100,7 @@ public enum ConnectorSubCategory {\n         delete,\r\n         getBundles,\r\n         getSchemaNames,\r\n+        getSupportedObjectClasses,\r\n         getConfigurationProperties,\r\n         check,\r\n         readConnectorBean,\r"},{"sha":"ce5eb3757ebd933ee8f87ea0936e94643be4603b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -64,18 +64,6 @@ public ResourceDetailsPanel(final String id, final ResourceTO resourceTO, final\n         super(id);\n         setOutputMarkupId(true);\n \n-        final IModel<List<ConnInstanceTO>> connectors = new LoadableDetachableModel<List<ConnInstanceTO>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n-\n-            @Override\n-            protected List<ConnInstanceTO> load() {\n-                return connRestClient.getAllConnectors();\n-            }\n-        };\n-\n-        connInstanceTO = getConectorInstanceTO(connectors.getObject(), resourceTO);\n-\n         final AjaxTextFieldPanel resourceName = new AjaxTextFieldPanel(\"name\", new ResourceModel(\"name\", \"name\").\n                 getObject(), new PropertyModel<String>(resourceTO, \"name\"));\n \n@@ -157,6 +145,18 @@ protected void onUpdate(final AjaxRequestTarget art) {\n         });\n         add(resetToken);\n \n+        final IModel<List<ConnInstanceTO>> connectors = new LoadableDetachableModel<List<ConnInstanceTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<ConnInstanceTO> load() {\n+                return connRestClient.getAllConnectors();\n+            }\n+        };\n+\n+        connInstanceTO = getConectorInstanceTO(connectors.getObject(), resourceTO);\n+\n         final AjaxDropDownChoicePanel<ConnInstanceTO> conn = new AjaxDropDownChoicePanel<ConnInstanceTO>(\"connector\",\n                 new ResourceModel(\"connector\", \"connector\").getObject(),\n                 new PropertyModel<ConnInstanceTO>(this, \"connInstanceTO\"));\n@@ -204,18 +204,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n      *\n      * @param connectorTOs list of all connectors.\n      * @param resourceTO resource.\n-     * @return selected connector instance. In case of no connectors available return null. In case of new resource\n-     * specification return the first on connector available.\n+     * @return selected connector instance: in case of no connectors available, null; in case of new resource\n+     * specification, the first on connector available\n      */\n     private ConnInstanceTO getConectorInstanceTO(final List<ConnInstanceTO> connectorTOs, final ResourceTO resourceTO) {\n-\n         if (connectorTOs.isEmpty()) {\n-\n             resourceTO.setConnectorId(null);\n             return null;\n-\n         } else {\n-\n             // use the first element as default\n             ConnInstanceTO res = connectorTOs.get(0);\n \n@@ -230,7 +226,6 @@ private ConnInstanceTO getConectorInstanceTO(final List<ConnInstanceTO> connecto\n \n             return res;\n         }\n-\n     }\n \n     /**"},{"sha":"7305898ab03dece513a1584957addd5b333f213a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceMappingPanel.java","status":"modified","additions":80,"deletions":68,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -25,6 +25,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n@@ -143,16 +144,18 @@ public class ResourceMappingPanel extends Panel {\n      */\n     private final WebMarkupContainer accountLinkContainer;\n \n+    private final AjaxCheckBoxPanel accountLinkCheckbox;\n+\n     private MappingTO getMapping() {\n         MappingTO result = null;\n \n-        if (AttributableType.USER == attrType) {\n+        if (AttributableType.USER == this.attrType) {\n             if (this.resourceTO.getUmapping() == null) {\n                 this.resourceTO.setUmapping(new MappingTO());\n             }\n             result = this.resourceTO.getUmapping();\n         }\n-        if (AttributableType.ROLE == attrType) {\n+        if (AttributableType.ROLE == this.attrType) {\n             if (this.resourceTO.getRmapping() == null) {\n                 this.resourceTO.setRmapping(new MappingTO());\n             }\n@@ -176,63 +179,28 @@ public ResourceMappingPanel(final String id, final ResourceTO resourceTO, final\n         this.resourceTO = resourceTO;\n         this.attrType = attrType;\n \n+        this.mappingContainer = new WebMarkupContainer(\"mappingContainer\");\n+        this.mappingContainer.setOutputMarkupId(true);\n+        add(this.mappingContainer);\n+\n+        this.accountLinkContainer = new WebMarkupContainer(\"accountLinkContainer\");\n+        this.accountLinkContainer.setOutputMarkupId(true);\n+        add(this.accountLinkContainer);\n+\n         if (this.resourceTO.getConnectorId() != null && this.resourceTO.getConnectorId() > 0) {\n-            schemaNames =\n-                    getResourceSchemaNames(this.resourceTO.getConnectorId(), this.resourceTO.getConnConfProperties());\n+            schemaNames = getSchemaNames(this.resourceTO.getConnectorId(), this.resourceTO.getConnConfProperties());\n+\n+            setEnabled();\n         } else {\n             schemaNames = Collections.<String>emptyList();\n         }\n \n-        accountLinkContainer = new WebMarkupContainer(\"accountLinkContainer\");\n-        accountLinkContainer.setOutputMarkupId(true);\n-        add(accountLinkContainer);\n-\n-        boolean accountLinkEnabled = false;\n-        if (getMapping().getAccountLink() != null) {\n-            accountLinkEnabled = true;\n-        }\n-        final AjaxCheckBoxPanel accountLinkCheckbox = new AjaxCheckBoxPanel(\"accountLinkCheckbox\",\n-                new ResourceModel(\"accountLinkCheckbox\", \"accountLinkCheckbox\").getObject(),\n-                new Model<Boolean>(Boolean.valueOf(accountLinkEnabled)));\n-        accountLinkCheckbox.setEnabled(true);\n-\n-        accountLinkContainer.add(accountLinkCheckbox);\n-\n-        final AjaxTextFieldPanel accountLink = new AjaxTextFieldPanel(\"accountLink\",\n-                new ResourceModel(\"accountLink\", \"accountLink\").getObject(),\n-                new PropertyModel<String>(getMapping(), \"accountLink\"));\n-        accountLink.setEnabled(accountLinkEnabled);\n-        accountLinkContainer.add(accountLink);\n-\n-        accountLinkCheckbox.getField().add(new AjaxFormComponentUpdatingBehavior(ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                if (accountLinkCheckbox.getModelObject()) {\n-                    accountLink.setEnabled(Boolean.TRUE);\n-                    accountLink.setModelObject(\"\");\n-                } else {\n-                    accountLink.setEnabled(Boolean.FALSE);\n-                    accountLink.setModelObject(\"\");\n-                }\n-\n-                target.add(accountLink);\n-            }\n-        });\n-\n-        mappingContainer = new WebMarkupContainer(\"mappingContainer\");\n-        mappingContainer.setOutputMarkupId(true);\n-\n         final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n         mappingContainer.add(jexlHelp);\n \n         AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n         mappingContainer.add(questionMarkJexlHelp);\n \n-        add(mappingContainer);\n-\n         final Label passwordLabel = new Label(\"passwordLabel\", new ResourceModel(\"password\"));\n         mappingContainer.add(passwordLabel);\n         if (AttributableType.USER != ResourceMappingPanel.this.attrType) {\n@@ -505,29 +473,72 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         addMappingBtn.setDefaultFormProcessing(false);\n         addMappingBtn.setEnabled(this.resourceTO.getConnectorId() != null && this.resourceTO.getConnectorId() > 0);\n         mappingContainer.add(addMappingBtn);\n+\n+        boolean accountLinkEnabled = false;\n+        if (getMapping().getAccountLink() != null) {\n+            accountLinkEnabled = true;\n+        }\n+        accountLinkCheckbox = new AjaxCheckBoxPanel(\"accountLinkCheckbox\",\n+                new ResourceModel(\"accountLinkCheckbox\", \"accountLinkCheckbox\").getObject(),\n+                new Model<Boolean>(Boolean.valueOf(accountLinkEnabled)));\n+        accountLinkCheckbox.setEnabled(true);\n+\n+        accountLinkContainer.add(accountLinkCheckbox);\n+\n+        final AjaxTextFieldPanel accountLink = new AjaxTextFieldPanel(\"accountLink\",\n+                new ResourceModel(\"accountLink\", \"accountLink\").getObject(),\n+                new PropertyModel<String>(getMapping(), \"accountLink\"));\n+        accountLink.setEnabled(accountLinkEnabled);\n+        accountLinkContainer.add(accountLink);\n+\n+        accountLinkCheckbox.getField().add(new AjaxFormComponentUpdatingBehavior(ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (accountLinkCheckbox.getModelObject()) {\n+                    accountLink.setEnabled(Boolean.TRUE);\n+                    accountLink.setModelObject(\"\");\n+                } else {\n+                    accountLink.setEnabled(Boolean.FALSE);\n+                    accountLink.setModelObject(\"\");\n+                }\n+\n+                target.add(accountLink);\n+            }\n+        });\n     }\n \n-    /**\n-     * Get resource schema names.\n-     *\n-     * @param connectorId connector id.\n-     * @param conf connector configuration properties.\n-     * @return resource schema names.\n-     */\n-    private List<String> getResourceSchemaNames(final Long connectorId, final Set<ConnConfProperty> conf) {\n-        final List<String> names = new ArrayList<String>();\n+    private List<String> getSchemaNames(final Long connectorId, final Set<ConnConfProperty> conf) {\n+        final ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n+        connInstanceTO.setId(connectorId);\n+        connInstanceTO.setConfiguration(conf);\n \n-        try {\n-            final ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-            connInstanceTO.setId(connectorId);\n-            connInstanceTO.setConfiguration(conf);\n+        return connRestClient.getSchemaNames(connInstanceTO);\n+    }\n \n-            names.addAll(connRestClient.getSchemaNames(connInstanceTO));\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving resource schema names\", e);\n+    private void setEnabled() {\n+        final ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n+        connInstanceTO.setId(this.resourceTO.getConnectorId());\n+        connInstanceTO.setConfiguration(this.resourceTO.getConnConfProperties());\n+\n+        List<ConnIdObjectClassTO> objectClasses = connRestClient.getSupportedObjectClasses(connInstanceTO);\n+\n+        boolean enabled = (AttributableType.USER == attrType && objectClasses.contains(ConnIdObjectClassTO.ACCOUNT))\n+                || (AttributableType.ROLE == attrType && objectClasses.contains(ConnIdObjectClassTO.GROUP));\n+        this.mappingContainer.setEnabled(enabled);\n+        this.mappingContainer.setVisible(enabled);\n+        this.accountLinkContainer.setEnabled(enabled);\n+        this.accountLinkContainer.setVisible(enabled);\n+\n+        if (!enabled) {\n+            getMapping().getItems().clear();\n+            getMapping().setAccountLink(null);\n+            if (this.accountLinkCheckbox != null) {\n+                this.accountLinkCheckbox.setModelObject(null);\n+            }\n         }\n-\n-        return names;\n     }\n \n     @Override\n@@ -542,8 +553,9 @@ public void onEvent(final IEvent<?> event) {\n             addMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);\n \n             schemaNames.clear();\n-            schemaNames.addAll(\n-                    getResourceSchemaNames(resourceTO.getConnectorId(), new HashSet<ConnConfProperty>(conf)));\n+            schemaNames.addAll(getSchemaNames(resourceTO.getConnectorId(), new HashSet<ConnConfProperty>(conf)));\n+\n+            setEnabled();\n \n             target.add(this);\n         }"},{"sha":"6811348be573ff40d28d83567658ac7c3db279dc","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.ConnBundleTO;\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.SchemaTO;\n@@ -149,7 +150,7 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n      */\n     public boolean check(final ConnInstanceTO connectorTO) {\n         ConnInstanceTO toBeChecked = new ConnInstanceTO();\n-        BeanUtils.copyProperties(connectorTO, toBeChecked, new String[]{\"configuration\"});\n+        BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] {\"configuration\"});\n         toBeChecked.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n \n         boolean check = false;\n@@ -176,13 +177,13 @@ public boolean check(final ResourceTO resourceTO) {\n     public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         List<String> schemaNames = new ArrayList<String>();\n         try {\n-            List<SchemaTO> response = getService(ConnectorService.class).getSchemaNames(connectorTO.getId(),\n-                    connectorTO, false);\n+            List<SchemaTO> response = getService(ConnectorService.class).\n+                    getSchemaNames(connectorTO.getId(), connectorTO, false);\n             for (SchemaTO schema : response) {\n                 schemaNames.add(schema.getName());\n             }\n         } catch (Exception e) {\n-            LOG.error(\"While getting resource schema names\", e);\n+            LOG.error(\"While getting schema names\", e);\n         } finally {\n             // re-order schema names list\n             Collections.sort(schemaNames);\n@@ -191,6 +192,17 @@ public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         return schemaNames;\n     }\n \n+    public List<ConnIdObjectClassTO> getSupportedObjectClasses(final ConnInstanceTO connectorTO) {\n+        List<ConnIdObjectClassTO> result = Collections.emptyList();\n+        try {\n+            result = getService(ConnectorService.class).getSupportedObjectClasses(connectorTO.getId(), connectorTO);\n+        } catch (Exception e) {\n+            LOG.error(\"While getting supported object classes\", e);\n+        }\n+\n+        return result;\n+    }\n+\n     public void reload() {\n         getService(ConnectorService.class).reload();\n     }"},{"sha":"adc8e6afbbe7a4699696b4a6147993ff305e86cf","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -16,7 +16,7 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <div id=\"formtable\">\n       <div class=\"tablerow alt\">"},{"sha":"cbd7ad40b39151034d234491b14e23ff4ae9a328","filename":"core/pom.xml","status":"modified","additions":78,"deletions":117,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -45,8 +45,6 @@ under the License.\n   <properties>\n     <jdbcdriver.groupId>com.h2database</jdbcdriver.groupId>\n     <jdbcdriver.artifactId>h2</jdbcdriver.artifactId>\n-\n-    <javaagent />\n   </properties>\n \n   <dependencies>\n@@ -485,8 +483,7 @@ under the License.\n               <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\n               <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\n \n-              <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n-              <cargo.jvmargs>-noverify ${javaagent} -Drebel.spring_plugin=false -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n+              <cargo.jvmargs>-noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n             </properties>\n             <configfiles>\n               <configfile>\n@@ -654,10 +651,6 @@ under the License.\n     <profile>\n       <id>skipTests</id>\n \n-      <properties>\n-        <javaagent />\n-      </properties>\n-\n       <dependencies>\n         <dependency>\n           <groupId>com.h2database</groupId>\n@@ -719,10 +712,7 @@ under the License.\n \n     <profile>\n       <id>dev</id>\n-      <properties>\n-        <waitForCheck>true</waitForCheck>\n-        <javaagent />\n-      </properties>\n+\n       <build>\n         <defaultGoal>clean verify</defaultGoal>\n \n@@ -735,24 +725,51 @@ under the License.\n               <skipTests>true</skipTests>\n             </configuration>\n           </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n \n+    <profile>\n+      <id>debug</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify cargo:run</defaultGoal>\n+\n+        <plugins>\n           <plugin>\n             <groupId>org.codehaus.cargo</groupId>\n             <artifactId>cargo-maven2-plugin</artifactId>\n             <inherited>true</inherited>\n             <configuration>\n-              <wait>${waitForCheck}</wait>\n+              <configuration>\n+                <properties>\n+                  <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n+                    -noverify -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n+                </properties>\n+              </configuration>\n             </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>none</phase>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>none</phase>\n+              </execution>\n+            </executions>\n           </plugin>\n         </plugins>\n       </build>\n     </profile>\n \n     <profile>\n       <id>jaxrs</id>\n-      <properties>\n-        <javaagent />\n-      </properties>\n+\n       <build>\n         <defaultGoal>clean verify</defaultGoal>\n \n@@ -793,54 +810,67 @@ under the License.\n         </plugins>        \n       </build>\n     </profile>\n-\n+    \n     <profile>\n-      <id>jrebel</id>\n-      <properties>\n-        <skipTests>true</skipTests>\n-        <javaagent>-javaagent:${env.REBEL_HOME}/jrebel.jar</javaagent>\n-        <waitForCheck>true</waitForCheck>\n-      </properties>\n+      <id>noopworkflow</id>\n+\n       <build>\n         <defaultGoal>clean verify</defaultGoal>\n-\n+        \n         <plugins>\n+          <!-- Strip Activiti-related entries from content.xml -->\n           <plugin>\n-            <groupId>org.zeroturnaround</groupId>\n-            <artifactId>jrebel-maven-plugin</artifactId>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>xml-maven-plugin</artifactId>\n             <inherited>true</inherited>\n-            <configuration>\n-              <classpath>\n-                <resources>\n-                  <resource>\n-                    <excludes>\n-                      <exclude>content.xml</exclude>\n-                      <exclude>persistence.properties</exclude>\n-                    </excludes>\n-                  </resource>\n-                </resources>\n-              </classpath>\n-            </configuration>\n             <executions>\n               <execution>\n-                <id>generate-rebel-xml</id>\n-                <phase>process-resources</phase>\n+                <phase>process-test-resources</phase>\n                 <goals>\n-                  <goal>generate</goal>\n+                  <goal>transform</goal>\n                 </goals>\n               </execution>\n             </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.codehaus.cargo</groupId>\n-            <artifactId>cargo-maven2-plugin</artifactId>\n-            <inherited>true</inherited>\n             <configuration>\n-              <wait>${waitForCheck}</wait>\n+              <forceCreation>true</forceCreation>\n+              <transformationSets>\n+                <transformationSet>\n+                  <dir>${project.build.directory}/test-classes</dir>\n+                  <includes>\n+                    <include>content.xml</include>\n+                  </includes>\n+                  <outputDir>${project.build.directory}/test-classes/</outputDir>\n+                  <stylesheet>${basedir}/src/test/resources/noopworkflow/stripActivitiFromContent.xsl</stylesheet>\n+                  <outputProperties>\n+                    <outputProperty>\n+                      <name>indent</name>\n+                      <value>yes</value>\n+                    </outputProperty>\n+                  </outputProperties>\n+                </transformationSet>\n+              </transformationSets>\n             </configuration>\n           </plugin>\n         </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>workflowContext.xml</exclude>\n+              <exclude>workflow.properties</exclude>\n+            </excludes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/test/resources/noopworkflow</directory>\n+            <filtering>true</filtering>\n+            <includes>\n+              <include>workflowContext.xml</include>\n+              <include>workflow.properties</include>\n+            </includes>\n+          </testResource>\n+        </testResources>\n       </build>\n     </profile>\n \n@@ -849,7 +879,6 @@ under the License.\n       <properties>\n         <jdbcdriver.groupId>com.oracle</jdbcdriver.groupId>\n         <jdbcdriver.artifactId>ojdbc6</jdbcdriver.artifactId>\n-        <javaagent />\n       </properties>\n       <dependencies>\n         <dependency>\n@@ -900,77 +929,11 @@ under the License.\n       </build>\n     </profile>\n     \n-    <profile>\n-      <id>noopworkflow</id>\n-      <properties>\n-        <javaagent />\n-      </properties>\n-      <build>\n-        <defaultGoal>clean verify</defaultGoal>\n-        \n-        <plugins>\n-          <!-- Strip Activiti-related entries from content.xml -->\n-          <plugin>\n-            <groupId>org.codehaus.mojo</groupId>\n-            <artifactId>xml-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <phase>process-test-resources</phase>\n-                <goals>\n-                  <goal>transform</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-            <configuration>\n-              <forceCreation>true</forceCreation>\n-              <transformationSets>\n-                <transformationSet>\n-                  <dir>${project.build.directory}/test-classes</dir>\n-                  <includes>\n-                    <include>content.xml</include>\n-                  </includes>\n-                  <outputDir>${project.build.directory}/test-classes/</outputDir>\n-                  <stylesheet>${basedir}/src/test/resources/noopworkflow/stripActivitiFromContent.xsl</stylesheet>\n-                  <outputProperties>\n-                    <outputProperty>\n-                      <name>indent</name>\n-                      <value>yes</value>\n-                    </outputProperty>\n-                  </outputProperties>\n-                </transformationSet>\n-              </transformationSets>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-        \n-        <testResources>\n-          <testResource>\n-            <directory>src/test/resources</directory>\n-            <filtering>true</filtering>\n-            <excludes>\n-              <exclude>workflowContext.xml</exclude>\n-              <exclude>workflow.properties</exclude>\n-            </excludes>\n-          </testResource>\n-          <testResource>\n-            <directory>src/test/resources/noopworkflow</directory>\n-            <filtering>true</filtering>\n-            <includes>\n-              <include>workflowContext.xml</include>\n-              <include>workflow.properties</include>\n-            </includes>\n-          </testResource>\n-        </testResources>\n-      </build>\n-    </profile>\n-\n     <profile>\n       <id>sqlserver-it</id>\n       <properties>\n         <jdbcdriver.groupId>com.microsoft.sqlserver</jdbcdriver.groupId>\n         <jdbcdriver.artifactId>sqljdbc4</jdbcdriver.artifactId>\n-        <javaagent />\n       </properties>\n       <dependencies>\n         <dependency>\n@@ -1026,7 +989,6 @@ under the License.\n       <properties>\n         <jdbcdriver.groupId>postgresql</jdbcdriver.groupId>\n         <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>\n-        <javaagent />\n       </properties>\n       <dependencies>\n         <dependency>\n@@ -1060,7 +1022,6 @@ under the License.\n       <properties>\n         <jdbcdriver.groupId>mysql</jdbcdriver.groupId>\n         <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>\n-        <javaagent />\n       </properties>\n       <dependencies>\n         <dependency>"},{"sha":"ccc08e5aed57ee8cab225ff6a009a569ac4a5e89","filename":"core/src/main/java/org/apache/syncope/core/propagation/Connector.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -166,11 +166,18 @@ ConnectorObject getObject(PropagationMode propagationMode,\n     /**\n      * Return resource schema names.\n      *\n-     * @param showall return special attributes (like as __NAME__ or __PASSWORD__) if true\n-     * @return a list of schema names\n+     * @param includeSpecial return special attributes (like as __NAME__ or __PASSWORD__) if true\n+     * @return schema names\n      */\n-    Set<String> getSchema(boolean showall);\n+    Set<String> getSchemaNames(boolean includeSpecial);\n \n+    /**\n+     * Return ConnId's object classes supported by this connector.\n+     * \n+     * @return supported object classes\n+     */\n+    Set<ObjectClass> getSupportedObjectClasses();\n+    \n     /**\n      * Validate a connector instance.\n      */"},{"sha":"395d4b3fff266c24834e0e8cd6a962f9450b72db","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AsyncConnectorFacade.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -140,15 +140,15 @@ public Future<Set<Attribute>> getObjectAttributes(\n     }\n \n     @Async\n-    public Future<Set<String>> getSchema(final ConnectorFacade connector, final boolean showall) {\n-        final Set<String> resourceSchemaNames = new HashSet<String>();\n+    public Future<Set<String>> getSchemaNames(final ConnectorFacade connector, final boolean includeSpecial) {\n+        final Set<String> schemaNames = new HashSet<String>();\n \n         try {\n             final Schema schema = connector.schema();\n             for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n                 for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n-                    if (showall || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n-                        resourceSchemaNames.add(attrInfo.getName());\n+                    if (includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n+                        schemaNames.add(attrInfo.getName());\n                     }\n                 }\n             }\n@@ -157,7 +157,24 @@ public Future<Set<String>> getSchema(final ConnectorFacade connector, final bool\n             LOG.debug(\"While reading schema on connector {}\", connector, e);\n         }\n \n-        return new AsyncResult<Set<String>>(resourceSchemaNames);\n+        return new AsyncResult<Set<String>>(schemaNames);\n+    }\n+\n+    @Async\n+    public Future<Set<ObjectClass>> getSupportedObjectClasses(final ConnectorFacade connector) {\n+        final Set<ObjectClass> objectClasses = new HashSet<ObjectClass>();\n+\n+        try {\n+            final Schema schema = connector.schema();\n+            for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n+                objectClasses.add(new ObjectClass(info.getType()));\n+            }\n+        } catch (Exception e) {\n+            // catch exception in order to manage unpredictable behaviors\n+            LOG.debug(\"While reading schema on connector {}\", connector, e);\n+        }\n+\n+        return new AsyncResult<Set<ObjectClass>>(objectClasses);\n     }\n \n     @Async"},{"sha":"450c104e172aaa22e3f5e06af167cdaf2a96948e","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -411,8 +411,26 @@ public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final U\n     }\n \n     @Override\n-    public Set<String> getSchema(final boolean showall) {\n-        final Future<Set<String>> future = asyncFacade.getSchema(connector, showall);\n+    public Set<String> getSchemaNames(final boolean includeSpecial) {\n+        final Future<Set<String>> future = asyncFacade.getSchemaNames(connector, includeSpecial);\n+        try {\n+            return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Set<ObjectClass> getSupportedObjectClasses() {\n+        final Future<Set<ObjectClass>> future = asyncFacade.getSupportedObjectClasses(connector);\n         try {\n             return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n         } catch (java.util.concurrent.TimeoutException e) {"},{"sha":"707cc040af7c03e611887a4ddb8a48428af9efdb","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":37,"deletions":7,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -52,6 +51,7 @@\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorKey;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n@@ -270,10 +270,11 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/schema/list\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/schemaNames/list\")\n     @Transactional(readOnly = true)\n     public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanceTO,\n-            @RequestParam(required = false, value = \"showall\", defaultValue = \"false\") final boolean showall) {\n+            @RequestParam(required = false, value = \"includeSpecial\", defaultValue = \"false\")\n+            final boolean includeSpecial) {\n \n         final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getId());\n         if (connInstance == null) {\n@@ -288,12 +289,41 @@ public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanc\n         // bean couldn't exist or couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n         final List<String> result =\n-                new ArrayList<String>(connFactory.createConnector(connInstance, conf).getSchema(showall));\n-        Collections.sort(result);\n+                new ArrayList<String>(connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial));\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n-                \"Successfully listed \" + (showall ? \"all \" : \"\") + \"schema names (\" + result.size() + \") for connector \"\n-                + connInstance.getDisplayName());\n+                \"Successfully listed \" + (includeSpecial ? \"all \" : \"\") + \"schema names (\" + result.size() + \") \"\n+                + \"for connector \" + connInstance.getDisplayName());\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/supportedObjectClasses/list\")\n+    @Transactional(readOnly = true)\n+    public List<String> getSupportedObjectClasses(@RequestBody final ConnInstanceTO connInstanceTO) {\n+        final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getId());\n+        if (connInstance == null) {\n+            throw new NotFoundException(\"Connector '\" + connInstanceTO.getId() + \"'\");\n+        }\n+\n+        // consider the possibility to receive overridden properties only\n+        final Set<ConnConfProperty> conf = binder.mergeConnConfProperties(connInstanceTO.getConfiguration(),\n+                connInstance.getConfiguration());\n+\n+        // We cannot use Spring bean because this method could be used during resource definition or modification:\n+        // bean couldn't exist or couldn't be updated.\n+        // This is the reason why we should take a \"not mature\" connector facade proxy to ask for object classes.\n+        Set<ObjectClass> objectClasses = connFactory.createConnector(connInstance, conf).getSupportedObjectClasses();\n+\n+        List<String> result = new ArrayList<String>(objectClasses.size());\n+        for (ObjectClass objectClass : objectClasses) {\n+            result.add(objectClass.getObjectClassValue());\n+        }\n+\n+        auditManager.audit(Category.connector, ConnectorSubCategory.getSupportedObjectClasses, Result.success,\n+                \"Successfully listed supported object classes (\" + result.size() + \") \"\n+                + \"for connector \" + connInstance.getDisplayName());\n \n         return result;\n     }"},{"sha":"091fc5cd6073478a40d031bfca1db68cf0f93502","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.to.BulkAction;\r\n import org.apache.syncope.common.to.BulkActionRes;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n@@ -67,16 +68,28 @@ public List<ConnConfProperty> getConfigurationProperties(final Long connInstance\n \r\n     @Override\r\n     public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n-            final boolean showall) {\r\n+            final boolean includeSpecial) {\r\n \r\n-        List<String> schemaNames = connInstanceController.getSchemaNames(connInstanceTO, showall);\r\n-        List<SchemaTO> schemas = new ArrayList<SchemaTO>();\r\n+        List<String> schemaNames = connInstanceController.getSchemaNames(connInstanceTO, includeSpecial);\r\n+        List<SchemaTO> result = new ArrayList<SchemaTO>(schemaNames.size());\r\n         for (String name : schemaNames) {\r\n             SchemaTO schemaTO = new SchemaTO();\r\n             schemaTO.setName(name);\r\n-            schemas.add(schemaTO);\r\n+            result.add(schemaTO);\r\n         }\r\n-        return schemas;\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstanceId,\r\n+            final ConnInstanceTO connInstanceTO) {\r\n+\r\n+        List<String> objectClasses = connInstanceController.getSupportedObjectClasses(connInstanceTO);\r\n+        List<ConnIdObjectClassTO> result = new ArrayList<ConnIdObjectClassTO>(objectClasses.size());\r\n+        for (String objectClass : objectClasses) {\r\n+            result.add(new ConnIdObjectClassTO(objectClass));\r\n+        }\r\n+        return result;\r\n     }\r\n \r\n     @Override\r"},{"sha":"92f16c627e87c685402c85e37ec244efb2220f5f","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6083f9bab8ed01b460c151080b383b75196d21f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=d6083f9bab8ed01b460c151080b383b75196d21f","patch":"@@ -39,6 +39,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.ConnBundleTO;\n+import org.apache.syncope.common.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n@@ -549,6 +550,26 @@ public void getSchemaNames() {\n         assertFalse(schemaNames.isEmpty());\n     }\n \n+    @Test\n+    public void getSupportedObjectClasses() {\n+        ConnInstanceTO ldap = connectorService.read(105L);\n+        assertNotNull(ldap);\n+\n+        List<ConnIdObjectClassTO> objectClasses = connectorService.getSupportedObjectClasses(ldap.getId(), ldap);\n+        assertNotNull(objectClasses);\n+        assertEquals(2, objectClasses.size());\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.ACCOUNT));\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.GROUP));\n+\n+        ConnInstanceTO csv = connectorService.read(104L);\n+        assertNotNull(csv);\n+\n+        objectClasses = connectorService.getSupportedObjectClasses(csv.getId(), csv);\n+        assertNotNull(objectClasses);\n+        assertEquals(1, objectClasses.size());\n+        assertTrue(objectClasses.contains(ConnIdObjectClassTO.ACCOUNT));\n+    }\n+\n     @Test\n     public void issueSYNCOPE112() {\n         // ----------------------------------------"}]}