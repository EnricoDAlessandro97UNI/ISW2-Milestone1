{"sha":"29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI5NzI2YmI2YjhmYzdkNGUyNTY0NTk5ZTBmMmQ2ZWYyZDk5MzU2YWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T15:42:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T15:44:04Z"},"message":"Fixing configuration set for mandatory schema","tree":{"sha":"29b81eb5bc89e6069244c0b22fdaa239bd026273","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/29b81eb5bc89e6069244c0b22fdaa239bd026273"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b5bfca8ea3774688bac0b67d42fa23ac4c68248","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b5bfca8ea3774688bac0b67d42fa23ac4c68248","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b5bfca8ea3774688bac0b67d42fa23ac4c68248"}],"stats":{"total":61,"additions":52,"deletions":9},"files":[{"sha":"5f2ef245f38ea2ce2d11a6b4127fab766bab973d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","patch":"@@ -74,7 +74,7 @@ public void delete(final String schema) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_LIST + \"')\")\n     public List<AttrTO> list() {\n-        return binder.getConfTO(confDAO.get());\n+        return binder.getConfTO();\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"e62407fe2760c66e0d806fd2074b399b3a2da80a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConfigurationDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java?ref=29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","patch":"@@ -21,13 +21,12 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n \n public interface ConfigurationDataBinder {\n \n     AttrTO getAttrTO(CPlainAttr attr);\n \n-    List<AttrTO> getConfTO(Conf conf);\n+    List<AttrTO> getConfTO();\n \n     CPlainAttr getAttribute(AttrTO attributeTO);\n "},{"sha":"00935f7681af895388ec06916ae91af5718bb69e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","patch":"@@ -22,27 +22,34 @@\n import org.apache.syncope.core.provisioning.api.data.ConfigurationDataBinder;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.MapContext;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implements ConfigurationDataBinder {\n \n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     @Override\n-    public List<AttrTO> getConfTO(final Conf conf) {\n+    public List<AttrTO> getConfTO() {\n         final List<AttrTO> attrTOs = new ArrayList<>();\n-        for (final CPlainAttr plainAttr : conf.getPlainAttrs()) {\n+        for (final CPlainAttr plainAttr : confDAO.get().getPlainAttrs()) {\n             final AttrTO attrTO = new AttrTO();\n             attrTO.setSchema(plainAttr.getSchema().getKey());\n             attrTO.getValues().addAll(plainAttr.getValuesAsStrings());\n@@ -73,6 +80,22 @@ private void fillAttribute(final List<String> values,\n                         ? Collections.<String>emptyList()\n                         : Collections.singletonList(values.iterator().next()));\n \n+        if (valuesProvided.isEmpty()) {\n+            JexlContext jexlContext = new MapContext();\n+            JexlUtils.addPlainAttrsToContext(confDAO.get().getPlainAttrs(), jexlContext);\n+\n+            if (!schema.isReadonly()\n+                    && Boolean.parseBoolean(JexlUtils.evaluate(schema.getMandatoryCondition(), jexlContext))) {\n+\n+                LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n+\n+                SyncopeClientException reqValMissing = SyncopeClientException.build(\n+                        ClientExceptionType.RequiredValuesMissing);\n+                reqValMissing.getElements().add(schema.getKey());\n+                throw reqValMissing;\n+            }\n+        }\n+\n         for (String value : valuesProvided) {\n             if (value == null || value.isEmpty()) {\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getKey());"},{"sha":"1fb3221ae245a46532ff9f35be795a6b8f848cb9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConfigurationITCase.java","status":"modified","additions":24,"deletions":3,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java?ref=29726bb6b8fc7d4e2564599e0f2d6ef2d99356ab","patch":"@@ -55,10 +55,31 @@ public void create() {\n         testKey.setType(AttrSchemaType.String);\n         createSchema(SchemaType.PLAIN, testKey);\n \n-        AttrTO conf = new AttrTO();\n-        conf.setSchema(testKey.getKey());\n-        conf.getValues().add(\"testValue\");\n+        AttrTO conf = new AttrTO.Builder().schema(testKey.getKey()).value(\"testValue\").build();\n+\n+        configurationService.set(conf);\n+\n+        AttrTO actual = configurationService.get(conf.getSchema());\n+        assertEquals(actual, conf);\n+    }\n \n+    @Test\n+    public void createRequired() {\n+        PlainSchemaTO testKey = new PlainSchemaTO();\n+        testKey.setKey(\"testKey\" + getUUIDString());\n+        testKey.setType(AttrSchemaType.String);\n+        testKey.setMandatoryCondition(\"true\");\n+        createSchema(SchemaType.PLAIN, testKey);\n+\n+        AttrTO conf = new AttrTO.Builder().schema(testKey.getKey()).build();\n+        try {\n+            configurationService.set(conf);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        conf.getValues().add(\"testValue\");\n         configurationService.set(conf);\n \n         AttrTO actual = configurationService.get(conf.getSchema());"}]}