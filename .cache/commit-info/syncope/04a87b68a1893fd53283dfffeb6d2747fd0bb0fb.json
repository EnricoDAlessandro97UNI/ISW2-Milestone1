{"sha":"04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA0YTg3YjY4YTE4OTNmZDUzMjgzZGZmZmViNmQyNzQ3ZmQwYmIwZmI=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T14:46:13Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T14:46:13Z"},"message":"[SYNCOPE-231]\n* Adding Java Doc for TaskService\n* changing return type from report(..) to void, since console does not care about it and read operation can be used to get updated status\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1441462 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5d460735b137ed81fb9ba0c024cf21d5568fe985","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5d460735b137ed81fb9ba0c024cf21d5568fe985"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/comments","author":null,"committer":null,"parents":[{"sha":"d965e23adc69056ea81e3ee4c15668dddae53332","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d965e23adc69056ea81e3ee4c15668dddae53332","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d965e23adc69056ea81e3ee4c15668dddae53332"}],"stats":{"total":73,"additions":36,"deletions":37},"files":[{"sha":"ba9b7909f5670b7f03b07e7e6281c1d4169de93a","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","patch":"@@ -187,8 +187,8 @@ public TaskExecTO readExecution(final Long executionId) {\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO report(final Long executionId, final ReportExecTO report) {\r\n-        return getRestTemplate().getForObject(\r\n+    public void report(final Long executionId, final ReportExecTO report) {\r\n+        getRestTemplate().getForObject(\r\n                 baseUrl + \"task/execution/report/{executionId}.json\" + \"?executionStatus={status}&message={message}\",\r\n                 TaskExecTO.class, executionId, report.getStatus(), report.getMessage());\r\n     }\r"},{"sha":"de8b6d56fa6c8bd4bacc34936695b23974f89483","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":30,"deletions":32,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","patch":"@@ -42,116 +42,114 @@\n public interface TaskService {\r\n \r\n     /**\r\n-     * @param taskType\r\n-     * @return\r\n+     * @param taskType filter for task count\r\n+     * @return Returns number of tasks with matching type\r\n      */\r\n     @GET\r\n     @Path(\"{type}/count\")\r\n     int count(@PathParam(\"type\") TaskType taskType);\r\n \r\n     /**\r\n-     * @param taskTO\r\n-     * @return\r\n+     * @param taskTO Task to be created\r\n+     * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n     Response create(TaskTO taskTO);\r\n \r\n     /**\r\n-     * @param taskId\r\n+     * @param taskId Id of task to be deleted\r\n      */\r\n     @DELETE\r\n     @Path(\"{taskId}\")\r\n     void delete(@PathParam(\"taskId\") Long taskId);\r\n \r\n     /**\r\n-     * @param executionId\r\n+     * @param executionId ID of task execution to be deleted\r\n      */\r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n     void deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n     /**\r\n-     * @param taskId\r\n-     * @param dryRun\r\n-     * @return\r\n+     * @param taskId Id of task to be executed\r\n+     * @param dryRun if true, task will only be simulated\r\n+     * @return Returns TaskExcecution\r\n      */\r\n     @POST\r\n     @Path(\"{taskId}/execute\")\r\n     TaskExecTO execute(@PathParam(\"taskId\") Long taskId, @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n \r\n     /**\r\n-     * @return\r\n+     * @return Returns list of JobClasses\r\n      */\r\n     @GET\r\n     @Path(\"jobClasses\")\r\n     Set<JobClassTO> getJobClasses();\r\n \r\n     /**\r\n-     * @return\r\n+     * @return Returns list of SyncActionClasses\r\n      */\r\n     @GET\r\n     @Path(\"syncActionsClasses\")\r\n     Set<SyncActionClassTO> getSyncActionsClasses();\r\n \r\n     /**\r\n-     * @param taskType\r\n-     * @return\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @return Returns list of tasks with matching type\r\n      */\r\n     @GET\r\n     @Path(\"{type}/list\")\r\n     // TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n     List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType);\r\n \r\n     /**\r\n-     * @param taskType\r\n-     * @param page\r\n-     * @param size\r\n-     * @return\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @param page Page number of tasks in relation to page size\r\n+     * @param size Number of tasks listed per page\r\n+     * @return Returns paginated list of task with matching type\r\n      */\r\n     @GET\r\n     @Path(\"{type}\")\r\n     List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     /**\r\n-     * @param taskType\r\n-     * @return\r\n+     * @param taskType Type of task executions to be listed\r\n+     * @return Returns list of task executions where executed task matches type\r\n      */\r\n     @GET\r\n     @Path(\"{type}/executions\")\r\n     List<TaskExecTO> listExecutions(@PathParam(\"type\") TaskType taskType);\r\n \r\n     /**\r\n-     * @param taskType\r\n-     * @param taskId\r\n-     * @return\r\n+     * @param taskType Type of task to be read\r\n+     * @param taskId Id of task to be read\r\n+     * @return Returns task with matching id\r\n      */\r\n     @GET\r\n     @Path(\"{type}/{taskId}\")\r\n-    // TODO TaskType will be removed once CXF migration is done\r\n+    // TODO TaskType can be removed once CXF migration is done\r\n     <T extends TaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n \r\n     /**\r\n-     * @param executionId\r\n-     * @return\r\n+     * @param executionId Id if task execution to be read\r\n+     * @return Returns task execution with matching Id\r\n      */\r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n     TaskExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n     /**\r\n-     * @param executionId\r\n-     * @param status\r\n-     * @param message\r\n-     * @return\r\n+     * @param executionId Task execution ID related to report\r\n+     * @param report Report for task execution\r\n      */\r\n     @POST\r\n     @Path(\"executions/{executionId}/report\")\r\n-    TaskExecTO report(@PathParam(\"executionId\") Long executionId, ReportExecTO report);\r\n+    void report(@PathParam(\"executionId\") Long executionId, ReportExecTO report);\r\n \r\n     /**\r\n-     * @param taskId\r\n-     * @param taskTO\r\n+     * @param taskId Id if task to be updated\r\n+     * @param taskTO New task to be stored\r\n      */\r\n     @PUT\r\n     @Path(\"{taskId}\")\r"},{"sha":"90edd15cc5261f8eda73e103d753a41de2385b67","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","patch":"@@ -124,8 +124,8 @@ public TaskExecTO readExecution(final Long executionId) {\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO report(final Long executionId, final ReportExecTO report) {\r\n-        return taskController.report(executionId, PropagationTaskExecStatus.fromString(report.getStatus()),\r\n+    public void report(final Long executionId, final ReportExecTO report) {\r\n+        taskController.report(executionId, PropagationTaskExecStatus.fromString(report.getStatus()),\r\n                 report.getMessage());\r\n     }\r\n \r"},{"sha":"bceb2b89ba259c2309c913f77c7c22be2a348bdc","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","patch":"@@ -215,7 +215,8 @@ public void deal() {\n         ReportExecTO report = new ReportExecTO();\n         report.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n         report.setMessage(\"OK\");\n-        exec = taskService.report(exec.getId(), report);\n+        taskService.report(exec.getId(), report);\n+        exec = taskService.readExecution(exec.getId());\n         assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n         assertEquals(\"OK\", exec.getMessage());\n "}]}