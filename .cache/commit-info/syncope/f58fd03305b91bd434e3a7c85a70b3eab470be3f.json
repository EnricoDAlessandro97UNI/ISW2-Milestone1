{"sha":"f58fd03305b91bd434e3a7c85a70b3eab470be3f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1OGZkMDMzMDViOTFiZDQzNGUzYTdjODVhNzBiM2VhYjQ3MGJlM2Y=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-03T12:33:29Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-03T12:33:29Z"},"message":"SYNCOPE-75 #comment provided test for multivalued attribute\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1333426 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"98462a1375ba073aaf1a5dc0827728cde1f25173","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/98462a1375ba073aaf1a5dc0827728cde1f25173"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f58fd03305b91bd434e3a7c85a70b3eab470be3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f58fd03305b91bd434e3a7c85a70b3eab470be3f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f58fd03305b91bd434e3a7c85a70b3eab470be3f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f58fd03305b91bd434e3a7c85a70b3eab470be3f/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e64c3b6adf4412aeb784e75cec727361c407666d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e64c3b6adf4412aeb784e75cec727361c407666d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e64c3b6adf4412aeb784e75cec727361c407666d"}],"stats":{"total":464,"additions":212,"deletions":252},"files":[{"sha":"0f4d13c5290c6b468a771383c9cadb3db4deff2f","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=f58fd03305b91bd434e3a7c85a70b3eab470be3f","patch":"@@ -178,14 +178,12 @@ private FieldPanel getFieldPanel(final SchemaTO schemaTO, final Form form, final\n                         : SyncopeConstants.DEFAULT_DATE_PATTERN;\n \n                 if (!dataPattern.contains(\"H\")) {\n-\n                     panel = new DateTextFieldPanel(\"panel\", schemaTO.getName(), new Model(), dataPattern);\n \n                     if (required) {\n                         panel.addRequiredLabel();\n                     }\n                 } else {\n-\n                     panel = new DateTimeFieldPanel(\"panel\", schemaTO.getName(), new Model(), dataPattern);\n \n                     if (required) {"},{"sha":"23b2253b1ae6f671e95c678c750fcd13509d7b8e","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateFieldPanel.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=f58fd03305b91bd434e3a7c85a70b3eab470be3f","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import org.apache.syncope.client.SyncopeConstants;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.springframework.util.StringUtils;\n+\n+public class DateFieldPanel extends FieldPanel<Date> implements Cloneable {\n+\n+    private static final long serialVersionUID = -428975732068281726L;\n+\n+    protected final String datePattern;\n+\n+    protected DateFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n+        super(id, name, model);\n+        this.datePattern = datePattern;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final ListItem item) {\n+        final SimpleDateFormat formatter;\n+\n+        if (datePattern != null) {\n+            formatter = new SimpleDateFormat(datePattern, Locale.getDefault());\n+        } else {\n+            formatter = new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault());\n+        }\n+\n+        IModel<Date> model = new Model() {\n+\n+            private static final long serialVersionUID = 6799404673615637845L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                final Object obj = item.getModelObject();\n+\n+                if (obj != null && !obj.toString().isEmpty()) {\n+                    if (obj instanceof String) {\n+                        // Parse string using datePattern\n+                        try {\n+                            date = formatter.parse(obj.toString());\n+                        } catch (ParseException e) {\n+                            LOG.error(\"While parsing date\", e);\n+                        }\n+                    } else if (obj instanceof Date) {\n+                        // Don't parse anything\n+                        date = (Date) obj;\n+                    } else {\n+                        // consider Long\n+                        date = new Date((Long) obj);\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                if (object instanceof Date) {\n+                    final Object obj = item.getModelObject();\n+                    item.setModelObject(formatter.format((Date) object));\n+                } else {\n+                    item.setModelObject(null);\n+                }\n+            }\n+        };\n+\n+        field.setModel(model);\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final List<Serializable> list) {\n+        final SimpleDateFormat formatter;\n+\n+        if (datePattern != null) {\n+            formatter = new SimpleDateFormat(datePattern, Locale.getDefault());\n+        } else {\n+            formatter = new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault());\n+        }\n+\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 527651414610325237L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {\n+                    try {\n+                        // Parse string using datePattern\n+                        date = formatter.parse(list.get(0).toString());\n+                    } catch (ParseException e) {\n+                        LOG.error(\"invalid parse exception\", e);\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                if (object != null && object instanceof Date) {\n+                    list.clear();\n+                    list.add((String) formatter.format((Date) object));\n+                }\n+            }\n+        });\n+\n+        return this;\n+    }\n+}"},{"sha":"3daf7075fd59d82ca4eb06b16523093d51af4b35","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"modified","additions":3,"deletions":103,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=f58fd03305b91bd434e3a7c85a70b3eab470be3f","patch":"@@ -18,31 +18,21 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.form;\n \n-import java.io.Serializable;\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n import java.util.Date;\n-import java.util.List;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.datetime.markup.html.form.DateTextField;\n import org.apache.wicket.extensions.yui.calendar.DatePicker;\n-import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.springframework.util.StringUtils;\n \n-public class DateTextFieldPanel extends FieldPanel<Date> implements Cloneable {\n+public class DateTextFieldPanel extends DateFieldPanel {\n \n     private static final long serialVersionUID = 1919852712185883648L;\n-    private final String datePattern;\n \n     public DateTextFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n \n-        super(id, name, model);\n-\n-        this.datePattern = datePattern;\n+        super(id, name, model, datePattern);\n \n         field = DateTextField.forDatePattern(\"field\", model, datePattern);\n \n@@ -82,99 +72,9 @@ protected boolean enableMonthYearSelection() {\n         return picker;\n     }\n \n-    @Override\n-    public FieldPanel setNewModel(final ListItem item) {\n-        final DateFormat formatter = new SimpleDateFormat(datePattern);\n-\n-        IModel<Date> model = new Model() {\n-\n-            private static final long serialVersionUID = 6799404673615637845L;\n-\n-            @Override\n-            public Serializable getObject() {\n-                Date date = null;\n-\n-                if (StringUtils.hasText((String) item.getModelObject())) {\n-                    if (item.getModelObject() instanceof String) {\n-                        // Parse string using datePattern\n-                        try {\n-                            date = formatter.parse((String) item.getModelObject());\n-                        } catch (ParseException e) {\n-                            LOG.error(\"While parsing date\", e);\n-                        }\n-                    } else if (item.getModelObject() instanceof Date) {\n-                        // Don't parse anything\n-                        date = (Date) item.getModelObject();\n-                    } else {\n-                        // consider Long\n-                        date = new Date((Long) item.getModelObject());\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            public void setObject(final Serializable object) {\n-                if (object != null && object instanceof Date) {\n-                    if (item.getModelObject() instanceof String) {\n-                        // Parse string using datePattern\n-                        item.setModelObject((String) formatter.format((Date) object));\n-                    } else if (item.getModelObject() instanceof Date) {\n-                        // Don't parse anything\n-                        item.setModelObject((Date) object);\n-                    } else {\n-                        // consider Long\n-                        item.setModelObject(((Date) object).getTime());\n-                    }\n-                } else {\n-                    item.setModelObject(null);\n-                }\n-            }\n-        };\n-\n-        field.setModel(model);\n-        return this;\n-    }\n-\n-    @Override\n-    public FieldPanel setNewModel(final List<Serializable> list) {\n-        setNewModel(new Model() {\n-\n-            private static final long serialVersionUID = 527651414610325237L;\n-            private final DateFormat formatter = new SimpleDateFormat(datePattern);\n-\n-            @Override\n-            public Serializable getObject() {\n-                Date date = null;\n-\n-                if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {\n-                    try {\n-                        // Parse string using datePattern\n-                        date = formatter.parse(list.get(0).toString());\n-                    } catch (ParseException e) {\n-                        LOG.error(\"invalid parse exception\", e);\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            public void setObject(final Serializable object) {\n-                if (object != null && object instanceof Date) {\n-                    list.clear();\n-                    list.add((String) formatter.format((Date) object));\n-                }\n-            }\n-        });\n-\n-        return this;\n-    }\n-\n     @Override\n     public FieldPanel clone() {\n-        final FieldPanel panel = new DateTextFieldPanel(id, name, new Model(null), datePattern);\n+        final FieldPanel panel = new DateTextFieldPanel(id, name, new Model(), datePattern);\n         panel.setRequired(isRequired());\n         panel.setReadOnly(isReadOnly());\n         panel.setTitle(title);"},{"sha":"851fb6c6651deb9f0505d101ac53aef8c2319818","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"modified","additions":5,"deletions":112,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f58fd03305b91bd434e3a7c85a70b3eab470be3f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=f58fd03305b91bd434e3a7c85a70b3eab470be3f","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.form;\n \n-import java.io.Serializable;\n-import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.List;\n+import java.util.Locale;\n import org.apache.syncope.client.SyncopeConstants;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -32,34 +30,28 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.FormComponent;\n import org.apache.wicket.markup.html.form.validation.AbstractFormValidator;\n-import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.validation.IValidationError;\n import org.apache.wicket.validation.ValidationError;\n-import org.springframework.util.StringUtils;\n \n-public class DateTimeFieldPanel extends FieldPanel<Date> implements Cloneable {\n+public class DateTimeFieldPanel extends DateFieldPanel {\n \n     private static final long serialVersionUID = -428975732068281726L;\n \n-    private final String datePattern;\n-\n     private Form form = null;\n \n     protected static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n \n         @Override\n         protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault());\n         }\n     };\n \n     public DateTimeFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n \n-        super(id, name, model);\n-\n-        this.datePattern = datePattern;\n+        super(id, name, model, datePattern);\n \n         field = new DateTimeField(\"field\", model);\n \n@@ -142,7 +134,7 @@ public DateTimeFormValidator(final DateTimeField dateTimeComponent) {\n                 throw new IllegalArgumentException(\"argument dateTimeComponent cannot be null\");\n             }\n \n-            dateTimeComponents = new FormComponent[] { dateTimeComponent };\n+            dateTimeComponents = new FormComponent[]{dateTimeComponent};\n         }\n \n         @Override\n@@ -181,105 +173,6 @@ public FieldPanel setFormValidator(final Form form) {\n         return this;\n     }\n \n-    @Override\n-    public FieldPanel setNewModel(final ListItem item) {\n-        final SimpleDateFormat formatter = DATE_FORMAT.get();\n-\n-        if (datePattern != null) {\n-            formatter.applyPattern(datePattern);\n-        }\n-\n-        IModel<Date> model = new Model() {\n-\n-            private static final long serialVersionUID = 6799404673615637845L;\n-\n-            @Override\n-            public Serializable getObject() {\n-                Date date = null;\n-\n-                if (StringUtils.hasText((String) item.getModelObject())) {\n-                    if (item.getModelObject() instanceof String) {\n-                        // Parse string using datePattern\n-                        try {\n-                            date = formatter.parse((String) item.getModelObject());\n-                        } catch (ParseException e) {\n-                            LOG.error(\"While parsing date\", e);\n-                        }\n-                    } else if (item.getModelObject() instanceof Date) {\n-                        // Don't parse anything\n-                        date = (Date) item.getModelObject();\n-                    } else {\n-                        // consider Long\n-                        date = new Date((Long) item.getModelObject());\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            public void setObject(final Serializable object) {\n-                if (object != null && object instanceof Date) {\n-                    if (item.getModelObject() instanceof String) {\n-                        // Parse string using datePattern\n-                        item.setModelObject((String) formatter.format((Date) object));\n-                    } else if (item.getModelObject() instanceof Date) {\n-                        // Don't parse anything\n-                        item.setModelObject((Date) object);\n-                    } else {\n-                        // consider Long\n-                        item.setModelObject(((Date) object).getTime());\n-                    }\n-                } else {\n-                    item.setModelObject(null);\n-                }\n-            }\n-        };\n-\n-        field.setModel(model);\n-        return this;\n-    }\n-\n-    @Override\n-    public FieldPanel setNewModel(final List<Serializable> list) {\n-        final SimpleDateFormat formatter = DATE_FORMAT.get();\n-\n-        if (datePattern != null) {\n-            formatter.applyPattern(datePattern);\n-        }\n-\n-        setNewModel(new Model() {\n-\n-            private static final long serialVersionUID = 527651414610325237L;\n-\n-            @Override\n-            public Serializable getObject() {\n-                Date date = null;\n-\n-                if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {\n-                    try {\n-                        // Parse string using datePattern\n-                        date = formatter.parse(list.get(0).toString());\n-                    } catch (ParseException e) {\n-                        LOG.error(\"invalid parse exception\", e);\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            public void setObject(final Serializable object) {\n-                if (object != null && object instanceof Date) {\n-                    list.clear();\n-                    list.add((String) formatter.format((Date) object));\n-                }\n-            }\n-        });\n-\n-        return this;\n-    }\n-\n     @Override\n     public FieldPanel setStyleShet(String classes) {\n         field.get(\"date\").add(AttributeModifier.replace(\"class\", (classes != null"},{"sha":"e74628e3b7d00e360e419c10d697433e62867ada","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":64,"deletions":35,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f58fd03305b91bd434e3a7c85a70b3eab470be3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f58fd03305b91bd434e3a7c85a70b3eab470be3f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=f58fd03305b91bd434e3a7c85a70b3eab470be3f","patch":"@@ -625,15 +625,15 @@ public void createWithReject() {\n \n         // 3. claim task from user1, not in role 7 (designated for \n         // approval in workflow definition): fail\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n-                .getRequestFactory());\n+        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         SyncopeClientException sce = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form\n-                    .getTaskId());\n+            restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n+                    getTaskId());\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Workflow);\n         }\n@@ -643,8 +643,8 @@ public void createWithReject() {\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user4\", \"password\"));\n \n-        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form\n-                .getTaskId());\n+        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n+                getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -700,8 +700,8 @@ public void createWithApproval() {\n         assertNull(form.getOwner());\n \n         // 4. claim task (from admin)\n-        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form\n-                .getTaskId());\n+        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n+                getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -717,8 +717,8 @@ public void createWithApproval() {\n \n         exception = null;\n         try {\n-            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO\n-                    .getUsername());\n+            final String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.\n+                    getUsername());\n             assertEquals(userTO.getUsername(), username);\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n@@ -767,7 +767,7 @@ public void delete() {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n-    \n+\n     @Test\n     public void deleteByUsername() {\n         UserTO userTO = getSampleTO(\"delete.by.username@apache.org\");\n@@ -778,8 +778,9 @@ public void deleteByUsername() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         long id = userTO.getId();\n-        userTO = \n-            restTemplate.getForObject(BASE_URL + \"user/deleteByUsername/{username}.json\", UserTO.class, userTO.getUsername());\n+        userTO =\n+                restTemplate.getForObject(BASE_URL + \"user/deleteByUsername/{username}.json\", UserTO.class, userTO.\n+                getUsername());\n \n         assertNotNull(userTO);\n         assertEquals(id, userTO.getId());\n@@ -837,8 +838,7 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.asList(restTemplate\n-                .getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n+        users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -871,8 +871,8 @@ public void search() {\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond\n-                .getLeafCond(fullnameLeafCond2));\n+        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n+                fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n@@ -912,8 +912,8 @@ public void searchByUsernameAndId() {\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond\n-                .getLeafCond(idRightCond));\n+        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.\n+                getLeafCond(idRightCond));\n \n         assertTrue(searchCondition.checkValidity());\n \n@@ -963,8 +963,8 @@ public void paginatedSearch() {\n         fullnameLeafCond2.setSchema(\"fullname\");\n         fullnameLeafCond2.setExpression(\"%i%\");\n \n-        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond\n-                .getLeafCond(fullnameLeafCond2));\n+        NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n+                fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n@@ -1320,8 +1320,8 @@ public void suspendReactivateOnResource() {\n         ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n                 + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+                get(0)));\n \n         String ldapUID = userTO.getUsername();\n         assertNotNull(ldapUID);\n@@ -1341,8 +1341,8 @@ public void suspendReactivateOnResource() {\n         connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+                get(0)));\n \n         query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n \n@@ -1354,8 +1354,37 @@ public void suspendReactivateOnResource() {\n         connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+                get(0)));\n+    }\n+\n+    public void updateMultivalueAttribute() {\n+        UserTO userTO = getSampleTO(\"multivalue@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getDerivedAttributes().clear();\n+        userTO.getVirtualAttributes().clear();\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        AttributeTO loginDate = userTO.getAttributeMap().get(\"loginDate\");\n+        assertNotNull(loginDate);\n+        assertEquals(1, loginDate.getValues().size());\n+\n+        UserMod userMod = new UserMod();\n+\n+        AttributeMod loginDateMod = new AttributeMod();\n+        loginDateMod.addValueToBeAdded(\"2000-01-01\");\n+\n+        userMod.setId(userTO.getId());\n+        userMod.addAttributeToBeUpdated(loginDateMod);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        loginDate = userTO.getAttributeMap().get(\"loginDate\");\n+        assertNotNull(loginDate);\n+        assertEquals(2, loginDate.getValues().size());\n     }\n \n     @Test(expected = EmptyResultDataAccessException.class)\n@@ -1368,8 +1397,8 @@ public void issue213() {\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n-        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO\n-                .getUsername());\n+        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                userTO.getUsername());\n \n         assertEquals(userTO.getUsername(), username);\n \n@@ -1418,8 +1447,8 @@ public void issue270() {\n \n         assertTrue(original.getVirtualAttributes().isEmpty());\n \n-        UserTO toBeUpdated = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, original\n-                .getId());\n+        UserTO toBeUpdated = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, original.\n+                getId());\n \n         AttributeTO virtual = new AttributeTO();\n \n@@ -1540,8 +1569,8 @@ public void roleAttrPropagation() {\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n         ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\", actual\n-                .getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+                + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\", actual.\n+                getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n \n         assertNotNull(connObjectTO);\n \n@@ -1587,8 +1616,8 @@ public void membershipAttrPropagation() {\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n         ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\", actual\n-                .getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+                + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, \"resource-csv\", actual.\n+                getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n \n         assertNotNull(connObjectTO);\n "}]}