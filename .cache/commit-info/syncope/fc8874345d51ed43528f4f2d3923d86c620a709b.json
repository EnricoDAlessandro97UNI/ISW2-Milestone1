{"sha":"fc8874345d51ed43528f4f2d3923d86c620a709b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZjODg3NDM0NWQ1MWVkNDM1MjhmNGYyZDM5MjNkODZjNjIwYTcwOWI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-18T15:33:15Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-09-18T15:33:15Z"},"message":"SYNCOPE-407 fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1524459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5aee5f24df41dec9beebf76cbdaf2cec91e48de0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5aee5f24df41dec9beebf76cbdaf2cec91e48de0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fc8874345d51ed43528f4f2d3923d86c620a709b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc8874345d51ed43528f4f2d3923d86c620a709b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc8874345d51ed43528f4f2d3923d86c620a709b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc8874345d51ed43528f4f2d3923d86c620a709b/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"4e381aebfc91d5203b7b07568c0bb1ec2f0883a2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4e381aebfc91d5203b7b07568c0bb1ec2f0883a2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4e381aebfc91d5203b7b07568c0bb1ec2f0883a2"}],"stats":{"total":592,"additions":440,"deletions":152},"files":[{"sha":"8d192bb5836f85cb9fe25a60dd8ac88be950021a","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -66,8 +66,16 @@ public interface UserRequestService {\n      * @return Returns list of all UserRequests.\r\n      */\r\n     @GET\r\n+    @Path(\"executed\")\r\n     List<UserRequestTO> list();\r\n \r\n+    /**\r\n+     * @return Returns list of all UserRequests of the given user.\r\n+     */\r\n+    @GET\r\n+    @Path(\"filter/{username}\")\r\n+    List<UserRequestTO> listByUsername(@PathParam(\"username\") String username);\r\n+\r\n     /**\r\n      * @param requestId ID of UserRequest to be read\r\n      * @return Returns UserRequest with matching requestId.\r\n@@ -83,6 +91,10 @@ public interface UserRequestService {\n     @Path(\"{requestId}\")\r\n     void delete(@PathParam(\"requestId\") Long requestId);\r\n \r\n+    @GET\r\n+    @Path(\"claim/{requestId}\")\r\n+    UserRequestTO claim(@PathParam(\"requestId\") Long requestId);\r\n+\r\n     @POST\r\n     @Path(\"create/execute/{requestId}\")\r\n     UserTO executeCreate(@PathParam(\"requestId\") Long requestId, UserTO reviewed);\r\n@@ -91,7 +103,7 @@ public interface UserRequestService {\n     @Path(\"update/execute/{requestId}\")\r\n     UserTO executeUpdate(@PathParam(\"requestId\") Long requestId, UserMod changes);\r\n \r\n-    @POST\r\n-    @Path(\"delete/execute{requestId}\")\r\n+    @DELETE\r\n+    @Path(\"delete/execute/{requestId}\")\r\n     UserTO executeDelete(@PathParam(\"requestId\") Long requestId);\r\n }\r"},{"sha":"336abc0097f610da6e59687d8f8d35f474911f06","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestTO.java","status":"modified","additions":64,"deletions":1,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import java.util.Date;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n@@ -39,10 +40,32 @@ public class UserRequestTO extends AbstractBaseBean {\n \r\n     private Long userId;\r\n \r\n+    private String username;\r\n+\r\n     private UserRequestType type;\r\n \r\n     private boolean executed;\r\n \r\n+    /**\r\n+     * Username of the last user who claimed the request.\r\n+     */\r\n+    private String owner;\r\n+\r\n+    /**\r\n+     * Creation date.\r\n+     */\r\n+    private Date creationDate;\r\n+\r\n+    /**\r\n+     * Claim date.\r\n+     */\r\n+    private Date claimDate;\r\n+\r\n+    /**\r\n+     * Execution date.\r\n+     */\r\n+    private Date executionDate;\r\n+\r\n     public UserRequestTO() {\r\n     }\r\n \r\n@@ -118,15 +141,55 @@ public Long getUserId() {\n                 : userId;\r\n     }\r\n \r\n-    public void setUserId(final Long userId) {\r\n+    public void setUserId(Long userId) {\r\n         this.userId = userId;\r\n     }\r\n \r\n+    public String getUsername() {\r\n+        return username;\r\n+    }\r\n+\r\n+    public void setUsername(String username) {\r\n+        this.username = username;\r\n+    }\r\n+\r\n     public void setExecuted(boolean executed) {\r\n         this.executed = executed;\r\n     }\r\n \r\n     public boolean isExecuted() {\r\n         return executed;\r\n     }\r\n+\r\n+    public String getOwner() {\r\n+        return owner;\r\n+    }\r\n+\r\n+    public void setOwner(String owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public Date getCreationDate() {\r\n+        return creationDate;\r\n+    }\r\n+\r\n+    public void setCreationDate(Date creationDate) {\r\n+        this.creationDate = creationDate;\r\n+    }\r\n+\r\n+    public Date getClaimDate() {\r\n+        return claimDate;\r\n+    }\r\n+\r\n+    public void setClaimDate(Date claimDate) {\r\n+        this.claimDate = claimDate;\r\n+    }\r\n+\r\n+    public Date getExecutionDate() {\r\n+        return executionDate;\r\n+    }\r\n+\r\n+    public void setExecutionDate(Date executionDate) {\r\n+        this.executionDate = executionDate;\r\n+    }\r\n }\r"},{"sha":"fc7bb6b7e3977c5153b58122dac20c835f1805d8","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -242,7 +242,8 @@ public enum UserRequestSubCategory {\n         update,\r\n         delete,\r\n         isCreateAllowed,\r\n-        execute\r\n+        execute,\r\n+        claim\r\n \r\n     }\r\n \r"},{"sha":"9ea4ad6bc9aa54412c9ecb12ab46db0fc3e1310c","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -64,6 +64,7 @@ public enum SyncopeClientExceptionType {\n     RequiredValuesMissing(\"Syncope.RequiredValuesMissing\", \"Syncope.RequiredValuesMissing.attributeName\"),\r\n     Scheduling(\"Syncope.Scheduling\", \"Syncope.Scheduling.message\"),\r\n     UnauthorizedRole(\"Syncope.UnauthorizedRole\", \"Syncope.UnauthorizedRole.id\"),\r\n+    Unauthorized(\"Syncope.Unauthorized\", \"Syncope.Unauthorized\"),\r\n     Unknown(\"Syncope.Unknown\", \"\"),\r\n     Workflow(\"Syncope.Workflow\", \"Syncope.Workflow.message\");\r\n \r"},{"sha":"a54e1c063119dca9bc1d43e0f5b9d901042de1e3","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"modified","additions":37,"deletions":9,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.UserRequestType;\n@@ -228,7 +229,10 @@ private void setupUserRequest() {\n         List<IColumn> columns = new ArrayList<IColumn>();\n         columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n         columns.add(new PropertyColumn(new ResourceModel(\"type\"), \"type\", \"type\"));\n-        columns.add(new UserRequestColumn(\"user\"));\n+        columns.add(new PropertyColumn(new ResourceModel(\"username\"), \"username\", \"username\"));\n+        columns.add(new DatePropertyColumn(new ResourceModel(\"creationDate\"), \"creationDate\", \"creationDate\"));\n+        columns.add(new DatePropertyColumn(new ResourceModel(\"claimDate\"), \"claimDate\", \"claimDate\"));\n+        columns.add(new PropertyColumn(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n         columns.add(new AbstractColumn<UserRequestTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n@@ -246,6 +250,23 @@ public void populateItem(final Item<ICellPopulator<UserRequestTO>> cellItem, fin\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n \n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            userRequestRestClient.claim(model.getObject().getId());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientCompositeErrorException scee) {\n+                            error(getString(Constants.ERROR) + \":\" + scee.getMessage());\n+                        }\n+                        target.add(feedbackPanel);\n+                        target.add(userRequestContainer);\n+                    }\n+                }, ActionLink.ActionType.CLAIM, \"Approval\");\n+\n                 panel.add(new ActionLink() {\n \n                     private static final long serialVersionUID = -3722207913631435501L;\n@@ -266,7 +287,9 @@ public Page createPage() {\n                         editUserRequestWin.show(target);\n                     }\n                 }, ActionLink.ActionType.EDIT, \"UserRequest\",\n-                        model.getObject().getType() != UserRequestType.DELETE);\n+                        model.getObject().getType() != UserRequestType.DELETE\n+                        && StringUtils.isNotBlank(model.getObject().getOwner())\n+                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n \n                 panel.add(new ActionLink() {\n \n@@ -275,8 +298,7 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            userRestClient.delete(model.getObject().getUserId());\n-                            userRequestRestClient.delete(model.getObject().getId());\n+                            userRequestRestClient.executeDelete(model.getObject().getId());\n                         } catch (SyncopeClientCompositeErrorException e) {\n                             LOG.error(\"While deleting an user\", e);\n                             error(e.getMessage());\n@@ -289,7 +311,9 @@ public void onClick(final AjaxRequestTarget target) {\n                         target.add(userRequestContainer);\n                     }\n                 }, ActionLink.ActionType.DELETE, \"Users\",\n-                        model.getObject().getType() == UserRequestType.DELETE);\n+                        model.getObject().getType() == UserRequestType.DELETE\n+                        && StringUtils.isNotBlank(model.getObject().getOwner())\n+                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n \n                 panel.add(new ActionLink() {\n \n@@ -310,7 +334,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n                         target.add(userRequestContainer);\n                     }\n-                }, ActionLink.ActionType.DELETE, \"UserRequest\");\n+                }, ActionLink.ActionType.DELETE, \"UserRequest\",\n+                        StringUtils.isNotBlank(model.getObject().getOwner())\n+                        && model.getObject().getOwner().equalsIgnoreCase(SyncopeSession.get().getUsername()));\n \n                 cellItem.add(panel);\n             }\n@@ -376,7 +402,7 @@ public Iterator<WorkflowFormTO> iterator(final long first, final long count) {\n \n             Collections.sort(list, comparator);\n \n-            return list.subList((int)first, (int)first + (int)count).iterator();\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n@@ -418,7 +444,7 @@ public Iterator<UserRequestTO> iterator(final long first, final long count) {\n \n             Collections.sort(list, comparator);\n \n-            return list.subList((int)first, (int)first + (int)count).iterator();\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n@@ -450,7 +476,9 @@ public UserRequestColumn(final String name) {\n         }\n \n         @Override\n-        public void populateItem(final Item<ICellPopulator<UserRequestTO>> cellItem, final String componentId,\n+        public void populateItem(\n+                final Item<ICellPopulator<UserRequestTO>> cellItem,\n+                final String componentId,\n                 final IModel<UserRequestTO> rowModel) {\n \n             String label = \"\";"},{"sha":"bb5f40c43b20f0e836b0f568b9d55c9ebafa487d","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -152,7 +152,7 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n      */\n     public boolean check(final ConnInstanceTO connectorTO) {\n         ConnInstanceTO toBeChecked = new ConnInstanceTO();\n-        BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] {\"configuration\"});\n+        BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] {\"configuration\", \"configurationMap\"});\n         toBeChecked.getConfiguration().addAll(filterProperties(connectorTO.getConfiguration()));\n \n         boolean check = false;"},{"sha":"f684767969500a869fab47219d6af6637212c0de","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -40,6 +40,10 @@ public void delete(final Long requestId) {\n         getService(UserRequestService.class).delete(requestId);\n     }\n \n+    public void claim(final Long requestId) {\n+        getService(UserRequestService.class).claim(requestId);\n+    }\n+\n     public void requestCreate(final UserTO userTO) {\n         UserRequestTO userRequestTO = new UserRequestTO();\n         userRequestTO.setType(UserRequestType.CREATE);"},{"sha":"3fe0e5440c7c4d44bc4ba824d759ace8b2b57d53","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.html?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -43,7 +43,7 @@\n \n     <div id=\"tabs-2\">\n \n-      <div id=\"users-contain\" class=\"ui-widget\">\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit;\">\n         <span wicket:id=\"userRequestContainer\">\n           <table class=\"ui-widget ui-widget-content table-hover\"\n                  wicket:id=\"userRequestTable\"/>"},{"sha":"b1a924aaef8de83b68994f2c50e4b1beb6f8a535","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.properties?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -26,5 +26,7 @@ approvals=Approval\n userRequests=User requests\n delete=Delete\n type=Type\n-user=User\n+username=User\n new_user=New user\n+creationDate = Creation date\n+claimDate = Claim date"},{"sha":"67a8db0a10c8354f0f6a2380701049cf532adf54","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo_it.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_it.properties?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -26,5 +26,7 @@ approvals=Approvazioni\n userRequests=Richieste utente\n delete=Rimuovi\n type=Tipo\n-user=Utente\n+username=Utente\n new_user=Nuovo utente\n+creationDate = Data creazione\n+claimDate = Data rivendicazione"},{"sha":"315ea7d517a64b3f4171bb70f3d44054ff39d52a","filename":"console/src/main/resources/org/apache/syncope/console/pages/Todo_pt_BR.properties","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo_pt_BR.properties?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -16,15 +16,17 @@\n # under the License.\n taskId=Tarefa\n key=Chave\n-description=Descri\\u00E7\\u00E3o\n-createTime=Tempo de Cria\\u00E7\\u00E3o\n+description=Descri\\u00e7\\u00e3o\n+createTime=Tempo de Cria\\u00e7\\u00e3o\n dueDate=Data acordada\n-owner=Propriet\\u00E1rio\n+owner=Propriet\\u00e1rio\n claim=Requerimento\n-manage=Ger\\u00EAncia\n-approvals=Aprova\\u00E7\\u00E3o\n-userRequests=Requisi\\u00E7\\u00F5es  de usu\\u00E1rio\n+manage=Ger\\u00eancia\n+approvals=Aprova\\u00e7\\u00e3o\n+userRequests=Requisi\\u00e7\\u00f5es  de usu\\u00e1rio\n delete=Excluir\n type=Tipo\n-user=Usu\\u00E1rio\n-new_user=Novo Usu\\u00E1rio\n+username=Usu\\u00e1rio\n+new_user=Novo Usu\\u00e1rio\n+creationDate = Data de cria\\u00e7\\u00e3o\n+claimDate = Data de reivindica\\u00e7\\u00e3o"},{"sha":"7a6426b4cd40eda88f18a3504e187cdb2e14592e","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/UserRequest.java","status":"modified","additions":76,"deletions":3,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n+import java.util.Date;\n import javax.persistence.Basic;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n@@ -44,6 +48,9 @@ public class UserRequest extends AbstractBaseBean {\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n \n+    @Column\n+    private String username;\n+\n     @NotNull\n     @Lob\n     private String payload;\n@@ -57,6 +64,32 @@ public class UserRequest extends AbstractBaseBean {\n     @Max(1)\n     private Integer executed;\n \n+    /**\n+     * Creation date.\n+     */\n+    @Column(nullable = false)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creationDate;\n+\n+    /**\n+     * Claim date.\n+     */\n+    @Column\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date claimDate;\n+\n+    /**\n+     * Execution date.\n+     */\n+    @Column\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date executionDate;\n+\n+    /**\n+     * Username of the last user who claimed the request.\n+     */\n+    private String owner;\n+\n     public UserRequest() {\n         this.executed = 0;\n     }\n@@ -75,7 +108,7 @@ public UserTO getUserTO() {\n                 : XMLSerializer.<UserTO>deserialize(payload);\n     }\n \n-    public void setUserTO(final UserTO userTO) {\n+    public void createUser(final UserTO userTO) {\n         type = UserRequestType.CREATE;\n         payload = XMLSerializer.serialize(userTO);\n     }\n@@ -86,7 +119,7 @@ public UserMod getUserMod() {\n                 : XMLSerializer.<UserMod>deserialize(payload);\n     }\n \n-    public void setUserMod(final UserMod userMod) {\n+    public void updateUser(final UserMod userMod) {\n         type = UserRequestType.UPDATE;\n         payload = XMLSerializer.serialize(userMod);\n     }\n@@ -97,16 +130,56 @@ public Long getUserId() {\n                 : Long.valueOf(payload);\n     }\n \n-    public void setUserId(final Long userId) {\n+    public void deleteUser(final Long userId) {\n         type = UserRequestType.DELETE;\n         payload = String.valueOf(userId);\n     }\n \n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n     public boolean isExecuted() {\n         return isBooleanAsInteger(executed);\n     }\n \n     public void setExecuted(boolean executed) {\n         this.executed = getBooleanAsInteger(executed);\n     }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public Date getClaimDate() {\n+        return claimDate;\n+    }\n+\n+    public void setClaimDate(Date claimDate) {\n+        this.claimDate = claimDate;\n+    }\n+\n+    public Date getExecutionDate() {\n+        return executionDate;\n+    }\n+\n+    public void setExecutionDate(Date executionDate) {\n+        this.executionDate = executionDate;\n+    }\n }"},{"sha":"9f9d3d105e1446d642c5b7b758e070b323fa3271","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/UserRequestDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -28,8 +28,10 @@ public interface UserRequestDAO extends DAO {\n     UserRequest find(Long id);\n \n     List<UserRequest> findAll();\n-    \n-    List<UserRequest> findAll(final boolean executed);\n+\n+    List<UserRequest> findAll(boolean executed);\n+\n+    List<UserRequest> findAll(String username);\n \n     UserRequest save(UserRequest userRequest) throws InvalidEntityException;\n "},{"sha":"db7e93553c8be1eda8cf1ff1efea1dbd2915c5eb","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserRequestDAOImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -55,6 +55,17 @@ public List<UserRequest> findAll(final boolean executed) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<UserRequest> findAll(final String username) {\n+        TypedQuery<UserRequest> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e WHERE e.username = :username\",\n+                UserRequest.class);\n+        query.setParameter(\"username\", username);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public UserRequest save(final UserRequest userRequest) throws InvalidEntityException {\n         return entityManager.merge(userRequest);"},{"sha":"32f86f0c556c1afa30efe3f284a16366d970c8ec","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnauthorizedException.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedException.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+public class UnauthorizedException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -2723923005455058023L;\n+\n+    public UnauthorizedException(final String message) {\n+        super(message);\n+    }\n+}"},{"sha":"da72c1a4f4ea33bf44879fdd543650c041f9ab2a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":80,"deletions":39,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -18,30 +18,32 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n-import static org.apache.syncope.common.types.UserRequestType.CREATE;\n-import static org.apache.syncope.common.types.UserRequestType.DELETE;\n-import static org.apache.syncope.common.types.UserRequestType.UPDATE;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n-\n import javax.persistence.RollbackException;\n-\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.UserRequestSubCategory;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.beans.UserRequest;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n import org.apache.syncope.core.rest.data.UserRequestDataBinder;\n+import org.apache.syncope.core.util.EntitlementUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -94,11 +96,13 @@ public UserRequestTO create(final UserTO userTO) {\n         }\n \n         UserRequest request = new UserRequest();\n-        request.setUserTO(userTO);\n+        request.setUsername(userTO.getUsername());\n+        request.createUser(userTO);\n+        request.setCreationDate(new Date());\n         request = userRequestDAO.save(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.create, Result.success,\n-                \"Successfully created user request for \" + request.getUserTO().getUsername());\n+                \"Successfully created user request for \" + request.getUsername());\n \n         return binder.getUserRequestTO(request);\n     }\n@@ -114,11 +118,35 @@ public UserRequestTO update(final UserMod userMod) {\n         }\n \n         UserRequest request = new UserRequest();\n-        request.setUserMod(userMod);\n+        request.setUsername(binder.getUserFromId(userMod.getId()).getUsername());\n+        request.updateUser(userMod);\n+        request.setCreationDate(new Date());\n         request = userRequestDAO.save(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n-                \"Successfully updated user request for \" + request.getUserMod().getId());\n+                \"Successfully updated user request for \" + request.getUsername());\n+\n+        return binder.getUserRequestTO(request);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public UserRequestTO delete(final Long userId) {\n+        LOG.debug(\"Request user delete called with {}\", userId);\n+\n+        try {\n+            binder.testDelete(userId);\n+        } catch (RollbackException e) {\n+            LOG.debug(\"Testing delete - ignore exception\");\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUsername(binder.getUserFromId(userId).getUsername());\n+        request.deleteUser(userId);\n+        request.setCreationDate(new Date());\n+        request = userRequestDAO.save(request);\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n+                \"Successfully deleted user request for user\" + request.getUsername());\n \n         return binder.getUserRequestTO(request);\n     }\n@@ -154,6 +182,19 @@ public List<UserRequestTO> list(final boolean executed) {\n         return result;\n     }\n \n+    public List<UserRequestTO> listByUsername(final String username) {\n+        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n+\n+        for (UserRequest request : userRequestDAO.findAll(username)) {\n+            result.add(binder.getUserRequestTO(request));\n+        }\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n+                String.format(\"Successfully listed all %s's requests: %d\", username, result.size()));\n+\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n     @Transactional(readOnly = true)\n     public UserRequestTO read(final Long requestId) {\n@@ -164,49 +205,47 @@ public UserRequestTO read(final Long requestId) {\n \n         final UserRequestTO userRequestTO = binder.getUserRequestTO(request);\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n-                \"Successfully read user request for \" + getUserId(userRequestTO));\n+                \"Successfully read user request for \" + request.getUsername());\n \n         return userRequestTO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    public UserRequestTO delete(final Long userId) {\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n-        try {\n-            binder.testDelete(userId);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing delete - ignore exception\");\n+    @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n+    public UserRequestTO deleteRequest(final Long requestId) {\n+        UserRequest request = userRequestDAO.find(requestId);\n+        if (request == null) {\n+            throw new NotFoundException(\"User request \" + requestId);\n         }\n \n-        UserRequest request = new UserRequest();\n-        request.setUserId(userId);\n-        request = userRequestDAO.save(request);\n+        UserRequestTO requestToDelete = binder.getUserRequestTO(request);\n+        userRequestDAO.delete(requestId);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + userId);\n+                \"Successfully deleted user request for user\" + request.getUsername());\n \n-        return binder.getUserRequestTO(request);\n+        return requestToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n-    public UserRequestTO deleteRequest(final Long requestId) {\n+    @PreAuthorize(\"hasRole('USER_REQUEST_CLAIM')\")\n+    public UserRequestTO claim(final Long requestId) {\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n \n-        UserRequestTO requestToDelete = binder.getUserRequestTO(request);\n+        request.setOwner(EntitlementUtil.getAuthenticatedUsername());\n+        request.setClaimDate(new Date());\n \n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + request.getUserId());\n+        final UserRequestTO userRequestTO = binder.getUserRequestTO(userRequestDAO.save(request));\n \n-        userRequestDAO.delete(requestId);\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.claim, Result.success,\n+                String.format(\"Successfully claimed user request %s by %s\",\n+                userRequestTO.getId(), userRequestTO.getOwner()));\n \n-        return requestToDelete;\n+        return userRequestTO;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_REQUEST_READ') and (\"\n+    @PreAuthorize(\"hasRole('USER_REQUEST_EXECUTE') and (\"\n             + \"(hasRole('USER_CREATE') and #request.type == #request.type.CREATE) or \"\n             + \"(hasRole('USER_UPDATE') and #request.type == #request.type.UPDATE) or \"\n             + \"(hasRole('USER_DELETE') and #request.type == #request.type.DELETE))\")\n@@ -216,6 +255,14 @@ public UserTO execute(final UserRequestTO request, final UserTO reviewed, final\n             throw new NotFoundException(\"Executable user request \" + request.getId());\n         }\n \n+        if (StringUtils.isBlank(request.getOwner())\n+                || !request.getOwner().equalsIgnoreCase(EntitlementUtil.getAuthenticatedUsername())) {\n+            final SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.UNAUTHORIZED);\n+            scce.addException(new SyncopeClientException(SyncopeClientExceptionType.Unauthorized));\n+            throw scce;\n+        }\n+\n         final UserTO res;\n \n         switch (request.getType()) {\n@@ -233,18 +280,12 @@ public UserTO execute(final UserRequestTO request, final UserTO reviewed, final\n         }\n \n         userRequest.setExecuted(true);\n+        userRequest.setExecutionDate(new Date());\n         userRequestDAO.save(userRequest);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.execute, Result.success,\n-                String.format(\"Successfully executed %s request for user %s\",\n-                request.getType(), getUserId(request)));\n+                String.format(\"Successfully executed %s request for user %d\", request.getType(), res.getId()));\n \n         return res;\n     }\n-\n-    private String getUserId(final UserRequestTO request) {\n-        return request.getType() == CREATE ? request.getUserTO().getUsername()\n-                : request.getType() == UPDATE ? String.valueOf(request.getUserMod().getId())\n-                : String.valueOf(request.getUserId());\n-    }\n }"},{"sha":"11ecf9e7199b05687a10982d34fa98c46ad876db","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -89,6 +89,11 @@ public void delete(final Long requestId) {\n         controller.deleteRequest(requestId);\n     }\n \n+    @Override\n+    public UserRequestTO claim(final Long requestId) {\n+        return controller.claim(requestId);\n+    }\n+\n     @Override\n     public UserTO executeCreate(final Long requestId, final UserTO reviewed) {\n         return controller.execute(controller.read(requestId), reviewed, null);\n@@ -103,4 +108,9 @@ public UserTO executeUpdate(final Long requestId, final UserMod changes) {\n     public UserTO executeDelete(final Long requestId) {\n         return controller.execute(controller.read(requestId), null, null);\n     }\n+\n+    @Override\n+    public List<UserRequestTO> listByUsername(final String username) {\n+        return controller.listByUsername(username);\n+    }\n }"},{"sha":"47e413b3dfe5d2daa2e9d472767e89a6bc7d8f53","filename":"core/src/main/resources/content.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -88,6 +88,8 @@ under the License.\n   <Entitlement name=\"USER_REQUEST_LIST\"/>\n   <Entitlement name=\"USER_REQUEST_READ\"/>\n   <Entitlement name=\"USER_REQUEST_DELETE\"/>\n+  <Entitlement name=\"USER_REQUEST_EXECUTE\"/>\n+  <Entitlement name=\"USER_REQUEST_CLAIM\"/>\n   <Entitlement name=\"REPORT_LIST\"/>\n   <Entitlement name=\"REPORT_READ\"/>\n   <Entitlement name=\"REPORT_CREATE\"/>"},{"sha":"288b990f9bb6a7d4c5d8d42ee147a9d6c2d76a57","filename":"core/src/main/resources/quartz/tables_sqlServer.sql","status":"modified","additions":40,"deletions":80,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -16,80 +16,63 @@\n -- under the License.\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)\n-ALTER TABLE [dbo].[QRTZ_TRIGGERS] DROP CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS\n-GO\n+ALTER TABLE [dbo].[QRTZ_TRIGGERS] DROP CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS;\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)\n-ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] DROP CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS\n-GO\n+ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] DROP CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS;\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)\n-ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS\n-GO\n+ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS;\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)\n-ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS\n-GO\n+ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS;\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CALENDARS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_CALENDARS]\n-GO\n+DROP TABLE [dbo].[QRTZ_CALENDARS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CRON_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_CRON_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_CRON_TRIGGERS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_BLOB_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_BLOB_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_BLOB_TRIGGERS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_FIRED_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_FIRED_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_FIRED_TRIGGERS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_PAUSED_TRIGGER_GRPS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS]\n-GO\n+DROP TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SCHEDULER_STATE]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_SCHEDULER_STATE]\n-GO\n+DROP TABLE [dbo].[QRTZ_SCHEDULER_STATE];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_LOCKS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_LOCKS]\n-GO\n+DROP TABLE [dbo].[QRTZ_LOCKS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_JOB_DETAILS]\n-GO\n+DROP TABLE [dbo].[QRTZ_JOB_DETAILS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SIMPLE_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SIMPROP_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS];\n \n IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[QRTZ_TRIGGERS]\n-GO\n+DROP TABLE [dbo].[QRTZ_TRIGGERS];\n \n CREATE TABLE [dbo].[QRTZ_CALENDARS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [CALENDAR_NAME] [VARCHAR] (200)  NOT NULL ,\n   [CALENDAR] [IMAGE] NOT NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_CRON_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,\n   [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,\n   [CRON_EXPRESSION] [VARCHAR] (120)  NOT NULL ,\n   [TIME_ZONE_ID] [VARCHAR] (80) \n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_FIRED_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n@@ -105,28 +88,24 @@ CREATE TABLE [dbo].[QRTZ_FIRED_TRIGGERS] (\n   [JOB_GROUP] [VARCHAR] (200)  NULL ,\n   [IS_NONCONCURRENT] [VARCHAR] (1)  NULL ,\n   [REQUESTS_RECOVERY] [VARCHAR] (1)  NULL \n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL \n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_SCHEDULER_STATE] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [INSTANCE_NAME] [VARCHAR] (200)  NOT NULL ,\n   [LAST_CHECKIN_TIME] [BIGINT] NOT NULL ,\n   [CHECKIN_INTERVAL] [BIGINT] NOT NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_LOCKS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [LOCK_NAME] [VARCHAR] (40)  NOT NULL \n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_JOB_DETAILS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n@@ -139,8 +118,7 @@ CREATE TABLE [dbo].[QRTZ_JOB_DETAILS] (\n   [IS_UPDATE_DATA] [VARCHAR] (1)  NOT NULL ,\n   [REQUESTS_RECOVERY] [VARCHAR] (1)  NOT NULL ,\n   [JOB_DATA] [IMAGE] NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n@@ -149,8 +127,7 @@ CREATE TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] (\n   [REPEAT_COUNT] [BIGINT] NOT NULL ,\n   [REPEAT_INTERVAL] [BIGINT] NOT NULL ,\n   [TIMES_TRIGGERED] [BIGINT] NOT NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n@@ -167,16 +144,14 @@ CREATE TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] (\n   [DEC_PROP_2] [NUMERIC] (13,4) NULL,\n   [BOOL_PROP_1] [VARCHAR] (1) NULL,\n   [BOOL_PROP_2] [VARCHAR] (1) NULL,\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_BLOB_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n   [TRIGGER_NAME] [VARCHAR] (200)  NOT NULL ,\n   [TRIGGER_GROUP] [VARCHAR] (200)  NOT NULL ,\n   [BLOB_DATA] [IMAGE] NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n CREATE TABLE [dbo].[QRTZ_TRIGGERS] (\n   [SCHED_NAME] [VARCHAR] (120)  NOT NULL ,\n@@ -195,93 +170,82 @@ CREATE TABLE [dbo].[QRTZ_TRIGGERS] (\n   [CALENDAR_NAME] [VARCHAR] (200)  NULL ,\n   [MISFIRE_INSTR] [SMALLINT] NULL ,\n   [JOB_DATA] [IMAGE] NULL\n-) ON [PRIMARY]\n-GO\n+) ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_CALENDARS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_CALENDARS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [CALENDAR_NAME]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_CRON_TRIGGERS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_FIRED_TRIGGERS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_FIRED_TRIGGERS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [ENTRY_ID]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_PAUSED_TRIGGER_GRPS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [TRIGGER_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_SCHEDULER_STATE] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_SCHEDULER_STATE] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [INSTANCE_NAME]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_LOCKS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_LOCKS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [LOCK_NAME]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_JOB_DETAILS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_JOB_DETAILS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [JOB_NAME],\n     [JOB_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_SIMPLE_TRIGGERS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_SIMPROP_TRIGGERS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_TRIGGERS] WITH NOCHECK ADD\n   CONSTRAINT [PK_QRTZ_TRIGGERS] PRIMARY KEY  CLUSTERED\n   (\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  )  ON [PRIMARY]\n-GO\n+  )  ON [PRIMARY];\n \n ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] ADD\n   CONSTRAINT [FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY\n@@ -293,8 +257,7 @@ ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] ADD\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  ) ON DELETE CASCADE\n-GO\n+  ) ON DELETE CASCADE;\n \n ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] ADD\n   CONSTRAINT [FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY\n@@ -306,8 +269,7 @@ ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] ADD\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  ) ON DELETE CASCADE\n-GO\n+  ) ON DELETE CASCADE;\n \n ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] ADD\n   CONSTRAINT [FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY\n@@ -319,8 +281,7 @@ ALTER TABLE [dbo].[QRTZ_SIMPROP_TRIGGERS] ADD\n     [SCHED_NAME],\n     [TRIGGER_NAME],\n     [TRIGGER_GROUP]\n-  ) ON DELETE CASCADE\n-GO\n+  ) ON DELETE CASCADE;\n \n ALTER TABLE [dbo].[QRTZ_TRIGGERS] ADD\n   CONSTRAINT [FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS] FOREIGN KEY\n@@ -332,5 +293,4 @@ ALTER TABLE [dbo].[QRTZ_TRIGGERS] ADD\n     [SCHED_NAME],\n     [JOB_NAME],\n     [JOB_GROUP]\n-  )\n-GO\n+  );"},{"sha":"e55960aef2ec27f33d316d0f4b4cc3d9bfb39b89","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -41,7 +41,7 @@ public class EntitlementTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 84, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 86, list.size());\n     }\n \n     @Test"},{"sha":"80ea2dfac53a5a2ba24986ff85e3b58f30e18e4d","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.types.UserRequestType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -202,14 +204,20 @@ public void delete() {\n \n     @Test\n     public void execute() {\n-        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"ex.create@syncope.apache.org\");\n+        final String USERNAME = \"ex.create@syncope.apache.org\";\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(USERNAME);\n         final String initialPassword = userTO.getPassword();\n \n         UserRequestService selfservice = createServiceInstance(UserRequestService.class, null, null);\n         Response response = createUserRequest(selfservice, new UserRequestTO(userTO));\n \n         UserRequestTO userRequest = getObject(response, UserRequestTO.class, userRequestService);\n         assertNotNull(userRequest);\n+        assertEquals(UserRequestType.CREATE, userRequest.getType());\n+        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n+        assertNotNull(userRequest.getCreationDate());\n+        assertNull(userRequest.getClaimDate());\n+        assertNull(userRequest.getExecutionDate());\n \n         try {\n             userService.read(userTO.getUsername());\n@@ -219,8 +227,21 @@ public void execute() {\n         }\n \n         assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        userRequest = userRequestService.claim(userRequest.getId());\n+        assertEquals(\"admin\", userRequest.getOwner());\n+        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n+        assertNotNull(userRequest.getCreationDate());\n+        assertNotNull(userRequest.getClaimDate());\n+        assertNull(userRequest.getExecutionDate());\n+\n         assertNotNull(userRequestService.executeCreate(userRequest.getId(), userTO));\n-        assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n+\n+        userRequest = userRequestService.read(userRequest.getId());\n+        assertTrue(userRequest.isExecuted());\n+        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n+        assertNotNull(userRequest.getCreationDate());\n+        assertNotNull(userRequest.getClaimDate());\n+        assertNotNull(userRequest.getExecutionDate());\n \n         for (UserRequestTO userRequestTO : userRequestService.list()) {\n             assertFalse(userRequestTO.isExecuted());\n@@ -239,6 +260,8 @@ public void execute() {\n \n         userRequest = getObject(response, UserRequestTO.class, userRequestService);\n         assertNotNull(userRequest);\n+        assertEquals(UserRequestType.UPDATE, userRequest.getType());\n+        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n \n         final String newpwd = \"new\" + initialPassword + \"!\";\n \n@@ -247,6 +270,8 @@ public void execute() {\n         furtherChanges.setPassword(newpwd);\n \n         assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        userRequest = userRequestService.claim(userRequest.getId());\n+        assertEquals(\"admin\", userRequest.getOwner());\n         assertNotNull(userRequestService.executeUpdate(userRequest.getId(), furtherChanges));\n         assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n \n@@ -270,8 +295,12 @@ public void execute() {\n \n         userRequest = getObject(response, UserRequestTO.class, userRequestService);\n         assertNotNull(userRequest);\n+        assertEquals(UserRequestType.DELETE, userRequest.getType());\n+        assertTrue(userRequest.getUsername().endsWith(USERNAME));\n \n         assertFalse(userRequestService.read(userRequest.getId()).isExecuted());\n+        userRequest = userRequestService.claim(userRequest.getId());\n+        assertEquals(\"admin\", userRequest.getOwner());\n         userRequestService.executeDelete(userRequest.getId());\n         assertTrue(userRequestService.read(userRequest.getId()).isExecuted());\n \n@@ -285,6 +314,21 @@ public void execute() {\n         } catch (Exception ignore) {\n             // ignore\n         }\n+\n+        assertEquals(3, userRequestService.listByUsername(userTO.getUsername()).size());\n+    }\n+\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void executeNoClaim() {\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"reqnoclaim@syncope.apache.org\");\n+\n+        final UserRequestService selfservice = createServiceInstance(UserRequestService.class, null, null);\n+\n+        final UserRequestTO userRequest = getObject(\n+                createUserRequest(selfservice, new UserRequestTO(userTO)), UserRequestTO.class, userRequestService);\n+        assertNotNull(userRequest);\n+\n+        userRequestService.executeCreate(userRequest.getId(), userTO);\n     }\n \n     private Response createUserRequest(final UserRequestService service, final UserRequestTO userRequestTO) {"},{"sha":"f71dbdd5722e9550626184a3634350f969ac597f","filename":"core/src/test/resources/content.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc8874345d51ed43528f4f2d3923d86c620a709b/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=fc8874345d51ed43528f4f2d3923d86c620a709b","patch":"@@ -863,6 +863,8 @@ under the License.\n   <Entitlement name=\"USER_REQUEST_LIST\"/>\n   <Entitlement name=\"USER_REQUEST_READ\"/>\n   <Entitlement name=\"USER_REQUEST_DELETE\"/>\n+  <Entitlement name=\"USER_REQUEST_EXECUTE\"/>\n+  <Entitlement name=\"USER_REQUEST_CLAIM\"/>\n   <Entitlement name=\"REPORT_LIST\"/>\n   <Entitlement name=\"REPORT_READ\"/>\n   <Entitlement name=\"REPORT_CREATE\"/>"}]}