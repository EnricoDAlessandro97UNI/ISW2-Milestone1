{"sha":"f01769cc4f997bf6128aaba098b720c39de18a9e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYwMTc2OWNjNGY5OTdiZjYxMjhhYWJhMDk4YjcyMGMzOWRlMThhOWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-10T16:52:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-10T16:52:31Z"},"message":"[SYNCOPE-241] Applying provided patch (SYNCOPE-241-3.patch)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1431495 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82b7507962e4a1ff4669bf38df0b6d55d31042ca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/82b7507962e4a1ff4669bf38df0b6d55d31042ca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f01769cc4f997bf6128aaba098b720c39de18a9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f01769cc4f997bf6128aaba098b720c39de18a9e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f01769cc4f997bf6128aaba098b720c39de18a9e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f01769cc4f997bf6128aaba098b720c39de18a9e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5e4bb93ca364638e62550a35353dc6a6ddae7c0c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e4bb93ca364638e62550a35353dc6a6ddae7c0c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e4bb93ca364638e62550a35353dc6a6ddae7c0c"}],"stats":{"total":884,"additions":504,"deletions":380},"files":[{"sha":"7aa3893a7c1b555f06f611fa2fee4f1c752dec38","filename":"core/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -418,8 +418,8 @@ under the License.\n                     <exclude name=\"**/workflow.properties\" />\n                   </patternset>\n                 </unzip>\n-                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/quartz/TestSyncActions.class\" \n-                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/quartz\" />\n+                <copy file=\"${project.build.directory}/test-classes/org/apache/syncope/core/sync/TestSyncActions.class\" \n+                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/apache/syncope/core/sync\" />\n                 <copy file=\"${project.build.directory}/test-classes/db.jsp\" todir=\"${cargo.run.dir}\" />\n                 <copy todir=\"${cargo.run.dir}/WEB-INF/classes\" includeEmptyDirs=\"false\">\n                   <fileset dir=\"${project.build.directory}/test-classes\">"},{"sha":"8813c3423c6c849d31eebb7b9045b4eb027af8d5","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncActions.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,8 +21,8 @@\n import java.util.List;\n import org.apache.syncope.client.mod.AbstractAttributableMod;\n import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.core.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n /**\n@@ -36,7 +36,7 @@ public interface SyncActions {\n      * @param handler synchronization handler being executed.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    void beforeAll(final SyncopeSyncResultHandler handler) throws JobExecutionException;\n+    void beforeAll(final SyncResultsHandler handler) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to create a synchronized user locally.\n@@ -47,7 +47,7 @@ public interface SyncActions {\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+    <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n             final SyncDelta delta, final T subject) throws JobExecutionException;\n \n     /**\n@@ -61,7 +61,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResul\n      * @throws JobExecutionException in case of generic failure.\n      */\n     <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException;\n \n     /**\n@@ -73,7 +73,7 @@ <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncopeSyncResultHandler handler,\n+    <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncResultsHandler handler,\n             final SyncDelta delta, final T subject) throws JobExecutionException;\n \n     /**\n@@ -85,7 +85,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncopeSyncResul\n      * @param result global synchronization results at the current synchronization step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler, final SyncDelta delta,\n+    <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler, final SyncDelta delta,\n             final T subject, final SyncResult result) throws JobExecutionException;\n \n     /**\n@@ -95,5 +95,5 @@ <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler han\n      * @param results synchronization result\n      * @throws JobExecutionException in case of generic failure\n      */\n-    void afterAll(final SyncopeSyncResultHandler handler, final List<SyncResult> results) throws JobExecutionException;\n+    void afterAll(final SyncResultsHandler handler, final List<SyncResult> results) throws JobExecutionException;\n }"},{"sha":"27996e0e8e15c76ab6f59d780cf0dfbee33b29e2","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.beans.SyncActions;\n import org.apache.syncope.core.persistence.beans.SyncResult;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n /**\n@@ -32,38 +33,38 @@\n public class DefaultSyncActions implements SyncActions {\n \n     @Override\n-    public void beforeAll(final SyncopeSyncResultHandler handler) throws JobExecutionException {\n+    public void beforeAll(final SyncResultsHandler handler) throws JobExecutionException {\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n             final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n-            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject) throws JobExecutionException {\n+            final SyncResultsHandler handler, final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler,\n+    public <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler,\n             final SyncDelta delta, final T subject, final SyncResult result) throws JobExecutionException {\n     }\n \n     @Override\n-    public void afterAll(final SyncopeSyncResultHandler handler, final List<SyncResult> results)\n+    public void afterAll(final SyncResultsHandler handler, final List<SyncResult> results)\n             throws JobExecutionException {\n     }\n }"},{"sha":"3169e388237d9b8206c19302b509881b3db8e55d","filename":"core/src/main/java/org/apache/syncope/core/sync/LDAPMembershipSyncActions.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FLDAPMembershipSyncActions.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -50,6 +50,7 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n@@ -100,11 +101,13 @@ protected String getGroupMembershipAttrName() {\n      * Keep track of members of the role being updated <b>before</b> actual update takes place. This is not needed on\n      * <ul> <li>beforeCreate() - because the synchronizing role does not exist yet on Syncope</li> <li>beforeDelete() -\n      * because role delete cascades as membership removal for all users involved</li> </ul>\n+     *\n+     * {@inheritDoc}\n      */\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException {\n \n         if (subject instanceof RoleTO) {\n@@ -268,15 +271,21 @@ protected void synchronizeMemberships(final SyncopeSyncResultHandler handler, fi\n \n     /**\n      * Synchronize membership at role synchronization time (because SyncJob first synchronize users then roles).\n+     * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AbstractAttributableTO> void after(final SyncopeSyncResultHandler handler, final SyncDelta delta,\n+    public <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler, final SyncDelta delta,\n             final T subject, final SyncResult result) throws JobExecutionException {\n \n-        if (!(subject instanceof RoleTO) || handler.getSyncTask().getResource().getUmapping() == null) {\n+        if (!(handler instanceof SyncopeSyncResultHandler)) {\n+            return;\n+        }\n+\n+        SyncopeSyncResultHandler intHandler = (SyncopeSyncResultHandler) handler;\n+        if (!(subject instanceof RoleTO) || intHandler.getSyncTask().getResource().getUmapping() == null) {\n             super.after(handler, delta, subject, result);\n         } else {\n-            synchronizeMemberships(handler, delta, (RoleTO) subject);\n+            synchronizeMemberships(intHandler, delta, (RoleTO) subject);\n         }\n     }\n }"},{"sha":"664cfbead8f2549fdb929677a5efb755fa829e66","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"renamed","additions":28,"deletions":6,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -16,31 +16,49 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.util;\n+package org.apache.syncope.core.connid;\n+\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.core.AbstractTest;\n-import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n+import org.apache.syncope.core.util.IncompatiblePolicyException;\n import org.apache.syncope.types.CipherAlgorithm;\n import org.apache.syncope.types.PasswordPolicySpec;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class PasswordGeneratorTest extends AbstractTest {\n+public class PasswordGeneratorTest extends AbstractDAOTest {\n \n     @Autowired\n     private PasswordGenerator passwordGenerator;\n \n     @Autowired\n     private UserDAO userDAO;\n \n+    @Test\n+    public void issueSYNCOPE226() {\n+        SyncopeUser user = userDAO.find(5L);\n+        String password = \"\";\n+        try {\n+            password = passwordGenerator.generateUserPassword(user);\n+        } catch (IncompatiblePolicyException ex) {\n+            fail(ex.getMessage());\n+        }\n+        assertNotNull(password);\n+\n+        user.setPassword(password, CipherAlgorithm.AES, 0);\n+\n+        SyncopeUser actual = userDAO.save(user);\n+        assertNotNull(actual);\n+    }\n+\n     @Test\n     public void testPasswordGenerator() {\n         SyncopeUser user = userDAO.find(5L);\n@@ -60,6 +78,7 @@ public void testPasswordGenerator() {\n     @Test\n     public void startEndWithDigit()\n             throws IncompatiblePolicyException {\n+\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -76,6 +95,7 @@ public void startEndWithDigit()\n     @Test\n     public void startWithDigitAndWithAlpha()\n             throws IncompatiblePolicyException {\n+\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -92,6 +112,7 @@ public void startWithDigitAndWithAlpha()\n     @Test\n     public void passwordWithNonAlpha()\n             throws IncompatiblePolicyException {\n+\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setNonAlphanumericRequired(true);\n \n@@ -101,13 +122,14 @@ public void passwordWithNonAlpha()\n         passwordPolicySpecs.add(passwordPolicySpec);\n         passwordPolicySpecs.add(passwordPolicySpec2);\n         String generatedPassword = passwordGenerator.generatePasswordFromPwdSpec(passwordPolicySpecs);\n-        assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword.toString()).matches());\n+        assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test(expected = IncompatiblePolicyException.class)\n     public void incopatiblePolicies()\n             throws IncompatiblePolicyException {\n+\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMinLength(12);\n ","previous_filename":"core/src/test/java/org/apache/syncope/core/util/PasswordGeneratorTest.java"},{"sha":"fc416f1f8ef07564dff3869fb1e98a2f90609070","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AbstractDAOTest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n+    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n+public abstract class AbstractDAOTest {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractDAOTest.class);\n+\n+    protected static String connidSoapVersion;\n+\n+    protected static String bundlesDirectory;\n+\n+    @BeforeClass\n+    public static void setUpIdentityConnectorsBundles() throws IOException {\n+        Properties props = new Properties();\n+        InputStream propStream = null;\n+        try {\n+            propStream = AbstractDAOTest.class.getResourceAsStream(\"/bundles.properties\");\n+            props.load(propStream);\n+            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n+            bundlesDirectory = props.getProperty(\"bundles.directory\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load bundles.properties\", e);\n+        } finally {\n+            if (propStream != null) {\n+                propStream.close();\n+            }\n+        }\n+        assertNotNull(connidSoapVersion);\n+        assertNotNull(bundlesDirectory);\n+    }\n+}\n+"},{"sha":"690429a237c6e7ee2bd6ec954b3658cfd938fe10","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,28 +18,24 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n-import org.apache.syncope.core.persistence.dao.AttrDAO;\n import static org.junit.Assert.*;\n \n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import java.util.List;\n import javax.validation.ValidationException;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.beans.user.UAttr;\n-import org.apache.syncope.core.persistence.beans.user.USchema;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.UAttrUniqueValue;\n+import org.apache.syncope.core.persistence.beans.user.USchema;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.EntityViolationType;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class AttrTest extends AbstractTest {\n+public class AttrTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;"},{"sha":"e961b9e4636f68062223d1addfd37603ff7cb661","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -33,7 +32,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ConnInstanceTest extends AbstractTest {\n+public class ConnInstanceTest extends AbstractDAOTest {\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;"},{"sha":"aa8d8ba7948043ecd7bb7ff3a1a765dec0e82f4c","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerAttrTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.beans.user.UDerAttr;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.membership.MAttrValue;\n import org.apache.syncope.core.persistence.beans.membership.MDerAttr;\n import org.apache.syncope.core.persistence.beans.membership.MDerSchema;\n@@ -39,7 +38,7 @@\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n \n @Transactional\n-public class DerAttrTest extends AbstractTest {\n+public class DerAttrTest extends AbstractDAOTest {\n \n     @Autowired\n     private DerAttrDAO derAttrDAO;"},{"sha":"302a1a8f4f79d92a6fe3432bf5fd9817aa90e0d4","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,16 +21,15 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class DerSchemaTest extends AbstractTest {\n+public class DerSchemaTest extends AbstractDAOTest {\n \n     @Autowired\n     private DerSchemaDAO derSchemaDAO;"},{"sha":"4aef60ab618fde40105cefd25894d7f4da3ba7f4","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,20 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.beans.Entitlement;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.beans.Entitlement;\n-import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.apache.syncope.core.AbstractTest;\n \n @Transactional\n-public class EntitlementTest extends AbstractTest {\n+public class EntitlementTest extends AbstractDAOTest {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;"},{"sha":"be2758fc75f01ea7edc1fe18736e0bdb91b366ff","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/MembershipTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -27,10 +27,9 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.AbstractTest;\n \n @Transactional\n-public class MembershipTest extends AbstractTest {\n+public class MembershipTest extends AbstractDAOTest {\n \n     @Autowired\n     private MembershipDAO membershipDAO;"},{"sha":"f972d964df9f7baa77fdbe4ef6c1eb09a4a7ee19","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.MembershipCond;\n import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.types.EntityViolationType;\n@@ -36,7 +35,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class NotificationTest extends AbstractTest {\n+public class NotificationTest extends AbstractDAOTest {\n \n     @Autowired\n     private NotificationDAO notificationDAO;"},{"sha":"4de6484a0c51e919c256401358be53b9a2991bc1","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,20 +21,19 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.apache.syncope.types.PolicyType;\n import org.apache.syncope.types.PasswordPolicySpec;\n+import org.apache.syncope.types.PolicyType;\n import org.apache.syncope.types.SyncPolicySpec;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class PolicyTest extends AbstractTest {\n+public class PolicyTest extends AbstractDAOTest {\n \n     @Autowired\n     private PolicyDAO policyDAO;"},{"sha":"55a98a929e58e141d015da282bada5edb8d7df02","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ReportTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,19 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.ReportDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.client.report.UserReportletConf;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.Report;\n \n @Transactional\n-public class ReportTest extends AbstractTest {\n+public class ReportTest extends AbstractDAOTest {\n \n     @Autowired\n     private ReportDAO reportDAO;"},{"sha":"227bb209cdf6062434adcf868921fd3138e9a1a4","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -22,10 +22,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -36,7 +35,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ResourceTest extends AbstractTest {\n+public class ResourceTest extends AbstractDAOTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;"},{"sha":"9d7dab04bb65515a788c6a1a7d523c866ffeefd8","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -25,12 +25,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n \n @Transactional\n-public class RoleTest extends AbstractTest {\n+public class RoleTest extends AbstractDAOTest {\n \n     @Autowired\n     private RoleDAO roleDAO;"},{"sha":"4b9e7fd81ddeacec4183c002b3b092a851bd1abd","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -26,7 +26,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -35,7 +34,7 @@\n import org.apache.syncope.types.SchemaType;\n \n @Transactional\n-public class SchemaTest extends AbstractTest {\n+public class SchemaTest extends AbstractDAOTest {\n \n     @Autowired\n     private SchemaDAO schemaDAO;"},{"sha":"66e2b56b7bad17878cbba6e4279708f40ddce836","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/TaskExecTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import java.util.Date;\n import static org.junit.Assert.*;\n \n+import java.util.Date;\n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n@@ -34,7 +33,7 @@\n import org.apache.syncope.types.PropagationTaskExecStatus;\n \n @Transactional\n-public class TaskExecTest extends AbstractTest {\n+public class TaskExecTest extends AbstractDAOTest {\n \n     @Autowired\n     private TaskExecDAO taskExecDAO;"},{"sha":"b304d2cbdc1d14c28c5062823afb98e61cf290be","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":1,"deletions":86,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -23,15 +23,11 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.apache.syncope.core.quartz.TestSyncActions;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.ResourceOperation;\n@@ -42,7 +38,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class TaskTest extends AbstractTest {\n+public class TaskTest extends AbstractDAOTest {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -99,58 +95,6 @@ public void savePropagationTask() {\n         assertEquals(task, actual);\n     }\n \n-    @Test\n-    public void saveSyncTask() {\n-        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-\n-        SyncTask task = new SyncTask();\n-        task.setName(\"saveSyncTask\");\n-        task.setDescription(\"SyncTask description\");\n-        task.setUserTemplate(new UserTO());\n-        task.setCronExpression(\"BLA BLA\");\n-\n-        // this save() fails because of an invalid Cron Expression\n-        InvalidEntityException exception = null;\n-        try {\n-            taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-\n-        task.setCronExpression(null);\n-        // this save() fails because a SyncTask requires a target resource\n-        exception = null;\n-        try {\n-            taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-\n-        task.setResource(resource);\n-        task.setActionsClassName(getClass().getName());\n-\n-        // this save() fails because jobActionsClassName does not implement \n-        // the right interface\n-        exception = null;\n-        try {\n-            taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-\n-        task.setActionsClassName(TestSyncActions.class.getName());\n-        // this save() finally works\n-        task = taskDAO.save(task);\n-        assertNotNull(task);\n-\n-        SyncTask actual = taskDAO.find(task.getId());\n-        assertEquals(task, actual);\n-    }\n-\n     @Test\n     public void delete() {\n         PropagationTask task = taskDAO.find(1L);\n@@ -167,33 +111,4 @@ public void delete() {\n         assertNotNull(resource);\n         assertFalse(taskDAO.findAll(resource, PropagationTask.class).contains(task));\n     }\n-\n-    @Test\n-    public void issueSYNCOPE144() {\n-        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-\n-        SyncTask task = new SyncTask();\n-\n-        task.setResource(resource);\n-        task.setName(\"issueSYNCOPE144\");\n-        task.setDescription(\"issueSYNCOPE144 Description\");\n-        task.setActionsClassName(TestSyncActions.class.getName());\n-\n-        task = taskDAO.save(task);\n-        assertNotNull(task);\n-\n-        SyncTask actual = taskDAO.find(task.getId());\n-        assertEquals(task, actual);\n-        assertEquals(\"issueSYNCOPE144\", actual.getName());\n-        assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n-\n-        actual.setName(\"issueSYNCOPE144_2\");\n-        actual.setDescription(\"issueSYNCOPE144 Description_2\");\n-\n-        actual = taskDAO.save(actual);\n-        assertNotNull(actual);\n-        assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n-        assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n-    }\n }"},{"sha":"1e35b46ad4fbb69b618d97a8f9ae7b7e2067df52","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -23,23 +23,17 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.core.AbstractTest;\n-import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.util.IncompatiblePolicyException;\n import org.apache.syncope.types.CipherAlgorithm;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class UserTest extends AbstractTest {\n-\n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n+public class UserTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -195,20 +189,4 @@ public void issue237() {\n         assertNotNull(actual);\n     }\n \n-    @Test\n-    public void issueSYNCOPE226() {\n-        SyncopeUser user = userDAO.find(5L);\n-        String password = \"\";\n-        try {\n-            password = passwordGenerator.generateUserPassword(user);\n-        } catch (IncompatiblePolicyException ex) {\n-            fail(ex.getMessage());\n-        }\n-        assertNotNull(password);\n-\n-        user.setPassword(password, CipherAlgorithm.AES, 0);\n-\n-        SyncopeUser actual = userDAO.save(user);\n-        assertNotNull(actual);\n-    }\n }"},{"sha":"39989ad0d17f7105e31d8f15aefb762d7bd89a42","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/VirAttrTest.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,19 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.dao.MembershipDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.membership.MVirAttr;\n import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n@@ -41,7 +35,7 @@\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n \n @Transactional\n-public class VirAttrTest extends AbstractTest {\n+public class VirAttrTest extends AbstractDAOTest {\n \n     @Autowired\n     private VirAttrDAO virAttrDAO;"},{"sha":"e45f5c437f0873f50f5cea6a95288d50a13f8cdd","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,21 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n-import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n \n @Transactional\n-public class VirSchemaTest extends AbstractTest {\n+public class VirSchemaTest extends AbstractDAOTest {\n \n     @Autowired\n     private VirSchemaDAO virSchemaDAO;"},{"sha":"3bf673cd9c4361c1cd302726d9addcf1eaa0fc5b","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -19,22 +19,19 @@\n package org.apache.syncope.core.persistence.relationships;\n \n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.beans.user.UAttr;\n-import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n-import org.apache.syncope.core.persistence.dao.AttrDAO;\n-import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.membership.MAttr;\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.beans.user.UAttr;\n+import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.beans.user.UDerAttr;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n+import org.apache.syncope.core.persistence.dao.AttrDAO;\n+import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n import org.apache.syncope.core.persistence.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.MembershipDAO;\n@@ -43,9 +40,12 @@\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SchemaType;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class AttrTest extends AbstractTest {\n+public class AttrTest extends AbstractDAOTest {\n \n     @Autowired\n     private AttrDAO attrDAO;"},{"sha":"7aca699bb71813953dc6141a71493ed06d43d6ad","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/ConnInstanceTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,18 +21,18 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.types.ConnectorCapability;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ConnInstanceTest extends AbstractTest {\n+public class ConnInstanceTest extends AbstractDAOTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;"},{"sha":"8a0f6dab1bcb409b14a4e93f597dcaeff8405558","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/DerSchemaTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -19,21 +19,21 @@\n package org.apache.syncope.core.persistence.relationships;\n \n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.user.UDerAttr;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class DerSchemaTest extends AbstractTest {\n+public class DerSchemaTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;"},{"sha":"9a3c41911678d1b886ad3b00a1e790b511947031","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -19,25 +19,25 @@\n package org.apache.syncope.core.persistence.relationships;\n \n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.MembershipDAO;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class MembershipTest extends AbstractTest {\n+public class MembershipTest extends AbstractDAOTest {\n \n     @Autowired\n     private MembershipDAO membershipDAO;\n \n     @Autowired\n-    private RoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Test\n     public void delete() {\n@@ -52,7 +52,7 @@ public void delete() {\n         for (Membership m : user.getMemberships()) {\n             assertTrue(m.getId() != 4L);\n         }\n-        for (Membership m : syncopeRoleDAO.findMemberships(role)) {\n+        for (Membership m : roleDAO.findMemberships(role)) {\n             assertTrue(m.getId() != 4L);\n         }\n     }"},{"sha":"fe4293d747a070837b7179e9fde3e08f1f0d6aab","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/ReportTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -22,18 +22,18 @@\n \n import java.util.Date;\n import javax.persistence.EntityExistsException;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.ReportExecDAO;\n import org.apache.syncope.types.ReportExecStatus;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ReportTest extends AbstractTest {\n+public class ReportTest extends AbstractDAOTest {\n \n     @Autowired\n     private ReportDAO reportDAO;"},{"sha":"0e1ace56b814251b19a8b5431ac6b1673180c8f1","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":8,"deletions":119,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -18,50 +18,35 @@\n  */\n package org.apache.syncope.core.persistence.relationships;\n \n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.util.Arrays;\n import static org.junit.Assert.*;\n \n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.client.to.MappingItemTO;\n-import org.apache.syncope.client.to.MappingTO;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.beans.user.USchema;\n-import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n-import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.rest.data.ResourceDataBinder;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n+import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.types.PropagationMode;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.types.IntMappingType;\n-import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ResourceTest extends AbstractTest {\n+public class ResourceTest extends AbstractDAOTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n@@ -71,42 +56,9 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private TaskDAO taskDAO;\n \n-    @Autowired\n-    private ResourceDataBinder resourceDataBinder;\n-\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    @Test\n-    public void databinding() throws IOException {\n-        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-        assertNotNull(resource);\n-\n-        ResourceTO resourceTO = resourceDataBinder.getResourceTO(resource);\n-        assertNotNull(resourceTO);\n-\n-        ExternalResource fromto = resourceDataBinder.update(resource, resourceTO);\n-        assertNotNull(fromto);\n-        assertEquals(resource, fromto);\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, resourceTO);\n-\n-        assertEquals(resourceTO, mapper.readValue(writer.toString(), ResourceTO.class));\n-\n-        List<ResourceTO> resourceTOs = resourceDataBinder.getResourceTOs(resourceDAO.findAll());\n-        assertNotNull(resourceTOs);\n-        assertFalse(resourceTOs.isEmpty());\n-\n-        writer = new StringWriter();\n-        mapper.writeValue(writer, resourceTOs);\n-\n-        ResourceTO[] actual = mapper.readValue(writer.toString(), ResourceTO[].class);\n-        assertEquals(resourceTOs, Arrays.asList(actual));\n-    }\n-\n     @Test\n     public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n@@ -133,69 +85,6 @@ public void createWithPasswordPolicy() {\n         assertNotNull(policyDAO.find(4L));\n     }\n \n-    /**\n-     * @see http://code.google.com/p/syncope/issues/detail?id=42\n-     */\n-    @Test\n-    public void issue42() {\n-        USchema userId = schemaDAO.find(\"userId\", USchema.class);\n-\n-        Set<AbstractMappingItem> beforeUserIdMappings = new HashSet<AbstractMappingItem>();\n-        for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getUmapping() != null) {\n-                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n-                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n-                        beforeUserIdMappings.add(mapItem);\n-                    }\n-                }\n-            }\n-        }\n-\n-        ResourceTO resourceTO = new ResourceTO();\n-        resourceTO.setName(\"resource-issue42\");\n-        resourceTO.setConnectorId(100L);\n-        resourceTO.setPropagationMode(PropagationMode.ONE_PHASE);\n-        resourceTO.setEnforceMandatoryCondition(true);\n-\n-        MappingTO mapping = new MappingTO();\n-        resourceTO.setUmapping(mapping);\n-\n-        MappingItemTO item = new MappingItemTO();\n-        item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n-        item.setExtAttrName(\"campo1\");\n-        item.setAccountid(true);\n-        item.setMandatoryCondition(\"false\");\n-        mapping.setAccountIdItem(item);\n-\n-        ExternalResource resource = resourceDataBinder.create(resourceTO);\n-        resource = resourceDAO.save(resource);\n-        assertNotNull(resource);\n-        assertNotNull(resource.getUmapping());\n-        assertEquals(1, resource.getUmapping().getItems().size());\n-\n-        resourceDAO.flush();\n-\n-        ExternalResource actual = resourceDAO.find(\"resource-issue42\");\n-        assertNotNull(actual);\n-        assertEquals(resource, actual);\n-\n-        userId = schemaDAO.find(\"userId\", USchema.class);\n-\n-        Set<AbstractMappingItem> afterUserIdMappings = new HashSet<AbstractMappingItem>();\n-        for (ExternalResource res : resourceDAO.findAll()) {\n-            if (res.getUmapping() != null) {\n-                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n-                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n-                        afterUserIdMappings.add(mapItem);\n-                    }\n-                }\n-            }\n-        }\n-\n-        assertEquals(beforeUserIdMappings.size(), afterUserIdMappings.size() - 1);\n-    }\n-\n     @Test\n     public void save() {\n         ExternalResource resource = new ExternalResource();"},{"sha":"83228a9ccec889fdba6272d8ee13c3f99ed38af8","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,27 +21,27 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.AbstractTest;\n-import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n-import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class RoleTest extends AbstractTest {\n+public class RoleTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;"},{"sha":"1bae4874b80cdc6fc1d515eb2f5932b8ba5042dd","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -22,23 +22,23 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.AbstractTest;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class SchemaTest extends AbstractTest {\n+public class SchemaTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;"},{"sha":"7c403626b423aa1d09be72d7c7b0e5003e9dae7d","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -23,17 +23,12 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n@@ -42,9 +37,14 @@\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.ResourceOperation;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class TaskTest extends AbstractTest {\n+public class TaskTest extends AbstractDAOTest {\n \n     @Autowired\n     private TaskDAO taskDAO;"},{"sha":"55e5c5c9ed449a6b32fad0e037e396c2738d3db8","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -21,22 +21,22 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.AbstractTest;\n-import org.apache.syncope.core.persistence.beans.membership.Membership;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class UserTest extends AbstractTest {\n+public class UserTest extends AbstractDAOTest {\n \n     @Autowired\n     private UserDAO userDAO;"},{"sha":"9f05ae51ff0753ddc2ca62e8e724dabd573cc4d8","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -41,8 +41,8 @@\n import org.apache.syncope.client.to.TaskTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.core.init.SpringContextInitializer;\n-import org.apache.syncope.core.quartz.TestSyncActions;\n import org.apache.syncope.core.sync.SyncJob;\n+import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.TraceLevel;"},{"sha":"e73e78fdcbf5641653d6bd7c49d7959b3f6fc0ee","filename":"core/src/test/java/org/apache/syncope/core/rest/data/ResourceDataTest.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.data;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n+import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.user.USchema;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.SchemaDAO;\n+import org.apache.syncope.types.IntMappingType;\n+import org.apache.syncope.types.PropagationMode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class ResourceDataTest extends AbstractTest {\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ResourceDataBinder resourceDataBinder;\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Test\n+    public void databinding() throws IOException {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(resource);\n+\n+        ResourceTO resourceTO = resourceDataBinder.getResourceTO(resource);\n+        assertNotNull(resourceTO);\n+\n+        ExternalResource fromto = resourceDataBinder.update(resource, resourceTO);\n+        assertNotNull(fromto);\n+        assertEquals(resource, fromto);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, resourceTO);\n+\n+        assertEquals(resourceTO, mapper.readValue(writer.toString(), ResourceTO.class));\n+\n+        List<ResourceTO> resourceTOs = resourceDataBinder.getResourceTOs(resourceDAO.findAll());\n+        assertNotNull(resourceTOs);\n+        assertFalse(resourceTOs.isEmpty());\n+\n+        writer = new StringWriter();\n+        mapper.writeValue(writer, resourceTOs);\n+\n+        ResourceTO[] actual = mapper.readValue(writer.toString(), ResourceTO[].class);\n+        assertEquals(resourceTOs, Arrays.asList(actual));\n+    }\n+\n+    /**\n+     * @see http://code.google.com/p/syncope/issues/detail?id=42\n+     */\n+    @Test\n+    public void issue42() {\n+        USchema userId = schemaDAO.find(\"userId\", USchema.class);\n+\n+        Set<AbstractMappingItem> beforeUserIdMappings = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource res : resourceDAO.findAll()) {\n+            if (res.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n+                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n+                        beforeUserIdMappings.add(mapItem);\n+                    }\n+                }\n+            }\n+        }\n+\n+        ResourceTO resourceTO = new ResourceTO();\n+        resourceTO.setName(\"resource-issue42\");\n+        resourceTO.setConnectorId(100L);\n+        resourceTO.setPropagationMode(PropagationMode.ONE_PHASE);\n+        resourceTO.setEnforceMandatoryCondition(true);\n+\n+        MappingTO mapping = new MappingTO();\n+        resourceTO.setUmapping(mapping);\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setExtAttrName(\"campo1\");\n+        item.setAccountid(true);\n+        item.setMandatoryCondition(\"false\");\n+        mapping.setAccountIdItem(item);\n+\n+        ExternalResource resource = resourceDataBinder.create(resourceTO);\n+        resource = resourceDAO.save(resource);\n+        assertNotNull(resource);\n+        assertNotNull(resource.getUmapping());\n+        assertEquals(1, resource.getUmapping().getItems().size());\n+\n+        resourceDAO.flush();\n+\n+        ExternalResource actual = resourceDAO.find(\"resource-issue42\");\n+        assertNotNull(actual);\n+        assertEquals(resource, actual);\n+\n+        userId = schemaDAO.find(\"userId\", USchema.class);\n+\n+        Set<AbstractMappingItem> afterUserIdMappings = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource res : resourceDAO.findAll()) {\n+            if (res.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n+                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n+                        afterUserIdMappings.add(mapItem);\n+                    }\n+                }\n+            }\n+        }\n+\n+        assertEquals(beforeUserIdMappings.size(), afterUserIdMappings.size() - 1);\n+    }\n+}"},{"sha":"7e6b84679d16f6014f1a5d0fe8749199a418ea38","filename":"core/src/test/java/org/apache/syncope/core/sync/SyncTaskTest.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncTaskTest.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import static org.junit.Assert.*;\n+\n+import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.dao.AbstractDAOTest;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class SyncTaskTest extends AbstractDAOTest {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Test\n+    public void saveSyncTask() {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        SyncTask task = new SyncTask();\n+        task.setName(\"saveSyncTask\");\n+        task.setDescription(\"SyncTask description\");\n+        task.setUserTemplate(new UserTO());\n+        task.setCronExpression(\"BLA BLA\");\n+\n+        // this save() fails because of an invalid Cron Expression\n+        InvalidEntityException exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        task.setCronExpression(null);\n+        // this save() fails because a SyncTask requires a target resource\n+        exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        task.setResource(resource);\n+        task.setActionsClassName(getClass().getName());\n+\n+        // this save() fails because jobActionsClassName does not implement \n+        // the right interface\n+        exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        task.setActionsClassName(TestSyncActions.class.getName());\n+        // this save() finally works\n+        task = taskDAO.save(task);\n+        assertNotNull(task);\n+\n+        SyncTask actual = taskDAO.find(task.getId());\n+        assertEquals(task, actual);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE144() {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        SyncTask task = new SyncTask();\n+\n+        task.setResource(resource);\n+        task.setName(\"issueSYNCOPE144\");\n+        task.setDescription(\"issueSYNCOPE144 Description\");\n+        task.setActionsClassName(TestSyncActions.class.getName());\n+\n+        task = taskDAO.save(task);\n+        assertNotNull(task);\n+\n+        SyncTask actual = taskDAO.find(task.getId());\n+        assertEquals(task, actual);\n+        assertEquals(\"issueSYNCOPE144\", actual.getName());\n+        assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n+\n+        actual.setName(\"issueSYNCOPE144_2\");\n+        actual.setDescription(\"issueSYNCOPE144 Description_2\");\n+\n+        actual = taskDAO.save(actual);\n+        assertNotNull(actual);\n+        assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n+        assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n+    }\n+}"},{"sha":"769938cdb741918bdf8431e69162c1613ab8cc90","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncActions.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f01769cc4f997bf6128aaba098b720c39de18a9e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java?ref=f01769cc4f997bf6128aaba098b720c39de18a9e","patch":"@@ -16,24 +16,23 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.quartz;\n+package org.apache.syncope.core.sync;\n \n import java.util.Collections;\n import org.apache.syncope.client.mod.AbstractAttributableMod;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AbstractAttributableTO;\n import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.core.sync.DefaultSyncActions;\n-import org.apache.syncope.core.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n public class TestSyncActions extends DefaultSyncActions {\n \n     private int counter = 0;\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSyncResultHandler handler,\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n             final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         AttributeTO attrTO = null;\n@@ -54,7 +53,7 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncopeSy\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException {\n \n         subjectMod.addAttributeToBeRemoved(\"fullname\");","previous_filename":"core/src/test/java/org/apache/syncope/core/quartz/TestSyncActions.java"}]}