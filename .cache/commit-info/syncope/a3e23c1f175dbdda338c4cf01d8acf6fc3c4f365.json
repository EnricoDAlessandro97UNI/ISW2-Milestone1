{"sha":"a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmEzZTIzYzFmMTc1ZGJkZGEzMzhjNGNmMDFkOGFjZjZmYzNjNGYzNjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-13T07:53:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-13T07:53:12Z"},"message":"[SYNCOPE-706] Fix provided","tree":{"sha":"e1e521cc9a4b99ca13174f3416221c496241e17a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1e521cc9a4b99ca13174f3416221c496241e17a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b2a28d7df0eaa712f132a960ad5c303b9be5f61","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7b2a28d7df0eaa712f132a960ad5c303b9be5f61","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7b2a28d7df0eaa712f132a960ad5c303b9be5f61"}],"stats":{"total":71,"additions":55,"deletions":16},"files":[{"sha":"46dc302a07bdcc1f5e4741f56b3b4cdb65d24636","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -225,10 +225,23 @@ public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactory\n         return this;\n     }\n \n-    public SyncopeClient createAnonymous() {\n+    /**\n+     * Builds client instance with no authentication, for user self-registration and related queries (schema,\n+     * resources, ...).\n+     *\n+     * @return client instance with no authentication\n+     */\n+    public SyncopeClient create() {\n         return create(null, null);\n     }\n \n+    /**\n+     * Builds client instance with the given credentials.\n+     *\n+     * @param username username\n+     * @param password password\n+     * @return client instance with the given credentials\n+     */\n     public SyncopeClient create(final String username, final String password) {\n         return new SyncopeClient(\n                 getContentType().getMediaType(),"},{"sha":"7dc576a1dc3db4b3c2e76433e8138777bd4bdab1","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -116,14 +116,22 @@ public Domain findDomain(final String key) {\n         return domain;\n     }\n \n+    /**\n+     * Attempts to authenticate the given credentials against internal storage and pass-through resources (if\n+     * configured): the first succeeding causes global success.\n+     *\n+     * @param authentication given credentials\n+     * @return {@code null} if no matching user was found, authentication result otherwise\n+     */\n     @Transactional(noRollbackFor = DisabledException.class)\n     public Pair<Long, Boolean> authenticate(final Authentication authentication) {\n         Long key = null;\n-        Boolean authenticated = false;\n+        Boolean authenticated = null;\n \n         User user = userDAO.find(authentication.getName());\n         if (user != null) {\n             key = user.getKey();\n+            authenticated = false;\n \n             if (user.isSuspended() != null && user.isSuspended()) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");"},{"sha":"313b0f15d3cf5d2e92130d833285e8d1b850e736","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -98,7 +98,7 @@ public Authentication authenticate(final Authentication authentication) {\n         }\n         SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n \n-        boolean authenticated;\n+        Boolean authenticated;\n         if (anonymousUser.equals(authentication.getName())) {\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n         } else if (adminUser.equals(authentication.getName())) {\n@@ -133,7 +133,7 @@ public Pair<Long, Boolean> exec() {\n                         }\n                     });\n             authenticated = authResult.getValue();\n-            if (!authenticated) {\n+            if (authenticated != null && !authenticated) {\n                 AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n                     @Override\n@@ -145,7 +145,7 @@ public Void exec() {\n             }\n         }\n \n-        final boolean isAuthenticated = authenticated;\n+        final boolean isAuthenticated = authenticated != null && authenticated;\n         UsernamePasswordAuthenticationToken token;\n         if (isAuthenticated) {\n             token = AuthContextUtils.execWithAuthContext("},{"sha":"262d34e8d8e18479d1e778f70f568e020e199fde","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -87,15 +87,15 @@ private void assertReadFails(final SyncopeClient client) {\n \n     @Test\n     public void testReadEntitlements() {\n-        // 1. as anonymous (not allowed)\n+        // 1. as not authenticated (not allowed)\n         try {\n-            clientFactory.createAnonymous().self();\n+            clientFactory.create().self();\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n-        // 2. as authenticated anonymous (used by admin console)\n+        // 2. as anonymous\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n         assertEquals(1, self.getKey().size());\n         assertTrue(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n@@ -467,4 +467,22 @@ public void issueSYNCOPE164() throws Exception {\n         self = clientFactory.create(user.getUsername(), \"password234\").self();\n         assertNotNull(self);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE706() {\n+        String username = getUUIDString();\n+        try {\n+            userService.getUserKey(username);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+\n+        try {\n+            clientFactory.create(username, \"anypassword\").self();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e.getMessage());\n+        }\n+    }\n }"},{"sha":"1abb943e7250f408e0ef3d3fa1ec5d8b477fa3c9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -584,7 +584,7 @@ public void createWithMandatorySchema() {\n \n     @Test\n     public void anonymous() {\n-        GroupService unauthenticated = clientFactory.createAnonymous().getService(GroupService.class);\n+        GroupService unauthenticated = clientFactory.create().getService(GroupService.class);\n         try {\n             unauthenticated.\n                     list(SyncopeClient.getAnySearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());"},{"sha":"ad351951ad60a9744fea34e08016e7699d76f948","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -318,7 +318,7 @@ public void issueSYNCOPE418() {\n \n     @Test\n     public void anonymous() {\n-        SchemaService unauthenticated = clientFactory.createAnonymous().getService(SchemaService.class);\n+        SchemaService unauthenticated = clientFactory.create().getService(SchemaService.class);\n         try {\n             unauthenticated.list(SchemaType.VIRTUAL);\n             fail();"},{"sha":"07433b74cc4d29310885a226a1e88db3c0814c50","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -511,7 +511,7 @@ public void bulkAction() {\n \n     @Test\n     public void anonymous() {\n-        ResourceService unauthenticated = clientFactory.createAnonymous().getService(ResourceService.class);\n+        ResourceService unauthenticated = clientFactory.create().getService(ResourceService.class);\n         try {\n             unauthenticated.list();\n             fail();"},{"sha":"083d4390e59fa3c022333d5f3af29a6e042a9144","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=a3e23c1f175dbdda338c4cf01d8acf6fc3c4f365","patch":"@@ -82,7 +82,7 @@ public void create() {\n         }\n \n         // 2. self-registration as anonymous: works\n-        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        SyncopeClient anonClient = clientFactory.create();\n         UserTO self = anonClient.getService(UserSelfService.class).\n                 create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true).\n                 readEntity(UserTO.class);\n@@ -99,7 +99,7 @@ public void createAndApprove() {\n         userTO.getMemberships().add(new MembershipTO.Builder().group(3L).build());\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        SyncopeClient anonClient = clientFactory.create();\n         userTO = anonClient.getService(UserSelfService.class).\n                 create(userTO, true).\n                 readEntity(UserTO.class);\n@@ -243,7 +243,7 @@ public void issueSYNCOPE373() {\n     public void noContent() throws IOException {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers(syncopeService));\n \n-        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        SyncopeClient anonClient = clientFactory.create();\n         UserSelfService noContentService = anonClient.prefer(UserSelfService.class, Preference.RETURN_NO_CONTENT);\n \n         UserTO user = UserITCase.getUniqueSampleTO(\"nocontent-anonymous@syncope.apache.org\");\n@@ -278,7 +278,7 @@ public void passwordReset() {\n         assertNotNull(read);\n \n         // 3. request password reset (as anonymous) providing the expected security answer\n-        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        SyncopeClient anonClient = clientFactory.create();\n         try {\n             anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), \"WRONG\");\n             fail();\n@@ -329,7 +329,7 @@ public void passwordResetWithoutSecurityQuestion() {\n         assertNotNull(read);\n \n         // 3. request password reset (as anonymous) with no security answer\n-        SyncopeClient anonClient = clientFactory.createAnonymous();\n+        SyncopeClient anonClient = clientFactory.create();\n         anonClient.getService(UserSelfService.class).requestPasswordReset(user.getUsername(), null);\n \n         // 4. get token (normally sent via e-mail, now reading as admin)"}]}