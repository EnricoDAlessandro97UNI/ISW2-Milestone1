{"sha":"51b314fe514695a79b3f0e39e8b1f06dd49dbebc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxYjMxNGZlNTE0Njk1YTc5YjNmMGUzOWU4YjFmMDZkZDQ5ZGJlYmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-28T14:53:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-28T14:53:12Z"},"message":"[SYNCOPE-1287] Core implementation","tree":{"sha":"9ff669023f587b40cb88d36f7119d66a2ef2a4a7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ff669023f587b40cb88d36f7119d66a2ef2a4a7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/51b314fe514695a79b3f0e39e8b1f06dd49dbebc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51b314fe514695a79b3f0e39e8b1f06dd49dbebc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51b314fe514695a79b3f0e39e8b1f06dd49dbebc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"59a3422e4f1b2ee758590aead03c085a8e1b79b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/59a3422e4f1b2ee758590aead03c085a8e1b79b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/59a3422e4f1b2ee758590aead03c085a8e1b79b1"}],"stats":{"total":1888,"additions":1755,"deletions":133},"files":[{"sha":"a23f39bec62ae1088a80801d76ad0770f901d047","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -240,8 +240,12 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             destinationRealm.setNullValid(!(taskTO instanceof PullTaskTO));\n             pullTaskSpecifics.add(destinationRealm);\n \n+            AjaxCheckBoxPanel remediation = new AjaxCheckBoxPanel(\n+                    \"remediation\", \"remediation\", new PropertyModel<>(taskTO, \"remediation\"), false);\n+            pullTaskSpecifics.add(remediation);\n+\n             // ------------------------------\n-            // Only for pull tasks\n+            // Only for push tasks\n             // ------------------------------  \n             WebMarkupContainer pushTaskSpecifics = new WebMarkupContainer(\"pushTaskSpecifics\");\n             add(pushTaskSpecifics.setRenderBodyOnly(true));"},{"sha":"4eabfb5f3bb5339a192d400c03fe9bacbdccf0cf","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -28,6 +28,7 @@\n       <div class=\"form-group\"><span wicket:id=\"destinationRealm\">[destinationRealm]</span></div>\n       <div class=\"form-group\"><span wicket:id=\"pullMode\">[pullMode]</span></div>\n       <div class=\"form-group\"><span wicket:id=\"reconFilterBuilder\">[filter]</span></div>\n+      <div class=\"form-group\"><span wicket:id=\"remediation\">[remediation]</span></div>\n     </span>      \n \n     <span wicket:id=\"pushTaskSpecifics\">"},{"sha":"2acbca288121dd782d86c36709b2147305459f4d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.properties?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -31,3 +31,4 @@ edit=Edit\n execute=Execute\n executeDryRun=Dry run\n latestExecStatus=Last status\n+remediation=Remediation"},{"sha":"bc2c4bd0480801e58544f65c75e1d98106fb513d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_it.properties?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -31,3 +31,4 @@ edit=Edit\n execute=Execute\n executeDryRun=Dry run\n latestExecStatus=Last status\n+remediation=Remediation"},{"sha":"12041725f23668796d0a1473c20778d01a6631fd","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ja.properties?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -31,3 +31,4 @@ edit=\\u7de8\\u96c6\n execute=\\u5b9f\\u884c\n executeDryRun=\\u4e88\\u884c\\u6f14\\u7fd2\n latestExecStatus=\\u6700\\u7d42\\u30b9\\u30c6\\u30fc\\u30bf\\u30b9\n+remediation=Remediation"},{"sha":"2acbca288121dd782d86c36709b2147305459f4d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_pt_BR.properties?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -31,3 +31,4 @@ edit=Edit\n execute=Execute\n executeDryRun=Dry run\n latestExecStatus=Last status\n+remediation=Remediation"},{"sha":"18bbca62ce803e319b53236ded600438a01b891f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_ru.properties?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -32,3 +32,4 @@ edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c\n execute=\\u0417\\u0430\\u043f\\u0443\\u0441\\u043a\n executeDryRun=\\u041f\\u0440\\u043e\\u0431\\u043d\\u044b\\u0439 \\u0437\\u0430\\u043f\\u0443\\u0441\\u043a\n latestExecStatus=\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441 \\u043f\\u0440\\u0435\\u0434\\u044b\\u0434\\u0443\\u0449\\u0435\\u0433\\u043e \\u0437\\u0430\\u043f\\u0443\\u0441\\u043a\\u0430\n+remediation=Remediation"},{"sha":"398120034a886dda6e7047313e6a970776d70f17","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -50,6 +50,8 @@ public class PullTaskTO extends ProvisioningTaskTO implements TemplatableTO {\n     @XmlElement(required = true)\n     private String destinationRealm;\n \n+    private boolean remediation;\n+\n     @XmlTransient\n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.PullTaskTO\")\n@@ -90,4 +92,13 @@ public void setDestinationRealm(final String destinationRealm) {\n     public Map<String, AnyTO> getTemplates() {\n         return templates;\n     }\n+\n+    public boolean isRemediation() {\n+        return remediation;\n+    }\n+\n+    public void setRemediation(final boolean remediation) {\n+        this.remediation = remediation;\n+    }\n+\n }"},{"sha":"0b971cd597387eddc2a9e536fbae04e448655244","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RemediationTO.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.Date;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+\n+@XmlRootElement(name = \"remediation\")\n+@XmlType\n+public class RemediationTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 3983540425142284975L;\n+\n+    private String key;\n+\n+    private AnyTypeKind anyTypeKind;\n+\n+    private ResourceOperation operation;\n+\n+    private AnyTO anyTOPayload;\n+\n+    private AnyPatch anyPatchPayload;\n+\n+    private String keyPayload;\n+\n+    private String error;\n+\n+    private Date instant;\n+\n+    private String pullTask;\n+\n+    private String resource;\n+\n+    private String remoteName;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public ResourceOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public void setOperation(final ResourceOperation operation) {\n+        this.operation = operation;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public AnyTO getAnyTOPayload() {\n+        return anyTOPayload;\n+    }\n+\n+    public void setAnyTOPayload(final AnyTO anyTOPayload) {\n+        this.anyTOPayload = anyTOPayload;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public AnyPatch getAnyPatchPayload() {\n+        return anyPatchPayload;\n+    }\n+\n+    public void setAnyPatchPayload(final AnyPatch anyPatchPayload) {\n+        this.anyPatchPayload = anyPatchPayload;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getKeyPayload() {\n+        return keyPayload;\n+    }\n+\n+    public void setKeyPayload(final String keyPayload) {\n+        this.keyPayload = keyPayload;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getError() {\n+        return error;\n+    }\n+\n+    public void setError(final String error) {\n+        this.error = error;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public Date getInstant() {\n+        return instant == null\n+                ? null\n+                : new Date(instant.getTime());\n+    }\n+\n+    public void setInstant(final Date instant) {\n+        this.instant = instant == null\n+                ? null\n+                : new Date(instant.getTime());\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getPullTask() {\n+        return pullTask;\n+    }\n+\n+    public void setPullTask(final String pullTask) {\n+        this.pullTask = pullTask;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+\n+    public String getRemoteName() {\n+        return remoteName;\n+    }\n+\n+    public void setRemoteName(final String remoteName) {\n+        this.remoteName = remoteName;\n+    }\n+\n+}"},{"sha":"6cd6c9874bbe17f6af874db314d2e74fa1a1235b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -19,6 +19,10 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -27,18 +31,25 @@\n @XmlEnum\n public enum AnyTypeKind {\n \n-    USER(UserTO.class),\n-    GROUP(GroupTO.class),\n-    ANY_OBJECT(AnyObjectTO.class);\n+    USER(UserTO.class, UserPatch.class),\n+    GROUP(GroupTO.class, GroupPatch.class),\n+    ANY_OBJECT(AnyObjectTO.class, AnyObjectPatch.class);\n \n     private final Class<? extends AnyTO> toClass;\n \n-    AnyTypeKind(final Class<? extends AnyTO> toClass) {\n+    private final Class<? extends AnyPatch> patchClass;\n+\n+    AnyTypeKind(final Class<? extends AnyTO> toClass, final Class<? extends AnyPatch> patchClass) {\n         this.toClass = toClass;\n+        this.patchClass = patchClass;\n     }\n \n     public Class<? extends AnyTO> getTOClass() {\n         return toClass;\n     }\n \n+    public Class<? extends AnyPatch> getPatchClass() {\n+        return patchClass;\n+    }\n+\n }"},{"sha":"462ee5f536c303b96e794e2b2283176995a54e29","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -47,10 +47,13 @@ public enum EntityViolationType {\n     InvalidPlainAttr(\"org.apache.syncope.core.persistence.validation.plainattr\"),\n     InvalidUsername(\"org.apache.syncope.core.persistence.validation.user.username\"),\n     InvalidValueList(\"org.apache.syncope.core.persistence.validation.attr.valueList\"),\n+    InvalidRemediation(\"org.apache.syncope.core.persistence.validation.remediation\"),\n     MoreThanOneNonNull(\"org.apache.syncope.core.persistence.validation.attrvalue.moreThanOneNonNull\");\n \n     private String message;\n \n+    private String propertyPath;\n+\n     EntityViolationType(final String message) {\n         this.message = message;\n     }\n@@ -62,4 +65,13 @@ public void setMessage(final String message) {\n     public String getMessage() {\n         return message;\n     }\n+\n+    public String getPropertyPath() {\n+        return propertyPath;\n+    }\n+\n+    public void setPropertyPath(final String propertyPath) {\n+        this.propertyPath = propertyPath;\n+    }\n+\n }"},{"sha":"0968f34982e5bcce17ff5b2088d84f90a4617d54","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -302,6 +302,14 @@ public final class StandardEntitlement {\n \n     public static final String IMPLEMENTATION_DELETE = \"IMPLEMENTATION_DELETE\";\n \n+    public static final String REMEDIATION_LIST = \"REMEDIATION_LIST\";\n+\n+    public static final String REMEDIATION_READ = \"REMEDIATION_READ\";\n+\n+    public static final String REMEDIATION_REMEDY = \"REMEDIATION_REMEDY\";\n+\n+    public static final String REMEDIATION_DELETE = \"REMEDIATION_DELETE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"cf6352ed2dc159e695f1f034930639d81d32c043","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ImplementationService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FImplementationService.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -47,7 +47,7 @@\n public interface ImplementationService extends JAXRSService {\n \n     /**\n-     * Returns a list of all implementations.\n+     * Returns a list of all implementations of the given type.\n      *\n      * @param type implementation type\n      * @return list of all implementations.\n@@ -58,7 +58,7 @@ public interface ImplementationService extends JAXRSService {\n     List<ImplementationTO> list(@NotNull @PathParam(\"type\") ImplementationType type);\n \n     /**\n-     * Returns implementation with matching key.\n+     * Returns implementation with matching type and key.\n      *\n      * @param type implementation type\n      * @param key key of implementation to be read\n@@ -94,7 +94,7 @@ public interface ImplementationService extends JAXRSService {\n     Response update(@NotNull ImplementationTO implementationTO);\n \n     /**\n-     * Deletes the implementation matching the given key.\n+     * Deletes the implementation matching the given key and type.\n      *\n      * @param type implementation type\n      * @param key key for implementation to be deleted"},{"sha":"936eca50bd3e7233cf3e463ad08f49050a57d110","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PATCH;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for remediations.\n+ */\n+@Tag(name = \"Remediations\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"remediations\")\n+public interface RemediationService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all remediations.\n+     *\n+     * @return list of all remediations.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<RemediationTO> list();\n+\n+    /**\n+     * Returns remediation with matching key.\n+     *\n+     * @param key key of remediation to be read\n+     * @return remediation with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    RemediationTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Deletes the remediation matching the given key.\n+     *\n+     * @param key key for remediation to be deleted\n+     * @return an empty response if operation was successful\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response delete(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Perform remediation by creating the provided user, group or any object.\n+     *\n+     * @param key key for remediation to act on\n+     * @param anyTO user, group or any object to create\n+     * @return Response object featuring Location header of created object as well as the object itself\n+     * enriched with propagation status information\n+     */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n+            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n+            + \" with External Resources with no priority set\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"boolean\", defaultValue = \"false\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Object successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the object created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the object created\"),\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n+    @POST\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response remedy(@NotNull @PathParam(\"key\") String key, @NotNull AnyTO anyTO);\n+\n+    /**\n+     * Perform remediation by updating the provided user, group or any object.\n+     *\n+     * @param key key for remediation to act on\n+     * @param anyPatch user, group or any object to update\n+     * @return Response object featuring the updated object enriched with propagation status information\n+     */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @Parameter(name = HttpHeaders.IF_MATCH, in = ParameterIn.HEADER,\n+            description = \"When the provided ETag value does not match the latest modification date of the entity, \"\n+            + \"an error is reported and the requested operation is not performed.\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"string\"))\n+    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n+            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n+            + \" with External Resources with no priority set\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"boolean\", defaultValue = \"false\"))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Object successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")),\n+        @ApiResponse(responseCode = \"412\",\n+                description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n+                + \" date of the entity\") })\n+    @PATCH\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response remedy(@NotNull @PathParam(\"key\") String key, @NotNull AnyPatch anyPatch);\n+\n+    /**\n+     * Perform remediation by deleting the provided user, group or any object.\n+     *\n+     * @param key key for remediation to act on\n+     * @param anyKey user's, group's or any object's key to delete\n+     * @return Response object featuring the deleted object enriched with propagation status information\n+     */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @Parameter(name = HttpHeaders.IF_MATCH, in = ParameterIn.HEADER,\n+            description = \"When the provided ETag value does not match the latest modification date of the entity, \"\n+            + \"an error is reported and the requested operation is not performed.\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"string\"))\n+    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n+            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n+            + \" with External Resources with no priority set\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"boolean\", defaultValue = \"false\"))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Object successfully deleted enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")),\n+        @ApiResponse(responseCode = \"412\",\n+                description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n+                + \" date of the entity\") })\n+    @DELETE\n+    @Path(\"{key}/{anyKey}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Response remedy(@NotNull @PathParam(\"key\") String key, @NotNull String anyKey);\n+}"},{"sha":"7a52fa5b4b133683c84a0985b79eae3d086462c2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":9,"deletions":18,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -53,8 +53,7 @@\n  */\n @Tag(name = \"Users\")\n @SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\")\n-    ,\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"users\")\n public interface UserService extends AnyService<UserTO> {\n@@ -99,12 +98,10 @@ public interface UserService extends AnyService<UserTO> {\n                             @Schema(implementation = ProvisioningResult.class)), headers = {\n                 @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n                         @Schema(type = \"string\"),\n-                        description = \"UUID generated for the user created\")\n-                ,\n+                        description = \"UUID generated for the user created\"),\n                 @Header(name = HttpHeaders.LOCATION, schema =\n                         @Schema(type = \"string\"),\n-                        description = \"URL of the user created\")\n-                ,\n+                        description = \"URL of the user created\"),\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n@@ -141,15 +138,13 @@ Response create(\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        ,\n+                        @Schema(implementation = ProvisioningResult.class))),\n         @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\"))\n-        ,\n+                        + \"client about the fact that a specified preference was applied\")),\n         @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })\n@@ -185,15 +180,13 @@ Response create(\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        ,\n+                        @Schema(implementation = ProvisioningResult.class))),\n         @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\"))\n-        ,\n+                        + \"client about the fact that a specified preference was applied\")),\n         @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })\n@@ -229,15 +222,13 @@ Response create(\n                 description = \"User successfully updated enriched with propagation status information, as Entity\",\n                 content =\n                 @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class)))\n-        ,\n+                        @Schema(implementation = ProvisioningResult.class))),\n         @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n                         @Schema(type = \"string\"),\n                         description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\"))\n-        ,\n+                        + \"client about the fact that a specified preference was applied\")),\n         @ApiResponse(responseCode = \"412\",\n                 description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n                 + \" date of the entity\") })"},{"sha":"0c00b451ea933ca3b5d070af3f951578e0a54e76","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -113,7 +113,7 @@ public Pair<Integer, List<AccessTokenTO>> list(\n         Integer count = accessTokenDAO.count();\n \n         List<AccessTokenTO> result = accessTokenDAO.findAll(page, size, orderByClauses).stream().\n-                map(accessToken -> binder.getAccessTokenTO(accessToken)).collect(Collectors.toList());\n+                map(binder::getAccessTokenTO).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }"},{"sha":"adab632efa6fcba612210a0339c26e666bc7df0f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -62,8 +62,7 @@ public AnyTypeClassTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeClassTO> list() {\n-        return anyTypeClassDAO.findAll().stream().\n-                map(anyTypeClass -> binder.getAnyTypeClassTO(anyTypeClass)).collect(Collectors.toList());\n+        return anyTypeClassDAO.findAll().stream().map(binder::getAnyTypeClassTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_CREATE + \"')\")"},{"sha":"d606af298eb959343f725224bd025dfe75936976","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -66,7 +66,7 @@ public AnyTypeTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeTO> list() {\n-        return anyTypeDAO.findAll().stream().map(anyType -> binder.getAnyTypeTO(anyType)).collect(Collectors.toList());\n+        return anyTypeDAO.findAll().stream().map(binder::getAnyTypeTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_CREATE + \"')\")"},{"sha":"50495ca65cb419330b5097cda960a7cd7cfccb9f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ApplicationLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -73,8 +73,7 @@ public PrivilegeTO readPrivilege(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ApplicationTO> list() {\n-        return applicationDAO.findAll().stream().\n-                map(application -> binder.getApplicationTO(application)).collect(Collectors.toList());\n+        return applicationDAO.findAll().stream().map(binder::getApplicationTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_CREATE + \"')\")"},{"sha":"e3a22a8e9b186f0df3c3c35fa958a1ce1024e136","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorHistoryLogic.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -32,6 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ConnectorHistoryLogic extends AbstractTransactionalLogic<ConnInstanceHistoryConfTO> {\n@@ -45,25 +46,16 @@ public class ConnectorHistoryLogic extends AbstractTransactionalLogic<ConnInstan\n     @Autowired\n     private ConnInstanceDataBinder binder;\n \n-    private ConnInstanceHistoryConfTO getConnInstanceHistoryConfTO(final ConnInstanceHistoryConf history) {\n-        ConnInstanceHistoryConfTO historyTO = new ConnInstanceHistoryConfTO();\n-        historyTO.setKey(history.getKey());\n-        historyTO.setCreator(history.getCreator());\n-        historyTO.setCreation(history.getCreation());\n-        historyTO.setConnInstanceTO(history.getConf());\n-\n-        return historyTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<ConnInstanceHistoryConfTO> list(final String key) {\n         ConnInstance connInstance = connInstanceDAO.find(key);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + key + \"'\");\n         }\n \n         return connInstanceHistoryConfDAO.findByEntity(connInstance).stream().\n-                map(historyConf -> getConnInstanceHistoryConfTO(historyConf)).collect(Collectors.toList());\n+                map(binder::getConnInstanceHistoryConfTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_RESTORE + \"')\")\n@@ -93,7 +85,7 @@ protected ConnInstanceHistoryConfTO resolveReference(final Method method, final\n         if (!\"list\".equals(method.getName())) {\n             try {\n                 String key = (String) args[0];\n-                return getConnInstanceHistoryConfTO(connInstanceHistoryConfDAO.find(key));\n+                return binder.getConnInstanceHistoryConfTO(connInstanceHistoryConfDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"c5bbdf83b4b8eb1811f1426d215d188e493d6cbf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":22,"deletions":27,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.net.URI;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -47,8 +45,8 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n+import org.identityconnectors.framework.common.objects.AttributeInfo;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -149,9 +147,8 @@ public List<ConnInstanceTO> list(final String lang) {\n                     try {\n                         result = binder.getConnInstanceTO(connInstance);\n                     } catch (NotFoundException e) {\n-                        LOG.\n-                                error(\"Connector '{}#{}' not found\", connInstance.getBundleName(), connInstance.\n-                                        getVersion());\n+                        LOG.error(\"Connector '{}#{}' not found\",\n+                                connInstance.getBundleName(), connInstance.getVersion());\n                     }\n \n                     return result;\n@@ -181,29 +178,31 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         }\n \n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<>();\n-        for (Map.Entry<URI, ConnectorInfoManager> entry : connIdBundleManager.getConnInfoManagers().entrySet()) {\n-            entry.getValue().getConnectorInfos().stream().map(bundle -> {\n+        connIdBundleManager.getConnInfoManagers().forEach((uri, cim) -> {\n+            connectorBundleTOs.addAll(cim.getConnectorInfos().stream().map(bundle -> {\n                 ConnBundleTO connBundleTO = new ConnBundleTO();\n                 connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n-                connBundleTO.setLocation(entry.getKey().toString());\n+\n+                connBundleTO.setLocation(uri.toString());\n+\n                 ConnectorKey key = bundle.getConnectorKey();\n                 connBundleTO.setBundleName(key.getBundleName());\n                 connBundleTO.setConnectorName(key.getConnectorName());\n                 connBundleTO.setVersion(key.getBundleVersion());\n+\n                 ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(bundle);\n-                for (String propName : properties.getPropertyNames()) {\n-                    connBundleTO.getProperties().add(binder.build(properties.getProperty(propName)));\n-                }\n+                connBundleTO.getProperties().addAll(properties.getPropertyNames().stream().\n+                        map(propName -> binder.build(properties.getProperty(propName))).collect(Collectors.toList()));\n+\n                 return connBundleTO;\n-            }).forEachOrdered(connBundleTO -> {\n-                connectorBundleTOs.add(connBundleTO);\n-            });\n-        }\n+            }).collect(Collectors.toList()));\n+        });\n \n         return connectorBundleTOs;\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+\n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n@@ -217,23 +216,19 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n                 connFactory.buildConnInstanceOverride(actual, connInstanceTO.getConf(), null)).\n                 getObjectClassInfo();\n \n-        List<ConnIdObjectClassTO> result = new ArrayList<>(objectClassInfo.size());\n-        objectClassInfo.stream().map(info -> {\n+        return objectClassInfo.stream().map(info -> {\n             ConnIdObjectClassTO connIdObjectClassTO = new ConnIdObjectClassTO();\n             connIdObjectClassTO.setType(info.getType());\n             connIdObjectClassTO.setAuxiliary(info.isAuxiliary());\n             connIdObjectClassTO.setContainer(info.isContainer());\n-            info.getAttributeInfo().stream().\n+\n+            connIdObjectClassTO.getAttributes().addAll(info.getAttributeInfo().stream().\n                     filter(attrInfo -> includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())).\n-                    forEachOrdered(attrInfo -> {\n-                        connIdObjectClassTO.getAttributes().add(attrInfo.getName());\n-                    });\n-            return connIdObjectClassTO;\n-        }).forEachOrdered((connIdObjectClassTO) -> {\n-            result.add(connIdObjectClassTO);\n-        });\n+                    map(AttributeInfo::getName).\n+                    collect(Collectors.toList()));\n \n-        return result;\n+            return connIdObjectClassTO;\n+        }).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")"},{"sha":"9e3967b6b8e1373c25b8f0fcacda650a4495c80f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -33,6 +33,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n@@ -48,6 +49,7 @@ public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    @Transactional(readOnly = true)\n     public DomainTO read(final String key) {\n         Domain domain = domainDAO.find(key);\n         if (domain == null) {\n@@ -60,8 +62,9 @@ public DomainTO read(final String key) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n     public List<DomainTO> list() {\n-        return domainDAO.findAll().stream().map(domain -> binder.getDomainTO(domain)).collect(Collectors.toList());\n+        return domainDAO.findAll().stream().map(binder::getDomainTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \""},{"sha":"487cc59dc559219e3da2c467aa0dd1ce70355df3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -31,6 +31,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n@@ -42,6 +43,7 @@ public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n     private DynRealmDAO dynRealmDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public DynRealmTO read(final String key) {\n         DynRealm dynRealm = dynRealmDAO.find(key);\n         if (dynRealm == null) {\n@@ -53,9 +55,9 @@ public DynRealmTO read(final String key) {\n         return binder.getDynRealmTO(dynRealm);\n     }\n \n+    @Transactional(readOnly = true)\n     public List<DynRealmTO> list() {\n-        return dynRealmDAO.findAll().stream().\n-                map(dynRealm -> binder.getDynRealmTO(dynRealm)).collect(Collectors.toList());\n+        return dynRealmDAO.findAll().stream().map(binder::getDynRealmTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_CREATE + \"')\")"},{"sha":"3079483e9f85a73871991f2f329ac0b050b23572","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -43,6 +43,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ImplementationLogic extends AbstractTransactionalLogic<ImplementationTO> {\n@@ -75,12 +76,13 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati\n     private NotificationDAO notificationDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<ImplementationTO> list(final ImplementationType type) {\n-        return implementationDAO.find(type).stream().\n-                map(implementation -> binder.getImplementationTO(implementation)).collect(Collectors.toList());\n+        return implementationDAO.find(type).stream().map(binder::getImplementationTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public ImplementationTO read(final ImplementationType type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {"},{"sha":"c576774775f4f38524b98a3a6552128e84fc8649","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -95,6 +95,7 @@ private List<LoggerTO> list(final LoggerType type) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    @Transactional(readOnly = true)\n     public List<LogAppender> memoryAppenders() {\n         return loggerLoader.getMemoryAppenders().keySet().stream().map(appender -> {\n             LogAppender logAppender = new LogAppender();\n@@ -105,6 +106,7 @@ public List<LogAppender> memoryAppenders() {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    @Transactional(readOnly = true)\n     public List<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n         MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);\n         if (appender == null) {"},{"sha":"d33d68a509b1e217c834c038dcf09df662425896","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -39,6 +39,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class MailTemplateLogic extends AbstractTransactionalLogic<MailTemplateTO> {\n@@ -59,6 +60,7 @@ private MailTemplateTO getMailTemplateTO(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public MailTemplateTO read(final String key) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n@@ -71,6 +73,7 @@ public MailTemplateTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<MailTemplateTO> list() {\n         return mailTemplateDAO.findAll().stream().\n                 map(template -> getMailTemplateTO(template.getKey())).collect(Collectors.toList());"},{"sha":"d9a662f911e5dfbb4ea0c6693a04a9b09655c403","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -38,6 +38,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n@@ -49,6 +50,7 @@ public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n     private NotificationDataBinder binder;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public NotificationTO read(final String key) {\n         Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n@@ -61,9 +63,9 @@ public NotificationTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<NotificationTO> list() {\n-        return notificationDAO.findAll().stream().\n-                map(notification -> binder.getNotificationTO(notification)).collect(Collectors.toList());\n+        return notificationDAO.findAll().stream().map(binder::getNotificationTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_CREATE + \"')\")"},{"sha":"29f30526c10535eebdadc4850efd0d850cf4d8fa","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -36,6 +36,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class PolicyLogic extends AbstractTransactionalLogic<PolicyTO> {\n@@ -76,14 +77,16 @@ public PolicyTO update(final PolicyType type, final PolicyTO policyTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\n         PolicyUtils policyUtils = policyUtilsFactory.getInstance(type);\n \n         return policyDAO.find(policyUtils.policyClass()).stream().\n-                <T>map(policy -> binder.getPolicyTO(policy)).collect(Collectors.toList());\n+                <T>map(binder::getPolicyTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {"},{"sha":"86a18471334a0bab28b47071334d3b992d3c6b75","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -50,6 +50,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n@@ -70,6 +71,7 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     private PropagationTaskExecutor taskExecutor;\n \n     @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n     public List<RealmTO> list(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n         if (realm == null) {"},{"sha":"b0c1ff5f9f9184ec66816e224c198d8009d55aa2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -32,6 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class RelationshipTypeLogic extends AbstractTransactionalLogic<RelationshipTypeTO> {\n@@ -43,6 +44,7 @@ public class RelationshipTypeLogic extends AbstractTransactionalLogic<Relationsh\n     private RelationshipTypeDAO relationshipTypeDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public RelationshipTypeTO read(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {\n@@ -55,9 +57,9 @@ public RelationshipTypeTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<RelationshipTypeTO> list() {\n-        return relationshipTypeDAO.findAll().stream().\n-                map(relationshipType -> binder.getRelationshipTypeTO(relationshipType)).collect(Collectors.toList());\n+        return relationshipTypeDAO.findAll().stream().map(binder::getRelationshipTypeTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_CREATE + \"')\")"},{"sha":"1fb93e0a2b69d9ba50b788b6c29fb9a37efdfbcf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class RemediationLogic extends AbstractTransactionalLogic<RemediationTO> {\n+\n+    @Autowired\n+    private UserLogic userLogic;\n+\n+    @Autowired\n+    private GroupLogic groupLogic;\n+\n+    @Autowired\n+    private AnyObjectLogic anyObjectLogic;\n+\n+    @Autowired\n+    private RemediationDataBinder binder;\n+\n+    @Autowired\n+    private RemediationDAO remediationDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<RemediationTO> list() {\n+        return remediationDAO.findAll().stream().map(binder::getRemediationTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public RemediationTO read(final String key) {\n+        Remediation remediation = remediationDAO.find(key);\n+        if (remediation == null) {\n+            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        return binder.getRemediationTO(remediation);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_DELETE + \"')\")\n+    public void delete(final String key) {\n+        Remediation remediation = remediationDAO.find(key);\n+        if (remediation == null) {\n+            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        remediationDAO.delete(remediation);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    public ProvisioningResult<?> remedy(final String key, final AnyTO anyTO, final boolean nullPriorityAsync) {\n+        Remediation remediation = remediationDAO.find(key);\n+        if (remediation == null) {\n+            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        ProvisioningResult<?> result;\n+        switch (remediation.getAnyTypeKind()) {\n+            case USER:\n+            default:\n+                result = userLogic.create((UserTO) anyTO, true, nullPriorityAsync);\n+                break;\n+\n+            case GROUP:\n+                result = groupLogic.create((GroupTO) anyTO, nullPriorityAsync);\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = anyObjectLogic.create((AnyObjectTO) anyTO, nullPriorityAsync);\n+        }\n+\n+        remediationDAO.delete(remediation);\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    public ProvisioningResult<?> remedy(final String key, final AnyPatch anyPatch, final boolean nullPriorityAsync) {\n+        Remediation remediation = remediationDAO.find(key);\n+        if (remediation == null) {\n+            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        ProvisioningResult<?> result;\n+        switch (remediation.getAnyTypeKind()) {\n+            case USER:\n+            default:\n+                result = userLogic.update((UserPatch) anyPatch, nullPriorityAsync);\n+                break;\n+\n+            case GROUP:\n+                result = groupLogic.update((GroupPatch) anyPatch, nullPriorityAsync);\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = anyObjectLogic.update((AnyObjectPatch) anyPatch, nullPriorityAsync);\n+        }\n+\n+        remediationDAO.delete(remediation);\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    public ProvisioningResult<?> remedy(final String key, final String anyKey, final boolean nullPriorityAsync) {\n+        Remediation remediation = remediationDAO.find(key);\n+        if (remediation == null) {\n+            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+\n+            throw new NotFoundException(key);\n+        }\n+\n+        ProvisioningResult<?> result;\n+        switch (remediation.getAnyTypeKind()) {\n+            case USER:\n+            default:\n+                result = userLogic.delete(anyKey, nullPriorityAsync);\n+                break;\n+\n+            case GROUP:\n+                result = groupLogic.delete(anyKey, nullPriorityAsync);\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = anyObjectLogic.delete(anyKey, nullPriorityAsync);\n+        }\n+\n+        remediationDAO.delete(remediation);\n+\n+        return result;\n+    }\n+\n+    @Override\n+    protected RemediationTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof RemediationTO) {\n+                    key = ((RemediationTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(key)) {\n+            try {\n+                return binder.getRemediationTO(remediationDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"780e8ac1337b17c1152c05b58f928e57375898bb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -68,6 +68,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n@@ -136,11 +137,13 @@ public ReportTO update(final ReportTO reportTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<ReportTO> list() {\n-        return reportDAO.findAll().stream().map(report -> binder.getReportTO(report)).collect(Collectors.toList());\n+        return reportDAO.findAll().stream().map(binder::getReportTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public ReportTO read(final String key) {\n         Report report = reportDAO.find(key);\n         if (report == null) {"},{"sha":"5dc61c1afc1de5b2caf92ff4101ffb8f98cd989b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -39,6 +39,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ReportTemplateLogic extends AbstractTransactionalLogic<ReportTemplateTO> {\n@@ -59,6 +60,7 @@ private ReportTemplateTO getReportTemplateTO(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public ReportTemplateTO read(final String key) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n@@ -71,6 +73,7 @@ public ReportTemplateTO read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<ReportTemplateTO> list() {\n         return reportTemplateDAO.findAll().stream().\n                 map(template -> getReportTemplateTO(template.getKey())).collect(Collectors.toList());"},{"sha":"42126fb6649414fafe3c76f13ac1615bb1efb523","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceHistoryLogic.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -32,6 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ResourceHistoryLogic extends AbstractTransactionalLogic<ResourceHistoryConfTO> {\n@@ -45,25 +46,16 @@ public class ResourceHistoryLogic extends AbstractTransactionalLogic<ResourceHis\n     @Autowired\n     private ResourceDataBinder binder;\n \n-    private ResourceHistoryConfTO getResourceHistoryConfTO(final ExternalResourceHistoryConf history) {\n-        ResourceHistoryConfTO historyTO = new ResourceHistoryConfTO();\n-        historyTO.setKey(history.getKey());\n-        historyTO.setCreator(history.getCreator());\n-        historyTO.setCreation(history.getCreation());\n-        historyTO.setResourceTO(history.getConf());\n-\n-        return historyTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<ResourceHistoryConfTO> list(final String key) {\n         ExternalResource resource = resourceDAO.find(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n         return resourceHistoryConfDAO.findByEntity(resource).stream().\n-                map(historyConf -> getResourceHistoryConfTO(historyConf)).collect(Collectors.toList());\n+                map(binder::getResourceHistoryConfTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_RESTORE + \"')\")\n@@ -93,7 +85,7 @@ protected ResourceHistoryConfTO resolveReference(final Method method, final Obje\n         if (!\"list\".equals(method.getName())) {\n             try {\n                 String key = (String) args[0];\n-                return getResourceHistoryConfTO(resourceHistoryConfDAO.find(key));\n+                return binder.getResourceHistoryConfTO(resourceHistoryConfDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"e90b245be5f55d64a48059b6e8e642a770a50d30","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -274,8 +274,7 @@ public ResourceTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ResourceTO> list() {\n-        return resourceDAO.findAll().stream().\n-                map(resource -> binder.getResourceTO(resource)).collect(Collectors.toList());\n+        return resourceDAO.findAll().stream().map(binder::getResourceTO).collect(Collectors.toList());\n     }\n \n     private Triple<ExternalResource, AnyType, Provision> connObjectInit("},{"sha":"a04e5186e68f0df860a4ef07b7e1a2bd75ced19d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -59,7 +59,7 @@ public RoleTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n-        return roleDAO.findAll().stream().map(role -> binder.getRoleTO(role)).collect(Collectors.toList());\n+        return roleDAO.findAll().stream().map(binder::getRoleTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_CREATE + \"')\")"},{"sha":"892850edef571deb59dfb3899c48d480a5040131","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -48,6 +48,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {\n@@ -145,11 +146,13 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n     public <T extends SchemaTO> List<T> list(final SchemaType schemaType, final List<String> anyTypeClasses) {\n         return doSearch(schemaType, anyTypeClasses, null);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n     public <T extends SchemaTO> List<T> search(\n             final SchemaType schemaType, final List<String> anyTypeClasses, final String keyword) {\n "},{"sha":"46285f20f219a12753096c821df0b38d50bec122","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -50,8 +50,7 @@ public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQu\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<SecurityQuestionTO> list() {\n-        return securityQuestionDAO.findAll().stream().\n-                map(securityQuestion -> binder.getSecurityQuestionTO(securityQuestion)).collect(Collectors.toList());\n+        return securityQuestionDAO.findAll().stream().map(binder::getSecurityQuestionTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_READ + \"')\")"},{"sha":"8aa7151daa02228ce33bb63ed1338e5c6cc39578","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -23,6 +23,7 @@\n import java.lang.management.RuntimeMXBean;\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n+import java.net.URI;\n import java.net.UnknownHostException;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -68,6 +69,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n@@ -210,8 +212,8 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.setBuildNumber(buildNumber);\n \n                 if (bundleManager.getLocations() != null) {\n-                    bundleManager.getLocations().\n-                            forEach(location -> PLATFORM_INFO.getConnIdLocations().add(location.toASCIIString()));\n+                    PLATFORM_INFO.getConnIdLocations().addAll(bundleManager.getLocations().stream().\n+                            map(URI::toASCIIString).collect(Collectors.toList()));\n                 }\n \n                 PLATFORM_INFO.setPropagationTaskExecutor(AopUtils.getTargetClass(propagationTaskExecutor).getName());\n@@ -246,19 +248,19 @@ public PlatformInfo platform() {\n             AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), () -> {\n                 PLATFORM_INFO.getAnyTypes().clear();\n                 PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n-                        map(type -> type.getKey()).collect(Collectors.toList()));\n+                        map(Entity::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getUserClasses().clear();\n                 PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n-                        map(cls -> cls.getKey()).collect(Collectors.toList()));\n+                        map(Entity::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getAnyTypeClasses().clear();\n                 PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n-                        map(cls -> cls.getKey()).collect(Collectors.toList()));\n+                        map(Entity::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getResources().clear();\n                 PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n-                        map(resource -> resource.getKey()).collect(Collectors.toList()));\n+                        map(Entity::getKey).collect(Collectors.toList()));\n                 return null;\n             });\n         }"},{"sha":"bcbe6450c8a75413de9d328ba0b80414099a372f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -63,6 +63,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n@@ -156,6 +157,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     @SuppressWarnings(\"unchecked\")\n     public <T extends TaskTO> Pair<Integer, List<T>> list(\n             final TaskType type,\n@@ -191,6 +193,7 @@ public <T extends TaskTO> Pair<Integer, List<T>> list(\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @Transactional(readOnly = true)\n     public <T extends TaskTO> T read(final TaskType type, final String key, final boolean details) {\n         Task task = taskDAO.find(key);\n         if (task == null) {"},{"sha":"8fc4745d2ad1d91af4adb157ef8587b0065f4f79","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -58,7 +58,6 @@ public class UserWorkflowLogic extends AbstractTransactionalLogic<WorkflowFormTO\n     private UserDAO userDAO;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_CLAIM + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(final String taskId) {\n         return uwfAdapter.claimForm(taskId);\n     }\n@@ -82,20 +81,19 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_READ + \"') and hasRole('\"\n             + StandardEntitlement.USER_READ + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     public WorkflowFormTO getFormForUser(final String key) {\n         User user = userDAO.authFind(key);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_LIST + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true)\n     public List<WorkflowFormTO> getForms() {\n         return uwfAdapter.getForms();\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n-    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n         WorkflowResult<? extends AnyPatch> updated = uwfAdapter.submitForm(form);\n "},{"sha":"d6a3fe7ad20abc9cb557efd419298858818d6f97","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -89,6 +89,8 @@ public InvalidEntityException(final String entityClassSimpleName,\n \n             entityViolationType.setMessage(message.trim());\n \n+            entityViolationType.setPropertyPath(violation.getPropertyPath().toString());\n+\n             if (!this.violations.containsKey(violation.getLeafBean().getClass())) {\n                 this.violations.put(violation.getLeafBean().getClass(), EnumSet.noneOf(EntityViolationType.class));\n             }"},{"sha":"f00cb8a24d6aea32398223c9db424fa6b5aec53c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RemediationDAO.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+\n+public interface RemediationDAO extends DAO<Remediation> {\n+\n+    Remediation find(String key);\n+\n+    List<Remediation> findByPullTask(PullTask pullTask);\n+\n+    List<Remediation> findAll();\n+\n+    Remediation save(Remediation remediation);\n+\n+    void delete(Remediation remediation);\n+\n+    void delete(String key);\n+\n+}"},{"sha":"12782418dd9ffec83fb63dbe3439ebd4541ec1c4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Remediation.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Date;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+\n+public interface Remediation extends Entity {\n+\n+    AnyTypeKind getAnyTypeKind();\n+\n+    void setAnyTypeKind(AnyTypeKind anyTypeKind);\n+\n+    ResourceOperation getOperation();\n+\n+    void setOperation(ResourceOperation operation);\n+\n+    void setPayload(AnyTO anyTO);\n+\n+    void setPayload(AnyPatch anyPatch);\n+\n+    void setPayload(String key);\n+\n+    <T extends AnyTO> T getPayloadAsTO(Class<T> reference);\n+\n+    <P extends AnyPatch> P getPayloadAsPatch(Class<P> reference);\n+\n+    String getPayloadAsKey();\n+\n+    String getError();\n+\n+    void setError(String error);\n+\n+    Date getInstant();\n+\n+    void setInstant(Date instant);\n+\n+    PullTask getPullTask();\n+\n+    void setPullTask(PullTask pullTask);\n+\n+    String getRemoteName();\n+\n+    void setRemoteName(String remoteName);\n+}"},{"sha":"2d8ffdd8b685f2311283e1c1527380126ef600c6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PullTask.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPullTask.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -44,4 +44,9 @@ public interface PullTask extends ProvisioningTask {\n     Optional<? extends AnyTemplatePullTask> getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplatePullTask> getTemplates();\n+\n+    void setRemediation(boolean remediation);\n+\n+    boolean isRemediation();\n+\n }"},{"sha":"b78c4252c6bfa6a0d59deb17a377580881e0c979","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARemediationDAO.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARemediation;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPARemediationDAO extends AbstractDAO<Remediation> implements RemediationDAO {\n+\n+    @Override\n+    public Remediation find(final String key) {\n+        return entityManager().find(JPARemediation.class, key);\n+    }\n+\n+    @Override\n+    public List<Remediation> findByPullTask(final PullTask pullTask) {\n+        TypedQuery<Remediation> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e WHERE e.pullTask=:pullTask\",\n+                Remediation.class);\n+        query.setParameter(\"pullTask\", pullTask);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<Remediation> findAll() {\n+        TypedQuery<Remediation> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPARemediation.class.getSimpleName() + \" e \", Remediation.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Remediation save(final Remediation remediation) {\n+        return entityManager().merge(remediation);\n+    }\n+\n+    @Override\n+    public void delete(final Remediation remediation) {\n+        entityManager().remove(remediation);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Remediation remediation = find(key);\n+        if (remediation == null) {\n+            return;\n+        }\n+\n+        delete(remediation);\n+    }\n+\n+}"},{"sha":"d47ba5d19bf57f965a9736834cc49d4f68d7fdfe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -41,13 +42,17 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPATaskDAO extends AbstractDAO<Task> implements TaskDAO {\n \n+    @Autowired\n+    private RemediationDAO remediationDAO;\n+\n     @Override\n     public Class<? extends Task> getEntityReference(final TaskType type) {\n         Class<? extends Task> result = null;\n@@ -303,6 +308,12 @@ public void delete(final String id) {\n \n     @Override\n     public void delete(final Task task) {\n+        if (task instanceof PullTask) {\n+            remediationDAO.findByPullTask((PullTask) task).forEach(remediation -> {\n+                remediation.setPullTask(null);\n+            });\n+        }\n+\n         entityManager().remove(task);\n     }\n "},{"sha":"8de177e870d9e9e7bb4250b5141005c0f3b60134","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -130,6 +130,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.policy.CorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n@@ -285,6 +286,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAccessToken();\n         } else if (reference.equals(Implementation.class)) {\n             result = (E) new JPAImplementation();\n+        } else if (reference.equals(Remediation.class)) {\n+            result = (E) new JPARemediation();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"6f31cc9840ecc72495e0da0c40f135cb138a932d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARemediation.java","status":"added","additions":171,"deletions":0,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.RemediationCheck;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPARemediation.TABLE)\n+@RemediationCheck\n+public class JPARemediation extends AbstractGeneratedKeyEntity implements Remediation {\n+\n+    private static final long serialVersionUID = -1612530286294448682L;\n+\n+    public static final String TABLE = \"Remediation\";\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private AnyTypeKind anyTypeKind;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private ResourceOperation operation;\n+\n+    @NotNull\n+    @Lob\n+    private String payload;\n+\n+    @NotNull\n+    @Lob\n+    private String error;\n+\n+    @NotNull\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date instant;\n+\n+    @ManyToOne\n+    private JPAPullTask pullTask;\n+\n+    @NotNull\n+    private String remoteName;\n+\n+    @Override\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    @Override\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    @Override\n+    public ResourceOperation getOperation() {\n+        return operation;\n+    }\n+\n+    @Override\n+    public void setOperation(final ResourceOperation operation) {\n+        this.operation = operation;\n+    }\n+\n+    @Override\n+    public <T extends AnyTO> T getPayloadAsTO(final Class<T> reference) {\n+        return POJOHelper.deserialize(this.payload, reference);\n+    }\n+\n+    @Override\n+    public <P extends AnyPatch> P getPayloadAsPatch(final Class<P> reference) {\n+        return POJOHelper.deserialize(this.payload, reference);\n+    }\n+\n+    @Override\n+    public String getPayloadAsKey() {\n+        return this.payload;\n+    }\n+\n+    @Override\n+    public void setPayload(final AnyTO anyTO) {\n+        this.payload = POJOHelper.serialize(anyTO);\n+    }\n+\n+    @Override\n+    public void setPayload(final AnyPatch anyPatch) {\n+        this.payload = POJOHelper.serialize(anyPatch);\n+    }\n+\n+    @Override\n+    public void setPayload(final String key) {\n+        this.payload = key;\n+    }\n+\n+    @Override\n+    public String getError() {\n+        return error;\n+    }\n+\n+    @Override\n+    public void setError(final String error) {\n+        this.error = error;\n+    }\n+\n+    @Override\n+    public Date getInstant() {\n+        return instant == null\n+                ? null\n+                : new Date(instant.getTime());\n+    }\n+\n+    @Override\n+    public void setInstant(final Date instant) {\n+        this.instant = instant == null\n+                ? null\n+                : new Date(instant.getTime());\n+    }\n+\n+    @Override\n+    public PullTask getPullTask() {\n+        return pullTask;\n+    }\n+\n+    @Override\n+    public void setPullTask(final PullTask pullTask) {\n+        checkType(pullTask, JPAPullTask.class);\n+        this.pullTask = (JPAPullTask) pullTask;\n+    }\n+\n+    @Override\n+    public String getRemoteName() {\n+        return remoteName;\n+    }\n+\n+    @Override\n+    public void setRemoteName(final String remoteName) {\n+        this.remoteName = remoteName;\n+    }\n+\n+}"},{"sha":"59748001f35c33bb71fcfa4d2bb4bbd79dc32fc3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n@@ -33,6 +34,8 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PullMode;\n@@ -71,6 +74,11 @@ public class JPAPullTask extends AbstractProvisioningTask implements PullTask {\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullTask\")\n     private List<JPAAnyTemplatePullTask> templates = new ArrayList<>();\n \n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer remediation;\n+\n     @Override\n     public PullMode getPullMode() {\n         return pullMode;\n@@ -134,4 +142,14 @@ public List<? extends AnyTemplatePullTask> getTemplates() {\n         return templates;\n     }\n \n+    @Override\n+    public void setRemediation(final boolean remediation) {\n+        this.remediation = getBooleanAsInteger(remediation);\n+    }\n+\n+    @Override\n+    public boolean isRemediation() {\n+        return isBooleanAsInteger(remediation);\n+    }\n+\n }"},{"sha":"7a0a9c22a35be1580f22b117a2b4bcb4231f3f98","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RemediationCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationCheck.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = RemediationValidator.class)\n+@Documented\n+public @interface RemediationCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.remediation}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"25f9fb2b0d19ee110968518532bdaa0a93eebe1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RemediationValidator.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+\n+public class RemediationValidator extends AbstractValidator<RemediationCheck, Remediation> {\n+\n+    @Override\n+    public boolean isValid(final Remediation remediation, final ConstraintValidatorContext context) {\n+        boolean isValid = true;\n+\n+        switch (remediation.getOperation()) {\n+            case CREATE:\n+                if (remediation.getPayloadAsTO(remediation.getAnyTypeKind().getTOClass()) == null) {\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidRemediation,\n+                                    \"Expected \" + remediation.getAnyTypeKind().getTOClass().getName())).\n+                            addPropertyNode(\"payload\").addConstraintViolation();\n+\n+                    isValid = false;\n+                }\n+                break;\n+\n+            case UPDATE:\n+                if (remediation.getPayloadAsPatch(remediation.getAnyTypeKind().getPatchClass()) == null) {\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidRemediation,\n+                                    \"Expected \" + remediation.getAnyTypeKind().getPatchClass().getName())).\n+                            addPropertyNode(\"payload\").addConstraintViolation();\n+\n+                    isValid = false;\n+                }\n+                break;\n+\n+            case DELETE:\n+                if (!SyncopeConstants.UUID_PATTERN.matcher(remediation.getPayloadAsKey()).matches()) {\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidRemediation, \"Expected UUID\")).\n+                            addPropertyNode(\"payload\").addConstraintViolation();\n+\n+                    isValid = false;\n+                }\n+                break;\n+\n+            case NONE:\n+            default:\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidRemediation, \"NONE is not allowed\")).\n+                        addPropertyNode(\"operation\").addConstraintViolation();\n+\n+                isValid = false;\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"02315fa67513721e238e01036d04675c5666990d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RemediationTest.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRemediationTest.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class RemediationTest extends AbstractTest {\n+\n+    @Autowired\n+    private RemediationDAO remediationDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Test\n+    public void findAll() {\n+        List<Remediation> remediations = remediationDAO.findAll();\n+        assertTrue(remediations.isEmpty());\n+    }\n+\n+    @Test\n+    public void create() {\n+        Remediation remediation = entityFactory.newEntity(Remediation.class);\n+        remediation.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n+        remediation.setOperation(ResourceOperation.CREATE);\n+        remediation.setError(\"Error\");\n+        remediation.setInstant(new Date());\n+        remediation.setRemoteName(\"remote\");\n+        remediation.setPullTask(taskDAO.find(\"38abbf9e-a1a3-40a1-a15f-7d0ac02f47f1\"));\n+\n+        // missing payload\n+        try {\n+            remediationDAO.save(remediation);\n+            fail(\"This should not happen\");\n+        } catch (InvalidEntityException e) {\n+            Set<EntityViolationType> violations = e.getViolations().values().iterator().next();\n+            assertEquals(2, violations.size());\n+            assertTrue(violations.stream().allMatch(violation -> violation.getPropertyPath().equals(\"payload\")));\n+        }\n+\n+        remediation.setPayload(UUID.randomUUID().toString());\n+\n+        // wrong payload for operation\n+        try {\n+            remediationDAO.save(remediation);\n+            fail(\"This should not happen\");\n+        } catch (InvalidEntityException e) {\n+            Set<EntityViolationType> violations = e.getViolations().values().iterator().next();\n+            assertEquals(1, violations.size());\n+            assertTrue(violations.stream().anyMatch(violation -> violation.getPropertyPath().equals(\"payload\")));\n+        }\n+\n+        remediation.setOperation(ResourceOperation.DELETE);\n+\n+        remediation = remediationDAO.save(remediation);\n+        assertNotNull(remediation.getKey());\n+        assertNotNull(remediation.getPullTask());\n+\n+        taskDAO.delete(remediation.getPullTask());\n+\n+        remediationDAO.flush();\n+\n+        remediation = remediationDAO.find(remediation.getKey());\n+        assertNull(remediation.getPullTask());\n+    }\n+}"},{"sha":"9fa892e133815a00252b96b4e204955794ebe539","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConnInstanceDataBinder.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n \n public interface ConnInstanceDataBinder {\n@@ -31,6 +33,8 @@ public interface ConnInstanceDataBinder {\n \n     ConnInstanceTO getConnInstanceTO(ConnInstance connInstance);\n \n+    ConnInstanceHistoryConfTO getConnInstanceHistoryConfTO(ConnInstanceHistoryConf history);\n+\n     ConnInstance update(ConnInstanceTO connInstanceTO);\n \n }"},{"sha":"42d833287897d94700fdb261faecbcbf80a822d6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RemediationDataBinder.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+\n+public interface RemediationDataBinder {\n+\n+    RemediationTO getRemediationTO(Remediation remediation);\n+\n+}"},{"sha":"84b22548add79dffd984ca47123812632171836d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ResourceDataBinder.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n \n public interface ResourceDataBinder {\n \n@@ -29,4 +31,5 @@ public interface ResourceDataBinder {\n \n     ExternalResource update(ExternalResource resource, ResourceTO resourceTO);\n \n+    ResourceHistoryConfTO getResourceHistoryConfTO(ExternalResourceHistoryConf history);\n }"},{"sha":"333311cd333787e43d69180e55de500a3fa23998","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -28,6 +28,7 @@\n import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -277,4 +278,15 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n \n         return connInstanceTO;\n     }\n+\n+    @Override\n+    public ConnInstanceHistoryConfTO getConnInstanceHistoryConfTO(final ConnInstanceHistoryConf history) {\n+        ConnInstanceHistoryConfTO historyTO = new ConnInstanceHistoryConfTO();\n+        historyTO.setKey(history.getKey());\n+        historyTO.setCreator(history.getCreator());\n+        historyTO.setCreation(history.getCreation());\n+        historyTO.setConnInstanceTO(history.getConf());\n+\n+        return historyTO;\n+    }\n }"},{"sha":"d95f8663906eb3484dfdc99e5721f9ff3795dc85","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n+import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n+import org.apache.syncope.core.spring.BeanUtils;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RemediationDataBinderImpl implements RemediationDataBinder {\n+\n+    private static final String[] IGNORE_PROPERTIES = {\n+        \"payload\", \"anyTOPayload\", \"anyPatchPayload\", \"keyPayload\", \"pullTask\" };\n+\n+    @Override\n+    public RemediationTO getRemediationTO(final Remediation remediation) {\n+        RemediationTO remediationTO = new RemediationTO();\n+\n+        BeanUtils.copyProperties(remediation, remediationTO);\n+\n+        switch (remediation.getOperation()) {\n+            case CREATE:\n+                remediationTO.setAnyTOPayload(\n+                        remediation.getPayloadAsTO(remediation.getAnyTypeKind().getTOClass()));\n+                break;\n+\n+            case UPDATE:\n+                remediationTO.setAnyPatchPayload(\n+                        remediation.getPayloadAsPatch(remediation.getAnyTypeKind().getPatchClass()));\n+                break;\n+\n+            case DELETE:\n+                remediationTO.setKeyPayload(remediation.getPayloadAsKey());\n+                break;\n+\n+            default:\n+        }\n+\n+        if (remediation.getPullTask() != null) {\n+            remediationTO.setPullTask(remediation.getPullTask().getKey());\n+            remediationTO.setResource(remediation.getPullTask().getResource().getKey());\n+        }\n+\n+        return remediationTO;\n+    }\n+\n+}"},{"sha":"681743e67b1c62ce5a69ce8537127ee9ca9fe8ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -646,4 +647,15 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n \n         return resourceTO;\n     }\n+\n+    @Override\n+    public ResourceHistoryConfTO getResourceHistoryConfTO(final ExternalResourceHistoryConf history) {\n+        ResourceHistoryConfTO historyTO = new ResourceHistoryConfTO();\n+        historyTO.setKey(history.getKey());\n+        historyTO.setCreator(history.getCreator());\n+        historyTO.setCreation(history.getCreation());\n+        historyTO.setResourceTO(history.getConf());\n+\n+        return historyTO;\n+    }\n }"},{"sha":"6fcc05e7d7021e5e49e5a29339be719e27963fd5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -219,6 +219,8 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n             // remove all templates not contained in the TO\n             pullTask.getTemplates().\n                     removeIf(anyTemplate -> !pullTaskTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey()));\n+\n+            pullTask.setRemediation(pullTaskTO.isRemediation());\n         }\n \n         // 3. fill the remaining fields\n@@ -407,6 +409,8 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 pullTask.getTemplates().forEach(template -> {\n                     pullTaskTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n                 });\n+\n+                pullTaskTO.setRemediation(pullTask.isRemediation());\n                 break;\n \n             case PUSH:"},{"sha":"a7485622be527c95031b3f389be3ff82323f2a3c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":51,"deletions":1,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n@@ -36,10 +37,13 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -77,12 +81,18 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n+    @Autowired\n+    protected RemediationDAO remediationDAO;\n+\n     @Autowired\n     protected VirSchemaDAO virSchemaDAO;\n \n     @Autowired\n     protected VirAttrCache virAttrCache;\n \n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n     protected SyncopePullExecutor executor;\n \n     protected Result latestResult;\n@@ -299,6 +309,19 @@ protected void create(\n             LOG.error(\"Could not create {} {} \", anyTO.getType(), delta.getUid().getUidValue(), e);\n             output = e;\n             resultStatus = Result.FAILURE;\n+\n+            if (profile.getTask().isRemediation()) {\n+                Remediation entity = entityFactory.newEntity(Remediation.class);\n+                entity.setAnyTypeKind(getAnyUtils().getAnyTypeKind());\n+                entity.setOperation(ResourceOperation.CREATE);\n+                entity.setPayload(anyTO);\n+                entity.setError(result.getMessage());\n+                entity.setInstant(new Date());\n+                entity.setRemoteName(delta.getObject().getName().getNameValue());\n+                entity.setPullTask(profile.getTask());\n+\n+                remediationDAO.save(entity);\n+            }\n         }\n \n         finalize(operation, resultStatus, null, output, delta);\n@@ -343,8 +366,9 @@ protected List<ProvisioningReport> update(\n                     resultStatus = Result.FAILURE;\n                     output = null;\n                 } else {\n+                    AnyPatch anyPatch = null;\n                     try {\n-                        AnyPatch anyPatch = connObjectUtils.getAnyPatch(\n+                        anyPatch = connObjectUtils.getAnyPatch(\n                                 before.getKey(),\n                                 delta.getObject(),\n                                 before,\n@@ -384,6 +408,19 @@ protected List<ProvisioningReport> update(\n                                 provision.getAnyType().getKey(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n+\n+                        if (profile.getTask().isRemediation()) {\n+                            Remediation entity = entityFactory.newEntity(Remediation.class);\n+                            entity.setAnyTypeKind(provision.getAnyType().getKind());\n+                            entity.setOperation(ResourceOperation.UPDATE);\n+                            entity.setPayload(anyPatch);\n+                            entity.setError(result.getMessage());\n+                            entity.setInstant(new Date());\n+                            entity.setRemoteName(delta.getObject().getName().getNameValue());\n+                            entity.setPullTask(profile.getTask());\n+\n+                            remediationDAO.save(entity);\n+                        }\n                     }\n                 }\n                 finalize(MatchingRule.toEventName(MatchingRule.UPDATE),\n@@ -659,6 +696,19 @@ protected List<ProvisioningReport> delete(\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n                         LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), key, e);\n                         output = e;\n+\n+                        if (profile.getTask().isRemediation()) {\n+                            Remediation entity = entityFactory.newEntity(Remediation.class);\n+                            entity.setAnyTypeKind(provision.getAnyType().getKind());\n+                            entity.setOperation(ResourceOperation.DELETE);\n+                            entity.setPayload(key);\n+                            entity.setError(result.getMessage());\n+                            entity.setInstant(new Date());\n+                            entity.setRemoteName(delta.getObject().getName().getNameValue());\n+                            entity.setPullTask(profile.getTask());\n+\n+                            remediationDAO.save(entity);\n+                        }\n                     }\n \n                     finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);"},{"sha":"201bb482d372884e33cc8d58f040bd0f50403199","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.Date;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RemediationTO;\n+import org.apache.syncope.common.rest.api.service.RemediationService;\n+import org.apache.syncope.core.logic.RemediationLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RemediationServiceImpl extends AbstractServiceImpl implements RemediationService {\n+\n+    @Autowired\n+    private RemediationLogic logic;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Override\n+    public List<RemediationTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public RemediationTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response delete(final String key) {\n+        logic.delete(key);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response remedy(final String key, final AnyTO anyTO) {\n+        ProvisioningResult<?> created = logic.remedy(key, anyTO, isNullPriorityAsync());\n+        return createResponse(created);\n+    }\n+\n+    private void check(final String key, final String anyKey) {\n+        RemediationTO remediation = logic.read(key);\n+\n+        AnyDAO<?> anyDAO;\n+        switch (remediation.getAnyTypeKind()) {\n+            case USER:\n+            default:\n+                anyDAO = userDAO;\n+                break;\n+\n+            case GROUP:\n+                anyDAO = groupDAO;\n+                break;\n+\n+            case ANY_OBJECT:\n+                anyDAO = anyObjectDAO;\n+        }\n+\n+        Date etagDate = anyDAO.findLastChange(anyKey);\n+        if (etagDate == null) {\n+            throw new NotFoundException(remediation.getAnyTypeKind().name() + \" for \" + key);\n+        }\n+        checkETag(String.valueOf(etagDate.getTime()));\n+    }\n+\n+    @Override\n+    public Response remedy(final String key, final AnyPatch anyPatch) {\n+        check(key, anyPatch.getKey());\n+\n+        ProvisioningResult<?> updated = logic.remedy(key, anyPatch, isNullPriorityAsync());\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response remedy(final String key, final String anyKey) {\n+        check(key, anyKey);\n+\n+        ProvisioningResult<?> deleted = logic.remedy(key, anyKey, isNullPriorityAsync());\n+        return modificationResponse(deleted);\n+    }\n+\n+}"},{"sha":"3151971f94708b9c4509dfe2c611b2ade8e15352","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -86,6 +86,7 @@\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n+import org.apache.syncope.common.rest.api.service.RemediationService;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n import org.apache.syncope.common.rest.api.service.ResourceHistoryService;\n import org.apache.syncope.common.rest.api.service.RoleService;\n@@ -241,6 +242,8 @@ public abstract class AbstractITCase {\n \n     protected static ImplementationService implementationService;\n \n+    protected static RemediationService remediationService;\n+\n     protected static CamelRouteService camelRouteService;\n \n     protected static SAML2SPService saml2SpService;\n@@ -311,6 +314,7 @@ public static void restSetup() {\n         schemaService = adminClient.getService(SchemaService.class);\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n         implementationService = adminClient.getService(ImplementationService.class);\n+        remediationService = adminClient.getService(RemediationService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);"},{"sha":"55c1a85f156d2a5e8323ce4f2417e7f5e449e852","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":13,"deletions":23,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -102,29 +101,20 @@ protected void removeTestUsers() {\n      * Clean Syncope and LDAP resource status.\n      */\n     protected void ldapCleanup() {\n-        PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\n-                SyncopeConstants.ROOT_REALM).\n+        groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n-                build());\n-        if (matchingGroups.getSize() > 0) {\n-            for (GroupTO group : matchingGroups.getResult()) {\n-                groupService.deassociate(new DeassociationPatch.Builder().key(group.getKey()).\n-                        action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n-                groupService.delete(group.getKey());\n-            }\n-        }\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").\n-                                query()).\n-                        build());\n-        if (matchingUsers.getSize() > 0) {\n-            for (UserTO user : matchingUsers.getResult()) {\n-                userService.deassociate(new DeassociationPatch.Builder().key(user.getKey()).\n-                        action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n-                userService.delete(user.getKey());\n-            }\n-        }\n+                build()).getResult().forEach(group -> {\n+                    groupService.deassociate(new DeassociationPatch.Builder().key(group.getKey()).\n+                            action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n+                    groupService.delete(group.getKey());\n+                });\n+        userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").query()).\n+                build()).getResult().forEach(user -> {\n+                    userService.deassociate(new DeassociationPatch.Builder().key(user.getKey()).\n+                            action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n+                    userService.delete(user.getKey());\n+                });\n     }\n \n     protected static ExecTO execTask("},{"sha":"6522fcb96c055e707ed0c7b0e56decfd2ef84cf8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51b314fe514695a79b3f0e39e8b1f06dd49dbebc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=51b314fe514695a79b3f0e39e8b1f06dd49dbebc","patch":"@@ -35,6 +35,7 @@\n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n@@ -65,6 +66,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -77,6 +79,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n@@ -658,6 +661,87 @@ public void syncTokenWithErrors() {\n         }\n     }\n \n+    @Test\n+    public void remediation() {\n+        // First of all, clear any potential conflict with existing user / group\n+        ldapCleanup();\n+\n+        // 1. create ldap cloned resource, where 'userId' (mandatory on Syncope) is removed from mapping\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        ldap.setKey(\"ldapForRemediation\");\n+\n+        ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+        provision.getVirSchemas().clear();\n+        provision.getMapping().getItems().removeIf(item -> \"userId\".equals(item.getIntAttrName()));\n+\n+        ldap = createResource(ldap);\n+\n+        // 2. create PullTask with remediation enabled, for the new resource\n+        PullTaskTO pullTask = (PullTaskTO) taskService.list(new TaskQuery.Builder(TaskType.PULL).\n+                resource(RESOURCE_NAME_LDAP).build()).getResult().get(0);\n+        assertNotNull(pullTask);\n+        pullTask.setResource(ldap.getKey());\n+        pullTask.setRemediation(true);\n+        pullTask.getActions().clear();\n+\n+        Response response = taskService.create(TaskType.PULL, pullTask);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+        }\n+        pullTask = getObject(response.getLocation(), TaskService.class, PullTaskTO.class);\n+        assertNotNull(pullTask);\n+\n+        try {\n+            // 3. execute the pull task and verify that:\n+            ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+\n+            // 3a. user was not pulled\n+            try {\n+                userService.read(\"pullFromLDAP\");\n+                fail(\"This should never happen\");\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.NotFound, e.getType());\n+            }\n+\n+            // 3b. remediation was created\n+            Optional<RemediationTO> remediation = remediationService.list().stream().\n+                    filter(r -> \"uid=pullFromLDAP,ou=People,o=isp\".equalsIgnoreCase(r.getRemoteName())).\n+                    findFirst();\n+            assertTrue(remediation.isPresent());\n+            assertEquals(AnyTypeKind.USER, remediation.get().getAnyTypeKind());\n+            assertEquals(ResourceOperation.CREATE, remediation.get().getOperation());\n+            assertNotNull(remediation.get().getAnyTOPayload());\n+            assertNull(remediation.get().getAnyPatchPayload());\n+            assertNull(remediation.get().getKeyPayload());\n+            assertTrue(remediation.get().getError().contains(\"RequiredValuesMissing [userId]\"));\n+\n+            // 4. remedy by copying the email value to userId\n+            UserTO user = (UserTO) remediation.get().getAnyTOPayload();\n+            user.getResources().clear();\n+\n+            String email = user.getPlainAttr(\"email\").get().getValues().get(0);\n+            user.getPlainAttrs().add(new AttrTO.Builder().schema(\"userId\").value(email).build());\n+\n+            remediationService.remedy(remediation.get().getKey(), user);\n+\n+            // 5. user is now found\n+            user = userService.read(\"pullFromLDAP\");\n+            assertNotNull(user);\n+            assertEquals(email, user.getPlainAttr(\"userId\").get().getValues().get(0));\n+\n+            // 6. remediation was removed\n+            try {\n+                remediationService.read(remediation.get().getKey());\n+                fail(\"This should never happen\");\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.NotFound, e.getType());\n+            }\n+        } finally {\n+            resourceService.delete(ldap.getKey());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE68() {\n         //-----------------------------"}]}