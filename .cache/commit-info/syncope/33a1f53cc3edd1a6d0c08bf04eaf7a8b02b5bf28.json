{"sha":"33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMzYTFmNTNjYzNlZGQxYTZkMGMwOGJmMDRlYWY3YThiMDJiNWJmMjg=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-23T16:20:14Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-23T16:20:14Z"},"message":"[SYNCOPE-505] - Adding initial LDAPPropagationActions class\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1604848 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"de217c708f4f058612905db52789d1a46e3819ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/de217c708f4f058612905db52789d1a46e3819ff"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffaf3fee6549e01394b1a59985c3385fd403549f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ffaf3fee6549e01394b1a59985c3385fd403549f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ffaf3fee6549e01394b1a59985c3385fd403549f"}],"stats":{"total":127,"additions":127,"deletions":0},"files":[{"sha":"ee4ad4af8bbc6dcebc3b6a819fefd00f03ba96e3","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/LDAPPasswordPropagationActions.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPPasswordPropagationActions.java?ref=33a1f53cc3edd1a6d0c08bf04eaf7a8b02b5bf28","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.propagation.impl;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.DefaultPropagationActions;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.crypto.codec.Base64;\n+import org.springframework.security.crypto.codec.Hex;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Propagate a non-cleartext password out to a resource, if the PropagationManager has not already\n+ * added a password. The CipherAlgorithm associated with the password must match the password\n+ * hash algorithm property of the LDAP Connector.\n+ */\n+public class LDAPPasswordPropagationActions extends DefaultPropagationActions {\n+    \n+    private static final String CLEARTEXT = \"CLEARTEXT\";\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n+        super.before(task, beforeObj);\n+\n+        if (AttributableType.USER == task.getSubjectType()) {\n+            SyncopeUser user = userDAO.find(task.getSubjectId());\n+            \n+            if (user != null && user.getPassword() != null) {\n+                Attribute missing = AttributeUtil.find(\n+                        PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME,\n+                        task.getAttributes());\n+                \n+                ConnInstance connInstance = task.getResource().getConnector();\n+                String cipherAlgorithm = getCipherAlgorithm(connInstance);\n+                if (missing != null && missing.getValue() != null && missing.getValue().size() == 1\n+                        && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)\n+                        && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgorithm())) {\n+\n+                    String password = user.getPassword().toLowerCase();\n+                    byte[] decodedPassword = Hex.decode(password);\n+                    byte[] base64EncodedPassword = Base64.encode(decodedPassword);\n+                    \n+                    String cipherPlusPassword = \n+                        (\"{\" + cipherAlgorithm.toLowerCase() + \"}\" + new String(base64EncodedPassword));\n+                    \n+                    Attribute passwordAttribute = AttributeBuilder.buildPassword(\n+                            new GuardedString(cipherPlusPassword.toCharArray()));\n+\n+                    Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n+                    attributes.add(passwordAttribute);\n+                    attributes.remove(missing);\n+\n+                    task.setAttributes(attributes);\n+                }\n+            }\n+        }\n+    }\n+    \n+    private String getCipherAlgorithm(ConnInstance connInstance) {\n+        String cipherAlgorithm = CLEARTEXT;\n+        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n+                propertyIterator.hasNext();) {\n+\n+            ConnConfProperty property = propertyIterator.next();\n+            if (\"passwordHashAlgorithm\".equals(property.getSchema().getName())\n+                    && property.getValues() != null && !property.getValues().isEmpty()) {\n+                return (String) property.getValues().get(0);\n+            }\n+        }\n+        return cipherAlgorithm;\n+    }\n+    \n+    private boolean cipherAlgorithmMatches(String connectorAlgorithm, CipherAlgorithm userAlgorithm) {\n+        if (userAlgorithm == null) {\n+            return false;\n+        }\n+    \n+        if (connectorAlgorithm.equals(userAlgorithm.name())) {\n+            return true;\n+        }\n+        \n+        // Special check for \"SHA\" (user sync'd from LDAP)\n+        if (\"SHA\".equals(connectorAlgorithm) && \"SHA1\".equals(userAlgorithm.name())) {\n+            return true;\n+        }\n+        \n+        return false;\n+    }\n+\n+}"}]}