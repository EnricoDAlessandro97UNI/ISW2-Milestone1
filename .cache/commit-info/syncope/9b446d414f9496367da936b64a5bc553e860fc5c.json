{"sha":"9b446d414f9496367da936b64a5bc553e860fc5c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjliNDQ2ZDQxNGY5NDk2MzY3ZGE5MzZiNjRhNWJjNTUzZTg2MGZjNWM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-27T12:43:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-27T13:33:35Z"},"message":"[SYNCOPE-957] More tests for linked accounts","tree":{"sha":"e16087984bd307d6b72e6f738774a12df7f1c020","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e16087984bd307d6b72e6f738774a12df7f1c020"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9b446d414f9496367da936b64a5bc553e860fc5c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b446d414f9496367da936b64a5bc553e860fc5c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b446d414f9496367da936b64a5bc553e860fc5c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b446d414f9496367da936b64a5bc553e860fc5c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5922db7a689ed8287a04bf107ea9beeaaff02d02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5922db7a689ed8287a04bf107ea9beeaaff02d02","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5922db7a689ed8287a04bf107ea9beeaaff02d02"}],"stats":{"total":466,"additions":384,"deletions":82},"files":[{"sha":"129258ea2ea3be7131a3343dbc1c734099baafe9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -62,7 +62,13 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n                 item -> item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH).\n                 forEach(item -> {\n                     Pair<String, Attribute> attr = mappingManager.prepareAttr(\n-                            provision, item, any, null, AccountGetter.DEFAULT, PlainAttrGetter.DEFAULT);\n+                            provision,\n+                            item,\n+                            any,\n+                            null,\n+                            AccountGetter.DEFAULT,\n+                            AccountGetter.DEFAULT,\n+                            PlainAttrGetter.DEFAULT);\n                     if (attr != null && attr.getRight() != null && conf.getSchemas().contains(item.getIntAttrName())) {\n                         filters.add(provision.isIgnoreCaseMatch()\n                                 ? FilterBuilder.equalsIgnoreCase(attr.getRight())"},{"sha":"c24a85ce48b6de4d222d9a185a3dcae0ae426f0c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALinkedAccount.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -186,7 +186,7 @@ public boolean add(final LAPlainAttr attr) {\n     @Override\n     public boolean remove(final LAPlainAttr attr) {\n         checkType(attr, JPALAPlainAttr.class);\n-        return getPlainAttrs().remove((JPALAPlainAttr) attr);\n+        return plainAttrs.remove((JPALAPlainAttr) attr);\n     }\n \n     @Override"},{"sha":"e970512be939117d15a2ddef832871c991300504","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -63,7 +63,7 @@ public interface MappingManager {\n      * @param intAttrName int attr name\n      * @param schemaType schema type\n      * @param any any object\n-     * @param accountGetter function to get actual account instance\n+     * @param usernameAccountGetter function to get actual account instance for username\n      * @param plainAttrGetter function to get PlainAttr instances\n      * @return attribute values and their type\n      */\n@@ -73,7 +73,7 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n             IntAttrName intAttrName,\n             AttrSchemaType schemaType,\n             Any<?> any,\n-            AccountGetter accountGetter,\n+            AccountGetter usernameAccountGetter,\n             PlainAttrGetter plainAttrGetter);\n \n     /**\n@@ -83,15 +83,17 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n      * @param item mapping item\n      * @param any given any object\n      * @param password clear-text password\n-     * @param accountGetter function to get actual account instance\n+     * @param usernameAccountGetter function to get actual account instance for username\n+     * @param passwordAccountGetter function to get actual account instance for password\n      * @param plainAttrGetter function to get PlainAttr instances\n      * @return connObjectLink (if it is the case) + prepared attribute\n      */\n     Pair<String, Attribute> prepareAttr(\n             Provision provision,\n             Item item, Any<?> any,\n             String password,\n-            AccountGetter accountGetter,\n+            AccountGetter usernameAccountGetter,\n+            AccountGetter passwordAccountGetter,\n             PlainAttrGetter plainAttrGetter);\n \n     /**"},{"sha":"af3a058c0d02743ecd43ff720e9ae19774458138","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -208,6 +208,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                                 any,\n                                 password,\n                                 AccountGetter.DEFAULT,\n+                                AccountGetter.DEFAULT,\n                                 PlainAttrGetter.DEFAULT),\n                         attributes);\n                 if (processedConnObjectKey != null) {\n@@ -270,9 +271,8 @@ public Set<Attribute> prepareAttrs(\n                                 mapItem,\n                                 user,\n                                 password,\n-                                acct -> account.getUsername() == null\n-                                ? AccountGetter.DEFAULT.apply(acct)\n-                                : account,\n+                                acct -> account.getUsername() == null ? AccountGetter.DEFAULT.apply(acct) : account,\n+                                acct -> account.getPassword() == null ? AccountGetter.DEFAULT.apply(acct) : account,\n                                 (attributable, schema) -> {\n                                     PlainAttr<?> result = null;\n                                     if (attributable instanceof User) {\n@@ -309,12 +309,6 @@ public Set<Attribute> prepareAttrs(\n         if (account.isSuspended() != null) {\n             attributes.add(AttributeBuilder.buildEnabled(!BooleanUtils.negate(account.isSuspended())));\n         }\n-        if (!changePwd) {\n-            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n-            if (pwdAttr != null) {\n-                attributes.remove(pwdAttr);\n-            }\n-        }\n \n         return attributes;\n     }\n@@ -416,7 +410,8 @@ public Pair<String, Attribute> prepareAttr(\n             final Item item,\n             final Any<?> any,\n             final String password,\n-            final AccountGetter accountGetter,\n+            final AccountGetter usernameAccountGetter,\n+            final AccountGetter passwordAccountGetter,\n             final PlainAttrGetter plainAttrGetter) {\n \n         IntAttrName intAttrName;\n@@ -435,7 +430,7 @@ public Pair<String, Attribute> prepareAttr(\n                 : false;\n \n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                getIntValues(provision, item, intAttrName, schemaType, any, accountGetter, plainAttrGetter);\n+                getIntValues(provision, item, intAttrName, schemaType, any, usernameAccountGetter, plainAttrGetter);\n         schemaType = intValues.getLeft();\n         List<PlainAttrValue> values = intValues.getRight();\n \n@@ -473,7 +468,8 @@ public Pair<String, Attribute> prepareAttr(\n             if (item.isConnObjectKey()) {\n                 result = Pair.of(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n             } else if (item.isPassword() && any instanceof User) {\n-                String passwordAttrValue = getPasswordAttrValue(provision, accountGetter.apply((User) any), password);\n+                String passwordAttrValue =\n+                        getPasswordAttrValue(provision, passwordAccountGetter.apply((User) any), password);\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n@@ -498,7 +494,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n             final IntAttrName intAttrName,\n             final AttrSchemaType schemaType,\n             final Any<?> any,\n-            final AccountGetter accountGetter,\n+            final AccountGetter usernameAccountGetter,\n             final PlainAttrGetter plainAttrGetter) {\n \n         LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), provision.getResource());\n@@ -581,7 +577,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n                     case \"username\":\n                         if (ref instanceof Account) {\n-                            attrValue.setStringValue(accountGetter.apply((Account) ref).getUsername());\n+                            attrValue.setStringValue(usernameAccountGetter.apply((Account) ref).getUsername());\n                             values.add(attrValue);\n                         }\n                         break;\n@@ -757,6 +753,7 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n                     any,\n                     null,\n                     AccountGetter.DEFAULT,\n+                    AccountGetter.DEFAULT,\n                     PlainAttrGetter.DEFAULT);\n         }\n "},{"sha":"a7dcbc504664d74022c4a7eba03a404e51c520ff","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -185,5 +185,4 @@ public Map<VirSchema, List<String>> getValues(final Any<?> any, final Membership\n                 anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, VirSchema.class).\n                         getForMembership(membership.getRightEnd()));\n     }\n-\n }"},{"sha":"406b484b90ce365962b1142a1b6c9858305cde36","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -422,7 +422,6 @@ protected PropagationByResource<String> fill(\n                         ((PlainAttr) attr).setOwner(any);\n                         attr.setSchema(schema);\n                         any.add(attr);\n-\n                     }\n                 }\n                 if (attr != null) {"},{"sha":"2e36ac3935907daffad2f347cb13ba6f23cff0a1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -580,7 +580,7 @@ public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, St\n \n                 user.getLinkedAccounts().remove(account);\n                 account.setOwner(null);\n-                account.getPlainAttrs().forEach(attr -> {\n+                account.getPlainAttrs().stream().collect(Collectors.toSet()).forEach(attr -> {\n                     account.remove(attr);\n                     attr.setOwner(null);\n                     attr.setAccount(null);"},{"sha":"331aa8490975c5cc0145faa7b6c4efeb8c98ce85","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DeletingLinkedAccount.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDeletingLinkedAccount.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.propagation;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+public class DeletingLinkedAccount implements LinkedAccount {\n+\n+    private static final long serialVersionUID = -6828106363047119713L;\n+\n+    private final User user;\n+\n+    private final ExternalResource resource;\n+\n+    private final String connObjectName;\n+\n+    public DeletingLinkedAccount(final User user, final ExternalResource resource, final String connObjectName) {\n+        this.user = user;\n+        this.resource = resource;\n+        this.connObjectName = connObjectName;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getConnObjectName() {\n+        return connObjectName;\n+    }\n+\n+    @Override\n+    public void setConnObjectName(final String connObjectName) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public User getOwner() {\n+        return user;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public boolean add(final Privilege privilege) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Set<? extends Privilege> getPrivileges() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public String getUsername() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setUsername(final String username) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean canDecodePassword() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getPassword() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        // unsupported\n+    }\n+\n+    @Override\n+    public Boolean isSuspended() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setSuspended(final Boolean suspended) {\n+        //\n+    }\n+\n+    @Override\n+    public boolean add(final LAPlainAttr attr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean remove(final LAPlainAttr attr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Optional<? extends LAPlainAttr> getPlainAttr(final String plainSchema) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public List<? extends LAPlainAttr> getPlainAttrs() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(user.getKey()).\n+                append(resource).\n+                append(connObjectName).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final DeletingLinkedAccount other = (DeletingLinkedAccount) obj;\n+        return new EqualsBuilder().\n+                append(user.getKey(), other.user.getKey()).\n+                append(resource, other.resource).\n+                append(connObjectName, other.connObjectName).\n+                build();\n+    }\n+}"},{"sha":"0d7f9b426226ef0f8220c3fa77347e0a08cd9982","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":64,"deletions":56,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -21,6 +21,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.AbstractPatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -57,7 +59,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-\n+import org.springframework.util.CollectionUtils;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -67,7 +69,6 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.request.AbstractPatchItem;\n \n /**\n  * Manage the data propagation to external resources.\n@@ -225,14 +226,14 @@ public List<PropagationTaskInfo> getUserUpdateTasks(\n \n         return getUpdateTasks(\n                 userDAO.authFind(wfResult.getResult().getLeft().getKey()),\n-                wfResult.getResult().getKey().getPassword() == null\n+                wfResult.getResult().getLeft().getPassword() == null\n                 ? null\n-                : wfResult.getResult().getKey().getPassword().getValue(),\n+                : wfResult.getResult().getLeft().getPassword().getValue(),\n                 changePwd,\n-                wfResult.getResult().getValue(),\n+                wfResult.getResult().getRight(),\n                 wfResult.getPropByRes(),\n                 wfResult.getPropByLinkedAccount(),\n-                wfResult.getResult().getKey().getVirAttrs(),\n+                wfResult.getResult().getLeft().getVirAttrs(),\n                 noPropResourceKeys);\n     }\n \n@@ -310,7 +311,7 @@ protected List<PropagationTaskInfo> getUpdateTasks(\n                 enable,\n                 false,\n                 Optional.ofNullable(propByRes).orElseGet(PropagationByResource::new),\n-                null,\n+                propByLinkedAccount,\n                 vAttrs);\n     }\n \n@@ -331,11 +332,6 @@ public List<PropagationTaskInfo> getUserDeleteTasks(\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<String> noPropResourceKeys) {\n \n-        if (noPropResourceKeys != null) {\n-            propByLinkedAccount.get(ResourceOperation.DELETE).\n-                    removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n-        }\n-\n         return getDeleteTasks(userDAO.authFind(key), propByRes, propByLinkedAccount, noPropResourceKeys);\n     }\n \n@@ -380,32 +376,32 @@ protected PropagationTaskInfo newTask(\n             task.setEntityKey(any.getKey());\n         }\n         task.setOperation(operation);\n-        task.setConnObjectKey(preparedAttrs.getKey());\n+        task.setConnObjectKey(preparedAttrs.getLeft());\n \n         // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n         // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n         List<String> mandatoryMissing = new ArrayList<>();\n         List<String> mandatoryNullOrEmpty = new ArrayList<>();\n         mappingItems.stream().filter(item -> (!item.isConnObjectKey()\n-                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n-                forEach(item -> {\n-                    Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                    if (attr == null) {\n-                        mandatoryMissing.add(item.getExtAttrName());\n-                    } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                        mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                    }\n-                });\n+                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).forEach(item -> {\n+\n+            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getRight());\n+            if (attr == null) {\n+                mandatoryMissing.add(item.getExtAttrName());\n+            } else if (CollectionUtils.isEmpty(attr.getValue())) {\n+                mandatoryNullOrEmpty.add(item.getExtAttrName());\n+            }\n+        });\n         if (!mandatoryMissing.isEmpty()) {\n-            preparedAttrs.getValue().add(AttributeBuilder.build(\n+            preparedAttrs.getRight().add(AttributeBuilder.build(\n                     PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n         }\n         if (!mandatoryNullOrEmpty.isEmpty()) {\n-            preparedAttrs.getValue().add(AttributeBuilder.build(\n+            preparedAttrs.getRight().add(AttributeBuilder.build(\n                     PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n         }\n \n-        task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n+        task.setAttributes(POJOHelper.serialize(preparedAttrs.getRight()));\n \n         return task;\n     }\n@@ -498,7 +494,7 @@ protected List<PropagationTaskInfo> createTasks(\n                 Pair<String, Set<Attribute>> preparedAttrs =\n                         mappingManager.prepareAttrs(any, password, changePwd, enable, provision);\n                 if (vAttrMap.containsKey(resourceKey)) {\n-                    preparedAttrs.getValue().addAll(vAttrMap.get(resourceKey));\n+                    preparedAttrs.getRight().addAll(vAttrMap.get(resourceKey));\n                 }\n \n                 PropagationTaskInfo task = newTask(\n@@ -518,34 +514,46 @@ protected List<PropagationTaskInfo> createTasks(\n         if (any instanceof User && propByLinkedAccount != null) {\n             User user = (User) any;\n             propByLinkedAccount.asMap().forEach((accountInfo, operation) -> {\n-                user.getLinkedAccount(accountInfo.getLeft(), accountInfo.getRight()).ifPresent(account -> {\n-                    Provision provision = account.getResource().getProvision(AnyTypeKind.USER.name()).orElse(null);\n-                    List<? extends Item> mappingItems = provision == null\n-                            ? List.of()\n-                            : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n-\n-                    if (provision == null) {\n-                        LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n-                                account.getResource(), AnyTypeKind.USER.name());\n-                    } else if (mappingItems.isEmpty()) {\n-                        LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n-                                AnyTypeKind.USER.name(), account.getResource());\n-                    } else {\n-                        PropagationTaskInfo accountTask = newTask(\n-                                user,\n-                                account.getResource().getKey(),\n-                                operation,\n-                                provision,\n-                                deleteOnResource,\n-                                mappingItems,\n-                                Pair.of(account.getConnObjectName(),\n-                                        mappingManager.prepareAttrs(user, account, password, changePwd, provision)));\n-                        tasks.add(accountTask);\n-\n-                        LOG.debug(\"PropagationTask created for Linked Account {}: {}\",\n-                                account.getConnObjectName(), accountTask);\n-                    }\n-                });\n+                LinkedAccount account = user.getLinkedAccount(accountInfo.getLeft(), accountInfo.getRight()).\n+                        orElse(null);\n+                if (account == null && operation == ResourceOperation.DELETE) {\n+                    account = new DeletingLinkedAccount(\n+                            user, resourceDAO.find(accountInfo.getLeft()), accountInfo.getRight());\n+                }\n+\n+                Provision provision = account == null || account.getResource() == null\n+                        ? null\n+                        : account.getResource().getProvision(AnyTypeKind.USER.name()).orElse(null);\n+                List<? extends Item> mappingItems = provision == null\n+                        ? List.of()\n+                        : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n+\n+                if (account == null) {\n+                    LOG.error(\"Invalid operation {} on deleted account {} on resource {}, ignoring...\",\n+                            operation, accountInfo.getRight(), accountInfo.getLeft());\n+                } else if (account.getResource() == null) {\n+                    LOG.error(\"Invalid resource name specified: {}, ignoring...\", accountInfo.getLeft());\n+                } else if (provision == null) {\n+                    LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n+                            account.getResource(), AnyTypeKind.USER.name());\n+                } else if (mappingItems.isEmpty()) {\n+                    LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n+                            AnyTypeKind.USER.name(), account.getResource());\n+                } else {\n+                    PropagationTaskInfo accountTask = newTask(\n+                            user,\n+                            account.getResource().getKey(),\n+                            operation,\n+                            provision,\n+                            deleteOnResource,\n+                            mappingItems,\n+                            Pair.of(account.getConnObjectName(),\n+                                    mappingManager.prepareAttrs(user, account, password, changePwd, provision)));\n+                    tasks.add(accountTask);\n+\n+                    LOG.debug(\"PropagationTask created for Linked Account {}: {}\",\n+                            account.getConnObjectName(), accountTask);\n+                }\n             });\n         }\n \n@@ -590,8 +598,8 @@ public List<PropagationTaskInfo> createTasks(\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(realm, orgUnit);\n-                task.setConnObjectKey(preparedAttrs.getKey());\n-                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n+                task.setConnObjectKey(preparedAttrs.getLeft());\n+                task.setAttributes(POJOHelper.serialize(preparedAttrs.getRight()));\n \n                 tasks.add(task);\n "},{"sha":"61e71e38629ca8f47437e12bb976dcf5555e152c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":107,"deletions":3,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9b446d414f9496367da936b64a5bc553e860fc5c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9b446d414f9496367da936b64a5bc553e860fc5c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=9b446d414f9496367da936b64a5bc553e860fc5c","patch":"@@ -20,36 +20,140 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.util.Optional;\n import javax.naming.NamingException;\n import javax.naming.directory.Attributes;\n import javax.naming.ldap.LdapContext;\n import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.syncope.common.lib.request.LinkedAccountUR;\n import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n public class LinkedAccountITCase extends AbstractITCase {\n \n     @Test\n-    public void createWithLinkedAccount() throws NamingException {\n+    public void createWithLinkedAccountThenRemove() throws NamingException {\n+        // 1. create user with linked account\n         UserCR userCR = UserITCase.getSample(\n                 \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n+        String connObjectName = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n+        String privilege = applicationService.read(\"mightyApp\").getPrivileges().get(0).getKey();\n \n         LinkedAccountTO account = new LinkedAccountTO.Builder().\n-                connObjectName(\"uid=\" + userCR.getUsername() + \",ou=People,o=isp\").\n+                connObjectName(connObjectName).\n                 resource(RESOURCE_NAME_LDAP).\n                 build();\n         account.getPlainAttrs().add(attr(\"surname\", \"LINKED_SURNAME\"));\n+        account.getPrivileges().add(privilege);\n         userCR.getLinkedAccounts().add(account);\n \n         UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user.getKey());\n+        assertEquals(privilege, user.getLinkedAccounts().get(0).getPrivileges().iterator().next());\n+\n+        // 2. verify that propagation task was generated and that account is found on resource\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n+                        anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+        assertEquals(1, tasks.getTotalCount());\n+        assertEquals(connObjectName, tasks.getResult().get(0).getConnObjectKey());\n+        assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n+        assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n+\n+        LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n+                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName);\n+        assertNotNull(ldapObj);\n+\n+        Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n+        assertEquals(\n+                user.getPlainAttr(\"email\").get().getValues().get(0),\n+                ldapAttrs.get(\"mail\").getAll().next().toString());\n+        assertEquals(\"LINKED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+\n+        // 3. remove linked account from user\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+        userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n+                operation(PatchOperation.DELETE).\n+                linkedAccountTO(user.getLinkedAccounts().get(0)).build());\n+\n+        user = updateUser(userUR).getEntity();\n+        assertTrue(user.getLinkedAccounts().isEmpty());\n+\n+        // 4. verify that propagation task was generated and that account is not any more on resource\n+        tasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n+                        anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+        assertEquals(2, tasks.getTotalCount());\n+\n+        Optional<PropagationTaskTO> deletTask =\n+                tasks.getResult().stream().filter(task -> task.getOperation() == ResourceOperation.DELETE).findFirst();\n+        assertTrue(deletTask.isPresent());\n+        assertEquals(connObjectName, deletTask.get().getConnObjectKey());\n+        assertEquals(ExecStatus.SUCCESS.name(), deletTask.get().getLatestExecStatus());\n+\n+        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName));\n+    }\n+\n+    @Test\n+    public void createWithoutLinkedAccountThenAdd() throws NamingException {\n+        // 1. create user without linked account\n+        UserCR userCR = UserITCase.getSample(\n+                \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n+        String connObjectName = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n+\n+        UserTO user = createUser(userCR).getEntity();\n+        assertNotNull(user.getKey());\n+        assertTrue(user.getLinkedAccounts().isEmpty());\n+\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n+                        anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+        assertEquals(0, tasks.getTotalCount());\n+\n+        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName));\n+\n+        // 2. add linked account to user\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+\n+        LinkedAccountTO account = new LinkedAccountTO.Builder().\n+                connObjectName(connObjectName).\n+                resource(RESOURCE_NAME_LDAP).\n+                build();\n+        account.getPlainAttrs().add(attr(\"surname\", \"LINKED_SURNAME\"));\n+        account.setPassword(\"Password123\");\n+        userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(account).build());\n+\n+        user = updateUser(userUR).getEntity();\n+        assertEquals(1, user.getLinkedAccounts().size());\n+\n+        // 3. verify that propagation task was generated and that account is found on resource\n+        tasks = taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).\n+                        anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n+        assertEquals(1, tasks.getTotalCount());\n+        assertEquals(connObjectName, tasks.getResult().get(0).getConnObjectKey());\n+        assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n+        assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n         LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n-                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, account.getConnObjectName());\n+                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, connObjectName);\n         assertNotNull(ldapObj);\n \n         Attributes ldapAttrs = ldapObj.getAttributes(\"\");"}]}