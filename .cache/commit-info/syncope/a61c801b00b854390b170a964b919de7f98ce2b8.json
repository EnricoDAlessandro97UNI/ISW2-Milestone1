{"sha":"a61c801b00b854390b170a964b919de7f98ce2b8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE2MWM4MDFiMDBiODU0MzkwYjE3MGE5NjRiOTE5ZGU3Zjk4Y2UyYjg=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:29Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:29Z"},"message":"Fixed SYNCOPE-587","tree":{"sha":"5f4bfe90e69fa453d58f61c4859e95b9cac37189","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5f4bfe90e69fa453d58f61c4859e95b9cac37189"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a61c801b00b854390b170a964b919de7f98ce2b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a61c801b00b854390b170a964b919de7f98ce2b8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a61c801b00b854390b170a964b919de7f98ce2b8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a61c801b00b854390b170a964b919de7f98ce2b8/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"1483986e37ba33d62be19f8fc3370cd5b79a0d34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1483986e37ba33d62be19f8fc3370cd5b79a0d34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1483986e37ba33d62be19f8fc3370cd5b79a0d34"}],"stats":{"total":438,"additions":308,"deletions":130},"files":[{"sha":"ffa8ecd70e99bf839658f4eb31903f9e68a132f9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":308,"deletions":130,"changes":438,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a61c801b00b854390b170a964b919de7f98ce2b8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a61c801b00b854390b170a964b919de7f98ce2b8/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=a61c801b00b854390b170a964b919de7f98ce2b8","patch":"@@ -18,162 +18,340 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n import java.io.IOException;\n import java.io.SequenceInputStream;\n+import java.util.Arrays;\n import java.util.List;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.UsageMessages;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xml.sax.SAXException;\n \n-@Parameters(\n-        commandNames = \"report\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope report service\")\n+@Command(name = \"report\")\n public class ReportCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportCommand.class);\n \n-    private final String helpMessage = \"Usage: report [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: report [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={POLICY-ID} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={POLICY-ID} \\n\"\n-            + \"    -e, --execute \\n\"\n-            + \"       Syntax: -e={POLICY-ID} \\n\"\n-            + \"    -re, --read-executecution \\n\"\n-            + \"       Syntax: -re={EXECUTION-ID} \\n\"\n-            + \"    -de, --delete-executecution \\n\"\n-            + \"       Syntax: -de={EXECUTION-ID} \\n\"\n-            + \"    -eer, --export-executecution-result \\n\"\n-            + \"       Syntax: -eer={EXECUTION-ID} \\n\"\n-            + \"    -rc, --reportlet-class\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private Long reportIdToRead = -1L;\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private Long reportIdToDelete = -1L;\n-\n-    @Parameter(names = { \"-e\", \"--execute\" })\n-    private Long reportIdToExecute = -1L;\n-\n-    @Parameter(names = { \"-re\", \"--read-execution\" })\n-    private Long executionIdToRead = -1L;\n-\n-    @Parameter(names = { \"-de\", \"--delete-execution\" })\n-    private Long executionIdToDelete = -1L;\n-\n-    @Parameter(names = { \"-eer\", \"--export-execution-result\" })\n-    private Long exportId = -1L;\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n\"\n+            + \"    --execute \\n\"\n+            + \"       Syntax: --execute {REPORT-ID} \\n\"\n+            + \"    --read-execution \\n\"\n+            + \"       Syntax: --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --delete-execution \\n\"\n+            + \"       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --export-execution-result \\n\"\n+            + \"       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+            + \"          Format: CSV / HTML / PDF / XML / RTF\"\n+            + \"    --reportlet-class\";\n \n     @Override\n-    public void execute() {\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        String[] parameters = input.getParameters();\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n         final ReportService reportService = SyncopeServices.get(ReportService.class);\n-        LOG.debug(\"Report service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- report help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- report list command\");\n-            try {\n-                for (ReportTO reportTO : reportService.list()) {\n-                    System.out.println(reportTO);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                try {\n+                    for (final ReportTO reportTO : reportService.list()) {\n+                        System.out.println(reportTO);\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToRead > -1L) {\n-            LOG.debug(\"- report read {} command\", reportIdToRead);\n-            try {\n-                System.out.println(reportService.read(reportIdToRead));\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- report delete {} command\", reportIdToDelete);\n-                reportService.delete(reportIdToDelete);\n-                System.out.println(\" - Report \" + reportIdToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToExecute > -1L) {\n-            try {\n-                LOG.debug(\"- report execute {} command\", reportIdToExecute);\n-                reportService.execute(reportIdToExecute);\n-                final List<ReportExecTO> executionList = reportService.read(reportIdToExecute).getExecutions();\n-                final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n-                System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n-                System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n-                System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (executionIdToRead > -1L) {\n-            try {\n-                LOG.debug(\"- report execution read {} command\", executionIdToRead);\n-                ReportExecTO reportExecTO = reportService.readExecution(executionIdToRead);\n-                System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n-                System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n-                System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n-                System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (executionIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- report execution delete {} command\", executionIdToDelete);\n-                reportService.deleteExecution(executionIdToDelete);\n-                System.out.println(\" - Report execution \" + executionIdToDelete + \"successfyllt deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (exportId > -1L) {\n-            LOG.debug(\"- report export command for report: {}\", exportId);\n-\n-            try {\n-                XMLUtils.createXMLFile((SequenceInputStream) reportService.exportExecutionResult(exportId,\n-                        ReportExecExportFormat.XML).getEntity(), \"export_\" + exportId + \".xml\");\n-                System.out.println(\" - \" + \"export_\" + exportId + \" successfully created\");\n-            } catch (final IOException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final ParserConfigurationException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final SAXException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final TransformerConfigurationException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final TransformerException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error calling configuration service\", ex);\n-                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n+                break;\n+            case LIST_JOBS:\n+                try {\n+                    for (final JobStatusType jobStatusType : JobStatusType.values()) {\n+                        System.out.println(\"Report execution for \" + jobStatusType);\n+                        final List<ReportExecTO> reportExecTOs = reportService.listJobs(jobStatusType);\n+                        for (final ReportExecTO reportExecTO : reportExecTOs) {\n+                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n+                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+                            System.out.println();\n+                        }\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    UsageMessages.printErrorMessage(ex.getMessage());\n+                }\n+                break;\n+            case READ:\n+                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --read {REPORT-ID} {REPORT-ID} [...]\");\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            System.out.println(reportService.read(Long.valueOf(parameter)));\n+                        } catch (final NumberFormatException ex) {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(readErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --execute {REPORT-ID}\");\n+\n+                if (parameters.length == 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            reportService.delete(Long.valueOf(parameter));\n+                            System.out.println(\" - Report \" + parameter + \" deleted!\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete report \" + parameter);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteErrorMessage);\n+                }\n+                break;\n+            case EXECUTE:\n+                final String executeErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --execute {REPORT-ID}\");\n+\n+                if (parameters.length == 1) {\n+\n+                    try {\n+                        final Long reportIdToExecute = Long.valueOf(parameters[0]);\n+                        reportService.execute(reportIdToExecute);\n+                        final List<ReportExecTO> executionList\n+                                = reportService.read(reportIdToExecute).getExecutions();\n+                        final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n+                        System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n+                        System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n+                        System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n+                    } catch (final WebServiceException | SyncopeClientException ex) {\n+                        System.out.println(\"Error:\");\n+                        if (ex.getMessage().startsWith(\"NotFound\")) {\n+                            UsageMessages.printErrorMessage(\"Report \" + parameters[0] + \" doesn't exists!\");\n+                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                            UsageMessages.printErrorMessage(\"You cannot delete report \" + parameters[0]);\n+                        } else {\n+                            UsageMessages.printErrorMessage(ex.getMessage());\n+                        }\n+                    } catch (final NumberFormatException ex) {\n+                        UsageMessages.printErrorMessage(\n+                                \"Error reading \" + parameters[0] + \". It isn't a valid report id\");\n+                    }\n+                } else {\n+                    System.out.println(executeErrorMessage);\n+                }\n+                break;\n+            case READ_EXECUTION:\n+                final String readExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+\n+                        try {\n+                            ReportExecTO reportExecTO = reportService.readExecution(Long.valueOf(parameter));\n+                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n+                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            System.out.println(\"Error:\");\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\" - Report \" + parameter + \" doesn't exists!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete report \" + parameter);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error reading \" + parameter + \". It isn't a valid report id\");\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(readExecutionErrorMessage);\n+                }\n+                break;\n+            case DELETE_EXECUTION:\n+                final String deleteExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+\n+                        try {\n+                            reportService.deleteExecution(Long.valueOf(parameter));\n+                            System.out.println(\" - Report execution \" + parameter + \"successfully deleted!\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            System.out.println(\"Error:\");\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                System.out.println(\" - Report \" + parameter + \" doesn't exists!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                System.out.println(\" - You cannot delete report \" + parameter);\n+                            } else {\n+                                System.out.println(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            System.out.println(\"Error reading \" + parameter + \". It isn't a valid report id\");\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteExecutionErrorMessage);\n+                }\n+                break;\n+            case EXPORT_EXECUTION_RESULT:\n+                final String exportExecutionErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+                        + \"          Format: CSV / HTML / PDF / XML / RTF\");\n+\n+                if (parameters.length >= 2) {\n+                    parameters = Arrays.copyOf(parameters, parameters.length - 1);\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            final ReportExecExportFormat format = ReportExecExportFormat.valueOf(input.lastParameter());\n+                            final Long exportId = Long.valueOf(parameter);\n+                            final SequenceInputStream report = (SequenceInputStream) reportService.\n+                                    exportExecutionResult(exportId, format).getEntity();\n+                            switch (format) {\n+                                case XML:\n+                                    final String xmlFinalName = \"export_\" + exportId + \".xml\";\n+                                    XMLUtils.createXMLFile(report, xmlFinalName);\n+                                    UsageMessages.printErrorMessage(xmlFinalName + \" successfully created\");\n+                                    break;\n+                                case CSV:\n+                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case PDF:\n+                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case HTML:\n+                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case RTF:\n+                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    break;\n+                                default:\n+                                    UsageMessages.printErrorMessage(format + \" doesn't supported\");\n+                                    break;\n+                            }\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            System.out.println(\"Error:\");\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Report \" + parameter + \" doesn't exists!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                System.out.println(\" - You cannot delete report \" + parameter);\n+                            } else {\n+                                System.out.println(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            System.out.println(\"Error reading \" + parameter + \". It isn't a valid report id\");\n+                        } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n+                            System.out.println(\" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n+                        } catch (final IllegalArgumentException ex) {\n+                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                                System.out.println(\" - Error: \" + input.lastParameter()\n+                                        + \" isn't a valid policy type, try with:\");\n+                                for (final ReportExecExportFormat type : ReportExecExportFormat.values()) {\n+                                    System.out.println(\"  *** \" + type.name());\n+                                }\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(exportExecutionErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n         }\n     }\n \n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_JOBS(\"--list-jobs\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\"),\n+        EXECUTE(\"--execute\"),\n+        READ_EXECUTION(\"--read-execution\"),\n+        DELETE_EXECUTION(\"--delete-execution\"),\n+        EXPORT_EXECUTION_RESULT(\"--export-execution-result\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+    }\n }"}]}