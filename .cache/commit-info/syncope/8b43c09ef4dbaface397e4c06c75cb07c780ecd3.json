{"sha":"8b43c09ef4dbaface397e4c06c75cb07c780ecd3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhiNDNjMDllZjRkYmFmYWNlMzk3ZTRjMDZjNzVjYjA3Yzc4MGVjZDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-20T16:57:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-20T16:57:32Z"},"message":"Refining some details about PolicyController (and related)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1448292 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f4f896699787d22e03b9fbc35c796abd203ea4bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f4f896699787d22e03b9fbc35c796abd203ea4bf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8b43c09ef4dbaface397e4c06c75cb07c780ecd3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b43c09ef4dbaface397e4c06c75cb07c780ecd3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b43c09ef4dbaface397e4c06c75cb07c780ecd3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ffda20d58ceac302d130634602a4fcd8a1cc9be","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ffda20d58ceac302d130634602a4fcd8a1cc9be","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ffda20d58ceac302d130634602a4fcd8a1cc9be"}],"stats":{"total":175,"additions":94,"deletions":81},"files":[{"sha":"338687283cb8a76f0358cfc02ec36c7030b23ae6","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"modified","additions":32,"deletions":14,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -55,27 +55,35 @@ public <T extends PolicyTO> void delete(final PolicyType type, final Long policy\n         getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n+        List<T> result = null;\r\n+\r\n         switch (type) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n                         AccountPolicyTO[].class, type));\r\n+                break;\r\n \r\n             case PASSWORD:\r\n             case GLOBAL_PASSWORD:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n                         PasswordPolicyTO[].class, type));\r\n+                break;\r\n \r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n-                return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n+                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n                         SyncPolicyTO[].class, type));\r\n+                break;\r\n \r\n             default:\r\n                 throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n         }\r\n+\r\n+        return result;\r\n     }\r\n \r\n     @Override\r\n@@ -95,46 +103,56 @@ public <T extends PolicyTO> void update(final PolicyType type, final Long policy\n                 typeToUrl(policyTO.getType()));\r\n     }\r\n \r\n-    private Class<? extends PolicyTO> getTOClass(final PolicyType type) {\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    private <T extends PolicyTO> Class<T> getTOClass(final PolicyType type) {\r\n+        Class<T> result = null;\r\n+\r\n         switch (type) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r\n-                return AccountPolicyTO.class;\r\n+                result = (Class<T>) AccountPolicyTO.class;\r\n+                break;\r\n \r\n             case PASSWORD:\r\n             case GLOBAL_PASSWORD:\r\n-                return PasswordPolicyTO.class;\r\n+                result = (Class<T>) PasswordPolicyTO.class;\r\n+                break;\r\n \r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n-                return SyncPolicyTO.class;\r\n+                result = (Class<T>) SyncPolicyTO.class;\r\n+                break;\r\n \r\n             default:\r\n                 throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n         }\r\n+\r\n+        return result;\r\n     }\r\n \r\n     private String typeToUrl(final PolicyType type) {\r\n         String url = type.name().toLowerCase();\r\n-        int index = url.indexOf(\"_\");\r\n-        if (index != -1) {\r\n-            return url.substring(index + 1);\r\n-        } else {\r\n-            return url;\r\n-        }\r\n+        int index = url.indexOf('_');\r\n+        return index == -1 ? url : url.substring(index + 1);\r\n     }\r\n \r\n     @Override\r\n     public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType type) {\r\n+        Set<CorrelationRuleClassTO> result = null;\r\n+\r\n         switch (type) {\r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n                 final Set<String> classes = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n                         baseUrl + \"policy/correlationRuleClasses.json\", String[].class)));\r\n \r\n-                return CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                result = CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                break;\r\n+\r\n             default:\r\n                 throw new NotFoundException();\r\n         }\r\n+\r\n+        return result;\r\n     }\r\n }\r"},{"sha":"83f972b6be1ed5b335fceac3e659fe12abdd4b17","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -18,31 +18,31 @@\n  */\n package org.apache.syncope.client.test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.codehaus.jackson.map.ObjectMapper;\n-import org.junit.Test;\n import org.apache.syncope.common.report.UserReportletConf;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ReportTO;\n-import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditLoggerName;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.Test;\n \n public class JSONTest {\n \n     @Test\n     public void testSearchCondition() throws IOException {\n-\n         final AttributeCond usernameCond = new AttributeCond(AttributeCond.Type.LIKE);\n         usernameCond.setSchema(\"username\");\n         usernameCond.setExpression(\"%o%\");\n@@ -66,7 +66,6 @@ public void testSearchCondition() throws IOException {\n \n     @Test\n     public void testLists() throws IOException {\n-\n         List<ConfigurationTO> confList = new ArrayList<ConfigurationTO>();\n         ConfigurationTO configuration = new ConfigurationTO();\n         configuration.setKey(\"key1\");\n@@ -91,7 +90,6 @@ public void testLists() throws IOException {\n \n     @Test\n     public void testMap() throws IOException {\n-\n         WorkflowFormPropertyTO prop = new WorkflowFormPropertyTO();\n         prop.putEnumValue(\"key1\", \"value1\");\n         prop.putEnumValue(\"key2\", \"value2\");\n@@ -107,7 +105,6 @@ public void testMap() throws IOException {\n \n     @Test\n     public void testReportletConfImplementations() throws IOException {\n-\n         ReportTO report = new ReportTO();\n         report.setName(\"testReportForCreate\");\n         report.addReportletConf(new UserReportletConf(\"first\"));"},{"sha":"cbe33ddcff7e449e56043686e50e5f2a52eb802c","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -37,6 +37,8 @@ public interface PolicyService {\n     /**\r\n      * @param type Creates a new policy with given type\r\n      * @param policyTO Policy to be created (needs to match type)\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n@@ -45,13 +47,17 @@ public interface PolicyService {\n     /**\r\n      * @param type Deletes policy with given type\r\n      * @param policyId Deletes policy with given id\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      */\r\n     @DELETE\r\n     @Path(\"{policyId}\")\r\n     <T extends PolicyTO> void delete(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     /**\r\n      * @param type Type selector for requested policies\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      * @return List of policies with matching type.\r\n      */\r\n     @GET\r\n@@ -60,6 +66,8 @@ public interface PolicyService {\n     /**\r\n      * @param type Request for policy with given type\r\n      * @param policyId ID of requested policy\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      * @return Returns policy with matching id and type\r\n      */\r\n     @GET\r\n@@ -68,6 +76,8 @@ public interface PolicyService {\n \r\n     /**\r\n      * @param type PolicyType to read global policy from\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      * @return Global Policy for matching type\r\n      */\r\n     @GET\r\n@@ -78,6 +88,8 @@ public interface PolicyService {\n      * @param type PolicyType to be updated.\r\n      * @param policyId ID of policy to be updated\r\n      * @param policyTO Policy to replace existing policy\r\n+     * @param <T> response type (extending PolicyTO)\r\n+     * @see PolicyTO\r\n      */\r\n     @PUT\r\n     @Path(\"{policyId}\")\r"},{"sha":"1291e92d960f3705cc5beae270efe20244f51529","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -84,7 +84,7 @@ public void load() {\n                 ClassMetadata metadata = factory.getMetadataReader(resource).getClassMetadata();\n \n                 try {\n-                    Class clazz = ClassUtils.forName(metadata.getClassName(), ClassUtils.getDefaultClassLoader());\n+                    Class<?> clazz = ClassUtils.forName(metadata.getClassName(), ClassUtils.getDefaultClassLoader());\n                     Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(clazz);\n \n                     if (interfaces.contains(Reportlet.class) && !metadata.isAbstract()) {\n@@ -102,7 +102,7 @@ public void load() {\n                     if (interfaces.contains(SyncActions.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n                     }\n-                    \n+\n                     if (interfaces.contains(SyncRule.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.SYNC_CORRELATION_RULES).add(metadata.getClassName());\n                     }\n@@ -121,7 +121,7 @@ public void load() {\n                 }\n             }\n         } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\", Reportlet.class.getName(), e);\n+            LOG.error(\"While searching for implementatiom classes\", e);\n         }\n \n         classNames = Collections.unmodifiableMap(classNames);"},{"sha":"066f06329631a358daf576b132ab164a821161f6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":18,"deletions":39,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.types.AuditElements.PolicySubCategory;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.PolicyType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n@@ -69,26 +68,23 @@ public class PolicyController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n-    public PasswordPolicyTO create(final HttpServletResponse response, @RequestBody final PasswordPolicyTO policyTO)\n-            throws SyncopeClientCompositeErrorException {\n-        return (PasswordPolicyTO) createInternal(policyTO);\n+    public PasswordPolicyTO create(final HttpServletResponse response, @RequestBody final PasswordPolicyTO policyTO) {\n+        return createInternal(policyTO);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/create\")\n-    public AccountPolicyTO create(final HttpServletResponse response, @RequestBody final AccountPolicyTO policyTO)\n-            throws SyncopeClientCompositeErrorException {\n-        return (AccountPolicyTO) createInternal(policyTO);\n+    public AccountPolicyTO create(final HttpServletResponse response, @RequestBody final AccountPolicyTO policyTO) {\n+        return createInternal(policyTO);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/create\")\n-    public SyncPolicyTO create(final HttpServletResponse response, @RequestBody final SyncPolicyTO policyTO)\n-            throws SyncopeClientCompositeErrorException {\n-        return (SyncPolicyTO) createInternal(policyTO);\n+    public SyncPolicyTO create(final HttpServletResponse response, @RequestBody final SyncPolicyTO policyTO) {\n+        return createInternal(policyTO);\n     }\n \n-    public PolicyTO createInternal(final PolicyTO policyTO) {\n+    public <T extends PolicyTO> T createInternal(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final Policy policy = binder.getPolicy(null, policyTO);\n@@ -100,7 +96,6 @@ public PolicyTO createInternal(final PolicyTO policyTO) {\n     }\n \n     private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n-\n         LOG.debug(\"Updating policy \" + policyTO);\n \n         binder.getPolicy(policy, policyTO);\n@@ -114,9 +109,7 @@ private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/update\")\n-    public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO)\n-            throws NotFoundException {\n-\n+    public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof PasswordPolicy)) {\n             throw new NotFoundException(\"PasswordPolicy with id \" + policyTO.getId());\n@@ -127,9 +120,7 @@ public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO)\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/update\")\n-    public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof AccountPolicy)) {\n             throw new NotFoundException(\"AccountPolicy with id \" + policyTO.getId());\n@@ -140,9 +131,7 @@ public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO)\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/update\")\n-    public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof SyncPolicy)) {\n             throw new NotFoundException(\"SyncPolicy with id \" + policyTO.getId());\n@@ -153,14 +142,13 @@ public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO)\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<PolicyTO> listByType(@PathVariable(\"kind\") final String kind) {\n-\n+    public <T extends PolicyTO> List<T> listByType(@PathVariable(\"kind\") final String kind) {\n         LOG.debug(\"Listing policies\");\n         List<? extends Policy> policies = policyDAO.find(PolicyType.valueOf(kind.toUpperCase(Locale.ENGLISH)));\n \n-        final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n+        final List<T> policyTOs = new ArrayList<T>();\n         for (Policy policy : policies) {\n-            policyTOs.add(binder.getPolicyTO(policy));\n+            policyTOs.add((T) binder.getPolicyTO(policy));\n         }\n \n         auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,\n@@ -171,9 +159,7 @@ public List<PolicyTO> listByType(@PathVariable(\"kind\") final String kind) {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n-    public PasswordPolicyTO getGlobalPasswordPolicy()\n-            throws NotFoundException {\n-\n+    public PasswordPolicyTO getGlobalPasswordPolicy() {\n         LOG.debug(\"Reading global password policy\");\n \n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n@@ -189,9 +175,7 @@ public PasswordPolicyTO getGlobalPasswordPolicy()\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n-    public AccountPolicyTO getGlobalAccountPolicy()\n-            throws NotFoundException {\n-\n+    public AccountPolicyTO getGlobalAccountPolicy() {\n         LOG.debug(\"Reading global account policy\");\n \n         AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n@@ -207,9 +191,7 @@ public AccountPolicyTO getGlobalAccountPolicy()\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n-    public SyncPolicyTO getGlobalSyncPolicy()\n-            throws NotFoundException {\n-\n+    public SyncPolicyTO getGlobalSyncPolicy() {\n         LOG.debug(\"Reading global sync policy\");\n \n         SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n@@ -225,9 +207,7 @@ public SyncPolicyTO getGlobalSyncPolicy()\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n-    public PolicyTO read(@PathVariable(\"id\") final Long id)\n-            throws NotFoundException {\n-\n+    public <T extends PolicyTO> T read(@PathVariable(\"id\") final Long id) {\n         LOG.debug(\"Reading policy with id {}\", id);\n \n         Policy policy = policyDAO.find(id);\n@@ -243,8 +223,7 @@ public PolicyTO read(@PathVariable(\"id\") final Long id)\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{id}\")\n-    public PolicyTO delete(@PathVariable(\"id\") final Long id)\n-            throws NotFoundException {\n+    public PolicyTO delete(@PathVariable(\"id\") final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");"},{"sha":"fae9f15719f0be8367ceb572cee4c9ec1a028dbb","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b43c09ef4dbaface397e4c06c75cb07c780ecd3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=8b43c09ef4dbaface397e4c06c75cb07c780ecd3","patch":"@@ -21,19 +21,16 @@\n import java.net.URI;\r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.BadRequestException;\r\n-import javax.ws.rs.NotFoundException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n-\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n+import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n-import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.PolicyController;\r\n@@ -60,37 +57,42 @@ public void delete(final PolicyType type, final Long policyId) {\n         policyController.delete(policyId);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n-        return (List<T>) policyController.listByType(type.toString());\r\n+        return policyController.listByType(type.toString());\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n-        return (T) policyController.read(policyId);\r\n+        return policyController.read(policyId);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n+        T result = null;\r\n+\r\n         switch (type) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r\n-                return (T) policyController.getGlobalAccountPolicy();\r\n+                result = (T) policyController.getGlobalAccountPolicy();\r\n+                break;\r\n \r\n             case PASSWORD:\r\n             case GLOBAL_PASSWORD:\r\n-                return (T) policyController.getGlobalPasswordPolicy();\r\n+                result = (T) policyController.getGlobalPasswordPolicy();\r\n+                break;\r\n \r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n-                return (T) policyController.getGlobalSyncPolicy();\r\n+                result = (T) policyController.getGlobalSyncPolicy();\r\n+                break;\r\n \r\n             default:\r\n                 throw new BadRequestException();\r\n         }\r\n+\r\n+        return result;\r\n     }\r\n \r\n     @Override\r\n@@ -122,18 +124,23 @@ public void setUriInfo(final UriInfo ui) {\n     }\r\n \r\n     @Override\r\n-    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(PolicyType type) {\r\n+    public Set<CorrelationRuleClassTO> getCorrelationRuleClasses(final PolicyType type) {\r\n+        Set<CorrelationRuleClassTO> result = null;\r\n+\r\n         switch (type) {\r\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n \r\n                 @SuppressWarnings(\"unchecked\")\r\n-                final Set<String> classes =\r\n-                        (Set<String>) policyController.getCorrelationRuleClasses().getModel().values().iterator().next();\r\n-                return CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                final Set<String> classes = (Set<String>) policyController.getCorrelationRuleClasses().getModel().\r\n+                        values().iterator().next();\r\n+                result = CollectionWrapper.wrapCorrelationRuleClasses(classes);\r\n+                break;\r\n \r\n             default:\r\n-                throw new NotFoundException();\r\n+                throw new BadRequestException();\r\n         }\r\n+\r\n+        return result;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file"}]}