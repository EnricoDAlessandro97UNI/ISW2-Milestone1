{"sha":"bd5bb0583784b8a36bb1815749adffc02d15bc88","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJkNWJiMDU4Mzc4NGI4YTM2YmIxODE1NzQ5YWRmZmMwMmQxNWJjODg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-03-23T10:23:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-03-23T10:34:18Z"},"message":"Enhance SearchConditionBuilder features","tree":{"sha":"4aa089cc22f4eaef5261fadb0bfd8efd8267b5de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4aa089cc22f4eaef5261fadb0bfd8efd8267b5de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bd5bb0583784b8a36bb1815749adffc02d15bc88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd5bb0583784b8a36bb1815749adffc02d15bc88","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd5bb0583784b8a36bb1815749adffc02d15bc88","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd5bb0583784b8a36bb1815749adffc02d15bc88/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"597bd5959963e83a9fa8cb5440c1b0cf8e9d1928","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/597bd5959963e83a9fa8cb5440c1b0cf8e9d1928","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/597bd5959963e83a9fa8cb5440c1b0cf8e9d1928"}],"stats":{"total":638,"additions":465,"deletions":173},"files":[{"sha":"b16d652a8e46e75148ee640d439466e7a75d400c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AbstractFiqlSearchConditionBuilder.java","status":"modified","additions":88,"deletions":24,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAbstractFiqlSearchConditionBuilder.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -20,13 +20,18 @@\n \n import java.io.Serializable;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.client.FiqlSearchConditionBuilder;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n-public abstract class AbstractFiqlSearchConditionBuilder extends FiqlSearchConditionBuilder implements Serializable {\n+public abstract class AbstractFiqlSearchConditionBuilder<\n+        P extends SyncopeProperty<C>,\n+        PA extends SyncopePartialCondition<P, C>, \n+        C extends SyncopeCompleteCondition<PA, P>>\n+        extends FiqlSearchConditionBuilder implements Serializable {\n \n     private static final long serialVersionUID = 9043884238032703381L;\n \n@@ -48,103 +53,162 @@ protected AbstractFiqlSearchConditionBuilder(final Map<String, String> propertie\n     }\n \n     @Override\n-    protected Builder newBuilderInstance() {\n-        return new Builder(properties);\n+    protected Builder<P, PA, C> newBuilderInstance() {\n+        return new Builder<>(properties);\n     }\n \n     @Override\n-    public SyncopeProperty is(final String property) {\n+    public P is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition isNull(final String property) {\n+    public C isNull(final String property) {\n         return newBuilderInstance().is(property).nullValue();\n     }\n \n-    public CompleteCondition isNotNull(final String property) {\n+    public C isNotNull(final String property) {\n         return newBuilderInstance().is(property).notNullValue();\n     }\n \n-    public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n+    public C inDynRealms(final String dynRealm, final String... moreDynRealms) {\n         return newBuilderInstance().\n                 is(SpecialAttr.DYNREALMS.toString()).\n                 inDynRealms(dynRealm, moreDynRealms);\n     }\n \n-    public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n+    public C notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n         return newBuilderInstance().\n                 is(SpecialAttr.DYNREALMS.toString()).\n                 notInDynRealms(dynRealm, moreDynRealms);\n     }\n \n-    public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+    public C hasResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n     }\n \n-    public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+    public C hasNotResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n     }\n \n-    protected static class Builder extends FiqlSearchConditionBuilder.Builder\n-            implements SyncopeProperty, CompleteCondition {\n+    @SuppressWarnings(\"unchecked\")\n+    protected static class Builder<\n+            P extends SyncopeProperty<C>,\n+            PA extends SyncopePartialCondition<P, C>,\n+            C extends SyncopeCompleteCondition<PA, P>>\n+            extends FiqlSearchConditionBuilder.Builder\n+            implements SyncopeProperty<C>, SyncopeCompleteCondition<PA, P>, SyncopePartialCondition<P, C> {\n \n         protected Builder(final Map<String, String> properties) {\n             super(properties);\n         }\n \n-        protected Builder(final Builder parent) {\n+        protected Builder(final Builder<P, PA, C> parent) {\n             super(parent);\n         }\n \n         @Override\n-        public SyncopeProperty is(final String property) {\n-            Builder b = new Builder(this);\n+        public P is(final String property) {\n+            Builder<P, PA, C> b = new Builder<>(this);\n             b.result = property;\n-            return b;\n+            return (P) b;\n         }\n \n         @Override\n-        public CompleteCondition nullValue() {\n+        protected C condition(\n+                final String operator, final Object value, final Object... moreValues) {\n+\n+            super.condition(operator, value, moreValues);\n+            return (C) this;\n+        }\n+\n+        @Override\n+        public C nullValue() {\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n \n         @Override\n-        public CompleteCondition notNullValue() {\n+        public C notNullValue() {\n             return condition(FiqlParser.NEQ, SpecialAttr.NULL);\n         }\n \n         @Override\n-        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n+        public C hasResources(final String resource, final String... moreResources) {\n             this.result = SpecialAttr.RESOURCES.toString();\n             return condition(FiqlParser.EQ, resource, (Object[]) moreResources);\n         }\n \n         @Override\n-        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n+        public C hasNotResources(final String resource, final String... moreResources) {\n             this.result = SpecialAttr.RESOURCES.toString();\n             return condition(FiqlParser.NEQ, resource, (Object[]) moreResources);\n         }\n \n         @Override\n-        public CompleteCondition equalToIgnoreCase(final String value, final String... moreValues) {\n+        public C equalToIgnoreCase(final String value, final String... moreValues) {\n             return condition(SyncopeFiqlParser.IEQ, value, (Object[]) moreValues);\n         }\n \n         @Override\n-        public CompleteCondition notEqualTolIgnoreCase(final String literalOrPattern) {\n+        public C notEqualTolIgnoreCase(final String literalOrPattern) {\n             return condition(SyncopeFiqlParser.NIEQ, literalOrPattern);\n         }\n \n         @Override\n-        public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n+        public C inDynRealms(final String dynRealm, final String... moreDynRealms) {\n             this.result = SpecialAttr.DYNREALMS.toString();\n             return condition(FiqlParser.EQ, dynRealm, (Object[]) moreDynRealms);\n         }\n \n         @Override\n-        public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n+        public C notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n             this.result = SpecialAttr.DYNREALMS.toString();\n             return condition(FiqlParser.NEQ, dynRealm, (Object[]) moreDynRealms);\n         }\n+\n+        @Override\n+        public PA and() {\n+            super.and();\n+            return (PA) this;\n+        }\n+\n+        @Override\n+        public P and(final String name) {\n+            return and().is(name);\n+        }\n+\n+        @Override\n+        public PA or() {\n+            super.or();\n+            return (PA) this;\n+        }\n+\n+        @Override\n+        public P or(final String name) {\n+            return or().is(name);\n+        }\n+\n+        @Override\n+        public C and(final CompleteCondition cc, final CompleteCondition cc1, final CompleteCondition... cn) {\n+            super.and(cc1, cc, cn);\n+            return (C) this;\n+        }\n+\n+        @Override\n+        public C or(final CompleteCondition cc, final CompleteCondition cc1, final CompleteCondition... cn) {\n+            super.or(cc1, cc, cn);\n+            return (C) this;\n+        }\n+\n+        @Override\n+        public C and(final List<CompleteCondition> conditions) {\n+            super.and(conditions);\n+            return (C) this;\n+        }\n+\n+        @Override\n+        public C or(final List<CompleteCondition> conditions) {\n+            super.or(conditions);\n+            return (C) this;\n+        }\n     }\n }"},{"sha":"d0002ac357a62ebeec04485a01d61ed69f5b535a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectCompleteCondition.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectCompleteCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectCompleteCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectCompleteCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface AnyObjectCompleteCondition\n+        extends SyncopeCompleteCondition<AnyObjectPartialCondition, AnyObjectProperty> {\n+}"},{"sha":"c2d889536622d347182ce233a4cc5d7fb269393d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectFiqlSearchConditionBuilder.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -20,15 +20,15 @@\n \n import java.util.Collections;\n import java.util.Map;\n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.client.FiqlSearchConditionBuilder;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * any objects in Syncope.\n  */\n-public class AnyObjectFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n+public class AnyObjectFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder<\n+        AnyObjectProperty, AnyObjectPartialCondition, AnyObjectCompleteCondition> {\n \n     private static final long serialVersionUID = -3248603004632741935L;\n \n@@ -55,50 +55,51 @@ public AnyObjectProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition inGroups(final String group, final String... moreGroups) {\n+    public AnyObjectCompleteCondition inGroups(final String group, final String... moreGroups) {\n         return newBuilderInstance().\n                 is(SpecialAttr.GROUPS.toString()).\n                 inGroups(group, moreGroups);\n     }\n \n-    public CompleteCondition notInGroups(final String group, final String... moreGroups) {\n+    public AnyObjectCompleteCondition notInGroups(final String group, final String... moreGroups) {\n         return newBuilderInstance().\n                 is(SpecialAttr.GROUPS.toString()).\n                 notInGroups(group, moreGroups);\n     }\n \n-    public CompleteCondition inRelationships(final String anyType, final String... moreAnyTypes) {\n+    public AnyObjectCompleteCondition inRelationships(final String anyType, final String... moreAnyTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIPS.toString()).\n                 inRelationships(anyType, moreAnyTypes);\n     }\n \n-    public CompleteCondition notInRelationships(final String anyType, final String... moreAnyTypes) {\n+    public AnyObjectCompleteCondition notInRelationships(final String anyType, final String... moreAnyTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIPS.toString()).\n                 notInRelationships(anyType, moreAnyTypes);\n     }\n \n-    public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+    public AnyObjectCompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n                 inRelationshipTypes(type, moreTypes);\n     }\n \n-    public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+    public AnyObjectCompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n                 notInRelationshipTypes(type, moreTypes);\n     }\n \n-    public CompleteCondition isAssignable() {\n+    public AnyObjectCompleteCondition isAssignable() {\n         return newBuilderInstance().\n                 is(SpecialAttr.ASSIGNABLE.toString()).\n                 isAssignable();\n     }\n \n-    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n-            implements AnyObjectProperty, CompleteCondition {\n+    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder<\n+            AnyObjectProperty, AnyObjectPartialCondition, AnyObjectCompleteCondition>\n+            implements AnyObjectProperty, AnyObjectPartialCondition, AnyObjectCompleteCondition {\n \n         public Builder(final Map<String, String> properties) {\n             super(properties);\n@@ -122,43 +123,43 @@ public AnyObjectProperty is(final String property) {\n         }\n \n         @Override\n-        public CompleteCondition inGroups(final String group, final String... moreGroups) {\n+        public AnyObjectCompleteCondition inGroups(final String group, final String... moreGroups) {\n             this.result = SpecialAttr.GROUPS.toString();\n             return condition(FiqlParser.EQ, group, (Object[]) moreGroups);\n         }\n \n         @Override\n-        public CompleteCondition notInGroups(final String group, final String... moreGroups) {\n+        public AnyObjectCompleteCondition notInGroups(final String group, final String... moreGroups) {\n             this.result = SpecialAttr.GROUPS.toString();\n             return condition(FiqlParser.NEQ, group, (Object[]) moreGroups);\n         }\n \n         @Override\n-        public CompleteCondition inRelationships(final String anyObject, final String... moreAnyObjects) {\n+        public AnyObjectCompleteCondition inRelationships(final String anyObject, final String... moreAnyObjects) {\n             this.result = SpecialAttr.RELATIONSHIPS.toString();\n             return condition(FiqlParser.EQ, anyObject, (Object[]) moreAnyObjects);\n         }\n \n         @Override\n-        public CompleteCondition notInRelationships(final String group, final String... moreRelationships) {\n+        public AnyObjectCompleteCondition notInRelationships(final String group, final String... moreRelationships) {\n             this.result = SpecialAttr.RELATIONSHIPS.toString();\n             return condition(FiqlParser.NEQ, group, (Object[]) moreRelationships);\n         }\n \n         @Override\n-        public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+        public AnyObjectCompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n             this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n             return condition(FiqlParser.EQ, type, (Object[]) moreTypes);\n         }\n \n         @Override\n-        public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+        public AnyObjectCompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n             this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n             return condition(FiqlParser.NEQ, type, (Object[]) moreTypes);\n         }\n \n         @Override\n-        public CompleteCondition isAssignable() {\n+        public AnyObjectCompleteCondition isAssignable() {\n             this.result = SpecialAttr.ASSIGNABLE.toString();\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }"},{"sha":"ab76fbef662d63242ddeaa9a5e733212e54482e9","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectPartialCondition.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectPartialCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectPartialCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectPartialCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface AnyObjectPartialCondition\n+        extends SyncopePartialCondition<AnyObjectProperty, AnyObjectCompleteCondition> {\n+}"},{"sha":"24cd9436e13000b697cbceb36223d4750256c83f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectProperty.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -18,22 +18,19 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+public interface AnyObjectProperty extends SyncopeProperty<AnyObjectCompleteCondition> {\n \n-public interface AnyObjectProperty extends SyncopeProperty {\n+    AnyObjectCompleteCondition inGroups(String group, String... moreGroups);\n \n-    CompleteCondition inGroups(String group, String... moreGroups);\n+    AnyObjectCompleteCondition notInGroups(String group, String... moreGroups);\n \n-    CompleteCondition notInGroups(String group, String... moreGroups);\n+    AnyObjectCompleteCondition inRelationships(String anyObject, String... moreAnyObjects);\n \n-    CompleteCondition inRelationships(String anyObject, String... moreAnyObjects);\n+    AnyObjectCompleteCondition notInRelationships(String anyObject, String... moreAnyObjects);\n \n-    CompleteCondition notInRelationships(String anyObject, String... moreAnyObjects);\n+    AnyObjectCompleteCondition inRelationshipTypes(String type, String... moreTypes);\n \n-    CompleteCondition inRelationshipTypes(String type, String... moreTypes);\n-\n-    CompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n-\n-    CompleteCondition isAssignable();\n+    AnyObjectCompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n \n+    AnyObjectCompleteCondition isAssignable();\n }"},{"sha":"a8b18ba8f72df9083de68d95876ead3422bd50d4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/ConnObjectTOCompleteCondition.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOCompleteCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOCompleteCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOCompleteCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface ConnObjectTOCompleteCondition\n+        extends SyncopeCompleteCondition<ConnObjectTOPartialCondition, ConnObjectTOProperty> {\n+}"},{"sha":"c679928368794085acfcddb12d15a7f9aa7c705f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/ConnObjectTOFiqlSearchConditionBuilder.java","status":"modified","additions":7,"deletions":26,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOFiqlSearchConditionBuilder.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Map;\n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * connector objects.\n  */\n-public class ConnObjectTOFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n+public class ConnObjectTOFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder<\n+        ConnObjectTOProperty, ConnObjectTOPartialCondition, ConnObjectTOCompleteCondition> {\n \n     private static final long serialVersionUID = 4983742159694010935L;\n \n@@ -35,12 +35,13 @@ protected Builder newBuilderInstance() {\n     }\n \n     @Override\n-    public SyncopeProperty is(final String property) {\n+    public ConnObjectTOProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n-            implements SyncopeProperty, CompleteCondition {\n+    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder<\n+        ConnObjectTOProperty, ConnObjectTOPartialCondition, ConnObjectTOCompleteCondition>\n+            implements ConnObjectTOProperty, ConnObjectTOPartialCondition, ConnObjectTOCompleteCondition {\n \n         public Builder(final Map<String, String> properties) {\n             super(properties);\n@@ -51,30 +52,10 @@ public Builder(final Builder parent) {\n         }\n \n         @Override\n-        public SyncopeProperty is(final String property) {\n+        public ConnObjectTOProperty is(final String property) {\n             Builder b = new Builder(this);\n             b.result = property;\n             return b;\n         }\n-\n-        @Override\n-        public CompleteCondition inDynRealms(final String dynRealm, final String... moreDynRealms) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public CompleteCondition notInDynRealms(final String dynRealm, final String... moreDynRealms) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public CompleteCondition hasResources(final String resource, final String... moreResources) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n-            throw new UnsupportedOperationException();\n-        }\n     }\n }"},{"sha":"88b9f4a8a6f06dd88c5576adf110b3654301e06e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/ConnObjectTOPartialCondition.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOPartialCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOPartialCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOPartialCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface ConnObjectTOPartialCondition\n+        extends SyncopePartialCondition<ConnObjectTOProperty, ConnObjectTOCompleteCondition> {\n+}"},{"sha":"a880fbfafc125361d16d6da51bc7423cbfa4d14c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/ConnObjectTOProperty.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FConnObjectTOProperty.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface ConnObjectTOProperty extends SyncopeProperty<ConnObjectTOCompleteCondition> {\n+}"},{"sha":"6958ee9af90223737edad5873ac733ecc6ccdcde","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupCompleteCondition.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupCompleteCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupCompleteCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupCompleteCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface GroupCompleteCondition extends SyncopeCompleteCondition<GroupPartialCondition, GroupProperty> {\n+}"},{"sha":"bf7ddb292b6ac745cb115af81fe8bc078b4ea490","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Map;\n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * groups in Syncope.\n  */\n-public class GroupFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n+public class GroupFiqlSearchConditionBuilder\n+        extends AbstractFiqlSearchConditionBuilder<GroupProperty, GroupPartialCondition, GroupCompleteCondition> {\n \n     private static final long serialVersionUID = 6275686371606165706L;\n \n@@ -40,26 +40,27 @@ public GroupProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition isAssignable() {\n+    public GroupCompleteCondition isAssignable() {\n         return newBuilderInstance().\n                 is(SpecialAttr.ASSIGNABLE.toString()).\n                 isAssignable();\n     }\n \n-    public CompleteCondition withMembers(final String member, final String... moreMembers) {\n+    public GroupCompleteCondition withMembers(final String member, final String... moreMembers) {\n         return newBuilderInstance().\n                 is(SpecialAttr.MEMBER.toString()).\n                 withMembers(member, moreMembers);\n     }\n \n-    public CompleteCondition withoutMembers(final String member, final String... moreMembers) {\n+    public GroupCompleteCondition withoutMembers(final String member, final String... moreMembers) {\n         return newBuilderInstance().\n                 is(SpecialAttr.MEMBER.toString()).\n                 withoutMembers(member, moreMembers);\n     }\n \n-    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n-            implements GroupProperty, CompleteCondition {\n+    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder<\n+            GroupProperty, GroupPartialCondition, GroupCompleteCondition>\n+            implements GroupProperty, GroupCompleteCondition, GroupPartialCondition {\n \n         public Builder(final Map<String, String> properties) {\n             super(properties);\n@@ -77,19 +78,19 @@ public GroupProperty is(final String property) {\n         }\n \n         @Override\n-        public CompleteCondition isAssignable() {\n+        public GroupCompleteCondition isAssignable() {\n             this.result = SpecialAttr.ASSIGNABLE.toString();\n             return condition(FiqlParser.EQ, SpecialAttr.NULL);\n         }\n \n         @Override\n-        public CompleteCondition withMembers(final String member, final String... moreMembers) {\n+        public GroupCompleteCondition withMembers(final String member, final String... moreMembers) {\n             this.result = SpecialAttr.MEMBER.toString();\n             return condition(FiqlParser.EQ, member, (Object[]) moreMembers);\n         }\n \n         @Override\n-        public CompleteCondition withoutMembers(final String member, final String... moreMembers) {\n+        public GroupCompleteCondition withoutMembers(final String member, final String... moreMembers) {\n             this.result = SpecialAttr.MEMBER.toString();\n             return condition(FiqlParser.NEQ, member, (Object[]) moreMembers);\n         }"},{"sha":"405200634fabbbff4cbd485c156fd3fa53e9e784","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupPartialCondition.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupPartialCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupPartialCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupPartialCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface GroupPartialCondition extends SyncopePartialCondition<GroupProperty, GroupCompleteCondition> {\n+}"},{"sha":"8108012f03622b52a538886cfbfbb86fa4e462fe","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+public interface GroupProperty extends SyncopeProperty<GroupCompleteCondition> {\n \n-public interface GroupProperty extends SyncopeProperty {\n+    GroupCompleteCondition isAssignable();\n \n-    CompleteCondition isAssignable();\n+    GroupCompleteCondition withMembers(String member, String... moreMembers);\n \n-    CompleteCondition withMembers(String member, String... moreMembers);\n-\n-    CompleteCondition withoutMembers(String member, String... moreMembers);\n+    GroupCompleteCondition withoutMembers(String member, String... moreMembers);\n }"},{"sha":"c9cfec4d86172ca8de7707f70b7bb69c4b0cb2f3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeCompleteCondition.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeCompleteCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeCompleteCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeCompleteCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n+public interface SyncopeCompleteCondition<PA extends SyncopePartialCondition<P, ?>, P extends SyncopeProperty<?>>\n+        extends CompleteCondition {\n+\n+    @Override\n+    PA and();\n+\n+    @Override\n+    P and(String string);\n+\n+    @Override\n+    PA or();\n+\n+    @Override\n+    P or(String string);\n+}"},{"sha":"4f8efb5bd133c0ff795ede2846f6d4dc890c2204","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopePartialCondition.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopePartialCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopePartialCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopePartialCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+import java.util.List;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.PartialCondition;\n+\n+public interface SyncopePartialCondition<P extends SyncopeProperty<C>, C extends SyncopeCompleteCondition<?, P>>\n+        extends PartialCondition {\n+\n+    @Override\n+    P is(String string);\n+\n+    @Override\n+    C and(CompleteCondition cc, CompleteCondition cc1, CompleteCondition... ccs);\n+\n+    @Override\n+    C or(CompleteCondition cc, CompleteCondition cc1, CompleteCondition... ccs);\n+\n+    @Override\n+    C and(List<CompleteCondition> list);\n+\n+    @Override\n+    C or(List<CompleteCondition> list);\n+}"},{"sha":"e792826d6c1e99a90ef7491758e31a82fed1af35","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeProperty.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeProperty.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -18,60 +18,60 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.client.Property;\n \n /**\n  * Extension of fluent interface, for {@link org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder}\n  * and subclasses.\n+ *\n+ * @param <C> the actual complete condition\n  */\n-public interface SyncopeProperty extends Property {\n+public interface SyncopeProperty<C extends SyncopeCompleteCondition<?, ?>> extends Property {\n \n     /** Is textual property equal to (ignoring case) given literal or matching given pattern?\n      *\n      * @param value first value\n      * @param moreValues more values\n      * @return updated condition\n      */\n-    CompleteCondition equalToIgnoreCase(String value, String... moreValues);\n+    C equalToIgnoreCase(String value, String... moreValues);\n \n     /** Is textual property different (ignoring case) than given literal or not matching given pattern?\n      *\n      * @param literalOrPattern The literal or Pattern String\n      * @return updated condition\n      */\n-    CompleteCondition notEqualTolIgnoreCase(String literalOrPattern);\n+    C notEqualTolIgnoreCase(String literalOrPattern);\n \n     /** Is property null?\n      *\n      * @return updated condition\n      */\n-    CompleteCondition nullValue();\n+    C nullValue();\n \n     /** Is property not null?\n      *\n      * @return updated condition\n      */\n-    CompleteCondition notNullValue();\n+    C notNullValue();\n \n     /** Is user, group or any object owning given resource(s)?\n      *\n      * @param resource first resource\n      * @param moreResources more resources\n      * @return updated condition\n      */\n-    CompleteCondition hasResources(String resource, String... moreResources);\n+    C hasResources(String resource, String... moreResources);\n \n     /** Is user, group or any object not owning given resource(s)?\n      *\n      * @param resource first resource\n      * @param moreResources more resources\n      * @return updated condition\n      */\n-    CompleteCondition hasNotResources(String resource, String... moreResources);\n-\n-    CompleteCondition inDynRealms(String dynRealm, String... moreDynRealms);\n+    C hasNotResources(String resource, String... moreResources);\n \n-    CompleteCondition notInDynRealms(String dynRealm, String... moreDynRealms);\n+    C inDynRealms(String dynRealm, String... moreDynRealms);\n \n+    C notInDynRealms(String dynRealm, String... moreDynRealms);\n }"},{"sha":"f0373955f821da39218363f71f014a864ea1f980","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/UserCompleteCondition.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserCompleteCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserCompleteCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserCompleteCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface UserCompleteCondition extends SyncopeCompleteCondition<UserPartialCondition, UserProperty> {\n+}"},{"sha":"71447c8845f48b2cbe9256b1167d768d22f18e47","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":25,"deletions":24,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.common.lib.search;\n \n import java.util.Map;\n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * users in Syncope.\n  */\n-public class UserFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n+public class UserFiqlSearchConditionBuilder\n+        extends AbstractFiqlSearchConditionBuilder<UserProperty, UserPartialCondition, UserCompleteCondition> {\n \n     private static final long serialVersionUID = 3485708634448845774L;\n \n@@ -40,68 +40,69 @@ public UserProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition inGroups(final String group, final String... moreGroups) {\n+    public UserCompleteCondition inGroups(final String group, final String... moreGroups) {\n         return newBuilderInstance().\n                 is(SpecialAttr.GROUPS.toString()).\n                 inGroups(group, moreGroups);\n     }\n \n-    public CompleteCondition notInGroups(final String group, final String... moreGroups) {\n+    public UserCompleteCondition notInGroups(final String group, final String... moreGroups) {\n         return newBuilderInstance().\n                 is(SpecialAttr.GROUPS.toString()).\n                 notInGroups(group, moreGroups);\n     }\n \n-    public CompleteCondition inRelationships(final String anyType, final String... moreAnyTypes) {\n+    public UserCompleteCondition inRelationships(final String anyType, final String... moreAnyTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIPS.toString()).\n                 inRelationships(anyType, moreAnyTypes);\n     }\n \n-    public CompleteCondition notInRelationships(final String anyType, final String... moreAnyTypes) {\n+    public UserCompleteCondition notInRelationships(final String anyType, final String... moreAnyTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIPS.toString()).\n                 notInRelationships(anyType, moreAnyTypes);\n     }\n \n-    public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+    public UserCompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n                 inRelationshipTypes(type, moreTypes);\n     }\n \n-    public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+    public UserCompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n         return newBuilderInstance().\n                 is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n                 notInRelationshipTypes(type, moreTypes);\n     }\n \n-    public CompleteCondition inRoles(final String role, final String... moreRoles) {\n+    public UserCompleteCondition inRoles(final String role, final String... moreRoles) {\n         return newBuilderInstance().\n                 is(SpecialAttr.ROLES.toString()).\n                 inRoles(role, moreRoles);\n     }\n \n-    public CompleteCondition notInRoles(final String role, final String... moreRoles) {\n+    public UserCompleteCondition notInRoles(final String role, final String... moreRoles) {\n         return newBuilderInstance().\n                 is(SpecialAttr.ROLES.toString()).\n                 notInRoles(role, moreRoles);\n     }\n \n-    public CompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n+    public UserCompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n         return newBuilderInstance().\n                 is(SpecialAttr.PRIVILEGES.toString()).\n                 withPrivileges(privilege, morePrivileges);\n     }\n \n-    public CompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n+    public UserCompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n         return newBuilderInstance().\n                 is(SpecialAttr.PRIVILEGES.toString()).\n                 withoutPrivileges(privilege, morePrivileges);\n     }\n \n-    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n-            implements UserProperty, CompleteCondition {\n+    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder<\n+            UserProperty, UserPartialCondition, UserCompleteCondition>\n+            implements UserProperty, UserPartialCondition, UserCompleteCondition {\n \n         public Builder(final Map<String, String> properties) {\n             super(properties);\n@@ -119,61 +120,61 @@ public UserProperty is(final String property) {\n         }\n \n         @Override\n-        public CompleteCondition inGroups(final String group, final String... moreGroups) {\n+        public UserCompleteCondition inGroups(final String group, final String... moreGroups) {\n             this.result = SpecialAttr.GROUPS.toString();\n             return condition(FiqlParser.EQ, group, (Object[]) moreGroups);\n         }\n \n         @Override\n-        public CompleteCondition notInGroups(final String group, final String... moreGroups) {\n+        public UserCompleteCondition notInGroups(final String group, final String... moreGroups) {\n             this.result = SpecialAttr.GROUPS.toString();\n             return condition(FiqlParser.NEQ, group, (Object[]) moreGroups);\n         }\n \n         @Override\n-        public CompleteCondition inRelationships(final String anyObject, final String... moreAnyObjects) {\n+        public UserCompleteCondition inRelationships(final String anyObject, final String... moreAnyObjects) {\n             this.result = SpecialAttr.RELATIONSHIPS.toString();\n             return condition(FiqlParser.EQ, anyObject, (Object[]) moreAnyObjects);\n         }\n \n         @Override\n-        public CompleteCondition notInRelationships(final String anyObject, final String... moreAnyObjects) {\n+        public UserCompleteCondition notInRelationships(final String anyObject, final String... moreAnyObjects) {\n             this.result = SpecialAttr.RELATIONSHIPS.toString();\n             return condition(FiqlParser.NEQ, anyObject, (Object[]) moreAnyObjects);\n         }\n \n         @Override\n-        public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+        public UserCompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n             this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n             return condition(FiqlParser.EQ, type, (Object[]) moreTypes);\n         }\n \n         @Override\n-        public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+        public UserCompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n             this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n             return condition(FiqlParser.NEQ, type, (Object[]) moreTypes);\n         }\n \n         @Override\n-        public CompleteCondition inRoles(final String role, final String... moreRoles) {\n+        public UserCompleteCondition inRoles(final String role, final String... moreRoles) {\n             this.result = SpecialAttr.ROLES.toString();\n             return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n         }\n \n         @Override\n-        public CompleteCondition notInRoles(final String role, final String... moreRoles) {\n+        public UserCompleteCondition notInRoles(final String role, final String... moreRoles) {\n             this.result = SpecialAttr.ROLES.toString();\n             return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n         }\n \n         @Override\n-        public CompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n+        public UserCompleteCondition withPrivileges(final String privilege, final String... morePrivileges) {\n             this.result = SpecialAttr.PRIVILEGES.toString();\n             return condition(FiqlParser.EQ, privilege, (Object[]) morePrivileges);\n         }\n \n         @Override\n-        public CompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n+        public UserCompleteCondition withoutPrivileges(final String privilege, final String... morePrivileges) {\n             this.result = SpecialAttr.PRIVILEGES.toString();\n             return condition(FiqlParser.NEQ, privilege, (Object[]) morePrivileges);\n         }"},{"sha":"b63ca7dabadd29baf9030f7b2459a35cac74bcfe","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/UserPartialCondition.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserPartialCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserPartialCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserPartialCondition.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.search;\n+\n+public interface UserPartialCondition extends SyncopePartialCondition<UserProperty, UserCompleteCondition> {\n+}"},{"sha":"5c17f22a8d26d257a06cf388a766b256edf345db","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/UserProperty.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -18,28 +18,25 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+public interface UserProperty extends SyncopeProperty<UserCompleteCondition> {\n \n-public interface UserProperty extends SyncopeProperty {\n+    UserCompleteCondition inGroups(String group, String... moreGroups);\n \n-    CompleteCondition inGroups(String group, String... moreGroups);\n+    UserCompleteCondition notInGroups(String group, String... moreGroups);\n \n-    CompleteCondition notInGroups(String group, String... moreGroups);\n+    UserCompleteCondition inRelationships(String anyObject, String... moreAnyObjects);\n \n-    CompleteCondition inRelationships(String anyObject, String... moreAnyObjects);\n+    UserCompleteCondition notInRelationships(String anyObject, String... moreAnyObjects);\n \n-    CompleteCondition notInRelationships(String anyObject, String... moreAnyObjects);\n+    UserCompleteCondition inRelationshipTypes(String type, String... moreTypes);\n \n-    CompleteCondition inRelationshipTypes(String type, String... moreTypes);\n+    UserCompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n \n-    CompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n+    UserCompleteCondition inRoles(String role, String... moreRoles);\n \n-    CompleteCondition inRoles(String role, String... moreRoles);\n+    UserCompleteCondition notInRoles(String role, String... moreRoles);\n \n-    CompleteCondition notInRoles(String role, String... moreRoles);\n-\n-    CompleteCondition withPrivileges(String privilege, String... morePrivileges);\n-\n-    CompleteCondition withoutPrivileges(String privilege, String... morePrivileges);\n+    UserCompleteCondition withPrivileges(String privilege, String... morePrivileges);\n \n+    UserCompleteCondition withoutPrivileges(String privilege, String... morePrivileges);\n }"},{"sha":"d314db0bb06958c568df2f11e26b1ff98f4e7648","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/FilterConverterTest.java","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd5bb0583784b8a36bb1815749adffc02d15bc88/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd5bb0583784b8a36bb1815749adffc02d15bc88/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java?ref=bd5bb0583784b8a36bb1815749adffc02d15bc88","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.search;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -175,13 +174,6 @@ public void isNotNull() {\n \n     @Test\n     public void inDynRealms() {\n-        try {\n-            new ConnObjectTOFiqlSearchConditionBuilder().inDynRealms(\"realm\").query();\n-            fail();\n-        } catch (UnsupportedOperationException e) {\n-            assertNotNull(e);\n-        }\n-\n         try {\n             FilterConverter.convert(SpecialAttr.DYNREALMS + \"==realm\");\n             fail();\n@@ -192,13 +184,6 @@ public void inDynRealms() {\n \n     @Test\n     public void notInDynRealms() {\n-        try {\n-            new ConnObjectTOFiqlSearchConditionBuilder().notInDynRealms(\"realm\").query();\n-            fail();\n-        } catch (UnsupportedOperationException e) {\n-            assertNotNull(e);\n-        }\n-\n         try {\n             FilterConverter.convert(SpecialAttr.DYNREALMS + \"!=realm\");\n             fail();\n@@ -209,13 +194,6 @@ public void notInDynRealms() {\n \n     @Test\n     public void hasResources() {\n-        try {\n-            new ConnObjectTOFiqlSearchConditionBuilder().hasResources(\"resource\").query();\n-            fail();\n-        } catch (UnsupportedOperationException e) {\n-            assertNotNull(e);\n-        }\n-\n         try {\n             FilterConverter.convert(SpecialAttr.RESOURCES + \"==resource\");\n             fail();\n@@ -226,13 +204,6 @@ public void hasResources() {\n \n     @Test\n     public void hasNotResources() {\n-        try {\n-            new ConnObjectTOFiqlSearchConditionBuilder().hasNotResources(\"resource\").query();\n-            fail();\n-        } catch (UnsupportedOperationException e) {\n-            assertNotNull(e);\n-        }\n-\n         try {\n             FilterConverter.convert(SpecialAttr.RESOURCES + \"!=resource\");\n             fail();"}]}