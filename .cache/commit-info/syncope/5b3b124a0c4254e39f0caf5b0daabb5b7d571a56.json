{"sha":"5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjViM2IxMjRhMGM0MjU0ZTM5ZjBjYWY1YjBkYWFiYjViN2Q1NzFhNTY=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-15T15:37:58Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-15T15:37:58Z"},"message":"Initial running version, in order to fix #1","tree":{"sha":"2cc3a6e6c5d9e6a9233f4c82711f1c9bb1c95e5a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2cc3a6e6c5d9e6a9233f4c82711f1c9bb1c95e5a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"bac25e1a6254d35fac90e9f9ab90b3a6521d42b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac25e1a6254d35fac90e9f9ab90b3a6521d42b7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bac25e1a6254d35fac90e9f9ab90b3a6521d42b7"}],"stats":{"total":5360,"additions":4906,"deletions":454},"files":[{"sha":"feb7db7660e6c8a238868f2374d12c4e6d2d62d7","filename":"common/src/main/java/org/apache/syncope/common/services/RouteService.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRouteService.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.services;\n+\n+import java.util.List;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.to.RouteTO;\n+\n+@Path(\"routes\")\n+public interface RouteService extends JAXRSService{\n+    \n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RouteTO> getRoutes();\n+    \n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Path(\"{id}\")\n+    public RouteTO getRoute(@PathParam(\"id\") Long Id);\n+    \n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Path(\"{id}\")\n+    void importRoute(@PathParam(\"id\") Long id, RouteTO route);\n+    \n+}\n\\ No newline at end of file"},{"sha":"da700437970336fdf1e46a8dd16fed4480e61925","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -86,4 +86,13 @@ public interface WorkflowService extends JAXRSService {\n     @PUT\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     void importDefinition(@NotNull @PathParam(\"kind\") SubjectType kind, @NotNull String definition);\n+    \n+    @GET\n+    @Path(\"{id}\")\n+    @Produces({ MediaType.APPLICATION_XML })\n+    Response getRoute(@PathParam(\"id\") Long id);\n+    \n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML })\n+    Response getRoutes();\n }"},{"sha":"d9fe8330d0681f2de55ed66e70f6c85be7054414","filename":"common/src/main/java/org/apache/syncope/common/to/RouteTO.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRouteTO.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"route\")\n+@XmlType\n+public class RouteTO extends AbstractBaseBean{\n+    \n+    private Long id;\n+\n+    private String name;\n+\n+    private String routeContent;\n+    \n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getRouteContent() {\n+        return routeContent;\n+    }\n+\n+    public void setRouteContent(String routeContent) {\n+        this.routeContent = routeContent;\n+    }\n+    \n+}"},{"sha":"10dcfc7a32e7250a8ce9dfbe5c6af42c72d8e767","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.to.NotificationTO;\n+import org.apache.syncope.common.to.RouteTO;\n import org.apache.syncope.common.to.SecurityQuestionTO;\n import org.apache.syncope.console.commons.AttrLayoutType;\n import org.apache.syncope.common.types.LoggerLevel;\n@@ -44,6 +45,7 @@\n import org.apache.syncope.console.pages.panels.PoliciesPanel;\n import org.apache.syncope.console.rest.LoggerRestClient;\n import org.apache.syncope.console.rest.NotificationRestClient;\n+import org.apache.syncope.console.rest.RouteRestClient;\n import org.apache.syncope.console.rest.SecurityQuestionRestClient;\n import org.apache.syncope.console.rest.WorkflowRestClient;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n@@ -117,6 +119,9 @@ public class Configuration extends BasePage {\n \n     @SpringBean\n     private WorkflowRestClient wfRestClient;\n+    \n+    @SpringBean\n+    private RouteRestClient routeRestClient;\n \n     @SpringBean\n     private PreferenceManager prefMan;\n@@ -130,12 +135,16 @@ public class Configuration extends BasePage {\n     private final ModalWindow createSecurityQuestionWin;\n \n     private final ModalWindow editSecurityQuestionWin;\n+    \n+    private final ModalWindow editRouteWin;\n \n     private WebMarkupContainer notificationContainer;\n \n     private WebMarkupContainer securityQuestionContainer;\n \n     private int notificationPaginatorRows;\n+    \n+    private int routePaginatorRows;\n \n     public Configuration() {\n         super();\n@@ -267,6 +276,10 @@ protected byte[] getImageData(final IResource.Attributes attributes) {\n         add(new LayoutsPanel(\"selfRoleLayoutPanel\", AttrLayoutType.SELF_ROLE, feedbackPanel));\n         add(new LayoutsPanel(\"adminMembershipLayoutPanel\", AttrLayoutType.ADMIN_MEMBERSHIP, feedbackPanel));\n         add(new LayoutsPanel(\"selfMembershipLayoutPanel\", AttrLayoutType.SELF_MEMBERSHIP, feedbackPanel));\n+        \n+        //Route Management\n+        add(editRouteWin = new ModalWindow(\"editRouteWin\"));\n+        setupRoutes();\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -754,4 +767,111 @@ public void setLogLevel(final String name, final LoggerLevel level) {\n             ctx.updateLoggers();\n         }\n     }\n+    \n+    private void setupRoutes() {\n+\n+        routePaginatorRows = prefMan.getPaginatorRows(getRequest(), \"route.paginator.rows\");\n+\n+        final List<IColumn<RouteTO, String>> routeCols = new ArrayList<IColumn<RouteTO, String>>();\n+        routeCols.add(new PropertyColumn<RouteTO, String>(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+\n+        routeCols.add(new PropertyColumn<RouteTO, String>(\n+                new ResourceModel(\"name\"), \"name\", \"name\"));\n+\n+        routeCols.add(new AbstractColumn<RouteTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<RouteTO>> cellItem, final String componentId,\n+                    final IModel<RouteTO> model) {\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        editRouteWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new RouteModalPage(Configuration.this.getPageReference(), editRouteWin, routeRestClient.readRoute(model.getObject().getId()), false);\n+                                //throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n+                            }\n+\n+                        });\n+\n+                        editRouteWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Routes\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<RouteTO, String> routeTable\n+                = new AjaxFallbackDefaultDataTable<RouteTO, String>(\n+                        \"routeTable\", routeCols, new RouteProvider(), routePaginatorRows);\n+\n+        WebMarkupContainer routeContainer = new WebMarkupContainer(\"routesContainer\");\n+        routeContainer.add(routeTable);\n+        routeContainer.setOutputMarkupId(true);\n+\n+        add(routeContainer);\n+\n+        editRouteWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editRouteWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);\n+        editRouteWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);\n+    }\n+    \n+    private class RouteProvider extends SortableDataProvider<RouteTO, String> {\n+\n+        private SortableDataProviderComparator<RouteTO> comparator;\n+       \n+        public RouteProvider() {\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<RouteTO>(this);   \n+        }\n+\n+        @Override\n+        public Iterator<? extends RouteTO> iterator(long first, long count) {\n+            List<RouteTO> list =  routeRestClient.readRoutes();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return routeRestClient.readRoutes().size();\n+        }\n+\n+        @Override\n+        public IModel<RouteTO> model(final RouteTO route) {\n+            return new AbstractReadOnlyModel<RouteTO>() {\n+\n+                private static final long serialVersionUID = 774694801558497248L;\n+\n+                @Override\n+                public RouteTO getObject() {\n+                    return route;\n+                }\n+            };\n+        }\n+       \n+   }\n+\n }"},{"sha":"bba8aa4c722bd71d283dd3a6560862a6a13a6a54","filename":"console/src/main/java/org/apache/syncope/console/pages/RouteModalPage.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.pages;\n+\n+import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.rest.RouteRestClient;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextArea;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+\n+public class RouteModalPage extends BaseModalPage{\n+    \n+    @SpringBean\n+    private RouteRestClient restClient;\n+    \n+     public RouteModalPage(final PageReference pageRef, final ModalWindow window,\n+            final RouteTO routeTO, final boolean createFlag){\n+         \n+        Form routeForm = new Form(\"routeDefForm\");            \n+        \n+        final TextArea<String> routeDefArea = new TextArea<String>(\"routeContent\", new PropertyModel<String>(routeTO, \"routeContent\"));       \n+        //routeDefArea.setOutputMarkupId(true);      \n+        \n+        routeForm.add(routeDefArea);\n+        routeForm.setModel(new CompoundPropertyModel<RouteTO>(routeTO));\n+        \n+        //routeDefArea.setMarkupId(\"routeContent\");\n+\n+        AjaxButton submit =\n+                new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT)), routeForm) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                        try {\n+                            restClient.updateRoute(routeTO.getId(), ((RouteTO)form.getModelObject()).getRouteContent());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                            \n+                            Configuration callerPage = (Configuration) pageRef.getPage();\n+                            callerPage.setModalResult(true);                            \n+                            window.close(target);\n+                        } catch (SyncopeClientException scee) {\n+                            error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                        }\n+                        target.add(feedbackPanel);\n+                    }\n+\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                        target.add(feedbackPanel);\n+                    }\n+\n+                };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE,\n+                xmlRolesReader.getEntitlement(\"Routes\", \"update\"));\n+        routeForm.add(submit);\n+\n+        this.add(routeForm);\n+     }\n+}"},{"sha":"673652aa214722c2ebefd2a449477f4d6431d771","filename":"console/src/main/java/org/apache/syncope/console/rest/RouteRestClient.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRouteRestClient.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.console.rest;\n+\n+import java.util.List;\n+import org.apache.syncope.common.services.RouteService;\n+import org.apache.syncope.common.to.RouteTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RouteRestClient extends BaseRestClient{\n+    \n+    protected static final Logger LOG = LoggerFactory.getLogger(RouteRestClient.class);\n+    \n+    public List<RouteTO> readRoutes(){\n+        return getService(RouteService.class).getRoutes();\n+    }\n+    \n+    public RouteTO readRoute(Long id){\n+        return getService(RouteService.class).getRoute(id);\n+    }\n+    \n+    public void updateRoute(Long id, String definition){\n+        RouteTO routeTO = readRoute(id);        \n+        routeTO.setRouteContent(definition);     \n+        getService(RouteService.class).importRoute(routeTO.getId(), routeTO);\n+    }\n+    \n+}"},{"sha":"d5914f822696634005ecf18f23865e02b51cac81","filename":"console/src/main/resources/authorizations.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -317,4 +317,17 @@ under the License.\n       <entitlement>POLICY_UPDATE</entitlement>\n     </action>\n   </page>\n+  <page id=\"Routes\">\n+    <action id=\"list\">\n+      <entitlement>ROUTE_LIST</entitlement>\n+    </action>\n+\n+    <action id=\"read\">\n+      <entitlement>ROUTE_READ</entitlement>\n+    </action>\n+\n+    <action id=\"update\">\n+      <entitlement>ROUTE_UPDATE</entitlement>\n+    </action>\n+  </page>\n </auth>"},{"sha":"62f97a89d9320b8ba976a839e3e8e07f91b33848","filename":"console/src/main/resources/org/apache/syncope/console/pages/Configuration.html","status":"modified","additions":206,"deletions":197,"changes":403,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -17,211 +17,220 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:head>\n-    <script type=\"text/javascript\">\n-      $(document).ready(function () {\n-        $(\"#policies\").tabs();\n-        $(\"#logs\").tabs();\n-        $(\"#layouts\").tabs();\n-      });\n-    </script>\n-  </wicket:head>\n+    <wicket:head>\n+        <script type=\"text/javascript\">\n+            $(document).ready(function () {\n+                $(\"#policies\").tabs();\n+                $(\"#logs\").tabs();\n+                $(\"#layouts\").tabs();\n+            });\n+        </script>\n+    </wicket:head>\n \n-  <wicket:extend>\n+    <wicket:extend>\n \n-    <div id=\"tabs\">\n-      <ul>\n-        <li class=\"tabs-selected\">\n-          <a href=\"#layouts\"><span><wicket:message key=\"layouts\"/></span></a>\n-        </li>\n-        <li><a href=\"#policies\"><span><wicket:message key=\"policies\"/></span></a></li>\n-        <li><a href=\"#notifications\"><span><wicket:message key=\"notifications\"/></span></a></li>\n-        <li><a href=\"#securityQuestions\"><span><wicket:message key=\"securityQuestions\"/></span></a></li>\n-        <li><a href=\"#workflow\"><span><wicket:message key=\"workflow\"/></span></a></li>\n-        <li><a href=\"#logs\"><span><wicket:message key=\"logs\"/></span></a></li>\n-      </ul>\n-      <div id=\"layouts\">\n-        <ul>\n-          <li class=\"tabs-selected\">\n-            <a href=\"#adminUser\"><span><wicket:message key=\"adminUser\"/></span></a>\n-          </li>\n-          <li><a href=\"#selfUser\"><span><wicket:message key=\"selfUser\"/></span></a></li>\n-          <li><a href=\"#adminRole\"><span><wicket:message key=\"adminRole\"/></span></a></li>\n-          <li><a href=\"#selfRole\"><span><wicket:message key=\"selfRole\"/></span></a></li>\n-          <li><a href=\"#adminMembership\"><span><wicket:message key=\"adminMembership\"/></span></a></li>\n-          <li><a href=\"#selfMembership\"><span><wicket:message key=\"selfMembership\"/></span></a></li>\n-        </ul>\n-        <div id=\"adminUser\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"adminUserLayoutPanel\">[admin user layout panel]</span>\n-        </div>\n-        <div id=\"selfUser\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"selfUserLayoutPanel\">[self user layout panel]</span>\n-        </div>\n-        <div id=\"adminRole\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"adminRoleLayoutPanel\">[admin role layout panel]</span>\n-        </div>\n-        <div id=\"selfRole\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"selfRoleLayoutPanel\">[self role layout panel]</span>\n-        </div>\n-        <div id=\"adminMembership\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"adminMembershipLayoutPanel\">[admin membership layout panel]</span>\n-        </div>\n-        <div id=\"selfMembership\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"selfMembershipLayoutPanel\">[self membership layout panel]</span>\n-        </div>\n-      </div>      \n-      <div id=\"policies\">\n-        <ul>\n-          <li class=\"tabs-selected\">\n-            <a href=\"#account\"><span><wicket:message key=\"account\"/></span></a>\n-          </li>\n-          <li><a href=\"#password\"><span><wicket:message key=\"password\"/></span></a></li>\n-          <li><a href=\"#sync\"><span><wicket:message key=\"sync\"/></span></a></li>\n-        </ul>\n-        <div id=\"account\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"accountPoliciesPanel\">[account policies]</span>\n-        </div>\n-        <div id=\"password\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"passwordPoliciesPanel\">[password policies]</span>\n-        </div>\n-        <div id=\"sync\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <span wicket:id=\"syncPoliciesPanel\">[sync policies]</span>\n-        </div>\n-      </div>\n-      <div id=\"notifications\">\n-        <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-          <span wicket:id=\"notificationContainer\">\n-            <table class=\"ui-widget ui-widget-content table-hover\"\n-                   wicket:id=\"notificationTable\"/>\n-          </span>\n+        <div id=\"tabs\">\n+            <ul>\n+                <li class=\"tabs-selected\">\n+                    <a href=\"#layouts\"><span><wicket:message key=\"layouts\"/></span></a>\n+                </li>\n+                <li><a href=\"#policies\"><span><wicket:message key=\"policies\"/></span></a></li>\n+                <li><a href=\"#notifications\"><span><wicket:message key=\"notifications\"/></span></a></li>\n+                <li><a href=\"#securityQuestions\"><span><wicket:message key=\"securityQuestions\"/></span></a></li>\n+                <li><a href=\"#workflow\"><span><wicket:message key=\"workflow\"/></span></a></li>\n+                <li><a href=\"#routes\"><span><wicket:message key=\"routes\"/></span></a></li>\n+                <li><a href=\"#logs\"><span><wicket:message key=\"logs\"/></span></a></li>\n+            </ul>\n+            <div id=\"layouts\">\n+                <ul>\n+                    <li class=\"tabs-selected\">\n+                        <a href=\"#adminUser\"><span><wicket:message key=\"adminUser\"/></span></a>\n+                    </li>\n+                    <li><a href=\"#selfUser\"><span><wicket:message key=\"selfUser\"/></span></a></li>\n+                    <li><a href=\"#adminRole\"><span><wicket:message key=\"adminRole\"/></span></a></li>\n+                    <li><a href=\"#selfRole\"><span><wicket:message key=\"selfRole\"/></span></a></li>\n+                    <li><a href=\"#adminMembership\"><span><wicket:message key=\"adminMembership\"/></span></a></li>\n+                    <li><a href=\"#selfMembership\"><span><wicket:message key=\"selfMembership\"/></span></a></li>\n+                </ul>\n+                <div id=\"adminUser\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"adminUserLayoutPanel\">[admin user layout panel]</span>\n+                </div>\n+                <div id=\"selfUser\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"selfUserLayoutPanel\">[self user layout panel]</span>\n+                </div>\n+                <div id=\"adminRole\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"adminRoleLayoutPanel\">[admin role layout panel]</span>\n+                </div>\n+                <div id=\"selfRole\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"selfRoleLayoutPanel\">[self role layout panel]</span>\n+                </div>\n+                <div id=\"adminMembership\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"adminMembershipLayoutPanel\">[admin membership layout panel]</span>\n+                </div>\n+                <div id=\"selfMembership\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"selfMembershipLayoutPanel\">[self membership layout panel]</span>\n+                </div>\n+            </div>      \n+            <div id=\"policies\">\n+                <ul>\n+                    <li class=\"tabs-selected\">\n+                        <a href=\"#account\"><span><wicket:message key=\"account\"/></span></a>\n+                    </li>\n+                    <li><a href=\"#password\"><span><wicket:message key=\"password\"/></span></a></li>\n+                    <li><a href=\"#sync\"><span><wicket:message key=\"sync\"/></span></a></li>\n+                </ul>\n+                <div id=\"account\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"accountPoliciesPanel\">[account policies]</span>\n+                </div>\n+                <div id=\"password\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"passwordPoliciesPanel\">[password policies]</span>\n+                </div>\n+                <div id=\"sync\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <span wicket:id=\"syncPoliciesPanel\">[sync policies]</span>\n+                </div>\n+            </div>\n+            <div id=\"notifications\">\n+                <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                    <span wicket:id=\"notificationContainer\">\n+                        <table class=\"ui-widget ui-widget-content table-hover\"\n+                               wicket:id=\"notificationTable\"/>\n+                    </span>\n \n-          <span style=\"float:right\">\n-            <form wicket:id=\"notificationPaginatorForm\" style=\"display:inline\">\n-              <label><wicket:message key=\"displayRows\"/></label>\n-              <select class=\"text ui-widget-content ui-corner-all\"\n-                      wicket:id=\"rowsChooser\"/>\n-            </form>\n-          </span>\n-        </div>\n+                    <span style=\"float:right\">\n+                        <form wicket:id=\"notificationPaginatorForm\" style=\"display:inline\">\n+                            <label><wicket:message key=\"displayRows\"/></label>\n+                            <select class=\"text ui-widget-content ui-corner-all\"\n+                                    wicket:id=\"rowsChooser\"/>\n+                        </form>\n+                    </span>\n+                </div>\n \n-        <div wicket:id=\"createNotificationWin\">[Show modal window for creating notification]</div>\n-        <div wicket:id=\"editNotificationWin\">[Show modal window for editing notification]</div>\n+                <div wicket:id=\"createNotificationWin\">[Show modal window for creating notification]</div>\n+                <div wicket:id=\"editNotificationWin\">[Show modal window for editing notification]</div>\n \n-        <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-           wicket:id=\"createNotificationLink\">\n-          <wicket:message key=\"create\"/>\n-        </a>\n-      </div>\n-      <div id=\"securityQuestions\">\n-        <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-          <span wicket:id=\"securityQuestionContainer\">\n-            <table class=\"ui-widget ui-widget-content table-hover\"\n-                   wicket:id=\"securityQuestionTable\"/>\n-          </span>\n-        </div>\n+                <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+                   wicket:id=\"createNotificationLink\">\n+                    <wicket:message key=\"create\"/>\n+                </a>\n+            </div>\n+            <div id=\"securityQuestions\">\n+                <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                    <span wicket:id=\"securityQuestionContainer\">\n+                        <table class=\"ui-widget ui-widget-content table-hover\"\n+                               wicket:id=\"securityQuestionTable\"/>\n+                    </span>\n+                </div>\n \n-        <div wicket:id=\"createSecurityQuestionWin\">[Show modal window for creating security questions]</div>\n-        <div wicket:id=\"editSecurityQuestionWin\">[Show modal window for editing security questions]</div>\n+                <div wicket:id=\"createSecurityQuestionWin\">[Show modal window for creating security questions]</div>\n+                <div wicket:id=\"editSecurityQuestionWin\">[Show modal window for editing security questions]</div>\n \n-        <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-           wicket:id=\"createSecurityQuestionLink\">\n-          <wicket:message key=\"create\"/>\n-        </a>\n-      </div>\n-      <div id=\"workflow\">\n-        <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-          <span wicket:id=\"noActivitiEnabledForUsers\"><i><wicket:message key=\"noActivitiEnabledForUsers\"/></i></span>\n-          <span wicket:id=\"workflowDefContainer\">\n-            <div style=\"float: left;\">\n-              <button wicket:id=\"activitiModeler\" style=\"width: 122px\">\n-                <div style=\"display: table-row;\">\n-                  <div style=\"display: table-cell\">\n-                    <img src=\"img/modeler.png\" alt=\"Activiti Modeler\" title=\"Activiti Modeler\"/>\n-                  </div>\n-                  <div style=\"display: table-cell;vertical-align:middle;font-size:62.5%;\">\n-                    Activiti Modeler\n-                  </div>\n-                </div>\n-              </button>\n+                <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+                   wicket:id=\"createSecurityQuestionLink\">\n+                    <wicket:message key=\"create\"/>\n+                </a>\n             </div>\n-            <div>\n-              <button wicket:id=\"xmlEditor\" style=\"width: 122px\">\n-                <div style=\"display: table-row;\">\n-                  <div style=\"display: table-cell\">\n-                    <img src=\"img/xml.png\" alt=\"XML editor\" title=\"XML editor\"/>\n-                  </div>\n-                  <div style=\"display: table-cell;vertical-align:middle;font-size:62.5%;\">                  \n-                    XML editor\n-                  </div>\n-                </div>\n-              </button>\n+            <div id=\"workflow\">\n+                <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                    <span wicket:id=\"noActivitiEnabledForUsers\"><i><wicket:message key=\"noActivitiEnabledForUsers\"/></i></span>\n+                    <span wicket:id=\"workflowDefContainer\">\n+                        <div style=\"float: left;\">\n+                            <button wicket:id=\"activitiModeler\" style=\"width: 122px\">\n+                                <div style=\"display: table-row;\">\n+                                    <div style=\"display: table-cell\">\n+                                        <img src=\"img/modeler.png\" alt=\"Activiti Modeler\" title=\"Activiti Modeler\"/>\n+                                    </div>\n+                                    <div style=\"display: table-cell;vertical-align:middle;font-size:62.5%;\">\n+                                        Activiti Modeler\n+                                    </div>\n+                                </div>\n+                            </button>\n+                        </div>\n+                        <div>\n+                            <button wicket:id=\"xmlEditor\" style=\"width: 122px\">\n+                                <div style=\"display: table-row;\">\n+                                    <div style=\"display: table-cell\">\n+                                        <img src=\"img/xml.png\" alt=\"XML editor\" title=\"XML editor\"/>\n+                                    </div>\n+                                    <div style=\"display: table-cell;vertical-align:middle;font-size:62.5%;\">                  \n+                                        XML editor\n+                                    </div>\n+                                </div>\n+                            </button>\n+                        </div>\n+                        <img wicket:id=\"workflowDefDiagram\" style=\"width: 100%;\"/>\n+                    </span>\n+                </div>\n             </div>\n-            <img wicket:id=\"workflowDefDiagram\" style=\"width: 100%;\"/>\n-          </span>\n-        </div>\n-      </div>\n-      <div id=\"logs\">\n-        <ul>\n-          <li class=\"tabs-selected\">\n-            <a href=\"#core\"><span>Core</span></a>\n-          </li>\n-          <li><a href=\"#console\"><span>Console</span></a></li>\n-        </ul>\n-        <div id=\"core\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-            <span wicket:id=\"coreLoggerContainer\">\n-              <table class=\"ui-widget ui-widget-content table-hover\">\n-                <thead class=\"ui-widget-header\">\n-                  <tr class=\"heaaders\">\n-                    <th><wicket:message key=\"logger\"/></th>\n-                    <th><wicket:message key=\"level\"/></th>\n-                  </tr>\n-                </thead>\n-                <tbody>\n-                  <tr wicket:id=\"corelogger\">\n-                    <td><span wicket:id=\"name\"/></td>\n-                    <td id=\"level\"><select wicket:id=\"level\"/></td>\n-                  </tr>\n-                </tbody>\n-              </table>\n-            </span>\n-          </div>\n-        </div>\n-        <div id=\"console\" style=\"border-width: 1px;border-top-width: 0px;\">\n-          <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-            <span wicket:id=\"consoleLoggerContainer\">\n-              <table class=\"ui-widget ui-widget-content table-hover\">\n-                <thead class=\"ui-widget-header\">\n-                  <tr class=\"heaaders\">\n-                    <th><wicket:message key=\"logger\"/></th>\n-                    <th><wicket:message key=\"level\"/></th>\n-                  </tr>\n-                </thead>\n-                <tbody>\n-                  <tr wicket:id=\"consolelogger\">\n-                    <td><span wicket:id=\"name\"/></td>\n-                    <td id=\"level\"><select wicket:id=\"level\"/></td>\n-                  </tr>\n-                </tbody>\n-              </table>\n-            </span>\n-          </div>\n-        </div>\n-      </div>\n-      <div>\n-        <div wicket:id=\"parameters\">\n-          <a style=\"position: absolute; top: 2px; right:50px;\" wicket:id=\"confLink\">\n-            <img src=\"img/actions/settings-icon.png\" width=\"30\" height=\"30\"\n-                 alt=\"Parameters\" title=\"title\" wicket:message=\"title:parameters\"/>\n-          </a>\n-        </div>\n-        <div wicket:id=\"syncopeConfWin\">[Show modal window for conf parameters]</div>        \n+            <div id=\"routes\">\n+                <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                    <span wicket:id=\"routesContainer\">\n+                        <table class=\"ui-widget ui-widget-content table-hover\" wicket:id=\"routeTable\"/>\n+                    </span>\n+                </div>\n+                <div wicket:id=\"editRouteWin\">[Show modal window for editing route]</div>\n+            </div>\n+            <div id=\"logs\">\n+                <ul>\n+                    <li class=\"tabs-selected\">\n+                        <a href=\"#core\"><span>Core</span></a>\n+                    </li>\n+                    <li><a href=\"#console\"><span>Console</span></a></li>\n+                </ul>\n+                <div id=\"core\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                        <span wicket:id=\"coreLoggerContainer\">\n+                            <table class=\"ui-widget ui-widget-content table-hover\">\n+                                <thead class=\"ui-widget-header\">\n+                                    <tr class=\"heaaders\">\n+                                        <th><wicket:message key=\"logger\"/></th>\n+                                        <th><wicket:message key=\"level\"/></th>\n+                                    </tr>\n+                                </thead>\n+                                <tbody>\n+                                    <tr wicket:id=\"corelogger\">\n+                                        <td><span wicket:id=\"name\"/></td>\n+                                        <td id=\"level\"><select wicket:id=\"level\"/></td>\n+                                    </tr>\n+                                </tbody>\n+                            </table>\n+                        </span>\n+                    </div>\n+                </div>\n+                <div id=\"console\" style=\"border-width: 1px;border-top-width: 0px;\">\n+                    <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+                        <span wicket:id=\"consoleLoggerContainer\">\n+                            <table class=\"ui-widget ui-widget-content table-hover\">\n+                                <thead class=\"ui-widget-header\">\n+                                    <tr class=\"heaaders\">\n+                                        <th><wicket:message key=\"logger\"/></th>\n+                                        <th><wicket:message key=\"level\"/></th>\n+                                    </tr>\n+                                </thead>\n+                                <tbody>\n+                                    <tr wicket:id=\"consolelogger\">\n+                                        <td><span wicket:id=\"name\"/></td>\n+                                        <td id=\"level\"><select wicket:id=\"level\"/></td>\n+                                    </tr>\n+                                </tbody>\n+                            </table>\n+                        </span>\n+                    </div>\n+                </div>\n+            </div>\n+            <div>\n+                <div wicket:id=\"parameters\">\n+                    <a style=\"position: absolute; top: 2px; right:50px;\" wicket:id=\"confLink\">\n+                        <img src=\"img/actions/settings-icon.png\" width=\"30\" height=\"30\"\n+                             alt=\"Parameters\" title=\"title\" wicket:message=\"title:parameters\"/>\n+                    </a>\n+                </div>\n+                <div wicket:id=\"syncopeConfWin\">[Show modal window for conf parameters]</div>        \n \n-        <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"dbExportLink\">\n-          <img src=\"img/db_export.png\" width=\"30\" height=\"30\"\n-               alt=\"DB export\" title=\"title\" wicket:message=\"title:db_export\"/>\n-        </a>\n-      </div>    \n-    </div>\n-  </wicket:extend>\n+                <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"dbExportLink\">\n+                    <img src=\"img/db_export.png\" width=\"30\" height=\"30\"\n+                         alt=\"DB export\" title=\"title\" wicket:message=\"title:db_export\"/>\n+                </a>\n+            </div>    \n+        </div>\n+    </wicket:extend>\n </html>"},{"sha":"f59b50fdb9acd5a44e381b5a17da2ab48e6e81bd","filename":"console/src/main/resources/org/apache/syncope/console/pages/Configuration.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -45,3 +45,4 @@ adminRole=Administrator Role Form\n selfRole=Self Role Form\n adminMembership=Administrator Membership Form\n selfMembership=Self Membership Form\n+routes=Routes\n\\ No newline at end of file"},{"sha":"a237c2781d76ec9b1b55a49a25a8a9cb43878277","filename":"console/src/main/resources/org/apache/syncope/console/pages/RouteModalPage.html","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.html?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,49 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:head>\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"webjars/codemirror/${codemirror.version}/lib/codemirror.css\"/>\n+\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/lib/codemirror.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/codemirror/${codemirror.version}/mode/xml/xml.js\"></script>\n+    <script type=\"text/javascript\">\n+      function updateTextArea(editor) {         \n+        document.getElementById(\"routeDefForm\").elements[\"routeContent\"].value = editor.getValue();\n+      }\n+    </script>\n+  </wicket:head>\n+  <wicket:extend>\n+    <form wicket:id=\"routeDefForm\" id=\"routeDefForm\">\n+      <textarea wicket:id=\"routeContent\" id=\"routeContent\" name=\"routeContent\" style=\"width: 100%; height: 350px;\">\n+      </textarea>\n+      <div style=\"margin: 10px;\">\n+        <input type=\"submit\"\n+               class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+               wicket:id=\"apply\"\n+               onclick=\"\"/>\n+      </div>\n+    </form>\n+    <script>\n+      window.onload = function(){\n+              var editor = CodeMirror.fromTextArea(document.getElementById(\"routeContent\"),{lineNumbers: true});\n+              editor.on(\"change\", updateTextArea);\n+      }    \n+    </script>\n+  </wicket:extend>\n+</html>"},{"sha":"8ac2655d736ee145c5ae88dffcf14fa984723720","filename":"console/src/main/resources/org/apache/syncope/console/pages/RouteModalPage.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage.properties?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+title=Edit route\n+id=id"},{"sha":"44663f7e5718c0176cedb04b6334463f5efeb06b","filename":"console/src/main/resources/org/apache/syncope/console/pages/RouteModalPage_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_it.properties?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+title=Modifica le rotte\n+id=id"},{"sha":"a6395a0fdd83e98f2c91c02e27adf6a29ae5ab64","filename":"console/src/main/resources/org/apache/syncope/console/pages/RouteModalPage_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRouteModalPage_pt_BR.properties?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+title=Editar rotas\n+id=id"},{"sha":"66b5a2206efd041b56a117c178b91c1a967975d2","filename":"core/pom.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -117,6 +117,25 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-client</artifactId>\n     </dependency>  \n+       \n+     <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-spring</artifactId>\n+    </dependency>\n+    <dependency>\n+            <groupId>javax.xml.bind</groupId>\n+            <artifactId>jaxb-api</artifactId>\n+            <version>2.2.7</version>\n+    </dependency>\n+    <dependency>\n+       <groupId>com.sun.xml.bind</groupId>\n+       <artifactId>jaxb-impl</artifactId>\n+       <version>2.2.7</version>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.springframework</groupId>"},{"sha":"aa6da280c52b7caaf679f2ee307e629ea0995b3a","filename":"core/src/main/java/org/apache/syncope/core/init/CamelRouteLoader.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FCamelRouteLoader.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.init;\n+\n+import java.io.File;\n+import java.io.StringWriter;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+@Component\n+public class CamelRouteLoader {\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(CamelRouteLoader.class);\n+    \n+    @Autowired\n+    private RouteDAO routeDAO;\n+    \n+    @Autowired\n+    private DataSource dataSource;\n+    \n+    @Transactional\n+    public void load(){\n+        \n+        //if(routeDAO.findAll().isEmpty()){\n+            URL url = getClass().getResource(\"/camelRoute.xml\");                                   \n+\n+            File file = new File(url.getPath());\n+            String query= \"INSERT INTO CamelRoute(ID, NAME, ROUTECONTENT) VALUES (?, ?, ?)\";\n+            try{\n+                \n+                DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+                Document doc = dBuilder.parse(file);\n+                doc.getDocumentElement().normalize();\n+\n+                JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+                NodeList listOfRoutes = doc.getElementsByTagName(\"route\");\n+                for(int s=0; s<listOfRoutes.getLength(); s++){\n+                    //getting the route node element\n+                    Node routeEl = listOfRoutes.item(s);\n+                    //crate an instance of CamelRoute Entity\n+                    CamelRoute route = new CamelRoute();                                 \n+                    route.setName(((Element)routeEl).getAttribute(\"id\"));        \n+                    route.setRouteContent(nodeToString(listOfRoutes.item(s)));\n+                    \n+                    jdbcTemplate.update(query, new Object[]{s+1,((Element)routeEl).getAttribute(\"id\"),  nodeToString(listOfRoutes.item(s))});\n+                    LOG.info(\"Route Registration Successed\");\n+                }\n+            } catch (DataAccessException e) {\n+                LOG.error(\"While trying to perform {}\", query, e);\n+            } catch (Exception e) {\n+                LOG.error(\"Route Registration failed {}\",e.getMessage());\n+            }\n+        //}\n+    }\n+    \n+  private String nodeToString(Node node) {\n+        StringWriter sw = new StringWriter();\n+        try{\n+            Transformer t = TransformerFactory.newInstance().newTransformer();\n+            t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+            t.transform(new DOMSource(node), new StreamResult(sw));\n+        }catch (TransformerException te) {\n+            System.out.println(\"nodeToString Transformer Exception\");\n+        }\n+        return sw.toString();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"115587d4d0c14d0913896efd7c34132a7869217f","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -49,6 +49,9 @@ public class SpringContextInitializer implements InitializingBean {\n \n     @Autowired\n     private WorkflowAdapterLoader workflowAdapterLoader;\n+    \n+    @Autowired\n+    private CamelRouteLoader routeLoader;\n \n     @Override\n     public void afterPropertiesSet() throws Exception {\n@@ -59,6 +62,8 @@ public void afterPropertiesSet() throws Exception {\n         loggerLoader.load();\n         classNamesLoader.load();\n \n+        routeLoader.load();\n+        \n         workflowAdapterLoader.init();\n     }\n }"},{"sha":"ad05f271a54b7c20b2e911ea2f299792bd490ea0","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/CamelRoute.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FCamelRoute.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Column;\n+\n+\n+@Entity\n+public class CamelRoute {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @Column(name=\"id\")\n+    private Long id;\n+\n+    private String name;\n+\n+    @Lob\n+    private String routeContent;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getRouteContent() {\n+        return routeContent;\n+    }\n+\n+    public void setRouteContent(String routeContent) {\n+        this.routeContent = routeContent;\n+    }\n+\n+}"},{"sha":"aa7f4f646118f7f668d9d99ffa71562fb70b4cb0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RouteDAO.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRouteDAO.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+\n+public interface RouteDAO {\n+\n+    CamelRoute find(Long id);\n+\n+    List<CamelRoute> findAll();\n+\n+    CamelRoute save(CamelRoute route) throws InvalidEntityException;\n+\n+    void delete(Long id);\n+}"},{"sha":"aaa0026a2074528bf5230de7a15c5a2f77b4a08c","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RouteDAOImpl.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRouteDAOImpl.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class RouteDAOImpl extends AbstractDAOImpl implements RouteDAO {\n+\n+    @Override\n+    public CamelRoute find(final Long id) {\n+        return entityManager.find(CamelRoute.class, id);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<CamelRoute> findAll() {\n+        TypedQuery<CamelRoute> query = entityManager.createQuery(\"SELECT e FROM \" + CamelRoute.class.getSimpleName() + \" e\", CamelRoute.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public CamelRoute save(final CamelRoute route) throws InvalidEntityException {\n+        return entityManager.merge(route);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        CamelRoute route = find(id);\n+        if (route != null) {\n+            entityManager.remove(route);\n+        }\n+\n+    }\n+\n+}"},{"sha":"de9e1fcb03e3e883896d900309357057becab60b","filename":"core/src/main/java/org/apache/syncope/core/provisioning/DefaultRoleProvisioningManager.java","status":"added","additions":231,"deletions":0,"changes":231,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultRoleProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,231 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.EntitlementUtil;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class DefaultRoleProvisioningManager implements RoleProvisioningManager{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultRoleProvisioningManager.class);\n+    @Autowired\n+    protected RoleWorkflowAdapter rwfAdapter;\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;    \n+    @Autowired\n+    protected RoleDAO roleDAO;\n+    @Autowired\n+    protected RoleDataBinder binder;\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(RoleTO subject) {\n+        return create(subject, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(RoleTO subject, Set<String> excludedResources) {\n+        \n+        WorkflowResult<Long> created;\n+        try{\n+            created = rwfAdapter.create(subject);\n+        }\n+        catch(RuntimeException e){\n+            throw e;\n+        }\n+\n+        EntitlementUtil.extendAuthContext(created.getResult());\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, subject.getVirAttrs());\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult(), propagationReporter.getStatuses());\n+        return result;\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> createInSync(RoleTO roleTO, Map<Long, String> roleOwnerMap,Set<String> excludedResources) throws PropagationException{\n+        \n+        WorkflowResult<Long> created = rwfAdapter.create((RoleTO) roleTO);\n+        AttributeTO roleOwner = roleTO.getAttrMap().get(StringUtils.EMPTY);\n+        if (roleOwner != null) {\n+            roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n+        }\n+\n+        EntitlementUtil.extendAuthContext(created.getResult());\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created,\n+                roleTO.getVirAttrs(), excludedResources);\n+\n+        taskExecutor.execute(tasks);\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult(), null);\n+        return result;\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(RoleMod subjectMod) {\n+        \n+        return update(subjectMod, Collections.<String>emptySet());\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(RoleMod subjectMod, Set<String> excludedResources) {\n+                \n+        WorkflowResult<Long> updated;\n+        \n+        try{\n+            updated = rwfAdapter.update(subjectMod);\n+        }\n+        catch(RuntimeException e){\n+            throw e;\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(),excludedResources);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                updated.getResult(), propagationReporter.getStatuses());\n+        return result;\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(Long subjectId) {\n+\n+        final List<SyncopeRole> toBeDeprovisioned = new ArrayList<SyncopeRole>();\n+\n+        final SyncopeRole syncopeRole = roleDAO.find(subjectId);\n+\n+        if (syncopeRole != null) {\n+            toBeDeprovisioned.add(syncopeRole);\n+\n+            final List<SyncopeRole> descendants = roleDAO.findDescendants(toBeDeprovisioned.get(0));\n+            if (descendants != null) {\n+                toBeDeprovisioned.addAll(descendants);\n+            }\n+        }\n+\n+        final List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n+\n+        for (SyncopeRole role : toBeDeprovisioned) {\n+            // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n+            // because of the reason being deleted (see SYNCOPE-357)\n+            for (WorkflowResult<Long> wfResult : binder.getUsersOnResourcesOnlyBecauseOfRole(role.getId())) {\n+                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+            }\n+\n+            // Generate propagation tasks for deleting this role from resources\n+            tasks.addAll(propagationManager.getRoleDeleteTaskIds(role.getId()));\n+        }\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        try{\n+            rwfAdapter.delete(subjectId);\n+        }\n+        catch(RuntimeException e){\n+            throw  e;\n+        }\n+        \n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public Long unlink(RoleMod subjectMod) {\n+        WorkflowResult<Long> updated = rwfAdapter.update(subjectMod);\n+        return updated.getResult();\n+    }\n+    \n+    @Override\n+    public List<PropagationStatus> deprovision(final Long roleId, final Collection<String> resources){\n+        final SyncopeRole role = binder.getRoleFromId(roleId);\n+        \n+        final Set<String> noPropResourceName = role.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+        \n+        final List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId, new HashSet<String>(resources), noPropResourceName);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public Long link(RoleMod subjectMod) {\n+        return rwfAdapter.update(subjectMod).getResult();\n+    }\n+    \n+}"},{"sha":"86f6ebe4b5ee78b1bb33f56e333781dca56dee9b","filename":"core/src/main/java/org/apache/syncope/core/provisioning/DefaultUserProvisioningManager.java","status":"added","additions":347,"deletions":0,"changes":347,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FDefaultUserProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning;\n+\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserProvisioningManager implements UserProvisioningManager{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserProvisioningManager.class);\n+\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Autowired\n+    protected UserDataBinder binder;    \n+\n+    @Autowired\n+    protected UserDAO userDAO;   \n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO){\n+        return create(userTO, true);\n+    }\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, boolean storePassword) {\n+        WorkflowResult<Map.Entry<Long, Boolean>> created;\n+        try {\n+            created = uwfAdapter.create(userTO,storePassword);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n+                created, userTO.getPassword(), userTO.getVirAttrs(), userTO.getMemberships());\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult().getKey(), propagationReporter.getStatuses());\n+        return result;\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword, boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources) {\n+                WorkflowResult<Map.Entry<Long, Boolean>> created;\n+        try {\n+            created = uwfAdapter.create(userTO,storePassword);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n+                created, userTO.getPassword(), userTO.getVirAttrs(), excludedResources, null);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult().getKey(), propagationReporter.getStatuses());\n+        return result;\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+        return update(userMod, false);\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n+        try {\n+            updated = uwfAdapter.update(userMod);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                updated.getResult().getKey().getId(), propagationReporter.getStatuses());\n+        return result;    \n+    }\n+       \n+    @Override\n+    public List<PropagationStatus> delete(final Long userId) {\n+\n+        return delete(userId, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(Long subjectId, Set<String> excludedResources) {\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(subjectId,excludedResources);\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        try {\n+            uwfAdapter.delete(subjectId);\n+        } catch (RuntimeException e) {\n+            throw e;\n+        }\n+\n+        return propagationReporter.getStatuses();\n+    }\n+\n+    \n+    @Override\n+    public Long unlink(UserMod userMod) {\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+        return updated.getResult().getKey().getId();\n+    }\n+\n+    @Override\n+    public Long link(UserMod subjectMod) {\n+        return uwfAdapter.update(subjectMod).getResult().getKey().getId();\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> activate(SyncopeUser user, StatusMod statusMod) {\n+        WorkflowResult<Long> updated;\n+        if (statusMod.isOnSyncope()) {\n+            updated = uwfAdapter.activate(user.getId(), statusMod.getToken());\n+        } else {\n+            updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+        }\n+  \n+        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n+        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> reactivate(SyncopeUser user, StatusMod statusMod) {\n+        WorkflowResult<Long> updated;\n+        if (statusMod.isOnSyncope()) {\n+            updated = uwfAdapter.reactivate(user.getId());\n+        } else {\n+            updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+        }\n+        \n+        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n+        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> suspend(SyncopeUser user, StatusMod statusMod) {\n+        WorkflowResult<Long> updated;\n+        if (statusMod.isOnSyncope()) {\n+            updated = uwfAdapter.suspend(user.getId());\n+        } else {\n+            updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+        }\n+        \n+        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n+        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), statuses);\n+    }\n+    \n+    public List<PropagationStatus> propagateStatus(SyncopeUser user, StatusMod statusMod){\n+                \n+        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n+        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        return propReporter.getStatuses();\n+        \n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(Long userId, Collection<String> resources) {\n+        \n+        final SyncopeUser user = binder.getUserFromId(userId);        \n+        \n+        final Set<String> noPropResourceName = user.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+        \n+        final List<PropagationTask> tasks =\n+                propagationManager.getUserDeleteTaskIds(userId, new HashSet<String>(resources), noPropResourceName);\n+        final PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        return propagationReporter.getStatuses();\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> updateInSync(final UserMod userMod,final Long id, final SyncResult result, Boolean enabled, Set<String> excludedResources){\n+        \n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n+        try {\n+            updated = uwfAdapter.update(userMod);\n+        } catch (Exception e) {\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n+\n+            updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false), new PropagationByResource(),\n+                    new HashSet<String>());\n+        }\n+\n+        if (enabled != null) {\n+            SyncopeUser user = userDAO.find(id);\n+\n+            WorkflowResult<Long> enableUpdate = null;\n+            if (user.isSuspended() == null) {\n+                enableUpdate = uwfAdapter.activate(id, null);\n+            } else if (enabled && user.isSuspended()) {\n+                enableUpdate = uwfAdapter.reactivate(id);\n+            } else if (!enabled && !user.isSuspended()) {\n+                enableUpdate = uwfAdapter.suspend(id);\n+            }\n+\n+            if (enableUpdate != null) {\n+                if (enableUpdate.getPropByRes() != null) {\n+                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                    updated.getPropByRes().purge();\n+                }\n+                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+            }\n+        }\n+\n+            PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                    getBean(PropagationReporter.class);\n+\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,updated.getResult().getKey().getPassword() != null,excludedResources);\n+                \n+            try {\n+                    taskExecutor.execute(tasks, propagationReporter);\n+            } catch (PropagationException e) {\n+                    LOG.error(\"Error propagation primary resource\", e);\n+                    propagationReporter.onPrimaryResourceFailure(tasks);\n+            }\n+            \n+            return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult().getKey().getId(), propagationReporter.getStatuses());\n+\n+    }\n+\n+    @Override\n+    public void innerSuspend(SyncopeUser user, boolean suspend) {\n+        \n+            final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n+\n+            // propagate suspension if and only if it is required by policy\n+            if (suspend) {\n+                UserMod userMod = new UserMod();\n+                userMod.setId(updated.getResult());\n+\n+                final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                        new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                                new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, Boolean.FALSE),\n+                                updated.getPropByRes(), updated.getPerformedTasks()));\n+\n+                taskExecutor.execute(tasks);\n+            }            \n+    }\n+\n+}"},{"sha":"594bf5ed451ee3a296880e69775f2b9277c71876","filename":"core/src/main/java/org/apache/syncope/core/provisioning/RoleProvisioningManager.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FRoleProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.propagation.PropagationException;\n+\n+public interface RoleProvisioningManager extends ProvisioningManager<RoleTO, RoleMod>{\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, Set<String> excludedResources);\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> createInSync(final RoleTO roleTO, Map<Long, String> roleOwnerMap,Set<String> excludedResources) throws PropagationException;\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> update(RoleMod subjectMod, Set<String> excludedResources);\n+    \n+}"},{"sha":"da29a4217ea28782daa5996e94768b55743ceba4","filename":"core/src/main/java/org/apache/syncope/core/provisioning/UserProvisioningManager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2FUserProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2013 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.sync.SyncResult;\n+\n+public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserMod>{\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> activate(SyncopeUser user, StatusMod statusMod);\n+\n+    public Map.Entry<Long, List<PropagationStatus>> reactivate(SyncopeUser user, StatusMod statusMod);\n+\n+    public Map.Entry<Long, List<PropagationStatus>> suspend(SyncopeUser user, StatusMod statusMod);\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword);\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword, boolean disablePwdPolicyCheck, Boolean enabled,Set<String> excludedResources);\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, final boolean removeMemberships);\n+    \n+    public Map.Entry<Long, List<PropagationStatus>> updateInSync(final UserMod userMod,final Long id, final SyncResult result, Boolean enabled, Set<String> excludedResources);\n+\n+    public List<PropagationStatus> delete(Long subjectId, Set<String> excludedResources);    \n+    \n+    public void innerSuspend(SyncopeUser user, boolean suspend);\n+    \n+}"},{"sha":"4857d2f842bb3b6acfe8294d2e78745b04c28d65","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/CamelRoleProvisioningManager.java","status":"added","additions":307,"deletions":0,"changes":307,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,307 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.PollingConsumer;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.impl.DefaultMessage;\n+import org.apache.camel.model.Constants;\n+import org.apache.camel.model.RouteDefinition;\n+import org.apache.camel.model.RoutesDefinition;\n+import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.RoleProvisioningManager;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+public class CamelRoleProvisioningManager implements RoleProvisioningManager{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CamelRoleProvisioningManager.class);\n+\n+    private DefaultCamelContext camelContext;\n+\n+    private RoutesDefinition routes;\n+\n+    protected Map<String, PollingConsumer> consumerMap;\n+\n+    protected List<String> knownUri;\n+    \n+    @Autowired\n+    protected RouteDAO routeDAO;\n+\n+    @Autowired\n+    protected SyncopeCamelContext contextFactory;\n+\n+    public CamelRoleProvisioningManager() throws Exception {\n+        knownUri = new ArrayList<String>();\n+        consumerMap = new HashMap();\n+    }\n+\n+    public void startContext() throws Exception {\n+        camelContext.start();\n+    }\n+\n+    public void stopContext() throws Exception {\n+        camelContext.stop();\n+    }\n+\n+    public CamelContext getContext() {\n+        //ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        //return context.getBean(\"camel-context\", DefaultCamelContext.class);        \n+        return contextFactory.getContext(routeDAO);  \n+    }\n+\n+    public void changeRoute(String routePath) {\n+        try {\n+            camelContext.removeRouteDefinitions(routes.getRoutes());\n+            InputStream is = getClass().getResourceAsStream(routePath);\n+            routes = getContext().loadRoutesDefinition(is);\n+            camelContext.addRouteDefinitions(routes.getRoutes());\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n+            LOG.error(\"Unexpected error\", e);\n+        }\n+    }\n+\n+    protected void sendMessage(String uri, Object obj) {\n+        Exchange exc = new DefaultExchange(getContext());\n+        DefaultMessage m = new DefaultMessage();\n+        m.setBody(obj);\n+        exc.setIn(m);\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exc);\n+    }\n+\n+    protected void sendMessage(String uri, Object obj, Map<String, Object> properties) {\n+        Exchange exc = new DefaultExchange(getContext());\n+        \n+        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry<String, Object> property = it.next();\n+            exc.setProperty(property.getKey(), property.getValue());\n+            LOG.info(\"Added property {}\", property.getKey());            \n+        }\n+\n+        DefaultMessage m = new DefaultMessage();\n+        m.setBody(obj);\n+        exc.setIn(m);\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exc);\n+    }\n+\n+    protected PollingConsumer getConsumer(final String uri) {\n+\n+        if (!knownUri.contains(uri)) {\n+            knownUri.add(uri);\n+            Endpoint endpoint = getContext().getEndpoint(uri);\n+            PollingConsumer pollingConsumer = null;\n+            try {\n+                pollingConsumer = endpoint.createPollingConsumer();\n+                consumerMap.put(uri, pollingConsumer);\n+                pollingConsumer.start();\n+            } catch (Exception ex) {\n+                LOG.error(\"Unexpected error in Consumer creation \", ex);\n+            }\n+            return pollingConsumer;\n+        } else {\n+            return consumerMap.get(uri);\n+        }\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(RoleTO subject) {\n+        \n+        return create(subject, Collections.<String>emptySet());        \n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(RoleTO roleTO, Set<String> excludedResources) {\n+        \n+        String uri = \"direct:createRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"excludedResources\", excludedResources);\n+        \n+        sendMessage(\"direct:createRole\", roleTO, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> createInSync(RoleTO roleTO, Map<Long, String> roleOwnerMap, Set<String> excludedResources) throws PropagationException {\n+        \n+        String uri = \"direct:createRoleSyncPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();        \n+        props.put(\"roleOwnerMap\", roleOwnerMap);\n+        props.put(\"excludedResources\", excludedResources);\n+           \n+        sendMessage(\"direct:createRoleSync\", roleTO, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {            \n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+        \n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(RoleMod subjectMod) {\n+                \n+        return update(subjectMod, Collections.<String>emptySet());\n+    }\n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(RoleMod subjectMod, Set<String> excludedResources) {\n+\n+        String uri = \"direct:updateRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        \n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:updateRole\",subjectMod, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);        \n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(Long subjectId) {\n+        \n+        String uri = \"direct:deleteRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        sendMessage(\"direct:deleteRole\", subjectId);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    public Long unlink(RoleMod subjectMod) {\n+        String uri = \"direct:unlinkRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        sendMessage(\"direct:unlinkRole\", subjectMod);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    public Long link(RoleMod subjectMod) {\n+        \n+        String uri = \"direct:linkRolePort\";\n+        \n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        sendMessage(\"direct:linkRole\", subjectMod);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Long.class);  \n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(final Long roleId, Collection<String> resources) {\n+                \n+        String uri = \"direct:deprovisionRolePort\";\n+        \n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        \n+        Map props = new HashMap<String, Object>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:deprovisionRole\", roleId, props);\n+        \n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+        \n+        return o.getIn().getBody(List.class);\n+    }\n+   \n+}"},{"sha":"dc0c552e63997f8d7d0b6dc2a5ece26ad5c00b6c","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"added","additions":456,"deletions":0,"changes":456,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,456 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.net.URLDecoder;\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.PollingConsumer;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.impl.DefaultCamelContext;\n+import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.impl.DefaultMessage;\n+import org.apache.camel.model.Constants;\n+import org.apache.camel.model.RouteDefinition;\n+import org.apache.camel.model.RoutesDefinition;\n+import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.provisioning.UserProvisioningManager;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+public class CamelUserProvisioningManager implements UserProvisioningManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n+\n+    private DefaultCamelContext camelContext;\n+\n+    private RoutesDefinition routes;\n+\n+    protected Map<String, PollingConsumer> consumerMap;\n+\n+    protected List<String> knownUri;\n+\n+    @Autowired\n+    protected RouteDAO routeDAO;\n+    \n+    @Autowired\n+    protected SyncopeCamelContext contextFactory;\n+\n+    public CamelUserProvisioningManager() throws Exception {\n+        knownUri = new ArrayList<String>();\n+        consumerMap = new HashMap();\n+    }\n+\n+    public String readerToString(Reader reader, int size) throws IOException {\n+        StringBuffer content = new StringBuffer();\n+        char[] buffer = new char[size];\n+        int n;\n+\n+        while ((n = reader.read(buffer)) != -1) {\n+            content.append(buffer, 0, n);\n+        }\n+\n+        return content.toString();\n+    }\n+    \n+    public void startContext() throws Exception {\n+        getContext().start();\n+    }\n+\n+    public void stopContext() throws Exception {\n+        camelContext.stop();\n+    }\n+\n+    public CamelContext getContext() {\n+        //ApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        //return context.getBean(\"camel-context\", DefaultCamelContext.class);                    \n+        return contextFactory.getContext(routeDAO);\n+    }\n+\n+    protected List<CamelRoute> getRoutes() {\n+        return routeDAO.findAll();\n+    }\n+\n+    public void changeRoute(String routePath) {\n+        try {\n+            camelContext.removeRouteDefinitions(routes.getRoutes());\n+            InputStream is = getClass().getResourceAsStream(routePath);\n+            routes = getContext().loadRoutesDefinition(is);\n+            camelContext.addRouteDefinitions(routes.getRoutes());\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n+            LOG.error(\"Unexpected error\", e);\n+        }\n+    }\n+\n+    protected void sendMessage(String uri, Object obj) {\n+        Exchange exc = new DefaultExchange(getContext());\n+        DefaultMessage m = new DefaultMessage();\n+        m.setBody(obj);\n+        exc.setIn(m);\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exc);\n+    }\n+\n+    protected void sendMessage(String uri, Object obj, Map<String, Object> properties) {\n+        Exchange exc = new DefaultExchange(getContext());\n+\n+        Iterator<Map.Entry<String, Object>> it = properties.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry<String, Object> property = it.next();\n+            exc.setProperty(property.getKey(), property.getValue());\n+            LOG.info(\"Added property {}\", property.getKey());\n+        }\n+\n+        DefaultMessage m = new DefaultMessage();\n+        m.setBody(obj);\n+        exc.setIn(m);\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exc);\n+    }\n+\n+    protected PollingConsumer getConsumer(String uri) {\n+        if (!knownUri.contains(uri)) {\n+            knownUri.add(uri);\n+            Endpoint endpoint = getContext().getEndpoint(uri);\n+            PollingConsumer pollingConsumer = null;\n+            try {\n+                pollingConsumer = endpoint.createPollingConsumer();\n+                consumerMap.put(uri, pollingConsumer);\n+                pollingConsumer.start();\n+            } catch (Exception ex) {\n+                LOG.error(\"Unexpected error in Consumer creation \", ex);\n+            }\n+            return pollingConsumer;\n+        } else {\n+            return consumerMap.get(uri);\n+        }\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO) {\n+\n+        return create(userTO, true, false, null, Collections.<String>emptySet());\n+    }\n+    \n+    \n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, boolean storePassword) {\n+\n+        return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword, boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources) {\n+        String uri = \"direct:createPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"storePassword\", storePassword);\n+        props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n+        props.put(\"enabled\", enabled);\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:createUser\", userTO, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    /**\n+     *\n+     * @param userMod\n+     * @return\n+     * @throws RuntimeException if problems arise on workflow update\n+     */\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+        return update(userMod, false);\n+    }\n+    \n+    \n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n+        String uri = \"direct:updatePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        \n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"removeMemberships\", removeMemberships);\n+\n+        sendMessage(\"direct:updateUser\", userMod, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);    \n+    }\n+\n+\n+    @Override\n+    public List<PropagationStatus> delete(final Long userId) {\n+\n+        return delete(userId, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(final Long userId, Set<String> excludedResources) {\n+        String uri = \"direct:deletePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:deleteUser\", userId, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    public Long unlink(final UserMod userMod) {\n+        String uri = \"direct:unlinkPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        sendMessage(\"direct:unlinkUser\", userMod);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        o.getIn().setBody((o.getIn().getBody(UserMod.class).getId()));\n+        return o.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> activate(SyncopeUser user, StatusMod statusMod) {\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map props = new HashMap<String, Object>();\n+        props.put(\"token\", statusMod.getToken());\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:activateUser\", user.getId(), props);\n+        } else {\n+            WorkflowResult<Long> updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> reactivate(SyncopeUser user, StatusMod statusMod) {\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map props = new HashMap<String, Object>();\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:reactivateUser\", user.getId(), props);\n+        } else {\n+            WorkflowResult<Long> updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> suspend(SyncopeUser user, StatusMod statusMod) {\n+\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map props = new HashMap<String, Object>();\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:suspendUser\", user.getId(), props);\n+        } else {\n+            WorkflowResult<Long> updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Long link(UserMod subjectMod) {\n+        String uri = \"direct:linkPort\";\n+\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        sendMessage(\"direct:linkUser\", subjectMod);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        o.getIn().setBody((o.getIn().getBody(UserMod.class).getId()));\n+        return o.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> deprovision(Long user, Collection<String> resources) {\n+        String uri = \"direct:deprovisionPort\";\n+\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map props = new HashMap<String, Object>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:deprovisionUser\", user, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return o.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> updateInSync(UserMod userMod, Long id, SyncResult result, Boolean enabled, Set<String> excludedResources) {\n+\n+        String uri = \"direct:updateSyncPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"id\", id);\n+        props.put(\"result\", result);\n+        props.put(\"enabled\", enabled);\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:updateSyncUser\", userMod, props);\n+\n+        Exchange o = pollingConsumer.receive();\n+        Exception e;\n+        if ((e = (Exception) o.getProperty(Exchange.EXCEPTION_CAUGHT)) != null) {\n+\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n+\n+            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false), new PropagationByResource(),\n+                    new HashSet<String>());\n+            sendMessage(\"direct:syncUserStatus\", updated, props);\n+            o = pollingConsumer.receive();\n+        }\n+\n+        return o.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public void innerSuspend(SyncopeUser user, boolean suspend) {\n+\n+        String uri = \"direct:suspendWFPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+\n+        Map<String, Object> props = new HashMap<String, Object>();\n+        props.put(\"suspend\", suspend);\n+\n+        sendMessage(\"direct:suspendUserWF\", user, props);\n+        Exchange o = pollingConsumer.receive();\n+\n+        if (o.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) o.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+    }\n+\n+}"},{"sha":"6381649099cb9ebd7e49164be508150b0f272992","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.logging.Level;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.model.Constants;\n+import org.apache.camel.model.RouteDefinition;\n+import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+\n+@Component\n+public class SyncopeCamelContext{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeCamelContext.class);\n+\n+    private CamelContext camelContext = null;                   \n+    \n+    public SyncopeCamelContext() { \n+    }\n+    \n+    public CamelContext getContext(RouteDAO routeDAO){\n+\n+        if(camelContext == null) camelContext = new SpringCamelContext(ApplicationContextProvider.getApplicationContext());              \n+        if(camelContext.getRouteDefinitions().isEmpty()){            \n+            \n+            List<CamelRoute> crl = routeDAO.findAll();\n+            LOG.info(\"{} route(s) are going to be loaded \", crl.size());                \n+            loadContext(routeDAO, crl);\n+                \n+            try {\n+                camelContext.start();\n+            } catch (Exception ex) {\n+                LOG.error(\"Error during staring camel context {}\", ex);\n+            }\n+        }\n+        \n+        return camelContext;\n+    }\n+    \n+    public void loadContext(RouteDAO routeDAO, List<CamelRoute> crl){\n+        \n+        try {\n+            DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            JAXBContext jaxbContext = JAXBContext.newInstance(Constants.JAXB_CONTEXT_PACKAGES);\n+            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n+            List rds = new ArrayList();\n+\n+            for (int s = 0; s < crl.size(); s++) {\n+\n+                InputStream is = new ByteArrayInputStream( URLDecoder.decode(crl.get(s).getRouteContent(), \"UTF-8\").getBytes());\n+                Document doc = dBuilder.parse(is);\n+                doc.getDocumentElement().normalize();\n+                Node routeEl = doc.getElementsByTagName(\"route\").item(0);\n+                JAXBElement obj = unmarshaller.unmarshal(routeEl, RouteDefinition.class);\n+                //adding route definition to list                        \n+                rds.add(obj.getValue());\n+            }\n+            camelContext.addRouteDefinitions(rds);\n+        } catch (Exception ex) {\n+            LOG.error(\"Error during loading camel context {}\", ex);\n+        }\n+    \n+    }\n+    \n+    public void reloadContext(RouteDAO routeDAO){\n+        \n+        List<CamelRoute> crl = routeDAO.findAll();\n+        if(camelContext == null) getContext(routeDAO);\n+        else {            \n+            if( ! camelContext.getRouteDefinitions().isEmpty()){                    \n+                for (Iterator<RouteDefinition> it = camelContext.getRouteDefinitions().iterator(); it.hasNext(); ) {\n+                    RouteDefinition ard = it.next();\n+                    it.remove();                       \n+                }                    \n+            }\n+\n+            loadContext(routeDAO, crl);\n+        }\n+    }\n+    \n+    public void reloadContext(RouteDAO routeDAO, Long routeId){\n+        \n+        if(camelContext == null) getContext(routeDAO);\n+        else {            \n+            if( ! camelContext.getRouteDefinitions().isEmpty()){\n+                                \n+                camelContext.getRouteDefinitions().remove(routeId.intValue());\n+                List<CamelRoute> crl = new ArrayList<CamelRoute>();\n+                crl.add(routeDAO.find(routeId));\n+                loadContext(routeDAO, crl);\n+            }\n+                \n+        }\n+            \n+    }\n+    \n+    public List<RouteDefinition> getDefinitions(){\n+        return camelContext.getRouteDefinitions();\n+    }\n+}"},{"sha":"a6b40fb80f0d7457e905b01f09145f526f0626ca","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultRoleCreatePropagation.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreatePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreatePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreatePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.EntitlementUtil;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultRoleCreatePropagation  implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultRoleCreatePropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        \n+        WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n+        RoleTO subject = exchange.getProperty(\"subject\", RoleTO.class);\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);            \n+                \n+        EntitlementUtil.extendAuthContext(created.getResult());\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, subject.getVirAttrs());\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult(), propagationReporter.getStatuses());\n+        \n+        exchange.getOut().setBody(result);\n+    }\n+    \n+}"},{"sha":"ea8df72986af6ea0f620291dc9b0c2218a3d2cf9","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultRoleCreateSyncPropagation.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreateSyncPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreateSyncPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleCreateSyncPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,79 @@\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.util.EntitlementUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DefaultRoleCreateSyncPropagation implements Processor{\n+\n+        \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultRoleCreateSyncPropagation.class);\n+    \n+    @Override\n+    public void process(Exchange exchange){    \n+        \n+        WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n+        \n+        RoleTO actual = exchange.getProperty(\"subject\", RoleTO.class);\n+        Map<Long, String> roleOwnerMap = exchange.getProperty(\"roleOwnerMap\", Map.class);\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        \n+        AttributeTO roleOwner = actual.getAttrMap().get(StringUtils.EMPTY);\n+\n+        if (roleOwner != null) {\n+            roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n+        }\n+\n+        EntitlementUtil.extendAuthContext(created.getResult());\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created,\n+                actual.getVirAttrs(), excludedResource);\n+\n+        taskExecutor.execute(tasks);\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                created.getResult(), Collections.<PropagationStatus>emptyList());\n+        \n+        exchange.getOut().setBody(result);\n+    }\n+}"},{"sha":"1d2c20eef62ba3994d5c13dbf5a3e6a3edb76a38","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultRoleDeletePropagation.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeletePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeletePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeletePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultRoleDeletePropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultRoleDeletePropagation.class);\n+    @Autowired\n+    protected RoleWorkflowAdapter rwfAdapter;\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;    \n+    @Autowired\n+    protected RoleDAO roleDAO;\n+    @Autowired\n+    protected RoleDataBinder binder;\n+    \n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        \n+        Long subjectId = exchange.getIn().getBody(Long.class);\n+        \n+        final List<SyncopeRole> toBeDeprovisioned = new ArrayList<SyncopeRole>();\n+\n+        final SyncopeRole syncopeRole = roleDAO.find(subjectId);\n+\n+        if (syncopeRole != null) {\n+            toBeDeprovisioned.add(syncopeRole);\n+\n+            final List<SyncopeRole> descendants = roleDAO.findDescendants(toBeDeprovisioned.get(0));\n+            if (descendants != null) {\n+                toBeDeprovisioned.addAll(descendants);\n+            }\n+        }\n+\n+        final List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n+\n+        for (SyncopeRole role : toBeDeprovisioned) {\n+            // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n+            // because of the reason being deleted (see SYNCOPE-357)\n+            for (WorkflowResult<Long> wfResult : binder.getUsersOnResourcesOnlyBecauseOfRole(role.getId())) {\n+                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+            }\n+\n+            // Generate propagation tasks for deleting this role from resources\n+            tasks.addAll(propagationManager.getRoleDeleteTaskIds(role.getId()));\n+        }\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }      \n+        \n+        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+    }\n+    \n+    \n+    \n+}"},{"sha":"0f02258a0386138606cfc3b87464c918b1368efe","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultRoleDeprovisionPropagation.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeprovisionPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeprovisionPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleDeprovisionPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultRoleDeprovisionPropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserDeprovisionPropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    @Autowired\n+    protected RoleDataBinder binder;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        \n+        Long roleId = exchange.getIn().getBody(Long.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        \n+        final SyncopeRole role = binder.getRoleFromId(roleId);\n+        \n+        final Set<String> noPropResourceName = role.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+        \n+        final List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId, new HashSet<String>(resources), noPropResourceName);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }    \n+    \n+}"},{"sha":"cc2fcc04376cae4718c43105a6ea60e6855414f2","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultRoleUpdatePropagation.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleUpdatePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleUpdatePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultRoleUpdatePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultRoleUpdatePropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserUpdatePropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    @Autowired\n+    protected UserDataBinder binder;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();            \n+        RoleMod subjectMod = exchange.getProperty(\"subjectMod\", RoleMod.class);   \n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        \n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(),excludedResource);\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n+                PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+                updated.getResult(), propagationReporter.getStatuses());\n+        \n+        exchange.getOut().setBody(result);\n+    }\n+    \n+}"},{"sha":"c71e3dcd4d3cc99cff21525f23dc3cedc1d3e5a4","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserCreatePropagation.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserCreatePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserCreatePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserCreatePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserCreatePropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserCreatePropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+      \n+        if((exchange.getIn().getBody() instanceof WorkflowResult)){\n+            \n+            WorkflowResult<Map.Entry<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();            \n+            UserTO actual = exchange.getProperty(\"actual\", UserTO.class);\n+            Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+            \n+            List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n+                    created, actual.getPassword(), actual.getVirAttrs(), excludedResource, actual.getMemberships());\n+            PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                    getBean(PropagationReporter.class);\n+            try {\n+                taskExecutor.execute(tasks, propagationReporter);\n+            } catch (PropagationException e) {\n+                LOG.error(\"Error propagation primary resource {}\", e);\n+                propagationReporter.onPrimaryResourceFailure(tasks);\n+            }\n+            \n+            Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(created.getResult().getKey(), propagationReporter.getStatuses());         \n+            exchange.getOut().setBody(result);\n+        }               \n+    }\n+    \n+    \n+}"},{"sha":"1afef830fabc159526576a6577ce03707558fc82","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserDeletePropagation.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeletePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeletePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeletePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+\n+public class DefaultUserDeletePropagation implements Processor{\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserDeletePropagation.class);\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        \n+        Long userId = (Long) exchange.getIn().getBody();       \n+        LOG.info(\"UserId {} \", userId);\n+        \n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);            \n+        \n+        // Note here that we can only notify about \"delete\", not any other\n+        // task defined in workflow process definition: this because this\n+        // information could only be available after uwfAdapter.delete(), which\n+        // will also effectively remove user from db, thus making virtually\n+        // impossible by NotificationManager to fetch required user information\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId,excludedResource);\n+\n+        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+    }\n+    \n+}"},{"sha":"f62e4b6e7aa1579583ca2e22ae99984e1c314944","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserDeprovisionPropagation.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeprovisionPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeprovisionPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserDeprovisionPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserDeprovisionPropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserDeprovisionPropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    @Autowired\n+    protected UserDataBinder binder;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        \n+        Long userId = exchange.getIn().getBody(Long.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+        \n+        final SyncopeUser user = binder.getUserFromId(userId);        \n+        \n+        final Set<String> noPropResourceName = user.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+        \n+        final List<PropagationTask> tasks =\n+                propagationManager.getUserDeleteTaskIds(userId, new HashSet<String>(resources), noPropResourceName);\n+        final PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+    \n+}"},{"sha":"2cf1e6f7cee9057dcb30c135e09c33a75642cba0","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserStatusPropagation.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserStatusPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserStatusPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserStatusPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserStatusPropagation implements Processor{\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserStatusPropagation.class);\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        \n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n+        \n+        SyncopeUser user = exchange.getProperty(\"user\", SyncopeUser.class);\n+        StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n+        \n+        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n+        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n+        \n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult(), propReporter.getStatuses());\n+        exchange.getOut().setBody(result); \n+    }    \n+}"},{"sha":"6fdec757d83abb5c1ab497e1506ec0cce5207640","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserUpdateInSyncPropagation.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdateInSyncPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdateInSyncPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdateInSyncPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserUpdateInSyncPropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserUpdateInSyncPropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    @Autowired\n+    protected UserDataBinder binder;\n+    @Autowired\n+    protected UserDAO userDAO;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+                 \n+            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();            \n+\n+            Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);            \n+                              \n+            PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                    getBean(PropagationReporter.class);\n+\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,updated.getResult().getKey().getPassword() != null,excludedResource);\n+                \n+            try {\n+                    taskExecutor.execute(tasks, propagationReporter);\n+            } catch (PropagationException e) {\n+                    LOG.error(\"Error propagation primary resource\", e);\n+                    propagationReporter.onPrimaryResourceFailure(tasks);\n+            }\n+            \n+            Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult().getKey().getId(), propagationReporter.getStatuses());\n+            exchange.getOut().setBody(result);            \n+    }\n+}"},{"sha":"880912e65c97ea2b64db7010976c11d6a00eca7a","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserUpdatePropagation.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdatePropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdatePropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserUpdatePropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.mod.MembershipMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationReporter;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserUpdatePropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserUpdatePropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    @Autowired\n+    protected UserDataBinder binder;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+                 \n+            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();            \n+            UserMod actual = exchange.getProperty(\"actual\", UserMod.class);\n+            boolean removeMemberships = exchange.getProperty(\"removeMemberships\", boolean.class);\n+            \n+            // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n+            /*for (Long membershipId : actual.getMembershipsToRemove()) {\n+                if (!binder.fillMembershipVirtual(\n+                        null,\n+                        null,\n+                        membershipId,\n+                        Collections.<String>emptySet(),\n+                        Collections.<AttributeMod>emptySet(),\n+                        true).isEmpty()) {\n+\n+                    removeMemberships = true;\n+                }\n+            }*/\n+            \n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+            if (tasks.isEmpty()) {\n+                // SYNCOPE-459: take care of user virtual attributes ...\n+                final PropagationByResource propByResVirAttr = binder.fillVirtual(\n+                        updated.getResult().getKey().getId(),\n+                        actual.getVirAttrsToRemove(),\n+                        actual.getVirAttrsToUpdate());\n+                // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is\n+                // not required, take care also of membership virtual attributes\n+                boolean addOrUpdateMemberships = false;\n+                for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n+                    if (!binder.fillMembershipVirtual(\n+                            updated.getResult().getKey().getId(),\n+                            membershipMod.getRole(),\n+                            null,\n+                            membershipMod.getVirAttrsToRemove(),\n+                            membershipMod.getVirAttrsToUpdate(),\n+                            false).isEmpty()) {\n+\n+                        addOrUpdateMemberships = true;\n+                    }\n+                }\n+                tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n+                        ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n+                        : Collections.<PropagationTask>emptyList());\n+            }\n+\n+            PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n+                    getBean(PropagationReporter.class);\n+\n+            if (!tasks.isEmpty()) {\n+                try {\n+                    taskExecutor.execute(tasks, propagationReporter);\n+                } catch (PropagationException e) {\n+                    LOG.error(\"Error propagation primary resource\", e);\n+                    propagationReporter.onPrimaryResourceFailure(tasks);\n+                }\n+            }\n+            \n+            Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(updated.getResult().getKey().getId(), propagationReporter.getStatuses());\n+            exchange.getOut().setBody(result);            \n+    }\n+}"},{"sha":"2d08b930ec4282df4f642618074429772bcb66bd","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/DefaultUserWFSuspendPropagation.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserWFSuspendPropagation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserWFSuspendPropagation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FDefaultUserWFSuspendPropagation.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class DefaultUserWFSuspendPropagation implements Processor{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultUserWFSuspendPropagation.class);\n+    \n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+                 \n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();            \n+        Boolean suspend = exchange.getProperty(\"suspend\", Boolean.class);\n+\n+        if (suspend) {\n+            UserMod userMod = new UserMod();\n+            userMod.setId(updated.getResult());\n+\n+            final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                            new SimpleEntry<UserMod, Boolean>(userMod, Boolean.FALSE),\n+                            updated.getPropByRes(), updated.getPerformedTasks()));\n+\n+            taskExecutor.execute(tasks);\n+        }\n+    }\n+    \n+}"},{"sha":"7e4c18eeb457e4985774377cc4cd963b2919ff0b","filename":"core/src/main/java/org/apache/syncope/core/provisioning/camel/processors/UserStatusOnSync.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FUserStatusOnSync.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FUserStatusOnSync.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessors%2FUserStatusOnSync.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.provisioning.camel.processors;\n+\n+import java.util.Map;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Exchange;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class UserStatusOnSync implements Processor{\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(UserStatusOnSync.class);\n+    \n+    @Autowired\n+    protected UserDAO userDAO;\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+    \n+    @Override\n+    public void process(Exchange exchange){\n+        \n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();                    \n+          \n+        Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n+        Long id = exchange.getProperty(\"id\", Long.class);\n+                \n+        if (enabled != null) {\n+             SyncopeUser user = userDAO.find(id);\n+\n+             WorkflowResult<Long> enableUpdate = null;\n+             if (user.isSuspended() == null) {\n+                 enableUpdate = uwfAdapter.activate(id, null);\n+             } else if (enabled && user.isSuspended()) {\n+                 enableUpdate = uwfAdapter.reactivate(id);\n+             } else if (!enabled && !user.isSuspended()) {\n+                 enableUpdate = uwfAdapter.suspend(id);\n+             }\n+\n+             if (enableUpdate != null) {\n+                 if (enableUpdate.getPropByRes() != null) {\n+                     updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                     updated.getPropByRes().purge();\n+                 }\n+                 updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+             }\n+       }\n+    }\n+}"},{"sha":"adc1cb0625620716c35c2c63eb7c20f6f8880255","filename":"core/src/main/java/org/apache/syncope/core/provisioning/provisioning/ProvisioningManager.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fprovisioning%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fprovisioning%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fprovisioning%2FProvisioningManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n+\n+public interface ProvisioningManager<T extends AbstractAttributableTO, M extends AbstractAttributableMod>{\n+\n+    public Map.Entry<Long, List<PropagationStatus>> create(T subject);\n+\n+    public Map.Entry<Long, List<PropagationStatus>> update(M subjectMod);\n+\n+    public List<PropagationStatus> delete(Long subjectId);\n+\n+    public Long unlink(M subjectMod);\n+\n+    public Long link(M subjectMod);\n+\n+    public List<PropagationStatus> deprovision(Long user, Collection<String> resources);\n+\n+}"},{"sha":"f7a2981ea815e512744879a4fd360b287484178c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":23,"deletions":90,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -26,6 +26,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -34,6 +35,9 @@\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.provisioning.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.RoleProvisioningManager;\n import org.apache.syncope.common.reqres.BulkAction;\n import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.types.SubjectType;\n@@ -53,8 +57,6 @@\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.workflow.WorkflowResult;\n-import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -82,9 +84,6 @@ public class RoleController extends AbstractSubjectController<RoleTO, RoleMod> {\n     @Autowired\n     protected RoleDataBinder binder;\n \n-    @Autowired\n-    protected RoleWorkflowAdapter rwfAdapter;\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -96,6 +95,9 @@ public class RoleController extends AbstractSubjectController<RoleTO, RoleMod> {\n \n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n+    \n+    @Resource(name = \"defaultRoleProvisioningManager\")\n+    protected RoleProvisioningManager provisioningManager;\n \n     @PreAuthorize(\"hasAnyRole('ROLE_READ', T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n     @Transactional(readOnly = true)\n@@ -240,22 +242,9 @@ public RoleTO create(final RoleTO roleTO) {\n         /*\n          * Actual operations: workflow, propagation\n          */\n-        WorkflowResult<Long> created = rwfAdapter.create(actual);\n-\n-        EntitlementUtil.extendAuthContext(created.getResult());\n-\n-        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, actual.getVirAttrs());\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n-\n-        final RoleTO savedTO = binder.getRoleTO(created.getResult());\n-        savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(roleTO);\n+        final RoleTO savedTO = binder.getRoleTO(created.getKey());\n+        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n         return savedTO;\n     }\n \n@@ -269,23 +258,10 @@ public RoleTO update(final RoleMod roleMod) {\n         RoleMod actual = attrTransformer.transform(roleMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n-        /*\n-         * Actual operations: workflow, propagation\n-         */\n-        WorkflowResult<Long> updated = rwfAdapter.update(actual);\n-\n-        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                actual.getVirAttrsToRemove(), actual.getVirAttrsToUpdate());\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n-        final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n-        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(roleMod);\n+        \n+        final RoleTO updatedTO = binder.getRoleTO(updated.getKey());\n+        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return updatedTO;\n     }\n \n@@ -304,45 +280,12 @@ public RoleTO delete(final Long roleId) {\n             throw sce;\n         }\n \n-        final List<SyncopeRole> toBeDeprovisioned = new ArrayList<SyncopeRole>();\n-\n-        final SyncopeRole syncopeRole = roleDAO.find(roleId);\n-\n-        if (syncopeRole != null) {\n-            final List<SyncopeRole> descendants = roleDAO.findDescendants(syncopeRole);\n-            if (descendants != null) {\n-                // among descendants there is also parent role syncopeRole (to delete)\n-                toBeDeprovisioned.addAll(descendants);\n-            }\n-        }\n-\n-        final List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n-\n-        for (SyncopeRole role : toBeDeprovisioned) {\n-            // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n-            // because of the reason being deleted (see SYNCOPE-357)\n-            for (WorkflowResult<Long> wfResult : binder.getUsersOnResourcesOnlyBecauseOfRole(role.getId())) {\n-                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n-            }\n-\n-            // Generate propagation tasks for deleting this role from resources\n-            tasks.addAll(propagationManager.getRoleDeleteTaskIds(role.getId()));\n-        }\n-\n+        List<PropagationStatus> statuses = provisioningManager.delete(roleId);\n+        \n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(roleId);\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n-        roleTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        rwfAdapter.delete(roleId);\n+        roleTO.getPropagationStatusTOs().addAll(statuses);\n \n         return roleTO;\n     }\n@@ -374,7 +317,9 @@ public RoleTO unlink(final Long roleId, final Collection<String> resources) {\n         final RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleId);\n         roleMod.getResourcesToRemove().addAll(resources);\n-        return binder.getRoleTO(rwfAdapter.update(roleMod).getResult());\n+        final Long updatedResult = provisioningManager.unlink(roleMod);\n+ \n+        return binder.getRoleTO(updatedResult);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n@@ -384,7 +329,7 @@ public RoleTO link(final Long roleId, final Collection<String> resources) {\n         final RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleId);\n         roleMod.getResourcesToAdd().addAll(resources);\n-        return binder.getRoleTO(rwfAdapter.update(roleMod).getResult());\n+        return binder.getRoleTO(provisioningManager.link(roleMod));\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n@@ -414,22 +359,10 @@ public RoleTO assign(\n     public RoleTO deprovision(final Long roleId, final Collection<String> resources) {\n         final SyncopeRole role = binder.getRoleFromId(roleId);\n \n-        final Set<String> noPropResourceName = role.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n-\n-        final List<PropagationTask> tasks =\n-                propagationManager.getRoleDeleteTaskIds(roleId, new HashSet<String>(resources), noPropResourceName);\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        List<PropagationStatus> statuses = provisioningManager.deprovision(roleId, resources);\n \n         final RoleTO updatedTO = binder.getRoleTO(role);\n-        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        updatedTO.getPropagationStatusTOs().addAll(statuses);\n         return updatedTO;\n     }\n "},{"sha":"117d10f8577db76eaa7ac8622aa0c8f2e39e947f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RouteController.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRouteController.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.controller;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.apache.syncope.core.persistence.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.dao.RouteDAO;\n+import org.apache.syncope.core.provisioning.camel.SyncopeCamelContext;\n+import org.apache.syncope.core.rest.data.RouteDataBinder;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class RouteController extends AbstractTransactionalController<RouteTO>{\n+    \n+    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(RouteDataBinder.class);\n+    \n+    @Autowired\n+    private RouteDAO routeDao;\n+    \n+    @Autowired\n+    private RouteDataBinder binder;\n+    \n+    @Autowired\n+    private SyncopeCamelContext context;\n+    \n+    \n+    @PreAuthorize(\"hasRole('ROUTE_LIST')\")\n+    @Transactional(readOnly = true)\n+    public List<RouteTO> listRoutes(){\n+        List<RouteTO> routes = new ArrayList<RouteTO>();\n+        Iterator it = routeDao.findAll().iterator();\n+        while(it.hasNext()){\n+            routes.add(binder.getRouteTO((CamelRoute) it.next()));\n+        }\n+        return routes;\n+    }\n+    \n+    @PreAuthorize(\"hasRole('ROUTE_READ')\")\n+    @Transactional(readOnly = true)\n+    public RouteTO readRoute(Long id){\n+        CamelRoute route = routeDao.find(id);\n+        if (route==null) \n+            throw new NotFoundException(\"Route with id=\"+id);\n+        \n+        return binder.getRouteTO(route);\n+    }\n+    \n+    @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n+    public void updateRoute(RouteTO routeTO){\n+\n+        CamelRoute route = routeDao.find(routeTO.getId());\n+        if (route==null) \n+            throw new NotFoundException(\"Route with id=\"+route.getId());\n+        route.setRouteContent(routeTO.getRouteContent());\n+        routeDao.save(route);       \n+        LOG.info(\"UPDATING ROUTE WITH ID {} \", routeTO.getId());\n+        LOG.info(\"NEW ROUTE CONTENT {} \", routeTO.getRouteContent());\n+        context.reloadContext(routeDao, routeTO.getId());\n+    }   \n+    \n+    @Override\n+    protected RouteTO resolveReference(Method method, Object... args) throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n+    \n+}"},{"sha":"d8fa5f8e06f7455c38eb832ec77a4208eed24d33","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":59,"deletions":87,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -18,15 +18,19 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n+import java.io.FileNotFoundException;\n+import java.io.PrintStream;\n import java.lang.reflect.Method;\n import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.annotation.Resource;\n import org.apache.syncope.common.mod.StatusMod;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.mod.UserMod;\n@@ -41,7 +45,10 @@\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.types.SubjectType;\n+import org.apache.syncope.common.to.PropagationStatus;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.provisioning.UserProvisioningManager;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.SubjectSearchDAO;\n@@ -55,6 +62,7 @@\n import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager;\n import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -91,9 +99,6 @@ public class UserController extends AbstractSubjectController<UserTO, UserMod> {\n     @Autowired\n     protected UserDataBinder binder;\n \n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n-\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -102,6 +107,12 @@ public class UserController extends AbstractSubjectController<UserTO, UserMod> {\n \n     @Autowired\n     protected AttributableTransformer attrTransformer;\n+    \n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+    \n+    @Resource(name = \"defaultUserProvisioningManager\")\n+    protected UserProvisioningManager provisioningManager;\n \n     @Transactional(readOnly = true)\n     public boolean isSelfRegAllowed() {\n@@ -215,24 +226,11 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n         UserTO actual = attrTransformer.transform(userTO);\n         LOG.debug(\"Transformed: {}\", actual);\n \n-        /*\n-         * Actual operations: workflow, propagation, notification\n-         */\n-        WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(actual, storePassword);\n-\n-        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                created, actual.getPassword(), actual.getVirAttrs(), actual.getMemberships());\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        Map.Entry<Long, List<PropagationStatus>>\n+                created = provisioningManager.create(actual,storePassword);\n \n-        final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n-        savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        final UserTO savedTO = binder.getUserTO(created.getKey());\n+        savedTO.getPropagationStatusTOs().addAll(created.getValue());\n         return savedTO;\n     }\n \n@@ -254,7 +252,8 @@ public UserTO update(final UserMod userMod) {\n         // AttributableMod transformation (if configured)\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n-\n+        \n+        //CAMEL\n         // SYNCOPE-501: check if there are memberships to be removed with virtual attributes assigned\n         boolean removeMemberships = false;\n         for (Long membershipId : actual.getMembershipsToRemove()) {\n@@ -269,8 +268,9 @@ public UserTO update(final UserMod userMod) {\n                 removeMemberships = true;\n             }\n         }\n+        \n         //Actual operations: workflow, propagation, notification\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n+        /*WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(actual);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n         if (tasks.isEmpty()) {\n@@ -312,25 +312,29 @@ public UserTO update(final UserMod userMod) {\n         }\n \n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n-        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());*/\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(actual,removeMemberships);\n+\n+        final UserTO updatedTO = binder.getUserTO(updated.getKey());\n+        updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return updatedTO;\n     }\n \n-    protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, final StatusMod statusMod) {\n-        WorkflowResult<Long> updated;\n+     protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final SyncopeUser user, final StatusMod statusMod) {\n+        Map.Entry<Long, List<PropagationStatus>> updated;\n \n         switch (statusMod.getType()) {\n             case SUSPEND:\n-                updated = uwfAdapter.suspend(user.getId());\n+                updated = provisioningManager.suspend(user, statusMod);\n                 break;\n \n             case REACTIVATE:\n-                updated = uwfAdapter.reactivate(user.getId());\n+                updated = provisioningManager.reactivate(user, statusMod);\n                 break;\n \n             case ACTIVATE:\n             default:\n-                updated = uwfAdapter.activate(user.getId(), statusMod.getToken());\n+                updated = provisioningManager.activate(user, statusMod);\n                 break;\n \n         }\n@@ -343,30 +347,10 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n     public UserTO status(final StatusMod statusMod) {\n         SyncopeUser user = binder.getUserFromId(statusMod.getId());\n \n-        WorkflowResult<Long> updated;\n-        if (statusMod.isOnSyncope()) {\n+        Map.Entry<Long, List<PropagationStatus>>\n             updated = setStatusOnWfAdapter(user, statusMod);\n-        } else {\n-            updated = new WorkflowResult<Long>(user.getId(), null, statusMod.getType().name().toLowerCase());\n-        }\n-\n-        // Resources to exclude from propagation\n-        Set<String> resourcesToBeExcluded = new HashSet<String>(user.getResourceNames());\n-        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n-        PropagationReporter propReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propReporter.onPrimaryResourceFailure(tasks);\n-        }\n-\n-        final UserTO savedTO = binder.getUserTO(updated.getResult());\n-        savedTO.getPropagationStatusTOs().addAll(propReporter.getStatuses());\n+        final UserTO savedTO = binder.getUserTO(updated.getKey());\n+        savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return savedTO;\n     }\n \n@@ -435,23 +419,7 @@ public UserTO delete(final Long userId) {\n             throw sce;\n         }\n \n-        // Note here that we can only notify about \"delete\", not any other\n-        // task defined in workflow process definition: this because this\n-        // information could only be available after uwfAdapter.delete(), which\n-        // will also effectively remove user from db, thus making virtually\n-        // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n-\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n-\n-        uwfAdapter.delete(userId);\n+        List<PropagationStatus> statuses = provisioningManager.delete(userId);\n \n         final UserTO deletedTO;\n         SyncopeUser deleted = userDAO.find(userId);\n@@ -461,7 +429,7 @@ public UserTO delete(final Long userId) {\n         } else {\n             deletedTO = binder.getUserTO(userId);\n         }\n-        deletedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n         return deletedTO;\n     }\n@@ -526,7 +494,9 @@ public UserTO unlink(final Long userId, final Collection<String> resources) {\n         final UserMod userMod = new UserMod();\n         userMod.setId(userId);\n         userMod.getResourcesToRemove().addAll(resources);\n-        return binder.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getId());\n+        Long updatedId = provisioningManager.unlink(userMod);\n+\n+        return binder.getUserTO(updatedId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n@@ -536,7 +506,7 @@ public UserTO link(final Long userId, final Collection<String> resources) {\n         final UserMod userMod = new UserMod();\n         userMod.setId(userId);\n         userMod.getResourcesToAdd().addAll(resources);\n-        return binder.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getId());\n+        return binder.getUserTO(provisioningManager.link(userMod));\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n@@ -576,24 +546,12 @@ public UserTO assign(\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO deprovision(final Long userId, final Collection<String> resources) {\n-        final SyncopeUser user = binder.getUserFromId(userId);\n-\n-        final Set<String> noPropResourceName = user.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n-\n-        final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTaskIds(userId, new HashSet<String>(resources), noPropResourceName);\n-        final PropagationReporter propagationReporter =\n-                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n-        try {\n-            taskExecutor.execute(tasks, propagationReporter);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation primary resource\", e);\n-            propagationReporter.onPrimaryResourceFailure(tasks);\n-        }\n+        final SyncopeUser user = binder.getUserFromId(userId);        \n+        \n+        List<PropagationStatus> statuses = provisioningManager.deprovision(userId, resources);\n \n         final UserTO updatedUserTO = binder.getUserTO(user);\n-        updatedUserTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n+        updatedUserTO.getPropagationStatusTOs().addAll(statuses);\n         return updatedUserTO;\n     }\n \n@@ -646,4 +604,18 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n \n         throw new UnresolvedReferenceException();\n     }\n+    \n+    public PrintStream getDefinition() throws FileNotFoundException{\n+        /*String result = \"\";\n+        if(provisioningManager instanceof CamelUserProvisioningManager){\n+            List l = ((CamelUserProvisioningManager)provisioningManager).getRoutes();\n+            Iterator<CamelRoute> it = l.iterator();\n+            \n+            while(it.hasNext()){\n+                result += it.next().getRouteContent();\n+            }                        \n+        }\n+        return new PrintStream(result);*/\n+        return null;\n+    }\n }"},{"sha":"c1016e62ba234263d2cbece41bcd153927f808d5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RouteDataBinder.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRouteDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRouteDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRouteDataBinder.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.data;\n+\n+\n+import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.common.util.BeanUtils;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RouteDataBinder {\n+  \n+    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(RouteDataBinder.class);\n+    \n+    public RouteTO getRouteTO(CamelRoute route){        \n+              \n+        RouteTO routeTO = new RouteTO();\n+        BeanUtils.copyProperties(route, routeTO);\n+        return routeTO;\n+    }\n+}"},{"sha":"1c44765f7d6a3219aa854ac93a3810576f74fc79","filename":"core/src/main/java/org/apache/syncope/core/services/RouteServiceImpl.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRouteServiceImpl.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.services;\n+\n+import java.util.List;\n+import org.apache.syncope.common.services.RouteService;\n+import org.apache.syncope.common.to.RouteTO;\n+import org.apache.syncope.core.rest.controller.RouteController;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RouteServiceImpl extends AbstractServiceImpl implements RouteService{\n+\n+    @Autowired\n+    private RouteController controller;\n+    \n+    @Override\n+    public List<RouteTO> getRoutes() {\n+        \n+        return  controller.listRoutes();\n+    }\n+    \n+    @Override\n+    public RouteTO getRoute(Long id){\n+        \n+        return controller.readRoute(id);\n+    }\n+\n+    @Override\n+    public void importRoute(Long id, RouteTO route) {\n+        controller.updateRoute(route);\n+    }\n+    \n+}\n\\ No newline at end of file"},{"sha":"fa88e7c704e3c759133ed18b4f7069fc4d50ddac","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -113,4 +113,14 @@ public void importDefinition(final SubjectType kind, final String definition) {\n             controller.importRoleDefinition(contentType, definition);\n         }\n     }\n+\n+    @Override\n+    public Response getRoute(Long id) {\n+        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n+    }\n+\n+    @Override\n+    public Response getRoutes() {\n+        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n+    }\n }"},{"sha":"b356e6401a3e0ba4a15d7d38ce61c1367753018b","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -18,13 +18,16 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import javax.annotation.Resource;\n import org.apache.syncope.core.sync.SyncProfile;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.provisioning.RoleProvisioningManager;\n+import org.apache.syncope.core.provisioning.UserProvisioningManager;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.AbstractSyncActions;\n@@ -99,6 +102,12 @@\n      * Sync profile.\n      */\n     protected SyncProfile<T, A> profile;\n+    \n+    @Resource(name = \"defaultUserProvisioningManager\")\n+    protected UserProvisioningManager userProvisioningManager;\n+    \n+    @Resource(name = \"defaultRoleProvisioningManager\")\n+    protected RoleProvisioningManager roleProvisioningManager;\n \n     public void setProfile(final SyncProfile<T, A> profile) {\n         this.profile = profile;"},{"sha":"e544687dffbf78708c0374c0394e00eb27a00a2a","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/RoleSyncResultHandler.java","status":"modified","additions":12,"deletions":25,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AbstractSubjectTO;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -85,22 +86,12 @@ protected AbstractSubjectTO create(\n \n         RoleTO roleTO = RoleTO.class.cast(subjectTO);\n \n-        WorkflowResult<Long> created = rwfAdapter.create(roleTO);\n-        AttributeTO roleOwner = roleTO.getAttrMap().get(StringUtils.EMPTY);\n-        if (roleOwner != null) {\n-            roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n-        }\n-\n-        EntitlementUtil.extendAuthContext(created.getResult());\n-\n-        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created,\n-                roleTO.getVirAttrs(), Collections.singleton(profile.getSyncTask().getResource().getName()));\n+        Map.Entry<Long, List<PropagationStatus>> created = roleProvisioningManager.createInSync\n+                           (roleTO, roleOwnerMap, Collections.singleton(profile.getSyncTask().getResource().getName()));\n \n-        taskExecutor.execute(tasks);\n+        roleTO = roleDataBinder.getRoleTO(created.getKey());\n \n-        roleTO = roleDataBinder.getRoleTO(created.getResult());\n-\n-        result.setId(created.getResult());\n+        result.setId(created.getKey());\n         result.setName(getName(subjectTO));\n \n         return roleTO;\n@@ -135,25 +126,21 @@ protected AbstractSubjectTO update(\n \n         RoleMod roleMod = RoleMod.class.cast(subjectMod);\n \n-        final WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = roleProvisioningManager.update(roleMod);\n+                \n+        //moved after role provisioning manager\n         String roleOwner = null;\n         for (AttributeMod attrMod : roleMod.getAttrsToUpdate()) {\n             if (attrMod.getSchema().isEmpty()) {\n                 roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n             }\n         }\n         if (roleOwner != null) {\n-            roleOwnerMap.put(updated.getResult(), roleOwner);\n+            roleOwnerMap.put(updated.getKey(), roleOwner);\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                roleMod.getVirAttrsToRemove(),\n-                roleMod.getVirAttrsToUpdate(),\n-                Collections.singleton(profile.getSyncTask().getResource().getName()));\n-\n-        taskExecutor.execute(tasks);\n-\n-        final RoleTO after = roleDataBinder.getRoleTO(updated.getResult());\n+        final RoleTO after = roleDataBinder.getRoleTO(updated.getKey());\n+        \n         result.setName(getName(after));\n \n         return after;\n@@ -183,6 +170,6 @@ protected void delete(final Long id) {\n             LOG.error(\"Could not propagate user \" + id, e);\n         }\n \n-        rwfAdapter.delete(id);\n+        roleProvisioningManager.delete(id); \n     }\n }"},{"sha":"e5bdc06bf7183e17f18cfd2e2d00dd46831e1b1b","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/UserSyncResultHandler.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.mod.AbstractSubjectMod;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AbstractSubjectTO;\n+import org.apache.syncope.common.to.PropagationStatus;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -80,19 +81,13 @@ protected AbstractSubjectTO create(\n         UserTO userTO = UserTO.class.cast(subjectTO);\n \n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getSyncTask());\n-        WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                uwfAdapter.create(userTO, true, enabled, true);\n+        //Delegate User Workflow Creation and its Propagation to provisioning manager\n+        Map.Entry<Long, List<PropagationStatus>>\n+            created = userProvisioningManager.create(userTO, true, true, enabled,Collections.singleton(profile.getSyncTask().getResource().getName()));                             \n \n-        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created,\n-                userTO.getPassword(), userTO.getVirAttrs(),\n-                Collections.singleton(profile.getSyncTask().getResource().getName()),\n-                userTO.getMemberships());\n+        userTO = userDataBinder.getUserTO(created.getKey());\n \n-        taskExecutor.execute(tasks);\n-\n-        userTO = userDataBinder.getUserTO(created.getResult().getKey());\n-\n-        result.setId(created.getResult().getKey());\n+        result.setId(created.getKey());\n \n         return userTO;\n     }\n@@ -126,7 +121,7 @@ protected AbstractSubjectTO update(\n \n         final UserMod userMod = UserMod.class.cast(subjectMod);\n \n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n+        /*WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userMod);\n         } catch (Exception e) {\n@@ -140,10 +135,10 @@ protected AbstractSubjectTO update(\n                     new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false),\n                     new PropagationByResource(),\n                     new HashSet<String>());\n-        }\n+        }*/\n \n         final Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getSyncTask());\n-        if (enabled != null) {\n+        /*if (enabled != null) {\n             SyncopeUser user = userDAO.find(before.getId());\n \n             WorkflowResult<Long> enableUpdate = null;\n@@ -168,9 +163,11 @@ protected AbstractSubjectTO update(\n                 updated, updated.getResult().getKey().getPassword() != null,\n                 Collections.singleton(profile.getSyncTask().getResource().getName()));\n \n-        taskExecutor.execute(tasks);\n+        taskExecutor.execute(tasks);*/\n+                 \n+        Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.updateInSync(userMod, before.getId(), result,enabled, Collections.singleton(profile.getSyncTask().getResource().getName()));        \n \n-        return userDataBinder.getUserTO(updated.getResult().getKey().getId());\n+        return userDataBinder.getUserTO(updated.getKey());\n     }\n \n     @Override\n@@ -191,8 +188,8 @@ protected void deprovision(\n     @Override\n     protected void delete(final Long id) {\n         try {\n-            taskExecutor.execute(\n-                    propagationManager.getUserDeleteTaskIds(id, profile.getSyncTask().getResource().getName()));\n+            userProvisioningManager.\n+                    delete(id,Collections.<String>singleton(profile.getSyncTask().getResource().getName()));\n         } catch (Exception e) {\n             // A propagation failure doesn't imply a synchronization failure.\n             // The propagation exception status will be reported into the propagation task execution."},{"sha":"67ebd8258c610b4082c3f629874680b2d2fb0703","filename":"core/src/main/java/org/apache/syncope/core/util/RouteManager.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FRouteManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FRouteManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FRouteManager.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.beans.CamelRoute;\n+\n+\n+public class RouteManager {\n+    private static List<CamelRoute> routelist;\n+    \n+    public static void addElement(CamelRoute route){\n+        if(routelist == null) routelist= new ArrayList<CamelRoute>();\n+        routelist.add(route);\n+    }\n+    \n+    public static List<CamelRoute> getRoutes(){\n+        if(routelist == null) routelist= new ArrayList<CamelRoute>();\n+        return routelist;\n+    }\n+}"},{"sha":"ef4a46ddf202ca33c4c4b60298ac3c9a262027d9","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowUserSuspender.java","status":"modified","additions":6,"deletions":23,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowUserSuspender.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -21,12 +21,14 @@\n import java.util.AbstractMap.SimpleEntry;\n import java.util.List;\n import java.util.Map;\n+import javax.annotation.Resource;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.policy.UserSuspender;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.provisioning.UserProvisioningManager;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,14 +40,8 @@ public class WorkflowUserSuspender implements UserSuspender {\n \n     private static final Logger LOG = LoggerFactory.getLogger(WorkflowUserSuspender.class);\n \n-    @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n-\n-    @Autowired\n-    private PropagationManager propagationManager;\n-\n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    @Resource(name = \"defaultUserProvisioningManager\")\n+    protected UserProvisioningManager provisioningManager;\n \n     @Override\n     public void suspend(final SyncopeUser user, final boolean suspend) {\n@@ -55,21 +51,8 @@ public void suspend(final SyncopeUser user, final boolean suspend) {\n             // reduce failed logins number to avoid multiple request\n             user.setFailedLogins(user.getFailedLogins() - 1);\n \n-            // disable user\n-            final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n-\n-            // propagate suspension if and only if it is required by policy\n-            if (suspend) {\n-                UserMod userMod = new UserMod();\n-                userMod.setId(updated.getResult());\n-\n-                final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                        new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                                new SimpleEntry<UserMod, Boolean>(userMod, Boolean.FALSE),\n-                                updated.getPropByRes(), updated.getPerformedTasks()));\n-\n-                taskExecutor.execute(tasks);\n-            }\n+            // disable user and propagate suspension if and only if it is required by policy          \n+            provisioningManager.innerSuspend(user, suspend);\n         } catch (Exception e) {\n             LOG.error(\"Error during user suspension\", e);\n         }"},{"sha":"f059a9a2f721bed5ffdbbe618089ac46035fb501","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.workflow.user;\n \n import java.util.Map;\n-import java.util.Map.Entry;\n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n@@ -61,13 +59,6 @@ public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return null;\n     }\n \n-    @Override\n-    public WorkflowResult<Entry<Long, Boolean>> create(final UserTO userTO, final boolean storePassword)\n-            throws UnauthorizedRoleException, WorkflowException {\n-\n-        return create(userTO, false, storePassword);\n-    }\n-\n     protected abstract WorkflowResult<Long> doActivate(SyncopeUser user, String token) throws WorkflowException;\n \n     @Override"},{"sha":"871326191d4a6c7f1c64993be2ad962d33928ab2","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -228,4 +228,9 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n \n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws UnauthorizedRoleException, WorkflowException {\n+        return create(userTO, false, true);\n+    }\n }"},{"sha":"460b73b10f456e3ed001933792a94b0bff322e23","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -883,4 +883,9 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n \n         return new WorkflowResult<UserMod>(userMod, propByRes, postTasks);\n     }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws UnauthorizedRoleException, WorkflowException {\n+        return create(userTO, false, storePassword);\n+    }\n }"},{"sha":"c7ac19ab278ea68548fce207011e8d385a243748","filename":"core/src/main/resources/camelRoute.xml","status":"added","additions":430,"deletions":0,"changes":430,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FcamelRoute.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FcamelRoute.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FcamelRoute.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,430 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://camel.apache.org/schema/spring\n+                           http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+ \n+    <!--\n+        The default routes define each task involved in user creation:\n+        main operations consist in user workflow creation and its propagation.         \n+    -->\n+    <routeContext id=\"defaultRoutes\" xmlns=\"http://camel.apache.org/schema/spring\">    \n+        \n+        <!--\n+            CREATE USER\n+            This is the entry point of the route and is involved in accepting\n+            the UserTO. When it arrives, the user workflow is created. If the\n+            creation is successfull, the result is sent to propagation, otherwise\n+            if an exception was raised, the exception has to be returned to the\n+            caller. The property actual allows to store the received UserTO in\n+            order to use it later.\n+        -->\n+        \n+        <route id=\"createUser\">\n+          <from uri=\"direct:createUser\"/>\n+          <setProperty propertyName=\"actual\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"uwfAdapter\" method=\"create(${body},${property.disablePwdPolicyCheck},\n+                                 ${property.enabled},${property.storePassword})\"/>\n+            <process ref=\"defaultUserCreatePropagation\" />\n+            <to uri=\"direct:createPort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createPort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+        \n+        <!--\n+            The propagation route deals with propagation of created user. In this\n+            case we used a custom processor to perform this task: it means that\n+            a custom java class contains the propagation strategy.\n+        -->\n+       \n+        <!--\n+            UPDATE USER\n+        -->\n+        <route id=\"updateUser\">\n+            <from uri=\"direct:updateUser\"/>\n+            <setProperty propertyName=\"actual\">\n+                <simple>${body}</simple>\n+            </setProperty>\n+            <doTry>\n+              <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+              <process ref=\"defaultUserUpdatePropagation\" />\n+              <to uri=\"direct:updatePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updatePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+\n+                \n+        <!--\n+            UPDATE SYNC USER\n+        -->\n+        <route id=\"updateSyncUser\">\n+            <from uri=\"direct:updateSyncUser\"/>            \n+            <doTry>\n+              <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+              <to uri=\"direct:syncUserStatus\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updateSyncPort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <route id=\"syncUserStatus\">\n+            <from uri=\"direct:syncUserStatus\"/>\n+                <process ref=\"userStatusOnSync\" />\n+                <process ref=\"defaultUserUpdateSyncPropagation\" />\n+            <to uri=\"direct:updateSyncPort\"/>\n+        </route>\n+        <!--\n+            DELETE USER\n+        -->\n+        <route id=\"deleteUser\">\n+            <from uri=\"direct:deleteUser\"/>\n+            <doTry>\n+              <process ref=\"defaultUserDeletePropagation\" />\n+              <bean ref=\"uwfAdapter\" method=\"delete(${body})\"/>\n+              <setBody>\n+                  <simple>${property.statuses}</simple>\n+              </setBody>\n+              <to uri=\"direct:deletePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:deletePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <!-- \n+            UNLINK USER\n+        -->\n+        <route id=\"unlinkUser\">\n+            <from uri=\"direct:unlinkUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult.getKey}</simple>\n+                </setBody>\n+                <to uri=\"direct:unlinkPort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:unlinkPort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            LINK USER\n+        -->\n+        \n+        <route id=\"linkUser\">\n+            <from uri=\"direct:linkUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult.getKey}</simple>\n+                </setBody>\n+                <to uri=\"direct:linkPort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:linkPort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!-- \n+            ACTIVATE USER\n+        -->\n+        <route id=\"activateUser\">\n+            <from uri=\"direct:activateUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"activate(${body}, ${property.token})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>    \n+        </route>\n+        <!-- \n+            REACTIVATE USER\n+        -->\n+        <route id=\"reactivateUser\">\n+            <from uri=\"direct:reactivateUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"reactivate(${body})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>    \n+        </route>\n+        <!-- \n+            SUSPEND USER\n+        -->\n+        <route id=\"suspendUser\">\n+            <from uri=\"direct:suspendUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>  \n+        </route>\n+        \n+        <!-- \n+            STATUS PROPAGATION\n+        -->\n+        \n+        <route id=\"statusUser\">\n+            <from uri=\"direct:statusUser\"/>            \n+              <process ref=\"defaultUserStatusPropagation\" />\n+            <to uri=\"direct:statusPort\"/>              \n+        </route>\n+        \n+        \n+        <!--\n+            DEPROVISION USER\n+        -->\n+        <route id=\"deprovisionUser\">\n+            <from uri=\"direct:deprovisionUser\"/>            \n+              <process ref=\"defaultUserDeprovisionPropagation\" />\n+              <to uri=\"direct:deprovisionPort\"/>              \n+        </route>\n+        \n+        <!--\n+            CREATE ROLE\n+        -->\n+        \n+        <route id=\"createRole\">\n+          <from uri=\"direct:createRole\"/>\n+          <setProperty propertyName=\"subject\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+            <process ref=\"defaultRoleCreatePropagation\" />\n+            <to uri=\"direct:createRolePort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createRolePort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+               \n+        <!--\n+            CREATE ROLE SYNC\n+        -->\n+        <route id=\"createRoleSync\">\n+          <from uri=\"direct:createRoleSync\"/>\n+          <setProperty propertyName=\"subject\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+            <process ref=\"defaultRoleCreateSyncPropagation\" />\n+            <to uri=\"direct:createRoleSyncPort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createRoleSyncPort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+        \n+         \n+        <!--\n+            UPDATE ROLE\n+        -->\n+        <route id=\"updateRole\">\n+            <from uri=\"direct:updateRole\"/>\n+            <setProperty propertyName=\"subjectMod\">\n+                <simple>${body}</simple>\n+            </setProperty>\n+            <doTry>\n+              <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+              <process ref=\"defaultRoleUpdatePropagation\" />\n+              <to uri=\"direct:updateRolePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updateRolePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+               \n+        <!--\n+            DELETE ROLE\n+        -->\n+        <route id=\"deleteRole\">\n+            <from uri=\"direct:deleteRole\"/>\n+            <doTry>\n+              <process ref=\"defaultRoleDeletePropagation\" />\n+              <bean ref=\"rwfAdapter\" method=\"delete(${body})\"/>\n+              <setBody>\n+                  <simple>${property.statuses}</simple>\n+              </setBody>\n+              <to uri=\"direct:deleteRolePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:deleteRolePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <!-- \n+            UNLINK USER\n+        -->\n+        <route id=\"unlinkRole\">\n+            <from uri=\"direct:unlinkRole\"/>\n+            <doTry>\n+                <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult}</simple>\n+                </setBody>\n+                <to uri=\"direct:unlinkRolePort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:unlinkRolePort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            LINK USER\n+        -->\n+        \n+        <route id=\"linkRole\">\n+            <from uri=\"direct:linkRole\"/>\n+            <doTry>\n+                <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult}</simple>\n+                </setBody>\n+                <to uri=\"direct:linkRolePort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:linkRolePort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            DEPROVISION ROLE\n+        -->\n+        <route id=\"deprovisionRole\">\n+            <from uri=\"direct:deprovisionRole\"/>            \n+              <process ref=\"defaultRoleDeprovisionPropagation\" />\n+              <to uri=\"direct:deprovisionRolePort\"/>              \n+        </route>\n+        \n+        <!--\n+            SUSPEND USER AFTER POLICY VIOLATION\n+        -->\n+        \n+        <route id=\"suspendUserWF\">\n+            <from uri=\"direct:suspendUserWF\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+                <process ref=\"defaultUserWFSuspendPropagation\"/>\n+                <to uri=\"direct:suspendWFPort\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:suspendWFPort\"/>\n+                </doCatch>\n+            </doTry>  \n+        </route>\n+        \n+    </routeContext>\n+    <bean id=\"defaultUserCreatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserCreatePropagation\"/>\n+    <bean id=\"defaultUserUpdatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserUpdatePropagation\"/>    \n+    <bean id=\"userStatusOnSync\" class=\"org.apache.syncope.core.provisioning.camel.processors.UserStatusOnSync\"/>\n+    <bean id=\"defaultUserUpdateSyncPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserUpdateInSyncPropagation\"/>\n+    <bean id=\"defaultUserDeletePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserDeletePropagation\"/>    \n+    <bean id=\"defaultUserDeprovisionPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserDeprovisionPropagation\"/>    \n+    <bean id=\"defaultUserWFSuspendPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserWFSuspendPropagation\"/>\n+    <bean id=\"defaultUserStatusPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserStatusPropagation\"/>\n+    <bean id=\"defaultRoleCreatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleCreatePropagation\"/>\n+    <bean id=\"defaultRoleCreateSyncPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleCreateSyncPropagation\"/>\n+    <bean id=\"defaultRoleUpdatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleUpdatePropagation\"/>\n+    <bean id=\"defaultRoleDeletePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleDeletePropagation\"/>    \n+    <bean id=\"defaultRoleDeprovisionPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleDeprovisionPropagation\"/>    \n+</beans>"},{"sha":"683ce46e5e98cba5bd9c21f352e905063bd00a50","filename":"core/src/main/resources/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -179,5 +179,8 @@ under the License.\n   <Entitlement name=\"SECURITY_QUESTION_CREATE\"/>\n   <Entitlement name=\"SECURITY_QUESTION_UPDATE\"/>\n   <Entitlement name=\"SECURITY_QUESTION_DELETE\"/>\n+  <Entitlement name=\"ROUTE_UPDATE\"/>\n+  <Entitlement name=\"ROUTE_LIST\"/>\n+  <Entitlement name=\"ROUTE_READ\"/>\n \n </dataset>"},{"sha":"da55cfc772299927d91bcddccf7e578d848fef8d","filename":"core/src/main/resources/coreContext.xml","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -20,13 +20,16 @@ under the License.\n <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xmlns:camel=\"http://camel.apache.org/schema/spring\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n                            http://www.springframework.org/schema/context/spring-context.xsd\n                            http://www.springframework.org/schema/task\n-                           http://www.springframework.org/schema/task/spring-task.xsd\">\n+                           http://www.springframework.org/schema/task/spring-task.xsd\n+                           http://camel.apache.org/schema/spring\n+                           http://camel.apache.org/schema/spring/camel-spring.xsd\">\n \n   <bean id=\"confDirectoryPropertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n     <property name=\"order\" value=\"1\"/>\n@@ -72,6 +75,9 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.workflow\">\n     <context:exclude-filter type=\"regex\" expression=\".*\\.activiti\\..*\"/>\n   </context:component-scan>\n+  \n+  <bean id=\"defaultUserProvisioningManager\" class=\"org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\"/>\n+  <bean id=\"defaultRoleProvisioningManager\" class=\"org.apache.syncope.core.provisioning.camel.CamelRoleProvisioningManager\"/>\n \n   <bean id=\"nonJPAdbInitializer\" class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n     <property name=\"dataSource\" ref=\"dataSource\"/>\n@@ -145,4 +151,22 @@ under the License.\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>\n   </bean>\n+  <!-- Camel Context Definition -->\n+  <bean id=\"syncopeCamelContextFactory\" class=\"org.apache.syncope.core.provisioning.camel.SyncopeCamelContext\"/>\n+    \n+    <bean id=\"defaultUserCreatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserCreatePropagation\"/>\n+    <bean id=\"defaultUserUpdatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserUpdatePropagation\"/>    \n+    <bean id=\"userStatusOnSync\" class=\"org.apache.syncope.core.provisioning.camel.processors.UserStatusOnSync\"/>\n+    <bean id=\"defaultUserUpdateSyncPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserUpdateInSyncPropagation\"/>\n+    <bean id=\"defaultUserDeletePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserDeletePropagation\"/>    \n+    <bean id=\"defaultUserDeprovisionPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserDeprovisionPropagation\"/>    \n+    <bean id=\"defaultUserWFSuspendPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserWFSuspendPropagation\"/>\n+    <bean id=\"defaultUserStatusPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultUserStatusPropagation\"/>\n+    <bean id=\"defaultRoleCreatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleCreatePropagation\"/>\n+    <bean id=\"defaultRoleCreateSyncPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleCreateSyncPropagation\"/>\n+    <bean id=\"defaultRoleUpdatePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleUpdatePropagation\"/>\n+    <bean id=\"defaultRoleDeletePropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleDeletePropagation\"/>    \n+    <bean id=\"defaultRoleDeprovisionPropagation\" class=\"org.apache.syncope.core.provisioning.camel.processors.DefaultRoleDeprovisionPropagation\"/>    \n+\n+    <bean id=\"routeController\" class=\"org.apache.syncope.core.rest.controller.RouteController\"/>\n </beans>"},{"sha":"80ff595933679ea02e43d8e780e93860f004e872","filename":"core/src/main/resources/roleRoute.xml","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FroleRoute.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FroleRoute.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FroleRoute.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,174 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://camel.apache.org/schema/spring\n+                           http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+ \n+    <!--\n+        The default routes define each task involved in user creation:\n+        main operations consist in user workflow creation and its propagation.         \n+    -->\n+    <routeContext id=\"defaultRoleRoutes\" xmlns=\"http://camel.apache.org/schema/spring\"> \n+<!--\n+            CREATE ROLE\n+        -->\n+        \n+        <route id=\"createRole\">\n+          <from uri=\"direct:createRole\"/>\n+          <setProperty propertyName=\"subject\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+            <process ref=\"defaultRoleCreatePropagation\" />\n+            <to uri=\"direct:createRolePort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createRolePort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+               \n+        <!--\n+            CREATE ROLE SYNC\n+        -->\n+        <route id=\"createRoleSync\">\n+          <from uri=\"direct:createRoleSync\"/>\n+          <setProperty propertyName=\"subject\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+            <process ref=\"defaultRoleCreateSyncPropagation\" />\n+            <to uri=\"direct:createRoleSyncPort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createRoleSyncPort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+        \n+         \n+        <!--\n+            UPDATE ROLE\n+        -->\n+        <route id=\"updateRole\">\n+            <from uri=\"direct:updateRole\"/>\n+            <setProperty propertyName=\"subjectMod\">\n+                <simple>${body}</simple>\n+            </setProperty>\n+            <doTry>\n+              <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+              <process ref=\"defaultRoleUpdatePropagation\" />\n+              <to uri=\"direct:updateRolePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updateRolePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+               \n+        <!--\n+            DELETE ROLE\n+        -->\n+        <route id=\"deleteRole\">\n+            <from uri=\"direct:deleteRole\"/>\n+            <doTry>\n+              <process ref=\"defaultRoleDeletePropagation\" />\n+              <bean ref=\"rwfAdapter\" method=\"delete(${body})\"/>\n+              <setBody>\n+                  <simple>${property.statuses}</simple>\n+              </setBody>\n+              <to uri=\"direct:deleteRolePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:deleteRolePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <!-- \n+            UNLINK USER\n+        -->\n+        <route id=\"unlinkRole\">\n+            <from uri=\"direct:unlinkRole\"/>\n+            <doTry>\n+                <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult}</simple>\n+                </setBody>\n+                <to uri=\"direct:unlinkRolePort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:unlinkRolePort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            LINK USER\n+        -->\n+        \n+        <route id=\"linkRole\">\n+            <from uri=\"direct:linkRole\"/>\n+            <doTry>\n+                <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult}</simple>\n+                </setBody>\n+                <to uri=\"direct:linkRolePort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:linkRolePort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            DEPROVISION ROLE\n+        -->\n+        <route id=\"deprovisionRole\">\n+            <from uri=\"direct:deprovisionRole\"/>            \n+              <process ref=\"defaultRoleDeprovisionPropagation\" />\n+              <to uri=\"direct:deprovisionRolePort\"/>              \n+        </route>\n+</routeContext>\n+</beans>"},{"sha":"e65ef2f5c148a2b31571289d18ac8a9dd1e77189","filename":"core/src/main/resources/userRoute.xml","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserRoute.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -0,0 +1,263 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://camel.apache.org/schema/spring\n+                           http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+ \n+    <!--\n+        The default routes define each task involved in user creation:\n+        main operations consist in user workflow creation and its propagation.         \n+    -->\n+    <routeContext id=\"defaultUserRoutes\" xmlns=\"http://camel.apache.org/schema/spring\">  \t\n+\t<route id=\"createUser\">\n+          <from uri=\"direct:createUser\"/>\n+          <setProperty propertyName=\"actual\">\n+            <simple>${body}</simple>\n+          </setProperty>\n+          <doTry>\n+            <bean ref=\"uwfAdapter\" \n+                  method=\"create(${body},${property.disablePwdPolicyCheck},\n+                                 ${property.enabled},${property.storePassword})\"/>\n+            <process ref=\"defaultUserCreatePropagation\" />\n+            <to uri=\"direct:createPort\"/>\n+            <doCatch>        \n+                <exception>java.lang.RuntimeException</exception>\n+                <handled>\n+                    <constant>false</constant>\n+                </handled>\n+                <to uri=\"direct:createPort\"/>\n+            </doCatch>\n+          </doTry>\n+        </route> \n+        \n+        <!--\n+            The propagation route deals with propagation of created user. In this\n+            case we used a custom processor to perform this task: it means that\n+            a custom java class contains the propagation strategy.\n+        -->\n+       \n+        <!--\n+            UPDATE USER\n+        -->\n+        <route id=\"updateUser\">\n+            <from uri=\"direct:updateUser\"/>\n+            <setProperty propertyName=\"actual\">\n+                <simple>${body}</simple>\n+            </setProperty>\n+            <doTry>\n+              <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+              <process ref=\"defaultUserUpdatePropagation\" />\n+              <to uri=\"direct:updatePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updatePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+\n+                \n+        <!--\n+            UPDATE SYNC USER\n+        -->\n+        <route id=\"updateSyncUser\">\n+            <from uri=\"direct:updateSyncUser\"/>            \n+            <doTry>\n+              <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+              <to uri=\"direct:syncUserStatus\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:updateSyncPort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <route id=\"syncUserStatus\">\n+            <from uri=\"direct:syncUserStatus\"/>\n+                <process ref=\"userStatusOnSync\" />\n+                <process ref=\"defaultUserUpdateSyncPropagation\" />\n+            <to uri=\"direct:updateSyncPort\"/>\n+        </route>\n+        <!--\n+            DELETE USER\n+        -->\n+        <route id=\"deleteUser\">\n+            <from uri=\"direct:deleteUser\"/>\n+            <doTry>\n+              <process ref=\"defaultUserDeletePropagation\" />\n+              <bean ref=\"uwfAdapter\" method=\"delete(${body})\"/>\n+              <setBody>\n+                  <simple>${property.statuses}</simple>\n+              </setBody>\n+              <to uri=\"direct:deletePort\"/>\n+              <doCatch>        \n+                  <exception>java.lang.RuntimeException</exception>\n+                  <handled>\n+                      <constant>false</constant>\n+                  </handled>\n+                  <to uri=\"direct:deletePort\"/>\n+              </doCatch>\n+            </doTry>\n+        </route>\n+        \n+        <!-- \n+            UNLINK USER\n+        -->\n+        <route id=\"unlinkUser\">\n+            <from uri=\"direct:unlinkUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult.getKey}</simple>\n+                </setBody>\n+                <to uri=\"direct:unlinkPort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:unlinkPort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!--\n+            LINK USER\n+        -->\n+        \n+        <route id=\"linkUser\">\n+            <from uri=\"direct:linkUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+                <setBody>\n+                   <simple>${body.getResult.getKey}</simple>\n+                </setBody>\n+                <to uri=\"direct:linkPort\"/>\n+                <doCatch>        \n+                    <exception>java.lang.RuntimeException</exception>\n+                    <handled>\n+                        <constant>false</constant>\n+                    </handled>\n+                    <to uri=\"direct:linkPort\"/>\n+                </doCatch>\n+            </doTry>            \n+        </route>\n+        \n+        <!-- \n+            ACTIVATE USER\n+        -->\n+        <route id=\"activateUser\">\n+            <from uri=\"direct:activateUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"activate(${body}, ${property.token})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>    \n+        </route>\n+        <!-- \n+            REACTIVATE USER\n+        -->\n+        <route id=\"reactivateUser\">\n+            <from uri=\"direct:reactivateUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"reactivate(${body})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>    \n+        </route>\n+        <!-- \n+            SUSPEND USER\n+        -->\n+        <route id=\"suspendUser\">\n+            <from uri=\"direct:suspendUser\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+                <to uri=\"direct:statusUser\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:statusPort\"/>\n+                </doCatch>\n+            </doTry>  \n+        </route>\n+        \n+        <!-- \n+            STATUS PROPAGATION\n+        -->\n+        \n+        <route id=\"statusUser\">\n+            <from uri=\"direct:statusUser\"/>            \n+              <process ref=\"defaultUserStatusPropagation\" />\n+            <to uri=\"direct:statusPort\"/>              \n+        </route>\n+        \n+        \n+        <!--\n+            DEPROVISION USER\n+        -->\n+        <route id=\"deprovisionUser\">\n+            <from uri=\"direct:deprovisionUser\"/>            \n+              <process ref=\"defaultUserDeprovisionPropagation\" />\n+              <to uri=\"direct:deprovisionPort\"/>              \n+        </route>\n+\n+\n+\n+        <route id=\"suspendUserWF\">\n+            <from uri=\"direct:suspendUserWF\"/>\n+            <doTry>\n+                <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+                <process ref=\"defaultUserWFSuspendPropagation\"/>\n+                <to uri=\"direct:suspendWFPort\"/>\n+                <doCatch>        \n+                   <exception>java.lang.RuntimeException</exception>\n+                   <handled>\n+                       <constant>false</constant>\n+                   </handled>\n+                   <to uri=\"direct:suspendWFPort\"/>\n+                </doCatch>\n+            </doTry>  \n+        </route>\n+\n+</routeContext>\n+</beans>"},{"sha":"ca8b638b4cba70db643033be5c2488ee45136422","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -41,7 +41,7 @@ public class EntitlementTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 86, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 89, list.size());\n     }\n \n     @Test"},{"sha":"987a42ddf07e3b64e7c2f7ad2815090ef6ed7f51","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -1118,6 +1118,9 @@ under the License.\n   <Entitlement name=\"ROLE_12\"/>\n   <Entitlement name=\"ROLE_13\"/>\n   <Entitlement name=\"ROLE_14\"/>\n+  <Entitlement name=\"ROUTE_UPDATE\"/>\n+  <Entitlement name=\"ROUTE_LIST\"/>\n+  <Entitlement name=\"ROUTE_READ\"/>\n \n   <SyncopeRole_Entitlement entitlement_name=\"base\" role_id=\"1\"/>\n   <SyncopeRole_Entitlement entitlement_name=\"advanced\" role_id=\"1\"/>"},{"sha":"69a62d6b19de116ce87e7f4c8cb10818520c05d2","filename":"pom.xml","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b3b124a0c4254e39f0caf5b0daabb5b7d571a56/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=5b3b124a0c4254e39f0caf5b0daabb5b7d571a56","patch":"@@ -21,8 +21,7 @@ under the License.\n \n   <modelVersion>4.0.0</modelVersion>\n \n-  <name>Apache Syncope</name>\n-  <description>Apache Syncope parent POM</description>\n+  <name>PoC for integrating Apache Camel in Apache Syncope</name>\n \n   <groupId>org.apache.syncope</groupId>\n   <artifactId>syncope</artifactId>\n@@ -325,7 +324,8 @@ under the License.\n \n     <aspectj.version>1.8.4</aspectj.version>\n \n-    <cxf.version>3.0.3</cxf.version>\t\n+    <cxf.version>3.0.3</cxf.version>\n+    <camel.version>2.12.5</camel.version>\t\n     <spring.version>4.0.8.RELEASE</spring.version>\n     <spring-security.version>3.2.5.RELEASE</spring-security.version>\n     <jackson.version>2.4.4</jackson.version>\n@@ -705,6 +705,19 @@ under the License.\n         <version>${cxf.version}</version>\n       </dependency>      \n       <!-- /CXF -->\n+      \n+      <!-- Camel -->\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-core</artifactId>\n+        <version>${camel.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+       <artifactId>camel-spring</artifactId>\n+       <version>${camel.version}</version>\n+      </dependency>\n+      <!-- /Camel -->\n \n       <dependency>\n         <groupId>com.fasterxml.jackson.core</groupId>"}]}