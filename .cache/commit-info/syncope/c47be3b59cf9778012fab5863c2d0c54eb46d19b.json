{"sha":"c47be3b59cf9778012fab5863c2d0c54eb46d19b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0N2JlM2I1OWNmOTc3ODAxMmZhYjU4NjNjMmQwYzU0ZWI0NmQxOWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-29T16:06:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-29T16:07:00Z"},"message":"[SYNCOPE-987] Fixing CLIITCase","tree":{"sha":"82afec3e713d5c6b4aafa06d40bad2a38ecf2bbb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/82afec3e713d5c6b4aafa06d40bad2a38ecf2bbb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c47be3b59cf9778012fab5863c2d0c54eb46d19b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c47be3b59cf9778012fab5863c2d0c54eb46d19b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c47be3b59cf9778012fab5863c2d0c54eb46d19b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c47be3b59cf9778012fab5863c2d0c54eb46d19b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0aba812830b9b29314e4221fe4a5cc0f3c997be4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0aba812830b9b29314e4221fe4a5cc0f3c997be4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0aba812830b9b29314e4221fe4a5cc0f3c997be4"}],"stats":{"total":95,"additions":64,"deletions":31},"files":[{"sha":"080e8f2b00bed027109bbe7195c7d66090ee62ad","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":64,"deletions":31,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c47be3b59cf9778012fab5863c2d0c54eb46d19b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c47be3b59cf9778012fab5863c2d0c54eb46d19b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=c47be3b59cf9778012fab5863c2d0c54eb46d19b","patch":"@@ -57,18 +57,18 @@ public class CLIITCase extends AbstractITCase {\n     public static void install() {\n         Properties props = new Properties();\n         InputStream propStream = null;\n+        Process process = null;\n         try {\n             propStream = CLIITCase.class.getResourceAsStream(\"/cli-test.properties\");\n             props.load(propStream);\n \n             File workDir = new File(props.getProperty(\"cli-work.dir\"));\n-            PROCESS_BUILDER = new ProcessBuilder();\n-            PROCESS_BUILDER.directory(workDir);\n+            PROCESS_BUILDER = new ProcessBuilder().directory(workDir);\n \n             PROCESS_BUILDER.command(getCommand(\n                     new InstallCommand().getClass().getAnnotation(Command.class).name(),\n                     InstallCommand.Options.SETUP_DEBUG.getOptionName()));\n-            Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n             process.waitFor();\n \n             File cliPropertiesFile = new File(workDir + File.separator + \"cli.properties\");\n@@ -77,14 +77,18 @@ public static void install() {\n             fail(e.getMessage());\n         } finally {\n             IOUtils.closeQuietly(propStream);\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n     private static String[] getCommand(final String... arguments) {\n         List<String> command = new ArrayList<>();\n \n         if (SystemUtils.IS_OS_WINDOWS) {\n-            command.add(\"cmd\");\n+            command.add(\"cmd.exe\");\n+            command.add(\"/C\");\n             command.add(SCRIPT_FILENAME + \".bat\");\n         } else {\n             command.add(\"/bin/bash\");\n@@ -98,12 +102,14 @@ private static String[] getCommand(final String... arguments) {\n \n     @Test\n     public void runScriptWithoutOptions() {\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand());\n-            Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n \n-            String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n-            assertTrue(result.startsWith(\"\\nUsage: Main [options]\"));\n+            String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET).\n+                    replaceAll(\"(?m)^\\\\s*$[\\n\\r]{1,}\", \"\");\n+            assertTrue(result.startsWith(\"Usage: Main [options]\"));\n             assertTrue(result.contains(\n                     new EntitlementCommand().getClass().getAnnotation(Command.class).name()\n                     + \" \"\n@@ -112,19 +118,23 @@ public void runScriptWithoutOptions() {\n                     new GroupCommand().getClass().getAnnotation(Command.class).name()\n                     + \" \"\n                     + GroupCommand.GroupOptions.HELP.getOptionName()));\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n     @Test\n     public void entitlementCount() {\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new EntitlementCommand().getClass().getAnnotation(Command.class).name(),\n                     EntitlementCommand.EntitlementOptions.LIST.getOptionName()));\n-            Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n \n             long entitlements = IterableUtils.countMatches(\n                     IOUtils.readLines(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n@@ -136,20 +146,23 @@ public boolean evaluate(final String line) {\n                 }\n             });\n             assertEquals(syncopeService.platform().getEntitlements().size(), entitlements);\n-\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n     @Test\n     public void connectorCount() {\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new ConnectorCommand().getClass().getAnnotation(Command.class).name(),\n                     ConnectorCommand.ConnectorOptions.LIST_BUNDLES.getOptionName()));\n-            Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n \n             long bundles = IterableUtils.countMatches(\n                     IOUtils.readLines(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n@@ -161,10 +174,12 @@ public boolean evaluate(final String line) {\n                 }\n             });\n             assertEquals(connectorService.getBundles(null).size(), bundles);\n-\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n@@ -175,22 +190,24 @@ public void userRead() {\n         final String userKey3 = \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\";\n         final String userKey4 = \"c9b2dec2-00a7-4855-97c0-d854842b4b24\";\n         final String userKey5 = \"823074dc-d280-436d-a7dd-07399fae48ec\";\n+        Process process1 = null;\n+        Process process2 = null;\n+        Process process3 = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new UserCommand().getClass().getAnnotation(Command.class).name(),\n                     UserCommand.UserOptions.READ_BY_KEY.getOptionName(),\n                     String.valueOf(userKey1)));\n-            Process process = PROCESS_BUILDER.start();\n-            String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n+            process1 = PROCESS_BUILDER.start();\n+            String result = IOUtils.toString(process1.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"username: \" + userService.read(userKey1).getUsername()));\n-            process.destroy();\n \n             PROCESS_BUILDER.command(getCommand(\n                     new UserCommand().getClass().getAnnotation(Command.class).name(),\n                     UserCommand.UserOptions.READ_BY_KEY.getOptionName(),\n                     String.valueOf(userKey1), String.valueOf(userKey2),\n                     String.valueOf(userKey3), String.valueOf(userKey4), String.valueOf(userKey5)));\n-            Process process2 = PROCESS_BUILDER.start();\n+            process2 = PROCESS_BUILDER.start();\n             long users = IterableUtils.countMatches(\n                     IOUtils.readLines(process2.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n                     new Predicate<String>() {\n@@ -202,76 +219,92 @@ public boolean evaluate(final String line) {\n             });\n             assertEquals(5, users);\n \n-            process2.destroy();\n-\n             PROCESS_BUILDER.command(getCommand(\n                     new UserCommand().getClass().getAnnotation(Command.class).name(),\n                     UserCommand.UserOptions.READ_BY_KEY.getOptionName(),\n                     String.valueOf(userKey1), String.valueOf(userKey2),\n                     String.valueOf(userKey3), String.valueOf(userKey4), String.valueOf(userKey5)));\n-            Process process3 = PROCESS_BUILDER.start();\n+            process3 = PROCESS_BUILDER.start();\n             String result3 = IOUtils.toString(process3.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(\n                     result3.contains(\"username: \" + userService.read(userKey1).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userKey2).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userKey3).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userKey4).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userKey5).getUsername()));\n-            process3.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process1 != null) {\n+                process1.destroy();\n+            }\n+            if (process2 != null) {\n+                process2.destroy();\n+            }\n+            if (process3 != null) {\n+                process3.destroy();\n+            }\n         }\n     }\n \n     @Test\n     public void roleRead() {\n         final String roleId = \"Search for realm evenTwo\";\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new RoleCommand().getClass().getAnnotation(Command.class).name(),\n                     RoleCommand.RoleOptions.READ.getOptionName(),\n                     roleId));\n-            final Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n             final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(roleService.read(roleId).getEntitlements().iterator().next()));\n-\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n     @Test\n     public void reportNotExists() {\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new ReportCommand().getClass().getAnnotation(Command.class).name(),\n                     ReportCommand.ReportOptions.READ.getOptionName(),\n                     \"72\"));\n-            final Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n             final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"- Report 72 doesn't exist\"));\n-\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n \n     @Test\n     public void policyError() {\n+        Process process = null;\n         try {\n             PROCESS_BUILDER.command(getCommand(\n                     new PolicyCommand().getClass().getAnnotation(Command.class).name(),\n                     PolicyCommand.PolicyOptions.READ.getOptionName(),\n                     \"wrong\"));\n-            final Process process = PROCESS_BUILDER.start();\n+            process = PROCESS_BUILDER.start();\n             final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"- Policy wrong doesn't exist\"));\n-\n-            process.destroy();\n         } catch (IOException e) {\n             fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n         }\n     }\n }"}]}