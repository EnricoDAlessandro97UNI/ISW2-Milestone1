{"sha":"cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNjNWVmZjNiOWFiYmJiNjg5MmY1YzY2YzMyYTFhNDUxMmQ4MWJmYmU=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-09-21T12:17:05Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-09-21T12:17:05Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"f66afe09554697bd8b4dbe90be20dba05a314ca2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f66afe09554697bd8b4dbe90be20dba05a314ca2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f3a4ed075b6854788255cf70f630882fa0c8ab4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f3a4ed075b6854788255cf70f630882fa0c8ab4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f3a4ed075b6854788255cf70f630882fa0c8ab4"},{"sha":"b2355e758200ee07b3595682d8fa3a472d3f2bf2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2355e758200ee07b3595682d8fa3a472d3f2bf2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2355e758200ee07b3595682d8fa3a472d3f2bf2"}],"stats":{"total":232,"additions":230,"deletions":2},"files":[{"sha":"f426f8ca3e9744096a9ac17b717db4b4be0a0516","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSchemaTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -20,10 +20,12 @@\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n+@XmlRootElement(name = \"abstractSchema\")\n @XmlType\n @XmlSeeAlso({ PlainSchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")"},{"sha":"dd41f24a1f5f11f6f2ad5f2fd81e61414ba7e90f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":65,"deletions":1,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import java.util.Set;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -35,19 +36,49 @@\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n \n public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSService {\n \n+    /**\n+     * Reads the list of attributes owned by the given any object for the given schema type.\n+     *\n+     * @param key any object key\n+     * @param schemaType schema type\n+     * @return list of attributes, owned by the given any object, for the given schema type\n+     */\n+    @GET\n+    @Path(\"{key}/{schemaType}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Set<AttrTO> read(@NotNull @PathParam(\"key\") Long key, @NotNull @PathParam(\"schemaType\") SchemaType schemaType);\n+\n+    /**\n+     * Reads the attribute, owned by the given any object, for the given schema type and schema.\n+     *\n+     * @param key any object key\n+     * @param schemaType schema type\n+     * @param schema schema\n+     * @return attribute, owned by the given any object, for the given schema type and schema\n+     */\n+    @GET\n+    @Path(\"{key}/{schemaType}/{schema}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    AttrTO read(\n+            @NotNull @PathParam(\"key\") Long key,\n+            @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n+            @NotNull @PathParam(\"schema\") String schema);\n+\n     /**\n      * Reads the any object matching the provided key.\n      *\n      * @param key key of any object to be read\n-     * @return any object with matching id\n+     * @return any object with matching key\n      */\n     @GET\n     @Path(\"{key}\")\n@@ -100,6 +131,23 @@\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response update(@NotNull P anyPatch);\n \n+    /**\n+     * Adds or replaces the attribute, owned by the given any object, for the given schema type and schema.\n+     *\n+     * @param key any object key\n+     * @param schemaType schema type\n+     * @param attrTO attribute\n+     * @return <tt>Response</tt> object featuring the updated any object attribute - <tt>AttrTO</tt> as <tt>Entity</tt>\n+     */\n+    @PUT\n+    @Path(\"{key}/{schemaType}/{schema}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(\n+            @NotNull @PathParam(\"key\") Long key,\n+            @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n+            @NotNull AttrTO attrTO);\n+\n     /**\n      * Updates any object matching the provided key.\n      *\n@@ -113,6 +161,22 @@\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response update(@NotNull TO anyTO);\n \n+    /**\n+     * Deletes the attribute, owned by the given any object, for the given schema type and schema.\n+     *\n+     * @param key any object key\n+     * @param schemaType schema type\n+     * @param schema schema\n+     */\n+    @DELETE\n+    @Path(\"{key}/{schemaType}/{schema}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void delete(\n+            @NotNull @PathParam(\"key\") Long key,\n+            @NotNull @PathParam(\"schemaType\") SchemaType schemaType,\n+            @NotNull @PathParam(\"schema\") String schema);\n+\n     /**\n      * Deletes any object matching provided key.\n      *"},{"sha":"d33cde24ba4e9f6215399310150c3a3a8e4cfb1e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n@@ -26,21 +27,26 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n@@ -49,6 +55,54 @@\n \n     protected abstract AbstractAnyLogic<TO, P> getAnyLogic();\n \n+    protected abstract P newPatch(Long key);\n+\n+    @Override\n+    public Set<AttrTO> read(final Long key, final SchemaType schemaType) {\n+        TO any = read(key);\n+        Set<AttrTO> result;\n+        switch (schemaType) {\n+            case DERIVED:\n+                result = any.getDerAttrs();\n+                break;\n+\n+            case VIRTUAL:\n+                result = any.getVirAttrs();\n+                break;\n+\n+            case PLAIN:\n+            default:\n+                result = any.getPlainAttrs();\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public AttrTO read(final Long key, final SchemaType schemaType, final String schema) {\n+        TO any = read(key);\n+        AttrTO result;\n+        switch (schemaType) {\n+            case DERIVED:\n+                result = any.getDerAttrMap().get(schema);\n+                break;\n+\n+            case VIRTUAL:\n+                result = any.getVirAttrMap().get(schema);\n+                break;\n+\n+            case PLAIN:\n+            default:\n+                result = any.getPlainAttrMap().get(schema);\n+        }\n+\n+        if (result == null) {\n+            throw new NotFoundException(\"Attribute for type \" + schemaType + \" and schema \" + schema);\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public TO read(final Long key) {\n         return getAnyLogic().read(key);\n@@ -116,6 +170,42 @@ public Response update(final P anyPatch) {\n         return modificationResponse(updated);\n     }\n \n+    private void addUpdateOrReplaceAttr(\n+            final Long key, final SchemaType schemaType, final AttrTO attrTO, final PatchOperation operation) {\n+\n+        if (attrTO.getSchema() == null) {\n+            throw new NotFoundException(\"Must specify schema\");\n+        }\n+\n+        P patch = newPatch(key);\n+\n+        Set<AttrPatch> patches;\n+        switch (schemaType) {\n+            case DERIVED:\n+                patches = patch.getDerAttrs();\n+                break;\n+\n+            case VIRTUAL:\n+                patches = patch.getVirAttrs();\n+                break;\n+\n+            case PLAIN:\n+            default:\n+                patches = patch.getPlainAttrs();\n+        }\n+\n+        patches.add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n+\n+        update(patch);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Response update(final Long key, final SchemaType schemaType, final AttrTO attrTO) {\n+        addUpdateOrReplaceAttr(key, schemaType, attrTO, PatchOperation.ADD_REPLACE);\n+        return modificationResponse(read(key, schemaType, attrTO.getSchema()));\n+    }\n+\n     @Override\n     public Response update(final TO anyTO) {\n         TO before = getAnyLogic().read(anyTO.getKey());\n@@ -127,6 +217,11 @@ public Response update(final TO anyTO) {\n         return modificationResponse(updated);\n     }\n \n+    @Override\n+    public void delete(final Long key, final SchemaType schemaType, final String schema) {\n+        addUpdateOrReplaceAttr(key, schemaType, new AttrTO.Builder().schema(schema).build(), PatchOperation.DELETE);\n+    }\n+\n     @Override\n     public Response delete(final Long key) {\n         TO group = getAnyLogic().read(key);"},{"sha":"357db7773686f9e3228c750d6e3b5b27bd8d6831","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -43,6 +43,13 @@ protected AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> getAnyLogic() {\n         return logic;\n     }\n \n+    @Override\n+    protected AnyObjectPatch newPatch(final Long key) {\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n+\n     @Override\n     public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQuery) {\n         if (StringUtils.isBlank(type)) {"},{"sha":"f2915f755c006da93133c7c49988348ae673acd5","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -38,6 +38,13 @@ protected AbstractAnyLogic<GroupTO, GroupPatch> getAnyLogic() {\n         return logic;\n     }\n \n+    @Override\n+    protected GroupPatch newPatch(final Long key) {\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n+\n     @Override\n     public List<GroupTO> own() {\n         return logic.own();"},{"sha":"7be0f297bf2a784ffa77303aa1ea1ee46fe46b3d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -41,6 +41,13 @@ protected AbstractAnyLogic<UserTO, UserPatch> getAnyLogic() {\n         return logic;\n     }\n \n+    @Override\n+    protected UserPatch newPatch(final Long key) {\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n+\n     @Override\n     public Response getUsername(final Long key) {\n         return Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW)."},{"sha":"54747442289468296d3a2141aea4dc69af20a299","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":47,"deletions":1,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=cc5eff3b9abbbb6892f5c66c32a1a4512d81bfbe","patch":"@@ -22,15 +22,20 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n+import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -100,7 +105,6 @@ public void list() {\n     @Test\n     public void read() {\n         AnyObjectTO anyObjectTO = anyObjectService.read(1L);\n-\n         assertNotNull(anyObjectTO);\n         assertNotNull(anyObjectTO.getPlainAttrs());\n         assertFalse(anyObjectTO.getPlainAttrs().isEmpty());\n@@ -123,4 +127,46 @@ public void update() {\n         assertEquals(newLocation, anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0));\n     }\n \n+    @Test\n+    public void readAttrs() {\n+        AnyObjectTO anyObjectTO = getSampleTO(\"readAttrs\");\n+        anyObjectTO = createAnyObject(anyObjectTO);\n+        assertNotNull(anyObjectTO);\n+\n+        Set<AttrTO> attrs = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN);\n+        assertEquals(anyObjectTO.getPlainAttrs(), attrs);\n+\n+        AttrTO location = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n+        assertEquals(anyObjectTO.getPlainAttrMap().get(\"location\"), location);\n+    }\n+\n+    @Test\n+    public void updateAttr() {\n+        AnyObjectTO anyObjectTO = getSampleTO(\"updateAttr\");\n+        anyObjectTO = createAnyObject(anyObjectTO);\n+        assertNotNull(anyObjectTO);\n+\n+        AttrTO updated = attrTO(\"location\", \"newlocation\");\n+        anyObjectService.update(anyObjectTO.getKey(), SchemaType.PLAIN, updated);\n+\n+        AttrTO location = anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n+        assertEquals(updated, location);\n+    }\n+\n+    @Test\n+    public void deleteAttr() {\n+        AnyObjectTO anyObjectTO = getSampleTO(\"deleteAttr\");\n+        anyObjectTO = createAnyObject(anyObjectTO);\n+        assertNotNull(anyObjectTO);\n+        assertNotNull(anyObjectTO.getPlainAttrMap().get(\"location\"));\n+\n+        anyObjectService.delete(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n+\n+        try {\n+            anyObjectService.read(anyObjectTO.getKey(), SchemaType.PLAIN, \"location\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n }"}]}