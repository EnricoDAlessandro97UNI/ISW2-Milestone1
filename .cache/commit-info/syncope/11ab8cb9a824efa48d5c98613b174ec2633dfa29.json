{"sha":"11ab8cb9a824efa48d5c98613b174ec2633dfa29","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExYWI4Y2I5YTgyNGVmYTQ4ZDVjOTg2MTNiMTc0ZWMyNjMzZGZhMjk=","commit":{"author":{"name":"Matteo Alessandroni","email":"matteo.alessandroni@tirasa.net","date":"2017-06-23T12:27:17Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-06-27T14:07:00Z"},"message":"Fixes [SYNCOPE-1110], [SYNCOPE-1123]","tree":{"sha":"4925ecb914ed68206fcd22cfb53a1161c99252a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4925ecb914ed68206fcd22cfb53a1161c99252a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/11ab8cb9a824efa48d5c98613b174ec2633dfa29","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11ab8cb9a824efa48d5c98613b174ec2633dfa29","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11ab8cb9a824efa48d5c98613b174ec2633dfa29","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11ab8cb9a824efa48d5c98613b174ec2633dfa29/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"636985db65a8c1b6dd7af781966a7f84d3a83c2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/636985db65a8c1b6dd7af781966a7f84d3a83c2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/636985db65a8c1b6dd7af781966a7f84d3a83c2a"}],"stats":{"total":237,"additions":144,"deletions":93},"files":[{"sha":"7d713f0ff4b1d75d7f66dc65ea1d646d874be2ae","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttribute.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -26,18 +26,18 @@ public class CustomAttribute implements Serializable {\n \n     private static final long serialVersionUID = 4910266842123376686L;\n \n-    private Boolean readonly;\n+    private boolean readonly;\n \n     private List<String> defaultValues = new ArrayList<>();\n \n     public CustomAttribute() {\n     }\n \n-    public Boolean getReadonly() {\n+    public boolean isReadonly() {\n         return readonly;\n     }\n \n-    public void setReadonly(final Boolean readonly) {\n+    public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\n     }\n "},{"sha":"670d603ce680791df18086818cdb8841537f29e5","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseUserSelfResource.java","status":"modified","additions":73,"deletions":26,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -21,51 +21,64 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.HashSet;\n+import org.apache.commons.collections4.Predicate;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n \n public abstract class BaseUserSelfResource extends BaseResource {\n \n     private static final long serialVersionUID = -5892402817902884085L;\n \n-    protected void dateToMillis(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+    protected void dateToMillis(final Set<AttrTO> attrs, final PlainSchemaTO plainSchema)\n             throws ParseException {\n-        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n-            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n \n-            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n-            List<String> milliValues = new ArrayList<>(dateAttr.getValues().size());\n-            for (String value : dateAttr.getValues()) {\n-                milliValues.add(String.valueOf(fmt.parse(value).getTime()));\n+        for (AttrTO attr : attrs) {\n+            if (attr.getSchema().equals(plainSchema.getKey())) {\n+                CollectionUtils.transform(attr.getValues(), new Transformer<String, String>() {\n+\n+                    @Override\n+                    public String transform(final String input) {\n+                        try {\n+                            return String.valueOf(fmt.parse(input).getTime());\n+                        } catch (ParseException ex) {\n+                            LOG.error(\"Unable to parse date {}\", input);\n+                            return input;\n+                        }\n+                    }\n+                });\n             }\n-            dateAttr.getValues().clear();\n-            dateAttr.getValues().addAll(milliValues);\n         }\n     }\n \n-    protected void millisToDate(final Map<String, AttrTO> plainAttrMap, final PlainSchemaTO plainSchema)\n+    protected void millisToDate(final Set<AttrTO> attrs, final PlainSchemaTO plainSchema)\n             throws IllegalArgumentException {\n-        if (plainAttrMap.containsKey(plainSchema.getKey())) {\n-            FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+        final FastDateFormat fmt = FastDateFormat.getInstance(plainSchema.getConversionPattern());\n+        for (AttrTO attr : attrs) {\n+            if (attr.getSchema().equals(plainSchema.getKey())) {\n+                CollectionUtils.transform(attr.getValues(), new Transformer<String, String>() {\n \n-            AttrTO dateAttr = plainAttrMap.get(plainSchema.getKey());\n-            List<String> formattedValues = new ArrayList<>(dateAttr.getValues().size());\n-            for (String value : dateAttr.getValues()) {\n-                try {\n-                    formattedValues.add(fmt.format(Long.valueOf(value)));\n-                } catch (NumberFormatException e) {\n-                    throw new IllegalArgumentException(\"Invalid format value for \" + value);\n-                }\n+                    @Override\n+                    public String transform(final String input) {\n+                        try {\n+                            return fmt.format(Long.valueOf(input));\n+                        } catch (NumberFormatException ex) {\n+                            LOG.error(\"Invalid format value for {}\", input);\n+                            return input;\n+                        }\n+                    }\n+                });\n             }\n-            dateAttr.getValues().clear();\n-            dateAttr.getValues().addAll(formattedValues);\n         }\n     }\n-    \n+\n     protected void buildResponse(final ResourceResponse response, final int statusCode, final String message) {\n         response.setTextEncoding(StandardCharsets.UTF_8.name());\n         response.setStatusCode(statusCode);\n@@ -78,4 +91,38 @@ public void writeData(final Attributes attributes) throws IOException {\n         });\n     }\n \n+    protected void customizeAttrTOs(final Set<AttrTO> attrs, final CustomAttributesInfo customAttributesInfo) {\n+        if (customAttributesInfo != null\n+                && customAttributesInfo.getShow()\n+                && !customAttributesInfo.getAttributes().isEmpty()) {\n+            Set<AttrTO> attrsToAdd = new HashSet<>();\n+            for (AttrTO attr : attrs) {\n+                if (customAttributesInfo.getAttributes().containsKey(attr.getSchema())) {\n+                    attrsToAdd.add(attr);\n+                }\n+            }\n+            attrs.clear();\n+            attrs.addAll(attrsToAdd);\n+        } else if (customAttributesInfo != null && !customAttributesInfo.getShow()) {\n+            attrs.clear();\n+        }\n+    }\n+\n+    protected void customizeAttrPatches(final Set<AttrPatch> attrs, final CustomAttributesInfo customAttributesInfo) {\n+        if (customAttributesInfo != null\n+                && customAttributesInfo.getShow()\n+                && !customAttributesInfo.getAttributes().isEmpty()) {\n+            CollectionUtils.filter(attrs, new Predicate<AttrPatch>() {\n+\n+                @Override\n+                public boolean evaluate(final AttrPatch patchPlainAttr) {\n+                    // if membership attribute clean schema name coming from custom form\n+                    return customAttributesInfo.getAttributes().containsKey(patchPlainAttr.getAttrTO().getSchema());\n+                }\n+            });\n+        } else if (customAttributesInfo != null && !customAttributesInfo.getShow()) {\n+            attrs.clear();\n+        }\n+    }\n+\n }"},{"sha":"00bc356065a3ec04a20331020af4ebc1a99f1102","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.util.UserRequestValidator;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -116,9 +115,9 @@ public boolean evaluate(final MembershipTO item) {\n \n                     // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n                     for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                        millisToDate(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()), plainSchema);\n+                        millisToDate(userTO.getPlainAttrs(), plainSchema);\n                         for (MembershipTO membership : userTO.getMemberships()) {\n-                            millisToDate(EntityTOUtils.buildAttrMap(membership.getPlainAttrs()), plainSchema);\n+                            millisToDate(membership.getPlainAttrs(), plainSchema);\n                         }\n                     }\n "},{"sha":"924800c1b23eb525bc3e0ef8bd301d1d62a5b767","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":16,"deletions":32,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -21,20 +21,15 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n-import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.client.enduser.model.CustomAttribute;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -64,11 +59,10 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n             UserTO userTO = SerializationUtils.clone(SyncopeEnduserSession.get().getSelfTO());\n \n-            // 1. Date -> millis conversion for PLAIN attributes of USER and its MEMBERSHIPS\n+            // 1. Date -> millis conversion for PLAIN MEMBERSHIPS attributes of USER\n             for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                dateToMillis(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()), plainSchema);\n                 for (MembershipTO membership : userTO.getMemberships()) {\n-                    dateToMillis(EntityTOUtils.buildAttrMap(membership.getPlainAttrs()), plainSchema);\n+                    dateToMillis(membership.getPlainAttrs(), plainSchema);\n                 }\n             }\n \n@@ -95,21 +89,11 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 membership.getVirAttrs().clear();\n             }\n             // USER from customization, if empty or null ignore it, use it to filter attributes otherwise\n-            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n+            applyFromCustomization(userTO, SyncopeEnduserApplication.get().getCustomForm());\n \n-            if (customForm != null && !customForm.isEmpty()) {\n-                if (customForm.get(SchemaType.PLAIN.name()) != null) {\n-                    // filter PLAIN attributes\n-                    customizeAttrs(userTO.getPlainAttrs(), customForm.get(SchemaType.PLAIN.name()).getAttributes());\n-                }\n-                if (customForm.get(SchemaType.DERIVED.name()) != null) {\n-                    // filter DERIVED attributes\n-                    customizeAttrs(userTO.getDerAttrs(), customForm.get(SchemaType.DERIVED.name()).getAttributes());\n-                }\n-                if (customForm.get(SchemaType.VIRTUAL.name()) != null) {\n-                    // filter VIRTUAL attributes\n-                    customizeAttrs(userTO.getVirAttrs(), customForm.get(SchemaType.VIRTUAL.name()).getAttributes());\n-                }\n+            // 1.1 Date -> millis conversion for PLAIN attributes of USER\n+            for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                dateToMillis(userTO.getPlainAttrs(), plainSchema);\n             }\n             final String selfTOJson = MAPPER.writeValueAsString(userTO);\n             response.setContentType(MediaType.APPLICATION_JSON);\n@@ -134,15 +118,15 @@ public void writeData(final Attributes attributes) throws IOException {\n         return response;\n     }\n \n-    private void customizeAttrs(final Set<AttrTO> attrs,\n-            final Map<String, CustomAttribute> customForm) {\n-\n-        CollectionUtils.filter(attrs, new Predicate<AttrTO>() {\n-\n-            @Override\n-            public boolean evaluate(final AttrTO attr) {\n-                return customForm.containsKey(attr.getSchema());\n-            }\n-        });\n+    private void applyFromCustomization(final UserTO userTO, final Map<String, CustomAttributesInfo> customForm) {\n+        if (customForm != null && !customForm.isEmpty()) {\n+            // filter PLAIN attributes\n+            customizeAttrTOs(userTO.getPlainAttrs(), customForm.get(SchemaType.PLAIN.name()));\n+            // filter DERIVED attributes\n+            customizeAttrTOs(userTO.getDerAttrs(), customForm.get(SchemaType.DERIVED.name()));\n+            // filter VIRTUAL attributes\n+            customizeAttrTOs(userTO.getVirAttrs(), customForm.get(SchemaType.VIRTUAL.name()));\n+        }\n     }\n+\n }"},{"sha":"c72c62ca830b89189719cd71f7a8c9fa838842c2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":25,"deletions":6,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.enduser.resources;\n \n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n@@ -30,13 +31,15 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.util.UserRequestValidator;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n@@ -66,9 +69,10 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             }\n \n             UserTO userTO = MAPPER.readValue(request.getReader().readLine(), UserTO.class);\n+            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n \n             // check if request is compliant with customization form rules\n-            if (UserRequestValidator.compliant(userTO, SyncopeEnduserApplication.get().getCustomForm(), false)) {\n+            if (UserRequestValidator.compliant(userTO, customForm, false)) {\n                 // 1. membership attributes management\n                 Set<AttrTO> membAttrs = new HashSet<>();\n                 for (AttrTO attr : userTO.getPlainAttrs()) {\n@@ -97,9 +101,9 @@ public boolean evaluate(final MembershipTO item) {\n \n                 // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n                 for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                    millisToDate(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()), plainSchema);\n+                    millisToDate(userTO.getPlainAttrs(), plainSchema);\n                     for (MembershipTO membership : userTO.getMemberships()) {\n-                        millisToDate(EntityTOUtils.buildAttrMap(membership.getPlainAttrs()), plainSchema);\n+                        millisToDate(membership.getPlainAttrs(), plainSchema);\n                     }\n                 }\n \n@@ -154,10 +158,13 @@ public boolean evaluate(final MembershipTO item) {\n                 }\n                 userTO.getVirAttrs().removeAll(membAttrs);\n \n+                UserPatch userPatch = AnyOperations.diff(userTO, SyncopeEnduserSession.get().getSelfTO(), false);\n+\n+                applyFormCustomization(userPatch, customForm);\n+\n                 // update user by patch\n                 Response res = SyncopeEnduserSession.get().\n-                        getService(userTO.getETagValue(), UserSelfService.class).update(AnyOperations.diff(userTO,\n-                        SyncopeEnduserSession.get().getSelfTO(), true));\n+                        getService(userTO.getETagValue(), UserSelfService.class).update(userPatch);\n \n                 buildResponse(response, res.getStatus(), res.getStatusInfo().getFamily().equals(\n                         Response.Status.Family.SUCCESSFUL)\n@@ -182,4 +189,16 @@ public boolean evaluate(final MembershipTO item) {\n         return response;\n     }\n \n+    private void applyFormCustomization(final UserPatch userPatch, final Map<String, CustomAttributesInfo> customForm) {\n+        final CustomAttributesInfo customPlainAttrsInfo = customForm.get(SchemaType.PLAIN.name());\n+        final CustomAttributesInfo customVirtualAttrsInfo = customForm.get(SchemaType.VIRTUAL.name());\n+        // clean patch to avoid unwanted deletions of hidden schemas (custom form)\n+        if (customPlainAttrsInfo != null) {\n+            customizeAttrPatches(userPatch.getPlainAttrs(), customPlainAttrsInfo);\n+        }\n+        if (customVirtualAttrsInfo != null) {\n+            customizeAttrTOs(userPatch.getVirAttrs(), customPlainAttrsInfo);\n+        }\n+    }\n+\n }"},{"sha":"b5253af36159836345d9ccec9c8d28206e688e38","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -40,7 +40,7 @@ private UserRequestValidator() {\n     public static boolean compliant(final UserTO userTO, final Map<String, CustomAttributesInfo> customForm,\n             final boolean checkDefaultValues) {\n \n-        if (customForm.isEmpty()) {\n+        if (customForm == null || customForm.isEmpty()) {\n             return true;\n         }\n \n@@ -55,26 +55,28 @@ && validateAttributes(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()),\n     private static boolean validateAttributes(final Map<String, AttrTO> attrMap,\n             final CustomAttributesInfo customAttrInfo, final boolean checkDefaultValues) {\n \n-        return IterableUtils.matchesAll(attrMap.entrySet(), new Predicate<Map.Entry<String, AttrTO>>() {\n+        return customAttrInfo == null\n+                || (customAttrInfo.getAttributes().isEmpty() && customAttrInfo.getShow())\n+                || IterableUtils.matchesAll(attrMap.entrySet(), new Predicate<Map.Entry<String, AttrTO>>() {\n \n-            @Override\n-            public boolean evaluate(final Map.Entry<String, AttrTO> entry) {\n-                String schemaKey = entry.getKey();\n-                AttrTO attrTO = entry.getValue();\n-                CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);\n-                boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));\n-                if (!compliant) {\n-                    LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",\n-                            attrTO.getSchema(), attrTO.getValues());\n-                }\n-                return compliant;\n-            }\n-        });\n+                    @Override\n+                    public boolean evaluate(final Map.Entry<String, AttrTO> entry) {\n+                        String schemaKey = entry.getKey();\n+                        AttrTO attrTO = entry.getValue();\n+                        CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);\n+                        boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));\n+                        if (!compliant) {\n+                            LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",\n+                                    attrTO.getSchema(), attrTO.getValues());\n+                        }\n+                        return compliant;\n+                    }\n+                });\n \n     }\n \n     private static boolean isValid(final AttrTO attrTO, final CustomAttribute customAttribute) {\n-        return customAttribute.getReadonly()\n+        return customAttribute.isReadonly()\n                 ? IterableUtils.matchesAll(attrTO.getValues(), new Predicate<String>() {\n \n                     @Override"},{"sha":"5cf6532902d3ffd9f61e3e0d87ca86f8f0ca7409","filename":"fit/enduser-reference/src/test/resources/protractor-conf.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fprotractor-conf.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fprotractor-conf.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Fprotractor-conf.js?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -23,13 +23,13 @@ exports.config = {\n     'phantomjs.binary.path': '${phantomjs.binary}',\n     'phantomjs.ghostdriver.cli.args': ['--loglevel=DEBUG']\n   },\n-  \n+\n   allScriptsTimeout: 241000,\n-  \n+\n   jasmineNodeOpts: {\n     defaultTimeoutInterval: 2500000\n   },\n-  \n+\n   // Spec patterns are relative to the current working directly when protractor is called.\n   specs: ['tests/*.js'],\n   exclude: ['tests/abstract.js']"},{"sha":"b1f049f5b0893d63aae5e8ce19ff9b728dda7e6a","filename":"fit/enduser-reference/src/test/resources/tests/create.js","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11ab8cb9a824efa48d5c98613b174ec2633dfa29/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Ftests%2Fcreate.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11ab8cb9a824efa48d5c98613b174ec2633dfa29/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Ftests%2Fcreate.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2Ftests%2Fcreate.js?ref=11ab8cb9a824efa48d5c98613b174ec2633dfa29","patch":"@@ -52,10 +52,10 @@ describe('syncope enduser user create', function () {\n     //plainSchemas\n     abstract.waitSpinner();\n     browser.wait(element(by.name('fullname')).isPresent());\n-    element.all(by.name('fullname')).first().sendKeys('Gaetano Donizetti');\n-    element.all(by.name('userId')).first().sendKeys('donizetti@apache.org');\n-    element.all(by.name('firstname')).first().sendKeys('Gaetano');\n-    element.all(by.name('surname')).first().sendKeys('Donizetti');\n+    element.all(by.name('fullname')).first().clear().sendKeys('Gaetano Donizetti');\n+    element.all(by.name('userId')).first().clear().sendKeys('donizetti@apache.org');\n+    element.all(by.name('firstname')).first().clear().sendKeys('Gaetano');\n+    element.all(by.name('surname')).first().clear().sendKeys('Donizetti');\n     element.all(by.id('next')).first().click();\n \n     //derivedSchemas,virtualSchemas,resources"}]}