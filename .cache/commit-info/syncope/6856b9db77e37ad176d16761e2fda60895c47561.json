{"sha":"6856b9db77e37ad176d16761e2fda60895c47561","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY4NTZiOWRiNzdlMzdhZDE3NmQxNjc2MWUyZmRhNjA4OTVjNDc1NjE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-15T13:51:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-15T13:51:38Z"},"message":"[SYNCOPE-1311] Feature provided","tree":{"sha":"33ff95386409be3cc1cc04d3f7863733b353a781","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/33ff95386409be3cc1cc04d3f7863733b353a781"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6856b9db77e37ad176d16761e2fda60895c47561","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6856b9db77e37ad176d16761e2fda60895c47561","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6856b9db77e37ad176d16761e2fda60895c47561","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6856b9db77e37ad176d16761e2fda60895c47561/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1"}],"stats":{"total":638,"additions":215,"deletions":423},"files":[{"sha":"02cc13d04fbc13b347da50dec5db37158e6bc8f9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -21,15 +21,22 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -40,6 +47,12 @@ public class ProvisionAuxClassesPanel extends Panel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ProvisionAuxClassesPanel.class);\n \n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n+    private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n+\n+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n     private final ProvisionTO provision;\n \n     public ProvisionAuxClassesPanel(final String id, final ProvisionTO provision) {\n@@ -53,6 +66,7 @@ public ProvisionAuxClassesPanel(final String id, final ProvisionTO provision) {\n     protected void onBeforeRender() {\n         super.onBeforeRender();\n \n+        AnyTypeTO anyType = null;\n         IModel<List<String>> model;\n         List<String> choices;\n         if (provision == null) {\n@@ -62,25 +76,41 @@ protected void onBeforeRender() {\n             model = new PropertyModel<>(provision, \"auxClasses\");\n             choices = new ArrayList<>();\n \n-            AnyTypeTO anyType = null;\n             try {\n-                anyType = new AnyTypeRestClient().read(provision.getAnyType());\n+                anyType = anyTypeRestClient.read(provision.getAnyType());\n             } catch (Exception e) {\n                 LOG.error(\"Could not read AnyType {}\", provision.getAnyType(), e);\n             }\n             if (anyType != null) {\n-                for (AnyTypeClassTO aux : new AnyTypeClassRestClient().list()) {\n+                for (AnyTypeClassTO aux : anyTypeClassRestClient.list()) {\n                     if (!anyType.getClasses().contains(aux.getKey())) {\n                         choices.add(aux.getKey());\n                     }\n                 }\n             }\n         }\n+\n         addOrReplace(\n                 new AjaxPalettePanel.Builder<String>().build(\"auxClasses\", model, new ListModel<>(choices)).\n                         hideLabel().\n                         setOutputMarkupId(true).\n                         setEnabled(provision != null));\n+\n+        AjaxTextFieldPanel uidOnCreate = new AjaxTextFieldPanel(\n+                \"uidOnCreate\", new ResourceModel(\"uidOnCreate\", \"uidOnCreate\").getObject(),\n+                new PropertyModel<>(provision, \"uidOnCreate\"));\n+        uidOnCreate.setChoices(getSchemas(anyType, model.getObject()));\n+        uidOnCreate.setOutputMarkupId(true).\n+                setEnabled(provision != null);\n+        addOrReplace(uidOnCreate);\n     }\n \n+    private List<String> getSchemas(final AnyTypeTO anyType, final List<String> anyTypeClasses) {\n+        List<String> classes = new ArrayList<>(anyType.getClasses());\n+        classes.addAll(anyTypeClasses);\n+\n+        return schemaRestClient.<PlainSchemaTO>getSchemas(\n+                SchemaType.PLAIN, null, classes.toArray(new String[] {})).\n+                stream().map(EntityTO::getKey).collect(Collectors.toList());\n+    }\n }"},{"sha":"eb08038f71183a7a3bd6cbeccbac68970fadfe4d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.html","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.html?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -19,5 +19,7 @@\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <span wicket:id=\"auxClasses\"/>\n+    <hr/>\n+    <span wicket:id=\"uidOnCreate\"/>\n   </wicket:panel>\n </html>"},{"sha":"906dd10d459a39266f25c38c6b7020f808463248","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder$AuxClasses.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses.properties?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -17,4 +17,4 @@\n \n auxClasses.title=Auxiliary Classes\n auxClasses.summary=\n-\n+uidOnCreate=Schema to hold values for identifiers generated upon Create by the external Identity Store"},{"sha":"bfffdbe8a9a9b3fc2ec023b48e050486d987f7bb","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder$AuxClasses_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_it.properties?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -17,3 +17,4 @@\n \n auxClasses.title=Classi Ausiliarie\n auxClasses.summary=\n+uidOnCreate=Schema to hold values for identifiers generated upon Create by the external Identity Store"},{"sha":"0e7dc6643142054cc2bc961fa1b3938783009aea","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder$AuxClasses_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_ja.properties?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -18,3 +18,4 @@\n auxClasses.title=\\u88dc\\u52a9\\u30af\\u30e9\\u30b9\n auxClasses.summary=\n \n+uidOnCreate=Schema to hold values for identifiers generated upon Create by the external Identity Store"},{"sha":"46774e403963950daef2a3c7efdff299b4cde659","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder$AuxClasses_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder%24AuxClasses_pt_BR.properties?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -18,3 +18,4 @@\n auxClasses.title=Classes Auxiliares\n auxClasses.summary=\n \n+uidOnCreate=Schema to hold values for identifiers generated upon Create by the external Identity Store"},{"sha":"12206c1bb67ffe08e9ae648c0860f894b0e10abf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -45,6 +45,8 @@ public class ProvisionTO extends AbstractBaseBean implements EntityTO {\n \n     private boolean ignoreCaseMatch;\n \n+    private String uidOnCreate;\n+\n     private MappingTO mapping;\n \n     private final List<String> virSchemas = new ArrayList<>();\n@@ -98,6 +100,14 @@ public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n         this.ignoreCaseMatch = ignoreCaseMatch;\n     }\n \n+    public String getUidOnCreate() {\n+        return uidOnCreate;\n+    }\n+\n+    public void setUidOnCreate(final String uidOnCreate) {\n+        this.uidOnCreate = uidOnCreate;\n+    }\n+\n     public MappingTO getMapping() {\n         return mapping;\n     }"},{"sha":"8544cd446605c326fdfa2b66981ebcd5440fdb42","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -21,7 +21,6 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n@@ -53,5 +52,5 @@ public interface AnyUtils {\n \n     Set<ExternalResource> getAllResources(Any<?> any);\n \n-    <S extends Schema> AllowedSchemas<S> getAllowedSchemas(Any<?> any, Class<S> reference);\n+    void addAttr(String key, PlainSchema schema, String value);\n }"},{"sha":"c817306c4ab55fedfe8b5c84a886952810fe3972","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -95,6 +95,8 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     boolean add(Provision provision);\n \n+    Optional<? extends Provision> getProvision(String anyType);\n+\n     Optional<? extends Provision> getProvision(AnyType anyType);\n \n     Optional<? extends Provision> getProvision(ObjectClass objectClass);"},{"sha":"5dde2015f821d35152ee80ec0cc07103d9384ab9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Provision.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FProvision.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n@@ -53,6 +54,10 @@ public interface Provision extends Entity {\n \n     void setIgnoreCaseMatch(boolean ignoreCaseMatch);\n \n+    PlainSchema getUidOnCreate();\n+\n+    void setUidOnCreate(PlainSchema uidOnCreate);\n+\n     Mapping getMapping();\n \n     void setMapping(Mapping mapping);"},{"sha":"efcd24ac77aaeed9f0bf79c40b8156534f2377d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -315,14 +315,16 @@ public void delete(final String name) {\n                 forEach(policy -> policy.getResources().remove(resource));\n \n         resource.getProvisions().stream().\n-                filter(provision -> provision.getMapping() != null).\n-                peek(provision -> provision.getMapping().getItems().forEach(item -> item.setMapping(null))).\n                 peek(provision -> {\n-                    provision.getMapping().getItems().clear();\n+                    provision.setUidOnCreate(null);\n+                    if (provision.getMapping() != null) {\n+                        provision.getMapping().getItems().forEach(item -> item.setMapping(null));\n+                        provision.getMapping().getItems().clear();\n+                    }\n                     provision.setMapping(null);\n                     provision.setResource(null);\n                 }).\n-                forEachOrdered(provision -> virSchemaDAO().findByProvision(provision).\n+                forEach(provision -> virSchemaDAO().findByProvision(provision).\n                 forEach(schema -> virSchemaDAO().delete(schema.getKey())));\n \n         externalResourceHistoryConfDAO().deleteByEntity(resource);"},{"sha":"cbc0e4ec41330114a7588029b9a334757785210f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":30,"deletions":15,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -41,7 +41,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -58,12 +58,16 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n public class JPAAnyUtils implements AnyUtils {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(AnyUtils.class);\n+\n     private static final Set<String> USER_FIELD_NAMES = new HashSet<>();\n \n     private static final Set<String> GROUP_FIELD_NAMES = new HashSet<>();\n@@ -79,7 +83,7 @@ public class JPAAnyUtils implements AnyUtils {\n     private static void initFieldNames(final Class<?> entityClass, final Set<String> keys) {\n         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n         classes.add(entityClass);\n-        for (Class<?> clazz : classes) {\n+        classes.forEach(clazz -> {\n             for (Field field : clazz.getDeclaredFields()) {\n                 if (!Modifier.isStatic(field.getModifiers())\n                         && !field.getName().startsWith(\"pc\")\n@@ -89,7 +93,7 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n                     keys.add(\"id\".equals(field.getName()) ? \"key\" : field.getName());\n                 }\n             }\n-        }\n+        });\n     }\n \n     public static boolean matchesFieldName(final String candidate) {\n@@ -377,19 +381,30 @@ public Set<ExternalResource> getAllResources(final Any<?> any) {\n         return resources;\n     }\n \n-    @Transactional(readOnly = true)\n+    @Transactional\n     @Override\n-    public <S extends Schema> AllowedSchemas<S> getAllowedSchemas(final Any<?> any, final Class<S> reference) {\n-        AllowedSchemas<S> result = null;\n-\n-        if (any instanceof User) {\n-            result = userDAO.findAllowedSchemas((User) any, reference);\n-        } else if (any instanceof Group) {\n-            result = groupDAO.findAllowedSchemas((Group) any, reference);\n-        } else if (any instanceof AnyObject) {\n-            result = anyObjectDAO.findAllowedSchemas((AnyObject) any, reference);\n+    public void addAttr(final String key, final PlainSchema schema, final String value) {\n+        Any any = dao().find(key);\n+        if (!dao().findAllowedSchemas(any, PlainSchema.class).forSelfContains(schema)) {\n+            LOG.warn(\"Schema {} not allowed for {}, ignoring\", schema, any);\n+            return;\n         }\n \n-        return result;\n+        PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n+        if (attr == null) {\n+            attr = newPlainAttr();\n+            attr.setSchema(schema);\n+            ((PlainAttr) attr).setOwner(any);\n+            any.add(attr);\n+\n+            try {\n+                attr.add(value, this);\n+                dao().save(any);\n+            } catch (InvalidPlainAttrValueException e) {\n+                LOG.error(\"Invalid value for attribute {} and {}: {}\", schema.getKey(), any, value, e);\n+            }\n+        } else {\n+            LOG.debug(\"{} has already {} set: {}\", any, schema.getKey(), attr.getValuesAsStrings());\n+        }\n     }\n }"},{"sha":"6335bcfd7c4dac058b0fcc971271212d13f98305","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -210,13 +210,21 @@ public boolean add(final Provision provision) {\n     }\n \n     @Override\n-    public Optional<? extends Provision> getProvision(final ObjectClass objectClass) {\n-        return getProvisions().stream().filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n+    public Optional<? extends Provision> getProvision(final String anyType) {\n+        return getProvisions().stream().\n+                filter(provision -> provision.getAnyType().getKey().equals(anyType)).findFirst();\n     }\n \n     @Override\n     public Optional<? extends Provision> getProvision(final AnyType anyType) {\n-        return getProvisions().stream().filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n+        return getProvisions().stream().\n+                filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n+    }\n+\n+    @Override\n+    public Optional<? extends Provision> getProvision(final ObjectClass objectClass) {\n+        return getProvisions().stream().\n+                filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n     }\n \n     @Override"},{"sha":"e5fc9352aee0271f78e77e645b2e3e26c4b0c4bf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -38,12 +38,14 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n@@ -80,6 +82,9 @@ public class JPAProvision extends AbstractGeneratedKeyEntity implements Provisio\n     @Max(1)\n     private Integer ignoreCaseMatch;\n \n+    @ManyToOne\n+    private JPAPlainSchema uidOnCreate;\n+\n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"provision\")\n     private JPAMapping mapping;\n \n@@ -155,6 +160,17 @@ public void setIgnoreCaseMatch(final boolean ignoreCaseMatch) {\n         this.ignoreCaseMatch = getBooleanAsInteger(ignoreCaseMatch);\n     }\n \n+    @Override\n+    public PlainSchema getUidOnCreate() {\n+        return uidOnCreate;\n+    }\n+\n+    @Override\n+    public void setUidOnCreate(final PlainSchema uidOnCreate) {\n+        checkType(uidOnCreate, JPAPlainSchema.class);\n+        this.uidOnCreate = (JPAPlainSchema) uidOnCreate;\n+    }\n+\n     @Override\n     public Mapping getMapping() {\n         return mapping;"},{"sha":"fba66747461c3b65442ab1eca82fa805bf73893f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -58,7 +58,7 @@ public boolean isValid(final Any any, final ConstraintValidatorContext context)\n \n         if (!(any instanceof Conf)) {\n             AllowedSchemas<PlainSchema> allowedPlainSchemas = new JPAAnyUtilsFactory().\n-                    getInstance(any.getType().getKind()).getAllowedSchemas(any, PlainSchema.class);\n+                    getInstance(any.getType().getKind()).dao().findAllowedSchemas(any, PlainSchema.class);\n \n             for (PlainAttr<?> attr : ((Any<?>) any).getPlainAttrs()) {\n                 if (attr != null && !allowedPlainSchemas.forSelfContains(attr.getSchema().getKey())) {"},{"sha":"16733722a0f94177eb242242709703b0bd1ac95b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -62,8 +62,8 @@ private Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema>\n \n     @Override\n     public String getValue(final Any<?> any, final DerSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).\n-                getAllowedSchemas(any, DerSchema.class).forSelfContains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).dao().\n+                findAllowedSchemas(any, DerSchema.class).forSelfContains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return null;\n@@ -74,8 +74,8 @@ public String getValue(final Any<?> any, final DerSchema schema) {\n \n     @Override\n     public String getValue(final Any<?> any, final Membership<?> membership, final DerSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).\n-                getAllowedSchemas(any, DerSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).dao().\n+                findAllowedSchemas(any, DerSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return null;\n@@ -88,7 +88,7 @@ public String getValue(final Any<?> any, final Membership<?> membership, final D\n     public Map<DerSchema, String> getValues(final Any<?> any) {\n         return getValues(\n                 any,\n-                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).getForSelf());\n+                anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, DerSchema.class).getForSelf());\n     }\n \n     private Map<DerSchema, String> getValues(\n@@ -114,7 +114,7 @@ public Map<DerSchema, String> getValues(\n         return getValues(\n                 any,\n                 membership,\n-                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).\n+                anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, DerSchema.class).\n                         getForMembership(membership.getRightEnd()));\n     }\n "},{"sha":"37f9364fc6165ee62664c46b0e85e66bc29273b5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -148,8 +148,8 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n \n     @Override\n     public List<String> getValues(final Any<?> any, final VirSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).\n-                getAllowedSchemas(any, VirSchema.class).forSelfContains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).dao().\n+                findAllowedSchemas(any, VirSchema.class).forSelfContains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return Collections.emptyList();\n@@ -161,8 +161,8 @@ public List<String> getValues(final Any<?> any, final VirSchema schema) {\n \n     @Override\n     public List<String> getValues(final Any<?> any, final Membership<?> membership, final VirSchema schema) {\n-        if (!anyUtilsFactory.getInstance(any).\n-                getAllowedSchemas(any, VirSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n+        if (!anyUtilsFactory.getInstance(any).dao().\n+                findAllowedSchemas(any, VirSchema.class).getForMembership(membership.getRightEnd()).contains(schema)) {\n \n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return Collections.emptyList();\n@@ -176,14 +176,14 @@ public List<String> getValues(final Any<?> any, final Membership<?> membership,\n     public Map<VirSchema, List<String>> getValues(final Any<?> any) {\n         return getValues(\n                 any,\n-                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).getForSelf());\n+                anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, VirSchema.class).getForSelf());\n     }\n \n     @Override\n     public Map<VirSchema, List<String>> getValues(final Any<?> any, final Membership<?> membership) {\n         return getValues(\n                 any,\n-                anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).\n+                anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, VirSchema.class).\n                         getForMembership(membership.getRightEnd()));\n     }\n "},{"sha":"2ced4720401feb849124bd2cd946843ca8cf5350","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -261,7 +261,7 @@ private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils a\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n-        AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.getAllowedSchemas(any, PlainSchema.class);\n+        AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.dao().findAllowedSchemas(any, PlainSchema.class);\n         allowedPlainSchemas.getForSelf().forEach(schema -> {\n             checkMandatory(schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing);\n         });"},{"sha":"fedc28886dae9f9ec4da4d85a5ae7d05779b3702","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -25,6 +25,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -55,11 +56,13 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n@@ -108,6 +111,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -199,6 +205,15 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n                 provision.setIgnoreCaseMatch(provisionTO.isIgnoreCaseMatch());\n \n+                if (StringUtils.isNotBlank(provisionTO.getUidOnCreate())) {\n+                    PlainSchema uidOnCreate = plainSchemaDAO.find(provisionTO.getUidOnCreate());\n+                    if (uidOnCreate == null) {\n+                        LOG.warn(\"Ignoring invalid schema for uidOnCreate(): {}\", provisionTO.getUidOnCreate());\n+                    } else {\n+                        provision.setUidOnCreate(uidOnCreate);\n+                    }\n+                }\n+\n                 if (provisionTO.getMapping() == null) {\n                     provision.setMapping(null);\n                 } else {\n@@ -599,6 +614,9 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                     map(cls -> cls.getKey()).collect(Collectors.toList()));\n             provisionTO.setSyncToken(provision.getSerializedSyncToken());\n             provisionTO.setIgnoreCaseMatch(provision.isIgnoreCaseMatch());\n+            if (provision.getUidOnCreate() != null) {\n+                provisionTO.setUidOnCreate(provision.getUidOnCreate().getKey());\n+            }\n \n             if (provision.getMapping() != null) {\n                 MappingTO mappingTO = new MappingTO();"},{"sha":"b55eaccbd06950c772d2186b82c6aea9ee3faa3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -103,22 +104,22 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     protected ConnObjectUtils connObjectUtils;\n \n     /**\n-     * Any object DAO.\n+     * User DAO.\n      */\n     @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected UserDAO userDAO;\n \n     /**\n-     * User DAO.\n+     * Group DAO.\n      */\n     @Autowired\n-    protected UserDAO userDAO;\n+    protected GroupDAO groupDAO;\n \n     /**\n-     * User DAO.\n+     * Any object DAO.\n      */\n     @Autowired\n-    protected GroupDAO groupDAO;\n+    protected AnyObjectDAO anyObjectDAO;\n \n     /**\n      * Task DAO.\n@@ -150,6 +151,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected TaskDataBinder taskDataBinder;\n \n+    @Autowired\n+    protected AnyUtilsFactory anyUtilsFactory;\n+\n     @Autowired\n     protected TaskUtilsFactory taskUtilsFactory;\n \n@@ -178,6 +182,7 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n         return result;\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected Uid createOrUpdate(\n             final PropagationTask task,\n             final ConnectorObject beforeObj,\n@@ -213,6 +218,13 @@ protected Uid createOrUpdate(\n             LOG.debug(\"Create {} on {}\", attributes, task.getResource().getKey());\n             result = connector.create(\n                     new ObjectClass(task.getObjectClassName()), attributes, null, propagationAttempted);\n+\n+            task.getResource().getProvision(task.getAnyType()).ifPresent(provision -> {\n+                if (provision.getUidOnCreate() != null) {\n+                    anyUtilsFactory.getInstance(task.getAnyTypeKind()).\n+                            addAttr(task.getEntityKey(), provision.getUidOnCreate(), result.getUidValue());\n+                }\n+            });\n         } else {\n             // 1. check if rename is really required\n             Name newName = AttributeUtil.getNameFromAttributes(attributes);"},{"sha":"5d24eba36bfdc2fe60f587d7cc464084fc549c86","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AzurePropagationActions.java","status":"modified","additions":16,"deletions":147,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -20,71 +20,29 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * This class is required during setup of an External Resource based on the ConnId\n  * <a href=\"https://github.com/Tirasa/ConnIdAzureBundle\">Azure connector</a>.\n  *\n- * It manages:\n- * <ol>\n- * <li>the User id provided by Azure, which will need to be used for all subsequent operations</li>\n- * <li>the Group id provided by Azure, which will need to be used for all subsequent operations</li>\n- * </ol>\n+ * It ensures to send the configured e-mail address as <pre>__NAME__</pre>.\n  */\n public class AzurePropagationActions implements PropagationActions {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AzurePropagationActions.class);\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private static final String USER_MAIL_NICKNAME = \"mailNickname\";\n-\n-    private static final String GROUP_MAIL_NICKNAME = \"mailNickname\";\n-\n-    protected String getAzureIdSchema() {\n-        return \"AzureUserId\";\n-    }\n-\n-    protected String getAzureGroupIdSchema() {\n-        return \"AzureGroupId\";\n+    protected String getEmailAttrName() {\n+        return \"mailNickname\";\n     }\n \n     @Transactional\n@@ -96,121 +54,32 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n         switch (task.getAnyTypeKind()) {\n             case USER:\n-                setName(task, USER_MAIL_NICKNAME);\n+                setName(task);\n                 break;\n+\n             case GROUP:\n-                setName(task, GROUP_MAIL_NICKNAME);\n-                break;\n-            default:\n-                LOG.debug(\"Not about user, or group, not doing anything\");\n+                setName(task);\n                 break;\n-        }\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(final PropagationTask task, final TaskExec execution, final ConnectorObject afterObj) {\n-        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n-            return;\n-        }\n-\n-        if (AnyTypeKind.USER.equals(task.getAnyTypeKind())) {\n-\n-            User user = userDAO.find(task.getEntityKey());\n-            if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n-            } else {\n-                boolean modified = false;\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                // Azure User ID\n-                PlainSchema azureId = plainSchemaDAO.find(getAzureIdSchema());\n-                if (azureId == null) {\n-                    LOG.error(\"Could not find schema {}, skipping\", getAzureIdSchema());\n-                } else {\n-                    // set back the __UID__ received by Azure\n-                    UPlainAttr attr = user.getPlainAttr(getAzureIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(UPlainAttr.class);\n-                        attr.setSchema(azureId);\n-                        attr.setOwner(user);\n-                        user.add(attr);\n \n-                        try {\n-                            attr.add(afterObj.getUid().getUidValue(), anyUtils);\n-                            modified = true;\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    azureId.getKey(), afterObj.getUid().getUidValue(), e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"User {} has already {} assigned: {}\",\n-                                user, azureId.getKey(), attr.getValuesAsStrings());\n-                    }\n-                }\n-\n-                if (modified) {\n-                    userDAO.save(user);\n-                }\n-            }\n-        } else if (AnyTypeKind.GROUP.equals(task.getAnyTypeKind())) {\n-\n-            Group group = groupDAO.find(task.getEntityKey());\n-            if (group == null) {\n-                LOG.error(\"Could not find group {}, skipping\", task.getEntityKey());\n-            } else {\n-                boolean modified = false;\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(group);\n-\n-                // Azure Group ID\n-                PlainSchema azureId = plainSchemaDAO.find(getAzureGroupIdSchema());\n-                if (azureId == null) {\n-                    LOG.error(\"Could not find schema {}, skipping\", getAzureGroupIdSchema());\n-                } else {\n-                    // set back the __UID__ received by Azure\n-                    GPlainAttr attr = group.getPlainAttr(getAzureGroupIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(GPlainAttr.class);\n-                        attr.setSchema(azureId);\n-                        attr.setOwner(group);\n-                        group.add(attr);\n-\n-                        try {\n-                            attr.add(afterObj.getUid().getUidValue(), anyUtils);\n-                            modified = true;\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    azureId.getKey(), afterObj.getUid().getUidValue(), e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"Group {} has already {} assigned: {}\",\n-                                group, azureId.getKey(), attr.getValuesAsStrings());\n-                    }\n-                }\n-\n-                if (modified) {\n-                    groupDAO.save(group);\n-                }\n-            }\n+            default:\n+                LOG.debug(\"Not about user or group: not doing anything\");\n         }\n     }\n \n-    private void setName(final PropagationTask task, final String attributeName) {\n-        Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n+    private void setName(final PropagationTask task) {\n+        Set<Attribute> attrs = new HashSet<>(task.getAttributes());\n \n-        if (AttributeUtil.find(attributeName, attributes) == null) {\n-            LOG.warn(\"Can't find {} attribute to set as __NAME__ attribute value, skipping...\", attributeName);\n+        if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n+            LOG.warn(\"Can't find {} attribute to set as __NAME__ attribute value, skipping...\", getEmailAttrName());\n             return;\n         }\n \n-        Name name = AttributeUtil.getNameFromAttributes(attributes);\n+        Name name = AttributeUtil.getNameFromAttributes(attrs);\n         if (name != null) {\n-            attributes.remove(name);\n+            attrs.remove(name);\n         }\n-        attributes.add(\n-                new Name(AttributeUtil.find(attributeName, attributes).getValue().get(0).toString()));\n+        attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n \n-        task.setAttributes(attributes);\n+        task.setAttributes(attrs);\n     }\n-\n }"},{"sha":"c4ea9a4397625491865cfd2ba8fca503d1665329","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java","status":"modified","additions":11,"deletions":96,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -22,63 +22,28 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * This class is required during setup of an External Resource based on the ConnId\n  * <a href=\"https://github.com/Tirasa/ConnIdGoogleAppsBundle\">GoogleApps connector</a>.\n  *\n- * It manages:\n- * <ol>\n- * <li>the id provided by Google, which will need to be used for all subsequent operations</li>\n- * <li>the e-mail address</li>\n- * </ol>\n+ * It ensures to send the configured e-mail address as <pre>__NAME__</pre>.\n  */\n public class GoogleAppsPropagationActions implements PropagationActions {\n \n     private static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPropagationActions.class);\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    protected PlainAttrValueDAO plainAttrValueDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    protected String getEmailSchema() {\n-        return \"email\";\n-    }\n-\n-    protected String getGoogleAppsIdSchema() {\n-        return \"GoogleAppsId\";\n+    protected String getEmailAttrName() {\n+        return \"emails\";\n     }\n \n     @Transactional\n@@ -93,67 +58,17 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n         Set<Attribute> attrs = new HashSet<>(task.getAttributes());\n \n-        // ensure to set __NAME__ value to user's email (e.g. primary e-mail address)\n-        User user = userDAO.find(task.getEntityKey());\n-        if (user == null) {\n-            LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n-        } else {\n-            Name name = AttributeUtil.getNameFromAttributes(attrs);\n-            if (name != null) {\n-                attrs.remove(name);\n-            }\n-            attrs.add(new Name(user.getPlainAttr(getEmailSchema()).get().getValuesAsStrings().get(0)));\n-        }\n-\n-        task.setAttributes(attrs);\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(final PropagationTask task, final TaskExec execution, final ConnectorObject afterObj) {\n-        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n-            return;\n-        }\n-        if (AnyTypeKind.USER != task.getAnyTypeKind()) {\n+        if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n+            LOG.warn(\"Can't find {} attribute to set as __NAME__ attribute value, skipping...\", getEmailAttrName());\n             return;\n         }\n \n-        User user = userDAO.find(task.getEntityKey());\n-        if (user == null) {\n-            LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n-        } else {\n-            boolean modified = false;\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-            PlainSchema googleAppsId = plainSchemaDAO.find(getGoogleAppsIdSchema());\n-            if (googleAppsId == null) {\n-                LOG.error(\"Could not find schema {}, skipping\", getGoogleAppsIdSchema());\n-            } else {\n-                // set back the __UID__ received by Google\n-                UPlainAttr attr = user.getPlainAttr(getGoogleAppsIdSchema()).orElse(null);\n-                if (attr == null) {\n-                    attr = entityFactory.newEntity(UPlainAttr.class);\n-                    attr.setSchema(googleAppsId);\n-                    attr.setOwner(user);\n-                    user.add(attr);\n-\n-                    try {\n-                        attr.add(afterObj.getUid().getUidValue(), anyUtils);\n-                        modified = true;\n-                    } catch (InvalidPlainAttrValueException e) {\n-                        LOG.error(\"Invalid value for attribute {}: {}\",\n-                                googleAppsId.getKey(), afterObj.getUid().getUidValue(), e);\n-                    }\n-                } else {\n-                    LOG.debug(\"User {} has already {} assigned: {}\",\n-                            user, googleAppsId.getKey(), attr.getValuesAsStrings());\n-                }\n-            }\n-\n-            if (modified) {\n-                userDAO.save(user);\n-            }\n+        Name name = AttributeUtil.getNameFromAttributes(attrs);\n+        if (name != null) {\n+            attrs.remove(name);\n         }\n-    }\n+        attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n \n+        task.setAttributes(attrs);\n+    }\n }"},{"sha":"7f4e06ca8a2051a692b42502c4ba28a547ca3c78","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -340,7 +340,8 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n                     LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n                 } else if (schema.isReadonly()) {\n                     LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n-                } else if (anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)\n+                } else if (anyUtilsFactory.getInstance(any).dao().\n+                        findAllowedSchemas(any, VirSchema.class).contains(schema)\n                         && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n \n                     Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());"},{"sha":"3aee4aaf2d3bde33ec71180b9a30796149457693","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/SCIMv11PropagationActions.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FSCIMv11PropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FSCIMv11PropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FSCIMv11PropagationActions.java?ref=5af1a9ce6cd8e4c0dcf338c9bf0f56568ea537c1","patch":"@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.propagation;\n-\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * This class is required during setup of an External Resource based on the ConnId\n- * <a href=\"https://github.com/Tirasa/ConnIdSCIMv11Bundle\">SCIM connector</a>.\n- *\n- * It manages:\n- * <ol>\n- * <li>the User id provided by SCIM, which will need to be used for all subsequent operations</li>\n- * </ol>\n- */\n-public class SCIMv11PropagationActions implements PropagationActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SCIMv11PropagationActions.class);\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    protected String getSCIMIdSchema() {\n-        return \"SCIMUserId\";\n-    }\n-\n-    @Transactional\n-    @Override\n-    public void after(final PropagationTask task, final TaskExec execution, final ConnectorObject afterObj) {\n-        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n-            return;\n-        }\n-\n-        if (AnyTypeKind.USER.equals(task.getAnyTypeKind())) {\n-\n-            User user = userDAO.find(task.getEntityKey());\n-            if (user == null) {\n-                LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n-            } else {\n-                boolean modified = false;\n-                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n-\n-                // SCIM v1.1 User ID\n-                PlainSchema userId = plainSchemaDAO.find(getSCIMIdSchema());\n-                if (userId == null) {\n-                    LOG.error(\"Could not find schema {}, skipping\", getSCIMIdSchema());\n-                } else {\n-                    // set back the __UID__ received by SCIM service\n-                    UPlainAttr attr = user.getPlainAttr(getSCIMIdSchema()).orElse(null);\n-                    if (attr == null) {\n-                        attr = entityFactory.newEntity(UPlainAttr.class);\n-                        attr.setSchema(userId);\n-                        attr.setOwner(user);\n-                        user.add(attr);\n-\n-                        try {\n-                            attr.add(afterObj.getUid().getUidValue(), anyUtils);\n-                            modified = true;\n-                        } catch (InvalidPlainAttrValueException e) {\n-                            LOG.error(\"Invalid value for attribute {}: {}\",\n-                                    userId.getKey(), afterObj.getUid().getUidValue(), e);\n-                        }\n-                    } else {\n-                        LOG.debug(\"User {} has already {} assigned: {}\",\n-                                user, userId.getKey(), attr.getValuesAsStrings());\n-                    }\n-                }\n-\n-                if (modified) {\n-                    userDAO.save(user);\n-                }\n-            }\n-        }\n-    }\n-\n-}"},{"sha":"c931e1d740e8397a27323dfc034d9167c13a4407","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -821,13 +821,16 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n \n             if (SyncDeltaType.CREATE_OR_UPDATE == processed.getDeltaType()) {\n                 if (anyKeys.isEmpty()) {\n+                    List<ProvisioningReport> forUidOnCreate = null;\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n-                            profile.getResults().addAll(assign(processed, provision, anyUtils));\n+                            forUidOnCreate = assign(processed, provision, anyUtils);\n+                            profile.getResults().addAll(forUidOnCreate);\n                             break;\n \n                         case PROVISION:\n-                            profile.getResults().addAll(provision(processed, provision, anyUtils));\n+                            forUidOnCreate = provision(processed, provision, anyUtils);\n+                            profile.getResults().addAll(forUidOnCreate);\n                             break;\n \n                         case IGNORE:\n@@ -837,6 +840,12 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         default:\n                         // do nothing\n                     }\n+\n+                    if (forUidOnCreate != null && provision.getUidOnCreate() != null) {\n+                        forUidOnCreate.forEach(report -> {\n+                            anyUtils.addAttr(report.getKey(), provision.getUidOnCreate(), delta.getUid().getUidValue());\n+                        });\n+                    }\n                 } else {\n                     // update VirAttrCache\n                     for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {"},{"sha":"446997e68b986af67e5e505cd15e4de85b5e97ce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -72,10 +72,6 @@ public class GoogleAppsPullActions implements PullActions {\n \n     private final Map<String, String> googleAppsIds = new HashMap<>();\n \n-    protected String getEmailSchema() {\n-        return \"email\";\n-    }\n-\n     protected String getGoogleAppsIdSchema() {\n         return \"GoogleAppsId\";\n     }"},{"sha":"352692e99a75296c063cda20245b0265c3373b66","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -70,7 +70,6 @@\n import org.apache.syncope.core.provisioning.java.propagation.GoogleAppsPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n-import org.apache.syncope.core.provisioning.java.propagation.SCIMv11PropagationActions;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n@@ -184,7 +183,6 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(LDAPPasswordPropagationActions.class.getName());\n             classNames.add(DBPasswordPropagationActions.class.getName());\n             classNames.add(AzurePropagationActions.class.getName());\n-            classNames.add(SCIMv11PropagationActions.class.getName());\n             classNames.add(GoogleAppsPropagationActions.class.getName());\n             put(ImplementationType.PROPAGATION_ACTIONS, classNames);\n "},{"sha":"8bc3e92380b0e2f83ca488dd73b3e6259dbcf49b","filename":"src/main/asciidoc/reference-guide/concepts/externalresources.adoc","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6856b9db77e37ad176d16761e2fda60895c47561/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6856b9db77e37ad176d16761e2fda60895c47561/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc?ref=6856b9db77e37ad176d16761e2fda60895c47561","patch":"@@ -153,16 +153,17 @@ complex statements to be expressed such as 'be mandatory only if this other attr\n \n Besides the items documented above, some more data needs to be specified for a complete mapping:\n \n-* ConnId `objectClass` - which\n+* which\n http://connid.tirasa.net/apidocs/1.4/org/identityconnectors/framework/common/objects/ObjectClass.html[object class^]\n shall be used during communication with the Identity Store; predefined are `\\\\__ACCOUNT__` for Users and \n `\\\\__GROUP__` for Groups\n * whether matches between user / group / any object's attribute values and their counterparts on the Identity Store\n should be performed in a case-sensitive fashion or not\n-* Object link - only required by some connector bundles as\n+* which schema shall be used to hold values for identifiers generated upon create by the Identity Store - required by\n+some cloud providers not accepting provided values as unique references\n+* the model for generating the DN (distinguished name) values - only required by some connector bundles as\n https://connid.atlassian.net/wiki/display/BASE/LDAP[LDAP^] and\n-https://connid.atlassian.net/wiki/pages/viewpage.action?pageId=360482[Active Directory^], generally specifies the model\n-for generating the DN (distinguished name) values\n+https://connid.atlassian.net/wiki/pages/viewpage.action?pageId=360482[Active Directory^]\n \n .Mapping items\n ===="}]}