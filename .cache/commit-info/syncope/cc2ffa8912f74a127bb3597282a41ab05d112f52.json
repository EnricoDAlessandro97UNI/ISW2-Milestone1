{"sha":"cc2ffa8912f74a127bb3597282a41ab05d112f52","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNjMmZmYTg5MTJmNzRhMTI3YmIzNTk3MjgyYTQxYWIwNWQxMTJmNTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-05T15:31:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-05T15:31:28Z"},"message":"Fixing null RMapping during resource REST operations\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/DEV_ROLE_PROVISIONING@1417481 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6737ce65c7a0b76a9ebe909e0ea7278834b2b96e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6737ce65c7a0b76a9ebe909e0ea7278834b2b96e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cc2ffa8912f74a127bb3597282a41ab05d112f52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc2ffa8912f74a127bb3597282a41ab05d112f52","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cc2ffa8912f74a127bb3597282a41ab05d112f52","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc2ffa8912f74a127bb3597282a41ab05d112f52/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6222891675d040904b808e2ae6153ef98e8be65e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6222891675d040904b808e2ae6153ef98e8be65e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6222891675d040904b808e2ae6153ef98e8be65e"}],"stats":{"total":363,"additions":232,"deletions":131},"files":[{"sha":"9f9779a2d80dc974e00fcd932bed5e096e7c209c","filename":"client/src/main/java/org/apache/syncope/client/to/ResourceTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -71,7 +71,7 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private String rsyncToken;\n \n-    private String actionsClassName;\n+    private String propagationActionsClassName;\n \n     public ResourceTO() {\n         super();\n@@ -230,11 +230,11 @@ public void setRsyncToken(final String syncToken) {\n         this.rsyncToken = syncToken;\n     }\n \n-    public String getActionsClassName() {\n-        return actionsClassName;\n+    public String getPropagationActionsClassName() {\n+        return propagationActionsClassName;\n     }\n \n-    public void setActionsClassName(final String actionsClassName) {\n-        this.actionsClassName = actionsClassName;\n+    public void setPropagationActionsClassName(final String propagationActionsClassName) {\n+        this.propagationActionsClassName = propagationActionsClassName;\n     }\n }"},{"sha":"df0d396e8fa135fca42cd3ddd06549ff25dd8e7d","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -153,7 +153,7 @@ public class ExternalResource extends AbstractBaseBean {\n     /**\n      * (Optional) class for PropagationAction.\n      */\n-    private String actionsClassName;\n+    private String propagationActionsClassName;\n \n     /**\n      * Default constructor.\n@@ -349,11 +349,11 @@ public void setRsyncToken(final SyncToken syncToken) {\n         rserializedSyncToken = XMLSerializer.serialize(syncToken);\n     }\n \n-    public String getActionsClassName() {\n-        return actionsClassName;\n+    public String getPropagationActionsClassName() {\n+        return propagationActionsClassName;\n     }\n \n-    public void setActionsClassName(final String actionsClassName) {\n-        this.actionsClassName = actionsClassName;\n+    public void setPropagationActionsClassName(final String propagationActionsClassName) {\n+        this.propagationActionsClassName = propagationActionsClassName;\n     }\n }"},{"sha":"0b9abd016428af1d6f7dfa000369d5f93486aadc","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ExternalResourceValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -92,14 +92,14 @@ private boolean isValid(final AbstractMapping mapping, final ConstraintValidator\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (StringUtils.isNotBlank(resource.getActionsClassName())) {\n+        if (StringUtils.isNotBlank(resource.getPropagationActionsClassName())) {\n             Class<?> actionsClass = null;\n             boolean isAssignable = false;\n             try {\n-                actionsClass = Class.forName(resource.getActionsClassName());\n+                actionsClass = Class.forName(resource.getPropagationActionsClassName());\n                 isAssignable = PropagationActions.class.isAssignableFrom(actionsClass);\n             } catch (Exception e) {\n-                LOG.error(\"Invalid PropagationActions specified: {}\", resource.getActionsClassName(), e);\n+                LOG.error(\"Invalid PropagationActions specified: {}\", resource.getPropagationActionsClassName(), e);\n             }\n \n             if (actionsClass == null || !isAssignable) {"},{"sha":"1998dc498ab6ece912a2dd889671fb6f171e2e75","filename":"core/src/main/java/org/apache/syncope/core/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -95,14 +95,14 @@ public TaskExec execute(final PropagationTask task) {\n     protected PropagationActions getPropagationActions(final ExternalResource resource) {\n         PropagationActions result = null;\n \n-        if (StringUtils.isNotBlank(resource.getActionsClassName())) {\n+        if (StringUtils.isNotBlank(resource.getPropagationActionsClassName())) {\n             try {\n-                Class<?> actionsClass = Class.forName(resource.getActionsClassName());\n+                Class<?> actionsClass = Class.forName(resource.getPropagationActionsClassName());\n                 result = (PropagationActions) ApplicationContextProvider.getBeanFactory().\n                         createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n             } catch (ClassNotFoundException e) {\n                 LOG.error(\"Invalid PropagationAction class name '{}' for resource {}\",\n-                        new Object[]{resource, resource.getActionsClassName(), e});\n+                        new Object[]{resource, resource.getPropagationActionsClassName(), e});\n             }\n         }\n "},{"sha":"a816931207a6b300d3d8412b08f412e6477e6715","filename":"core/src/main/java/org/apache/syncope/core/propagation/LDAPMembershipPropagationActions.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.propagation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.util.JexlUtil;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class LDAPMembershipPropagationActions extends DefaultPropagationActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPropagationActions.class);\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private JexlUtil jexlUtil;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n+        super.before(task, beforeObj);\n+\n+        if (beforeObj.getObjectClass() == ObjectClass.ACCOUNT && task.getResource().getRmapping() != null) {\n+            List<String> roleAccountLinks = new ArrayList<String>();\n+            for (SyncopeRole role : roleDAO.findAll()) {\n+                if (role.getResources().contains(task.getResource())\n+                        && StringUtils.isNotBlank(task.getResource().getRmapping().getAccountLink())) {\n+\n+                    LOG.debug(\"Evaluating accountLink for {}\", role);\n+\n+                    final JexlContext jexlContext = new MapContext();\n+                    jexlUtil.addFieldsToContext(role, jexlContext);\n+                    jexlUtil.addAttrsToContext(role.getAttributes(), jexlContext);\n+                    jexlUtil.addDerAttrsToContext(role.getDerivedAttributes(), role.getAttributes(), jexlContext);\n+                    final String roleAccountLink = jexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(),\n+                            jexlContext);\n+                    LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);\n+                    if (StringUtils.isNotBlank(roleAccountLink)) {\n+                        roleAccountLinks.add(roleAccountLink);\n+                    }\n+                }\n+            }\n+            LOG.debug(\"Role accountLinks to propagate for membership: {}\", roleAccountLinks);\n+\n+            if (!roleAccountLinks.isEmpty()) {\n+                task.getAttributes().add(AttributeBuilder.build(\"ldapGroups\", roleAccountLinks));\n+            }\n+        } else {\n+            LOG.debug(\"It's {}, not doing anything\", beforeObj.getObjectClass());\n+        }\n+    }\n+}"},{"sha":"5476267339b0eb95c049baff4da02e580d74506a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":134,"deletions":115,"changes":249,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cc2ffa8912f74a127bb3597282a41ab05d112f52/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=cc2ffa8912f74a127bb3597282a41ab05d112f52","patch":"@@ -31,12 +31,14 @@\n import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n+import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -107,18 +109,12 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         if (resourceTO.getUmapping() != null) {\n             UMapping mapping = new UMapping();\n             resource.setUmapping(mapping);\n-            mapping.setAccountLink(resourceTO.getUmapping().getAccountLink());\n-\n-            Set<UMappingItem> items = getUMappingItems(mapping, resourceTO.getUmapping().getItems());\n-            for (UMappingItem item : items) {\n-                if (item.isAccountid()) {\n-                    mapping.setAccountIdItem(item);\n-                } else if (item.isPassword()) {\n-                    mapping.setPasswordItem(item);\n-                } else {\n-                    mapping.addItem(item);\n-                }\n-            }\n+            populateMapping(resourceTO.getUmapping(), mapping);\n+        }\n+        if (resourceTO.getRmapping() != null) {\n+            RMapping mapping = new RMapping();\n+            resource.setRmapping(mapping);\n+            populateMapping(resourceTO.getRmapping(), mapping);\n         }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n@@ -144,124 +140,35 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             resource.setRserializedSyncToken(null);\n         }\n \n-        resource.setActionsClassName(resourceTO.getActionsClassName());\n+        resource.setPropagationActionsClassName(resourceTO.getPropagationActionsClassName());\n \n         return resource;\n     }\n \n-    public List<ResourceTO> getResourceTOs(final Collection<ExternalResource> resources) {\n-        List<ResourceTO> resourceTOs = new ArrayList<ResourceTO>();\n-        for (ExternalResource resource : resources) {\n-            resourceTOs.add(getResourceTO(resource));\n-        }\n-\n-        return resourceTOs;\n-    }\n-\n-    public Set<MappingItemTO> getUMappingItemTOs(final Collection<AbstractMappingItem> items) {\n-        Set<MappingItemTO> uMappingTOs = new HashSet<MappingItemTO>();\n-        for (AbstractMappingItem item : items) {\n-            LOG.debug(\"Asking for TO for {}\", item);\n-            uMappingTOs.add(getUMappingItemTO(item));\n-        }\n-\n-        LOG.debug(\"Collected TOs: {}\", uMappingTOs);\n-\n-        return uMappingTOs;\n-    }\n-\n-    public MappingItemTO getUMappingItemTO(final AbstractMappingItem item) {\n-        if (item == null) {\n-            LOG.error(\"Provided null mapping\");\n-\n-            return null;\n-        }\n+    private void populateMapping(final MappingTO mappingTO, final AbstractMapping mapping) {\n+        mapping.setAccountLink(mappingTO.getAccountLink());\n \n-        MappingItemTO itemTO = new MappingItemTO();\n-\n-        BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n-\n-        itemTO.setId(item.getId());\n-\n-        LOG.debug(\"Obtained SchemaMappingTO {}\", itemTO);\n-\n-        return itemTO;\n-    }\n-\n-    public ResourceTO getResourceTO(final ExternalResource resource) {\n-        if (resource == null) {\n-            return null;\n-        }\n-\n-        ResourceTO resourceTO = new ResourceTO();\n-\n-        // set the resource name\n-        resourceTO.setName(resource.getName());\n-\n-        // set the connector instance\n-        ConnInstance connector = resource.getConnector();\n-\n-        resourceTO.setConnectorId(connector == null ? null : connector.getId());\n-\n-        // set the mappings\n-        if (resource.getUmapping() != null) {\n-            MappingTO mappingTO = new MappingTO();\n-            resourceTO.setUmapping(mappingTO);\n-            mappingTO.setAccountLink(resource.getUmapping().getAccountLink());\n-\n-            for (MappingItemTO itemTO : getUMappingItemTOs(resource.getUmapping().getItems())) {\n-                if (itemTO.isAccountid()) {\n-                    mappingTO.setAccountIdItem(itemTO);\n-                } else if (itemTO.isPassword()) {\n-                    mappingTO.setPasswordItem(itemTO);\n-                } else {\n-                    mappingTO.addItem(itemTO);\n-                }\n+        for (AbstractMappingItem item : getMappingItems(mappingTO.getItems())) {\n+            if (item.isAccountid()) {\n+                mapping.setAccountIdItem(item);\n+            } else if (item.isPassword()) {\n+                ((UMapping) mapping).setPasswordItem((UMappingItem) item);\n+            } else {\n+                mapping.addItem(item);\n             }\n         }\n-\n-        resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());\n-\n-        resourceTO.setPropagationPrimary(resource.isPropagationPrimary());\n-\n-        resourceTO.setPropagationPriority(resource.getPropagationPriority());\n-\n-        resourceTO.setPropagationMode(resource.getPropagationMode());\n-\n-        resourceTO.setCreateTraceLevel(resource.getCreateTraceLevel());\n-        resourceTO.setUpdateTraceLevel(resource.getUpdateTraceLevel());\n-        resourceTO.setDeleteTraceLevel(resource.getDeleteTraceLevel());\n-        resourceTO.setSyncTraceLevel(resource.getSyncTraceLevel());\n-\n-        resourceTO.setPasswordPolicy(resource.getPasswordPolicy() == null\n-                ? null : resource.getPasswordPolicy().getId());\n-\n-        resourceTO.setAccountPolicy(resource.getAccountPolicy() == null\n-                ? null : resource.getAccountPolicy().getId());\n-\n-        resourceTO.setSyncPolicy(resource.getSyncPolicy() == null\n-                ? null : resource.getSyncPolicy().getId());\n-\n-        resourceTO.setConnectorConfigurationProperties(resource.getConfiguration());\n-\n-        resourceTO.setUsyncToken(resource.getUserializedSyncToken());\n-        resourceTO.setRsyncToken(resource.getRserializedSyncToken());\n-\n-        resourceTO.setActionsClassName(resource.getActionsClassName());\n-\n-        return resourceTO;\n     }\n \n-    private Set<UMappingItem> getUMappingItems(final UMapping mapping, final Collection<MappingItemTO> itemTOs) {\n-        Set<UMappingItem> items = new HashSet<UMappingItem>(itemTOs.size());\n+    private Set<AbstractMappingItem> getMappingItems(final Collection<MappingItemTO> itemTOs) {\n+        Set<AbstractMappingItem> items = new HashSet<AbstractMappingItem>(itemTOs.size());\n         for (MappingItemTO itemTO : itemTOs) {\n-            items.add(getUMappingItem(itemTO, mapping));\n+            items.add(getMappingItem(itemTO));\n         }\n \n         return items;\n     }\n \n-    private UMappingItem getUMappingItem(final MappingItemTO itemTO, final UMapping mapping)\n+    private AbstractMappingItem getMappingItem(final MappingItemTO itemTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -357,4 +264,116 @@ private ConnInstance getConnInstance(final ConnInstance connInstance, final Set<\n \n         return connInstance;\n     }\n+\n+    public List<ResourceTO> getResourceTOs(final Collection<ExternalResource> resources) {\n+        List<ResourceTO> resourceTOs = new ArrayList<ResourceTO>();\n+        for (ExternalResource resource : resources) {\n+            resourceTOs.add(getResourceTO(resource));\n+        }\n+\n+        return resourceTOs;\n+    }\n+\n+    public ResourceTO getResourceTO(final ExternalResource resource) {\n+        if (resource == null) {\n+            return null;\n+        }\n+\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        // set the resource name\n+        resourceTO.setName(resource.getName());\n+\n+        // set the connector instance\n+        ConnInstance connector = resource.getConnector();\n+\n+        resourceTO.setConnectorId(connector == null ? null : connector.getId());\n+\n+        // set the mappings\n+        if (resource.getUmapping() != null) {\n+            MappingTO mappingTO = new MappingTO();\n+            resourceTO.setUmapping(mappingTO);\n+            populateMappingTO(resource.getUmapping(), mappingTO);\n+        }\n+        if (resource.getRmapping() != null) {\n+            MappingTO mappingTO = new MappingTO();\n+            resourceTO.setRmapping(mappingTO);\n+            populateMappingTO(resource.getRmapping(), mappingTO);\n+        }\n+\n+        resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());\n+\n+        resourceTO.setPropagationPrimary(resource.isPropagationPrimary());\n+\n+        resourceTO.setPropagationPriority(resource.getPropagationPriority());\n+\n+        resourceTO.setPropagationMode(resource.getPropagationMode());\n+\n+        resourceTO.setCreateTraceLevel(resource.getCreateTraceLevel());\n+        resourceTO.setUpdateTraceLevel(resource.getUpdateTraceLevel());\n+        resourceTO.setDeleteTraceLevel(resource.getDeleteTraceLevel());\n+        resourceTO.setSyncTraceLevel(resource.getSyncTraceLevel());\n+\n+        resourceTO.setPasswordPolicy(resource.getPasswordPolicy() == null\n+                ? null : resource.getPasswordPolicy().getId());\n+\n+        resourceTO.setAccountPolicy(resource.getAccountPolicy() == null\n+                ? null : resource.getAccountPolicy().getId());\n+\n+        resourceTO.setSyncPolicy(resource.getSyncPolicy() == null\n+                ? null : resource.getSyncPolicy().getId());\n+\n+        resourceTO.setConnectorConfigurationProperties(resource.getConfiguration());\n+\n+        resourceTO.setUsyncToken(resource.getUserializedSyncToken());\n+        resourceTO.setRsyncToken(resource.getRserializedSyncToken());\n+\n+        resourceTO.setPropagationActionsClassName(resource.getPropagationActionsClassName());\n+\n+        return resourceTO;\n+    }\n+\n+    private void populateMappingTO(final AbstractMapping mapping, final MappingTO mappingTO) {\n+        mappingTO.setAccountLink(mapping.getAccountLink());\n+\n+        for (MappingItemTO itemTO : getMappingItemTOs(mapping.getItems())) {\n+            if (itemTO.isAccountid()) {\n+                mappingTO.setAccountIdItem(itemTO);\n+            } else if (itemTO.isPassword()) {\n+                mappingTO.setPasswordItem(itemTO);\n+            } else {\n+                mappingTO.addItem(itemTO);\n+            }\n+        }\n+    }\n+\n+    private Set<MappingItemTO> getMappingItemTOs(final Collection<AbstractMappingItem> items) {\n+        Set<MappingItemTO> mappingTOs = new HashSet<MappingItemTO>();\n+        for (AbstractMappingItem item : items) {\n+            LOG.debug(\"Asking for TO for {}\", item);\n+            mappingTOs.add(getMappingItemTO(item));\n+        }\n+\n+        LOG.debug(\"Collected TOs: {}\", mappingTOs);\n+\n+        return mappingTOs;\n+    }\n+\n+    private MappingItemTO getMappingItemTO(final AbstractMappingItem item) {\n+        if (item == null) {\n+            LOG.error(\"Provided null mapping\");\n+\n+            return null;\n+        }\n+\n+        MappingItemTO itemTO = new MappingItemTO();\n+\n+        BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+\n+        itemTO.setId(item.getId());\n+\n+        LOG.debug(\"Obtained SchemaMappingTO {}\", itemTO);\n+\n+        return itemTO;\n+    }\n }"}]}