{"sha":"62f5e4ed644e03cd6a830c0c48ab1282d0dad769","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyZjVlNGVkNjQ0ZTAzY2Q2YTgzMGMwYzQ4YWIxMjgyZDBkYWQ3Njk=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-08-13T09:37:59Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-08-13T09:37:59Z"},"message":"Merge from master","tree":{"sha":"3393037f59c72caa5c01011d89f5a8c571e5a03b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3393037f59c72caa5c01011d89f5a8c571e5a03b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/62f5e4ed644e03cd6a830c0c48ab1282d0dad769","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f5e4ed644e03cd6a830c0c48ab1282d0dad769","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62f5e4ed644e03cd6a830c0c48ab1282d0dad769","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f5e4ed644e03cd6a830c0c48ab1282d0dad769/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"2e6b4fdbd454c0202c2f39ac1d96607462055aac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e6b4fdbd454c0202c2f39ac1d96607462055aac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2e6b4fdbd454c0202c2f39ac1d96607462055aac"}],"stats":{"total":106,"additions":53,"deletions":53},"files":[{"sha":"a1c822e0d7df384582efeed157629a5438fd2ec1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnySearchResultPanel.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f5e4ed644e03cd6a830c0c48ab1282d0dad769/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f5e4ed644e03cd6a830c0c48ab1282d0dad769/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java?ref=62f5e4ed644e03cd6a830c0c48ab1282d0dad769","patch":"@@ -53,31 +53,31 @@\n import org.springframework.util.ReflectionUtils;\n \n public class AnySearchResultPanel extends AbstractSearchResultPanel {\n-    \n+\n     private static final long serialVersionUID = -1100228004207271270L;\n-    \n+\n     protected static final Logger LOG = LoggerFactory.getLogger(AnySearchResultPanel.class);\n-    \n+\n     private String customMarkupId;\n-    \n+\n     @SpringBean\n     protected SchemaRestClient schemaRestClient;\n-    \n+\n     protected final List<String> schemaNames;\n-    \n+\n     protected final List<String> dSchemaNames;\n-    \n+\n     protected final String pageID = \"Any\";\n-    \n+\n     private final String entitlement = \"USER_LIST\";\n-    \n+\n     public AnySearchResultPanel(final String type, final String parentId, final String markupId, final boolean filtered,\n             final String fiql, final PageReference callerRef, final AbstractAnyRestClient restClient,\n             final List<AnyTypeClassTO> anyTypeClassTOs, final String realm) {\n         super(parentId, filtered, fiql, callerRef, restClient, realm, type);\n         setCustomMarkupId(markupId);\n         add(new Label(\"name\", type));\n-        \n+\n         this.schemaNames = new ArrayList<String>();\n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n             this.schemaNames.addAll(anyTypeClassTO.getPlainSchemas());\n@@ -86,27 +86,27 @@ public AnySearchResultPanel(final String type, final String parentId, final Stri\n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n             this.dSchemaNames.addAll(anyTypeClassTO.getDerSchemas());\n         }\n-        \n+\n         initResultTable();\n     }\n-    \n+\n     public String getCustomMarkupId() {\n         return customMarkupId;\n     }\n-    \n+\n     public void setCustomMarkupId(final String markupId) {\n         this.customMarkupId = markupId;\n     }\n-    \n+\n     @Override\n     protected List<IColumn<AnyTO, String>> getColumns() {\n-        \n+\n         final List<IColumn<AnyTO, String>> columns =\n                 new ArrayList<IColumn<AnyTO, String>>();\n-        \n+\n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_DETAILS_VIEW)) {\n             final Field field = ReflectionUtils.findField(AnyObjectTO.class, name);\n-            \n+\n             if (\"token\".equalsIgnoreCase(name)) {\n                 columns.add(new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n             } else if (field != null && field.getType().equals(Date.class)) {\n@@ -116,13 +116,13 @@ protected List<IColumn<AnyTO, String>> getColumns() {\n                         new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n             }\n         }\n-        \n+\n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_ATTRIBUTES_VIEW)) {\n             if (schemaNames.contains(name)) {\n                 columns.add(new AttrColumn(name, SchemaType.PLAIN));\n             }\n         }\n-        \n+\n         for (String name : prefMan.getList(getRequest(), Constants.PREF_ANY_DERIVED_ATTRIBUTES_VIEW)) {\n             if (dSchemaNames.contains(name)) {\n                 columns.add(new AttrColumn(name, SchemaType.DERIVED));\n@@ -135,124 +135,124 @@ protected List<IColumn<AnyTO, String>> getColumns() {\n                 columns.add(\n                         new PropertyColumn<AnyTO, String>(new ResourceModel(name, name), name, name));\n             }\n-            \n+\n         }\n-        \n+\n         columns.add(new ActionColumn<AnyTO, String>(new ResourceModel(\"actions\", \"\")) {\n-            \n+\n             private static final long serialVersionUID = -3503023501954863131L;\n-            \n+\n             @Override\n             public ActionLinksPanel getActions(final String componentId, final IModel<AnyTO> model) {\n-                \n+\n                 final ActionLinksPanel.Builder<AnyTO> panel = ActionLinksPanel.builder(page.getPageReference());\n-                \n+\n                 panel.add(new ActionLink<AnyTO>() {\n-                    \n+\n                     private static final long serialVersionUID = -7978723352517770644L;\n-                    \n+\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n                         editmodal.setPageCreator(new ModalWindow.PageCreator() {\n-                            \n+\n                             private static final long serialVersionUID = -7834632442532690940L;\n-                            \n+\n                             @Override\n                             public Page createPage() {\n                                 // SYNCOPE-294: re-read anyTO before edit\n                                 AnyObjectTO anyTO = ((AnyObjectRestClient) restClient).read(model.getObject().getKey());\n                                 return null;\n                             }\n                         });\n-                        \n+\n                         editmodal.show(target);\n                     }\n                 }, ActionLink.ActionType.EDIT, entitlement).add(new ActionLink<AnyTO>() {\n-                    \n+\n                     private static final long serialVersionUID = -7978723352517770644L;\n-                    \n+\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final AnyTO anyTO) {\n                         try {\n                             AnyTO deleteAnyTO =\n                                     restClient.delete(model.getObject().getETagValue(), model.getObject().getKey());\n-                            \n+\n                             page.setModalResult(true);\n-                            \n+\n                             editmodal.setPageCreator(new ModalWindow.PageCreator() {\n-                                \n+\n                                 private static final long serialVersionUID = -7834632442532690940L;\n-                                \n+\n                                 @Override\n                                 public Page createPage() {\n                                     return null;\n                                 }\n                             });\n-                            \n+\n                             editmodal.show(target);\n                         } catch (SyncopeClientException scce) {\n                             error(getString(Constants.OPERATION_ERROR) + \": \" + scce.getMessage());\n                             feedbackPanel.refresh(target);\n                         }\n                     }\n                 }, ActionLink.ActionType.DELETE, entitlement);\n-                \n+\n                 return panel.build(componentId);\n             }\n-            \n+\n             @Override\n             public ActionLinksPanel getHeader(final String componentId) {\n                 final ActionLinksPanel.Builder<Serializable> panel = ActionLinksPanel.builder(page.getPageReference());\n-                \n+\n                 panel.add(new ActionLink<Serializable>() {\n-                    \n+\n                     private static final long serialVersionUID = -7978723352517770644L;\n-                    \n+\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         displaymodal.setPageCreator(new ModalWindow.PageCreator() {\n-                            \n+\n                             private static final long serialVersionUID = -7834632442532690940L;\n-                            \n+\n                             @Override\n                             public Page createPage() {\n                                 return new AnyDisplayAttributesModalPage(\n                                         page.getPageReference(), displaymodal, schemaNames, dSchemaNames);\n                             }\n                         });\n-                        \n+\n                         displaymodal.show(target);\n                     }\n                 }, ActionLink.ActionType.CHANGE_VIEW, entitlement).add(new ActionLink<Serializable>() {\n-                    \n+\n                     private static final long serialVersionUID = -7978723352517770644L;\n-                    \n+\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         if (target != null) {\n                             target.add(container);\n                         }\n                     }\n                 }, ActionLink.ActionType.RELOAD, entitlement);\n-                \n+\n                 return panel.build(componentId);\n             }\n         });\n-        \n+\n         return columns;\n     }\n-    \n+\n     @Override\n     protected <T extends AnyTO> Collection<ActionLink.ActionType> getBulkActions() {\n         final List<ActionLink.ActionType> bulkActions = new ArrayList<ActionLink.ActionType>();\n-        \n+\n         bulkActions.add(ActionLink.ActionType.DELETE);\n         bulkActions.add(ActionLink.ActionType.SUSPEND);\n         bulkActions.add(ActionLink.ActionType.REACTIVATE);\n-        \n+\n         return bulkActions;\n     }\n-    \n+\n     @Override\n     protected String getPageId() {\n         return pageID;"}]}