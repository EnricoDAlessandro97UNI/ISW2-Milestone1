{"sha":"2a14650454d5e4fd82dec3ef30edac497e627e18","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhMTQ2NTA0NTRkNWU0ZmQ4MmRlYzNlZjMwZWRhYzQ5N2U2MjdlMTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-20T15:07:26Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-20T15:07:26Z"},"message":"bug-fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246599 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"05b5c712569915840f09f5621eb321e749f7ff14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/05b5c712569915840f09f5621eb321e749f7ff14"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a14650454d5e4fd82dec3ef30edac497e627e18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a14650454d5e4fd82dec3ef30edac497e627e18","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a14650454d5e4fd82dec3ef30edac497e627e18","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a14650454d5e4fd82dec3ef30edac497e627e18/comments","author":null,"committer":null,"parents":[{"sha":"3434b4cc5e3d2f4ccfd45aae8245607cde38a411","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3434b4cc5e3d2f4ccfd45aae8245607cde38a411","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3434b4cc5e3d2f4ccfd45aae8245607cde38a411"}],"stats":{"total":276,"additions":223,"deletions":53},"files":[{"sha":"377d30ed0e24c463fff19f1ace9e3e1e55b1e86f","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -1,6 +1,7 @@\n package org.syncope.identityconnectors.bundles.staticwebservice;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import org.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -276,18 +277,19 @@ public Uid create(\n             }\n \n             wsAttributeValue = new WSAttributeValue(wsAttribute);\n+            attributes.add(wsAttributeValue);\n \n-            Object value = AttributeUtil.getSingleValue(attr);\n+            List value = attr.getValue();\n \n-            if (value instanceof GuardedString\n-                    || value instanceof GuardedByteArray) {\n+            if (value != null && value.size() == 1\n+                    && (value.get(0) instanceof GuardedString\n+                    || value.get(0) instanceof GuardedByteArray)) {\n \n-                wsAttributeValue.setValue(value.toString());\n+                wsAttributeValue.setValues(\n+                        Collections.singletonList(value.toString()));\n             } else {\n-                wsAttributeValue.setValue(value);\n+                wsAttributeValue.setValues(value);\n             }\n-\n-            attributes.add(wsAttributeValue);\n         }\n \n         if (LOG.isDebugEnabled()) {\n@@ -589,18 +591,19 @@ public Uid update(ObjectClass objclass,\n             }\n \n             wsAttributeValue = new WSAttributeValue(wsAttribute);\n+            attributes.add(wsAttributeValue);\n \n-            Object value = AttributeUtil.getSingleValue(attr);\n+            List value = attr.getValue();\n \n-            if (value instanceof GuardedString\n-                    || value instanceof GuardedByteArray) {\n+            if (value != null && value.size() == 1\n+                    && (value.get(0) instanceof GuardedString\n+                    || value.get(0) instanceof GuardedByteArray)) {\n \n-                wsAttributeValue.setValue(value.toString());\n+                wsAttributeValue.setValues(\n+                        Collections.singletonList(value.toString()));\n             } else {\n-                wsAttributeValue.setValue(value);\n+                wsAttributeValue.setValues(value);\n             }\n-\n-            attributes.add(wsAttributeValue);\n         }\n \n         Uid uuid = null;\n@@ -795,17 +798,17 @@ private ConnectorObjectBuilder buildConnectorObject(\n                 uid = attribute.getStringValue();\n                 bld.setName(uid);\n                 bld.addAttribute(AttributeBuilder.build(\n-                        attribute.getName(), attribute.getValue()));\n+                        attribute.getName(), attribute.getValues()));\n             }\n \n             if (!attribute.isKey() && !attribute.isPassword()) {\n \n-                if (attribute.getValue() == null) {\n+                if (attribute.getValues() == null) {\n                     bld.addAttribute(AttributeBuilder.build(\n                             attribute.getName()));\n                 } else {\n                     bld.addAttribute(AttributeBuilder.build(\n-                            attribute.getName(), attribute.getValue()));\n+                            attribute.getName(), attribute.getValues()));\n                 }\n \n             }"},{"sha":"2c3aace515c5226619a3c65351b814d9dff82476","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/AbstractData.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FAbstractData.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FAbstractData.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FAbstractData.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n+\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public abstract class AbstractData implements Serializable {\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this,\n+                ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"fa659feaec20e9bd35bd4402087c0de2056272bf","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSAttribute.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttribute.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -14,7 +14,11 @@\n  */\n package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n \n-public class WSAttribute {\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class WSAttribute extends AbstractData{\n \n     /**\n      * The name of the attribute."},{"sha":"79a47cf05c9f4c6db7169833670e94c522dde440","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSAttributeValue.java","status":"modified","additions":112,"deletions":15,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSAttributeValue.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -16,11 +16,16 @@\n \n import java.io.File;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Date;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n \n+@XmlAccessorType(XmlAccessType.FIELD)\n public class WSAttributeValue extends WSAttribute {\n \n-    private Object value = null;\n+    private List values = null;\n \n     public WSAttributeValue() {\n         super();\n@@ -38,91 +43,183 @@ public WSAttributeValue(WSAttribute wsAttribute) {\n         }\n     }\n \n-    public Object getValue() {\n-        return value;\n+    public List getValues() {\n+        return values;\n     }\n \n-    public void setValue(Object value) {\n-        this.value = value;\n+    public void setValues(List values) {\n+        if (this.values == null) {\n+            this.values = new ArrayList();\n+        }\n+\n+        this.values = values;\n+    }\n+\n+    public final boolean addValue(Object value) {\n+        if (this.values == null) {\n+            this.values = new ArrayList();\n+        }\n+\n+        return this.values.add(value);\n     }\n \n     public String getStringValue() {\n         if (getType() == null || !\"String\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (String) value;\n+        String res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = values.iterator().next().toString();\n+        }\n+\n+        return res;\n     }\n \n     public Boolean getBooleanValue() {\n         if (getType() == null || !\"Boolean\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Boolean) value;\n+        Boolean res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Boolean) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Long getLongValue() {\n         if (getType() == null || !\"Long\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Long) value;\n+        Long res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Long) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Float getFloadValue() {\n         if (getType() == null || !\"Float\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Float) value;\n+        Float res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Float) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Double getDoubleValue() {\n         if (getType() == null || !\"Double\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Double) value;\n+        Double res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Double) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Integer getIntegerValue() {\n         if (getType() == null || !\"Integer\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Integer) value;\n+        Integer res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Integer) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Date getDateValue() {\n         if (getType() == null || !\"Date\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Date) value;\n+        Date res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Date) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public Character getCharacterValue() {\n         if (getType() == null || !\"Character\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (Character) value;\n+        Character res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (Character) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public URI getURIValue() {\n         if (getType() == null || !\"URI\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (URI) value;\n+        URI res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (URI) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n \n     public File getFileValue() {\n         if (getType() == null || !\"File\".equals(getType())) {\n             throw new IllegalArgumentException(\"Invalid type declaration\");\n         }\n \n-        return (File) value;\n+        File res;\n+\n+        if (values == null && values.isEmpty()) {\n+            res = null;\n+        } else {\n+            res = (File) values.iterator().next();\n+        }\n+\n+        return res;\n     }\n }"},{"sha":"7937574e22401b296a10567dfdb3293a98820fe3","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSChange.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSChange.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -15,8 +15,11 @@\n package org.syncope.identityconnectors.bundles.commons.staticwebservice.to;\n \n import java.util.Set;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n \n-public class WSChange {\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class WSChange extends AbstractData {\n \n     /**\n      * Attributes changed.\n@@ -58,5 +61,4 @@ public String getType() {\n     public void setType(String type) {\n         this.type = type;\n     }\n-\n }"},{"sha":"fe5f1c2297c5964c78dded845084b4095f54d7be","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/commons/staticwebservice/to/WSUser.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fcommons%2Fstaticwebservice%2Fto%2FWSUser.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -16,8 +16,11 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n \n-public class WSUser {\n+@XmlAccessorType(XmlAccessType.FIELD)\n+public class WSUser extends AbstractData {\n \n     private String accountid;\n "},{"sha":"114a003db44dab72b5840f9604a84d487b91bc47","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/exceptions/ProvisioningException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fexceptions%2FProvisioningException.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -14,6 +14,9 @@\n  */\n package org.syncope.identityconnectors.bundles.staticwebservice.exceptions;\n \n+import javax.xml.ws.WebFault;\n+\n+@WebFault(name = \"ProvisioningException\")\n public class ProvisioningException extends Exception {\n \n     /**\n@@ -22,7 +25,6 @@ public class ProvisioningException extends Exception {\n     public ProvisioningException() {\n     }\n \n-\n     /**\n      * Constructs an instance of <code>ProvisioningException</code> with the specified detail message.\n      * @param msg the detail message."},{"sha":"491215cc93af8a08ae324ec90212318ae584cd4d","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"modified","additions":32,"deletions":16,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a14650454d5e4fd82dec3ef30edac497e627e18/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=2a14650454d5e4fd82dec3ef30edac497e627e18","patch":"@@ -137,10 +137,21 @@ public String update(String accountid, List<WSAttributeValue> data)\n             conn = connect();\n             Statement statement = conn.createStatement();\n \n+            String value;\n+\n             StringBuilder set = new StringBuilder();\n             for (WSAttributeValue attr : data) {\n+\n+                if (attr.getValues() == null || attr.getValues().isEmpty()) {\n+                    value = null;\n+                } else if (attr.getValues().size() == 1) {\n+                        value = attr.getValues().get(0).toString();\n+                    } else {\n+                        value = attr.getValues().toString();\n+                    }\n+\n                 if (!attr.isKey()\n-                        || !accountid.equals(attr.getValue().toString())) {\n+                        || !accountid.equals(value)) {\n                     if (set.length() > 0) {\n                         set.append(\",\");\n                     }\n@@ -153,13 +164,7 @@ public String update(String accountid, List<WSAttributeValue> data)\n                             set.append(attr.getName()).append('=');\n                         }\n \n-                    if (attr.getValue() != null) {\n-                        set.append(\"'\").\n-                                append(attr.getValue().toString()).\n-                                append(\"'\");\n-                    } else {\n-                        set.append(\"null\");\n-                    }\n+                    set.append(value == null ? null : \"'\" + value + \"'\");\n                 }\n             }\n \n@@ -233,12 +238,13 @@ public List<WSUser> query(Operand query) {\n                 for (int i = 0; i < metaData.getColumnCount(); i++) {\n                     attr = new WSAttributeValue();\n                     attr.setName(metaData.getColumnLabel(i + 1));\n-                    attr.setValue(rs.getString(i + 1));\n+                    attr.setValues(\n+                            Collections.singletonList(rs.getString(i + 1)));\n \n                     if (\"userId\".equalsIgnoreCase(\n                             metaData.getColumnName(i + 1))) {\n                         attr.setKey(true);\n-                        user.setAccountid(attr.getValue().toString());\n+                        user.setAccountid(rs.getString(i + 1));\n                     }\n \n                     user.addAttribute(attr);\n@@ -285,8 +291,21 @@ public String create(List<WSAttributeValue> data)\n             StringBuffer values = new StringBuffer();\n \n             String accountid = null;\n+            String value;\n \n             for (WSAttributeValue attr : data) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Bind attribute: \" + attr);\n+                }\n+\n+                if (attr.getValues() == null || attr.getValues().isEmpty()) {\n+                    value = null;\n+                } else if (attr.getValues().size() == 1) {\n+                        value = attr.getValues().get(0).toString();\n+                    } else {\n+                        value = attr.getValues().toString();\n+                    }\n+\n                 if (keys.length() > 0) {\n                     keys.append(\",\");\n                 }\n@@ -303,13 +322,10 @@ public String create(List<WSAttributeValue> data)\n                     values.append(\",\");\n                 }\n \n-                values.append(\n-                        \"'\"\n-                        + (attr.getValue() == null ? null : attr.getValue().toString())\n-                        + \"'\");\n+                values.append(value == null ? null : \"'\" + value + \"'\");\n \n-                if (attr.isKey()) {\n-                    accountid = attr.getValue().toString();\n+                if (attr.isKey() && !attr.getValues().isEmpty()) {\n+                    accountid = attr.getValues().get(0).toString();\n                 }\n             }\n "}]}