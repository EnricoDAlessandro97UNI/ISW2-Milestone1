{"sha":"5ab65808ec565ef50b970e96be011edfce8eabff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVhYjY1ODA4ZWM1NjVlZjUwYjk3MGU5NmJlMDExZWRmY2U4ZWFiZmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-22T07:39:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-22T07:39:51Z"},"message":"[SYNCOPE-1087] Check if notifications are available or audit was requested for the ongoing event before performing any actual read","tree":{"sha":"7d7916eabf7c9c87984b7b984d3044dcd5c12af8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7d7916eabf7c9c87984b7b984d3044dcd5c12af8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5ab65808ec565ef50b970e96be011edfce8eabff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ab65808ec565ef50b970e96be011edfce8eabff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ab65808ec565ef50b970e96be011edfce8eabff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ab65808ec565ef50b970e96be011edfce8eabff/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9b7abc1804ec2dc21084528333f24489f441d12c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9b7abc1804ec2dc21084528333f24489f441d12c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9b7abc1804ec2dc21084528333f24489f441d12c"}],"stats":{"total":181,"additions":145,"deletions":36},"files":[{"sha":"9c071b8d67451df3e0fc828ed1d4040634ca95fb","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -164,15 +164,15 @@ public static Pair<EventCategoryTO, Result> parseEventCategory(final String even\n      * @param category event category.\n      * @param subcategory event subcategory.\n      * @param event event.\n-     * @param resultValueCondition result value condition.\n+     * @param condition result value condition.\n      * @return event string.\n      */\n     public static String buildEvent(\n             final AuditElements.EventCategoryType type,\n             final String category,\n             final String subcategory,\n             final String event,\n-            final AuditElements.Result resultValueCondition) {\n+            final AuditElements.Result condition) {\n \n         final StringBuilder eventBuilder = new StringBuilder();\n \n@@ -198,9 +198,9 @@ public static String buildEvent(\n         }\n         eventBuilder.append(']');\n \n-        if (resultValueCondition != null) {\n+        if (condition != null) {\n             eventBuilder.append(\":[\").\n-                    append(resultValueCondition).\n+                    append(condition).\n                     append(']');\n         }\n "},{"sha":"87eda2055fa997aedfb97678c5c0c9c7958299f7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":38,"deletions":26,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Method;\n import java.util.Arrays;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -55,49 +56,60 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n \n         String event = joinPoint.getSignature().getName();\n \n-        AuditElements.Result result = null;\n+        boolean notificationsAvailable = notificationManager.notificationsAvailable(\n+                AuditElements.EventCategoryType.LOGIC, category, null, event);\n+        boolean auditRequested = auditManager.auditRequested(\n+                AuditElements.EventCategoryType.LOGIC, category, null, event);\n+\n+        AuditElements.Result condition = null;\n         Object output = null;\n         Object before = null;\n \n         try {\n             LOG.debug(\"Before {}.{}({})\", clazz.getSimpleName(), event,\n-                    input == null || input.length == 0 ? \"\" : Arrays.asList(input));\n-\n-            try {\n-                before = ((AbstractLogic) joinPoint.getTarget()).resolveBeanReference(method, input);\n-            } catch (UnresolvedReferenceException ignore) {\n-                LOG.debug(\"Unresolved bean reference ...\");\n+                    input == null || input.length == 0 ? StringUtils.EMPTY : Arrays.asList(input));\n+\n+            if (notificationsAvailable || auditRequested) {\n+                try {\n+                    before = ((AbstractLogic) joinPoint.getTarget()).resolveBeanReference(method, input);\n+                } catch (UnresolvedReferenceException ignore) {\n+                    LOG.debug(\"Unresolved bean reference ...\");\n+                }\n             }\n \n             output = joinPoint.proceed();\n-            result = AuditElements.Result.SUCCESS;\n+            condition = AuditElements.Result.SUCCESS;\n \n             LOG.debug(\"After returning {}.{}: {}\", clazz.getSimpleName(), event, output);\n             return output;\n         } catch (Throwable t) {\n             output = t;\n-            result = AuditElements.Result.FAILURE;\n+            condition = AuditElements.Result.FAILURE;\n \n             LOG.debug(\"After throwing {}.{}\", clazz.getSimpleName(), event);\n             throw t;\n         } finally {\n-            notificationManager.createTasks(AuditElements.EventCategoryType.LOGIC,\n-                    category,\n-                    null,\n-                    event,\n-                    result,\n-                    before,\n-                    output,\n-                    input);\n-\n-            auditManager.audit(AuditElements.EventCategoryType.LOGIC,\n-                    category,\n-                    null,\n-                    event,\n-                    result,\n-                    before,\n-                    output,\n-                    input);\n+            if (notificationsAvailable) {\n+                notificationManager.createTasks(AuditElements.EventCategoryType.LOGIC,\n+                        category,\n+                        null,\n+                        event,\n+                        condition,\n+                        before,\n+                        output,\n+                        input);\n+            }\n+\n+            if (auditRequested) {\n+                auditManager.audit(AuditElements.EventCategoryType.LOGIC,\n+                        category,\n+                        null,\n+                        event,\n+                        condition,\n+                        before,\n+                        output,\n+                        input);\n+            }\n         }\n     }\n }"},{"sha":"333d415740c56800191699c5fe3cf13b6ecd5a4f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditManager.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditManager.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -22,12 +22,39 @@\n \n public interface AuditManager {\n \n+    /**\n+     * Checks if audit is requested matching the provided conditions.\n+     *\n+     * @param type event category type\n+     * @param category event category\n+     * @param subcategory event subcategory\n+     * @param event event\n+     * @return created notification tasks\n+     */\n+    boolean auditRequested(\n+            AuditElements.EventCategoryType type,\n+            String category,\n+            String subcategory,\n+            String event);\n+\n+    /**\n+     * Create notification tasks for each notification matching provided conditions.\n+     *\n+     * @param type event category type\n+     * @param category event category\n+     * @param subcategory event subcategory\n+     * @param event event\n+     * @param condition result value condition.\n+     * @param before object(s) availabile before the event\n+     * @param output object(s) produced by the event\n+     * @param input object(s) provided to the event\n+     */\n     void audit(\n             AuditElements.EventCategoryType type,\n             String category,\n             String subcategory,\n             String event,\n-            AuditElements.Result result,\n+            AuditElements.Result condition,\n             Object before,\n             Object output,\n             Object... input);"},{"sha":"a2979604bc66dda19795e1d23686aac1aaec9529","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/NotificationManager.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FNotificationManager.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -39,14 +39,29 @@ public interface NotificationManager {\n      */\n     long countExecutionsWithStatus(final String taskKey, final String status);\n \n+    /**\n+     * Checks if notifications are available matching the provided conditions.\n+     *\n+     * @param type event category type\n+     * @param category event category\n+     * @param subcategory event subcategory\n+     * @param event event\n+     * @return created notification tasks\n+     */\n+    boolean notificationsAvailable(\n+            AuditElements.EventCategoryType type,\n+            String category,\n+            String subcategory,\n+            String event);\n+\n     /**\n      * Create notification tasks for each notification matching provided conditions.\n      *\n      * @param type event category type\n      * @param category event category\n      * @param subcategory event subcategory\n      * @param event event\n-     * @param result event result\n+     * @param condition result value condition.\n      * @param before object(s) availabile before the event\n      * @param output object(s) produced by the event\n      * @param input object(s) provided to the event\n@@ -57,7 +72,7 @@ List<NotificationTask> createTasks(\n             String category,\n             String subcategory,\n             String event,\n-            AuditElements.Result result,\n+            AuditElements.Result condition,\n             Object before,\n             Object output,\n             Object... input);"},{"sha":"3a1dda4e62dcef3e6ed857994f62f9f264e33633","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -33,6 +33,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+@Transactional(readOnly = true)\n @Component\n public class AuditManagerImpl implements AuditManager {\n \n@@ -43,14 +44,46 @@ public static String getDomainAuditLoggerName(final String domain) {\n         return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n     }\n \n-    @Transactional(readOnly = true)\n+    @Override\n+    public boolean auditRequested(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event) {\n+\n+        AuditEntry auditEntry = new AuditEntry(\n+                AuthContextUtils.getUsername(),\n+                new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS),\n+                null,\n+                null,\n+                null);\n+        org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n+                loggerDAO.find(auditEntry.getLogger().toLoggerName());\n+        boolean auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n+\n+        if (auditRequested) {\n+            return true;\n+        }\n+\n+        auditEntry = new AuditEntry(\n+                AuthContextUtils.getUsername(),\n+                new AuditLoggerName(type, category, subcategory, event, Result.FAILURE),\n+                null,\n+                null,\n+                null);\n+        syncopeLogger = loggerDAO.find(auditEntry.getLogger().toLoggerName());\n+        auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n+\n+        return auditRequested;\n+    }\n+\n     @Override\n     public void audit(\n             final AuditElements.EventCategoryType type,\n             final String category,\n             final String subcategory,\n             final String event,\n-            final Result result,\n+            final Result condition,\n             final Object before,\n             final Object output,\n             final Object... input) {\n@@ -62,7 +95,7 @@ public void audit(\n \n         AuditEntry auditEntry = new AuditEntry(\n                 AuthContextUtils.getUsername(),\n-                new AuditLoggerName(type, category, subcategory, event, result),\n+                new AuditLoggerName(type, category, subcategory, event, condition),\n                 before,\n                 throwable == null ? output : throwable.getMessage(),\n                 input);"},{"sha":"06df8d62d07309e014383c12853c6edc8c9945bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ab65808ec565ef50b970e96be011edfce8eabff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=5ab65808ec565ef50b970e96be011edfce8eabff","patch":"@@ -26,6 +26,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -254,6 +256,26 @@ private String evaluate(final String template, final Map<String, Object> jexlVar\n         return writer.toString();\n     }\n \n+    @Override\n+    public boolean notificationsAvailable(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event) {\n+\n+        final String successEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, Result.SUCCESS);\n+        final String failureEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, Result.FAILURE);\n+        return IterableUtils.matchesAny(notificationDAO.findAll(), new Predicate<Notification>() {\n+\n+            @Override\n+            public boolean evaluate(final Notification notification) {\n+                return notification.isActive()\n+                        && (notification.getEvents().contains(successEvent)\n+                        || notification.getEvents().contains(failureEvent));\n+            }\n+        });\n+    }\n+\n     @Override\n     public List<NotificationTask> createTasks(\n             final AuditElements.EventCategoryType type,"}]}