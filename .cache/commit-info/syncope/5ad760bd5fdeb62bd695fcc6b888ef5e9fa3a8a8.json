{"sha":"5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVhZDc2MGJkNWZkZWI2MmJkNjk1ZmNjNmI4ODhlZjVlOWZhM2E4YTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T11:08:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T11:08:21Z"},"message":"[SYNCOPE-735] Housekeeping implemented","tree":{"sha":"f8c7c0bbd5d8fa919859d46fcb89a8feeac7541a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f8c7c0bbd5d8fa919859d46fcb89a8feeac7541a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0980c8e4774a757226bcccad5739437594dc1ff3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0980c8e4774a757226bcccad5739437594dc1ff3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0980c8e4774a757226bcccad5739437594dc1ff3"}],"stats":{"total":61,"additions":54,"deletions":7},"files":[{"sha":"1d0619555c98d4f022e09161f57a81f445ebbcea","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":54,"deletions":7,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=5ad760bd5fdeb62bd695fcc6b888ef5e9fa3a8a8","patch":"@@ -33,6 +33,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n+import javax.sql.DataSource;\n import org.activiti.bpmn.converter.BpmnXMLConverter;\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.editor.constants.ModelDataJsonConstants;\n@@ -82,6 +83,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -160,6 +162,9 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     @Autowired\n     protected UserDataBinder userDataBinder;\n \n+    @Autowired\n+    protected DataSource dataSource;\n+\n     @Override\n     public Class<? extends WorkflowInstanceLoader> getLoaderClass() {\n         return ActivitiWorkflowLoader.class;\n@@ -211,15 +216,45 @@ protected String getFormTask(final SyncopeUser user) {\n     protected Set<String> getPerformedTasks(final SyncopeUser user) {\n         final Set<String> result = new HashSet<String>();\n \n-        for (HistoricActivityInstance task\n-                : historyService.createHistoricActivityInstanceQuery().executionId(user.getWorkflowId()).list()) {\n+        for (HistoricActivityInstance task : historyService.createHistoricActivityInstanceQuery().\n+                processInstanceId(user.getWorkflowId()).list()) {\n \n             result.add(task.getActivityId());\n         }\n \n         return result;\n     }\n \n+    protected void cleanupHistory(final SyncopeUser user) {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        List<String> taskIds = jdbcTemplate.queryForList(\n+                \"SELECT TASK_ID_ FROM ACT_HI_VARINST WHERE NAME_='\" + TASK_IS_FORM\n+                + \"' AND LONG_=1 AND PROC_INST_ID_='\" + user.getWorkflowId() + \"'\", String.class);\n+\n+        StringBuilder update = new StringBuilder();\n+\n+        update.append(\"DELETE FROM ACT_HI_VARINST WHERE PROC_INST_ID_='\").append(user.getWorkflowId()).append(\"' \");\n+        for (String taskId : taskIds) {\n+            update.append(\"AND TASK_ID_<>'\").append(taskId).append(\"' \");\n+        }\n+        jdbcTemplate.execute(update.toString());\n+\n+        update.setLength(0);\n+        update.append(\"DELETE FROM ACT_HI_TASKINST WHERE PROC_INST_ID_='\").append(user.getWorkflowId()).append(\"' \");\n+        for (String taskId : taskIds) {\n+            update.append(\"AND ID_<>'\").append(taskId).append(\"' \");\n+        }\n+        jdbcTemplate.execute(update.toString());\n+\n+        update.setLength(0);\n+        update.append(\"DELETE FROM ACT_HI_ACTINST WHERE PROC_INST_ID_='\").append(user.getWorkflowId()).append(\"' \");\n+        for (String taskId : taskIds) {\n+            update.append(\"AND TASK_ID_<>'\").append(taskId).append(\"' \");\n+        }\n+        jdbcTemplate.execute(update.toString());\n+    }\n+\n     /**\n      * Saves resources to be propagated and password for later - after form submission - propagation.\n      */\n@@ -293,8 +328,12 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n \n         saveForFormSubmit(user, userTO.getPassword(), propByRes);\n \n+        Set<String> tasks = getPerformedTasks(user);\n+\n+        cleanupHistory(user);\n+\n         return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new SimpleEntry<Long, Boolean>(user.getId(), propagateEnable), propByRes, getPerformedTasks(user));\n+                new SimpleEntry<Long, Boolean>(user.getId(), propagateEnable), propByRes, tasks);\n     }\n \n     protected Set<String> doExecuteTask(final SyncopeUser user, final String task,\n@@ -333,6 +372,9 @@ protected Set<String> doExecuteTask(final SyncopeUser user, final String task,\n         Set<String> postTasks = getPerformedTasks(user);\n         postTasks.removeAll(preTasks);\n         postTasks.add(task);\n+\n+        cleanupHistory(user);\n+\n         return postTasks;\n     }\n \n@@ -733,11 +775,11 @@ public List<WorkflowFormTO> getForms() {\n     @Override\n     public List<WorkflowFormTO> getForms(final String workflowId, final String name) {\n         List<WorkflowFormTO> forms = getForms(\n-                taskService.createTaskQuery().processInstanceId(workflowId).taskName(name).\n-                taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n+                taskService.createTaskQuery().processInstanceId(workflowId).\n+                taskName(name).taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE));\n \n-        forms.addAll(getForms(historyService.createHistoricTaskInstanceQuery().taskName(name).\n-                taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n+        forms.addAll(getForms(historyService.createHistoricTaskInstanceQuery().processInstanceId(workflowId).\n+                taskName(name).taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n \n         return forms;\n     }\n@@ -794,6 +836,9 @@ protected Map.Entry<Task, TaskFormData> checkTask(final String taskId, final Str\n         Task task;\n         try {\n             task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+            if (task == null) {\n+                throw new ActivitiException(\"NULL result\");\n+            }\n         } catch (ActivitiException e) {\n             throw new NotFoundException(\"Activiti Task \" + taskId, e);\n         }\n@@ -906,6 +951,8 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n             }\n         }\n \n+        cleanupHistory(user);\n+\n         return new WorkflowResult<UserMod>(userMod, propByRes, postTasks);\n     }\n }"}]}