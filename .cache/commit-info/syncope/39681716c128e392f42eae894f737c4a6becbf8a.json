{"sha":"39681716c128e392f42eae894f737c4a6becbf8a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM5NjgxNzE2YzEyOGUzOTJmNDJlYWU4OTRmNzM3YzRhNmJlY2JmOGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-11T14:26:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-11T14:26:07Z"},"message":"[SYNCOPE-172] Initial refactoring of original SchemaMapping into UMapping / RMapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/DEV_ROLE_PROVISIONING@1408001 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f1b0e48d161a695bae549e7ff27fb4a619efebd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0f1b0e48d161a695bae549e7ff27fb4a619efebd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/39681716c128e392f42eae894f737c4a6becbf8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39681716c128e392f42eae894f737c4a6becbf8a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39681716c128e392f42eae894f737c4a6becbf8a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39681716c128e392f42eae894f737c4a6becbf8a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b3e3b88e7ca849ea5c5823af19ee363803cff4c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b3e3b88e7ca849ea5c5823af19ee363803cff4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b3e3b88e7ca849ea5c5823af19ee363803cff4c"}],"stats":{"total":3937,"additions":2087,"deletions":1850},"files":[{"sha":"79d5ddb60dc41ea78d901eff1924a29ba4215a41","filename":"archetype/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -25,7 +25,7 @@ under the License.\n   <parent>\n     <groupId>org.apache.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>1.1.0-incubating-SNAPSHOT</version>\n+    <version>1.1.0-RP-SNAPSHOT</version>\n   </parent>\n \n   <name>Apache Syncope Archetype</name>"},{"sha":"94e4629e907c0f0434457bacf759bdeb98cfcdb7","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -72,33 +72,6 @@ under the License.\n       <artifactId>spring-security-config</artifactId>\r\n     </dependency>\r\n \r\n-    <dependency>\r\n-      <groupId>org.apache.geronimo.specs</groupId> \r\n-      <artifactId>geronimo-jpa_2.0_spec</artifactId> \r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.openjpa</groupId>\r\n-      <artifactId>openjpa-jdbc</artifactId>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.openjpa</groupId>\r\n-      <artifactId>openjpa-persistence-jdbc</artifactId>\r\n-    </dependency>\r\n-\r\n-    <dependency>\r\n-      <groupId>javax.validation</groupId>\r\n-      <artifactId>validation-api</artifactId>\r\n-    </dependency>\r\n-    <dependency>\r\n-      <groupId>org.apache.bval</groupId>\r\n-      <artifactId>bval-jsr303</artifactId>\r\n-    </dependency>\r\n-\r\n-    <dependency>\r\n-      <groupId>org.codehaus.groovy</groupId>\r\n-      <artifactId>groovy-all</artifactId>\r\n-    </dependency>\r\n-\r\n     <!-- TEST -->\r\n     <dependency>\r\n       <groupId>org.apache.syncope</groupId>\r"},{"sha":"c0990b9ca373f5ad5eb81a9265b7e052324ba1fd","filename":"build-tools/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/build-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/build-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -25,7 +25,7 @@ under the License.\n   <parent>\n     <groupId>org.apache.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>1.1.0-incubating-SNAPSHOT</version>\n+    <version>1.1.0-RP-SNAPSHOT</version>\n   </parent>\n \n   <name>Apache Syncope Build Tools</name>"},{"sha":"d784f4e4ac8579789b5ccddb333443d3adb516f6","filename":"client/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -25,7 +25,7 @@ under the License.\n   <parent>\n     <groupId>org.apache.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>1.1.0-incubating-SNAPSHOT</version>\n+    <version>1.1.0-RP-SNAPSHOT</version>\n   </parent>\n \n   <name>Apache Syncope Client</name>\n@@ -48,7 +48,7 @@ under the License.\n       <groupId>commons-lang</groupId>\n       <artifactId>commons-lang</artifactId>\n     </dependency>\n-\n+    \n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-webmvc</artifactId>"},{"sha":"8bf03c021a94c876a23f96d1ba52f18b7d8aa9cd","filename":"client/src/main/java/org/apache/syncope/client/to/MappingItemTO.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingItemTO.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -21,14 +21,15 @@\n import org.apache.syncope.client.AbstractBaseBean;\n import org.apache.syncope.types.IntMappingType;\n \n-public class SchemaMappingTO extends AbstractBaseBean {\n+public class MappingItemTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2983498836767176862L;\n \n     private Long id;\n \n     /**\n-     * Attribute schema to be mapped.\n-     * Consider that we can associate tha same attribute schema more\n-     * than once, with different aliases, to different resource attributes.\n+     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\n+     * different aliases, to different resource attributes.\n      */\n     private String intAttrName;\n ","previous_filename":"client/src/main/java/org/apache/syncope/client/to/SchemaMappingTO.java"},{"sha":"3b7408b722fb852e1ebd4332b0b710470e66d33a","filename":"client/src/main/java/org/apache/syncope/client/to/MappingTO.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMappingTO.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.syncope.client.AbstractBaseBean;\n+import org.apache.syncope.types.IntMappingType;\n+\n+public class MappingTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 8447688036282611118L;\n+\n+    private String accountLink;\n+\n+    private List<MappingItemTO> items;\n+\n+    public MappingTO() {\n+        super();\n+\n+        items = new ArrayList<MappingItemTO>();\n+    }\n+\n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n+    public <T extends MappingItemTO> T getAccountIdItem() {\n+        T accountIdItem = null;\n+        for (MappingItemTO item : getItems()) {\n+            if (item.isAccountid()) {\n+                accountIdItem = (T) item;\n+            }\n+        }\n+        return accountIdItem;\n+    }\n+\n+    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n+        }\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n+        }\n+\n+        accountIdItem.setExtAttrName(\"__NAME__\");\n+        accountIdItem.setAccountid(true);\n+\n+        return this.addItem(accountIdItem);\n+    }\n+\n+    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\n+        if (accountIdItem == null) {\n+            return this.removeItem(getAccountIdItem());\n+        } else {\n+            return addAccountIdItem(accountIdItem);\n+        }\n+    }\n+\n+    public MappingItemTO getPasswordItem() {\n+        MappingItemTO passwordItem = null;\n+        for (MappingItemTO item : getItems()) {\n+            if (item.isPassword()) {\n+                passwordItem = item;\n+            }\n+        }\n+        return passwordItem;\n+    }\n+\n+    public boolean setPasswordItem(final MappingItemTO passwordItem) {\n+        if (passwordItem == null) {\n+            return this.removeItem(getPasswordItem());\n+        } else {\n+            passwordItem.setExtAttrName(\"__PASSWORD__\");\n+            passwordItem.setPassword(true);\n+            return addItem(passwordItem);\n+        }\n+    }\n+\n+    public <T extends MappingItemTO> List<T> getItems() {\n+        return (List<T>) items;\n+    }\n+\n+    public boolean addItem(final MappingItemTO item) {\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+    }\n+\n+    public boolean removeItem(final MappingItemTO item) {\n+        return this.items.remove(item);\n+    }\n+\n+    public void setItems(final Collection<MappingItemTO> items) {\n+        this.items.clear();\n+        if (items != null && !items.isEmpty()) {\n+            this.items.addAll(items);\n+        }\n+    }\n+}"},{"sha":"12811c0e6b45647d1e40125d46f4a86e009da860","filename":"client/src/main/java/org/apache/syncope/client/to/ResourceTO.java","status":"modified","additions":20,"deletions":32,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.client.to;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.AbstractBaseBean;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -41,12 +39,9 @@ public class ResourceTO extends AbstractBaseBean {\n      */\n     private Long connectorId;\n \n-    /**\n-     * Attribute mappings.\n-     */\n-    private List<SchemaMappingTO> mappings;\n+    private MappingTO umapping;\n \n-    private String accountLink;\n+    private MappingTO rmapping;\n \n     private boolean propagationPrimary;\n \n@@ -77,7 +72,8 @@ public class ResourceTO extends AbstractBaseBean {\n     private String actionsClassName;\n \n     public ResourceTO() {\n-        mappings = new ArrayList<SchemaMappingTO>();\n+        super();\n+\n         connConfProperties = new HashSet<ConnConfProperty>();\n         propagationMode = PropagationMode.TWO_PHASES;\n         propagationPriority = 0;\n@@ -88,6 +84,14 @@ public ResourceTO() {\n         syncTraceLevel = TraceLevel.ALL;\n     }\n \n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     public boolean isEnforceMandatoryCondition() {\n         return enforceMandatoryCondition;\n     }\n@@ -104,36 +108,20 @@ public void setConnectorId(Long connectorId) {\n         this.connectorId = connectorId;\n     }\n \n-    public boolean addMapping(SchemaMappingTO mapping) {\n-        return mappings.add(mapping);\n+    public MappingTO getUmapping() {\n+        return umapping;\n     }\n \n-    public boolean removeMapping(SchemaMappingTO mapping) {\n-        return mappings.remove(mapping);\n+    public void setUmapping(MappingTO umapping) {\n+        this.umapping = umapping;\n     }\n \n-    public List<SchemaMappingTO> getMappings() {\n-        return mappings;\n+    public MappingTO getRmapping() {\n+        return rmapping;\n     }\n \n-    public void setMappings(List<SchemaMappingTO> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    public String getAccountLink() {\n-        return accountLink;\n-    }\n-\n-    public void setAccountLink(String accountLink) {\n-        this.accountLink = accountLink;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n+    public void setRmapping(MappingTO rmapping) {\n+        this.rmapping = rmapping;\n     }\n \n     public boolean isPropagationPrimary() {"},{"sha":"aff1523bdc95592fdca8420aec10c1458684e405","filename":"client/src/main/java/org/apache/syncope/types/EntityViolationType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -23,6 +23,7 @@ public enum EntityViolationType {\n     Standard(\"\"),\n     InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\n     InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\n+    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\n     InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\n     InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\n     InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\n@@ -40,7 +41,6 @@ public enum EntityViolationType {\n     InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\n     InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\n     InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\n-    InvalidSchemaMapping(\"org.apache.syncope.core.validation.mapping\"),\n     InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\n     InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\n     InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),"},{"sha":"c9495b1433419d9555a3b7a7f3f08dd629a0a6ec","filename":"console/pom.xml","status":"modified","additions":3,"deletions":25,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -25,7 +25,7 @@ under the License.\n   <parent>\n     <groupId>org.apache.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>1.1.0-incubating-SNAPSHOT</version>\n+    <version>1.1.0-RP-SNAPSHOT</version>\n   </parent>\n \n   <name>Apache Syncope Console</name>\n@@ -51,18 +51,6 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n-    <!-- Only needed for running core -->\n-    <dependency>\n-      <groupId>org.apache.openjpa</groupId>\n-      <artifactId>openjpa-all</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.codehaus.groovy</groupId>\n-      <artifactId>groovy-all</artifactId>\n-      <scope>provided</scope>\n-    </dependency>\n-\n     <dependency>\n       <groupId>javax.servlet</groupId>\n       <artifactId>servlet-api</artifactId>\n@@ -287,16 +275,6 @@ under the License.\n                 <groupId>com.h2database</groupId>\n                 <artifactId>h2</artifactId>\n               </dependency>\n-\n-              <dependency>\n-                <groupId>org.apache.openjpa</groupId>\n-                <artifactId>openjpa-all</artifactId>\n-              </dependency>\n-\n-              <dependency>\n-                <groupId>org.codehaus.groovy</groupId>\n-                <artifactId>groovy-all</artifactId>\n-              </dependency>\n             </dependencies>\n           </container>\n           <configuration>\n@@ -306,7 +284,7 @@ under the License.\n               <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\n               <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\n \n-              <!--                            <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n+              <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n               <cargo.jvmargs>-noverify ${javaagent} -Drebel.spring_plugin=false -Xms512m -Xmx1024m -XX:PermSize=512m -XX:MaxPermSize=1024m</cargo.jvmargs>\n             </properties>\n             <configfiles>\n@@ -546,7 +524,7 @@ under the License.\n               </execution>\n               <execution>\n                 <id>stop-container</id>\n-                <phase>post-integration-test</phase>\n+                <phase>post-integratison-test</phase>\n                 <goals>\n                   <goal>stop</goal>\n                 </goals>"},{"sha":"9fbca37453304ab9854d526a82ca8bdaad731b22","filename":"console/src/main/java/org/apache/syncope/console/commons/StatusUtils.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -23,17 +23,17 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.client.to.ConnObjectTO;\n+import org.apache.syncope.client.to.MappingItemTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.syncope.types.IntMappingType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n public class StatusUtils {\n \n@@ -131,8 +131,8 @@ public StatusBean getRemoteStatus(final ConnObjectTO objectTO) {\n             final StatusUtils.Status status = enabled == null\n                     ? StatusUtils.Status.UNDEFINED\n                     : enabled\n-                            ? StatusUtils.Status.ACTIVE\n-                            : StatusUtils.Status.SUSPENDED;\n+                    ? StatusUtils.Status.ACTIVE\n+                    : StatusUtils.Status.SUSPENDED;\n \n             final String accountLink = getAccountLink(objectTO);\n \n@@ -172,10 +172,12 @@ public String getAccountLink(final ConnObjectTO objectTO) {\n     public Map.Entry<IntMappingType, String> getAccountId(final ResourceTO resourceTO) {\n         Map.Entry<IntMappingType, String> accountId = null;\n \n-        for (SchemaMappingTO mapping : resourceTO.getMappings()) {\n-            if (mapping.isAccountid()) {\n-                accountId = new AbstractMap.SimpleEntry<IntMappingType, String>(mapping.getIntMappingType(), mapping\n-                        .getIntAttrName());\n+        if (resourceTO.getUmapping() != null) {\n+            for (MappingItemTO item : resourceTO.getUmapping().getItems()) {\n+                if (item.isAccountid()) {\n+                    accountId = new AbstractMap.SimpleEntry<IntMappingType, String>(\n+                            item.getIntMappingType(), item.getIntAttrName());\n+                }\n             }\n         }\n "},{"sha":"181daf84c7bf685fdb60c52a6672d72a9178a769","filename":"console/src/main/java/org/apache/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages;\n \n+import org.apache.syncope.client.to.MappingItemTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.console.commons.CloseOnESCBehavior;\n import org.apache.syncope.console.pages.panels.ResourceConnConfPanel;\n import org.apache.syncope.console.pages.panels.ResourceDetailsPanel;\n@@ -91,8 +91,8 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n                 int accountIdCount = 0;\n \n-                for (SchemaMappingTO mapping : resourceTO.getMappings()) {\n-                    if (mapping.isAccountid()) {\n+                for (MappingItemTO item : resourceTO.getUmapping().getItems()) {\n+                    if (item.isAccountid()) {\n                         accountIdCount++;\n                     }\n                 }"},{"sha":"17b37ece2a2d55471a40a5af24d33a70ef51a213","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceMappingPanel.java","status":"modified","additions":53,"deletions":49,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,13 +18,27 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.client.to.ConnInstanceTO;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n+import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.console.pages.panels.ResourceConnConfPanel.ConnConfModEvent;\n+import org.apache.syncope.console.rest.ConnectorRestClient;\n+import org.apache.syncope.console.rest.SchemaRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.types.AttributableType;\n+import org.apache.syncope.types.ConnConfProperty;\n+import org.apache.syncope.types.IntMappingType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.IAjaxCallDecorator;\n import org.apache.wicket.ajax.calldecorator.AjaxPreprocessingCallDecorator;\n@@ -43,20 +57,6 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n-import org.apache.syncope.console.pages.panels.ResourceConnConfPanel.ConnConfModEvent;\n-import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.IntMappingType;\n \n /**\n  * Resource mapping panel.\n@@ -114,7 +114,7 @@ public class ResourceMappingPanel extends Panel {\n      * Mapping container.\n      */\n     private final transient WebMarkupContainer mappingContainer;\n-    \n+\n     /**\n      * AccountLink container.\n      */\n@@ -152,30 +152,33 @@ public ResourceMappingPanel(final String panelid, final ResourceTO resourceTO) {\n         setOutputMarkupId(true);\n \n         this.resourceTO = resourceTO;\n+        if (resourceTO.getUmapping() == null) {\n+            resourceTO.setUmapping(new MappingTO());\n+        }\n \n         initResourceSchemaNames();\n-        \n+\n         accountLinkContainer = new WebMarkupContainer(\"accountLinkContainer\");\n         accountLinkContainer.setOutputMarkupId(true);\n         add(accountLinkContainer);\n \n         boolean accountLinkEnabled = false;\n-        if (resourceTO.getAccountLink() != null) {\n+        if (resourceTO.getUmapping().getAccountLink() != null) {\n             accountLinkEnabled = true;\n         }\n-        final AjaxCheckBoxPanel accountLinkCheckbox = new AjaxCheckBoxPanel(\"accountLinkCheckbox\", \n-                        new ResourceModel(\"accountLinkCheckbox\", \"accountLinkCheckbox\").getObject(),\n-                        new Model<Boolean>(Boolean.valueOf(accountLinkEnabled)));\n+        final AjaxCheckBoxPanel accountLinkCheckbox = new AjaxCheckBoxPanel(\"accountLinkCheckbox\",\n+                new ResourceModel(\"accountLinkCheckbox\", \"accountLinkCheckbox\").getObject(),\n+                new Model<Boolean>(Boolean.valueOf(accountLinkEnabled)));\n         accountLinkCheckbox.setEnabled(true);\n-        \n+\n         accountLinkContainer.add(accountLinkCheckbox);\n \n         final AjaxTextFieldPanel accountLink = new AjaxTextFieldPanel(\"accountLink\", new ResourceModel(\"accountLink\",\n-                \"accountLink\").getObject(), new PropertyModel<String>(resourceTO, \"accountLink\"));\n+                \"accountLink\").getObject(), new PropertyModel<String>(resourceTO.getUmapping(), \"accountLink\"));\n         accountLink.setEnabled(accountLinkEnabled);\n-        \n+\n         accountLinkContainer.add(accountLink);\n-        \n+\n         accountLinkCheckbox.getField().add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -189,31 +192,31 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     accountLink.setEnabled(Boolean.FALSE);\n                     accountLink.setModelObject(\"\");\n                 }\n-                \n+\n                 target.add(accountLink);\n             }\n         });\n-        \n+\n \n         mappingContainer = new WebMarkupContainer(\"mappingContainer\");\n         mappingContainer.setOutputMarkupId(true);\n         add(mappingContainer);\n \n-        mappings = new ListView<SchemaMappingTO>(\"mappings\", resourceTO.getMappings()) {\n+        mappings = new ListView<MappingItemTO>(\"mappings\", resourceTO.getUmapping().getItems()) {\n \n             /**\n              * Serial version UID.\n              */\n             private static final long serialVersionUID = 4949588177564901031L;\n \n             @Override\n-            protected void populateItem(final ListItem<SchemaMappingTO> item) {\n+            protected void populateItem(final ListItem<MappingItemTO> item) {\n \n-                final SchemaMappingTO mappingTO = item.getModelObject();\n+                final MappingItemTO mapItem = item.getModelObject();\n \n                 final AttributableType entity;\n-                if (mappingTO.getIntMappingType() != null) {\n-                    entity = mappingTO.getIntMappingType().getAttributableType();\n+                if (mapItem.getIntMappingType() != null) {\n+                    entity = mapItem.getIntMappingType().getAttributableType();\n                 } else {\n                     entity = null;\n                 }\n@@ -227,14 +230,14 @@ protected void populateItem(final ListItem<SchemaMappingTO> item) {\n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n                         int index = -1;\n-                        for (int i = 0; i < resourceTO.getMappings().size() && index == -1; i++) {\n-                            if (mappingTO.equals(resourceTO.getMappings().get(i))) {\n+                        for (int i = 0; i < resourceTO.getUmapping().getItems().size() && index == -1; i++) {\n+                            if (mapItem.equals(resourceTO.getUmapping().getItems().get(i))) {\n                                 index = i;\n                             }\n                         }\n \n                         if (index != -1) {\n-                            resourceTO.getMappings().remove(index);\n+                            resourceTO.getUmapping().getItems().remove(index);\n                             item.getParent().removeAll();\n                             target.add(mappingContainer);\n                         }\n@@ -257,15 +260,16 @@ public CharSequence preDecorateScript(final CharSequence script) {\n                 });\n \n                 final AjaxDropDownChoicePanel<String> intAttrNames = new AjaxDropDownChoicePanel<String>(\"intAttrNames\",\n-                        getString(\"intAttrNames\"), new PropertyModel<String>(mappingTO, \"intAttrName\"));\n+                        getString(\"intAttrNames\"), new PropertyModel<String>(mapItem, \"intAttrName\"));\n                 intAttrNames.setChoices(schemaNames);\n                 intAttrNames.setRequired(true);\n                 intAttrNames.setStyleSheet(fieldStyle);\n                 item.add(intAttrNames);\n \n-                final AjaxDropDownChoicePanel<IntMappingType> typesPanel = new AjaxDropDownChoicePanel<IntMappingType>(\"intMappingTypes\",\n+                final AjaxDropDownChoicePanel<IntMappingType> typesPanel = new AjaxDropDownChoicePanel<IntMappingType>(\n+                        \"intMappingTypes\",\n                         new ResourceModel(\"intMappingTypes\", \"intMappingTypes\").getObject(),\n-                        new PropertyModel<IntMappingType>(mappingTO, \"intMappingType\"));\n+                        new PropertyModel<IntMappingType>(mapItem, \"intMappingType\"));\n \n                 // typesPanel onChange behavior provided below ...\n \n@@ -305,16 +309,16 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                 if (schemaNames.isEmpty()) {\n                     extAttrName = new AjaxTextFieldPanel(\"extAttrName\", new ResourceModel(\"extAttrNames\",\n-                            \"extAttrNames\").getObject(), new PropertyModel<String>(mappingTO, \"extAttrName\"));\n+                            \"extAttrNames\").getObject(), new PropertyModel<String>(mapItem, \"extAttrName\"));\n \n                 } else {\n                     extAttrName = new AjaxDropDownChoicePanel<String>(\"extAttrName\", new ResourceModel(\"extAttrNames\",\n-                            \"extAttrNames\").getObject(), new PropertyModel(mappingTO, \"extAttrName\"));\n+                            \"extAttrNames\").getObject(), new PropertyModel(mapItem, \"extAttrName\"));\n                     ((AjaxDropDownChoicePanel) extAttrName).setChoices(schemaNames);\n                 }\n \n                 boolean required = false;\n-                if (mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword()) {\n+                if (mapItem != null && !mapItem.isAccountid() && !mapItem.isPassword()) {\n                     required = true;\n                 }\n \n@@ -326,7 +330,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 item.add(extAttrName);\n \n                 final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\"mandatoryCondition\", new ResourceModel(\n-                        \"mandatoryCondition\", \"mandatoryCondition\").getObject(), new PropertyModel(mappingTO,\n+                        \"mandatoryCondition\", \"mandatoryCondition\").getObject(), new PropertyModel(mapItem,\n                         \"mandatoryCondition\"));\n \n                 mandatory.setChoices(Arrays.asList(new String[]{\"true\", \"false\"}));\n@@ -336,15 +340,15 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 item.add(mandatory);\n \n                 final AjaxCheckBoxPanel accountId = new AjaxCheckBoxPanel(\"accountId\", new ResourceModel(\"accountId\",\n-                        \"accountId\").getObject(), new PropertyModel(mappingTO, \"accountid\"));\n+                        \"accountId\").getObject(), new PropertyModel(mapItem, \"accountid\"));\n \n                 accountId.getField().add(new AjaxFormComponentUpdatingBehavior(onchange) {\n \n                     private static final long serialVersionUID = -1107858522700306810L;\n \n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n-                        extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());\n+                        extAttrName.setEnabled(!accountId.getModelObject() && !mapItem.isPassword());\n                         extAttrName.setModelObject(null);\n                         extAttrName.setRequired(!accountId.getModelObject());\n                         target.add(extAttrName);\n@@ -354,15 +358,15 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 item.add(accountId);\n \n                 final AjaxCheckBoxPanel password = new AjaxCheckBoxPanel(\"password\", new ResourceModel(\"password\",\n-                        \"password\").getObject(), new PropertyModel(mappingTO, \"password\"));\n+                        \"password\").getObject(), new PropertyModel(mapItem, \"password\"));\n \n                 password.getField().add(new AjaxFormComponentUpdatingBehavior(onchange) {\n \n                     private static final long serialVersionUID = -1107858522700306810L;\n \n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n-                        extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());\n+                        extAttrName.setEnabled(!mapItem.isAccountid() && !password.getModelObject());\n                         extAttrName.setModelObject(null);\n                         extAttrName.setRequired(!password.getModelObject());\n                         target.add(extAttrName);\n@@ -388,8 +392,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     }\n                 });\n \n-                setAttrNames(mappingTO.getIntMappingType(), intAttrNames);\n-                setAccountId(mappingTO.getIntMappingType(), accountId, password);\n+                setAttrNames(mapItem.getIntMappingType(), intAttrNames);\n+                setAccountId(mapItem.getIntMappingType(), accountId, password);\n             }\n         };\n \n@@ -402,7 +406,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                resourceTO.getMappings().add(new SchemaMappingTO());\n+                resourceTO.getUmapping().getItems().add(new MappingItemTO());\n                 target.add(mappingContainer);\n             }\n "},{"sha":"70f70ef0d4b049157b0b3fad27f9885503411268","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -77,9 +77,13 @@ under the License.\n           <key>\n             <value>http.protocol.handle-authentication</value>\n           </key>\n-          <value type=\"java.lang.Boolean\">\n-            false\n-          </value>\n+          <value type=\"java.lang.Boolean\">false</value>\n+        </entry>\n+        <entry>\n+          <key>\n+            <value>http.auth.credential-charset</value>\n+          </key>\n+          <value type=\"java.lang.String\">false</value>\n         </entry>\n       </map>\n     </property>"},{"sha":"5f6b4a28b89053bb0e9c24907efe385347e2675b","filename":"console/src/test/java/org/apache/syncope/console/AbstractTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FAbstractTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -28,7 +28,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:applicationContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:applicationContext.xml\"})\n public abstract class AbstractTest extends SeleneseTestCase {\n \n     /**\n@@ -45,7 +45,6 @@ public abstract class AbstractTest extends SeleneseTestCase {\n     @Override\n     @Before\n     public void setUp() throws Exception {\n-\n         super.setUp(BASE_URL, \"*firefox\");\n \n         selenium.open(\"/syncope-console/\");\n@@ -59,7 +58,6 @@ public void setUp() throws Exception {\n     @Override\n     @After\n     public void tearDown() throws Exception {\n-\n         selenium.click(\"css=img[alt=\\\"Logout\\\"]\");\n         selenium.stop();\n         super.tearDown();"},{"sha":"781fa451febbc64d5b7bef0d64f4cf139f8467ed","filename":"console/src/test/java/org/apache/syncope/console/UserTestITCase.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -31,8 +31,7 @@ public void browseCreateModal() {\n \n         selenium.click(\"//a[contains(text(),'Create new user')]\");\n \n-        selenium\n-                .waitForCondition(\"selenium.isElementPresent(\" + \"\\\"//span[contains(text(),'Attributes')]\\\");\", \"30000\");\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"//span[contains(text(),'Attributes')]\\\");\", \"30000\");\n \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n@@ -73,8 +72,7 @@ public void search() {\n         selenium.click(\"link=Search\");\n         selenium.select(\"//td[3]/select\", \"label=MEMBERSHIP\");\n \n-        selenium\n-                .waitForCondition(\"selenium.isElementPresent(\" + \"\\\"//td[4]/select[option='8 otherchild']\\\");\", \"30000\");\n+        selenium.waitForCondition(\"selenium.isElementPresent(\\\"//td[4]/select[option='8 otherchild']\\\");\", \"30000\");\n \n         selenium.select(\"//td[4]/select\", \"label=8 otherchild\");\n         selenium.click(\"name=search\");\n@@ -96,9 +94,6 @@ public void delete() {\n \n         selenium.click(\"//span/span/div/a\");\n \n-        // it depends on the execution order of tests: resources\n-        // 'ws-target-resource-delete' could have been deleted from\n-        // ResourceTestITCase#delete\n         selenium.waitForCondition(\"selenium.isTextPresent(\" + \"\\\"Operation executed successfully\\\");\", \"30000\");\n     }\n }"},{"sha":"dd9eb1ef29667076d384a0bcd9e604b15c033436","filename":"core/pom.xml","status":"modified","additions":3,"deletions":51,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -25,7 +25,7 @@ under the License.\n   <parent>\n     <groupId>org.apache.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>1.1.0-incubating-SNAPSHOT</version>\n+    <version>1.1.0-RP-SNAPSHOT</version>\n   </parent>\n \n   <name>Apache Syncope Core</name>\n@@ -208,40 +208,33 @@ under the License.\n \n     <dependency>\n       <groupId>org.apache.geronimo.specs</groupId> \n-      <artifactId>geronimo-jpa_2.0_spec</artifactId> \n-      <scope>provided</scope>\n+      <artifactId>geronimo-jpa_2.0_spec</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.openjpa</groupId>\n-      <artifactId>openjpa-all</artifactId>\n-      <scope>provided</scope>\n+      <artifactId>openjpa</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.openjpa</groupId>\n       <artifactId>openjpa-jdbc</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.openjpa</groupId>\n       <artifactId>openjpa-persistence-jdbc</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n \n     <dependency>\n       <groupId>javax.validation</groupId>\n       <artifactId>validation-api</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.bval</groupId>\n       <artifactId>bval-jsr303</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n \n     <dependency>\n       <groupId>org.codehaus.groovy</groupId>\n       <artifactId>groovy-all</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n \n     <dependency>\n@@ -259,7 +252,6 @@ under the License.\n     <dependency>\n       <groupId>commons-logging</groupId>\n       <artifactId>commons-logging</artifactId>\n-      <scope>provided</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n@@ -492,16 +484,6 @@ under the License.\n                 <groupId>${jdbcdriver.groupId}</groupId>\n                 <artifactId>${jdbcdriver.artifactId}</artifactId>\n               </dependency>\n-              \n-              <dependency>\n-                <groupId>org.apache.openjpa</groupId>\n-                <artifactId>openjpa-all</artifactId>\n-              </dependency>\n-\n-              <dependency>\n-                <groupId>org.codehaus.groovy</groupId>\n-                <artifactId>groovy-all</artifactId>\n-              </dependency>\n             </dependencies>            \n           </container>\n           <configuration>\n@@ -1030,16 +1012,6 @@ under the License.\n       <id>glassfish-it</id>\n       \n       <dependencies>\n-        <dependency>\n-          <groupId>org.apache.openjpa</groupId>\n-          <artifactId>openjpa-all</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.codehaus.groovy</groupId>\n-          <artifactId>groovy-all</artifactId>\n-        </dependency>\n-\n         <dependency>\n           <groupId>com.h2database</groupId>\n           <artifactId>h2</artifactId>\n@@ -1084,16 +1056,6 @@ under the License.\n       <id>jboss-it</id>\n       \n       <dependencies>\n-        <dependency>\n-          <groupId>org.apache.openjpa</groupId>\n-          <artifactId>openjpa-all</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.codehaus.groovy</groupId>\n-          <artifactId>groovy-all</artifactId>\n-        </dependency>\n-\n         <dependency>\n           <groupId>com.h2database</groupId>\n           <artifactId>h2</artifactId>\n@@ -1173,16 +1135,6 @@ under the License.\n       </properties>\n       \n       <dependencies>\n-        <dependency>\n-          <groupId>org.apache.openjpa</groupId>\n-          <artifactId>openjpa-all</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.codehaus.groovy</groupId>\n-          <artifactId>groovy-all</artifactId>\n-        </dependency>\n-\n         <dependency>\n           <groupId>com.h2database</groupId>\n           <artifactId>h2</artifactId>"},{"sha":"e01baf74693a72cc3f04e714b358a8ef9fae82f7","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -213,7 +213,7 @@ public void unregisterJob(final Report report) {\n         unregisterJob(getJobName(report));\n     }\n \n-    @Transactional\n+    @Transactional(readOnly = true)\n     public void load() {\n         // 1. jobs for SchedTasks\n         Set<SchedTask> tasks = new HashSet(taskDAO.findAll(SchedTask.class));"},{"sha":"0a87f94eee0965d033dfb5d5709e6c639e69d772","filename":"core/src/main/java/org/apache/syncope/core/init/LoggerLoader.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -22,14 +22,15 @@\n import ch.qos.logback.classic.LoggerContext;\n import java.util.HashMap;\n import java.util.Map;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n import org.apache.syncope.core.persistence.dao.LoggerDAO;\n import org.apache.syncope.types.SyncopeLoggerLevel;\n import org.apache.syncope.types.SyncopeLoggerType;\n+import org.slf4j.ILoggerFactory;\n+import org.slf4j.LoggerFactory;\n \n @Component\n public class LoggerLoader {\n@@ -48,7 +49,9 @@ public void load() {\n             loggerLogs.put(syncopeLogger.getName(), syncopeLogger);\n         }\n \n-        LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n+        ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();\n+\n+        LoggerContext lc = (LoggerContext) loggerFactory;\n \n         /*\n          * Traverse all defined Logback loggers: if there is a matching SyncopeLogger, set Logback level accordingly,"},{"sha":"7b7e6471a6c056de5102d253f1bfc54eb00855ca","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMapping.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans;\n+\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.types.IntMappingType;\n+import org.identityconnectors.framework.common.objects.Uid;\n+\n+@MappedSuperclass\n+@Cacheable\n+public abstract class AbstractMapping extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4316047254916259158L;\n+\n+    /**\n+     * A JEXL expression for determining how to find the account id in external resource's space.\n+     */\n+    private String accountLink;\n+\n+    public abstract Long getId();\n+\n+    public abstract void setResource(ExternalResource resource);\n+\n+    public abstract ExternalResource getResource();\n+\n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(final String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n+    public <T extends AbstractMappingItem> T getAccountIdItem() {\n+        T accountIdItem = null;\n+        for (AbstractMappingItem item : getItems()) {\n+            if (item.isAccountid()) {\n+                accountIdItem = (T) item;\n+            }\n+        }\n+        return accountIdItem;\n+    }\n+\n+    protected <T extends AbstractMappingItem> boolean addAccountIdItem(final T accountIdItem) {\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n+        }\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n+        }\n+\n+        accountIdItem.setExtAttrName(Uid.NAME);\n+        accountIdItem.setAccountid(true);\n+\n+        return this.addItem(accountIdItem);\n+    }\n+\n+    public abstract <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdItem);\n+\n+    public abstract <T extends AbstractMappingItem> List<T> getItems();\n+\n+    public abstract <T extends AbstractMappingItem> boolean addItem(T item);\n+\n+    public abstract <T extends AbstractMappingItem> boolean removeItem(T item);\n+\n+    public abstract <T extends AbstractMappingItem> void setItems(final List<T> items);\n+}"},{"sha":"554b1b24b764d746c7b507d896d3bb12ebe3295e","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMappingItem.java","status":"renamed","additions":51,"deletions":52,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -21,47 +21,38 @@\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.Column;\n-import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.core.persistence.validation.entity.SchemaMappingCheck;\n import org.apache.syncope.types.IntMappingType;\n \n-@Entity\n+@MappedSuperclass\n @Cacheable\n-@SchemaMappingCheck\n-public class SchemaMapping extends AbstractBaseBean {\n+public abstract class AbstractMappingItem extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 7383601853619332424L;\n \n-    @Id\n-    private Long id;\n-\n     @Column(nullable = true)\n     private String intAttrName;\n \n     @Column(nullable = false)\n     @Enumerated(EnumType.STRING)\n     private IntMappingType intMappingType;\n \n-    /**\n-     * Resource that has fields to be mapped over user attribute schemas.\n-     */\n-    @ManyToOne\n-    @NotNull\n-    private ExternalResource resource;\n-\n     /**\n      * Target resource's field to be mapped.\n      */\n     @Column(nullable = true)\n     private String extAttrName;\n \n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    @Column(nullable = false)\n+    private String mandatoryCondition;\n+\n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n@@ -80,69 +71,61 @@ public class SchemaMapping extends AbstractBaseBean {\n     @Max(1)\n     private Integer password;\n \n-    /**\n-     * Specify if the mapped target resource's field is nullable.\n-     */\n-    @Column(nullable = false)\n-    private String mandatoryCondition;\n-\n-    public SchemaMapping() {\n+    public AbstractMappingItem() {\n         super();\n \n+        mandatoryCondition = Boolean.FALSE.toString();\n+\n         accountid = getBooleanAsInteger(false);\n         password = getBooleanAsInteger(false);\n-        mandatoryCondition = Boolean.FALSE.toString();\n     }\n \n-    public Long getId() {\n-        return id;\n-    }\n+    public abstract Long getId();\n \n-    public boolean isAccountid() {\n-        return isBooleanAsInteger(accountid);\n-    }\n+    public abstract <T extends AbstractMapping> T getMapping();\n \n-    public void setAccountid(boolean accountid) {\n-        this.accountid = getBooleanAsInteger(accountid);\n-    }\n+    public abstract <T extends AbstractMapping> void setMapping(T mapping);\n \n     public String getExtAttrName() {\n         return extAttrName;\n     }\n \n-    public void setExtAttrName(String extAttrName) {\n+    public void setExtAttrName(final String extAttrName) {\n         this.extAttrName = extAttrName;\n     }\n \n     public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }\n \n-    public void setMandatoryCondition(String mandatoryCondition) {\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n         this.mandatoryCondition = mandatoryCondition;\n     }\n \n-    public boolean isPassword() {\n-        return isBooleanAsInteger(password);\n-    }\n+    public String getIntAttrName() {\n+        final String name;\n \n-    public void setPassword(boolean password) {\n-        this.password = getBooleanAsInteger(password);\n-    }\n+        switch (getIntMappingType()) {\n+            case SyncopeUserId:\n+                name = \"id\";\n+                break;\n \n-    public ExternalResource getResource() {\n-        return resource;\n-    }\n+            case Username:\n+                name = \"username\";\n+                break;\n \n-    public void setResource(ExternalResource resource) {\n-        this.resource = resource;\n-    }\n+            case Password:\n+                name = \"password\";\n+                break;\n \n-    public String getIntAttrName() {\n-        return intAttrName;\n+            default:\n+                name = intAttrName;\n+        }\n+\n+        return name;\n     }\n \n-    public void setIntAttrName(String intAttrName) {\n+    public void setIntAttrName(final String intAttrName) {\n         this.intAttrName = intAttrName;\n     }\n \n@@ -153,4 +136,20 @@ public IntMappingType getIntMappingType() {\n     public void setIntMappingType(IntMappingType intMappingType) {\n         this.intMappingType = intMappingType;\n     }\n+\n+    public boolean isAccountid() {\n+        return isBooleanAsInteger(accountid);\n+    }\n+\n+    public void setAccountid(boolean accountid) {\n+        this.accountid = getBooleanAsInteger(accountid);\n+    }\n+\n+    public boolean isPassword() {\n+        return isBooleanAsInteger(password);\n+    }\n+\n+    public void setPassword(boolean password) {\n+        this.password = getBooleanAsInteger(password);\n+    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SchemaMapping.java"},{"sha":"6b7f71c7a2c8c3fbb87ae4d96f6f5f961458125b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":26,"deletions":56,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -22,7 +22,6 @@\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Basic;\n-import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -32,25 +31,24 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToMany;\n-import javax.validation.Valid;\n+import javax.persistence.OneToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.client.util.XMLSerializer;\n+import org.apache.syncope.core.persistence.beans.role.RMapping;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.validation.entity.ExternalResourceCheck;\n import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.TraceLevel;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n /**\n- * A resource to which propagation occurs.\n+ * Resource for propagation and synchronization.\n  */\n @Entity\n-@Cacheable\n @ExternalResourceCheck\n public class ExternalResource extends AbstractBaseBean {\n \n@@ -79,17 +77,16 @@ public class ExternalResource extends AbstractBaseBean {\n     private ConnInstance connector;\n \n     /**\n-     * Attribute mappings.\n+     * Mapping for user objects.\n      */\n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n-    @Valid\n-    private Set<SchemaMapping> mappings;\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    private UMapping umapping;\n \n     /**\n-     * A JEXL expression for determining how to link user account id in Syncope DB to user account id in target\n-     * resource's DB.\n+     * Mapping for role objects.\n      */\n-    private String accountLink;\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    private RMapping rmapping;\n \n     /**\n      * Is this resource primary, for propagations?\n@@ -159,7 +156,6 @@ public ExternalResource() {\n         super();\n \n         enforceMandatoryCondition = getBooleanAsInteger(false);\n-        mappings = new HashSet<SchemaMapping>();\n         propagationPrimary = 0;\n         propagationPriority = 0;\n         propagationMode = PropagationMode.TWO_PHASES;\n@@ -186,6 +182,22 @@ public void setConnector(ConnInstance connector) {\n         this.connector = connector;\n     }\n \n+    public UMapping getUmapping() {\n+        return umapping;\n+    }\n+\n+    public void setUmapping(final UMapping umapping) {\n+        this.umapping = umapping;\n+    }\n+\n+    public RMapping getRmapping() {\n+        return rmapping;\n+    }\n+\n+    public void setRmapping(final RMapping rmapping) {\n+        this.rmapping = rmapping;\n+    }\n+\n     public boolean isPropagationPrimary() {\n         return isBooleanAsInteger(propagationPrimary);\n     }\n@@ -212,48 +224,6 @@ public void setPropagationMode(PropagationMode propagationMode) {\n         this.propagationMode = propagationMode;\n     }\n \n-    public Set<SchemaMapping> getMappings() {\n-        return mappings;\n-    }\n-\n-    public Set<SchemaMapping> getMappings(final String intAttrName, final IntMappingType intMappingType) {\n-        Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : mappings) {\n-            if (intAttrName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {\n-                result.add(mapping);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    public boolean removeMapping(final SchemaMapping mapping) {\n-        return mappings.remove(mapping);\n-    }\n-\n-    public boolean addMapping(final SchemaMapping mapping) {\n-        return mappings.contains(mapping) || mappings.add(mapping);\n-    }\n-\n-    public void setMappings(final Set<SchemaMapping> mappings) {\n-        for (SchemaMapping mapping : this.mappings) {\n-            mapping.setResource(null);\n-        }\n-        this.mappings.clear();\n-\n-        if (mappings != null) {\n-            this.mappings.addAll(mappings);\n-        }\n-    }\n-\n-    public String getAccountLink() {\n-        return accountLink;\n-    }\n-\n-    public void setAccountLink(final String accountLink) {\n-        this.accountLink = accountLink;\n-    }\n-\n     public String getName() {\n         return name;\n     }"},{"sha":"eb807c5c0da6d1963245d2b80ae2169145d5fddd","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -29,25 +29,30 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n public class MAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 3755864809152866489L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private Membership owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private MSchema schema;\n+\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<MAttrValue> values;\n+\n     @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n     @Valid\n     private MAttrUniqueValue uniqueValue;\n@@ -68,7 +73,7 @@ public <T extends AbstractAttributable> T getOwner() {\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         if (!(owner instanceof Membership)) {\n             throw new ClassCastException(\"owner is expected to be typed Membership: \" + owner.getClass().getName());\n         }\n@@ -81,7 +86,7 @@ public <T extends AbstractSchema> T getSchema() {\n     }\n \n     @Override\n-    public <T extends AbstractSchema> void setSchema(T schema) {\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n         if (!(schema instanceof MSchema)) {\n             throw new ClassCastException(\"schema is expected to be typed MSchema: \" + schema.getClass().getName());\n         }\n@@ -91,7 +96,8 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n         if (!(attributeValue instanceof MAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         attributeValue.setAttribute(this);\n         return values.add((MAttrValue) attributeValue);\n@@ -100,7 +106,8 @@ public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n         if (!(attributeValue instanceof MAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         boolean result = values.remove((MAttrValue) attributeValue);\n         attributeValue.setAttribute(null);\n@@ -132,7 +139,8 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n         if (!(uniqueAttributeValue instanceof MAttrUniqueValue)) {\n-            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed MAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed MAttrUniqueValue: \"\n+                    + uniqueAttributeValue.getClass().getName());\n         }\n         this.uniqueValue = (MAttrUniqueValue) uniqueAttributeValue;\n     }"},{"sha":"6a8b3ef404eabdd5c3c4431c59c9c4f8dee08092","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -29,25 +29,30 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n public class RAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 2848159565890995780L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeRole owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private RSchema schema;\n+\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<RAttrValue> values;\n+\n     @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n     @Valid\n     private RAttrUniqueValue uniqueValue;\n@@ -68,7 +73,7 @@ public <T extends AbstractAttributable> T getOwner() {\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         if (!(owner instanceof SyncopeRole)) {\n             throw new ClassCastException(\"owner is expected to be typed SyncopeRole: \" + owner.getClass().getName());\n         }\n@@ -81,7 +86,7 @@ public <T extends AbstractSchema> T getSchema() {\n     }\n \n     @Override\n-    public <T extends AbstractSchema> void setSchema(T schema) {\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n         if (!(schema instanceof RSchema)) {\n             throw new ClassCastException(\"schema is expected to be typed RSchema: \" + schema.getClass().getName());\n         }\n@@ -91,15 +96,17 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n         if (!(attributeValue instanceof RAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         return values.add((RAttrValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n         if (!(attributeValue instanceof RAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         return values.remove((RAttrValue) attributeValue);\n     }\n@@ -129,7 +136,8 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n         if (!(uniqueAttributeValue instanceof RAttrUniqueValue)) {\n-            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed RAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed RAttrUniqueValue: \"\n+                    + uniqueAttributeValue.getClass().getName());\n         }\n         this.uniqueValue = (RAttrUniqueValue) uniqueAttributeValue;\n     }"},{"sha":"ba321a516ae2017cad00e4b955a238fb5104f368","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMapping.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans.role;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+\n+@Entity\n+public class RMapping extends AbstractMapping {\n+\n+    private static final long serialVersionUID = -4370284858054993282L;\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * Resource owning this mapping.\n+     */\n+    @OneToOne\n+    private ExternalResource resource;\n+\n+    /*\n+     * Attribute mappings.\n+     */\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    private List<RMappingItem> items;\n+\n+    public RMapping() {\n+        super();\n+\n+        items = new ArrayList<RMappingItem>();\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        this.resource = resource;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdItem) {\n+        if (accountIdItem != null && !(accountIdItem instanceof RMappingItem)) {\n+            throw new ClassCastException(\"accountIdItem is expected to be typed RMappingItem: \"\n+                    + accountIdItem.getClass().getName());\n+        }\n+\n+        addAccountIdItem(accountIdItem);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> List<T> getItems() {\n+        return (List<T>) this.items;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> boolean addItem(final T item) {\n+        if (item != null && !(item instanceof RMappingItem)) {\n+            throw new ClassCastException(\"items are expected to be typed RMappingItem: \" + item.getClass().getName());\n+        }\n+        return item == null ? false : this.items.contains((RMappingItem) item) || this.items.add((RMappingItem) item);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> boolean removeItem(final T item) {\n+        if (item != null && !(item instanceof RMappingItem)) {\n+            throw new ClassCastException(\"items are expected to be typed RMappingItem: \" + item.getClass().getName());\n+        }\n+        return this.items.remove((RMappingItem) item);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n+        this.items.clear();\n+        if (items != null && !items.isEmpty()) {\n+            T item = items.iterator().next();\n+            if (!(item instanceof RMappingItem)) {\n+                throw new ClassCastException(\"items are expected to be typed RMappingItem: \"\n+                        + item.getClass().getName());\n+            }\n+            this.items.addAll((Set<RMappingItem>) items);\n+        }\n+    }\n+}"},{"sha":"caba6edfcd1056a7683eab258d8b279416df3fc4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMappingItem.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+\n+@Entity\n+public class RMappingItem extends AbstractMappingItem {\n+\n+    private static final long serialVersionUID = 2936446317887310833L;\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private RMapping mapping;\n+\n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMapping> T getMapping() {\n+        return (T) mapping;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMapping> void setMapping(final T mapping) {\n+        if (mapping != null && !(mapping instanceof RMapping)) {\n+            throw new ClassCastException(\"accountIdItem is expected to be typed RMapping: \"\n+                    + mapping.getClass().getName());\n+        }\n+        this.mapping = (RMapping) mapping;\n+    }\n+}"},{"sha":"b749575d13dd9eefa3c47f77949b9dd4493348a1","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -29,9 +29,9 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n /**\n@@ -41,28 +41,33 @@\n public class UAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 6333601983691157406L;\n+\n     /**\n      * Auto-generated id for this table.\n      */\n     @Id\n     private Long id;\n+\n     /**\n      * The owner of this attribute.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n+\n     /**\n      * The schema of this attribute.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private USchema schema;\n+\n     /**\n      * Values of this attribute (if schema is not UNIQUE).\n      */\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<UAttrValue> values;\n+\n     /**\n      * Value of this attribute (if schema is UNIQUE).\n      */\n@@ -112,15 +117,17 @@ public <T extends AbstractSchema> void setSchema(final T schema) {\n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n         if (!(attributeValue instanceof UAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         return values.add((UAttrValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n         if (!(attributeValue instanceof UAttrValue)) {\n-            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.getClass().getName());\n+            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.\n+                    getClass().getName());\n         }\n         return values.remove((UAttrValue) attributeValue);\n     }\n@@ -150,7 +157,8 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n         if (!(uniqueAttributeValue instanceof UAttrUniqueValue)) {\n-            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed UAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed UAttrUniqueValue: \"\n+                    + uniqueAttributeValue.getClass().getName());\n         }\n         this.uniqueValue = (UAttrUniqueValue) uniqueAttributeValue;\n     }"},{"sha":"4806dc89ac15caa4dd9271658989d86d79c31909","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UMapping.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+\n+@Entity\n+public class UMapping extends AbstractMapping {\n+\n+    private static final long serialVersionUID = 4285801404504561073L;\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * Resource owning this mapping.\n+     */\n+    @OneToOne\n+    private ExternalResource resource;\n+\n+    /**\n+     * Attribute mappings.\n+     */\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n+    private List<UMappingItem> items;\n+\n+    public UMapping() {\n+        super();\n+\n+        items = new ArrayList<UMappingItem>();\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        this.resource = resource;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdItem) {\n+        if (accountIdItem != null && !(accountIdItem instanceof UMappingItem)) {\n+            throw new ClassCastException(\"accountIdItem is expected to be typed UMappingItem: \"\n+                    + accountIdItem.getClass().getName());\n+        }\n+\n+        addAccountIdItem(accountIdItem);\n+    }\n+\n+    public UMappingItem getPasswordItem() {\n+        UMappingItem passwordItem = null;\n+        for (AbstractMappingItem item : getItems()) {\n+            if (item.isPassword()) {\n+                passwordItem = (UMappingItem) item;\n+            }\n+        }\n+        return passwordItem;\n+    }\n+\n+    public boolean setPasswordItem(final UMappingItem passwordItem) {\n+        passwordItem.setExtAttrName(OperationalAttributes.PASSWORD_NAME);\n+        passwordItem.setPassword(true);\n+        return addItem(passwordItem);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> List<T> getItems() {\n+        return (List<T>) this.items;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> boolean addItem(final T item) {\n+        if (item != null && !(item instanceof UMappingItem)) {\n+            throw new ClassCastException(\"items are expected to be typed UMappingItem: \" + item.getClass().getName());\n+        }\n+        return item == null ? false : this.items.contains((UMappingItem) item) || this.items.add((UMappingItem) item);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> boolean removeItem(final T item) {\n+        if (item != null && !(item instanceof UMappingItem)) {\n+            throw new ClassCastException(\"items are expected to be typed UMappingItem: \" + item.getClass().getName());\n+        }\n+        return this.items.remove((UMappingItem) item);\n+    }\n+\n+    @Override\n+    public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n+        this.items.clear();\n+        if (items != null && !items.isEmpty()) {\n+            T item = items.iterator().next();\n+            if (!(item instanceof UMappingItem)) {\n+                throw new ClassCastException(\"items are expected to be typed UMappingItem: \"\n+                        + item.getClass().getName());\n+            }\n+            this.items.addAll((Set<UMappingItem>) items);\n+        }\n+    }\n+}"},{"sha":"4f44261b0cfed7145d120bc043480a10f4133246","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UMappingItem.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+\n+@Entity\n+public class UMappingItem extends AbstractMappingItem {\n+\n+    private static final long serialVersionUID = 2936446317887310833L;\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private UMapping mapping;\n+\n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMapping> T getMapping() {\n+        return (T) mapping;\n+    }\n+\n+    @Override\n+    public <T extends AbstractMapping> void setMapping(final T mapping) {\n+        if (mapping != null && !(mapping instanceof UMapping)) {\n+            throw new ClassCastException(\"accountIdItem is expected to be typed UMapping: \"\n+                    + mapping.getClass().getName());\n+        }\n+        this.mapping = (UMapping) mapping;\n+    }\n+}"},{"sha":"6f7fd094315d3f8359037ccf942463333361352a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.types.IntMappingType;\n \n@@ -34,11 +34,8 @@ public interface ResourceDAO extends DAO {\n \n     ExternalResource save(ExternalResource resource) throws InvalidEntityException;\n \n-    List<SchemaMapping> findAllMappings();\n-\n-    SchemaMapping getMappingForAccountId(String resourceName);\n-\n-    void deleteMappings(String schemaName, IntMappingType intMappingType);\n+    <T extends AbstractMappingItem> void deleteMapping(String schemaName, IntMappingType intMappingType,\n+            Class<T> reference);\n \n     void delete(String name);\n }"},{"sha":"b475a673b095d7e7087e09ed30f782cbc9a112cd","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/DerSchemaDAOImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -26,6 +26,7 @@\n import org.springframework.stereotype.Repository;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n@@ -60,20 +61,16 @@ public <T extends AbstractDerSchema> T save(final T derivedSchema) {\n \n     @Override\n     public void delete(final String name, final AttributableUtil attributableUtil) {\n-\n         final AbstractDerSchema derivedSchema = find(name, attributableUtil.derSchemaClass());\n-\n         if (derivedSchema == null) {\n             return;\n         }\n \n-        List<? extends AbstractDerAttr> attributes = getAttributes(derivedSchema, attributableUtil\n-                .derAttrClass());\n+        List<? extends AbstractDerAttr> attributes = getAttributes(derivedSchema, attributableUtil.derAttrClass());\n \n         final Set<Long> derivedAttributeIds = new HashSet<Long>(attributes.size());\n \n         Class attributeClass = null;\n-\n         for (AbstractDerAttr attribute : attributes) {\n             derivedAttributeIds.add(attribute.getId());\n             attributeClass = attribute.getClass();\n@@ -83,7 +80,7 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n             derivedAttributeDAO.delete(derivedAttributeId, attributeClass);\n         }\n \n-        resourceDAO.deleteMappings(name, attributableUtil.derIntMappingType());\n+        resourceDAO.deleteMapping(name, attributableUtil.derIntMappingType(), UMappingItem.class);\n \n         entityManager.remove(derivedSchema);\n     }"},{"sha":"4663cb1b88ae87d18a33a228ce6ae76821661457","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -20,13 +20,13 @@\n \n import java.util.List;\n import javax.persistence.Query;\n-import org.springframework.stereotype.Repository;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.types.PolicyType;\n+import org.springframework.stereotype.Repository;\n \n @Repository\n public class PolicyDAOImpl extends AbstractDAOImpl implements PolicyDAO {"},{"sha":"62d2fc8e0a9f6adb3b548e347939b73a221ac70a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":45,"deletions":25,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,14 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -103,41 +105,42 @@ public ExternalResource save(final ExternalResource resource) {\n     }\n \n     @Override\n-    public List<SchemaMapping> findAllMappings() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + SchemaMapping.class.getSimpleName() + \" e\");\n-\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public SchemaMapping getMappingForAccountId(final String resourceName) {\n-\n-        Query query = entityManager.createQuery(\"SELECT m FROM \" + SchemaMapping.class.getSimpleName() + \" m \"\n-                + \"WHERE m.resource.name=:resourceName \" + \"AND m.accountid = 1\");\n-        query.setParameter(\"resourceName\", resourceName);\n-\n-        return (SchemaMapping) query.getSingleResult();\n-    }\n-\n-    @Override\n-    public void deleteMappings(final String intAttrName, final IntMappingType intMappingType) {\n+    public <T extends AbstractMappingItem> void deleteMapping(final String intAttrName,\n+            final IntMappingType intMappingType, final Class<T> reference) {\n \n         if (intMappingType == IntMappingType.SyncopeUserId || intMappingType == IntMappingType.Password\n                 || intMappingType == IntMappingType.Username) {\n \n             return;\n         }\n \n-        Query query = entityManager.createQuery(\"DELETE FROM \" + SchemaMapping.class.getSimpleName()\n-                + \" m WHERE m.intAttrName=:intAttrName \" + \"AND m.intMappingType=:intMappingType\");\n+        Query query = entityManager.createQuery(\"SELECT m FROM \" + reference.getSimpleName()\n+                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\");\n         query.setParameter(\"intAttrName\", intAttrName);\n         query.setParameter(\"intMappingType\", intMappingType);\n \n-        int items = query.executeUpdate();\n-        LOG.debug(\"Removed {} schema mappings\", items);\n+        Set<Long> itemIds = new HashSet<Long>();\n+        for (T item : (List<T>) query.getResultList()) {\n+            itemIds.add(item.getId());\n+        }\n+        Class mappingRef = null;\n+        for (Long itemId : itemIds) {\n+            T item = entityManager.find(reference, itemId);\n+            if (item != null) {\n+                mappingRef = item.getMapping().getClass();\n+\n+                item.getMapping().removeItem(item);\n+                item.setMapping(null);\n+\n+                entityManager.remove(item);\n+            }\n+        }\n \n-        // Make empty SchemaMapping query cache\n-        entityManager.getEntityManagerFactory().getCache().evict(SchemaMapping.class);\n+        // Make empty query cache for *MappingItem and related *Mapping\n+        entityManager.getEntityManagerFactory().getCache().evict(reference);\n+        if (mappingRef != null) {\n+            entityManager.getEntityManagerFactory().getCache().evict(mappingRef);\n+        }\n     }\n \n     @Override\n@@ -164,6 +167,23 @@ public void delete(final String name) {\n         }\n         resource.setConnector(null);\n \n+        if (resource.getUmapping() != null) {\n+            for (AbstractMappingItem item : resource.getUmapping().getItems()) {\n+                item.setMapping(null);\n+            }\n+            resource.getUmapping().getItems().clear();\n+            resource.getUmapping().setResource(null);\n+            resource.setUmapping(null);\n+        }\n+        if (resource.getRmapping() != null) {\n+            for (AbstractMappingItem item : resource.getRmapping().getItems()) {\n+                item.setMapping(null);\n+            }\n+            resource.getRmapping().getItems().clear();\n+            resource.getRmapping().setResource(null);\n+            resource.setRmapping(null);\n+        }\n+\n         entityManager.remove(resource);\n     }\n }"},{"sha":"489fc0cc1ada20f2e207130b83b0e08a7e911bcd","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -22,14 +22,15 @@\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Query;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n \n @Repository\n public class SchemaDAOImpl extends AbstractDAOImpl implements SchemaDAO {\n@@ -71,7 +72,6 @@ public <T extends AbstractSchema> T save(final T schema) {\n \n     @Override\n     public void delete(final String name, final AttributableUtil attributableUtil) {\n-\n         AbstractSchema schema = find(name, attributableUtil.schemaClass());\n         if (schema == null) {\n             return;\n@@ -87,7 +87,7 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n             attributeDAO.delete(attributeId, attributableUtil.attrClass());\n         }\n \n-        resourceDAO.deleteMappings(name, attributableUtil.intMappingType());\n+        resourceDAO.deleteMapping(name, attributableUtil.intMappingType(), UMappingItem.class);\n \n         entityManager.remove(schema);\n     }"},{"sha":"bcf2e823008eff9e44d8ba5ff1950f4aa4bb047d","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/VirSchemaDAOImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -22,14 +22,15 @@\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Query;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n \n @Repository\n public class VirSchemaDAOImpl extends AbstractDAOImpl implements VirSchemaDAO {\n@@ -82,7 +83,7 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n             virtualAttributeDAO.delete(virtualAttributeId, attributeClass);\n         }\n \n-        resourceDAO.deleteMappings(name, attributableUtil.virIntMappingType());\n+        resourceDAO.deleteMapping(name, attributableUtil.virIntMappingType(), UMappingItem.class);\n \n         entityManager.remove(virtualSchema);\n     }"},{"sha":"a18d6116fd181b7cdc08a2753fcfed13ce51d292","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ExternalResourceValidator.java","status":"modified","additions":70,"deletions":39,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -21,8 +21,9 @@\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.propagation.PropagationActions;\n import org.apache.syncope.types.EntityViolationType;\n \n@@ -33,51 +34,81 @@ public class ExternalResourceValidator extends AbstractValidator implements\n     public void initialize(final ExternalResourceCheck constraintAnnotation) {\n     }\n \n-    @Override\n-    public boolean isValid(final ExternalResource object, final ConstraintValidatorContext context) {\n-\n-        boolean isValid;\n-\n-        if (object == null) {\n-            isValid = true;\n-        } else {\n-            int accountIds = 0;\n-            for (SchemaMapping mapping : object.getMappings()) {\n-                if (mapping.isAccountid()) {\n-                    accountIds++;\n-                }\n-            }\n-            isValid = accountIds == 1;\n+    private boolean isValid(final AbstractMappingItem item, final ConstraintValidatorContext context) {\n+        if (StringUtils.isBlank(item.getExtAttrName())) {\n+            context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidMapping.toString())\n+                    .addNode(item + \".extAttrName is null\").addConstraintViolation();\n \n-            if (!isValid) {\n-                LOG.error(\"Mappings for \" + object + \" have 0 or >1 account ids\");\n+            return false;\n+        }\n \n-                context.disableDefaultConstraintViolation();\n-                context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidResource.toString())\n-                        .addNode(object + \".accountIds.size==\" + accountIds).addConstraintViolation();\n+        if (StringUtils.isBlank(item.getIntAttrName())) {\n+            context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidMapping.toString())\n+                    .addNode(item + \".intAttrName is null\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private boolean isValid(final AbstractMapping mapping, final ConstraintValidatorContext context) {\n+        if (mapping == null) {\n+            return true;\n+        }\n+\n+        int accountIds = 0;\n+        for (AbstractMappingItem item : mapping.getItems()) {\n+            if (item.isAccountid()) {\n+                accountIds++;\n             }\n+        }\n+        if (accountIds != 1) {\n+            context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidMapping.toString())\n+                    .addNode(mapping + \".accountId.size==\" + accountIds).addConstraintViolation();\n+            return false;\n+        }\n \n-            if (StringUtils.isNotBlank(object.getActionsClassName())) {\n-                Class<?> actionsClass = null;\n-                boolean isAssignable = false;\n-                try {\n-                    actionsClass = Class.forName(object.getActionsClassName());\n-                    isAssignable = PropagationActions.class.isAssignableFrom(actionsClass);\n-                } catch (Exception e) {\n-                    LOG.error(\"Invalid PropagationActions specified\", e);\n-                    isValid = false;\n-                }\n-\n-                if (actionsClass == null || !isAssignable) {\n-                    isValid = false;\n-\n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidResource.toString())\n-                            .addNode(object + \".actionsClassName is not valid\").addConstraintViolation();\n-                }\n+        boolean isValid = true;\n+\n+        int passwords = 0;\n+        for (AbstractMappingItem item : mapping.getItems()) {\n+            isValid &= isValid(item, context);\n+\n+            if (item.isPassword()) {\n+                passwords++;\n             }\n         }\n+        if (passwords > 1) {\n+            context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidMapping.toString())\n+                    .addNode(mapping + \".password.size==\" + passwords).addConstraintViolation();\n+            isValid = false;\n+        }\n \n         return isValid;\n     }\n+\n+    @Override\n+    public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        if (StringUtils.isNotBlank(resource.getActionsClassName())) {\n+            Class<?> actionsClass = null;\n+            boolean isAssignable = false;\n+            try {\n+                actionsClass = Class.forName(resource.getActionsClassName());\n+                isAssignable = PropagationActions.class.isAssignableFrom(actionsClass);\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid PropagationActions specified: {}\", resource.getActionsClassName(), e);\n+            }\n+\n+            if (actionsClass == null || !isAssignable) {\n+                context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidResource.toString())\n+                        .addNode(resource + \".actionsClassName is not valid\").addConstraintViolation();\n+                return false;\n+            }\n+        }\n+\n+        return isValid(resource.getUmapping(), context) && isValid(resource.getRmapping(), context);\n+    }\n }"},{"sha":"8acba22e12a6df2510163fd97e8bb35969ddd5da","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -34,7 +34,8 @@ public class InvalidEntityException extends ValidationException {\n \n     private final Map<Class, Set<EntityViolationType>> violations;\n \n-    public InvalidEntityException(final String entityClassSimpleName, final Set<ConstraintViolation<Object>> violations) {\n+    public InvalidEntityException(final String entityClassSimpleName,\n+            final Set<ConstraintViolation<Object>> violations) {\n \n         super();\n \n@@ -51,7 +52,6 @@ public InvalidEntityException(final String entityClassSimpleName, final Set<Cons\n             }\n \n             if (!this.violations.containsKey(violation.getLeafBean().getClass())) {\n-\n                 this.violations.put(violation.getLeafBean().getClass(), EnumSet.noneOf(EntityViolationType.class));\n             }\n "},{"sha":"94d61b87378dda359e067170026a551bea8a40c3","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaMappingCheck.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingCheck.java?ref=2b3e3b88e7ca849ea5c5823af19ee363803cff4c","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.validation.entity;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import javax.validation.Constraint;\n-import javax.validation.Payload;\n-\n-@Target( { ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = SchemaMappingValidator.class)\n-@Documented\n-public @interface SchemaMappingCheck {\n-\n-    String message() default \"{org.apache.syncope.core.validation.mapping}\";\n-\n-    Class<?>[] groups() default {};\n-\n-    Class<? extends Payload>[] payload() default {};\n-}"},{"sha":"162925e010ad2131a808a013962d623daf359068","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaMappingValidator.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java?ref=2b3e3b88e7ca849ea5c5823af19ee363803cff4c","patch":"@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.validation.entity;\n-\n-import javax.validation.ConstraintValidator;\n-import javax.validation.ConstraintValidatorContext;\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n-import org.apache.syncope.types.EntityViolationType;\n-import org.apache.syncope.types.IntMappingType;\n-\n-public class SchemaMappingValidator extends AbstractValidator implements\n-        ConstraintValidator<SchemaMappingCheck, SchemaMapping> {\n-\n-    @Override\n-    public void initialize(final SchemaMappingCheck constraintAnnotation) {\n-    }\n-\n-    @Override\n-    public boolean isValid(final SchemaMapping mapping, final ConstraintValidatorContext context) {\n-\n-        context.disableDefaultConstraintViolation();\n-\n-        if (StringUtils.isBlank(SchemaMappingUtil.getExtAttrName(mapping))) {\n-            context.buildConstraintViolationWithTemplate(\"Missing external attribute name\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        if (StringUtils.isBlank(SchemaMappingUtil.getIntAttrName(mapping))) {\n-            context.buildConstraintViolationWithTemplate(\"Missing internal attribute name\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        if (mapping.isAccountid()\n-                && (IntMappingType.UserVirtualSchema == mapping.getIntMappingType()\n-                        || IntMappingType.RoleVirtualSchema == mapping.getIntMappingType()\n-                        || IntMappingType.MembershipVirtualSchema == mapping.getIntMappingType() || IntMappingType.Password == mapping\n-                        .getIntMappingType())) {\n-            context.buildConstraintViolationWithTemplate(\"Virtual attribute as accountId is not permitted\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        if (mapping.isAccountid() && (IntMappingType.Password == mapping.getIntMappingType() || mapping.isPassword())) {\n-            context.buildConstraintViolationWithTemplate(\"Password as accountId is not permitted\").addNode(\n-                    EntityViolationType.InvalidSchemaMapping.toString()).addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-}"},{"sha":"8234a790692518448fe3a2abf5c079d8d2033ced","filename":"core/src/main/java/org/apache/syncope/core/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -416,7 +416,7 @@ protected ConnectorObject getRemoteObject(final ConnectorFacadeProxy connector,\n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(task.getPropagationMode(), task.getPropagationOperation(), ObjectClass.ACCOUNT,\n-                    new Uid(accountId), connector.getOperationOptions(task.getResource()));\n+                    new Uid(accountId), connector.getOperationOptions(task.getResource().getUmapping()));\n         } catch (RuntimeException ignore) {\n             LOG.debug(\"While resolving {}\", accountId, ignore);\n         }"},{"sha":"6f067ca46913b591392f7287c27066ab41593953","filename":"core/src/main/java/org/apache/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":21,"deletions":33,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -20,17 +20,15 @@\n \n import java.io.File;\n import java.net.URI;\n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.ConnectorCapability;\n import org.apache.syncope.types.PropagationMode;\n@@ -62,7 +60,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n-import org.springframework.util.StringUtils;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the corresponding connector instance has been configured to\n@@ -397,13 +394,11 @@ public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid\n \n         Attribute attribute = null;\n \n-        try {\n-            final ConnectorObject object = connector.getObject(objectClass, uid, options);\n-\n-            attribute = object.getAttributeByName(attributeName);\n-        } catch (NullPointerException e) {\n-            // ignore exception\n+        final ConnectorObject object = connector.getObject(objectClass, uid, options);\n+        if (object == null) {\n             LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        } else {\n+            attribute = object.getAttributeByName(attributeName);\n         }\n \n         return attribute;\n@@ -414,23 +409,20 @@ public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid\n      * @param objectClass ConnId's object class\n      * @param uid ConnId's Uid\n      * @param options ConnId's OperationOptions\n-     * @param attributeNames attributes to read\n      * @return attributes (if present)\n      */\n     public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final Uid uid,\n             final OperationOptions options) {\n \n         final Set<Attribute> attributes = new HashSet<Attribute>();\n \n-        try {\n-            final ConnectorObject object = connector.getObject(objectClass, uid, options);\n-\n+        ConnectorObject object = connector.getObject(objectClass, uid, options);\n+        if (object == null) {\n+            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        } else {\n             for (String attribute : options.getAttributesToGet()) {\n                 attributes.add(object.getAttributeByName(attribute));\n             }\n-        } catch (NullPointerException e) {\n-            // ignore exception\n-            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n         }\n \n         return attributes;\n@@ -486,25 +478,22 @@ public ConnInstance getActiveConnInstance() {\n         return activeConnInstance;\n     }\n \n-    public OperationOptions getOperationOptions(final ExternalResource resource) {\n-\n+    public OperationOptions getOperationOptions(final AbstractMapping mapping) {\n         // -------------------------------------\n         // Ask just for mapped attributes\n         // -------------------------------------\n         final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n \n-        final Set<String> attributesToGet = new HashSet<String>(Arrays.asList(new String[]{Name.NAME, Uid.NAME,\n-                    OperationalAttributes.ENABLE_NAME}));\n-\n-        for (SchemaMapping mapping : resource.getMappings()) {\n-            final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n+        final Set<String> attrsToGet = new HashSet<String>();\n+        attrsToGet.add(Name.NAME);\n+        attrsToGet.add(Uid.NAME);\n+        attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n \n-            if (StringUtils.hasText(extAttrName)) {\n-                attributesToGet.add(extAttrName);\n-            }\n+        for (AbstractMappingItem item : mapping.getItems()) {\n+            attrsToGet.add(item.getExtAttrName());\n         }\n \n-        oob.setAttributesToGet(attributesToGet);\n+        oob.setAttributesToGet(attrsToGet);\n         // -------------------------------------\n \n         return oob.build();\n@@ -521,13 +510,12 @@ private Object getPropertyValue(final ConnConfProperty property) {\n                         getDefaultClassLoader());\n \n                 if (GuardedString.class.equals(propertySchemaClass)) {\n-                    value = new GuardedString((values.get(0).toString()).toCharArray());\n+                    value = new GuardedString(values.get(0).toString().toCharArray());\n                 } else if (GuardedByteArray.class.equals(propertySchemaClass)) {\n                     value = new GuardedByteArray((byte[]) values.get(0));\n                 } else if (Character.class.equals(propertySchemaClass) || Character.TYPE.equals(propertySchemaClass)) {\n-                    value = values.get(0) != null && !values.get(0).toString().isEmpty()\n-                            ? values.get(0).toString().charAt(0)\n-                            : null;\n+                    value = values.get(0) == null || values.get(0).toString().isEmpty()\n+                            ? null : values.get(0).toString().charAt(0);\n                 } else if (Integer.class.equals(propertySchemaClass) || Integer.TYPE.equals(propertySchemaClass)) {\n                     value = Integer.parseInt(values.get(0).toString());\n                 } else if (Long.class.equals(propertySchemaClass) || Long.TYPE.equals(propertySchemaClass)) {"},{"sha":"a170fc44ec191be8507d02cb968c9d95f78d7c88","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":32,"deletions":33,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -33,20 +33,19 @@\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n-import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.JexlUtil;\n+import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.IntMappingType;\n@@ -303,53 +302,53 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId, final String sy\n     }\n \n     /**\n-     * Prepare an attribute for sending to a connector instance.\n+     * Prepare an attribute to be sent to a connector instance.\n      *\n-     * @param mapping schema mapping for the given attribute\n+     * @param mapItem mapping item for the given attribute\n      * @param user given user\n      * @param password clear-text password\n      * @return account link + prepared attribute\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n-    private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mapping, final SyncopeUser user,\n+    private Map.Entry<String, Attribute> prepareAttribute(final AbstractMappingItem mapItem, final SyncopeUser user,\n             final String password)\n             throws ClassNotFoundException {\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n-        switch (mapping.getIntMappingType().getAttributableType()) {\n+        switch (mapItem.getIntMappingType().getAttributableType()) {\n             case USER:\n                 attributables.addAll(Collections.singleton(user));\n                 break;\n+\n             case ROLE:\n-                final List<Membership> memberships = user.getMemberships();\n-                for (Membership membership : memberships) {\n-                    attributables.add(membership.getSyncopeRole());\n-                }\n+                attributables.addAll(user.getRoles());\n                 break;\n+\n             case MEMBERSHIP:\n                 attributables.addAll(user.getMemberships());\n                 break;\n+\n             default:\n         }\n \n         final Entry<AbstractSchema, List<AbstractAttrValue>> entry =\n-                SchemaMappingUtil.getIntValues(mapping, attributables, password, schemaDAO);\n+                MappingUtil.getIntValues(mapItem, attributables, password, schemaDAO);\n \n         final List<AbstractAttrValue> values = entry.getValue();\n         final AbstractSchema schema = entry.getKey();\n         final SchemaType schemaType = schema == null ? SchemaType.String : schema.getType();\n \n-        final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n+        final String extAttrName = mapItem.getExtAttrName();\n \n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n-                + \"\\n* is accountId \" + mapping.isAccountid()\n-                + \"\\n* is password \" + (mapping.isPassword() || mapping.getIntMappingType().equals(\n-                IntMappingType.Password))\n-                + \"\\n* mandatory condition \" + mapping.getMandatoryCondition()\n-                + \"\\n* Schema \" + mapping.getIntAttrName()\n-                + \"\\n* IntMappingType \" + mapping.getIntMappingType().toString()\n+                + \"\\n* is accountId \" + mapItem.isAccountid()\n+                + \"\\n* is password \"\n+                + (mapItem.isPassword() || mapItem.getIntMappingType().equals(IntMappingType.Password))\n+                + \"\\n* mandatory condition \" + mapItem.getMandatoryCondition()\n+                + \"\\n* Schema \" + mapItem.getIntAttrName()\n+                + \"\\n* IntMappingType \" + mapItem.getIntMappingType().toString()\n                 + \"\\n* ClassType \" + schemaType.getClassName()\n                 + \"\\n* Values \" + values);\n \n@@ -363,24 +362,24 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n             }\n         }\n \n-        Map.Entry<String, Attribute> res;\n+        Map.Entry<String, Attribute> result;\n \n-        if (mapping.isAccountid()) {\n-            res = new DefaultMapEntry(objValues.iterator().next().toString(), null);\n-        } else if (mapping.isPassword()) {\n-            res = new DefaultMapEntry(null,\n+        if (mapItem.isAccountid()) {\n+            result = new DefaultMapEntry(objValues.iterator().next().toString(), null);\n+        } else if (mapItem.isPassword()) {\n+            result = new DefaultMapEntry(null,\n                     AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n         } else {\n             if (schema != null && schema.isMultivalue()) {\n-                res = new DefaultMapEntry(null, AttributeBuilder.build(extAttrName, objValues));\n+                result = new DefaultMapEntry(null, AttributeBuilder.build(extAttrName, objValues));\n             } else {\n-                res = new DefaultMapEntry(null, objValues.isEmpty()\n+                result = new DefaultMapEntry(null, objValues.isEmpty()\n                         ? AttributeBuilder.build(extAttrName)\n                         : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n             }\n         }\n \n-        return res;\n+        return result;\n     }\n \n     /**\n@@ -401,8 +400,8 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n \n-        for (SchemaMapping mapping : resource.getMappings()) {\n-            LOG.debug(\"Processing schema {}\", SchemaMappingUtil.getIntAttrName(mapping));\n+        for (AbstractMappingItem mapping : resource.getUmapping().getItems()) {\n+            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n                 Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(mapping, user, password);\n@@ -428,23 +427,23 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n \n                 }\n             } catch (Exception e) {\n-                LOG.debug(\"Attribute '{}' processing failed\", SchemaMappingUtil.getIntAttrName(mapping), e);\n+                LOG.debug(\"Attribute '{}' processing failed\", mapping.getIntAttrName(), e);\n             }\n         }\n \n-        if (StringUtils.isNotBlank(accountId)) {\n+        if (StringUtils.isBlank(accountId)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing accountId for '{}': \", resource.getName());\n         }\n \n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n-        if (StringUtils.isNotBlank(resource.getAccountLink())) {\n+        if (StringUtils.isNotBlank(resource.getUmapping().getAccountLink())) {\n             final JexlContext jexlContext = new MapContext();\n             jexlUtil.addFieldsToContext(user, jexlContext);\n             jexlUtil.addAttrsToContext(user.getAttributes(), jexlContext);\n             jexlUtil.addDerAttrsToContext(user.getDerivedAttributes(), user.getAttributes(), jexlContext);\n-            evalAccountLink = jexlUtil.evaluate(resource.getAccountLink(), jexlContext);\n+            evalAccountLink = jexlUtil.evaluate(resource.getUmapping().getAccountLink(), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),"},{"sha":"10e33ae6566f84b11371b45b16b270b1d7987314","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":2,"deletions":27,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,20 +18,17 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n@@ -205,28 +202,6 @@ public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstan\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{roleId}/mappings\")\n-    public List<SchemaMappingTO> getRoleResourcesMapping(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException {\n-\n-        SyncopeRole role = roleDAO.find(roleId);\n-        if (role == null) {\n-            throw new NotFoundException(\"Role '\" + roleId + \"'\");\n-        }\n-\n-        List<SchemaMappingTO> roleMappings = new ArrayList<SchemaMappingTO>();\n-\n-        for (ExternalResource resource : role.getResources()) {\n-            roleMappings.addAll(binder.getSchemaMappingTOs(resource.getMappings()));\n-        }\n-\n-        auditManager.audit(Category.resource, ResourceSubCategory.getRoleResourcesMapping, Result.success,\n-                \"Found \" + roleMappings.size() + \" mappings for role \" + roleId);\n-\n-        return roleMappings;\n-    }\n-\n     @PreAuthorize(\"hasRole('RESOURCE_GETOBJECT')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/read/{objectId}\")\n@@ -241,8 +216,8 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n \n         final ConnectorFacadeProxy connector = connLoader.getConnector(resource);\n \n-        final ConnectorObject connectorObject = connector.getObject(ObjectClass.ACCOUNT, new Uid(objectId), connector.\n-                getOperationOptions(resource));\n+        final ConnectorObject connectorObject = connector.getObject(ObjectClass.ACCOUNT, new Uid(objectId),\n+                connector.getOperationOptions(resource.getUmapping()));\n \n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + objectId + \" not found on resource \" + resourceName);"},{"sha":"27331b0988403ec0dd95647f126e17b141277297","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":142,"deletions":157,"changes":299,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -29,9 +29,6 @@\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.syncope.client.mod.AbstractAttributableMod;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AbstractAttributableTO;\n@@ -43,11 +40,11 @@\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n@@ -64,10 +61,14 @@\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.JexlUtil;\n+import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationOperation;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n public abstract class AbstractAttributableDataBinder {\n \n@@ -119,7 +120,6 @@ public abstract class AbstractAttributableDataBinder {\n     private JexlUtil jexlUtil;\n \n     private <T extends AbstractSchema> T getSchema(final String schemaName, final Class<T> reference) {\n-\n         T schema = null;\n         if (StringUtils.isNotBlank(schemaName)) {\n             schema = schemaDAO.find(schemaName, reference);\n@@ -139,7 +139,6 @@ private <T extends AbstractSchema> T getSchema(final String schemaName, final Cl\n     }\n \n     private <T extends AbstractDerSchema> T getDerivedSchema(final String derSchemaName, final Class<T> reference) {\n-\n         T derivedSchema = null;\n         if (StringUtils.isNotBlank(derSchemaName)) {\n             derivedSchema = derSchemaDAO.find(derSchemaName, reference);\n@@ -152,7 +151,6 @@ private <T extends AbstractDerSchema> T getDerivedSchema(final String derSchemaN\n     }\n \n     private <T extends AbstractVirSchema> T getVirtualSchema(final String virSchemaName, final Class<T> reference) {\n-\n         T virtualSchema = null;\n         if (StringUtils.isNotBlank(virSchemaName)) {\n             virtualSchema = virSchemaDAO.find(virSchemaName, reference);\n@@ -167,7 +165,6 @@ private <T extends AbstractVirSchema> T getVirtualSchema(final String virSchemaN\n \n     private ExternalResource getResource(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n-\n         if (resource == null) {\n             LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n         }\n@@ -196,7 +193,7 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n                 } catch (ValidationException e) {\n                     LOG.error(\"Invalid value for attribute \" + schema.getName() + \": \" + value, e);\n \n-                    invalidValues.addElement(schema.getName() + \": \" + value \n+                    invalidValues.addElement(schema.getName() + \": \" + value\n                             + \" - \" + e.getMessage());\n                 }\n             }\n@@ -219,9 +216,10 @@ private boolean evaluateMandatoryCondition(final ExternalResource resource, fina\n \n         boolean result = false;\n \n-        final Set<SchemaMapping> mappings = resource.getMappings(intAttrName, intMappingType);\n-        for (Iterator<SchemaMapping> itor = mappings.iterator(); itor.hasNext() && !result;) {\n-            final SchemaMapping mapping = itor.next();\n+        final List<AbstractMappingItem> mappings = MappingUtil.getMatchingMappingItems(\n+                resource.getUmapping().getItems(), intAttrName, intMappingType);\n+        for (Iterator<AbstractMappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n+            final AbstractMappingItem mapping = itor.next();\n             result |= evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n         }\n \n@@ -289,35 +287,35 @@ && evaluateMandatoryCondition(\n \n     public PropagationByResource fillVirtual(final AbstractAttributable attributable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final AttributableUtil attributableUtil) {\n+            final AttributableUtil attrUtil) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeRemoved, attributableUtil.virSchemaClass());\n+            AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n \n             if (virtualSchema != null) {\n                 AbstractVirAttr virAttr = attributable.getVirtualAttribute(virtualSchema.getName());\n-\n                 if (virAttr == null) {\n                     LOG.debug(\"No virtual attribute found for schema {}\", virtualSchema.getName());\n                 } else {\n                     attributable.removeVirtualAttribute(virAttr);\n                     virAttrDAO.delete(virAttr);\n                 }\n \n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (virtualSchema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.virIntMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (virtualSchema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n+                                && attributable.getResources().contains(resource)) {\n \n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n \n-                        // TODO: using virtual attribute as AccountId must be avoided\n-                        if (mapping.isAccountid() && virAttr != null && !virAttr.getValues().isEmpty()) {\n-                            propByRes.addOldAccountId(mapping.getResource().getName(), virAttr.getValues().get(0));\n+                            // Using virtual attribute as AccountId must be avoided\n+                            if (mapItem.isAccountid() && virAttr != null && !virAttr.getValues().isEmpty()) {\n+                                propByRes.addOldAccountId(resource.getName(), virAttr.getValues().get(0));\n+                            }\n                         }\n                     }\n                 }\n@@ -328,36 +326,34 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n         // 2. virtual attributes to be updated\n         for (AttributeMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeUpdated.getSchema(),\n-                    attributableUtil.virSchemaClass());\n-\n-            if (virtualSchema != null) {\n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (virtualSchema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.virIntMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n-\n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+            AbstractVirSchema virSchema = getVirtualSchema(vAttrToBeUpdated.getSchema(), attrUtil.virSchemaClass());\n+            if (virSchema != null) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (virSchema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n+                                && attributable.getResources().contains(resource)) {\n+\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n+                        }\n                     }\n-                }\n \n-                AbstractVirAttr virtualAttribute = attributable.getVirtualAttribute(virtualSchema.getName());\n-\n-                if (virtualAttribute == null) {\n-                    virtualAttribute = attributableUtil.newVirAttr();\n-                    virtualAttribute.setVirtualSchema(virtualSchema);\n-                    attributable.addVirtualAttribute(virtualAttribute);\n-                }\n+                    AbstractVirAttr virAttr = attributable.getVirtualAttribute(virSchema.getName());\n+                    if (virAttr == null) {\n+                        virAttr = attrUtil.newVirAttr();\n+                        virAttr.setVirtualSchema(virSchema);\n+                        attributable.addVirtualAttribute(virAttr);\n+                    }\n \n-                final List<String> values = new ArrayList<String>(virtualAttribute.getValues());\n-                values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n-                values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n+                    final List<String> values = new ArrayList<String>(virAttr.getValues());\n+                    values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n+                    values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n \n-                virtualAttribute.setValues(values);\n+                    virAttr.setValues(values);\n \n-                // Owner cannot be specified before otherwise a virtual attribute remove will be invalidated.\n-                virtualAttribute.setOwner(attributable);\n+                    // Owner cannot be specified before otherwise a virtual attribute remove will be invalidated.\n+                    virAttr.setOwner(attributable);\n+                }\n             }\n         }\n \n@@ -367,7 +363,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n     }\n \n     protected PropagationByResource fill(final AbstractAttributable attributable,\n-            final AbstractAttributableMod attributableMod, final AttributableUtil attributableUtil,\n+            final AbstractAttributableMod attributableMod, final AttributableUtil attrUtil,\n             final SyncopeClientCompositeErrorException compositeErrorException)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -376,11 +372,8 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n         SyncopeClientException invalidValues = new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);\n \n         // 1. resources to be removed\n-        ExternalResource resource;\n         for (String resourceToBeRemoved : attributableMod.getResourcesToBeRemoved()) {\n-\n-            resource = getResource(resourceToBeRemoved);\n-\n+            ExternalResource resource = getResource(resourceToBeRemoved);\n             if (resource != null) {\n                 propByRes.add(PropagationOperation.DELETE, resource.getName());\n                 attributable.removeResource(resource);\n@@ -391,9 +384,7 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n         // 2. resources to be added\n         for (String resourceToBeAdded : attributableMod.getResourcesToBeAdded()) {\n-\n-            resource = getResource(resourceToBeAdded);\n-\n+            ExternalResource resource = getResource(resourceToBeAdded);\n             if (resource != null) {\n                 propByRes.add(PropagationOperation.CREATE, resource.getName());\n                 attributable.addResource(resource);\n@@ -402,18 +393,12 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n         LOG.debug(\"Resources to be added:\\n{}\", propByRes);\n \n-        AbstractSchema schema;\n-        AbstractAttr attribute;\n-        AbstractDerSchema derivedSchema;\n-        AbstractDerAttr derivedAttribute;\n-\n         // 3. attributes to be removed\n         for (String attributeToBeRemoved : attributableMod.getAttributesToBeRemoved()) {\n-\n-            schema = getSchema(attributeToBeRemoved, attributableUtil.schemaClass());\n+            AbstractSchema schema = getSchema(attributeToBeRemoved, attrUtil.schemaClass());\n \n             if (schema != null) {\n-                attribute = attributable.getAttribute(schema.getName());\n+                AbstractAttr attribute = attributable.getAttribute(schema.getName());\n \n                 if (attribute == null) {\n                     LOG.debug(\"No attribute found for schema {}\", schema);\n@@ -425,25 +410,28 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n                         }\n                     }\n \n-                    if (!schema.isUniqueConstraint() || (!attribute.getUniqueValue().getStringValue().equals(newValue))) {\n+                    if (!schema.isUniqueConstraint()\n+                            || (!attribute.getUniqueValue().getStringValue().equals(newValue))) {\n \n                         attributable.removeAttribute(attribute);\n-                        attrDAO.delete(attribute.getId(), attributableUtil.attrClass());\n+                        attrDAO.delete(attribute.getId(), attrUtil.attrClass());\n                     }\n                 }\n \n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (schema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.intMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (schema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.intMappingType()\n+                                && attributable.getResources().contains(resource)) {\n \n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n \n-                        if (mapping.isAccountid() && attribute != null && !attribute.getValuesAsStrings().isEmpty()) {\n+                            if (mapItem.isAccountid() && attribute != null\n+                                    && !attribute.getValuesAsStrings().isEmpty()) {\n \n-                            propByRes.addOldAccountId(mapping.getResource().getName(), attribute.getValuesAsStrings().\n-                                    iterator().next());\n+                                propByRes.addOldAccountId(resource.getName(),\n+                                        attribute.getValuesAsStrings().iterator().next());\n+                            }\n                         }\n                     }\n                 }\n@@ -456,64 +444,63 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n         Set<Long> valuesToBeRemoved;\n         List<String> valuesToBeAdded;\n         for (AttributeMod attributeMod : attributableMod.getAttributesToBeUpdated()) {\n-\n-            schema = getSchema(attributeMod.getSchema(), attributableUtil.schemaClass());\n-\n+            AbstractSchema schema = getSchema(attributeMod.getSchema(), attrUtil.schemaClass());\n             if (schema != null) {\n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (schema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.intMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (schema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.intMappingType()\n+                                && attributable.getResources().contains(resource)) {\n \n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n+                        }\n                     }\n-                }\n \n-                attribute = attributable.getAttribute(schema.getName());\n-                if (attribute == null) {\n-                    attribute = attributableUtil.newAttr();\n-                    attribute.setSchema(schema);\n-                    attribute.setOwner(attributable);\n+                    AbstractAttr attribute = attributable.getAttribute(schema.getName());\n+                    if (attribute == null) {\n+                        attribute = attrUtil.newAttr();\n+                        attribute.setSchema(schema);\n+                        attribute.setOwner(attributable);\n \n-                    attributable.addAttribute(attribute);\n-                }\n+                        attributable.addAttribute(attribute);\n+                    }\n \n-                // 1.1 remove values\n-                valuesToBeRemoved = new HashSet<Long>();\n-                for (String valueToBeRemoved : attributeMod.getValuesToBeRemoved()) {\n+                    // 1.1 remove values\n+                    valuesToBeRemoved = new HashSet<Long>();\n+                    for (String valueToBeRemoved : attributeMod.getValuesToBeRemoved()) {\n \n-                    if (attribute.getSchema().isUniqueConstraint()) {\n-                        if (attribute.getUniqueValue() != null\n-                                && valueToBeRemoved.equals(attribute.getUniqueValue().getValueAsString())) {\n+                        if (attribute.getSchema().isUniqueConstraint()) {\n+                            if (attribute.getUniqueValue() != null\n+                                    && valueToBeRemoved.equals(attribute.getUniqueValue().getValueAsString())) {\n \n-                            valuesToBeRemoved.add(attribute.getUniqueValue().getId());\n-                        }\n-                    } else {\n-                        for (AbstractAttrValue mav : attribute.getValues()) {\n-                            if (valueToBeRemoved.equals(mav.getValueAsString())) {\n-                                valuesToBeRemoved.add(mav.getId());\n+                                valuesToBeRemoved.add(attribute.getUniqueValue().getId());\n+                            }\n+                        } else {\n+                            for (AbstractAttrValue mav : attribute.getValues()) {\n+                                if (valueToBeRemoved.equals(mav.getValueAsString())) {\n+                                    valuesToBeRemoved.add(mav.getId());\n+                                }\n                             }\n                         }\n                     }\n-                }\n-                for (Long attributeValueId : valuesToBeRemoved) {\n-                    attributeValueDAO.delete(attributeValueId, attributableUtil.attrValueClass());\n-                }\n+                    for (Long attributeValueId : valuesToBeRemoved) {\n+                        attributeValueDAO.delete(attributeValueId, attrUtil.attrValueClass());\n+                    }\n \n-                // 1.2 add values\n-                valuesToBeAdded = attributeMod.getValuesToBeAdded();\n-                if (valuesToBeAdded != null\n-                        && !valuesToBeAdded.isEmpty()\n-                        && (!schema.isUniqueConstraint() || attribute.getUniqueValue() == null || !valuesToBeAdded.\n-                        iterator().next().equals(attribute.getUniqueValue().getValueAsString()))) {\n+                    // 1.2 add values\n+                    valuesToBeAdded = attributeMod.getValuesToBeAdded();\n+                    if (valuesToBeAdded != null\n+                            && !valuesToBeAdded.isEmpty()\n+                            && (!schema.isUniqueConstraint() || attribute.getUniqueValue() == null || !valuesToBeAdded.\n+                            iterator().next().equals(attribute.getUniqueValue().getValueAsString()))) {\n \n-                    fillAttribute(attributeMod.getValuesToBeAdded(), attributableUtil, schema, attribute, invalidValues);\n-                }\n+                        fillAttribute(attributeMod.getValuesToBeAdded(), attrUtil, schema, attribute, invalidValues);\n+                    }\n \n-                // if no values are in, the attribute can be safely removed\n-                if (attribute.getValuesAsStrings().isEmpty()) {\n-                    attrDAO.delete(attribute);\n+                    // if no values are in, the attribute can be safely removed\n+                    if (attribute.getValuesAsStrings().isEmpty()) {\n+                        attrDAO.delete(attribute);\n+                    }\n                 }\n             }\n         }\n@@ -526,31 +513,30 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n         // 5. derived attributes to be removed\n         for (String derivedAttributeToBeRemoved : attributableMod.getDerivedAttributesToBeRemoved()) {\n+            AbstractDerSchema derSchema = getDerivedSchema(derivedAttributeToBeRemoved, attrUtil.derSchemaClass());\n \n-            derivedSchema = getDerivedSchema(derivedAttributeToBeRemoved, attributableUtil.derSchemaClass());\n-\n-            if (derivedSchema != null) {\n-                derivedAttribute = attributable.getDerivedAttribute(derivedSchema.getName());\n-\n-                if (derivedAttribute == null) {\n-                    LOG.debug(\"No derived attribute found for schema {}\", derivedSchema.getName());\n+            if (derSchema != null) {\n+                AbstractDerAttr derAttr = attributable.getDerivedAttribute(derSchema.getName());\n+                if (derAttr == null) {\n+                    LOG.debug(\"No derived attribute found for schema {}\", derSchema.getName());\n                 } else {\n-                    derAttrDAO.delete(derivedAttribute);\n+                    derAttrDAO.delete(derAttr);\n                 }\n \n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (derivedSchema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.derIntMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (derSchema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.derIntMappingType()\n+                                && attributable.getResources().contains(resource)) {\n \n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n \n-                        if (mapping.isAccountid() && derivedAttribute != null\n-                                && !derivedAttribute.getValue(attributable.getAttributes()).isEmpty()) {\n+                            if (mapItem.isAccountid() && derAttr != null\n+                                    && !derAttr.getValue(attributable.getAttributes()).isEmpty()) {\n \n-                            propByRes.addOldAccountId(mapping.getResource().getName(),\n-                                    derivedAttribute.getValue(attributable.getAttributes()));\n+                                propByRes.addOldAccountId(resource.getName(),\n+                                        derAttr.getValue(attributable.getAttributes()));\n+                            }\n                         }\n                     }\n                 }\n@@ -561,37 +547,36 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n \n         // 6. derived attributes to be added\n         for (String derivedAttributeToBeAdded : attributableMod.getDerivedAttributesToBeAdded()) {\n-\n-            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded, attributableUtil.derSchemaClass());\n-\n-            if (derivedSchema != null) {\n-                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-                    if (derivedSchema.getName().equals(mapping.getIntAttrName())\n-                            && mapping.getIntMappingType() == attributableUtil.derIntMappingType()\n-                            && mapping.getResource() != null\n-                            && attributable.getResources().contains(mapping.getResource())) {\n-\n-                        propByRes.add(PropagationOperation.UPDATE, mapping.getResource().getName());\n+            AbstractDerSchema derSchema = getDerivedSchema(derivedAttributeToBeAdded, attrUtil.derSchemaClass());\n+            if (derSchema != null) {\n+                for (ExternalResource resource : resourceDAO.findAll()) {\n+                    for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n+                        if (derSchema.getName().equals(mapItem.getIntAttrName())\n+                                && mapItem.getIntMappingType() == attrUtil.derIntMappingType()\n+                                && attributable.getResources().contains(resource)) {\n+\n+                            propByRes.add(PropagationOperation.UPDATE, resource.getName());\n+                        }\n                     }\n-                }\n \n-                derivedAttribute = attributableUtil.newDerAttr();\n-                derivedAttribute.setDerivedSchema(derivedSchema);\n-                derivedAttribute.setOwner(attributable);\n-                attributable.addDerivedAttribute(derivedAttribute);\n+                    AbstractDerAttr derAttr = attrUtil.newDerAttr();\n+                    derAttr.setDerivedSchema(derSchema);\n+                    derAttr.setOwner(attributable);\n+                    attributable.addDerivedAttribute(derAttr);\n+                }\n             }\n         }\n \n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n         // 7. virtual attributes: for users this is delegated to PropagationManager\n-        if (AttributableType.USER != attributableUtil.getType()) {\n+        if (AttributableType.USER != attrUtil.getType()) {\n             fillVirtual(attributable, attributableMod.getVirtualAttributesToBeRemoved(), attributableMod.\n-                    getVirtualAttributesToBeUpdated(), attributableUtil);\n+                    getVirtualAttributesToBeUpdated(), attrUtil);\n         }\n \n         // Finally, check if mandatory values are missing\n-        SyncopeClientException requiredValuesMissing = checkMandatory(attributableUtil, attributable);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(attrUtil, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n         }"},{"sha":"c69612038b2014584a74c68cf7465376fe68991c","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":98,"deletions":105,"changes":203,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -26,16 +26,19 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang.SerializationUtils;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.util.JexlUtil;\n@@ -58,7 +61,7 @@ public class ResourceDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] MAPPING_IGNORE_PROPERTIES = {\"id\", \"resource\", \"syncToken\"};\n+    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = {\"id\", \"mapping\"};\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n@@ -69,9 +72,6 @@ public class ResourceDataBinder {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    @Autowired\n-    private ConnInstanceDataBinder connInstancebinder;\n-\n     public ExternalResource create(final ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -104,26 +104,36 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         resource.setPropagationMode(resourceTO.getPropagationMode());\n \n-        resource.setMappings(getSchemaMappings(resource, resourceTO.getMappings()));\n-\n-        resource.setAccountLink(resourceTO.getAccountLink());\n+        if (resourceTO.getUmapping() != null) {\n+            UMapping mapping = new UMapping();\n+            resource.setUmapping(mapping);\n+            mapping.setAccountLink(resourceTO.getUmapping().getAccountLink());\n+\n+            Set<UMappingItem> items = getUMappingItems(mapping, resourceTO.getUmapping().getItems());\n+            for (UMappingItem item : items) {\n+                if (item.isAccountid()) {\n+                    mapping.setAccountIdItem(item);\n+                } else if (item.isPassword()) {\n+                    mapping.setPasswordItem(item);\n+                } else {\n+                    mapping.addItem(item);\n+                }\n+            }\n+        }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n         resource.setSyncTraceLevel(resourceTO.getSyncTraceLevel());\n \n-        resource.setPasswordPolicy(resourceTO.getPasswordPolicy() != null\n-                ? (PasswordPolicy) policyDAO.find(resourceTO.getPasswordPolicy())\n-                : null);\n+        resource.setPasswordPolicy(resourceTO.getPasswordPolicy() == null\n+                ? null : (PasswordPolicy) policyDAO.find(resourceTO.getPasswordPolicy()));\n \n-        resource.setAccountPolicy(resourceTO.getAccountPolicy() != null\n-                ? (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy())\n-                : null);\n+        resource.setAccountPolicy(resourceTO.getAccountPolicy() == null\n+                ? null : (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy()));\n \n-        resource.setSyncPolicy(resourceTO.getSyncPolicy() != null\n-                ? (SyncPolicy) policyDAO.find(resourceTO.getSyncPolicy())\n-                : null);\n+        resource.setSyncPolicy(resourceTO.getSyncPolicy() == null\n+                ? null : (SyncPolicy) policyDAO.find(resourceTO.getSyncPolicy()));\n \n         resource.setConnectorConfigurationProperties(new HashSet<ConnConfProperty>(resourceTO.getConnConfProperties()));\n \n@@ -145,8 +155,37 @@ public List<ResourceTO> getResourceTOs(final Collection<ExternalResource> resour\n         return resourceTOs;\n     }\n \n-    public ResourceTO getResourceTO(final ExternalResource resource) {\n+    public Set<MappingItemTO> getUMappingItemTOs(final Collection<AbstractMappingItem> items) {\n+        Set<MappingItemTO> uMappingTOs = new HashSet<MappingItemTO>();\n+        for (AbstractMappingItem item : items) {\n+            LOG.debug(\"Asking for TO for {}\", item);\n+            uMappingTOs.add(getUMappingItemTO(item));\n+        }\n+\n+        LOG.debug(\"Collected TOs: {}\", uMappingTOs);\n+\n+        return uMappingTOs;\n+    }\n+\n+    public MappingItemTO getUMappingItemTO(final AbstractMappingItem item) {\n+        if (item == null) {\n+            LOG.error(\"Provided null mapping\");\n+\n+            return null;\n+        }\n+\n+        MappingItemTO itemTO = new MappingItemTO();\n+\n+        BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+\n+        itemTO.setId(item.getId());\n+\n+        LOG.debug(\"Obtained SchemaMappingTO {}\", itemTO);\n+\n+        return itemTO;\n+    }\n \n+    public ResourceTO getResourceTO(final ExternalResource resource) {\n         if (resource == null) {\n             return null;\n         }\n@@ -159,14 +198,24 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         // set the connector instance\n         ConnInstance connector = resource.getConnector();\n \n-        resourceTO.setConnectorId(connector != null\n-                ? connector.getId()\n-                : null);\n+        resourceTO.setConnectorId(connector == null ? null : connector.getId());\n \n         // set the mappings\n-        resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));\n-\n-        resourceTO.setAccountLink(resource.getAccountLink());\n+        if (resource.getUmapping() != null) {\n+            MappingTO mappingTO = new MappingTO();\n+            resourceTO.setUmapping(mappingTO);\n+            mappingTO.setAccountLink(resource.getUmapping().getAccountLink());\n+\n+            for (MappingItemTO itemTO : getUMappingItemTOs(resource.getUmapping().getItems())) {\n+                if (itemTO.isAccountid()) {\n+                    mappingTO.setAccountIdItem(itemTO);\n+                } else if (itemTO.isPassword()) {\n+                    mappingTO.setPasswordItem(itemTO);\n+                } else {\n+                    mappingTO.addItem(itemTO);\n+                }\n+            }\n+        }\n \n         resourceTO.setEnforceMandatoryCondition(resource.isEnforceMandatoryCondition());\n \n@@ -181,17 +230,14 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setDeleteTraceLevel(resource.getDeleteTraceLevel());\n         resourceTO.setSyncTraceLevel(resource.getSyncTraceLevel());\n \n-        resourceTO.setPasswordPolicy(resource.getPasswordPolicy() != null\n-                ? resource.getPasswordPolicy().getId()\n-                : null);\n+        resourceTO.setPasswordPolicy(resource.getPasswordPolicy() == null\n+                ? null : resource.getPasswordPolicy().getId());\n \n-        resourceTO.setAccountPolicy(resource.getAccountPolicy() != null\n-                ? resource.getAccountPolicy().getId()\n-                : null);\n+        resourceTO.setAccountPolicy(resource.getAccountPolicy() == null\n+                ? null : resource.getAccountPolicy().getId());\n \n-        resourceTO.setSyncPolicy(resource.getSyncPolicy() != null\n-                ? resource.getSyncPolicy().getId()\n-                : null);\n+        resourceTO.setSyncPolicy(resource.getSyncPolicy() == null\n+                ? null : resource.getSyncPolicy().getId());\n \n         resourceTO.setConnectorConfigurationProperties(resource.getConfiguration());\n         resourceTO.setSyncToken(resource.getSerializedSyncToken());\n@@ -201,27 +247,16 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         return resourceTO;\n     }\n \n-    private Set<SchemaMapping> getSchemaMappings(final ExternalResource resource,\n-            final List<SchemaMappingTO> mappings) {\n-\n-        if (mappings == null) {\n-            return null;\n+    private Set<UMappingItem> getUMappingItems(final UMapping mapping, final Collection<MappingItemTO> itemTOs) {\n+        Set<UMappingItem> items = new HashSet<UMappingItem>(itemTOs.size());\n+        for (MappingItemTO itemTO : itemTOs) {\n+            items.add(getUMappingItem(itemTO, mapping));\n         }\n \n-        final Set<SchemaMapping> schemaMappings = new HashSet<SchemaMapping>();\n-\n-        SchemaMapping schemaMapping;\n-        for (SchemaMappingTO mapping : mappings) {\n-            schemaMapping = getSchemaMapping(resource, mapping);\n-            if (schemaMapping != null) {\n-                schemaMappings.add(schemaMapping);\n-            }\n-        }\n-\n-        return schemaMappings;\n+        return items;\n     }\n \n-    private SchemaMapping getSchemaMapping(final ExternalResource resource, final SchemaMappingTO mappingTO)\n+    private UMappingItem getUMappingItem(final MappingItemTO itemTO, final UMapping mapping)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -231,23 +266,23 @@ private SchemaMapping getSchemaMapping(final ExternalResource resource, final Sc\n \n         // this control needs to be free to get schema names\n         // without a complete/good resourceTO object\n-        if (mappingTO == null || mappingTO.getIntMappingType() == null) {\n+        if (itemTO == null || itemTO.getIntMappingType() == null) {\n             LOG.error(\"Null mappingTO provided\");\n             return null;\n         }\n \n-        if (mappingTO.getIntAttrName() == null) {\n-            switch (mappingTO.getIntMappingType()) {\n+        if (itemTO.getIntAttrName() == null) {\n+            switch (itemTO.getIntMappingType()) {\n                 case SyncopeUserId:\n-                    mappingTO.setIntAttrName(IntMappingType.SyncopeUserId.toString());\n+                    itemTO.setIntAttrName(IntMappingType.SyncopeUserId.toString());\n                     break;\n \n                 case Password:\n-                    mappingTO.setIntAttrName(IntMappingType.Password.toString());\n+                    itemTO.setIntAttrName(IntMappingType.Password.toString());\n                     break;\n \n                 case Username:\n-                    mappingTO.setIntAttrName(IntMappingType.Username.toString());\n+                    itemTO.setIntAttrName(IntMappingType.Username.toString());\n                     break;\n \n                 default:\n@@ -262,14 +297,13 @@ private SchemaMapping getSchemaMapping(final ExternalResource resource, final Sc\n         }\n \n         // no mandatory condition implies mandatory condition false\n-        if (!jexlUtil.isExpressionValid(mappingTO.getMandatoryCondition() != null\n-                ? mappingTO.getMandatoryCondition()\n-                : \"false\")) {\n+        if (!jexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                ? \"false\" : itemTO.getMandatoryCondition())) {\n \n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n \n-            invalidMandatoryCondition.addElement(mappingTO.getMandatoryCondition());\n+            invalidMandatoryCondition.addElement(itemTO.getMandatoryCondition());\n \n             scce.addException(invalidMandatoryCondition);\n         }\n@@ -278,50 +312,9 @@ private SchemaMapping getSchemaMapping(final ExternalResource resource, final Sc\n             throw scce;\n         }\n \n-        SchemaMapping mapping = new SchemaMapping();\n-\n-        BeanUtils.copyProperties(mappingTO, mapping, MAPPING_IGNORE_PROPERTIES);\n-\n-        mapping.setResource(resource);\n-\n-        return mapping;\n-    }\n-\n-    public List<SchemaMappingTO> getSchemaMappingTOs(final Collection<SchemaMapping> mappings) {\n-        if (mappings == null) {\n-            LOG.error(\"No mapping provided.\");\n-\n-            return null;\n-        }\n-\n-        List<SchemaMappingTO> schemaMappingTOs = new ArrayList<SchemaMappingTO>();\n-        for (SchemaMapping mapping : mappings) {\n-            LOG.debug(\"Asking for TO for {}\", mapping);\n-\n-            schemaMappingTOs.add(getSchemaMappingTO(mapping));\n-        }\n-\n-        LOG.debug(\"Collected TOs: {}\", schemaMappingTOs);\n-\n-        return schemaMappingTOs;\n-    }\n-\n-    public SchemaMappingTO getSchemaMappingTO(final SchemaMapping schemaMapping) {\n-        if (schemaMapping == null) {\n-            LOG.error(\"Provided null mapping\");\n-\n-            return null;\n-        }\n-\n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-\n-        BeanUtils.copyProperties(schemaMapping, schemaMappingTO, MAPPING_IGNORE_PROPERTIES);\n-\n-        schemaMappingTO.setId(schemaMapping.getId());\n-\n-        LOG.debug(\"Obtained SchemaMappingTO {}\", schemaMappingTO);\n-\n-        return schemaMappingTO;\n+        UMappingItem item = new UMappingItem();\n+        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+        return item;\n     }\n \n     public ConnInstance getConnInstance(final ExternalResource resource) {"},{"sha":"f5a802b317f6448f43ae83345eaa89ff7b9b2ded","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -30,10 +30,10 @@\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.Policy;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.membership.MAttr;\n import org.apache.syncope.core.persistence.beans.membership.MDerAttr;\n import org.apache.syncope.core.persistence.beans.membership.MVirAttr;\n@@ -134,8 +134,7 @@ public SyncopeUser getUserFromUsername(final String username)\n      * Get pre-configured password cipher algorithm.\n      *\n      * @return cipher algorithm.\n-     * @throws NotFoundException in case of algorithm not included into\n-     * <code>CipherAlgorithm</code>.\n+     * @throws NotFoundException in case of algorithm not included into <code>CipherAlgorithm</code>.\n      */\n     private CipherAlgorithm getCipherAlgoritm()\n             throws NotFoundException {\n@@ -275,8 +274,8 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             propByRes.addAll(PropagationOperation.UPDATE, currentResources);\n \n             for (ExternalResource resource : user.getResources()) {\n-                for (SchemaMapping mapping : resource.getMappings()) {\n-                    if (mapping.isAccountid() && mapping.getIntMappingType() == IntMappingType.Username) {\n+                for (AbstractMappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (mapItem.isAccountid() && mapItem.getIntMappingType() == IntMappingType.Username) {\n                         propByRes.addOldAccountId(resource.getName(), oldUsername);\n                     }\n                 }\n@@ -296,11 +295,10 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n         final Set<String> toBeProvisioned = new HashSet<String>();\n \n         // memberships to be removed\n-        Membership membership;\n         for (Long membershipId : userMod.getMembershipsToBeRemoved()) {\n             LOG.debug(\"Membership to be removed: {}\", membershipId);\n \n-            membership = membershipDAO.find(membershipId);\n+            Membership membership = membershipDAO.find(membershipId);\n             if (membership == null) {\n                 LOG.debug(\"Invalid membership id specified to be removed: {}\", membershipId);\n             } else {\n@@ -360,7 +358,7 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             if (role == null) {\n                 LOG.debug(\"Ignoring invalid role {}\", membershipMod.getRole());\n             } else {\n-                membership = user.getMembership(role.getId());\n+                Membership membership = user.getMembership(role.getId());\n                 if (membership == null) {\n                     membership = new Membership();\n                     membership.setSyncopeRole(role);"},{"sha":"f5b2c862514bf9e947d776c39b5068eee929f2e3","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncJob.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncJob.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -21,9 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n@@ -33,7 +33,6 @@\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.types.ConflictResolutionAction;\n import org.apache.syncope.types.SyncPolicySpec;\n import org.apache.syncope.types.TraceLevel;\n@@ -228,8 +227,8 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             throw new JobExecutionException(msg, e);\n         }\n \n-        final SchemaMapping accountIdMap = SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n-        if (accountIdMap == null) {\n+        final AbstractMappingItem accountIdItem = syncTask.getResource().getUmapping().getAccountIdItem();\n+        if (accountIdItem == null) {\n             throw new JobExecutionException(\"Invalid account id mapping for resource \" + syncTask.getResource());\n         }\n \n@@ -257,10 +256,10 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         try {\n             if (syncTask.isFullReconciliation()) {\n                 connector.getAllObjects(ObjectClass.ACCOUNT, handler,\n-                        connector.getOperationOptions(syncTask.getResource()));\n+                        connector.getOperationOptions(syncTask.getResource().getUmapping()));\n             } else {\n                 connector.sync(ObjectClass.ACCOUNT, syncTask.getResource().getSyncToken(), handler,\n-                        connector.getOperationOptions(syncTask.getResource()));\n+                        connector.getOperationOptions(syncTask.getResource().getUmapping()));\n             }\n \n             if (!dryRun && !syncTask.isFullReconciliation()) {"},{"sha":"31143907e0b8e04f498c0b74d73baef12746fd83","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncopeSyncResultHanlder.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n@@ -51,7 +51,6 @@\n import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.core.workflow.UserWorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.types.ConflictResolutionAction;\n@@ -204,9 +203,8 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n             SyncopeUser found;\n             List<SyncopeUser> users;\n \n-            final SchemaMapping accountIdMap =\n-                    SchemaMappingUtil.getAccountIdMapping(syncTask.getResource().getMappings());\n-            switch (accountIdMap.getIntMappingType()) {\n+            final AbstractMappingItem accountIdItem = syncTask.getResource().getUmapping().getAccountIdItem();\n+            switch (accountIdItem.getIntMappingType()) {\n                 case Username:\n                     found = userDAO.find(uid);\n                     if (found != null) {\n@@ -224,7 +222,7 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                 case UserSchema:\n                     final UAttrValue value = new UAttrValue();\n \n-                    USchema schema = schemaDAO.find(accountIdMap.getIntAttrName(), USchema.class);\n+                    USchema schema = schemaDAO.find(accountIdItem.getIntAttrName(), USchema.class);\n                     if (schema == null) {\n                         value.setStringValue(uid);\n                     } else {\n@@ -236,15 +234,15 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                         }\n                     }\n \n-                    users = userDAO.findByAttrValue(accountIdMap.getIntAttrName(), value);\n+                    users = userDAO.findByAttrValue(accountIdItem.getIntAttrName(), value);\n                     for (SyncopeUser user : users) {\n                         result.add(user.getId());\n                     }\n                     break;\n \n                 case UserDerivedSchema:\n                     try {\n-                        users = userDAO.findByDerAttrValue(accountIdMap.getIntAttrName(), uid);\n+                        users = userDAO.findByDerAttrValue(accountIdItem.getIntAttrName(), uid);\n                         for (SyncopeUser user : users) {\n                             result.add(user.getId());\n                         }\n@@ -254,16 +252,15 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n                     break;\n \n                 default:\n-                    LOG.error(\"Invalid accountId type '{}'\", accountIdMap.getIntMappingType());\n+                    LOG.error(\"Invalid accountId type '{}'\", accountIdItem.getIntMappingType());\n             }\n         } else {\n             // search for external attribute's name/value of each specified name\n \n             final Map<String, Attribute> extValues = new HashMap<String, Attribute>();\n \n-            for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-                extValues.put(SchemaMappingUtil.getIntAttrName(mapping),\n-                        delta.getObject().getAttributeByName(SchemaMappingUtil.getExtAttrName(mapping)));\n+            for (AbstractMappingItem item : syncTask.getResource().getUmapping().getItems()) {\n+                extValues.put(item.getIntAttrName(), delta.getObject().getAttributeByName(item.getExtAttrName()));\n             }\n \n             // search for user by attribute(s) specified in the policy"},{"sha":"cb1547380e22a00edc2075ca22710ae1e843e7f1","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,13 +18,17 @@\n  */\n package org.apache.syncope.core.util;\n \n+import java.util.Collections;\n+import java.util.List;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.MAttr;\n import org.apache.syncope.core.persistence.beans.membership.MAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.membership.MAttrValue;\n@@ -38,6 +42,7 @@\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n import org.apache.syncope.core.persistence.beans.role.RDerAttr;\n import org.apache.syncope.core.persistence.beans.role.RDerSchema;\n+import org.apache.syncope.core.persistence.beans.role.RMappingItem;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n import org.apache.syncope.core.persistence.beans.role.RVirAttr;\n import org.apache.syncope.core.persistence.beans.role.RVirSchema;\n@@ -46,6 +51,7 @@\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.beans.user.UDerAttr;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.beans.user.UVirAttr;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n@@ -72,6 +78,47 @@ public AttributableType getType() {\n         return type;\n     }\n \n+    public <T extends AbstractMappingItem> List<T> getMappingItems(final ExternalResource resource) {\n+        List<T> result = Collections.EMPTY_LIST;\n+\n+        if (resource != null) {\n+            switch (type) {\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        result = resource.getUmapping().getItems();\n+                    }\n+                    break;\n+                case ROLE:\n+                    if (resource.getRmapping() != null) {\n+                        result = resource.getRmapping().getItems();\n+                    }\n+                    break;\n+                case MEMBERSHIP:\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractMappingItem> Class<T> mappingItemClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case USER:\n+                result = UMappingItem.class;\n+                break;\n+            case ROLE:\n+                result = RMappingItem.class;\n+                break;\n+            case MEMBERSHIP:\n+            default:\n+                result = AbstractMappingItem.class;\n+        }\n+\n+        return result;\n+    }\n+\n     public IntMappingType intMappingType() {\n         IntMappingType result;\n "},{"sha":"624981f4c47b5a18f6dba1cfc4103e69da3d2e86","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":34,"deletions":39,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -37,9 +37,9 @@\n import org.apache.syncope.client.util.AttributableOperations;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -49,6 +49,7 @@\n import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PasswordPolicySpec;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -175,11 +176,11 @@ private UserTO getUserTOFromConnObject(final ConnectorObject obj, final SyncTask\n         final UserTO userTO = new UserTO();\n \n         // 1. fill with data from connector object\n-        for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            Attribute attribute = obj.getAttributeByName(SchemaMappingUtil.getExtAttrName(mapping));\n+        for (AbstractMappingItem item : syncTask.getResource().getUmapping().getItems()) {\n+            Attribute attribute = obj.getAttributeByName(item.getExtAttrName());\n \n             AttributeTO attributeTO;\n-            switch (mapping.getIntMappingType()) {\n+            switch (item.getIntMappingType()) {\n                 case SyncopeUserId:\n                     break;\n \n@@ -197,7 +198,7 @@ private UserTO getUserTOFromConnObject(final ConnectorObject obj, final SyncTask\n \n                 case UserSchema:\n                     attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n+                    attributeTO.setSchema(item.getIntAttrName());\n \n                     for (Object value : attribute == null || attribute.getValue() == null\n                             ? Collections.emptyList()\n@@ -210,13 +211,13 @@ private UserTO getUserTOFromConnObject(final ConnectorObject obj, final SyncTask\n \n                 case UserDerivedSchema:\n                     attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n+                    attributeTO.setSchema(item.getIntAttrName());\n                     userTO.addDerivedAttribute(attributeTO);\n                     break;\n \n                 case UserVirtualSchema:\n                     attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(mapping.getIntAttrName());\n+                    attributeTO.setSchema(item.getIntAttrName());\n \n                     for (Object value : attribute == null || attribute.getValue() == null\n                             ? Collections.emptyList()\n@@ -341,43 +342,42 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         final ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n \n-        final Map<SchemaMappingWrapper, ConnectorObject> remoteObjects =\n-                new HashMap<SchemaMappingWrapper, ConnectorObject>();\n+        final Map<ConnectorObject, Set<AbstractMappingItem>> connObj2MapItems =\n+                new HashMap<ConnectorObject, Set<AbstractMappingItem>>();\n \n         for (ExternalResource resource : owner.getResources()) {\n             LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());\n             try {\n-                final SchemaMappingWrapper mappings = new SchemaMappingWrapper(resource.getMappings());\n-\n-                final String accountId = SchemaMappingUtil.getAccountIdValue(owner, mappings.getAccountIdMapping());\n+                final String accountId = resource.getUmapping() == null\n+                        ? null : MappingUtil.getAccountIdValue(owner, resource.getUmapping());\n \n                 LOG.debug(\"Search for object with accountId '{}'\", accountId);\n \n                 if (StringUtils.isNotBlank(accountId)) {\n                     // Retrieve attributes to get\n+                    final Set<AbstractMappingItem> virMapItems = new HashSet<AbstractMappingItem>();\n                     final Set<String> extAttrNames = new HashSet<String>();\n \n-                    for (Set<SchemaMapping> virAttrMappings : mappings.getuVirMappings().values()) {\n-                        for (SchemaMapping virAttrMapping : virAttrMappings) {\n-                            extAttrNames.add(SchemaMappingUtil.getExtAttrName(virAttrMapping));\n+                    for (AbstractMappingItem item : resource.getUmapping().getItems()) {\n+                        if (item.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n+                            virMapItems.add(item);\n+                            extAttrNames.add(item.getExtAttrName());\n                         }\n                     }\n \n                     // Search for remote object\n-                    if (extAttrNames != null) {\n-                        final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n-                        oob.setAttributesToGet(extAttrNames);\n-\n-                        final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n-                        final ConnectorObject connectorObject =\n-                                connector.getObject(ObjectClass.ACCOUNT, new Uid(accountId), oob.build());\n+                    final OperationOptionsBuilder oob = new OperationOptionsBuilder();\n+                    oob.setAttributesToGet(extAttrNames);\n \n-                        if (connectorObject != null) {\n-                            remoteObjects.put(mappings, connectorObject);\n-                        }\n+                    final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n+                    final ConnectorObject connObj =\n+                            connector.getObject(ObjectClass.ACCOUNT, new Uid(accountId), oob.build());\n \n-                        LOG.debug(\"Retrieved remotye object {}\", connectorObject);\n+                    if (connObj != null) {\n+                        connObj2MapItems.put(connObj, virMapItems);\n                     }\n+\n+                    LOG.debug(\"Retrieved remotye object {}\", connObj);\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"Unable to retrieve virtual attribute values on '{}'\", resource.getName(), e);\n@@ -387,19 +387,14 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         for (AbstractVirAttr virAttr : owner.getVirtualAttributes()) {\n             LOG.debug(\"Provide value for virtual attribute '{}'\", virAttr.getVirtualSchema().getName());\n \n-            for (Map.Entry<SchemaMappingWrapper, ConnectorObject> entry : remoteObjects.entrySet()) {\n-                final Set<SchemaMapping> virAttrMappings = entry.getKey().getuVirMappings().\n-                        get(virAttr.getVirtualSchema().getName());\n-\n-                if (virAttrMappings != null) {\n-                    for (SchemaMapping virAttrMapping : virAttrMappings) {\n-                        final String extAttrName = SchemaMappingUtil.getExtAttrName(virAttrMapping);\n-                        final Attribute extAttr = entry.getValue().getAttributeByName(extAttrName);\n-                        if (extAttr != null && extAttr.getValue() != null && !extAttr.getValue().isEmpty()) {\n-                            for (Object obj : extAttr.getValue()) {\n-                                if (obj != null) {\n-                                    virAttr.addValue(obj.toString());\n-                                }\n+            for (Map.Entry<ConnectorObject, Set<AbstractMappingItem>> entry : connObj2MapItems.entrySet()) {\n+                for (AbstractMappingItem vAttrMapItem : entry.getValue()) {\n+                    final String extAttrName = vAttrMapItem.getExtAttrName();\n+                    final Attribute extAttr = entry.getKey().getAttributeByName(extAttrName);\n+                    if (extAttr != null && extAttr.getValue() != null && !extAttr.getValue().isEmpty()) {\n+                        for (Object obj : extAttr.getValue()) {\n+                            if (obj != null) {\n+                                virAttr.addValue(obj.toString());\n                             }\n                         }\n                     }"},{"sha":"a119f6efe61268426fe50da3e6c2ebabac85612b","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"renamed","additions":72,"deletions":128,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -31,9 +30,10 @@\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.membership.MDerSchema;\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n@@ -47,85 +47,47 @@\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.types.IntMappingType;\n-import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SchemaMappingUtil {\n+public final class MappingUtil {\n \n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(SchemaMappingUtil.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(MappingUtil.class);\n \n-    public static String getExtAttrName(final SchemaMapping mapping) {\n-        final String name;\n-\n-        if (mapping.isAccountid()) {\n-            name = Uid.NAME;\n-        } else if (mapping.isPassword()) {\n-            name = OperationalAttributes.PASSWORD_NAME;\n-        } else {\n-            name = mapping.getExtAttrName();\n-        }\n-\n-        return name;\n-    }\n-\n-    public static String getIntAttrName(final SchemaMapping mapping) {\n-        final String name;\n-\n-        switch (mapping.getIntMappingType()) {\n-            case SyncopeUserId:\n-                name = \"id\";\n-                break;\n-            case Username:\n-                name = \"username\";\n-                break;\n-            case Password:\n-                name = \"password\";\n-                break;\n-            default:\n-                name = mapping.getIntAttrName();\n-        }\n-\n-        return name;\n+    private MappingUtil() {\n     }\n \n-    public static Set<SchemaMapping> getMappings(final Collection<SchemaMapping> mappings, final String intAttrName,\n-            final IntMappingType type) {\n+    public static <T extends AbstractMappingItem> List<T> getMatchingMappingItems(final Collection<T> items,\n+            final String intAttrName, final IntMappingType type) {\n \n-        final Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n+        final List<T> result = new ArrayList<T>();\n \n-        for (SchemaMapping schemaMapping : mappings) {\n-            if (schemaMapping.getIntMappingType() == type && intAttrName.equals(getIntAttrName(schemaMapping))) {\n-                result.add(schemaMapping);\n+        for (T mapItem : items) {\n+            if (mapItem.getIntMappingType() == type && intAttrName.equals(mapItem.getIntAttrName())) {\n+                result.add(mapItem);\n             }\n         }\n \n         return result;\n     }\n \n-    public static Set<SchemaMapping> getMappings(final Collection<SchemaMapping> mappings, final String intAttrName) {\n+    public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(final Collection<T> mapItems,\n+            final String intAttrName) {\n \n-        final Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n+        final Set<T> result = new HashSet<T>();\n \n-        for (SchemaMapping schemaMapping : mappings) {\n-            if (intAttrName.equals(getIntAttrName(schemaMapping))) {\n-                result.add(schemaMapping);\n+        for (T mapItem : mapItems) {\n+            if (intAttrName.equals(mapItem.getIntAttrName())) {\n+                result.add(mapItem);\n             }\n         }\n \n         return result;\n     }\n \n-    public static String getIntAttrName(final SchemaMapping mapping, final IntMappingType type) {\n-        return type == mapping.getIntMappingType()\n-                ? getIntAttrName(mapping)\n-                : null;\n-    }\n-\n     /**\n      * Get attribute values.\n      *\n@@ -135,7 +97,7 @@ public static String getIntAttrName(final SchemaMapping mapping, final IntMappin\n      * @param schemaDAO schema DAO\n      * @return schema and attribute values.\n      */\n-    public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(final SchemaMapping mapping,\n+    public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(final AbstractMappingItem mapping,\n             final List<AbstractAttributable> attributables, final String password, final SchemaDAO schemaDAO) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mapping.getIntMappingType());\n@@ -148,7 +110,7 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n             case UserSchema:\n             case RoleSchema:\n             case MembershipSchema:\n-                schema = schemaDAO.find(mapping.getIntAttrName(), SchemaMappingUtil.getIntMappingTypeClass(mapping.\n+                schema = schemaDAO.find(mapping.getIntAttrName(), MappingUtil.getIntMappingTypeClass(mapping.\n                         getIntMappingType()));\n \n                 for (AbstractAttributable attributable : attributables) {\n@@ -159,9 +121,11 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n                                 ? Collections.singletonList(attr.getUniqueValue()) : attr.getValues());\n                     }\n \n-                    LOG.debug(\"Retrieved attribute {}\" + \"\\n* IntAttrName {}\" + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\", new Object[]{attr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n+                    LOG.debug(\"Retrieved attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{attr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n                 }\n \n                 break;\n@@ -181,9 +145,11 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n                         }\n                     }\n \n-                    LOG.debug(\"Retrieved virtual attribute {}\" + \"\\n* IntAttrName {}\" + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\", new Object[]{virAttr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n+                    LOG.debug(\"Retrieved virtual attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{virAttr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n                 }\n                 break;\n \n@@ -199,9 +165,11 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n                         values.add(attrValue);\n                     }\n \n-                    LOG.debug(\"Retrieved attribute {}\" + \"\\n* IntAttrName {}\" + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\", new Object[]{derAttr, mapping.getIntAttrName(),\n-                                mapping.getIntMappingType(), values});\n+                    LOG.debug(\"Retrieved attribute {}\"\n+                            + \"\\n* IntAttrName {}\"\n+                            + \"\\n* IntMappingType {}\"\n+                            + \"\\n* Attribute values {}\",\n+                            new Object[]{derAttr, mapping.getIntAttrName(), mapping.getIntMappingType(), values});\n                 }\n                 break;\n \n@@ -223,11 +191,9 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n \n             case Password:\n                 AbstractAttrValue attrValue = new UAttrValue();\n-\n                 if (password != null) {\n                     attrValue.setStringValue(password);\n                 }\n-\n                 values.add(attrValue);\n                 break;\n \n@@ -239,102 +205,126 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n         return new DefaultMapEntry(schema, values);\n     }\n \n-    public static List<String> getIntValueAsStrings(\n-            final AbstractAttributable attributable, final SchemaMapping mapping) {\n-        \n-        return getIntValueAsStrings(attributable, mapping, null);\n-    }\n-\n-    public static List<String> getIntValueAsStrings(\n-            final AbstractAttributable attributable, final SchemaMapping mapping, String clearPassword) {\n+    public static List<String> getIntValueAsStrings(final AbstractAttributable attributable,\n+            final AbstractMappingItem mapItem, final String clearPassword) {\n \n         List<String> value = new ArrayList<String>();\n \n-        if (mapping != null) {\n-            switch (mapping.getIntMappingType()) {\n+        if (mapItem != null) {\n+            switch (mapItem.getIntMappingType()) {\n                 case Username:\n                     if (!(attributable instanceof SyncopeUser)) {\n                         throw new ClassCastException(\"mappingtype is Username, but attributable is not SyncopeUser: \"\n                                 + attributable.getClass().getName());\n                     }\n                     value.add(((SyncopeUser) attributable).getUsername());\n                     break;\n+\n                 case Password:\n                     if (clearPassword != null) {\n                         value.add(clearPassword);\n                     }\n                     break;\n+\n                 case UserSchema:\n                 case RoleSchema:\n                 case MembershipSchema:\n-                    AbstractAttr abstractAttr = attributable.getAttribute(mapping.getIntAttrName());\n+                    AbstractAttr abstractAttr = attributable.getAttribute(mapItem.getIntAttrName());\n                     if (abstractAttr != null && abstractAttr.getValues() != null) {\n                         value.addAll(abstractAttr.getValuesAsStrings());\n                     }\n                     break;\n+\n                 case UserVirtualSchema:\n                 case RoleVirtualSchema:\n                 case MembershipVirtualSchema:\n-                    AbstractVirAttr abstractVirAttr = attributable.getVirtualAttribute(mapping.getIntAttrName());\n+                    AbstractVirAttr abstractVirAttr = attributable.getVirtualAttribute(mapItem.getIntAttrName());\n                     if (abstractVirAttr != null && abstractVirAttr.getValues() != null) {\n                         value.addAll(abstractVirAttr.getValues());\n                     }\n                     break;\n+\n                 case UserDerivedSchema:\n                 case RoleDerivedSchema:\n                 case MembershipDerivedSchema:\n-                    AbstractDerAttr abstractDerAttr = attributable.getDerivedAttribute(mapping.getIntAttrName());\n+                    AbstractDerAttr abstractDerAttr = attributable.getDerivedAttribute(mapItem.getIntAttrName());\n                     if (abstractDerAttr != null) {\n                         String abstractDerAttrValue = abstractDerAttr.getValue(attributable.getAttributes());\n                         if (abstractDerAttrValue != null) {\n                             value.add(abstractDerAttrValue);\n                         }\n                     }\n                     break;\n+\n                 default:\n             }\n         }\n \n         return value;\n     }\n \n+    public static List<String> getIntValueAsStrings(final AbstractAttributable attributable,\n+            final AbstractMappingItem mapItem) {\n+\n+        return getIntValueAsStrings(attributable, mapItem, null);\n+    }\n+\n+    /**\n+     * Get accountId internal value.\n+     *\n+     * @param attributable attributable\n+     * @param mapping mapping\n+     * @return accountId internal value\n+     */\n+    public static String getAccountIdValue(final AbstractAttributable attributable, final AbstractMapping mapping) {\n+        final List<String> values = getIntValueAsStrings(attributable, mapping.getAccountIdItem());\n+        return values == null || values.isEmpty()\n+                ? null\n+                : values.get(0);\n+    }\n+\n     /**\n      * For given source mapping type, return the corresponding Class object.\n      *\n      * @param intMappingType source mapping type\n      * @return corresponding Class object, if any (can be null)\n      */\n     public static Class getIntMappingTypeClass(final IntMappingType intMappingType) {\n-\n         Class result;\n \n         switch (intMappingType) {\n             case UserSchema:\n                 result = USchema.class;\n                 break;\n+\n             case RoleSchema:\n                 result = RSchema.class;\n                 break;\n+\n             case MembershipSchema:\n                 result = MSchema.class;\n                 break;\n \n             case UserDerivedSchema:\n                 result = UDerSchema.class;\n                 break;\n+\n             case RoleDerivedSchema:\n                 result = RDerSchema.class;\n                 break;\n+\n             case MembershipDerivedSchema:\n                 result = MDerSchema.class;\n                 break;\n \n             case UserVirtualSchema:\n                 result = UVirSchema.class;\n                 break;\n+\n             case RoleVirtualSchema:\n                 result = RVirSchema.class;\n                 break;\n+\n             case MembershipVirtualSchema:\n                 result = MVirSchema.class;\n                 break;\n@@ -345,50 +335,4 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n \n         return result;\n     }\n-\n-    /**\n-     * Get first occurance of accountId mapping from a collection of mappings.\n-     *\n-     * @param mappings collection of SchemaMapping\n-     * @return AccountId mapping or null if no occurences found\n-     */\n-    public static SchemaMapping getAccountIdMapping(final Collection<SchemaMapping> mappings) {\n-        for (SchemaMapping mapping : mappings) {\n-            if (mapping.isAccountid()) {\n-                return mapping;\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    /**\n-     * Get accountId internal value.\n-     *\n-     * @param attributable attributable\n-     * @param mappings collection of SchemaMapping\n-     * @return accountId internal value\n-     */\n-    public static String getAccountIdValue(final AbstractAttributable attributable,\n-            final Collection<SchemaMapping> mappings) {\n-\n-        final List<String> values = getIntValueAsStrings(attributable, getAccountIdMapping(mappings));\n-        return values == null || values.isEmpty()\n-                ? null\n-                : values.get(0);\n-    }\n-\n-    /**\n-     * Get accountId internal value.\n-     *\n-     * @param attributable attributable\n-     * @param mapping accountId mapping\n-     * @return accountId internal value\n-     */\n-    public static String getAccountIdValue(final AbstractAttributable attributable, final SchemaMapping mapping) {\n-        final List<String> values = getIntValueAsStrings(attributable, mapping);\n-        return values == null || values.isEmpty()\n-                ? null\n-                : values.get(0);\n-    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/util/SchemaMappingUtil.java"},{"sha":"f83093b15aa15637556e87ab314543780625f53e","filename":"core/src/main/java/org/apache/syncope/core/util/SchemaMappingWrapper.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b3e3b88e7ca849ea5c5823af19ee363803cff4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java?ref=2b3e3b88e7ca849ea5c5823af19ee363803cff4c","patch":"@@ -1,187 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.util;\n-\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n-\n-/**\n- *\n- * @author ilgrosso\n- */\n-public class SchemaMappingWrapper {\n-\n-    private SchemaMapping accountIdMapping = null;\n-\n-    private SchemaMapping passwordMapping = null;\n-\n-    private final Map<String, Set<SchemaMapping>> uMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> uVirMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> uDerMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> rMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> rVirMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> rDerMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> mMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> mVirMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    private final Map<String, Set<SchemaMapping>> mDerMappings = new HashMap<String, Set<SchemaMapping>>();\n-\n-    public SchemaMappingWrapper(final Set<SchemaMapping> mappings) {\n-        if (mappings == null) {\n-            return;\n-        }\n-        for (SchemaMapping mapping : mappings) {\n-            if (mapping.isAccountid() && accountIdMapping == null) {\n-                accountIdMapping = mapping;\n-            } else if (mapping.isPassword() && passwordMapping == null) {\n-                passwordMapping = mapping;\n-            } else {\n-                final String intAttrName = SchemaMappingUtil.getIntAttrName(mapping);\n-                switch (mapping.getIntMappingType()) {\n-                    case Password:\n-                        if (passwordMapping == null) {\n-                            passwordMapping = mapping;\n-                        }\n-                        break;\n-\n-                    case Username:\n-                    case SyncopeUserId:\n-                    case UserSchema:\n-                        if (uMappings.get(intAttrName) == null) {\n-                            uMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        uMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case RoleSchema:\n-                        if (rMappings.get(intAttrName) == null) {\n-                            rMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        rMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case MembershipSchema:\n-                        if (mMappings.get(intAttrName) == null) {\n-                            mMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        mMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case UserDerivedSchema:\n-                        if (uDerMappings.get(intAttrName) == null) {\n-                            uDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        uDerMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case RoleDerivedSchema:\n-                        if (rDerMappings.get(intAttrName) == null) {\n-                            rDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        rDerMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case MembershipDerivedSchema:\n-                        if (mDerMappings.get(intAttrName) == null) {\n-                            mDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        mDerMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case UserVirtualSchema:\n-                        if (uVirMappings.get(intAttrName) == null) {\n-                            uVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        uVirMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case RoleVirtualSchema:\n-                        if (rVirMappings.get(intAttrName) == null) {\n-                            rVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        rVirMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    case MembershipVirtualSchema:\n-                        if (mVirMappings.get(intAttrName) == null) {\n-                            mVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                        }\n-                        mVirMappings.get(intAttrName).add(mapping);\n-                        break;\n-\n-                    default:\n-                }\n-            }\n-        }\n-    }\n-\n-    public SchemaMapping getAccountIdMapping() {\n-        return accountIdMapping;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getmDerMappings() {\n-        return mDerMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getmMappings() {\n-        return mMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getmVirMappings() {\n-        return mVirMappings;\n-    }\n-\n-    public SchemaMapping getPasswordMapping() {\n-        return passwordMapping;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getrDerMappings() {\n-        return rDerMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getrMappings() {\n-        return rMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getrVirMappings() {\n-        return rVirMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getuDerMappings() {\n-        return uDerMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getuMappings() {\n-        return uMappings;\n-    }\n-\n-    public Map<String, Set<SchemaMapping>> getuVirMappings() {\n-        return uVirMappings;\n-    }\n-}"},{"sha":"b5d69c5e608ea516b69ec2818b40a6309d7c2f9c","filename":"core/src/main/resources/META-INF/orm.xml","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -55,11 +55,35 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.beans.SchemaMapping\">\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMapping\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_SchemaMapping\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_SchemaMapping\" pk-column-value=\"SEQ_SchemaMapping\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_UMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMapping\" pk-column-value=\"SEQ_UMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMapping\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMapping\" pk-column-value=\"SEQ_RMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMappingItem\" pk-column-value=\"SEQ_UMappingItem\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMappingItem\" pk-column-value=\"SEQ_RMappingItem\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"9c490c86ce07e6a75be3acfc7f55009cf563cf59","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -55,11 +55,35 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.beans.SchemaMapping\">\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMapping\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_SchemaMapping\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_SchemaMapping\" pk-column-value=\"SEQ_SchemaMapping\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_UMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMapping\" pk-column-value=\"SEQ_UMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMapping\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMapping\" pk-column-value=\"SEQ_RMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMappingItem\" pk-column-value=\"SEQ_UMappingItem\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMappingItem\" pk-column-value=\"SEQ_RMappingItem\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"22eee9196e7ee8c30760c50d8abbc596827c04ee","filename":"core/src/main/resources/META-INF/orm.xml.sqlserver","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -55,11 +55,35 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.beans.SchemaMapping\">\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMapping\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_SchemaMapping\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_SchemaMapping\" pk-column-value=\"SEQ_SchemaMapping\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_UMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMapping\" pk-column-value=\"SEQ_UMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMapping\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMapping\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMapping\" pk-column-value=\"SEQ_RMapping\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.user.UMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMappingItem\" pk-column-value=\"SEQ_UMappingItem\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.beans.role.RMappingItem\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_RMappingItem\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_RMappingItem\" pk-column-value=\"SEQ_RMappingItem\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"3a1e26d3f1bad2807c256b064fee4a989e8f71d7","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -44,24 +44,25 @@ under the License.\n   <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n \n   <!-- Use JNDI datasource as default but, when not available, revert to\n-  local datasource, with different properties for execution and testing. \n-  In any case, get all JDBC connections with a determined isolation level. -->\n-  <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter\">\n+       local datasource, with different properties for execution and testing. \n+       In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n+    <property name=\"defaultObject\" ref=\"localDataSource\"/>\n+  </bean>\n+  \n+  <bean id=\"localDataSource\" class=\"org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter\">\n     <property name=\"targetDataSource\">\n-      <bean class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n-        <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n-        <property name=\"defaultObject\" ref=\"localDataSource\"/>\n+      <bean class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+\t<property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n+\t<property name=\"url\" value=\"${jpa.url}\"/>\n+\t<property name=\"username\" value=\"${jpa.username}\"/>\n+\t<property name=\"password\" value=\"${jpa.password}\"/>\n       </bean>\n     </property>\n     <property name=\"isolationLevelName\" value=\"ISOLATION_READ_COMMITTED\"/>\n   </bean>\n-  <bean id=\"localDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n-    <property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n-    <property name=\"url\" value=\"${jpa.url}\"/>\n-    <property name=\"username\" value=\"${jpa.username}\"/>\n-    <property name=\"password\" value=\"${jpa.password}\"/>\n-  </bean>\n-\n+  \n   <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n     <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n   </bean>"},{"sha":"dd8e4deb910adbf2bd79a0db9d83a4557fd8022d","filename":"core/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -37,7 +37,8 @@ under the License.\n     <property name=\"jpaPropertyMap\">\n       <map>\n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n-        <entry key=\"openjpa.ConnectionFactoryProperties\" value=\"PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n+        <entry key=\"openjpa.ConnectionFactoryProperties\" \n+               value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n                 \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>"},{"sha":"57e9937dc5724fd96f261fa5011545a870ee303e","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.SchemaDAO;\n-import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;"},{"sha":"a88d67cc1e97ba246faa18729e6dd3675fc59939","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import static org.junit.Assert.*;\n \n import java.util.List;"},{"sha":"0afa219735a85d47ab43f1e9b9e81062240a9de7","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":73,"deletions":83,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -22,13 +22,13 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.IntMappingType;\n import org.connid.bundles.soap.WebServiceConnector;\n@@ -45,30 +45,30 @@ public class ResourceTest extends AbstractTest {\n     @Test\n     public void findById() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n-\n         assertNotNull(\"findById did not work\", resource);\n \n         ConnInstance connector = resource.getConnector();\n-\n         assertNotNull(\"connector not found\", connector);\n-\n         assertEquals(\"invalid connector name\", WebServiceConnector.class.getName(), connector.getConnectorName());\n-\n         assertEquals(\"invalid bundle name\", \"org.connid.bundles.soap\", connector.getBundleName());\n-\n         assertEquals(\"invalid bundle version\", connidSoapVersion, connector.getVersion());\n \n-        Set<SchemaMapping> mappings = resource.getMappings();\n-        assertNotNull(\"mappings not found\", mappings);\n-        assertFalse(\"no mapping specified\", mappings.isEmpty());\n+        assertFalse(\"no mapping specified\", resource.getUmapping().getItems().isEmpty());\n \n         List<Long> mappingIds = new ArrayList<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n+        for (AbstractMappingItem item : resource.getUmapping().getItems()) {\n+            mappingIds.add(item.getId());\n         }\n         assertTrue(mappingIds.contains(100L));\n     }\n \n+    @Test\n+    public void findAll() {\n+        List<ExternalResource> resources = resourceDAO.findAll();\n+        assertNotNull(resources);\n+        assertEquals(16, resources.size());\n+    }\n+\n     @Test\n     public void findAllByPriority() {\n         List<ExternalResource> resources = resourceDAO.findAllByPriority();\n@@ -78,8 +78,9 @@ public void findAllByPriority() {\n \n     @Test\n     public void getAccountId() {\n-        SchemaMapping mapping = resourceDAO.getMappingForAccountId(\"ws-target-resource-2\");\n-        assertEquals(\"fullname\", SchemaMappingUtil.getIntAttrName(mapping));\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(resource);\n+        assertEquals(\"fullname\", resource.getUmapping().getAccountIdItem().getIntAttrName());\n     }\n \n     @Test\n@@ -89,154 +90,143 @@ public void save() {\n         resource.setPropagationPriority(2);\n         resource.setPropagationPrimary(true);\n \n-        SchemaMapping accountId = new SchemaMapping();\n-        accountId.setResource(resource);\n-        accountId.setAccountid(true);\n+        UMapping mapping = new UMapping();\n+        resource.setUmapping(mapping);\n+\n+        UMappingItem accountId = new UMappingItem();\n         accountId.setExtAttrName(\"username\");\n         accountId.setIntAttrName(\"fullname\");\n         accountId.setIntMappingType(IntMappingType.SyncopeUserId);\n-\n-        resource.addMapping(accountId);\n+        mapping.setAccountIdItem(accountId);\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-\n         resource.setConnector(connector);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getConnector());\n+        assertNotNull(actual.getUmapping());\n+        assertFalse(actual.getUmapping().getItems().isEmpty());\n         assertEquals(Integer.valueOf(2), actual.getPropagationPriority());\n         assertTrue(actual.isPropagationPrimary());\n     }\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidMappingIntAttr() {\n-\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-\n         resource.setConnector(connector);\n \n-        SchemaMapping accountId = new SchemaMapping();\n-        accountId.setResource(resource);\n+        UMapping mapping = new UMapping();\n+        resource.setUmapping(mapping);\n+\n+        UMappingItem accountId = new UMappingItem();\n         accountId.setAccountid(true);\n         accountId.setIntMappingType(IntMappingType.UserSchema);\n-\n-        resource.addMapping(accountId);\n+        mapping.addItem(accountId);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n-\n         assertNotNull(actual);\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n+    @Test(expected = IllegalArgumentException.class)\n     public void saveInvalidAccountIdMapping() {\n-\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-\n         resource.setConnector(connector);\n \n-        SchemaMapping accountId = new SchemaMapping();\n-        accountId.setResource(resource);\n+        UMapping mapping = new UMapping();\n+        resource.setUmapping(mapping);\n+\n+        UMappingItem accountId = new UMappingItem();\n         accountId.setAccountid(true);\n         accountId.setIntMappingType(IntMappingType.UserVirtualSchema);\n-\n-        resource.addMapping(accountId);\n+        mapping.setAccountIdItem(accountId);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n-\n         assertNotNull(actual);\n     }\n \n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidMappingExtAttr() {\n-\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-\n         resource.setConnector(connector);\n \n-        SchemaMapping mapping = new SchemaMapping();\n-        mapping.setResource(resource);\n-        mapping.setAccountid(true);\n-        mapping.setIntAttrName(\"fullname\");\n-        mapping.setIntMappingType(IntMappingType.UserSchema);\n-\n-        resource.addMapping(mapping);\n+        UMapping mapping = new UMapping();\n+        resource.setUmapping(mapping);\n \n-        mapping = new SchemaMapping();\n-        mapping.setResource(resource);\n-        mapping.setIntAttrName(\"userId\");\n-        mapping.setIntMappingType(IntMappingType.UserSchema);\n+        UMappingItem item = new UMappingItem();\n+        item.setAccountid(true);\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n \n-        resource.addMapping(mapping);\n+        item = new UMappingItem();\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n \n-        resourceDAO.save(resource);\n+        ExternalResource actual = resourceDAO.save(resource);\n+        assertNotNull(actual);\n     }\n \n     @Test\n     public void saveWithRoleMappingType() {\n-\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n \n         ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n-\n         resource.setConnector(connector);\n \n-        SchemaMapping mapping = new SchemaMapping();\n-        mapping.setResource(resource);\n-        mapping.setAccountid(true);\n-        mapping.setIntAttrName(\"fullname\");\n-        mapping.setIntMappingType(IntMappingType.UserSchema);\n-\n-        resource.addMapping(mapping);\n+        UMapping mapping = new UMapping();\n+        resource.setUmapping(mapping);\n \n-        mapping = new SchemaMapping();\n-        mapping.setResource(resource);\n-        mapping.setIntAttrName(\"icon\");\n-        mapping.setExtAttrName(\"icon\");\n-        mapping.setIntMappingType(IntMappingType.RoleSchema);\n+        UMappingItem item = new UMappingItem();\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.setAccountIdItem(item);\n \n-        resource.addMapping(mapping);\n+        item = new UMappingItem();\n+        item.setIntAttrName(\"icon\");\n+        item.setExtAttrName(\"icon\");\n+        item.setIntMappingType(IntMappingType.RoleSchema);\n+        mapping.addItem(item);\n \n-        mapping = new SchemaMapping();\n-        mapping.setResource(resource);\n-        mapping.setIntAttrName(\"mderiveddata\");\n-        mapping.setExtAttrName(\"mderiveddata\");\n-        mapping.setIntMappingType(IntMappingType.MembershipDerivedSchema);\n-\n-        resource.addMapping(mapping);\n+        item = new UMappingItem();\n+        item.setIntAttrName(\"mderiveddata\");\n+        item.setExtAttrName(\"mderiveddata\");\n+        item.setIntMappingType(IntMappingType.MembershipDerivedSchema);\n+        mapping.addItem(item);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n-\n         assertNotNull(actual);\n \n-        assertEquals(3, actual.getMappings().size());\n+        int items = 0;\n+        for (AbstractMappingItem mapItem : actual.getUmapping().getItems()) {\n+            items++;\n \n-        for (SchemaMapping schemaMapping : actual.getMappings()) {\n-\n-            if (\"icon\".equals(SchemaMappingUtil.getIntAttrName(schemaMapping))) {\n-                assertTrue(IntMappingType.contains(AttributableType.ROLE, schemaMapping.getIntMappingType().toString()));\n+            if (\"icon\".equals(mapItem.getIntAttrName())) {\n+                assertTrue(IntMappingType.contains(AttributableType.ROLE,\n+                        mapItem.getIntMappingType().toString()));\n             }\n-\n-            if (\"mderiveddata\".equals(SchemaMappingUtil.getIntAttrName(schemaMapping))) {\n-                assertTrue(IntMappingType.contains(AttributableType.MEMBERSHIP, schemaMapping.getIntMappingType()\n-                        .toString()));\n+            if (\"mderiveddata\".equals(mapItem.getIntAttrName())) {\n+                assertTrue(IntMappingType.contains(AttributableType.MEMBERSHIP,\n+                        mapItem.getIntMappingType().toString()));\n             }\n         }\n+        assertEquals(3, items);\n     }\n \n     @Test"},{"sha":"47a22c7b55291b0a6dcff002a99df67fe8988ecf","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":103,"deletions":63,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,20 +18,22 @@\n  */\n package org.apache.syncope.core.persistence.relationships;\n \n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n import static org.junit.Assert.*;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -42,11 +44,14 @@\n import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n+import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.IntMappingType;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n public class ResourceTest extends AbstractTest {\n@@ -72,6 +77,37 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Test\n+    public void databinding() throws IOException {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(resource);\n+\n+        ResourceTO resourceTO = resourceDataBinder.getResourceTO(resource);\n+        assertNotNull(resourceTO);\n+\n+        ExternalResource fromto = resourceDataBinder.update(resource, resourceTO);\n+        assertNotNull(fromto);\n+        assertEquals(resource, fromto);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, resourceTO);\n+\n+        assertEquals(resourceTO, mapper.readValue(writer.toString(), ResourceTO.class));\n+\n+        List<ResourceTO> resourceTOs = resourceDataBinder.getResourceTOs(resourceDAO.findAll());\n+        assertNotNull(resourceTOs);\n+        assertFalse(resourceTOs.isEmpty());\n+\n+        writer = new StringWriter();\n+        mapper.writeValue(writer, resourceTOs);\n+\n+        ResourceTO[] actual = mapper.readValue(writer.toString(), ResourceTO[].class);\n+        assertEquals(resourceTOs, Arrays.asList(actual));\n+    }\n+\n+    @Test\n     public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n \n@@ -80,6 +116,10 @@ public void createWithPasswordPolicy() {\n         resource.setName(resourceName);\n         resource.setPasswordPolicy(policy);\n \n+        ConnInstance connector = connInstanceDAO.find(100L);\n+        assertNotNull(\"connector not found\", connector);\n+        resource.setConnector(connector);\n+\n         ExternalResource actual = resourceDAO.save(resource);\n         assertNotNull(actual);\n \n@@ -100,33 +140,39 @@ public void createWithPasswordPolicy() {\n     public void issue42() {\n         USchema userId = schemaDAO.find(\"userId\", USchema.class);\n \n-        Set<SchemaMapping> beforeUserIdMappings = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (userId.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n-                beforeUserIdMappings.add(mapping);\n+        Set<AbstractMappingItem> beforeUserIdMappings = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource res : resourceDAO.findAll()) {\n+            if (res.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n+                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n+                        beforeUserIdMappings.add(mapItem);\n+                    }\n+                }\n             }\n         }\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntAttrName(\"userId\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setExtAttrName(\"campo1\");\n-        schemaMappingTO.setAccountid(true);\n-        schemaMappingTO.setPassword(false);\n-        schemaMappingTO.setMandatoryCondition(\"false\");\n-\n-        List<SchemaMappingTO> schemaMappingTOs = new ArrayList<SchemaMappingTO>();\n-        schemaMappingTOs.add(schemaMappingTO);\n-\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(\"resource-issue42\");\n         resourceTO.setConnectorId(100L);\n-        resourceTO.setMappings(schemaMappingTOs);\n         resourceTO.setPropagationMode(PropagationMode.ONE_PHASE);\n         resourceTO.setEnforceMandatoryCondition(true);\n \n+        MappingTO mapping = new MappingTO();\n+        resourceTO.setUmapping(mapping);\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setExtAttrName(\"campo1\");\n+        item.setAccountid(true);\n+        item.setMandatoryCondition(\"false\");\n+        mapping.setAccountIdItem(item);\n+\n         ExternalResource resource = resourceDataBinder.create(resourceTO);\n         resource = resourceDAO.save(resource);\n+        assertNotNull(resource);\n+        assertNotNull(resource.getUmapping());\n+        assertEquals(1, resource.getUmapping().getItems().size());\n \n         resourceDAO.flush();\n \n@@ -136,10 +182,14 @@ public void issue42() {\n \n         userId = schemaDAO.find(\"userId\", USchema.class);\n \n-        Set<SchemaMapping> afterUserIdMappings = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (userId.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n-                afterUserIdMappings.add(mapping);\n+        Set<AbstractMappingItem> afterUserIdMappings = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource res : resourceDAO.findAll()) {\n+            if (res.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : res.getUmapping().getItems()) {\n+                    if (userId.getName().equals(mapItem.getIntAttrName())) {\n+                        afterUserIdMappings.add(mapItem);\n+                    }\n+                }\n             }\n         }\n \n@@ -157,39 +207,40 @@ public void save() {\n \n         resource.setConnector(connector);\n \n+        UMapping mapping = new UMapping();\n+        mapping.setResource(resource);\n+        resource.setUmapping(mapping);\n+\n         // specify mappings\n         for (int i = 0; i < 3; i++) {\n-            SchemaMapping mapping = new SchemaMapping();\n-            mapping.setExtAttrName(\"test\" + i);\n-            mapping.setIntAttrName(\"nonexistent\" + i);\n-            mapping.setIntMappingType(IntMappingType.UserSchema);\n-            mapping.setMandatoryCondition(\"false\");\n-\n-            mapping.setResource(resource);\n-            resource.addMapping(mapping);\n+            UMappingItem item = new UMappingItem();\n+            item.setExtAttrName(\"test\" + i);\n+            item.setIntAttrName(\"nonexistent\" + i);\n+            item.setIntMappingType(IntMappingType.UserSchema);\n+            item.setMandatoryCondition(\"false\");\n+            mapping.addItem(item);\n+            item.setMapping(mapping);\n         }\n-        SchemaMapping accountId = new SchemaMapping();\n-        accountId.setAccountid(true);\n+        UMappingItem accountId = new UMappingItem();\n         accountId.setExtAttrName(\"username\");\n         accountId.setIntAttrName(\"username\");\n         accountId.setIntMappingType(IntMappingType.SyncopeUserId);\n-\n-        accountId.setResource(resource);\n-        resource.addMapping(accountId);\n+        mapping.setAccountIdItem(accountId);\n+        accountId.setMapping(mapping);\n \n         // map a derived attribute\n-        SchemaMapping derived = new SchemaMapping();\n+        UMappingItem derived = new UMappingItem();\n         derived.setAccountid(false);\n         derived.setExtAttrName(\"fullname\");\n         derived.setIntAttrName(\"cn\");\n         derived.setIntMappingType(IntMappingType.UserDerivedSchema);\n-\n-        derived.setResource(resource);\n-        resource.addMapping(derived);\n+        mapping.addItem(derived);\n+        derived.setMapping(mapping);\n \n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n         assertNotNull(actual);\n+        assertNotNull(actual.getUmapping());\n \n         resourceDAO.flush();\n         resourceDAO.detach(actual);\n@@ -218,9 +269,9 @@ public void save() {\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        Set<SchemaMapping> schemaMappings = resource.getMappings();\n-        assertNotNull(schemaMappings);\n-        assertEquals(5, schemaMappings.size());\n+        List<UMappingItem> items = resource.getUmapping().getItems();\n+        assertNotNull(items);\n+        assertEquals(5, items.size());\n \n         // check user\n         user = userDAO.find(1L);\n@@ -295,30 +346,19 @@ public void delete() {\n     public void issue243() {\n         ExternalResource csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n-        int origMappings = csv.getMappings().size();\n \n-        SchemaMapping newMapping = new SchemaMapping();\n-        newMapping.setIntMappingType(IntMappingType.Username);\n-        newMapping.setExtAttrName(\"TEST\");\n-        newMapping.setResource(csv);\n-        csv.addMapping(newMapping);\n+        int origMapItems = csv.getUmapping().getItems().size();\n+\n+        UMappingItem newMapItem = new UMappingItem();\n+        newMapItem.setIntMappingType(IntMappingType.Username);\n+        newMapItem.setExtAttrName(\"TEST\");\n+        csv.getUmapping().addItem(newMapItem);\n \n         resourceDAO.save(csv);\n         resourceDAO.flush();\n \n         csv = resourceDAO.find(\"resource-csv\");\n         assertNotNull(csv);\n-        assertEquals(origMappings + 1, csv.getMappings().size());\n-\n-        resourceDAO.clear();\n-\n-        int currentMappings = 0;\n-        List<SchemaMapping> allMappings = resourceDAO.findAllMappings();\n-        for (SchemaMapping mapping : allMappings) {\n-            if (\"resource-csv\".equals(mapping.getResource().getName())) {\n-                currentMappings++;\n-            }\n-        }\n-        assertEquals(csv.getMappings().size(), currentMappings);\n+        assertEquals(origMapItems + 1, csv.getUmapping().getItems().size());\n     }\n }"},{"sha":"d18dad927df6fe7a62e7824d9c8996b864852c37","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":46,"deletions":32,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,26 +18,24 @@\n  */\n package org.apache.syncope.core.persistence.relationships;\n \n-import java.util.HashSet;\n-import java.util.Set;\n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n-import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.util.AttributableUtil;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.IntMappingType;\n+import org.junit.Test;\n \n @Transactional\n public class SchemaTest extends AbstractTest {\n@@ -48,30 +46,30 @@ public class SchemaTest extends AbstractTest {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n     @Autowired\n     private AttrDAO attrDAO;\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Test\n-    public void test1() {\n+    public void deleteFullname() {\n         // search for user schema fullname\n         USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n-\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (schema.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n-                mappings.add(mapping);\n+        Set<AbstractMappingItem> mapItems = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (schema.getName().equals(mapItem.getIntAttrName())) {\n+                        mapItems.add(mapItem);\n+                    }\n+                }\n             }\n         }\n-        assertFalse(mappings.isEmpty());\n+        assertFalse(mapItems.isEmpty());\n \n         // delete user schema fullname\n         schemaDAO.delete(\"fullname\", AttributableUtil.getInstance(AttributableType.USER));\n@@ -80,17 +78,22 @@ public void test1() {\n \n         // check for schema deletion\n         schema = schemaDAO.find(\"fullname\", USchema.class);\n-\n         assertNull(schema);\n \n+        schemaDAO.clear();\n+\n         // check for mappings deletion\n-        mappings = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (\"fullname\".equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n-                mappings.add(mapping);\n+        mapItems = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (\"fullname\".equals(mapItem.getIntAttrName())) {\n+                        mapItems.add(mapItem);\n+                    }\n+                }\n             }\n         }\n-        assertTrue(mappings.isEmpty());\n+        assertTrue(mapItems.isEmpty());\n \n         assertNull(attrDAO.find(100L, UAttr.class));\n         assertNull(attrDAO.find(300L, UAttr.class));\n@@ -99,18 +102,20 @@ public void test1() {\n     }\n \n     @Test\n-    public void test2() {\n-\n+    public void deleteSurname() {\n         // search for user schema fullname\n         USchema schema = schemaDAO.find(\"surname\", USchema.class);\n-\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n-        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (schema.getName().equals(SchemaMappingUtil.getIntAttrName(mapping, IntMappingType.UserSchema))) {\n-                mappings.add(mapping);\n+        Set<AbstractMappingItem> mappings = new HashSet<AbstractMappingItem>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (AbstractMappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (schema.getName().equals(mapItem.getIntAttrName())) {\n+                        mappings.add(mapItem);\n+                    }\n+                }\n             }\n         }\n         assertFalse(mappings.isEmpty());\n@@ -122,9 +127,18 @@ public void test2() {\n \n         // check for schema deletion\n         schema = schemaDAO.find(\"surname\", USchema.class);\n-\n         assertNull(schema);\n+    }\n+\n+    @Test\n+    public void deleteALong() {\n+        assertEquals(6, resourceDAO.find(\"resource-db-sync\").getUmapping().getItems().size());\n+\n+        schemaDAO.delete(\"aLong\", AttributableUtil.getInstance(AttributableType.USER));\n+        assertNull(schemaDAO.find(\"aLong\", USchema.class));\n+\n+        schemaDAO.flush();\n \n-        assertNull(schemaDAO.find(\"surname\", USchema.class));\n+        assertEquals(5, resourceDAO.find(\"resource-db-sync\").getUmapping().getItems().size());\n     }\n }"},{"sha":"62edce33f6087d2e7b35e270277e50a84f6c61a1","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/UserSearchTest.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserSearchTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -42,9 +42,6 @@\n @Transactional\n public class UserSearchTest {\n \n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -56,13 +53,10 @@ public class UserSearchTest {\n \n     @Test\n     public void issueSYNCOPE95() {\n-\n         Set<SyncopeRole> roles = new HashSet<SyncopeRole>(roleDAO.findAll());\n-\n         for (SyncopeRole role : roles) {\n             roleDAO.delete(role.getId());\n         }\n-\n         roleDAO.flush();\n \n         final AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);"},{"sha":"007e6a75e7caa24e73b21f241ebcc5fd4117503e","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.relationships;\n \n-import java.util.List;\n import static org.junit.Assert.*;\n-import org.junit.Test;\n \n+import java.util.List;\n+import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.beans.user.UAttr;"},{"sha":"9abb59128ca4c23cb95e59ec3f02566289daff71","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -38,8 +38,9 @@\n import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -523,7 +524,8 @@ public void getSchemaNames() {\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n \n-        schemaNames = Arrays.asList(restTemplate.postForObject(BASE_URL + \"connector/schema/list\", conn, String[].class));\n+        schemaNames = Arrays.\n+                asList(restTemplate.postForObject(BASE_URL + \"connector/schema/list\", conn, String[].class));\n         assertNotNull(schemaNames);\n         assertEquals(0, schemaNames.size());\n \n@@ -607,12 +609,15 @@ public void issueSYNCOPE112() {\n \n         resourceTO.setConnectorConfigurationProperties(conf);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"uid\");\n-        schemaMappingTO.setIntAttrName(\"userId\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n+        resourceTO.setUmapping(mapping);\n+\n+        MappingItemTO mapItem = new MappingItemTO();\n+        mapItem.setExtAttrName(\"uid\");\n+        mapItem.setIntAttrName(\"userId\");\n+        mapItem.setIntMappingType(IntMappingType.UserSchema);\n+        mapItem.setAccountid(true);\n+        mapping.setAccountIdItem(mapItem);\n         // ----------------------------------------\n \n         // ----------------------------------------"},{"sha":"dfa69984ed428ada979a145b8fa526606762eb2f","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":116,"deletions":124,"changes":240,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -20,8 +20,8 @@\n \n import static org.junit.Assert.*;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -30,7 +30,8 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaMappingTO;\n+import org.apache.syncope.client.to.MappingItemTO;\n+import org.apache.syncope.client.to.MappingTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.types.ConnConfPropSchema;\n@@ -48,17 +49,6 @@ public void getPropagationActionsClasses() {\n         assertFalse(actions.isEmpty());\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n-    public void createExistingResource() {\n-        final String resourceName = \"ws-target-resource-1\";\n-        ResourceTO resourceTO = new ResourceTO();\n-\n-        resourceTO.setName(resourceName);\n-        resourceTO.setConnectorId(100L);\n-\n-        restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n-    }\n-\n     @Test\n     public void create() {\n         String resourceName = \"ws-target-resource-create\";\n@@ -67,35 +57,36 @@ public void create() {\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"uid\");\n-        schemaMappingTO.setIntAttrName(\"userId\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        resourceTO.addMapping(schemaMappingTO);\n-\n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"fullname\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n-\n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"fullname\");\n-        schemaMappingTO.setIntAttrName(\"cn\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setAccountid(false);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"uid\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n \n-        assertNotNull(actual);\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n \n-        // check the existence\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setAccountid(false);\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n \n+        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        assertNotNull(actual);\n+\n+        // check for existence\n         actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n                 resourceName);\n-\n         assertNotNull(actual);\n     }\n \n@@ -104,29 +95,33 @@ public void createOverridingProps() {\n         String resourceName = \"overriding-conn-conf-target-resource-create\";\n         ResourceTO resourceTO = new ResourceTO();\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"uid\");\n-        schemaMappingTO.setIntAttrName(\"userId\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        resourceTO.addMapping(schemaMappingTO);\n-\n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"fullname\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n-\n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"fullname\");\n-        schemaMappingTO.setIntAttrName(\"cn\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setAccountid(false);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"uid\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setAccountid(false);\n+        mapping.addItem(item);\n \n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n+        resourceTO.setUmapping(mapping);\n+\n         ConnConfProperty p = new ConnConfProperty();\n         ConnConfPropSchema schema = new ConnConfPropSchema();\n         schema.setType(\"java.lang.String\");\n@@ -136,64 +131,63 @@ public void createOverridingProps() {\n         p.setValues(Collections.singletonList(\"http://invalidurl/\"));\n \n         Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<ConnConfProperty>(Arrays.asList(p));\n-\n         resourceTO.setConnectorConfigurationProperties(connectorConfigurationProperties);\n \n         ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n-\n         assertNotNull(actual);\n \n         // check the existence\n \n         actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n                 resourceName);\n-\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void createWithSingleMapping() {\n         String resourceName = \"ws-target-resource-create-single\";\n         ResourceTO resourceTO = new ResourceTO();\n-\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n \n+        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n         assertNotNull(actual);\n     }\n \n     @Test\n-    public void createWithWrongMapping() {\n+    public void createWithInvalidMapping() {\n         String resourceName = \"ws-target-resource-create-wrong\";\n         ResourceTO resourceTO = new ResourceTO();\n-\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n \n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setExtAttrName(\"email\");\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setExtAttrName(\"email\");\n         // missing intAttrName ...\n-        resourceTO.addMapping(schemaMappingTO);\n+        mapping.addItem(item);\n \n-        Throwable t = null;\n+        resourceTO.setUmapping(mapping);\n \n+        Throwable t = null;\n         try {\n-\n             restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n-\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n \n@@ -211,20 +205,23 @@ public void createWithWrongMapping() {\n     public void createWithoutExtAttr() {\n         String resourceName = \"ws-target-resource-create-wrong\";\n         ResourceTO resourceTO = new ResourceTO();\n-\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n \n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setIntAttrName(\"usernane\");\n+        item = new MappingItemTO();\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setIntAttrName(\"usernane\");\n         // missing extAttrName ...\n-        resourceTO.addMapping(schemaMappingTO);\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n \n         restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n     }\n@@ -233,27 +230,28 @@ public void createWithoutExtAttr() {\n     public void createWithPasswordPolicy() {\n         String resourceName = \"res-with-password-policy\";\n         ResourceTO resourceTO = new ResourceTO();\n-\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n         resourceTO.setPasswordPolicy(4L);\n \n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"uid\");\n-        schemaMappingTO.setIntAttrName(\"userId\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTO.setAccountid(true);\n-        resourceTO.addMapping(schemaMappingTO);\n+        MappingTO mapping = new MappingTO();\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"uid\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n \n+        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check the existence\n \n         actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n                 resourceName);\n-\n         assertNotNull(actual);\n         assertNotNull(actual.getPasswordPolicy());\n         assertEquals(4L, (long) actual.getPasswordPolicy());\n@@ -263,7 +261,6 @@ public void createWithPasswordPolicy() {\n     public void updateWithException() {\n         try {\n             ResourceTO resourceTO = new ResourceTO();\n-\n             resourceTO.setName(\"resourcenotfound\");\n \n             restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\n@@ -276,48 +273,43 @@ public void updateWithException() {\n     public void update() {\n         final String resourceName = \"ws-target-resource-update\";\n         ResourceTO resourceTO = new ResourceTO();\n-\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(101L);\n \n-        List<SchemaMappingTO> schemaMappingTOs = new ArrayList<SchemaMappingTO>();\n+        MappingTO mapping = new MappingTO();\n \n         // Update with an existing and already assigned mapping\n-        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setId(112L);\n-        schemaMappingTO.setExtAttrName(\"test3\");\n-        schemaMappingTO.setIntAttrName(\"fullname\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-        schemaMappingTOs.add(schemaMappingTO);\n+        MappingItemTO item = new MappingItemTO();\n+        item.setId(112L);\n+        item.setExtAttrName(\"test3\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n \n         // Update defining new mappings\n         for (int i = 4; i < 6; i++) {\n-            schemaMappingTO = new SchemaMappingTO();\n-            schemaMappingTO.setExtAttrName(\"test\" + i);\n-            schemaMappingTO.setIntAttrName(\"fullname\");\n-            schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n-            schemaMappingTOs.add(schemaMappingTO);\n+            item = new MappingItemTO();\n+            item.setExtAttrName(\"test\" + i);\n+            item.setIntAttrName(\"fullname\");\n+            item.setIntMappingType(IntMappingType.UserSchema);\n+            mapping.addItem(item);\n         }\n-        schemaMappingTO = new SchemaMappingTO();\n-        schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"fullname\");\n-        schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n-        schemaMappingTO.setAccountid(true);\n-        schemaMappingTOs.add(schemaMappingTO);\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.SyncopeUserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n \n-        resourceTO.setMappings(schemaMappingTOs);\n+        resourceTO.setUmapping(mapping);\n \n         ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\n-\n         assertNotNull(actual);\n \n-        // check the existence\n-\n-        List<SchemaMappingTO> mappings = actual.getMappings();\n-\n-        assertNotNull(mappings);\n-\n-        assertEquals(4, mappings.size());\n+        // check for existence\n+        Collection<MappingItemTO> mapItems = actual.getUmapping().getItems();\n+        assertNotNull(mapItems);\n+        assertEquals(4, mapItems.size());\n     }\n \n     @Test"},{"sha":"bba708efee5c49fc752d2872438514a554745e0e","filename":"core/src/test/resources/content.xml","status":"modified","additions":208,"deletions":220,"changes":428,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -24,9 +24,9 @@ under the License.\n   <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n   <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n   <!-- notificationjob.cronExpression:\n-       + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n-       + provided as empty string: NotificationJob disabled\n-       + provided as non-empty string: NotificationJob runs according to the given value -->\n+  + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n+  + provided as empty string: NotificationJob disabled\n+  + provided as non-empty string: NotificationJob runs according to the given value -->\n   <SyncopeConf confKey=\"notificationjob.cronExpression\" confValue=\"\"/>\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n@@ -336,31 +336,44 @@ under the License.\n   <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"ONE_PHASE_CREATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"TWO_PHASES_UPDATE\"/>\n \n-  <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\"\n+                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"\n+                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\"\n+                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+  <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"resource-testdb\" connector_id=\"101\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+  <ExternalResource name=\"resource-testdb\" connector_id=\"101\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"resource-testdb2\" connector_id=\"106\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+  <ExternalResource name=\"resource-testdb2\" connector_id=\"106\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-  <ExternalResource name=\"resource-csv\" connector_id=\"104\" enforceMandatoryCondition=\"0\" propagationMode=\"ONE_PHASE\" syncPolicy_id=\"3\"\n+  <ExternalResource name=\"resource-csv\" connector_id=\"104\"\n+                    enforceMandatoryCondition=\"0\" propagationMode=\"ONE_PHASE\" syncPolicy_id=\"3\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-update-resetsynctoken\" connector_id=\"100\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" serializedSyncToken=\"%3Corg.identityconnectors.framework.common.objects.SyncToken%2F%3E\"/>\n-  <ExternalResource name=\"resource-ldap\" connector_id=\"105\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n-                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n-                    accountlink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n-  <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" passwordPolicy_id=\"4\"/>\n+                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    serializedSyncToken=\"%3Corg.identityconnectors.framework.common.objects.SyncToken%2F%3E\"/>\n+  <ExternalResource name=\"resource-ldap\" connector_id=\"105\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+                    propagationPriority=\"0\" propagationPrimary=\"1\"\n+                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n+  <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n+                    passwordPolicy_id=\"4\"/>\n   \n   <!-- The following three resources has been added to verify the issue SYNCOPE-68 -->\n   <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n@@ -387,209 +400,184 @@ under the License.\n   <SyncopeRole_ExternalResource role_id=\"12\" resource_name=\"resource-csv\" />\n   <SyncopeRole_ExternalResource role_id=\"13\" resource_name=\"resource-csv\" />\n \n-  <SchemaMapping id=\"99\"\n-                 resource_name=\"ws-target-resource-1\"\n-                 intMappingType=\"SyncopeUserId\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"100\" extAttrName=\"email\"\n-                 resource_name=\"ws-target-resource-1\"\n-                 intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"101\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"102\"\n-                 resource_name=\"ws-target-resource-list-mappings-1\"\n-                 intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"103\" extAttrName=\"surname\"\n-                 resource_name=\"ws-target-resource-list-mappings-1\"\n-                 intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"104\"\n-                 resource_name=\"ws-target-resource-list-mappings-2\"\n-                 intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"105\" extAttrName=\"surname\"\n-                 resource_name=\"ws-target-resource-1\"\n-                 intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"106\"\n-                 resource_name=\"ws-target-resource-1\"\n-                 intMappingType=\"Password\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"1\"/>\n-\n-  <SchemaMapping id=\"107\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intMappingType=\"Password\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"1\"/>\n-\n-  <SchemaMapping id=\"108\" extAttrName=\"type\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intAttrName=\"type\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"109\" extAttrName=\"surname\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"110\" extAttrName=\"email\"\n-                 resource_name=\"ws-target-resource-update\"\n-                 intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"111\" extAttrName=\"userId\"\n-                 resource_name=\"ws-target-resource-update\"\n-                 intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n+  <UMapping id=\"15\" resource_name=\"ws-target-resource-1\"/>\n+  <UMappingItem id=\"99\" mapping_id=\"15\" extAttrName=\"__NAME__\"\n+                intMappingType=\"SyncopeUserId\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"100\" extAttrName=\"email\" mapping_id=\"15\"\n+                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"101\" extAttrName=\"surname\" mapping_id=\"15\"\n+                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"102\" mapping_id=\"15\"\n+                extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"1\"/>\n+\n+  <UMapping id=\"12\" resource_name=\"ws-target-resource-list-mappings-1\"/>\n+  <UMappingItem id=\"103\" mapping_id=\"12\"\n+                extAttrName=\"__NAME__\" intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"104\" extAttrName=\"surname\" mapping_id=\"12\"\n+                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+\n+  <UMapping id=\"13\" resource_name=\"ws-target-resource-list-mappings-2\"/>\n+  <UMappingItem id=\"105\" mapping_id=\"13\"\n+                extAttrName=\"__NAME__\" intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+\n+  <UMapping id=\"1\" resource_name=\"ws-target-resource-2\"/>\n+  <UMappingItem id=\"106\" mapping_id=\"1\" extAttrName=\"__NAME__\"\n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"107\" mapping_id=\"1\"\n+                extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"1\"/>\n+  <UMappingItem id=\"108\" extAttrName=\"type\" mapping_id=\"1\"\n+                intAttrName=\"type\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"109\" extAttrName=\"surname\" mapping_id=\"1\"\n+                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"type == 'F'\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"110\" extAttrName=\"name\" mapping_id=\"1\"\n+                intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"111\" extAttrName=\"fullname\" mapping_id=\"1\"\n+                intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n     \n-  <SchemaMapping id=\"112\" extAttrName=\"test3\"\n-                 resource_name=\"ws-target-resource-update\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"113\" extAttrName=\"name\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"114\" extAttrName=\"fullname\"\n-                 resource_name=\"ws-target-resource-2\"\n-                 intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-\n-  <SchemaMapping id=\"115\"\n-                 resource_name=\"ws-target-resource-nopropagation\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-                 \n-  <SchemaMapping id=\"116\"\n-                 resource_name=\"ws-target-resource-nopropagation2\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-                 \n-  <SchemaMapping id=\"117\"\n-                 resource_name=\"ws-target-resource-nopropagation3\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-                 \n-  <SchemaMapping id=\"118\"\n-                 resource_name=\"ws-target-resource-nopropagation4\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-                   \n-  <SchemaMapping id=\"119\"\n-                 resource_name=\"resource-testdb\"\n-                 intMappingType=\"Username\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-  <SchemaMapping id=\"120\"\n-                 resource_name=\"resource-testdb\"\n-                 intMappingType=\"Password\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"1\"/>\n-                 \n-  <SchemaMapping id=\"121\"\n-                 resource_name=\"resource-testdb2\"\n-                 intMappingType=\"Username\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-  <SchemaMapping id=\"122\"\n-                 resource_name=\"resource-testdb2\"\n-                 intMappingType=\"Password\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"1\"/>\n-                   \n-  <SchemaMapping id=\"200\" extAttrName=\"id\"\n-                 resource_name=\"resource-csv\"\n-                 intMappingType=\"Username\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"201\" extAttrName=\"id\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"202\"\n-                 resource_name=\"resource-csv\"\n-                 intMappingType=\"Password\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"1\"/>\n-  <SchemaMapping id=\"203\" extAttrName=\"name\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"firstname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"204\" extAttrName=\"surname\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"205\" extAttrName=\"email\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"206\" extAttrName=\"email\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"207\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n-                 accountid=\"1\" password=\"0\"/>\n-  <SchemaMapping id=\"208\" extAttrName=\"role\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"rderToBePropagated\" intMappingType=\"RoleDerivedSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-  <SchemaMapping id=\"209\" extAttrName=\"membership\"\n-                 resource_name=\"resource-csv\"\n-                 intAttrName=\"mderToBePropagated\" intMappingType=\"MembershipDerivedSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"0\"/>\n-                   \n-  <SchemaMapping id=\"300\"\n-                 resource_name=\"ws-target-resource-update-resetsynctoken\"\n-                 intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"1\" password=\"0\"/>\n-  <SchemaMapping id=\"301\"\n-                 resource_name=\"ws-target-resource-update-resetsynctoken\"\n-                 intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n-                 accountid=\"0\" password=\"1\"/>\n-                   \n-  <SchemaMapping id=\"311\" accountid=\"1\" password=\"0\"\n-                 intAttrName=\"Username\" intMappingType=\"Username\"\n-                 mandatoryCondition=\"true\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"312\" accountid=\"0\" password=\"1\" \n-                 intAttrName=\"Password\" intMappingType=\"Password\"\n-                 mandatoryCondition=\"true\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"313\" accountid=\"0\" password=\"0\"\n-                 extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserSchema\"\n-                 mandatoryCondition=\"true\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"314\" accountid=\"0\" password=\"0\"\n-                 extAttrName=\"cn\" intAttrName=\"firstname\" intMappingType=\"UserSchema\"\n-                 mandatoryCondition=\"true\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"315\" accountid=\"0\" password=\"0\"\n-                 extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserSchema\"\n-                 mandatoryCondition=\"false\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"316\" accountid=\"0\" password=\"0\"\n-                 extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"RoleSchema\"\n-                 mandatoryCondition=\"false\" resource_name=\"resource-ldap\"/>\n-  <SchemaMapping id=\"317\" accountid=\"0\" password=\"0\"\n-                 extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipSchema\"\n-                 mandatoryCondition=\"false\" resource_name=\"resource-ldap\"/>\n-                   \n-  <SchemaMapping id=\"321\" accountid=\"0\" extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserSchema\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  <SchemaMapping id=\"322\" accountid=\"0\" extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  <SchemaMapping id=\"323\" accountid=\"1\" intAttrName=\"aLong\" intMappingType=\"UserSchema\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  <SchemaMapping id=\"324\" accountid=\"0\" extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserSchema\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  <SchemaMapping id=\"325\" accountid=\"0\" extAttrName=\"USERNAME\" intAttrName=\"Username\" intMappingType=\"Username\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  <SchemaMapping id=\"326\" accountid=\"0\" extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserSchema\" \n-                 mandatoryCondition=\"false\" password=\"0\" resource_name=\"resource-db-sync\"/>\n-  \n+  <UMapping id=\"2\" resource_name=\"ws-target-resource-update\"/>\n+  <UMappingItem id=\"112\" extAttrName=\"email\" mapping_id=\"2\"\n+                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"113\" extAttrName=\"userId\" mapping_id=\"2\"\n+                intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"114\" extAttrName=\"test3\" mapping_id=\"2\" \n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+    \n+  <UMapping id=\"3\" resource_name=\"ws-target-resource-nopropagation\"/>\n+  <UMappingItem id=\"115\" mapping_id=\"3\" extAttrName=\"__NAME__\" \n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+                     \n+  <UMapping id=\"4\" resource_name=\"ws-target-resource-nopropagation2\"/>\n+  <UMappingItem id=\"116\" mapping_id=\"4\" extAttrName=\"__NAME__\" \n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+                     \n+  <UMapping id=\"5\" resource_name=\"ws-target-resource-nopropagation3\"/>\n+  <UMappingItem id=\"117\" mapping_id=\"5\" extAttrName=\"__NAME__\"\n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+                     \n+  <UMapping id=\"6\" resource_name=\"ws-target-resource-nopropagation4\"/>\n+  <UMappingItem id=\"118\" mapping_id=\"6\"\n+                extAttrName=\"__NAME__\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+                       \n+  <UMapping id=\"7\" resource_name=\"resource-testdb\"/>\n+  <UMappingItem id=\"119\" mapping_id=\"7\"\n+                extAttrName=\"__NAME__\" intMappingType=\"Username\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"120\" mapping_id=\"7\"\n+                extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"1\"/>\n+                     \n+  <UMapping id=\"8\" resource_name=\"resource-testdb2\"/>\n+  <UMappingItem id=\"121\" mapping_id=\"8\" extAttrName=\"__NAME__\" \n+                intMappingType=\"Username\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"122\" mapping_id=\"8\" extAttrName=\"__PASSWORD__\" \n+                intMappingType=\"Password\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"1\"/>\n+                         \n+  <UMapping id=\"9\" resource_name=\"resource-csv\"/>\n+  <UMappingItem id=\"200\" extAttrName=\"id\" mapping_id=\"9\"\n+                intMappingType=\"Username\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"201\" extAttrName=\"id\" mapping_id=\"9\"\n+                intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"202\" mapping_id=\"9\"\n+                extAttrName=\"__PASSWORD__\" intMappingType=\"Password\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"1\"/>\n+  <UMappingItem id=\"203\" extAttrName=\"name\" mapping_id=\"9\"\n+                intAttrName=\"firstname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"204\" extAttrName=\"surname\" mapping_id=\"9\"\n+                intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"205\" extAttrName=\"email\" mapping_id=\"9\"\n+                intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"206\" extAttrName=\"email\" mapping_id=\"9\"\n+                intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"207\" extAttrName=\"__NAME__\" mapping_id=\"9\"\n+                intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"208\" extAttrName=\"role\" mapping_id=\"9\"\n+                intAttrName=\"rderToBePropagated\" intMappingType=\"RoleDerivedSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+  <UMappingItem id=\"209\" extAttrName=\"membership\" mapping_id=\"9\"\n+                intAttrName=\"mderToBePropagated\" intMappingType=\"MembershipDerivedSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"0\"/>\n+                         \n+  <UMapping id=\"10\" resource_name=\"ws-target-resource-update-resetsynctoken\"/>\n+  <UMappingItem id=\"300\" mapping_id=\"10\"\n+                extAttrName=\"__NAME__\" intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"1\" password=\"0\"/>\n+  <UMappingItem id=\"301\" mapping_id=\"10\"\n+                extAttrName=\"__PASSWORD__\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                accountid=\"0\" password=\"1\"/>\n+\n+  <UMapping id=\"11\" resource_name=\"resource-ldap\"\n+            accountlink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n+  <UMappingItem id=\"311\" accountid=\"1\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"__NAME__\" intAttrName=\"Username\" intMappingType=\"Username\"\n+                mandatoryCondition=\"true\"/>\n+  <UMappingItem id=\"312\" accountid=\"0\" password=\"1\" mapping_id=\"11\"\n+                extAttrName=\"__PASSWORD__\" intAttrName=\"Password\" intMappingType=\"Password\"\n+                mandatoryCondition=\"true\"/>\n+  <UMappingItem id=\"313\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"sn\" intAttrName=\"surname\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"true\"/>\n+  <UMappingItem id=\"314\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"cn\" intAttrName=\"firstname\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"true\"/>\n+  <UMappingItem id=\"315\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"mail\" intAttrName=\"email\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"false\"/>\n+  <UMappingItem id=\"316\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"title\" intAttrName=\"title\" intMappingType=\"RoleSchema\"\n+                mandatoryCondition=\"false\"/>\n+  <UMappingItem id=\"317\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"postalAddress\" intAttrName=\"postalAddress\" intMappingType=\"MembershipSchema\"\n+                mandatoryCondition=\"false\"/>\n+\n+  <UMapping id=\"16\" resource_name=\"resource-db-sync\"/>\n+  <UMappingItem id=\"321\" accountid=\"0\" mapping_id=\"16\"\n+                extAttrName=\"EMAIL\" intAttrName=\"email\" intMappingType=\"UserSchema\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+  <UMappingItem id=\"322\" accountid=\"0\" mapping_id=\"16\"\n+                extAttrName=\"SURNAME\" intAttrName=\"fullname\" intMappingType=\"UserSchema\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+  <UMappingItem id=\"323\" accountid=\"1\" mapping_id=\"16\"\n+                extAttrName=\"__NAME__\" intAttrName=\"aLong\" intMappingType=\"UserSchema\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+  <UMappingItem id=\"324\" accountid=\"0\" mapping_id=\"16\"\n+                extAttrName=\"SURNAME\" intAttrName=\"surname\" intMappingType=\"UserSchema\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+  <UMappingItem id=\"325\" accountid=\"0\" mapping_id=\"16\"\n+                extAttrName=\"USERNAME\" intAttrName=\"Username\" intMappingType=\"Username\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+  <UMappingItem id=\"326\" accountid=\"0\" mapping_id=\"16\"\n+                extAttrName=\"EMAIL\" intAttrName=\"userId\" intMappingType=\"UserSchema\" \n+                mandatoryCondition=\"false\" password=\"0\"/>\n+              \n   <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>"},{"sha":"026eca9223f50f839e9ff90d198d6775c09c7274","filename":"pom.xml","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39681716c128e392f42eae894f737c4a6becbf8a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39681716c128e392f42eae894f737c4a6becbf8a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=39681716c128e392f42eae894f737c4a6becbf8a","patch":"@@ -27,7 +27,7 @@ under the License.\n         \n   <groupId>org.apache.syncope</groupId>\n   <artifactId>syncope</artifactId>\n-  <version>1.1.0-incubating-SNAPSHOT</version>\n+  <version>1.1.0-RP-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <parent>\n@@ -214,6 +214,16 @@ under the License.\n       </roles>\n       <url>http://people.apache.org/~jbonofre/</url>\n     </developer>\n+    <developer>\n+      <id>jbernhardt</id>\n+      <name>Jan Bernhardt</name>\n+      <organization>Talend</organization>\n+      <organizationUrl>http://www.talend.com/</organizationUrl>\n+      <roles>\n+        <role>PPMC member</role>\n+      </roles>\n+      <url>http://people.apache.org/~jbernhardt/</url>\n+    </developer>\n   </developers>\n \n   <contributors>\n@@ -264,7 +274,7 @@ under the License.\n     <velocity.version>1.7</velocity.version>\n     <quartz.version>2.1.6</quartz.version>\n \n-    <openjpa.version>2.2.0</openjpa.version>\n+    <openjpa.version>2.2.1</openjpa.version>\n     <bval.version>0.5</bval.version>\n         \n     <cocoon.version>3.0.0-alpha-3</cocoon.version>\n@@ -399,9 +409,10 @@ under the License.\n         <artifactId>geronimo-jpa_2.0_spec</artifactId> \n         <version>1.1</version> \n       </dependency>\n+      \n       <dependency>\n         <groupId>org.apache.openjpa</groupId>\n-        <artifactId>openjpa-all</artifactId>\n+        <artifactId>openjpa</artifactId>\n         <version>${openjpa.version}</version>\n       </dependency>\n       <dependency>"}]}