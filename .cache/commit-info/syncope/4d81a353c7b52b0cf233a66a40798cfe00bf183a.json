{"sha":"4d81a353c7b52b0cf233a66a40798cfe00bf183a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRkODFhMzUzYzdiNTJiMGNmMjMzYTY2YTQwNzk4Y2ZlMDBiZjE4M2E=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-15T16:18:40Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-02-15T16:18:40Z"},"message":"(Fixes issue #83)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246792 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e994c3f1d86743d9e1d94f878910402a2d46adf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6e994c3f1d86743d9e1d94f878910402a2d46adf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d81a353c7b52b0cf233a66a40798cfe00bf183a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d81a353c7b52b0cf233a66a40798cfe00bf183a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d81a353c7b52b0cf233a66a40798cfe00bf183a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d81a353c7b52b0cf233a66a40798cfe00bf183a/comments","author":null,"committer":null,"parents":[{"sha":"7cb3ff8f183678ee9887254ac171ce89f34e25d3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7cb3ff8f183678ee9887254ac171ce89f34e25d3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7cb3ff8f183678ee9887254ac171ce89f34e25d3"}],"stats":{"total":762,"additions":387,"deletions":375},"files":[{"sha":"61fa9bb6324a3d72584d74b09c63beb3a797f91b","filename":"console/src/main/java/org/syncope/console/commons/Constants.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FConstants.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -16,43 +16,45 @@\n \n public final class Constants {\n \n-    public static final String CONF_USERS_ATTRIBUTES_VIEW =\n+    public static final String PREF_USERS_ATTRIBUTES_VIEW =\n             \"users.attributes.view\";\n \n-    public static final String CONF_USER_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREFS_COOKIE_NAME = \"syncopeConsolePrefs\";\n+\n+    public static final String PREF_USER_SCHEMA_PAGINATOR_ROWS =\n             \"user.schema.paginator.rows\";\n \n-    public static final String CONF_USER_DER_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREF_USER_DER_SCHEMA_PAGINATOR_ROWS =\n             \"user.derived.schema.paginator.rows\";\n \n-    public static final String CONF_ROLE_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREF_ROLE_SCHEMA_PAGINATOR_ROWS =\n             \"role.schema.paginator.rows\";\n \n-    public static final String CONF_ROLE_DER_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS =\n             \"role.derived.schema.paginator.rows\";\n \n-    public static final String CONF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS =\n             \"membership.schema.paginator.rows\";\n \n-    public static final String CONF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS =\n+    public static final String PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS =\n             \"membership.derived.aschema.paginator.rows\";\n \n-    public static final String CONF_USERS_PAGINATOR_ROWS =\n+    public static final String PREF_USERS_PAGINATOR_ROWS =\n             \"users.paginator.rows\";\n \n-    public static final String CONF_USERS_SEARCH_PAGINATOR_ROWS =\n+    public static final String PREF_USERS_SEARCH_PAGINATOR_ROWS =\n             \"users.paginator.search.rows\";\n \n-    public static final String CONF_RESOURCES_PAGINATOR_ROWS =\n+    public static final String PREF_RESOURCES_PAGINATOR_ROWS =\n             \"resources.paginator.rows\";\n \n-    public static final String CONF_CONNECTORS_PAGINATOR_ROWS =\n+    public static final String PREF_CONNECTORS_PAGINATOR_ROWS =\n             \"connectors.paginator.rows\";\n \n-    public static final String CONF_CONFIGURATION_PAGINATOR_ROWS =\n+    public static final String PREF_CONFIGURATION_PAGINATOR_ROWS =\n             \"configuration.paginator.rows\";\n \n-    public static final String CONF_TASKS_PAGINATOR_ROWS =\n+    public static final String PREF_TASKS_PAGINATOR_ROWS =\n             \"tasks.paginator.rows\";\n \n     /* DATE FORMATS FOR TASKS */"},{"sha":"8ec01afcbceb9fe6ddf5ebe75c16b0837f94fb48","filename":"console/src/main/java/org/syncope/console/commons/PreferenceManager.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -0,0 +1,168 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.commons;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.Cookie;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.wicket.protocol.http.WebRequest;\n+import org.apache.wicket.protocol.http.WebResponse;\n+import org.apache.wicket.util.crypt.Base64;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.type.TypeReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class PreferenceManager {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            PreferenceManager.class);\n+\n+    private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n+\n+    private static final TypeReference MAP_TYPE_REF =\n+            new TypeReference<Map<String, String>>() {\n+            };\n+\n+    private static final List<Integer> PAGINATOR_CHOICES =\n+            Arrays.asList(new Integer[]{10, 25, 50});\n+\n+    @Autowired\n+    private ObjectMapper mapper;\n+\n+    public List<Integer> getPaginatorChoices() {\n+        return PAGINATOR_CHOICES;\n+    }\n+\n+    private Map<String, String> getPrefs(final String value)\n+            throws IOException {\n+\n+        return mapper.readValue(value, MAP_TYPE_REF);\n+    }\n+\n+    private String setPrefs(final Map<String, String> prefs)\n+            throws IOException {\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, prefs);\n+\n+        return writer.toString();\n+    }\n+\n+    public String get(final WebRequest request, final String key) {\n+        String result = null;\n+\n+        Cookie prefCookie = request.getCookie(Constants.PREFS_COOKIE_NAME);\n+        if (prefCookie != null) {\n+            Map<String, String> prefs;\n+            try {\n+                prefs = getPrefs(new String(Base64.decodeBase64(\n+                        prefCookie.getValue().getBytes())));\n+            } catch (IOException e) {\n+                LOG.error(\"Could not get preferences from \"\n+                        + prefCookie.getValue(), e);\n+\n+                prefs = new HashMap<String, String>();\n+            }\n+            result = prefs.get(key);\n+        } else {\n+            LOG.warn(\"Could not find cookie \" + Constants.PREFS_COOKIE_NAME);\n+        }\n+\n+        return result;\n+    }\n+\n+    public Integer getPaginatorRows(final WebRequest request,\n+            final String key) {\n+\n+        Integer result = getPaginatorChoices().get(0);\n+\n+        String value = get(request, key);\n+        if (value != null) {\n+            try {\n+                result = Integer.valueOf(value);\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Unparsable value \" + value, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public List<String> getList(final WebRequest request,\n+            final String key) {\n+\n+        List<String> result = new ArrayList<String>();\n+\n+        String compound = get(request, key);\n+        if (compound != null) {\n+            String[] items = compound.split(\";\");\n+            if (items != null) {\n+                result.addAll(Arrays.asList(items));\n+            } else {\n+                LOG.error(\"While exploding compund \" + compound);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public void set(final WebRequest request, final WebResponse response,\n+            final String key, final String value) {\n+\n+        Cookie prefCookie = request.getCookie(Constants.PREFS_COOKIE_NAME);\n+        if (prefCookie == null) {\n+            prefCookie = new Cookie(Constants.PREFS_COOKIE_NAME, \"\");\n+            prefCookie.setMaxAge(ONE_YEAR_TIME);\n+        }\n+\n+        Map<String, String> prefs;\n+        try {\n+            prefs = getPrefs(prefCookie.getValue());\n+        } catch (IOException e) {\n+            LOG.error(\"Could not get preferences from \"\n+                    + prefCookie.getValue(), e);\n+\n+            prefs = new HashMap<String, String>();\n+        }\n+        prefs.put(key, value);\n+\n+        try {\n+            prefCookie.setValue(new String(Base64.encodeBase64(\n+                    setPrefs(prefs).getBytes())));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not set preferences from \" + prefs);\n+        }\n+\n+        response.addCookie(prefCookie);\n+    }\n+\n+    public void setList(final WebRequest request, final WebResponse response,\n+            final String key, final List<String> values) {\n+\n+        set(request, response, key,\n+                StringUtils.join(values.toArray(new String[]{}), \";\"));\n+    }\n+}"},{"sha":"ac0e799ff1dbfd668529cb08d3057cf3e8c2bd44","filename":"console/src/main/java/org/syncope/console/commons/Utility.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cb3ff8f183678ee9887254ac171ce89f34e25d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FUtility.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cb3ff8f183678ee9887254ac171ce89f34e25d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FUtility.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FUtility.java?ref=7cb3ff8f183678ee9887254ac171ce89f34e25d3","patch":"@@ -1,89 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.commons;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.client.to.ConfigurationTO;\n-import org.syncope.console.rest.ConfigurationRestClient;\n-\n-/**\n- * Class with utilities shared among classes.\n- */\n-public class Utility {\n-\n-    @Autowired\n-    private ConfigurationRestClient confRestClient;\n-\n-    /**\n-     * Get the rows number to display for single page, stored as configuration.\n-     * @param confProperty\n-     */\n-    public int getPaginatorRowsToDisplay(final String confProperty) {\n-        //Set rows to display to default value\n-        int rows = 5;\n-\n-        ConfigurationTO configuration =\n-                confRestClient.readConfiguration(confProperty);\n-\n-        if (configuration == null || configuration.getConfValue() == null) {\n-            configuration = new ConfigurationTO();\n-\n-            configuration.setConfKey(confProperty);\n-            configuration.setConfValue(\"5\");\n-\n-            confRestClient.createConfiguration(configuration);\n-        } else {\n-            try {\n-                rows = new Integer(configuration.getConfValue());\n-            } catch (NumberFormatException ex) {\n-                configuration.setConfValue(\"5\");\n-                confRestClient.updateConfiguration(configuration);\n-                rows = 5;\n-            }\n-        }\n-\n-        return rows;\n-    }\n-\n-    /**\n-     * Paginator rows values populator.\n-     * @return List<Integer>\n-     */\n-    public List<Integer> paginatorRowsChooser() {\n-        final List<Integer> list = new ArrayList<Integer>();\n-\n-        list.add(10);\n-        list.add(30);\n-        list.add(50);\n-\n-        return list;\n-    }\n-\n-    /**\n-     * Update display rows for the section specified as configuration key.\n-     * @param confKey\n-     * @param rows number to store\n-     */\n-    public void updatePaginatorRows(String confKey, int rows) {\n-        ConfigurationTO config = new ConfigurationTO();\n-\n-        config.setConfKey(confKey);\n-        config.setConfValue(String.valueOf(rows));\n-\n-        confRestClient.updateConfiguration(config);\n-    }\n-}"},{"sha":"a14a0b83a6b7b06d47aec1ca366fe9e6aa1e60c7","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -58,7 +58,7 @@\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.LoggerTO;\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.commons.Utility;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.ConfigurationRestClient;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n@@ -72,7 +72,7 @@ public class Configuration extends BasePage {\n     private ConfigurationRestClient restClient;\n \n     @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private final ModalWindow createConfigWin;\n \n@@ -98,8 +98,9 @@ public Configuration(final PageParameters parameters) {\n         add(createConfigWin = new ModalWindow(\"createConfigurationWin\"));\n         add(editConfigWin = new ModalWindow(\"editConfigurationWin\"));\n \n-        paginatorRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_CONFIGURATION_PAGINATOR_ROWS);\n+        paginatorRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);\n \n         List<IColumn> confColumns = new ArrayList<IColumn>();\n \n@@ -112,9 +113,11 @@ public Configuration(final PageParameters parameters) {\n         confColumns.add(new AbstractColumn<ConfigurationTO>(new Model<String>(\n                 getString(\"edit\"))) {\n \n+            @Override\n             public void populateItem(\n-                    Item<ICellPopulator<ConfigurationTO>> cellItem,\n-                    String componentId, IModel<ConfigurationTO> model) {\n+                    final Item<ICellPopulator<ConfigurationTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<ConfigurationTO> model) {\n \n                 final ConfigurationTO configurationTO = model.getObject();\n                 AjaxLink editLink = new IndicatingAjaxLink(\"editLink\") {\n@@ -245,6 +248,7 @@ public void onClick(AjaxRequestTarget target) {\n \n                 createConfigWin.setPageCreator(new ModalWindow.PageCreator() {\n \n+                    @Override\n                     public Page createPage() {\n                         ConfigurationModalPage window =\n                                 new ConfigurationModalPage(Configuration.this,\n@@ -267,15 +271,17 @@ public Page createPage() {\n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_CONFIGURATION_PAGINATOR_ROWS,\n-                        paginatorRows);\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n                 confTable.setRowsPerPage(paginatorRows);\n \n                 target.addComponent(confContainer);"},{"sha":"8767dd9254e3dc821ba7af6d92c3803e0e08126e","filename":"console/src/main/java/org/syncope/console/pages/Connectors.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectors.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -48,7 +48,7 @@\n import org.syncope.client.to.ConnectorInstanceTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.commons.Utility;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.ConnectorRestClient;\n import org.syncope.console.rest.ResourceRestClient;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n@@ -70,7 +70,7 @@ public class Connectors extends BasePage {\n     private ResourceRestClient resourceRestClient;\n \n     @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private final ModalWindow createConnectorWin;\n \n@@ -91,8 +91,9 @@ public Connectors(PageParameters parameters) {\n         add(createConnectorWin = new ModalWindow(\"createConnectorWin\"));\n         add(editConnectorWin = new ModalWindow(\"editConnectorWin\"));\n \n-        paginatorRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_CONNECTORS_PAGINATOR_ROWS);\n+        paginatorRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_CONNECTORS_PAGINATOR_ROWS);\n \n         List<IColumn> columns = new ArrayList<IColumn>();\n \n@@ -265,15 +266,16 @@ public Page createPage() {\n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_CONNECTORS_PAGINATOR_ROWS, paginatorRows);\n-\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_CONNECTORS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n                 table.setRowsPerPage(paginatorRows);\n \n                 target.addComponent(container);"},{"sha":"feb71c065741154f04203e6b4bd7e7a7d52d63e1","filename":"console/src/main/java/org/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":10,"deletions":55,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -16,9 +16,7 @@\n  */\n package org.syncope.console.pages;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.StringTokenizer;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -32,9 +30,8 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.to.ConfigurationTO;\n-\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.rest.ConfigurationRestClient;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.SchemaRestClient;\n \n /**\n@@ -43,7 +40,7 @@\n public class DisplayAttributesModalPage extends BaseModalPage {\n \n     @SpringBean\n-    private ConfigurationRestClient restClient;\n+    private PreferenceManager prefMan;\n \n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n@@ -61,7 +58,8 @@ public DisplayAttributesModalPage(final BasePage basePage,\n \n         Form userAttributesForm = new Form(\"UserAttributesForm\");\n         userAttributesForm.setModel(new CompoundPropertyModel(this));\n-        setupSelections();\n+        selections = prefMan.getList(getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USERS_ATTRIBUTES_VIEW);\n \n         final IModel attributes = new LoadableDetachableModel() {\n \n@@ -81,59 +79,16 @@ protected Object load() {\n             protected void onSubmit(final AjaxRequestTarget target,\n                     final Form form) {\n \n-                if (saveConfiguration()) {\n-                    Users callerPage = (Users) basePage;\n-                    callerPage.setOperationResult(true);\n-                    window.close(target);\n-                } else {\n-                    error(getString(\"generic_error\"));\n-                }\n+                prefMan.setList(getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_USERS_ATTRIBUTES_VIEW,\n+                        selections);\n \n+                ((Users) basePage).setOperationResult(true);\n+                window.close(target);\n             }\n         };\n         userAttributesForm.add(submit);\n         add(userAttributesForm);\n     }\n-\n-    /**\n-     * Setup user selections.\n-     * @return selections' names.\n-     */\n-    public final void setupSelections() {\n-        selections = new ArrayList<String>();\n-\n-        configuration = restClient.readConfiguration(\n-                Constants.CONF_USERS_ATTRIBUTES_VIEW);\n-\n-        if (configuration != null && configuration.getConfValue() != null) {\n-            String conf = configuration.getConfValue();\n-            StringTokenizer st = new StringTokenizer(conf, \";\");\n-\n-            while (st.hasMoreTokens()) {\n-                this.selections.add(st.nextToken());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Store the selected selections into db.\n-     */\n-    public boolean saveConfiguration() {\n-        boolean create = (configuration == null\n-                || configuration.getConfValue() == null) ? true : false;\n-\n-        configuration = new ConfigurationTO();\n-\n-        StringBuilder value = new StringBuilder();\n-        for (String name : selections) {\n-            value.append(name).append(';');\n-        }\n-\n-        configuration.setConfKey(Constants.CONF_USERS_ATTRIBUTES_VIEW);\n-        configuration.setConfValue(value.toString());\n-\n-        return create\n-                ? restClient.createConfiguration(configuration)\n-                : restClient.updateConfiguration(configuration);\n-    }\n }"},{"sha":"effd457318af7e5f85c2855fdd5091407395d593","filename":"console/src/main/java/org/syncope/console/pages/Resources.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -48,7 +48,7 @@\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.commons.Utility;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.ResourceRestClient;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n@@ -62,7 +62,7 @@ public class Resources extends BasePage {\n     private ResourceRestClient restClient;\n \n     @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private final ModalWindow createResourceWin;\n \n@@ -90,8 +90,9 @@ public Resources(PageParameters parameters) {\n \n         add(feedbackPanel);\n \n-        paginatorRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_RESOURCES_PAGINATOR_ROWS);\n+        paginatorRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_RESOURCES_PAGINATOR_ROWS);\n \n         List<IColumn> columns = new ArrayList<IColumn>();\n \n@@ -226,6 +227,7 @@ public void onClick(AjaxRequestTarget target) {\n \n                 createResourceWin.setPageCreator(new ModalWindow.PageCreator() {\n \n+                    @Override\n                     public Page createPage() {\n                         ResourceModalPage windows = new ResourceModalPage(\n                                 Resources.this, editResourceWin,\n@@ -241,16 +243,17 @@ public Page createPage() {\n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_RESOURCES_PAGINATOR_ROWS,\n-                        paginatorRows);\n-\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_RESOURCES_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n                 table.setRowsPerPage(paginatorRows);\n \n                 target.addComponent(container);"},{"sha":"eb42bbd8819ab1a572c71cbac36969ce2eb1b405","filename":"console/src/main/java/org/syncope/console/pages/Schema.java","status":"modified","additions":63,"deletions":50,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -48,7 +48,7 @@\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.commons.Utility;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n@@ -78,7 +78,7 @@ private enum SchemaDerivedType {\n     private SchemaRestClient restClient;\n \n     @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private final ModalWindow createUserSchemaWin;\n \n@@ -164,23 +164,29 @@ public Schema(PageParameters parameters) {\n         add(editMembershipDerivedSchemaWin = new ModalWindow(\n                 \"editMembershipDerSchemaWin\"));\n \n-        rolePageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_ROLE_SCHEMA_PAGINATOR_ROWS);\n+        rolePageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_ROLE_SCHEMA_PAGINATOR_ROWS);\n \n-        roleDerPageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_ROLE_DER_SCHEMA_PAGINATOR_ROWS);\n+        roleDerPageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS);\n \n-        userSchemaPageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_USER_SCHEMA_PAGINATOR_ROWS);\n+        userSchemaPageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USER_SCHEMA_PAGINATOR_ROWS);\n \n-        userDerSchemaPageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_USER_DER_SCHEMA_PAGINATOR_ROWS);\n+        userDerSchemaPageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS);\n \n-        membershipPageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS);\n+        membershipPageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS);\n \n-        membershipDerPageRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS);\n+        membershipDerPageRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS);\n \n         final String allowedCreateRoles = xmlRolesReader.getAllAllowedRoles(\n                 \"Schema\", \"create\");\n@@ -300,16 +306,17 @@ public CharSequence preDecorateScript(\n         Form rolesPaginatorForm = new Form(\"RolesPaginatorForm\");\n \n         final DropDownChoice rowsRoleChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"rolePageRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"rolePageRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsRoleChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_ROLE_SCHEMA_PAGINATOR_ROWS,\n-                        rolePageRows);\n-\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_ROLE_SCHEMA_PAGINATOR_ROWS,\n+                        String.valueOf(rolePageRows));\n                 tableRoles.setRowsPerPage(rolePageRows);\n \n                 target.addComponent(roleSchemasContainer);\n@@ -434,17 +441,18 @@ public CharSequence preDecorateScript(\n         Form rolesDerPaginatorForm = new Form(\"RolesDerPaginatorForm\");\n \n         DropDownChoice rowsRolesDerChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"roleDerPageRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"roleDerPageRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsRolesDerChooser.add(\n                 new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-                    protected void onUpdate(AjaxRequestTarget target) {\n-                        utility.updatePaginatorRows(\n-                                Constants.CONF_ROLE_DER_SCHEMA_PAGINATOR_ROWS,\n-                                rolePageRows);\n-\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        prefMan.set(getWebRequestCycle().getWebRequest(),\n+                                getWebRequestCycle().getWebResponse(),\n+                                Constants.PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS,\n+                                String.valueOf(roleDerPageRows));\n                         tableRolesDer.setRowsPerPage(roleDerPageRows);\n \n                         target.addComponent(roleDerivedSchemasContainer);\n@@ -569,15 +577,16 @@ public CharSequence preDecorateScript(\n \n         final DropDownChoice usersRowsChooser = new DropDownChoice(\n                 \"rowsChooser\", new PropertyModel(this, \"userSchemaPageRows\"),\n-                utility.paginatorRowsChooser());\n+                prefMan.getPaginatorChoices());\n \n         usersRowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_USER_SCHEMA_PAGINATOR_ROWS,\n-                        userSchemaPageRows);\n-\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_USER_SCHEMA_PAGINATOR_ROWS,\n+                        String.valueOf(userSchemaPageRows));\n                 tableUsers.setRowsPerPage(userSchemaPageRows);\n \n                 target.addComponent(userSchemaContainer);\n@@ -704,16 +713,17 @@ public CharSequence preDecorateScript(\n         final DropDownChoice usersDerRowsChooser = new DropDownChoice(\n                 \"rowsChooser\",\n                 new PropertyModel(this, \"userDerSchemaPageRows\"),\n-                utility.paginatorRowsChooser());\n+                prefMan.getPaginatorChoices());\n \n         usersDerRowsChooser.add(\n                 new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n+                    @Override\n                     protected void onUpdate(AjaxRequestTarget target) {\n-                        utility.updatePaginatorRows(\n-                                Constants.CONF_USER_DER_SCHEMA_PAGINATOR_ROWS,\n-                                userDerSchemaPageRows);\n-\n+                        prefMan.set(getWebRequestCycle().getWebRequest(),\n+                                getWebRequestCycle().getWebResponse(),\n+                                Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS,\n+                                String.valueOf(userDerSchemaPageRows));\n                         tableUsersDer.setRowsPerPage(userDerSchemaPageRows);\n \n                         target.addComponent(userDerivedSchemaContainer);\n@@ -839,16 +849,17 @@ public CharSequence preDecorateScript(\n         final DropDownChoice membershipRowsChooser = new DropDownChoice(\n                 \"rowsChooser\",\n                 new PropertyModel(this, \"membershipPageRows\"),\n-                utility.paginatorRowsChooser());\n+                prefMan.getPaginatorChoices());\n \n         membershipRowsChooser.add(new AjaxFormComponentUpdatingBehavior(\n                 \"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS,\n-                        membershipPageRows);\n-\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS,\n+                        String.valueOf(membershipPageRows));\n                 tableMemberships.setRowsPerPage(membershipPageRows);\n \n                 target.addComponent(membershipSchemaContainer);\n@@ -978,15 +989,17 @@ public CharSequence preDecorateScript(\n         final DropDownChoice membershipDerRowsChooser = new DropDownChoice(\n                 \"rowsChooser\",\n                 new PropertyModel(this, \"membershipDerPageRows\"),\n-                utility.paginatorRowsChooser());\n+                prefMan.getPaginatorChoices());\n \n         membershipDerRowsChooser.add(new AjaxFormComponentUpdatingBehavior(\n                 \"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS,\n-                        membershipDerPageRows);\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS,\n+                        String.valueOf(membershipDerPageRows));\n \n                 tableMembershipsDer.setRowsPerPage(membershipDerPageRows);\n "},{"sha":"bd9f931e1a6d8149057511c90aeedef1600f5645","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -49,7 +49,7 @@\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n-import org.syncope.console.commons.Utility;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.rest.TaskRestClient;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n@@ -68,7 +68,7 @@ public class Tasks extends BasePage {\n     private TaskRestClient restClient;\n \n     @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private int paginatorRows;\n \n@@ -87,8 +87,9 @@ public Tasks(final PageParameters parameters) {\n \n         add(window = new ModalWindow(\"taskWin\"));\n \n-        paginatorRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_TASKS_PAGINATOR_ROWS);\n+        paginatorRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_TASKS_PAGINATOR_ROWS);\n \n         List<IColumn> columns = new ArrayList<IColumn>();\n \n@@ -273,15 +274,17 @@ public void onClose(final AjaxRequestTarget target) {\n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(Constants.CONF_TASKS_PAGINATOR_ROWS,\n-                        paginatorRows);\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_TASKS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n \n                 table.setRowsPerPage(paginatorRows);\n "},{"sha":"e58009c436844508ed255e0a64add37ac315c28d","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":75,"deletions":125,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -14,12 +14,11 @@\n  */\n package org.syncope.console.pages;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.StringTokenizer;\n+import org.apache.commons.httpclient.NameValuePair;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -51,16 +50,14 @@\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.PaginatedResult;\n import org.syncope.client.to.AttributeTO;\n-import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n+import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SearchConditionWrapper;\n import org.syncope.console.commons.SearchConditionWrapper.OperationType;\n-import org.syncope.console.commons.Utility;\n import org.syncope.console.rest.SchemaRestClient;\n-import org.syncope.console.rest.ConfigurationRestClient;\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.rest.UserRestClient;\n import org.syncope.console.wicket.markup.html.form.UpdatingCheckBox;\n@@ -82,10 +79,7 @@ public class Users extends BasePage {\n     private RoleRestClient roleRestClient;\n \n     @SpringBean\n-    private ConfigurationRestClient confRestClient;\n-\n-    @SpringBean\n-    private Utility utility;\n+    private PreferenceManager prefMan;\n \n     private final ModalWindow createUserWin;\n \n@@ -158,7 +152,7 @@ public class Users extends BasePage {\n \n     private Label totalRecordsSearch;\n \n-    private List<String> columnsList;\n+    private List<String> columnList;\n \n     private NodeCond nodeCond;\n \n@@ -184,24 +178,14 @@ public Users(PageParameters parameters) {\n         //table's columnsList = attributes to view\n         final IModel columns = new LoadableDetachableModel() {\n \n+            @Override\n             protected Object load() {\n-                ConfigurationTO configuration =\n-                        confRestClient.readConfiguration(\n-                        \"users.attributes.view\");\n-                columnsList = new ArrayList<String>();\n-\n-                if (configuration != null && configuration.getConfValue()\n-                        != null) {\n-                    String conf = configuration.getConfValue();\n-                    StringTokenizer st = new StringTokenizer(conf, \";\");\n-\n-                    while (st.hasMoreTokens()) {\n-                        columnsList.add(st.nextToken());\n-                    }\n-                }\n+                columnList = prefMan.getList(\n+                        getWebRequestCycle().getWebRequest(),\n+                        Constants.PREF_USERS_ATTRIBUTES_VIEW);\n \n-                Collections.sort(columnsList);\n-                return columnsList;\n+                Collections.sort(columnList);\n+                return columnList;\n             }\n         };\n \n@@ -216,12 +200,13 @@ protected void populateItem(final ListItem item) {\n             }\n         };\n \n+        paginatorRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USERS_PAGINATOR_ROWS);\n \n-        paginatorRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_USERS_PAGINATOR_ROWS);\n-\n-        paginatorSearchRows = utility.getPaginatorRowsToDisplay(\n-                Constants.CONF_USERS_SEARCH_PAGINATOR_ROWS);\n+        paginatorSearchRows = prefMan.getPaginatorRows(\n+                getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS);\n \n         setupPaginatedUsers();\n \n@@ -318,19 +303,15 @@ protected void populateItem(final ListItem item) {\n \n                     @Override\n                     protected void populateItem(ListItem item) {\n-                        AttributeWrapper attribute =\n-                                (AttributeWrapper) item.getDefaultModelObject();\n-\n-                        for (String name : columnsList) {\n+                        NameValuePair attribute =\n+                                (NameValuePair) item.getDefaultModelObject();\n \n-                            if (name.equalsIgnoreCase(attribute.getKey())) {\n-                                item.add(new Label(\"name\", attribute.getValue()));\n-                            } else if (!name.equalsIgnoreCase(attribute.\n-                                    getKey())) {\n+                        for (String name : columnList) {\n+                            if (name.equalsIgnoreCase(attribute.getName())) {\n+                                item.add(new Label(\"name\",\n+                                        attribute.getValue()));\n                             }\n-\n                         }\n-\n                     }\n                 });\n \n@@ -569,6 +550,7 @@ public void onClick(AjaxRequestTarget target) {\n         changeAttribsViewWin.setWindowClosedCallback(\n                 new ModalWindow.WindowClosedCallback() {\n \n+                    @Override\n                     public void onClose(AjaxRequestTarget target) {\n \n                         if (operationResult) {\n@@ -611,14 +593,17 @@ public Page createPage() {\n         Form paginatorForm = new Form(\"PaginatorForm\");\n \n         final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n-                new PropertyModel(this, \"paginatorRows\"), utility.\n-                paginatorRowsChooser());\n+                new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(Constants.CONF_USERS_PAGINATOR_ROWS,\n-                        paginatorRows);\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequestCycle().getWebRequest(),\n+                        getWebRequestCycle().getWebResponse(),\n+                        Constants.PREF_USERS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n \n                 usersView.setRowsPerPage(paginatorRows);\n \n@@ -956,12 +941,13 @@ protected Object load() {\n                     return paginatedSearchUsers.getRecords();\n                 } else {\n \n-                    if(paginatedSearchUsers != null &&\n-                            paginatedSearchUsers.getRecords() != null)\n+                    if (paginatedSearchUsers != null\n+                            && paginatedSearchUsers.getRecords() != null) {\n                         return paginatedSearchUsers.getRecords();\n-                    else\n+                    } else {\n                         return new ArrayList();\n-                    \n+                    }\n+\n                 }\n \n             }\n@@ -1272,30 +1258,34 @@ protected void onError(AjaxRequestTarget target, Form form) {\n \n         final DropDownChoice rowsSearchChooser = new DropDownChoice(\n                 \"rowsSearchChooser\",\n-                new PropertyModel(this, \"paginatorSearchRows\"), utility.\n-                paginatorRowsChooser());\n-\n-        rowsSearchChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+                new PropertyModel(this, \"paginatorSearchRows\"),\n+                prefMan.getPaginatorChoices());\n \n-            protected void onUpdate(AjaxRequestTarget target) {\n-                utility.updatePaginatorRows(\n-                        Constants.CONF_USERS_SEARCH_PAGINATOR_ROWS,\n-                        paginatorSearchRows);\n+        rowsSearchChooser.add(\n+                new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-                resultsView.setRowsPerPage(paginatorSearchRows);\n-\n-                //Re-execute the query\n-                paginatedSearchUsers = userRestClient.paginatedSearchUser(\n-                        nodeCond, currentSearchPage = 1, paginatorSearchRows);\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        prefMan.set(getWebRequestCycle().getWebRequest(),\n+                                getWebRequestCycle().getWebResponse(),\n+                                Constants.PREF_USERS_SEARCH_PAGINATOR_ROWS,\n+                                String.valueOf(paginatorSearchRows));\n+                        resultsView.setRowsPerPage(paginatorSearchRows);\n+\n+                        //Re-execute the query\n+                        paginatedSearchUsers = userRestClient.\n+                                paginatedSearchUser(\n+                                nodeCond, currentSearchPage = 1,\n+                                paginatorSearchRows);\n \n-                //Update pageLinks on paginator\n-                List<Integer> pageIdList = getPaginatorSearchIndexes();\n-                pageLinksSearchView.setList(pageIdList);\n-                target.addChildren(pageLinksSearchView, AjaxLink.class);\n+                        //Update pageLinks on paginator\n+                        List<Integer> pageIdList = getPaginatorSearchIndexes();\n+                        pageLinksSearchView.setList(pageIdList);\n+                        target.addChildren(pageLinksSearchView, AjaxLink.class);\n \n-                target.addComponent(searchResultsContainer);\n-            }\n-        });\n+                        target.addComponent(searchResultsContainer);\n+                    }\n+                });\n \n         paginatorSearchForm.add(rowsSearchChooser);\n \n@@ -1353,55 +1343,41 @@ public List<Integer> getPaginatorIndexes() {\n      * @param userTO instance\n      * @return attributes columnsList to view depending the selection\n      */\n-    public List<AttributeWrapper> attributesToDisplay(UserTO user) {\n-        List<AttributeTO> attributes = user.getAttributes();\n-        List<AttributeWrapper> attributesList = new ArrayList<AttributeWrapper>();\n-\n-        ConfigurationTO configuration =\n-                confRestClient.readConfiguration(\n-                \"users.attributes.view\");\n-        columnsList = new ArrayList<String>();\n-\n-        if (configuration != null && configuration.getConfValue() != null\n-                && !configuration.getConfValue().equals(\"\")) {\n-            String conf = configuration.getConfValue();\n-            StringTokenizer st = new StringTokenizer(conf, \";\");\n-\n-            while (st.hasMoreTokens()) {\n-                columnsList.add(st.nextToken());\n-            }\n-        }\n+    public List<NameValuePair> attributesToDisplay(final UserTO user) {\n+        List<NameValuePair> attrList = new ArrayList<NameValuePair>();\n \n-        Collections.sort(columnsList);\n+        columnList = prefMan.getList(getWebRequestCycle().getWebRequest(),\n+                Constants.PREF_USERS_ATTRIBUTES_VIEW);\n+        Collections.sort(columnList);\n \n-        AttributeWrapper attributeWrapper = null;\n+        NameValuePair attributeWrapper = null;\n \n         boolean found = false;\n-        for (String name : columnsList) {\n-            for (AttributeTO attribute : attributes) {\n+        for (String name : columnList) {\n+            for (AttributeTO attribute : user.getAttributes()) {\n                 if (name.equals(attribute.getSchema()) && !found) {\n-                    attributeWrapper = new AttributeWrapper();\n-                    attributeWrapper.setKey(attribute.getSchema());\n+                    attributeWrapper = new NameValuePair();\n+                    attributeWrapper.setName(attribute.getSchema());\n                     for (String value : attribute.getValues()) {\n                         attributeWrapper.setValue(value);\n                         found = true;\n                     }\n-                    attributesList.add(attributeWrapper);\n+                    attrList.add(attributeWrapper);\n                 }\n             }\n             //case the attribute's value is blank\n             if (!found) {\n-                attributeWrapper = new AttributeWrapper();\n-                attributeWrapper.setKey(name);\n+                attributeWrapper = new NameValuePair();\n+                attributeWrapper.setName(name);\n                 attributeWrapper.setValue(\"\");\n \n-                attributesList.add(attributeWrapper);\n+                attrList.add(attributeWrapper);\n             } else {\n                 found = false;\n             }\n         }\n \n-        return attributesList;\n+        return attrList;\n     }\n \n     /**\n@@ -1612,30 +1588,4 @@ public List<Integer> getPaginatorSearchIndexes() {\n \n         return pageIdList;\n     }\n-\n-    /**\n-     * Wrapper class for displaying attribute\n-     */\n-    public class AttributeWrapper implements Serializable {\n-\n-        private String key;\n-\n-        private String value;\n-\n-        public String getKey() {\n-            return key;\n-        }\n-\n-        public void setKey(String key) {\n-            this.key = key;\n-        }\n-\n-        public String getValue() {\n-            return value;\n-        }\n-\n-        public void setValue(String value) {\n-            this.value = value;\n-        }\n-    }\n }"},{"sha":"344795c6d54d77f0d66d213188f8153b00d29d1d","filename":"console/src/main/java/org/syncope/console/rest/UserRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -137,7 +137,7 @@ public ConfigurationTO readConfigurationDisplayAttributes() {\n             configurationTO = restTemplate.getForObject(\n                     baseURL + \"configuration/read/{confKey}\",\n                     ConfigurationTO.class,\n-                    Constants.CONF_USERS_ATTRIBUTES_VIEW);\n+                    Constants.PREF_USERS_ATTRIBUTES_VIEW);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a conf key\", e);\n             return null;"},{"sha":"1ab6dfc865484b54732084ea5f585d3aa8b41f65","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -71,7 +71,7 @@\n         <aop:scoped-proxy/>\n     </bean>\n \n-    <bean id=\"utility\" class=\"org.syncope.console.commons.Utility\"/>\n+    <bean id=\"preferenceManager\" class=\"org.syncope.console.commons.PreferenceManager\"/>\n \n     <bean id=\"xmlRolesReader\" class=\"org.syncope.console.commons.XMLRolesReader\"/>\n "},{"sha":"9a44b028e170f9816e7fe6131076a23e5944809b","filename":"core/src/main/resources/content.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d81a353c7b52b0cf233a66a40798cfe00bf183a/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d81a353c7b52b0cf233a66a40798cfe00bf183a/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=4d81a353c7b52b0cf233a66a40798cfe00bf183a","patch":"@@ -40,7 +40,6 @@\n     <SyncopeConf confKey=\"optin.email.from\" confValue=\"syncope@googlecode.com\"/>\n     <SyncopeConf confKey=\"optin.email.subject\" confValue=\"Welcome to Syncope!\"/>\n     <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n-    <SyncopeConf confKey=\"users.attributes.view\" confValue=\"userId;\"/>\n \n     <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"}]}