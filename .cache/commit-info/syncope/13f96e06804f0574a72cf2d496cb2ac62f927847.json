{"sha":"13f96e06804f0574a72cf2d496cb2ac62f927847","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzZjk2ZTA2ODA0ZjA1NzRhNzJjZjJkNDk2Y2IyYWM2MmY5Mjc4NDc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-06T15:50:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-06T15:50:44Z"},"message":"[SYNCOPE-156] Removing (most of) Spring from console","tree":{"sha":"c9fbd59986cd05b5e2e8521635d813926e871136","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c9fbd59986cd05b5e2e8521635d813926e871136"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/13f96e06804f0574a72cf2d496cb2ac62f927847","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/13f96e06804f0574a72cf2d496cb2ac62f927847","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/13f96e06804f0574a72cf2d496cb2ac62f927847","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/13f96e06804f0574a72cf2d496cb2ac62f927847/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"07b519bd86abc42ae4eea174121a3b3476d309d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/07b519bd86abc42ae4eea174121a3b3476d309d6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/07b519bd86abc42ae4eea174121a3b3476d309d6"}],"stats":{"total":805,"additions":326,"deletions":479},"files":[{"sha":"24f628805ffe8fb2f7c7c760b3d715c1f96a6900","filename":"client/console/pom.xml","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fpom.xml?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -46,9 +46,9 @@ under the License.\n \n     <dependency>\n       <groupId>org.springframework</groupId>\n-      <artifactId>spring-web</artifactId>\n+      <artifactId>spring-context</artifactId>\n     </dependency>\n-\n+      \n     <dependency>\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket</artifactId>\n@@ -62,10 +62,6 @@ under the License.\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket-datetime</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.wicket</groupId>\n-      <artifactId>wicket-spring</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket-auth-roles</artifactId>"},{"sha":"c7baef22a0fff4f1ec837d1c1d248f34d3b097b4","filename":"client/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -27,6 +27,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n@@ -35,7 +36,6 @@\n import org.apache.wicket.util.crypt.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.util.StringUtils;\n \n public class PreferenceManager {\n \n@@ -69,7 +69,7 @@ public List<Integer> getPaginatorChoices() {\n     private Map<String, String> getPrefs(final String value) {\n         Map<String, String> prefs;\n         try {\n-            if (StringUtils.hasText(value)) {\n+            if (StringUtils.isNotBlank(value)) {\n                 prefs = mapper.readValue(value, MAP_TYPE_REF);\n             } else {\n                 throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n@@ -117,7 +117,7 @@ public List<String> getList(final Request request, final String key) {\n \n         final String compound = get(request, key);\n \n-        if (StringUtils.hasText(compound)) {\n+        if (StringUtils.isNotBlank(compound)) {\n             String[] items = compound.split(\";\");\n             result.addAll(Arrays.asList(items));\n         }\n@@ -135,7 +135,7 @@ public void set(final Request request, final Response response, final Map<String\n \n         // after retrieved previous setting in order to overwrite the key ...\n         for (Map.Entry<String, List<String>> entry : prefs.entrySet()) {\n-            current.put(entry.getKey(), StringUtils.collectionToDelimitedString(entry.getValue(), \";\"));\n+            current.put(entry.getKey(), StringUtils.join(entry.getValue(), \";\"));\n         }\n \n         try {\n@@ -164,7 +164,7 @@ public void set(final Request request, final Response response, final String key\n     }\n \n     public void setList(final Request request, final Response response, final String key, final List<String> values) {\n-        set(request, response, key, StringUtils.collectionToDelimitedString(values, \";\"));\n+        set(request, response, key, StringUtils.join(values, \";\"));\n     }\n \n     public void setList(final Request request, final Response response, final Map<String, List<String>> prefs) {"},{"sha":"ec6502420f137991e5e86a63dd335b9830d2918b","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":105,"deletions":22,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -22,11 +22,16 @@\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n import de.agilecoders.wicket.core.settings.IBootstrapSettings;\n import de.agilecoders.wicket.core.settings.SingleThemeProvider;\n+import java.io.File;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n-import org.apache.commons.lang3.StringUtils;\n+import java.util.Properties;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.pages.MustChangePassword;\n import org.apache.syncope.client.console.pages.Dashboard;\n@@ -35,8 +40,10 @@\n import org.apache.syncope.client.console.resources.WorkflowDefGETResource;\n import org.apache.syncope.client.console.resources.WorkflowDefPUTResource;\n import org.apache.syncope.client.console.themes.AdminLTE;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.wicket.Page;\n+import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebApplication;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -46,30 +53,82 @@\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.resource.DynamicJQueryResourceReference;\n-import org.apache.wicket.spring.injection.annot.SpringComponentInjector;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.config.BeanDefinition;\n-import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n-import org.springframework.core.type.filter.AssignableTypeFilter;\n-import org.springframework.util.ClassUtils;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n+import org.springframework.util.Assert;\n \n public class SyncopeConsoleApplication extends AuthenticatedWebApplication {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleApplication.class);\n \n+    private static final String CONSOLE_PROPERTIES = \"console.properties\";\n+\n     public static final List<Locale> SUPPORTED_LOCALES = Collections.unmodifiableList(Arrays.asList(\n             new Locale[] {\n                 Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\")\n             }));\n \n     private static final String ACTIVITI_MODELER_CONTEXT = \"activiti-modeler\";\n \n+    public static SyncopeConsoleApplication get() {\n+        return (SyncopeConsoleApplication) WebApplication.get();\n+    }\n+\n+    private String version;\n+\n+    private String site;\n+\n+    private String license;\n+\n+    private String anonymousUser;\n+\n+    private String anonymousKey;\n+\n+    private String activitiModelerDirectory;\n+\n+    private SyncopeClientFactoryBean clientFactory;\n+\n     @Override\n     protected void init() {\n         super.init();\n \n+        // read console.properties\n+        Properties props = new Properties();\n+        try {\n+            props.load(getClass().getResourceAsStream(\"/\" + CONSOLE_PROPERTIES));\n+            File consoleDir = new File(props.getProperty(\"console.directory\"));\n+            if (consoleDir.exists() && consoleDir.canRead() && consoleDir.isDirectory()) {\n+                File consoleDirProps = FileUtils.getFile(consoleDir, CONSOLE_PROPERTIES);\n+                if (consoleDirProps.exists() && consoleDirProps.canRead() && consoleDirProps.isFile()) {\n+                    props.clear();\n+                    props.load(FileUtils.openInputStream(consoleDir));\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new WicketRuntimeException(\"Could not read \" + CONSOLE_PROPERTIES, e);\n+        }\n+        version = props.getProperty(\"version\");\n+        Assert.notNull(version, \"<version> not set\");\n+        site = props.getProperty(\"site\");\n+        Assert.notNull(site, \"<site> not set\");\n+        license = props.getProperty(\"license\");\n+        Assert.notNull(license, \"<license> not set\");\n+        anonymousUser = props.getProperty(\"anonymousUser\");\n+        Assert.notNull(anonymousUser, \"<anonymousUser> not set\");\n+        anonymousKey = props.getProperty(\"anonymousKey\");\n+        Assert.notNull(anonymousKey, \"<anonymousKey> not set\");\n+\n+        String scheme = props.getProperty(\"scheme\");\n+        Assert.notNull(scheme, \"<scheme> not set\");\n+        String host = props.getProperty(\"host\");\n+        Assert.notNull(host, \"<host> not set\");\n+        String port = props.getProperty(\"port\");\n+        Assert.notNull(port, \"<port> not set\");\n+        String rootPath = props.getProperty(\"rootPath\");\n+        Assert.notNull(rootPath, \"<rootPath> not set\");\n+\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath);\n+\n         // Application settings\n         IBootstrapSettings settings = new BootstrapSettings();\n \n@@ -81,24 +140,16 @@ protected void init() {\n \n         getResourceSettings().setUseMinifiedResources(true);\n \n-        getComponentInstantiationListeners().add(new SpringComponentInjector(this));\n         getResourceSettings().setThrowExceptionOnMissingResource(true);\n \n         getJavaScriptLibrarySettings().setJQueryReference(new DynamicJQueryResourceReference());\n \n         getSecuritySettings().setAuthorizationStrategy(new MetaDataRoleAuthorizationStrategy(this));\n-        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(BasePage.class));\n-\n-        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n-            try {\n-                @SuppressWarnings(\"unchecked\")\n-                Class<? extends BasePage> clazz = (Class<? extends BasePage>) ClassUtils.resolveClassName(\n-                        bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-                MetaDataRoleAuthorizationStrategy.authorize(clazz, SyncopeConsoleSession.AUTHENTICATED);\n-            } catch (Throwable t) {\n-                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n-            }\n+\n+        ClassPathScanImplementationLookup lookup = (ClassPathScanImplementationLookup) getServletContext().\n+                getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n+        for (Class<? extends BasePage> clazz : lookup.getPageClasses()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(clazz, SyncopeConsoleSession.AUTHENTICATED);\n         }\n \n         getMarkupSettings().setStripWicketTags(true);\n@@ -108,8 +159,8 @@ protected void init() {\n \n         mountPage(\"/login\", getSignInPageClass());\n \n-        final String activitiModelerDirectory = WebApplicationContextUtils.getWebApplicationContext(\n-                WebApplication.get().getServletContext()).getBean(\"activitiModelerDirectory\", String.class);\n+        activitiModelerDirectory = props.getProperty(\"activitiModelerDirectory\");\n+        Assert.notNull(activitiModelerDirectory, \"<activitiModelerDirectory> not set\");\n         mountResource(\"/\" + ACTIVITI_MODELER_CONTEXT, new ResourceReference(ACTIVITI_MODELER_CONTEXT) {\n \n             private static final long serialVersionUID = -128426276529456602L;\n@@ -157,4 +208,36 @@ public Class<? extends Page> getHomePage() {\n                         ? MustChangePassword.class\n                         : Dashboard.class;\n     }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public String getSite() {\n+        return site;\n+    }\n+\n+    public String getLicense() {\n+        return license;\n+    }\n+\n+    public String getAnonymousUser() {\n+        return anonymousUser;\n+    }\n+\n+    public String getAnonymousKey() {\n+        return anonymousKey;\n+    }\n+\n+    public String getActivitiModelerDirectory() {\n+        return activitiModelerDirectory;\n+    }\n+\n+    public SyncopeClientFactoryBean getClientFactory() {\n+        return clientFactory;\n+    }\n+\n+    public MediaType getMediaType() {\n+        return clientFactory.getContentType().getMediaType();\n+    }\n }"},{"sha":"667b5251d6580733d1f9ba41c287fe1b2f6cd180","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":14,"deletions":33,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -44,12 +44,9 @@\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n-import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.Request;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n \n public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n@@ -59,16 +56,12 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleSession.class);\n \n-    private final String version;\n-\n     private final SyncopeTO syncopeTO;\n \n     private final List<String> domains;\n \n     private String domain;\n \n-    private final SyncopeClientFactoryBean clientFactory;\n-\n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n \n     private SyncopeClient client;\n@@ -90,17 +83,10 @@ public static SyncopeConsoleSession get() {\n     public SyncopeConsoleSession(final Request request) {\n         super(request);\n \n-        ApplicationContext ctx = WebApplicationContextUtils.\n-                getWebApplicationContext(WebApplication.get().getServletContext());\n-\n-        clientFactory = ctx.getBean(SyncopeClientFactoryBean.class).\n-                setContentType(SyncopeClientFactoryBean.ContentType.JSON);\n-        String anonymousUser = ctx.getBean(\"anonymousUser\", String.class);\n-        String anonymousKey = ctx.getBean(\"anonymousKey\", String.class);\n+        SyncopeClient anonymousClient = SyncopeConsoleApplication.get().getClientFactory().create(\n+                SyncopeConsoleApplication.get().getAnonymousUser(),\n+                SyncopeConsoleApplication.get().getAnonymousKey());\n \n-        version = ctx.getBean(\"version\", String.class);\n-\n-        SyncopeClient anonymousClient = clientFactory.create(anonymousUser, anonymousKey);\n         syncopeTO = anonymousClient.getService(SyncopeService.class).info();\n         domains = new ArrayList<>();\n         domains.add(SyncopeConstants.MASTER_DOMAIN);\n@@ -114,10 +100,6 @@ public String transform(final DomainTO domain) {\n                 }, domains);\n     }\n \n-    public String getVersion() {\n-        return version;\n-    }\n-\n     public SyncopeTO getSyncopeTO() {\n         return syncopeTO;\n     }\n@@ -139,7 +121,8 @@ public boolean authenticate(final String username, final String password) {\n         boolean authenticated = false;\n \n         try {\n-            client = clientFactory.setDomain(getDomain()).create(username, password);\n+            client = SyncopeConsoleApplication.get().getClientFactory().\n+                    setDomain(getDomain()).create(username, password);\n \n             Pair<Map<String, Set<String>>, UserTO> self = client.self();\n             auth = self.getKey();\n@@ -201,12 +184,15 @@ public <T> T getService(final String etag, final Class<T> serviceClass) {\n     public <T> T getService(final MediaType mediaType, final Class<T> serviceClass) {\n         T service;\n \n-        synchronized (clientFactory) {\n-            SyncopeClientFactoryBean.ContentType preType = clientFactory.getContentType();\n+        synchronized (SyncopeConsoleApplication.get().getClientFactory()) {\n+            SyncopeClientFactoryBean.ContentType preType =\n+                    SyncopeConsoleApplication.get().getClientFactory().getContentType();\n \n-            clientFactory.setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));\n-            service = clientFactory.create(username, password).getService(serviceClass);\n-            clientFactory.setContentType(preType);\n+            SyncopeConsoleApplication.get().getClientFactory().\n+                    setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));\n+            service = SyncopeConsoleApplication.get().getClientFactory().\n+                    create(username, password).getService(serviceClass);\n+            SyncopeConsoleApplication.get().getClientFactory().setContentType(preType);\n         }\n \n         return service;\n@@ -218,12 +204,7 @@ public <T> void resetClient(final Class<T> service) {\n     }\n \n     public DateFormat getDateFormat() {\n-        final Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n-\n+        Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n         return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n     }\n-\n-    public MediaType getMediaType() {\n-        return clientFactory.getContentType().getMediaType();\n-    }\n }"},{"sha":"e88fcb3e1980ec5102a8b968859c0fa3599f1afc","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtils.java","status":"modified","additions":31,"deletions":13,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -18,44 +18,62 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n+import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.init.ImplementationClassNamesLoader;\n+import org.apache.syncope.client.console.SyncopeConsoleApplication;\n+import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.init.ConsoleInitializer;\n import org.apache.syncope.client.console.wicket.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.apache.wicket.Component;\n import org.apache.wicket.util.crypt.Base64;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.util.ClassUtils;\n+import org.springframework.util.Assert;\n \n-@org.springframework.stereotype.Component\n-public class PreviewUtils {\n+public final class PreviewUtils {\n \n-    @Autowired\n-    private ImplementationClassNamesLoader implementationClassNamesLoader;\n+    public static PreviewUtils getInstance() {\n+        return new PreviewUtils();\n+    }\n+\n+    private static <T> Constructor<T> getConstructorIfAvailable(final Class<T> clazz, final Class<?>... paramTypes) {\n+        Assert.notNull(clazz, \"Class must not be null\");\n+        try {\n+            return clazz.getConstructor(paramTypes);\n+        } catch (NoSuchMethodException ex) {\n+            return null;\n+        }\n+    }\n+\n+    private final ClassPathScanImplementationLookup classPathScanImplementationLookup;\n+\n+    private PreviewUtils() {\n+        classPathScanImplementationLookup = (ClassPathScanImplementationLookup) SyncopeConsoleApplication.get().\n+                getServletContext().getAttribute(ConsoleInitializer.CLASSPATH_LOOKUP);\n+    }\n \n     public Component getPreviewer(final String mimeType, final String file)\n             throws InstantiationException, IllegalAccessException, InvocationTargetException {\n \n-        final Class<? extends AbstractBinaryPreviewer> previewer = StringUtils.isBlank(file)\n+        Class<? extends AbstractBinaryPreviewer> previewer = StringUtils.isBlank(file)\n                 ? null\n-                : implementationClassNamesLoader.getPreviewerClass(mimeType);\n+                : classPathScanImplementationLookup.getPreviewerClass(mimeType);\n \n         return previewer == null\n                 ? null\n-                : ClassUtils.getConstructorIfAvailable(previewer, String.class, String.class, byte[].class).\n+                : getConstructorIfAvailable(previewer, String.class, String.class, byte[].class).\n                 newInstance(new Object[] { \"previewer\", mimeType, Base64.decodeBase64(file) }).\n                 preview();\n     }\n \n     public Component getPreviewer(final String mimeType, final byte[] file)\n             throws InstantiationException, IllegalAccessException, InvocationTargetException {\n \n-        final Class<? extends AbstractBinaryPreviewer> previewer =\n-                implementationClassNamesLoader.getPreviewerClass(mimeType);\n+        Class<? extends AbstractBinaryPreviewer> previewer = classPathScanImplementationLookup.getPreviewerClass(\n+                mimeType);\n \n         return previewer == null\n                 ? null\n-                : ClassUtils.getConstructorIfAvailable(previewer, String.class, String.class, byte[].class).\n+                : getConstructorIfAvailable(previewer, String.class, String.class, byte[].class).\n                 newInstance(new Object[] { \"previewer\", mimeType, file }).\n                 preview();\n     }"},{"sha":"3c28c048a2022f588cc01b1521d07920295e0dd6","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"renamed","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -26,36 +26,33 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.AbstractExtensionPanel;\n import org.apache.syncope.client.console.annotations.BinaryPreview;\n+import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.wicket.markup.html.form.preview.AbstractBinaryPreviewer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.filter.AssignableTypeFilter;\n-import org.springframework.stereotype.Component;\n import org.springframework.util.ClassUtils;\n \n-@Component\n-public class ImplementationClassNamesLoader implements SyncopeConsoleLoader {\n+public class ClassPathScanImplementationLookup {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ClassPathScanImplementationLookup.class);\n+\n+    private List<Class<? extends BasePage>> pages;\n \n     private List<Class<? extends AbstractBinaryPreviewer>> previewers;\n \n     private List<Class<? extends AbstractExtensionPanel>> extPanels;\n \n-    @Override\n-    public Integer getPriority() {\n-        return 0;\n-    }\n-\n-    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void load() {\n+        pages = new ArrayList<>();\n         previewers = new ArrayList<>();\n         extPanels = new ArrayList<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(BasePage.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractBinaryPreviewer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AbstractExtensionPanel.class));\n \n@@ -65,7 +62,9 @@ public void load() {\n                         bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n                 boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n-                if (AbstractBinaryPreviewer.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                if (BasePage.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    pages.add((Class<? extends BasePage>) clazz);\n+                } else if (AbstractBinaryPreviewer.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     previewers.add((Class<? extends AbstractBinaryPreviewer>) clazz);\n                 } else if (AbstractExtensionPanel.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     extPanels.add((Class<? extends AbstractExtensionPanel>) clazz);\n@@ -74,6 +73,7 @@ public void load() {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n         }\n+        pages = Collections.unmodifiableList(pages);\n         previewers = Collections.unmodifiableList(previewers);\n         extPanels = Collections.unmodifiableList(extPanels);\n \n@@ -94,6 +94,10 @@ public Class<? extends AbstractBinaryPreviewer> getPreviewerClass(final String m\n         return previewer;\n     }\n \n+    public List<Class<? extends BasePage>> getPageClasses() {\n+        return pages;\n+    }\n+\n     public List<Class<? extends AbstractBinaryPreviewer>> getPreviewerClasses() {\n         return previewers;\n     }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ImplementationClassNamesLoader.java"},{"sha":"6f4200203544dfead7260f9c2ebdcd169f8a96d4","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/ConsoleInitializer.java","status":"modified","additions":19,"deletions":33,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FConsoleInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FConsoleInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FConsoleInitializer.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -18,54 +18,40 @@\n  */\n package org.apache.syncope.client.console.init;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.aop.support.AopUtils;\n-import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.BeanFactoryAware;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Take care of all initializations needed by Syncope Console to run up and safe.\n  */\n-@Component\n-public class ConsoleInitializer implements InitializingBean, BeanFactoryAware {\n+@WebListener\n+public class ConsoleInitializer implements ServletContextListener {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConsoleInitializer.class);\n \n-    private DefaultListableBeanFactory beanFactory;\n+    public static final String CLASSPATH_LOOKUP = \"CLASSPATH_LOOKUP\";\n \n-    @Override\n-    public void setBeanFactory(final BeanFactory beanFactory) {\n-        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n-    }\n+    public static final String MIMETYPES_LOADER = \"MIMETYPES_LOADER\";\n \n     @Override\n-    public void afterPropertiesSet() {\n-        Map<String, SyncopeConsoleLoader> loaderMap = beanFactory.getBeansOfType(SyncopeConsoleLoader.class);\n-\n-        List<SyncopeConsoleLoader> loaders = new ArrayList<>(loaderMap.values());\n-        Collections.sort(loaders, new Comparator<SyncopeConsoleLoader>() {\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        ClassPathScanImplementationLookup lookup = new ClassPathScanImplementationLookup();\n+        lookup.load();\n+        sce.getServletContext().setAttribute(CLASSPATH_LOOKUP, lookup);\n \n-            @Override\n-            public int compare(final SyncopeConsoleLoader o1, final SyncopeConsoleLoader o2) {\n-                return o1.getPriority().compareTo(o2.getPriority());\n-            }\n-        });\n+        MIMETypesLoader mimeTypes = new MIMETypesLoader();\n+        mimeTypes.load();\n+        sce.getServletContext().setAttribute(MIMETYPES_LOADER, mimeTypes);\n \n-        LOG.debug(\"Starting initialization...\");\n-        for (SyncopeConsoleLoader loader : loaders) {\n-            LOG.debug(\"Invoking {} with priority {}\", AopUtils.getTargetClass(loader).getName(), loader.getPriority());\n-            loader.load();\n-        }\n         LOG.debug(\"Initialization completed\");\n     }\n \n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+        // nothing to do\n+    }\n+\n }"},{"sha":"62dcff33c8e7bd91fb0c1b4664e41edc18a5f86c","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/MIMETypesLoader.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -27,26 +27,15 @@\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class MIMETypesLoader implements SyncopeConsoleLoader {\n+public class MIMETypesLoader {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(MIMETypesLoader.class);\n \n     private List<String> mimeTypes;\n \n-    @Override\n-    public Integer getPriority() {\n-        return 10;\n-    }\n-\n-    @Override\n     public void load() {\n-        final Set<String> mediaTypes = new HashSet<>();\n+        Set<String> mediaTypes = new HashSet<>();\n         this.mimeTypes = new ArrayList<>();\n         try {\n             final String mimeTypesFile = IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes\"));"},{"sha":"7c4d3d4018b3c062f5f6d51971f06de69f6a370a","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/SyncopeConsoleLoader.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07b519bd86abc42ae4eea174121a3b3476d309d6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSyncopeConsoleLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07b519bd86abc42ae4eea174121a3b3476d309d6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSyncopeConsoleLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSyncopeConsoleLoader.java?ref=07b519bd86abc42ae4eea174121a3b3476d309d6","patch":"@@ -1,35 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.init;\n-\n-/**\n- * Marker interface for Syncope console initialization.\n- */\n-public interface SyncopeConsoleLoader {\n-\n-    /**\n-     * @return the priority that the implementing class has in the initialization process.\n-     */\n-    Integer getPriority();\n-\n-    /**\n-     * Perform initialization operations.\n-     */\n-    void load();\n-}"},{"sha":"c4096afa402fc86348bc48744d2e58e896a3c285","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractBasePage.java","status":"modified","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -19,24 +19,13 @@\n package org.apache.syncope.client.console.pages;\n \n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.init.MIMETypesLoader;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n-import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n-import org.apache.syncope.client.console.rest.ConnectorRestClient;\n-import org.apache.syncope.client.console.rest.ReportRestClient;\n-import org.apache.syncope.client.console.rest.ResourceRestClient;\n-import org.apache.syncope.client.console.rest.GroupRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.client.console.rest.TaskRestClient;\n-import org.apache.syncope.client.console.rest.UserRestClient;\n-import org.apache.syncope.client.console.rest.UserSelfRestClient;\n import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n import org.apache.wicket.markup.head.HeaderItem;\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.head.PriorityHeaderItem;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -56,36 +45,6 @@ public class AbstractBasePage extends WebPage {\n \n     protected final HeaderItem meta = new MetaHeaderItem(\"X-UA-Compatible\", \"IE=edge\");\n \n-    @SpringBean\n-    protected UserRestClient userRestClient;\n-\n-    @SpringBean\n-    protected UserSelfRestClient userSelfRestClient;\n-\n-    @SpringBean\n-    protected GroupRestClient groupRestClient;\n-\n-    @SpringBean\n-    protected TaskRestClient taskRestClient;\n-\n-    @SpringBean\n-    protected SchemaRestClient schemaRestClient;\n-\n-    @SpringBean\n-    protected ResourceRestClient resourceRestClient;\n-\n-    @SpringBean\n-    protected ConnectorRestClient connectorRestClient;\n-\n-    @SpringBean\n-    protected ReportRestClient reportRestClient;\n-\n-    @SpringBean\n-    protected ConfigurationRestClient confRestClient;\n-\n-    @SpringBean\n-    protected MIMETypesLoader mimeTypesInitializer;\n-\n     protected NotificationPanel feedbackPanel;\n \n     /**"},{"sha":"1ea44d53702a7f98343430008d4a5730da41e9a7","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.pages;\n \n+import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n@@ -37,14 +38,12 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class BasePage extends AbstractBasePage implements IAjaxIndicatorAware {\n \n     private static final long serialVersionUID = 1571997737305598502L;\n \n-    @SpringBean\n-    private UserWorkflowRestClient userWorkflowRestClient;\n+    private final UserWorkflowRestClient userWorkflowRestClient = new UserWorkflowRestClient();\n \n     public BasePage() {\n         this(null);\n@@ -62,7 +61,7 @@ public BasePage(final PageParameters parameters) {\n         super(parameters);\n \n         // header, footer\n-        add(new Label(\"version\", SyncopeConsoleSession.get().getVersion()));\n+        add(new Label(\"version\", SyncopeConsoleApplication.get().getVersion()));\n         add(new Label(\"username\", SyncopeConsoleSession.get().getSelfTO().getUsername()));\n \n         final WebMarkupContainer todosContainer = new WebMarkupContainer(\"todosContainer\");"},{"sha":"7be2525ab988219b109c6810ab8f0b78a23db10c","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -42,7 +42,6 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n /**\n  * Modal window with Display attributes form.\n@@ -59,8 +58,7 @@\n      */\n     private static final int MAX_SELECTIONS = 9;\n \n-    @SpringBean\n-    private PreferenceManager prefMan;\n+    private final PreferenceManager prefMan = new PreferenceManager();\n \n     private final List<String> selectedDetails;\n "},{"sha":"754dacd50541054e8d963e16b723534fd0e163d2","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -40,15 +40,11 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class Login extends WebPage {\n \n     private static final long serialVersionUID = 5889157642852559004L;\n \n-    @SpringBean(name = \"anonymousUser\")\n-    private String anonymousUser;\n-\n     private final NotificationPanel feedbackPanel;\n \n     private final StatelessForm<Void> form;\n@@ -93,7 +89,7 @@ public Login(final PageParameters parameters) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                if (anonymousUser.equals(usernameField.getRawInput())) {\n+                if (SyncopeConsoleApplication.get().getAnonymousUser().equals(usernameField.getRawInput())) {\n                     throw new AccessControlException(\"Illegal username\");\n                 }\n "},{"sha":"51a3f6eac1a7a85b66564a6179b8850af3be872f","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -33,7 +33,6 @@\n import org.apache.wicket.markup.html.form.validation.EqualPasswordInputValidator;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -43,8 +42,7 @@ public class MustChangePassword extends WebPage {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MustChangePassword.class);\n \n-    @SpringBean\n-    private UserSelfRestClient userSelfRestClient;\n+    private final UserSelfRestClient userSelfRestClient = new UserSelfRestClient();\n \n     private final NotificationPanel feedbackPanel;\n "},{"sha":"847bd611ecf1ed4ad792119403fec930b52cdc65","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ProvisioningModalPage.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -30,6 +30,9 @@\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.console.panels.ActionDataTablePanel;\n+import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -59,6 +62,12 @@\n \n     private static final int ROWS_PER_PAGE = 10;\n \n+    private final UserRestClient userRestClient = new UserRestClient();\n+\n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n+\n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n     private final ResourceTO resourceTO;\n \n     private final AnyTypeKind anyTypeKind;"},{"sha":"0767b33d67205b61185c8190061ddbdbd7c54be6","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -42,14 +42,12 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class Realms extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    @SpringBean\n-    private RealmRestClient realmRestClient;\n+    private final RealmRestClient realmRestClient = new RealmRestClient();\n \n     private final RealmSidebarPanel realmSidebarPanel;\n "},{"sha":"998ac60cda9c56a886f94d7708ab2ee8dcb71d49","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ResultStatusModal.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModal.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.panels.FailureMessageModal;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -107,18 +108,19 @@ public ResultStatusModal.Builder<T> mode(final Mode mode) {\n         }\n \n         public ResultStatusModal<T> build() {\n-            return new ResultStatusModal<T>(modal, pageRef, this);\n+            return new ResultStatusModal<>(modal, pageRef, this);\n         }\n     }\n \n     private ResultStatusModal(\n             final BaseModal<T> modal,\n             final PageReference pageRef,\n             final Builder<T> builder) {\n+\n         super(modal, pageRef);\n \n         this.subject = builder.subject;\n-        statusUtils = new StatusUtils(this.userRestClient);\n+        statusUtils = new StatusUtils(new UserRestClient());\n         if (builder.mode == null) {\n             this.mode = Mode.ADMIN;\n         } else {"},{"sha":"7dbe73e46530e005322435156ff95aa6bc7a77c3","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/StatusModalPage.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -31,6 +31,9 @@\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.console.panels.ActionDataTablePanel;\n+import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -65,6 +68,12 @@\n \n     private static final long serialVersionUID = -9148734710505211261L;\n \n+    private final UserRestClient userRestClient = new UserRestClient();\n+\n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n+\n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n     private final AnyTO anyTO;\n \n     private int rowsPerPage = 10;\n@@ -207,7 +216,7 @@ public boolean isElementEnabled(final StatusBean element) {\n         confirm = new PasswordTextField(\"confirm\", new Model<String>());\n         pwdMgtForm.add(confirm.setRequired(false).setEnabled(false));\n \n-        changepwd = new AjaxCheckBoxPanel(\"changepwd\", \"changepwd\", new Model<Boolean>(false));\n+        changepwd = new AjaxCheckBoxPanel(\"changepwd\", \"changepwd\", new Model<>(false));\n         pwdMgtForm.add(changepwd.setModelObject(false));\n         pwdMgtForm.add(new Label(\"changePwdLabel\", new ResourceModel(\"changePwdLabel\", \"Password propagation\")));\n \n@@ -494,7 +503,7 @@ public List<StatusBean> getStatusBeans() {\n \n             final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(anyTO);\n \n-            final List<StatusBean> statusBeans = new ArrayList<StatusBean>(connObjects.size() + 1);\n+            final List<StatusBean> statusBeans = new ArrayList<>(connObjects.size() + 1);\n \n             for (ConnObjectWrapper entry : connObjects) {\n                 final StatusBean statusBean = statusUtils.getStatusBean(anyTO,\n@@ -609,15 +618,15 @@ private void loadBulkActionResultPage(\n             final AjaxRequestTarget target,\n             final Collection<StatusBean> selection,\n             final BulkActionResult bulkActionResult) {\n-        final List<String> resources = new ArrayList<String>(selection.size());\n+        final List<String> resources = new ArrayList<>(selection.size());\n         for (StatusBean statusBean : selection) {\n             resources.add(statusBean.getResourceName());\n         }\n \n         final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(Collections.singletonList(anyTO),\n                 resources);\n \n-        final List<StatusBean> statusBeans = new ArrayList<StatusBean>(connObjects.size());\n+        final List<StatusBean> statusBeans = new ArrayList<>(connObjects.size());\n \n         for (ConnObjectWrapper entry : connObjects) {\n             final StatusBean statusBean = statusUtils.getStatusBean(anyTO,\n@@ -628,7 +637,7 @@ private void loadBulkActionResultPage(\n             statusBeans.add(statusBean);\n         }\n \n-        target.add(modal.setContent(new BulkActionResultModalPage<StatusBean, String>(\n+        target.add(modal.setContent(new BulkActionResultModalPage<>(\n                 modal,\n                 pageRef,\n                 statusBeans,"},{"sha":"3a0ef0b54f1d3f6bfccb7a348479678aca5d7c0e","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Workflow.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWorkflow.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.pages;\n \n import java.io.File;\n+import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.link.VeilPopupSettings;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -27,19 +28,15 @@\n import org.apache.wicket.markup.html.image.Image;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.request.resource.DynamicImageResource;\n import org.apache.wicket.request.resource.IResource;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n \n public class Workflow extends BasePage {\n \n     private static final long serialVersionUID = -8781434495150074529L;\n \n-    @SpringBean\n-    private WorkflowRestClient wfRestClient;\n+    private final WorkflowRestClient wfRestClient = new WorkflowRestClient();\n \n     public Workflow(final PageParameters parameters) {\n         super(parameters);\n@@ -65,9 +62,7 @@ public Workflow(final PageParameters parameters) {\n         // Check if Activiti Modeler directory is found\n         boolean activitiModelerEnabled = false;\n         try {\n-            String activitiModelerDirectory = WebApplicationContextUtils.getWebApplicationContext(\n-                    WebApplication.get().getServletContext()).getBean(\"activitiModelerDirectory\", String.class);\n-            File baseDir = new File(activitiModelerDirectory);\n+            File baseDir = new File(SyncopeConsoleApplication.get().getActivitiModelerDirectory());\n             activitiModelerEnabled = baseDir.exists() && baseDir.canRead() && baseDir.isDirectory();\n         } catch (Exception e) {\n             LOG.error(\"Could not check for Activiti Modeler directory\", e);"},{"sha":"00d2c7f2310cf8cb46d49a083257eef66bed57db","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/XMLEditorPopupPage.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -33,15 +33,13 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.TextArea;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.util.io.IOUtils;\n \n public class XMLEditorPopupPage extends BasePopupPage {\n \n     private static final long serialVersionUID = 5816041644635271734L;\n \n-    @SpringBean\n-    private WorkflowRestClient wfRestClient;\n+    private final WorkflowRestClient wfRestClient = new WorkflowRestClient();\n \n     public XMLEditorPopupPage() {\n         Form<?> wfForm = new Form<>(\"workflowDefForm\");"},{"sha":"2c244b2c2f4bc96543ef93ab8fb1c7d4375f1545","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractModalPanel.java","status":"modified","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractModalPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -18,16 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import org.apache.syncope.client.console.init.MIMETypesLoader;\n-import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n-import org.apache.syncope.client.console.rest.ConnectorRestClient;\n-import org.apache.syncope.client.console.rest.ReportRestClient;\n-import org.apache.syncope.client.console.rest.ResourceRestClient;\n-import org.apache.syncope.client.console.rest.GroupRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.client.console.rest.TaskRestClient;\n-import org.apache.syncope.client.console.rest.UserRestClient;\n-import org.apache.syncope.client.console.rest.UserSelfRestClient;\n import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.wicket.PageReference;\n@@ -37,7 +27,6 @@\n import org.apache.wicket.markup.head.PriorityHeaderItem;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -61,36 +50,6 @@ public class AbstractModalPanel extends Panel {\n \n     protected final HeaderItem meta = new MetaHeaderItem(\"X-UA-Compatible\", \"IE=edge\");\n \n-    @SpringBean\n-    protected UserRestClient userRestClient;\n-\n-    @SpringBean\n-    protected UserSelfRestClient userSelfRestClient;\n-\n-    @SpringBean\n-    protected GroupRestClient groupRestClient;\n-\n-    @SpringBean\n-    protected TaskRestClient taskRestClient;\n-\n-    @SpringBean\n-    protected SchemaRestClient schemaRestClient;\n-\n-    @SpringBean\n-    protected ResourceRestClient resourceRestClient;\n-\n-    @SpringBean\n-    protected ConnectorRestClient connectorRestClient;\n-\n-    @SpringBean\n-    protected ReportRestClient reportRestClient;\n-\n-    @SpringBean\n-    protected ConfigurationRestClient confRestClient;\n-\n-    @SpringBean\n-    protected MIMETypesLoader mimeTypesInitializer;\n-\n     public AbstractModalPanel(final BaseModal<?> modal, final PageReference pageRef) {\n         super(BaseModal.getContentId());\n         this.pageRef = pageRef;"},{"sha":"68bafbed34669d2116be0aaa2ffe559f5fc81add","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchResultPanel.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -41,24 +41,19 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public abstract class AbstractSearchResultPanel<T extends AnyTO> extends Panel implements IEventSource {\n \n     private static final long serialVersionUID = -9170191461250434024L;\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchResultPanel.class);\n \n     /**\n      * Application preferences.\n      */\n-    @SpringBean\n-    protected PreferenceManager prefMan;\n+    protected PreferenceManager prefMan = new PreferenceManager();\n \n     protected final AbstractAnyRestClient restClient;\n "},{"sha":"eacdb4fd04861f9eaa3a9ad77bd62104d72f860b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnySearchResultPanel.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -49,15 +49,13 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.springframework.util.ReflectionUtils;\n \n public class AnySearchResultPanel<T extends AnyTO> extends AbstractSearchResultPanel<T> {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    @SpringBean\n-    protected SchemaRestClient schemaRestClient;\n+    protected final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n     protected final List<String> schemaNames;\n \n@@ -70,15 +68,16 @@\n     public AnySearchResultPanel(final String type, final String parentId, final boolean filtered,\n             final String fiql, final PageReference callerRef, final AbstractAnyRestClient restClient,\n             final List<AnyTypeClassTO> anyTypeClassTOs, final String realm) {\n+\n         super(parentId, filtered, fiql, callerRef, restClient, realm, type);\n         //setCustomMarkupId(markupId);\n         add(new Label(\"name\", type));\n \n-        this.schemaNames = new ArrayList<String>();\n+        this.schemaNames = new ArrayList<>();\n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n             this.schemaNames.addAll(anyTypeClassTO.getPlainSchemas());\n         }\n-        this.dSchemaNames = new ArrayList<String>();\n+        this.dSchemaNames = new ArrayList<>();\n         for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n             this.dSchemaNames.addAll(anyTypeClassTO.getDerSchemas());\n         }"},{"sha":"2d981f61f4db117bf9c400510992b2c853e55ccf","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -28,6 +28,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.AbstractBasePage;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.topology.TopologyNode;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n@@ -48,6 +49,8 @@ public class ConnectorModal extends AbstractResourceModal {\n \n     private static final long serialVersionUID = -2025535531121434050L;\n \n+    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n+\n     private final List<ConnBundleTO> bundles;\n \n     public ConnectorModal("},{"sha":"977888184b49b4bd4c55b5248a59c1615468d07a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupModalPanel.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -21,6 +21,7 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.wicket.PageReference;\n@@ -39,6 +40,8 @@ public class GroupModalPanel extends AbstractModalPanel {\n \n     private static final long serialVersionUID = -1732493223434085205L;\n \n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n+\n     protected final Mode mode;\n \n     protected final boolean createFlag;\n@@ -49,6 +52,7 @@ public class GroupModalPanel extends AbstractModalPanel {\n \n     public GroupModalPanel(\n             final BaseModal<?> modal, final PageReference pageRef, final GroupTO groupTO) {\n+\n         this(modal, pageRef, groupTO, Mode.ADMIN);\n     }\n "},{"sha":"bea0610d430f3bb5c8931549872848ebbaaf6970","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -35,7 +35,6 @@\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -49,17 +48,13 @@ public class Realm extends Panel {\n \n     private final List<AnyTypeTO> anyTypeTOs;\n \n-    @SpringBean\n-    private AnyTypeRestClient anyTypeRestClient;\n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n \n-    @SpringBean\n-    private UserRestClient userRestClient;\n+    private final UserRestClient userRestClient = new UserRestClient();\n \n-    @SpringBean\n-    private GroupRestClient groupRestClient;\n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n \n-    @SpringBean\n-    private AnyObjectRestClient anyObjectRestClient;\n+    private final AnyObjectRestClient anyObjectRestClient = new AnyObjectRestClient();\n \n     @SuppressWarnings({ \"unchecked\", \"unchecked\" })\n     public Realm(final String id, final RealmTO realmTO, final PageReference pageReference) {\n@@ -120,7 +115,7 @@ private Panel getAnyPanel(final String id, final PageReference pageReference, fi\n                                 anyTypeTO.getClasses()), realmTO.getFullPath());\n                 break;\n             case ANY_OBJECT:\n-                panel = new AnySearchResultPanel(anyTypeTO.getKey(), id,\n+                panel = new AnySearchResultPanel<>(anyTypeTO.getKey(), id,\n                         false, null, pageReference, anyObjectRestClient, anyTypeRestClient.getAnyTypeClass(\n                                 anyTypeTO.getClasses()), realmTO.getFullPath());\n                 break;"},{"sha":"51c66e10bf263d180127809f2033c0798d139ea0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmModalPanel.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -31,18 +31,16 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class RealmModalPanel extends AbstractModalPanel {\n \n     private static final long serialVersionUID = -4285220460543213901L;\n \n-    protected RealmTO realmTO;\n+    private final RealmRestClient realmRestClient = new RealmRestClient();\n \n-    private boolean newRealm = false;\n+    private RealmTO realmTO;\n \n-    @SpringBean\n-    private RealmRestClient realmRestClient;\n+    private boolean newRealm = false;\n \n     private final String parentPath;\n \n@@ -52,6 +50,7 @@ public RealmModalPanel(\n             final RealmTO realmTO,\n             final String parentPath,\n             final String entitlement) {\n+\n         this(modal, pageRef, realmTO, parentPath, entitlement, false);\n     }\n "},{"sha":"eb899c91af6c85359edbd8e26ffe7d2d4dbb8d45","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmSidebarPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmSidebarPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -44,14 +44,12 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.markup.repeater.RepeatingView;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class RealmSidebarPanel extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    @SpringBean\n-    private RealmRestClient realmRestClient;\n+    private final RealmRestClient realmRestClient = new RealmRestClient();\n \n     private final WebMarkupContainer menu;\n "},{"sha":"dbb3f37b304883d33bab9575c87f94351c6562ef","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceConnConfPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -26,14 +26,12 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public abstract class ResourceConnConfPanel extends AbstractConnectorConfPanel<ResourceTO> {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    @SpringBean\n-    private ConnectorRestClient restClient;\n+    private ConnectorRestClient restClient = new ConnectorRestClient();\n \n     private final boolean createFlag;\n "},{"sha":"330a4c2fc1c1ec64d1a286e6bc43a0cb0a6a384a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -60,7 +60,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n /**\n  * Resource mapping panel.\n@@ -87,14 +86,12 @@ public class ResourceMappingPanel extends Panel {\n     /**\n      * Schema rest client.\n      */\n-    @SpringBean\n-    private SchemaRestClient schemaRestClient;\n+    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n     /**\n      * ConnInstance rest client.\n      */\n-    @SpringBean\n-    private ConnectorRestClient connRestClient;\n+    private final ConnectorRestClient connRestClient = new ConnectorRestClient();\n \n     /**\n      * Resource schema name."},{"sha":"74b9ed2f0941043dadd9d7a5e13ff1ea2eea6ec0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -28,6 +28,8 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.AbstractBasePage;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.topology.TopologyNode;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n@@ -54,6 +56,10 @@ public class ResourceModal extends AbstractResourceModal {\n \n     private static final long serialVersionUID = 1734415311027284221L;\n \n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n+    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n+\n     private final boolean createFlag;\n \n     public ResourceModal(\n@@ -95,7 +101,7 @@ public Panel getPanel(final String panelId) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemActionEvent<ProvisionTO>(provisionTO, 2, target));\n+                        new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target));\n             }\n         }, ActionLink.ActionType.MAPPING, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n \n@@ -104,7 +110,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemActionEvent<ProvisionTO>(provisionTO, 3, target));\n+                        new AjaxWizard.NewItemActionEvent<>(provisionTO, 3, target));\n             }\n         }, ActionLink.ActionType.ACCOUNT_LINK, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n \n@@ -114,7 +120,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n             public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                 provisionTO.setSyncToken(null);\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemFinishEvent<ProvisionTO>(provisionTO, target));\n+                        new AjaxWizard.NewItemFinishEvent<>(provisionTO, target));\n             }\n         }, ActionLink.ActionType.RESET_TIME, Entitlement.RESOURCE_UPDATE).addAction(new ActionLink<ProvisionTO>() {\n \n@@ -123,7 +129,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                 send(pageRef.getPage(), Broadcast.DEPTH,\n-                        new AjaxWizard.NewItemActionEvent<ProvisionTO>(SerializationUtils.clone(provisionTO), target));\n+                        new AjaxWizard.NewItemActionEvent<>(SerializationUtils.clone(provisionTO), target));\n             }\n         }, ActionLink.ActionType.CLONE, Entitlement.RESOURCE_CREATE).addAction(new ActionLink<ProvisionTO>() {\n "},{"sha":"37cf8aca4551f43406a154c7001e73c7578e0441","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceSecurityPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -34,14 +34,12 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class ResourceSecurityPanel extends Panel {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    @SpringBean\n-    private PolicyRestClient policyRestClient;\n+    private final PolicyRestClient policyRestClient = new PolicyRestClient();\n \n     private IModel<Map<Long, String>> passwordPolicies = null;\n "},{"sha":"91e2548f658eb0b1f9b3b9cb9fff3d8cc440067b","filename":"client/console/src/main/java/org/apache/syncope/client/console/resources/WorkflowDefGETResource.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -21,10 +21,8 @@\n import java.io.IOException;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n-import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.util.io.IOUtils;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n \n /**\n  * Mirror REST resource for obtaining user workflow definition in JSON (used by Activiti Modeler).\n@@ -45,9 +43,8 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n             @Override\n             public void writeData(final Attributes attributes) throws IOException {\n-                IOUtils.copy(WebApplicationContextUtils.getWebApplicationContext(\n-                        WebApplication.get().getServletContext()).getBean(WorkflowRestClient.class).\n-                        getDefinition(MediaType.APPLICATION_JSON_TYPE),\n+                IOUtils.copy(\n+                        new WorkflowRestClient().getDefinition(MediaType.APPLICATION_JSON_TYPE),\n                         attributes.getResponse().getOutputStream());\n             }\n         });"},{"sha":"78004626d7404502ee35fd19d32feccb41d5a89b","filename":"client/console/src/main/java/org/apache/syncope/client/console/resources/WorkflowDefPUTResource.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -23,12 +23,10 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.cxf.common.util.UrlUtils;\n import org.apache.syncope.client.console.rest.WorkflowRestClient;\n-import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n \n /**\n  * Mirror REST resource for putting user workflow definition in JSON (used by Activiti Modeler).\n@@ -61,9 +59,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             LOG.error(\"Could not extract workflow definition from request\", e);\n         }\n \n-        WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext()).\n-                getBean(WorkflowRestClient.class).\n-                updateDefinition(MediaType.APPLICATION_JSON_TYPE, definition);\n+        new WorkflowRestClient().updateDefinition(MediaType.APPLICATION_JSON_TYPE, definition);\n \n         ResourceResponse response = new ResourceResponse();\n         response.setStatusCode(204);"},{"sha":"1271e35d4ce3c040d8c92fa69cb3e47917333964","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.net.URI;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n@@ -66,7 +67,7 @@ protected String toOrderBy(final SortParam<String> sort) {\n \n     protected <E extends JAXRSService, T> T getObject(final E service, final URI location, final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(service));\n-        webClient.accept(SyncopeConsoleSession.get().getMediaType()).to(location.toASCIIString(), false);\n+        webClient.accept(SyncopeConsoleApplication.get().getMediaType()).to(location.toASCIIString(), false);\n         return webClient.get(resultClass);\n     }\n }"},{"sha":"faf91eacdec7f50cf5a11c908f142488224b8108","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -33,6 +33,8 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.AbstractResourceModal.CreateEvent;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n@@ -63,6 +65,10 @@ public class Topology extends BasePage {\n \n     public static final String ROOT_NAME = \"Syncope\";\n \n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n+    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n+\n     private final int origX = 3100;\n \n     private final int origY = 2800;\n@@ -84,8 +90,8 @@ protected List<ResourceTO> load() {\n         }\n     };\n \n-    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel\n-            = new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n+    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel =\n+            new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n \n                 private static final long serialVersionUID = 5275935387613157432L;\n \n@@ -108,8 +114,8 @@ protected Map<String, List<ConnInstanceTO>> load() {\n                 }\n             };\n \n-    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel\n-            = new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n+    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel =\n+            new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n \n                 private static final long serialVersionUID = 5275935387613157433L;\n "},{"sha":"0b75ec0bee755625b6fcaf02562078cde2a6783d","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -49,29 +49,27 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class TopologyNodePanel extends Panel implements IAjaxIndicatorAware {\n \n     private static final long serialVersionUID = -8775095410207013913L;\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(TopologyNodePanel.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(TopologyNodePanel.class);\n \n-    private final BaseModal<Serializable> modal;\n+    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n \n-    @SpringBean\n-    private ResourceRestClient resourceRestClient;\n+    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n \n-    @SpringBean\n-    private ConnectorRestClient connectorRestClient;\n+    private final BaseModal<Serializable> modal;\n \n     public TopologyNodePanel(\n             final String id,\n             final TopologyNode node,\n             final BaseModal<Serializable> modal,\n             final PageReference pageRef) {\n+\n         super(id);\n \n         final String resourceName = node.getDisplayName().length() > 20\n@@ -141,7 +139,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n \n                 target.add(modal.setContent(new ConnectorModal(modal, pageRef, model)));\n \n-                modal.header(new Model<String>(MessageFormat.format(getString(\"connector.new\"), node.getKey())));\n+                modal.header(new Model<>(MessageFormat.format(getString(\"connector.new\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n                         authorize(modal.addSumbitButton(), ENABLE, Entitlement.CONNECTOR_CREATE);\n@@ -196,7 +194,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n \n                 target.add(modal.setContent(new ResourceModal(modal, pageRef, model, true)));\n \n-                modal.header(new Model<String>(MessageFormat.format(getString(\"resource.new\"), node.getKey())));\n+                modal.header(new Model<>(MessageFormat.format(getString(\"resource.new\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n                         authorize(modal.addSumbitButton(), ENABLE, Entitlement.RESOURCE_CREATE);\n@@ -221,7 +219,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n \n                 target.add(modal.setContent(new ConnectorModal(modal, pageRef, model)));\n \n-                modal.header(new Model<String>(MessageFormat.format(getString(\"connector.edit\"), node.getKey())));\n+                modal.header(new Model<>(MessageFormat.format(getString(\"connector.edit\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n                         authorize(modal.addSumbitButton(), ENABLE, Entitlement.CONNECTOR_UPDATE);\n@@ -276,7 +274,7 @@ public void onClickInternal(final AjaxRequestTarget target) {\n \n                 target.add(modal.setContent(new ResourceModal(modal, pageRef, model, false)));\n \n-                modal.header(new Model<String>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n+                modal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n \n                 MetaDataRoleAuthorizationStrategy.\n                         authorize(modal.addSumbitButton(), ENABLE, Entitlement.RESOURCE_UPDATE);"},{"sha":"b7a524a0f7634c5600aeba9b4d70b18fa73d41bb","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -44,7 +44,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler;\n import org.apache.wicket.request.resource.ContentDisposition;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.apache.wicket.util.crypt.Base64;\n import org.apache.wicket.util.lang.Bytes;\n \n@@ -62,14 +61,13 @@ public class BinaryFieldPanel extends FieldPanel<String> {\n \n     private final Fragment emptyFragment;\n \n-    @SpringBean\n-    private PreviewUtils previewUtil;\n+    private final PreviewUtils previewUtils = PreviewUtils.getInstance();\n \n     public BinaryFieldPanel(final String id, final String name, final IModel<String> model, final String mimeType) {\n         super(id, model);\n         this.mimeType = mimeType;\n \n-        uploadForm = new StatelessForm<Void>(\"uploadForm\");\n+        uploadForm = new StatelessForm<>(\"uploadForm\");\n         uploadForm.setMultiPart(true);\n         uploadForm.setMaxSize(Bytes.megabytes(4));\n         add(uploadForm);\n@@ -82,8 +80,8 @@ public BinaryFieldPanel(final String id, final String name, final IModel<String>\n         container.add(emptyFragment);\n         uploadForm.add(container);\n \n-        field = new TextField<String>(\"textField\", model);\n-        add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n+        field = new TextField<>(\"textField\", model);\n+        add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));\n \n         uploadForm.add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : \"(\" + mimeType + \")\"));\n \n@@ -128,8 +126,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                         field.setModelObject(uploaded);\n                         target.add(field);\n \n-                        final Component panelPreview = previewUtil.getPreviewer(mimeType, uploadedBytes);\n-\n+                        Component panelPreview = previewUtils.getPreviewer(mimeType, uploadedBytes);\n                         if (panelPreview != null) {\n                             changePreviewer(panelPreview);\n                         }\n@@ -197,7 +194,7 @@ public BinaryFieldPanel clone() {\n     public FieldPanel<String> setNewModel(final IModel<String> model) {\n         field.setModel(model);\n         try {\n-            final Component panelPreview = previewUtil.getPreviewer(mimeType, model.getObject());\n+            Component panelPreview = previewUtils.getPreviewer(mimeType, model.getObject());\n             if (panelPreview != null) {\n                 changePreviewer(panelPreview);\n             }"},{"sha":"85cc6e24b5249e232d33c2198d7128611d3e31fb","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/ConnConfPropertyListView.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -22,6 +22,7 @@\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n import java.io.Serializable;\n import java.util.List;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.AbstractFieldPanel;\n@@ -46,7 +47,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.util.ClassUtils;\n \n public class ConnConfPropertyListView extends ListView<ConnConfProperty> {\n \n@@ -90,8 +90,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n         } else {\n             Class<?> propertySchemaClass;\n             try {\n-                propertySchemaClass = ClassUtils.forName(property.getSchema().getType(), ClassUtils.\n-                        getDefaultClassLoader());\n+                propertySchemaClass = ClassUtils.getClass(property.getSchema().getType());\n                 if (ClassUtils.isPrimitiveOrWrapper(propertySchemaClass)) {\n                     propertySchemaClass = org.apache.commons.lang3.ClassUtils.primitiveToWrapper(propertySchemaClass);\n                 }\n@@ -102,8 +101,8 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n \n             if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n                 @SuppressWarnings(\"unchecked\")\n-                final Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n-                field = new SpinnerFieldPanel<Number>(\n+                Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n+                field = new SpinnerFieldPanel<>(\n                         \"panel\", label.getDefaultModelObjectAsString(), numberClass, new Model<Number>());\n \n                 required = property.getSchema().isRequired();"},{"sha":"7ad9566f1f7ca7e40ad8260badf95211657dedd6","filename":"client/console/src/main/resources/META-INF/web-fragment.xml","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -29,18 +29,6 @@ under the License.\n     <param-name>configuration</param-name>\n     <param-value>deployment</param-value>\n   </context-param>\n-\n-  <context-param>\n-    <param-name>contextConfigLocation</param-name>\n-    <param-value>classpath:consoleContext.xml</param-value>\n-  </context-param>\n-\n-  <listener>\n-    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n-  </listener>\n-  <listener>\n-    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>\n-  </listener>\n     \n   <filter>\n     <filter-name>SyncopeConsole</filter-name>\n@@ -50,8 +38,8 @@ under the License.\n       <param-value>/*</param-value>\n     </init-param>\n     <init-param>\n-      <param-name>applicationFactoryClassName</param-name>\n-      <param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>\n+      <param-name>applicationClassName</param-name>\n+      <param-value>org.apache.syncope.client.console.SyncopeConsoleApplication</param-value>\n     </init-param>\n   </filter>\n     "},{"sha":"eb7ea3927b42b10ab34241959dd5b9dcf1fe8188","filename":"client/console/src/main/resources/console.properties","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -15,8 +15,17 @@\n # specific language governing permissions and limitations\n # under the License.\n console.directory=${conf.directory}\n+\n+version=${syncope.version}\n+site=${project.parent.url}\n+license=${licenseUrl}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n scheme=http\n host=localhost\n port=8080\n rootPath=/syncope/rest/\n+\n activitiModelerDirectory=${activiti-modeler.directory}"},{"sha":"8b7fa160ac7ff0d0651f400c19535d5fe49dcf9d","filename":"client/console/src/main/resources/consoleContext.xml","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07b519bd86abc42ae4eea174121a3b3476d309d6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FconsoleContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07b519bd86abc42ae4eea174121a3b3476d309d6/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FconsoleContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FconsoleContext.xml?ref=07b519bd86abc42ae4eea174121a3b3476d309d6","patch":"@@ -1,71 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\n-                           http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n-\n-  <context:component-scan base-package=\"org.apache.syncope.client.console\"/>\n-\n-  <bean id=\"confDirectoryPropertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-    <property name=\"order\" value=\"1\"/>\n-    <property name=\"location\" value=\"file:${console.directory}/console.properties\"/>\n-    <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n-    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n-  </bean>\n-  <bean id=\"classpathPropertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-    <property name=\"location\" value=\"classpath:console.properties\"/>\n-  </bean>\n-\n-  <bean id=\"version\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${syncope.version}\"/>\n-  </bean>\n-\n-  <bean id=\"site\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${project.parent.url}\"/>\n-  </bean>\n-  \n-  <bean id=\"license\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${licenseUrl}\"/>\n-  </bean>\n-  \n-  <bean id=\"anonymousUser\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${anonymousUser}\"/>\n-  </bean>\n-  <bean id=\"anonymousKey\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${anonymousKey}\"/>\n-  </bean>\n-\n-  <bean id=\"activitiModelerDirectory\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${activitiModelerDirectory}\"/>\n-  </bean>\n-\n-  <bean class=\"org.apache.syncope.client.console.SyncopeConsoleApplication\"/>\n-\n-  <bean class=\"org.apache.syncope.client.console.PreferenceManager\"/>\n-\n-  <bean class=\"org.apache.syncope.client.lib.SyncopeClientFactoryBean\">\n-    <property name=\"address\" value=\"${scheme}://${host}:${port}/${rootPath}\"/>\n-  </bean>\n-\n-</beans>"},{"sha":"6fd9ee5e5f97b0ba0cc3fefe299a61f5507b5dbf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -340,7 +340,6 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n                     } else {\n-\n                         relationship = entityFactory.newEntity(URelationship.class);\n                         relationship.setType(relationshipType);\n                         relationship.setRightEnd(otherEnd);"},{"sha":"27b8f9141a02981c72e3b200d0ee351f6e4aaf2d","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/pages/CamelRouteModalPage.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FCamelRouteModalPage.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -35,14 +35,12 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class CamelRouteModalPage extends AbstractModalPanel {\n \n     private static final long serialVersionUID = -1438441210568592931L;\n \n-    @SpringBean\n-    private CamelRouteRestClient restClient;\n+    private final CamelRouteRestClient restClient = new CamelRouteRestClient();\n \n     public CamelRouteModalPage(\n             final BaseModal<?> modal,\n@@ -54,7 +52,7 @@ public CamelRouteModalPage(\n \n         Form<CamelRouteTO> routeForm = new Form<>(\"routeDefForm\");\n \n-        final TextArea<String> routeDefArea = new TextArea<>(\"content\", new PropertyModel<String>(routeTO, \"content\"));\n+        TextArea<String> routeDefArea = new TextArea<>(\"content\", new PropertyModel<String>(routeTO, \"content\"));\n \n         routeForm.add(routeDefArea);\n         routeForm.setModel(new CompoundPropertyModel<>(routeTO));"},{"sha":"bfcd9121935ab125db0b5d0be5bbb0e48af960c9","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutePanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutePanel.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -43,7 +43,6 @@\n import org.apache.wicket.model.AbstractReadOnlyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n \n @ExtensionPanel(\"Camel routes\")\n public class CamelRoutePanel extends AbstractExtensionPanel {\n@@ -54,8 +53,7 @@ public class CamelRoutePanel extends AbstractExtensionPanel {\n \n     private static final int CAMELROUTE_WIN_WIDTH = 800;\n \n-    @SpringBean\n-    private CamelRouteRestClient restClient;\n+    private CamelRouteRestClient restClient = new CamelRouteRestClient();\n \n     private ModalWindow editCamelRouteWin;\n "},{"sha":"b05bc3dd1433bdb14a3567b34458e7ddcc6debdb","filename":"fit/console-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -496,7 +496,7 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n               <configuration>\n                 <properties>\n                   <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-                    -noverify ${javaagent} -Drebel.spring_plugin=true \n+                    -noverify ${javaagent}\n                     -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n                 </properties>\n               </configuration>"},{"sha":"be99423f65560510c3bc9b7d4e7c6361566cb1c7","filename":"fit/console-reference/src/main/resources/console.properties","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -15,8 +15,17 @@\n # specific language governing permissions and limitations\n # under the License.\n console.directory=${conf.directory}\n+\n+version=${syncope.version}\n+site=${project.parent.url}\n+license=${licenseUrl}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n scheme=http\n host=localhost\n port=9080\n rootPath=/syncope/rest/\n+\n activitiModelerDirectory=${activiti-modeler.directory}"},{"sha":"ea9afa383986ac7633db8bac6b27d06dc0d42571","filename":"pom.xml","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -411,7 +411,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>8.0.26</tomcat.version>\n+    <tomcat.version>8.0.27</tomcat.version>\n \n     <anonymousUser>anonymous</anonymousUser>\n     <!-- static keys, only used for build: generated overlays will override during archetype:generate -->\n@@ -852,17 +852,6 @@ under the License.\n         <artifactId>wicket-datetime</artifactId>\n         <version>${wicket.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.wicket</groupId>\n-        <artifactId>wicket-spring</artifactId>\n-        <version>${wicket.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n       <dependency>\n         <groupId>org.apache.wicket</groupId>\n         <artifactId>wicket-auth-roles</artifactId>"}]}