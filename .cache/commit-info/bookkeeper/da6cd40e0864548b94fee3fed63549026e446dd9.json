{"sha":"da6cd40e0864548b94fee3fed63549026e446dd9","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmRhNmNkNDBlMDg2NDU0OGI5NGZlZTNmZWQ2MzU0OTAyNmU0NDZkZDk=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T03:09:59Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:14:02Z"},"message":"DL-164: Create stream operation should not be submitted by StreamImpl","tree":{"sha":"8e961c6f2253f3f1bf7e20fcceb05c3bad36d1a7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/8e961c6f2253f3f1bf7e20fcceb05c3bad36d1a7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/da6cd40e0864548b94fee3fed63549026e446dd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/da6cd40e0864548b94fee3fed63549026e446dd9","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/da6cd40e0864548b94fee3fed63549026e446dd9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/da6cd40e0864548b94fee3fed63549026e446dd9/comments","author":null,"committer":null,"parents":[{"sha":"d15bc06466e345651f53ef7a7f5a771ac4880446","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d15bc06466e345651f53ef7a7f5a771ac4880446","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d15bc06466e345651f53ef7a7f5a771ac4880446"}],"stats":{"total":41,"additions":28,"deletions":13},"files":[{"sha":"aee41033a1bc472fcae632617c395a5a5d1b91a9","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogReader.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java?ref=da6cd40e0864548b94fee3fed63549026e446dd9","patch":"@@ -28,6 +28,7 @@\n import com.twitter.distributedlog.exceptions.LogNotFoundException;\n import com.twitter.distributedlog.exceptions.ReadCancelledException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n+import com.twitter.distributedlog.util.OrderedScheduler;\n import com.twitter.distributedlog.util.Utils;\n import com.twitter.util.Future;\n import com.twitter.util.FutureEventListener;\n@@ -83,10 +84,11 @@ public LogRecordWithDLSN apply(List<LogRecordWithDLSN> records) {\n                 }\n             };\n \n+    private final String streamName;\n     protected final BKDistributedLogManager bkDistributedLogManager;\n     protected final BKLogReadHandler readHandler;\n     private final AtomicReference<Throwable> lastException = new AtomicReference<Throwable>();\n-    private final ScheduledExecutorService executorService;\n+    private final OrderedScheduler scheduler;\n     private final ConcurrentLinkedQueue<PendingReadRequest> pendingRequests = new ConcurrentLinkedQueue<PendingReadRequest>();\n     private final Object scheduleLock = new Object();\n     private final AtomicLong scheduleCount = new AtomicLong(0);\n@@ -208,13 +210,14 @@ void complete() {\n     }\n \n     BKAsyncLogReader(BKDistributedLogManager bkdlm,\n-                     ScheduledExecutorService executorService,\n+                     OrderedScheduler scheduler,\n                      DLSN startDLSN,\n                      Optional<String> subscriberId,\n                      boolean returnEndOfStreamRecord,\n                      StatsLogger statsLogger) {\n+        this.streamName = bkdlm.getStreamName();\n         this.bkDistributedLogManager = bkdlm;\n-        this.executorService = executorService;\n+        this.scheduler = scheduler;\n         this.readHandler = bkDistributedLogManager.createReadHandler(subscriberId,\n                 this, true);\n         LOG.debug(\"Starting async reader at {}\", startDLSN);\n@@ -251,7 +254,7 @@ private ScheduledFuture<?> scheduleIdleReaderTaskIfNecessary() {\n             // Except when idle reader threshold is less than a second (tests?)\n             period = Math.min(period, idleErrorThresholdMillis / 5);\n \n-            return executorService.scheduleAtFixedRate(new Runnable() {\n+            return scheduler.scheduleAtFixedRate(streamName, new Runnable() {\n                 @Override\n                 public void run() {\n                     PendingReadRequest nextRequest = pendingRequests.peek();\n@@ -371,7 +374,7 @@ private void setLastException(IOException exc) {\n \n     @Override\n     public String getStreamName() {\n-        return bkDistributedLogManager.getStreamName();\n+        return streamName;\n     }\n \n     /**\n@@ -470,7 +473,7 @@ public synchronized void scheduleBackgroundRead() {\n         long prevCount = scheduleCount.getAndIncrement();\n         if (0 == prevCount) {\n             scheduleDelayStopwatch.reset().start();\n-            executorService.submit(this);\n+            scheduler.submit(streamName, this);\n         }\n     }\n \n@@ -659,7 +662,11 @@ public void run() {\n                         scheduleDelayStopwatch.reset().start();\n                         scheduleCount.set(0);\n                         // the request could still wait for more records\n-                        backgroundScheduleTask = executorService.schedule(BACKGROUND_READ_SCHEDULER, remainingWaitTime, nextRequest.deadlineTimeUnit);\n+                        backgroundScheduleTask = scheduler.schedule(\n+                                streamName,\n+                                BACKGROUND_READ_SCHEDULER,\n+                                remainingWaitTime,\n+                                nextRequest.deadlineTimeUnit);\n                         return;\n                     }\n "},{"sha":"40e39308d342d91b53266247aeb1701e30d84ad3","filename":"src/main/java/com/twitter/distributedlog/ReadAheadEntryReader.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FReadAheadEntryReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FReadAheadEntryReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FReadAheadEntryReader.java?ref=da6cd40e0864548b94fee3fed63549026e446dd9","patch":"@@ -54,6 +54,7 @@\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n /**\n@@ -228,9 +229,12 @@ public void run() {\n                 if (null != closePromise) {\n                     return;\n                 }\n+            }\n+            try {\n                 safeRun();\n+            } catch (Throwable cause) {\n+                logger.error(\"Caught unexpected exception : \", cause);\n             }\n-\n         }\n \n         abstract void safeRun();\n@@ -275,6 +279,7 @@ public BoxedUnit apply() {\n     // State of the reader\n     //\n \n+    private final AtomicBoolean started = new AtomicBoolean(false);\n     private boolean isInitialized = false;\n     private boolean readAheadPaused = false;\n     private Promise<Void> closePromise = null;\n@@ -428,6 +433,7 @@ private void orderedSubmit(Runnable runnable) {\n     public void start(final List<LogSegmentMetadata> segmentList) {\n         logger.info(\"Starting the readahead entry reader for {} : segments = {}\",\n                 readHandler.getFullyQualifiedName(), segmentList);\n+        started.set(true);\n         processLogSegments(segmentList);\n     }\n \n@@ -530,7 +536,7 @@ private void notifyStateChangeOnFailure(Throwable cause) {\n \n     void setLastException(IOException cause) {\n         if (!lastException.compareAndSet(null, cause)) {\n-            return;\n+            logger.debug(\"last exception has already been set to \", lastException.get());\n         }\n         // the exception is set and notify the state change\n         notifyStateChangeOnFailure(cause);\n@@ -829,6 +835,7 @@ private void unsafeInitializeLogSegments(List<LogSegmentMetadata> segments) {\n             }\n             skipTruncatedLogSegments = false;\n             if (!isAllowedToPosition(segment, dlsnToStart)) {\n+                logger.error(\"segment {} is not allowed to position at {}\", segment, dlsnToStart);\n                 return;\n             }\n \n@@ -969,6 +976,9 @@ private void unsafeReadNext(SegmentReader reader) {\n \n     @Override\n     public void onSegmentsUpdated(List<LogSegmentMetadata> segments) {\n+        if (!started.get()) {\n+            return;\n+        }\n         logger.info(\"segments is updated with {}\", segments);\n         processLogSegments(segments);\n     }"},{"sha":"03d70bdd06e3244beaf660d69a9f241dc93ca8e6","filename":"src/main/java/com/twitter/distributedlog/tools/DistributedLogTool.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/da6cd40e0864548b94fee3fed63549026e446dd9/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java?ref=da6cd40e0864548b94fee3fed63549026e446dd9","patch":"@@ -188,10 +188,8 @@ protected int runCmd(CommandLine commandLine) throws Exception {\n             try {\n                 return runCmd();\n             } finally {\n-                synchronized (this) {\n-                    if (null != namespace) {\n-                        namespace.close();\n-                    }\n+                if (null != namespace) {\n+                    namespace.close();\n                 }\n             }\n         }"}]}