{"sha":"7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjdhNDgwZDNmOGU1ZWM1YzhjMzU5MmMzMzJjYmNhYjE5YjQwNDNkYWQ=","commit":{"author":{"name":"zhaijack","email":"zhaijia03@gmail.com","date":"2017-07-28T03:11:17Z"},"committer":{"name":"jiazhai","email":"zhaijia@live.com","date":"2017-07-28T03:11:17Z"},"message":"ISSUE #296: Bookie supports ephemeral port\n\nDescriptions of the changes in this PR:\n\n- add a flag to allow/disable using ephemeral ports\n- change the initialization sequence to support ephmeral port\n- added two tests on verifying this behavior\n\nAuthor: zhaijack <zhaijia03@gmail.com>\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <None>\n\nThis closes #297 from zhaijack/issue_296, closes #296","tree":{"sha":"3f41e972f3dcfd63830a0959ba743257448e0a58","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/3f41e972f3dcfd63830a0959ba743257448e0a58"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/comments","author":{"login":"zhaijack","id":26834121,"node_id":"MDQ6VXNlcjI2ODM0MTIx","avatar_url":"https://avatars.githubusercontent.com/u/26834121?v=4","gravatar_id":"","url":"https://api.github.com/users/zhaijack","html_url":"https://github.com/zhaijack","followers_url":"https://api.github.com/users/zhaijack/followers","following_url":"https://api.github.com/users/zhaijack/following{/other_user}","gists_url":"https://api.github.com/users/zhaijack/gists{/gist_id}","starred_url":"https://api.github.com/users/zhaijack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhaijack/subscriptions","organizations_url":"https://api.github.com/users/zhaijack/orgs","repos_url":"https://api.github.com/users/zhaijack/repos","events_url":"https://api.github.com/users/zhaijack/events{/privacy}","received_events_url":"https://api.github.com/users/zhaijack/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"c9cf161d81d3fb8afd0af647e1f3d23f9fb50f04","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c9cf161d81d3fb8afd0af647e1f3d23f9fb50f04","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/c9cf161d81d3fb8afd0af647e1f3d23f9fb50f04"}],"stats":{"total":137,"additions":132,"deletions":5},"files":[{"sha":"17ff7ee3784de89140e36344d2bccff66ae7266a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","patch":"@@ -82,6 +82,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n     protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n     protected final static String ALLOW_LOOPBACK = \"allowLoopback\";\n+    protected final static String ALLOW_EPHEMERAL_PORTS = \"allowEphemeralPorts\";\n \n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n     protected final static String JOURNAL_DIRS = \"journalDirectories\";\n@@ -569,6 +570,31 @@ public ServerConfiguration setAllowLoopback(boolean allow) {\n         return this;\n     }\n \n+    /**\n+     * Is the bookie allowed to use an ephemeral port (port 0) as its server port.\n+     *\n+     * <p>By default, an ephemeral port is not allowed. Using an ephemeral port\n+     * as the service port usually indicates a configuration error. However, in unit\n+     * tests, using ephemeral port will address port conflicts problem and allow\n+     * running tests in parallel.\n+     *\n+     * @return whether is allowed to use an ephemeral port.\n+     */\n+    public boolean getAllowEphemeralPorts() {\n+        return this.getBoolean(ALLOW_EPHEMERAL_PORTS, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to allow using an ephemeral port.\n+     *\n+     * @param allow whether to allow using an ephemeral port.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setAllowEphemeralPorts(boolean allow) {\n+        this.setProperty(ALLOW_EPHEMERAL_PORTS, allow);\n+        return this;\n+    }\n+\n     /**\n      * Return whether we should allow addition of ledger/index dirs to an existing bookie.\n      *\n@@ -1932,6 +1958,9 @@ public void validate() throws ConfigurationException {\n             throw new ConfigurationException(\"Entry log file size should not be larger than \"\n                     + BookKeeperConstants.MAX_LOG_SIZE_LIMIT);\n         }\n+        if (0 == getBookiePort() && !getAllowEphemeralPorts()) {\n+            throw new ConfigurationException(\"Invalid port specified, using ephemeral ports accidentally?\");\n+        }\n     }\n \n     /**"},{"sha":"f725dca9330ac1af5a2d2e5b5df698b683abfcc5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","patch":"@@ -83,7 +83,7 @@ class BookieNettyServer {\n     final ServerConfiguration conf;\n     final EventLoopGroup eventLoopGroup;\n     final EventLoopGroup jvmEventLoopGroup;\n-    final RequestProcessor requestProcessor;\n+    RequestProcessor requestProcessor;\n     final AtomicBoolean isRunning = new AtomicBoolean(false);\n     final AtomicBoolean isClosed = new AtomicBoolean(false);\n     final Object suspensionLock = new Object();\n@@ -140,6 +140,11 @@ class BookieNettyServer {\n         listenOn(bindAddress, bookieAddress);\n     }\n \n+    public BookieNettyServer setRequestProcessor(RequestProcessor processor) {\n+        this.requestProcessor = processor;\n+        return this;\n+    }\n+\n     boolean isRunning() {\n         return isRunning.get();\n     }\n@@ -175,7 +180,8 @@ void resumeProcessing() {\n         }\n     }\n \n-    private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress) throws InterruptedException {\n+    private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress)\n+            throws InterruptedException {\n         if (!conf.isDisableServerSocketBind()) {\n             ServerBootstrap bootstrap = new ServerBootstrap();\n             bootstrap.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true));\n@@ -219,7 +225,12 @@ protected void initChannel(SocketChannel ch) throws Exception {\n             });\n \n             // Bind and start to accept incoming connections\n-            bootstrap.bind(address.getAddress(), address.getPort()).sync();\n+            Channel listen = bootstrap.bind(address.getAddress(), address.getPort()).sync().channel();\n+            if (listen.localAddress() instanceof InetSocketAddress) {\n+                if (conf.getBookiePort() == 0) {\n+                    conf.setBookiePort(((InetSocketAddress) listen.localAddress()).getPort());\n+                }\n+            }\n         }\n \n         if (conf.isEnableLocalTransport()) {"},{"sha":"8335055d4fd47731e31f8dddf5c052490d0a81a4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","patch":"@@ -94,10 +94,11 @@ public BookieServer(ServerConfiguration conf, StatsLogger statsLogger)\n             BookieException, UnavailableException, CompatibilityException {\n         this.conf = conf;\n         this.statsLogger = statsLogger;\n+        this.nettyServer = new BookieNettyServer(this.conf, null);\n         this.bookie = newBookie(conf);\n         this.requestProcessor = new BookieRequestProcessor(conf, bookie,\n                 statsLogger.scope(SERVER_SCOPE));\n-        this.nettyServer = new BookieNettyServer(this.conf, requestProcessor);\n+        this.nettyServer.setRequestProcessor(this.requestProcessor);\n         isAutoRecoveryDaemonEnabled = conf.isAutoRecoveryDaemonEnabled();\n         if (isAutoRecoveryDaemonEnabled) {\n             this.autoRecoveryMain = new AutoRecoveryMain(conf, statsLogger.scope(REPLICATION_SCOPE));"},{"sha":"0cbebd4b83c0331c6e84642371804c2936336a3b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","patch":"@@ -20,6 +20,8 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -279,6 +281,38 @@ public void testDuplicateBookieServerStartup() throws Exception {\n         }\n     }\n \n+    /**\n+     * Verify bookie server starts up on ephemeral ports.\n+     */\n+    @Test(timeout = 20000)\n+    public void testBookieServerStartupOnEphemeralPorts() throws Exception {\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n+\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf.setZkServers(null)\n+            .setBookiePort(0)\n+            .setJournalDirName(tmpDir.getPath())\n+            .setLedgerDirNames(\n+                new String[] { tmpDir.getPath() });\n+        assertEquals(0, conf.getBookiePort());\n+\n+        ServerConfiguration conf1 = new ServerConfiguration();\n+        conf1.addConfiguration(conf);\n+        BookieServer bs1 = new BookieServer(conf1);\n+        bs1.start();\n+        assertFalse(0 == conf1.getBookiePort());\n+\n+        // starting bk server with same conf\n+        ServerConfiguration conf2 = new ServerConfiguration();\n+        conf2.addConfiguration(conf);\n+        BookieServer bs2 = new BookieServer(conf2);\n+        bs2.start();\n+        assertFalse(0 == conf2.getBookiePort());\n+\n+        // these two bookies are listening on different ports eventually\n+        assertFalse(conf1.getBookiePort() == conf2.getBookiePort());\n+    }\n+\n     /**\n      * Verify bookie start behaviour when ZK Server is not running.\n      */\n@@ -478,7 +512,7 @@ public void testWithDiskFullAndAbilityToCreateNewIndexFile() throws Exception {\n         // minUsableSizeForIndexFileCreation to very high value, it wouldn't. be\n         // able to find any index dir when all discs are full\n         server.start();\n-        Assert.assertFalse(\"Bookie should be Shutdown\", server.getBookie().isRunning());\n+        assertFalse(\"Bookie should be Shutdown\", server.getBookie().isRunning());\n         server.shutdown();\n \n         // Here we are setting MinUsableSizeForIndexFileCreation to very low"},{"sha":"1f62258831f7e08012d229450440979f2eef6dc4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestServerConfiguration.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7a480d3f8e5ec5c8c3592c332cbcab19b4043dad/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestServerConfiguration.java?ref=7a480d3f8e5ec5c8c3592c332cbcab19b4043dad","patch":"@@ -0,0 +1,52 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.conf;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for {@link ServerConfiguration}.\n+ */\n+public class TestServerConfiguration {\n+\n+    @Test\n+    public void testEphemeralPortsAllowed() throws ConfigurationException {\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowEphemeralPorts(true);\n+        conf.setBookiePort(0);\n+\n+        conf.validate();\n+        assertTrue(true);\n+    }\n+\n+    @Test(expected = ConfigurationException.class)\n+    public void testEphemeralPortsDisallowed() throws ConfigurationException {\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowEphemeralPorts(false);\n+        conf.setBookiePort(0);\n+        conf.validate();\n+    }\n+\n+}"}]}