{"sha":"1c567f88d5827d6728f05adc1d478648859d3ff0","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjFjNTY3Zjg4ZDU4MjdkNjcyOGYwNWFkYzFkNDc4NjQ4ODU5ZDNmZjA=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-21T02:31:25Z"},"committer":{"name":"jiazhai","email":"zhaijia@live.com","date":"2017-07-21T02:31:25Z"},"message":"ISSUE #263: Enable request rate limiter in zookeeper client\n\nDescriptions of the changes in this PR:\n\nEanble request rate limiter in zookeeper client. The rate limiter logic is in place, but is never enabled. This change is to expose the settings in configurations and enable them in zookeeper client at both client and server.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <None>, Jia Zhai <None>\n\nThis closes #264 from sijie/interface_syncs, closes #263","tree":{"sha":"dcfc0cdbfa9db72fd3f87a13de7964f26a2d2ef1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/dcfc0cdbfa9db72fd3f87a13de7964f26a2d2ef1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/1c567f88d5827d6728f05adc1d478648859d3ff0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1c567f88d5827d6728f05adc1d478648859d3ff0","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1c567f88d5827d6728f05adc1d478648859d3ff0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1c567f88d5827d6728f05adc1d478648859d3ff0/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"0ef4a29c9c34022816c7584943404d0fb52b9a1c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0ef4a29c9c34022816c7584943404d0fb52b9a1c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0ef4a29c9c34022816c7584943404d0fb52b9a1c"}],"stats":{"total":25,"additions":25,"deletions":0},"files":[{"sha":"37252bb1d913affeb08dd5b4cb08ae8159e40328","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1c567f88d5827d6728f05adc1d478648859d3ff0/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1c567f88d5827d6728f05adc1d478648859d3ff0/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=1c567f88d5827d6728f05adc1d478648859d3ff0","patch":"@@ -27,6 +27,7 @@\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY_BYTES;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_RECOVERY_ADD_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.JOURNAL_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_INDEX_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_LEDGER_SCOPE;\n@@ -165,6 +166,7 @@ public class Bookie extends BookieCriticalThread {\n             new ThreadFactoryBuilder().setNameFormat(\"BookieStateService-%d\").build());\n \n     // Expose Stats\n+    private final StatsLogger statsLogger;\n     private final Counter writeBytes;\n     private final Counter readBytes;\n     // Bookie Operation Latency Stats\n@@ -649,6 +651,7 @@ public Bookie(ServerConfiguration conf)\n     public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n+        this.statsLogger = statsLogger;\n         this.zkAcls = ZkUtils.getACLs(conf);\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.bookieReadonlyRegistrationPath =\n@@ -1205,6 +1208,8 @@ public void process(WatchedEvent event) {\n                 .watchers(watchers)\n                 .operationRetryPolicy(new BoundExponentialBackoffRetryPolicy(conf.getZkRetryBackoffStartMs(),\n                         conf.getZkRetryBackoffMaxMs(), Integer.MAX_VALUE))\n+                .requestRateLimit(conf.getZkRequestRateLimit())\n+                .statsLogger(this.statsLogger.scope(BOOKIE_SCOPE))\n                 .build();\n     }\n "},{"sha":"9ae542cc8e2ce2504d6c12a278d62cdd4be2f442","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1c567f88d5827d6728f05adc1d478648859d3ff0/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1c567f88d5827d6728f05adc1d478648859d3ff0/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java?ref=1c567f88d5827d6728f05adc1d478648859d3ff0","patch":"@@ -59,6 +59,7 @@ public abstract class AbstractConfiguration extends CompositeConfiguration {\n     protected final static String LEDGER_MANAGER_TYPE = \"ledgerManagerType\";\n     protected final static String LEDGER_MANAGER_FACTORY_CLASS = \"ledgerManagerFactoryClass\";\n     protected final static String ZK_LEDGERS_ROOT_PATH = \"zkLedgersRootPath\";\n+    protected final static String ZK_REQUEST_RATE_LIMIT = \"zkRequestRateLimit\";\n     protected final static String AVAILABLE_NODE = \"available\";\n     protected final static String REREPLICATION_ENTRY_BATCH_SIZE = \"rereplicationEntryBatchSize\";\n \n@@ -193,6 +194,25 @@ public String getZkLedgersRootPath() {\n         return getString(ZK_LEDGERS_ROOT_PATH, \"/ledgers\");\n     }\n \n+    /**\n+     * Get zookeeper access request rate limit.\n+     *\n+     * @return zookeeper access request rate limit.\n+     */\n+    public double getZkRequestRateLimit() {\n+        return getDouble(ZK_REQUEST_RATE_LIMIT, 0);\n+    }\n+\n+    /**\n+     * Set zookeeper access request rate limit.\n+     *\n+     * @param rateLimit\n+     *          zookeeper access request rate limit.\n+     */\n+    public void setZkRequestRateLimit(double rateLimit) {\n+        setProperty(ZK_REQUEST_RATE_LIMIT, rateLimit);\n+    }\n+\n     /**\n      * Are z-node created with strict ACLs\n      *"}]}