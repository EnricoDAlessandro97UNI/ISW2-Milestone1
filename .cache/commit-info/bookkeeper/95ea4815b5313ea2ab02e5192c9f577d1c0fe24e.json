{"sha":"95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojk1ZWE0ODE1YjUzMTNlYTJhYjAyZTUxOTJjOWY1NzdkMWMwZmUyNGU=","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2016-11-17T23:44:06Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-11-17T23:44:06Z"},"message":"BOOKKEEPER-912: Allow EnsemblePlacementPolicy to choose bookies using ledger custom data (multitenancy support)\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: sijie@apache.org <sijie@apache.org>\n\nCloses #68 from eolivelli/BOOKKEEPER-912 and squashes the following commits:\n\n6c1eaca [eolivelli] BOOKKEEPER-912 Allow EnsemblePlacementPolicy to choose bookies using ledger custom data (multitenancy support)\n7c0ab37 [eolivelli] BOOKKEEPER-912 Allow EnsemblePlacementPolicy to choose bookies using ledger custom data (multitenancy support)","tree":{"sha":"b9cbaf66aeddc5566aa8a6bf8ebad01870f38cc3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/b9cbaf66aeddc5566aa8a6bf8ebad01870f38cc3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9359d682a1598e30364eca6021d976f911e055b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9359d682a1598e30364eca6021d976f911e055b2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9359d682a1598e30364eca6021d976f911e055b2"}],"stats":{"total":327,"additions":235,"deletions":92},"files":[{"sha":"e7bfe946548b4811045085abaa8dd68c81daf53f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LocalBookieEnsemblePlacementPolicy.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -74,7 +74,9 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n     }\n \n     @Override\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n+        java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble,\n+        BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n         throw new BKNotEnoughBookiesException();\n     }\n \n@@ -90,7 +92,7 @@ public List<Integer> reorderReadLACSequence(ArrayList<BookieSocketAddress> ensem\n \n     @Override\n     public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        java.util.Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n         if (ensembleSize > 1) {\n             throw new IllegalArgumentException(\"Local ensemble policy can only return 1 bookie\");\n         }"},{"sha":"cec6920e4359958082fa8bf480924ed322ffedfd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -49,6 +49,7 @@\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.RemovalListener;\n import com.google.common.cache.RemovalNotification;\n+import java.util.Map;\n \n /**\n  * This class is responsible for maintaining a consistent view of what bookies\n@@ -255,18 +256,19 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n      * @return list of bookies for new ensemble.\n      * @throws BKNotEnoughBookiesException\n      */\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize)\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize,\n+        int ackQuorumSize, Map<String, byte[]> customMetadata)\n             throws BKNotEnoughBookiesException {\n         try {\n             // we try to only get from the healthy bookies first\n             return placementPolicy.newEnsemble(ensembleSize,\n-                    writeQuorumSize, ackQuorumSize, new HashSet<BookieSocketAddress>(\n+                    writeQuorumSize, ackQuorumSize, customMetadata, new HashSet<BookieSocketAddress>(\n                     quarantinedBookies.asMap().keySet()));\n         } catch (BKNotEnoughBookiesException e) {\n             if (logger.isDebugEnabled()) {\n                 logger.debug(\"Not enough healthy bookies available, using quarantined bookies\");\n             }\n-            return placementPolicy.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, EMPTY_SET);\n+            return placementPolicy.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata, EMPTY_SET);\n         }\n     }\n \n@@ -280,6 +282,7 @@ public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuo\n      * @throws BKNotEnoughBookiesException\n      */\n     public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n+                                             Map<String, byte[]> customMetadata,\n                                              List<BookieSocketAddress> existingBookies, int bookieIdx,\n                                              Set<BookieSocketAddress> excludeBookies)\n             throws BKNotEnoughBookiesException {\n@@ -288,13 +291,13 @@ public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize,\n             // we exclude the quarantined bookies also first\n             Set<BookieSocketAddress> existingAndQuarantinedBookies = new HashSet<BookieSocketAddress>(existingBookies);\n             existingAndQuarantinedBookies.addAll(quarantinedBookies.asMap().keySet());\n-            return placementPolicy.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize,\n+            return placementPolicy.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata,\n                     existingAndQuarantinedBookies, addr, excludeBookies);\n         } catch (BKNotEnoughBookiesException e) {\n             if (logger.isDebugEnabled()) {\n                 logger.debug(\"Not enough healthy bookies available, using quarantined bookies\");\n             }\n-            return placementPolicy.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize,\n+            return placementPolicy.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata,\n                     new HashSet<BookieSocketAddress>(existingBookies), addr, excludeBookies);\n         }\n     }"},{"sha":"5a2c1f281d07d2eb61e21061ef4e094d78153280","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -45,8 +45,7 @@ public class DefaultEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n     private Set<BookieSocketAddress> knownBookies = new HashSet<BookieSocketAddress>();\n \n     @Override\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int quorumSize, int ackQuorumSize,\n-            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int quorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n         ArrayList<BookieSocketAddress> newBookies = new ArrayList<BookieSocketAddress>(ensembleSize);\n         if (ensembleSize <= 0) {\n             return newBookies;\n@@ -70,11 +69,9 @@ public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int quorumSi\n     }\n \n     @Override\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, Collection<BookieSocketAddress> currentEnsemble,\n-                                           BookieSocketAddress bookieToReplace,\n-                                           Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n         excludeBookies.addAll(currentEnsemble);\n-        ArrayList<BookieSocketAddress> addresses = newEnsemble(1, 1, 1, excludeBookies);\n+        ArrayList<BookieSocketAddress> addresses = newEnsemble(1, 1, 1, customMetadata, excludeBookies);\n         return addresses.get(0);\n     }\n "},{"sha":"4a0f30769508fe156166a7cda42ddaf572d365c1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -80,28 +80,32 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n      *          Ensemble Size\n      * @param writeQuorumSize\n      *          Write Quorum Size\n-     * @param excludeBookies\n-     *          Bookies that should not be considered as targets.\n-     * @return list of bookies chosen as targets.\n+     * @param ackQuorumSize\n+     *          the value of ackQuorumSize\n+     * @param customMetadata the value of customMetadata\n+     * @param excludeBookies Bookies that should not be considered as targets.\n      * @throws BKNotEnoughBookiesException if not enough bookies available.\n+     * @return the java.util.ArrayList<org.apache.bookkeeper.net.BookieSocketAddress>\n      */\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-                                                      Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize, Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n \n     /**\n      * Choose a new bookie to replace <i>bookieToReplace</i>. If no bookie available in the cluster,\n      * {@link BKNotEnoughBookiesException} is thrown.\n      *\n-     * @param bookieToReplace\n-     *          bookie to replace\n-     * @param excludeBookies\n-     *          bookies that should not be considered as candidate.\n-     * @return the bookie chosen as target.\n+     * @param ensembleSize\n+     *          the value of ensembleSize\n+     * @param writeQuorumSize\n+     *          the value of writeQuorumSize\n+     * @param ackQuorumSize the value of ackQuorumSize\n+     * @param customMetadata the value of customMetadata\n+     * @param currentEnsemble the value of currentEnsemble\n+     * @param bookieToReplace bookie to replace\n+     * @param excludeBookies bookies that should not be considered as candidate.\n      * @throws BKNotEnoughBookiesException\n+     * @return the org.apache.bookkeeper.net.BookieSocketAddress\n      */\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-                                             Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace,\n-                                             Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n \n     /**\n      * Reorder the read sequence of a given write quorum <i>writeSet</i>."},{"sha":"52a5cb6255dc82de261b7ee1c8902a2c7f21671f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -107,7 +107,8 @@ public void initiate() {\n             ensemble = bk.bookieWatcher\n                     .newEnsemble(metadata.getEnsembleSize(),\n                             metadata.getWriteQuorumSize(),\n-                            metadata.getAckQuorumSize());\n+                            metadata.getAckQuorumSize(),\n+                            metadata.getCustomMetadata());\n         } catch (BKNotEnoughBookiesException e) {\n             LOG.error(\"Not enough bookies to create ledger\");\n             createComplete(e.getCode(), null);"},{"sha":"11212a7238d1bbeca363bc42898e4d06f472ee7e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -995,7 +995,9 @@ ArrayList<BookieSocketAddress> replaceBookieInMetadata(final BookieSocketAddress\n             newEnsemble.addAll(metadata.currentEnsemble);\n             newBookie = bk.bookieWatcher.replaceBookie(metadata.getEnsembleSize(),\n                     metadata.getWriteQuorumSize(),\n-                    metadata.getAckQuorumSize(), newEnsemble,\n+                    metadata.getAckQuorumSize(),\n+                    metadata.getCustomMetadata(),\n+                    newEnsemble,\n                     bookieIndex, new HashSet<>(Arrays.asList(addr)));\n \n "},{"sha":"c306ca0b56b3f4f2950aa8e6c93af10a5431c806","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -79,39 +79,31 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n \n     @Override\n     public ArrayList<BookieSocketAddress> newEnsemble(\n-            int ensembleSize,\n-            int writeQuorumSize,\n-            int ackQuorumSize,\n-            Set<BookieSocketAddress> excludeBookies)\n+        int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies)\n             throws BKException.BKNotEnoughBookiesException {\n         try {\n-            return super.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, excludeBookies);\n+            return super.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata, excludeBookies);\n         } catch (BKException.BKNotEnoughBookiesException bnebe) {\n             if (slave == null) {\n                 throw bnebe;\n             } else {\n-                return slave.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, excludeBookies);\n+                return slave.newEnsemble(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata, excludeBookies);\n             }\n         }\n     }\n \n     @Override\n     public BookieSocketAddress replaceBookie(\n-            int ensembleSize,\n-            int writeQuorumSize,\n-            int ackQuorumSize,\n-            Collection<BookieSocketAddress> currentEnsemble,\n-            BookieSocketAddress bookieToReplace,\n-            Set<BookieSocketAddress> excludeBookies)\n+        int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies)\n             throws BKException.BKNotEnoughBookiesException {\n         try {\n-            return super.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize,\n+            return super.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata,\n                     currentEnsemble, bookieToReplace, excludeBookies);\n         } catch (BKException.BKNotEnoughBookiesException bnebe) {\n             if (slave == null) {\n                 throw bnebe;\n             } else {\n-                return slave.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize,\n+                return slave.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize,customMetadata,\n                         currentEnsemble, bookieToReplace, excludeBookies);\n             }\n         }"},{"sha":"79ff0dad47fd69b47bcd25dfdcf19721cab35bc0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -259,8 +259,7 @@ protected Set<Node> convertBookiesToNodes(Set<BookieSocketAddress> excludeBookie\n     }\n \n     @Override\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-                                                      Set<BookieSocketAddress> excludeBookies)\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies)\n             throws BKNotEnoughBookiesException {\n         return newEnsembleInternal(ensembleSize, writeQuorumSize, excludeBookies, null, null);\n     }\n@@ -355,10 +354,7 @@ protected ArrayList<BookieSocketAddress> newEnsembleInternal(\n     }\n \n     @Override\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-                                             Collection<BookieSocketAddress> currentEnsemble,\n-                                             BookieSocketAddress bookieToReplace,\n-                                             Set<BookieSocketAddress> excludeBookies)\n+    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies)\n             throws BKNotEnoughBookiesException {\n         rwLock.readLock().lock();\n         try {"},{"sha":"265499c2f395e728c163f38c25a81a68c263f4a5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -212,8 +212,7 @@ protected List<BookieNode> selectRandomFromRegions(Set<String> availableRegions,\n \n \n     @Override\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n-                                                    Set<BookieSocketAddress> excludeBookies) throws BKException.BKNotEnoughBookiesException {\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies) throws BKException.BKNotEnoughBookiesException {\n \n         int effectiveMinRegionsForDurability = disableDurabilityFeature.isAvailable() ? 1 : minRegionsForDurability;\n \n@@ -392,8 +391,7 @@ public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuo\n     }\n \n     @Override\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace,\n-                                           Set<BookieSocketAddress> excludeBookies) throws BKException.BKNotEnoughBookiesException {\n+    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKException.BKNotEnoughBookiesException {\n         rwLock.readLock().lock();\n         try {\n             boolean enforceDurability = enforceDurabilityInReplace && !disableDurabilityFeature.isAvailable();"},{"sha":"e28a691610535539c627ac04f1d79207ab5ee5ac","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/GenericEnsemblePlacementPolicyTest.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class GenericEnsemblePlacementPolicyTest extends BookKeeperClusterTestCase {\n+\n+    private BookKeeper.DigestType digestType = BookKeeper.DigestType.CRC32;\n+    private static final String PASSWORD = \"testPasswd\";\n+    private static final String property = \"foo\";\n+    private static final byte[] value = \"bar\".getBytes(StandardCharsets.UTF_8);\n+    private static List<Map<String, byte[]>> customMetadataOnNewEnsembleStack = new ArrayList<>();\n+    private static List<Map<String, byte[]>> customMetadataOnReplaceBookieStack = new ArrayList<>();\n+\n+    public GenericEnsemblePlacementPolicyTest() {\n+        super(0);\n+        baseClientConf.setEnsemblePlacementPolicy(CustomEnsemblePlacementPolicy.class);\n+    }\n+\n+    public static final class CustomEnsemblePlacementPolicy extends DefaultEnsemblePlacementPolicy {\n+\n+        @Override\n+        public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize,\n+            int ackQuorumSize, Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble,\n+            BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies)\n+            throws BKException.BKNotEnoughBookiesException {\n+            new Exception(\"replaceBookie \" + ensembleSize + \",\" + customMetadata).printStackTrace();\n+            assertNotNull(customMetadata);\n+            customMetadataOnReplaceBookieStack.add(customMetadata);\n+            return super.replaceBookie(ensembleSize, writeQuorumSize, ackQuorumSize, customMetadata,\n+                currentEnsemble, bookieToReplace, excludeBookies);\n+        }\n+\n+        @Override\n+        public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int quorumSize,\n+            int ackQuorumSize, Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies)\n+            throws BKException.BKNotEnoughBookiesException {\n+            assertNotNull(customMetadata);\n+            customMetadataOnNewEnsembleStack.add(customMetadata);\n+            return super.newEnsemble(ensembleSize, quorumSize, ackQuorumSize, customMetadata, excludeBookies);\n+        }\n+        \n+    }\n+\n+    @Before\n+    public void reset() {\n+        customMetadataOnNewEnsembleStack.clear();\n+        customMetadataOnReplaceBookieStack.clear();\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testNewEnsemble() throws Exception {\n+        numBookies = 1;\n+        startBKCluster();\n+        try {\n+            Map<String, byte[]> customMetadata = new HashMap<>();\n+            customMetadata.put(property, value);\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n+                bk.createLedger(1, 1, 1, digestType, PASSWORD.getBytes(), customMetadata);\n+            }\n+            assertEquals(1, customMetadataOnNewEnsembleStack.size());\n+            assertArrayEquals(value, customMetadataOnNewEnsembleStack.get(0).get(property));\n+        } finally {\n+            stopBKCluster();\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testNewEnsembleWithNotEnoughtBookies() throws Exception {\n+        numBookies = 0;\n+        try {\n+            startBKCluster();\n+            Map<String, byte[]> customMetadata = new HashMap<>();\n+            customMetadata.put(property, value);\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n+                bk.createLedger(1, 1, 1, digestType, PASSWORD.getBytes(), customMetadata);\n+                fail(\"creation should fail\");\n+            } catch (BKException.BKNotEnoughBookiesException bneb) {\n+            }\n+            assertEquals(2, customMetadataOnNewEnsembleStack.size());\n+            assertArrayEquals(value, customMetadataOnNewEnsembleStack.get(0).get(property));\n+            assertArrayEquals(value, customMetadataOnNewEnsembleStack.get(1).get(property));\n+        } finally {\n+            stopBKCluster();\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testReplaceBookie() throws Exception {\n+        numBookies = 3;\n+        startBKCluster();\n+        try {\n+            Map<String, byte[]> customMetadata = new HashMap<>();\n+            customMetadata.put(property, value);\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n+                try (LedgerHandle lh = bk.createLedger(2, 2, 2, digestType, PASSWORD.getBytes(), customMetadata);) {\n+                    lh.addEntry(value);\n+                    long lId = lh.getId();\n+                    ArrayList<BookieSocketAddress> ensembleAtFirstEntry = lh.getLedgerMetadata().getEnsemble(lId);\n+                    assertEquals(2, ensembleAtFirstEntry.size());\n+                    killBookie(ensembleAtFirstEntry.get(0));\n+                    lh.addEntry(value);\n+                }\n+            }\n+            assertEquals(2, customMetadataOnNewEnsembleStack.size());\n+            assertArrayEquals(value, customMetadataOnNewEnsembleStack.get(0).get(property));\n+            // replaceBookie by default calls newEnsemble, so newEnsemble gets called twice\n+            assertArrayEquals(value, customMetadataOnNewEnsembleStack.get(0).get(property));\n+\n+            assertEquals(1, customMetadataOnReplaceBookieStack.size());\n+            assertArrayEquals(value, customMetadataOnReplaceBookieStack.get(0).get(property));\n+\n+        } finally {\n+            stopBKCluster();\n+        }\n+    }\n+\n+}"},{"sha":"bef6bc286836e3a9c4ce9f4d0b4d3521c17588e7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -240,7 +240,7 @@ public void testReplaceBookieWithEnoughBookiesInSameRack() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         // replace node under r2\n-        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, new HashSet<BookieSocketAddress>());\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, new HashSet<BookieSocketAddress>());\n         assertEquals(addr3, replacedBookie);\n     }\n \n@@ -265,7 +265,7 @@ public void testReplaceBookieWithEnoughBookiesInDifferentRack() throws Exception\n         // replace node under r2\n         Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n         excludedAddrs.add(addr1);\n-        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n \n         assertFalse(addr1.equals(replacedBookie));\n         assertTrue(addr3.equals(replacedBookie) || addr4.equals(replacedBookie));\n@@ -295,7 +295,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n         excludedAddrs.add(addr3);\n         excludedAddrs.add(addr4);\n         try {\n-            repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+            repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n             fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n         } catch (BKNotEnoughBookiesException bnebe) {\n             // should throw not enou\n@@ -316,9 +316,9 @@ public void testNewEnsembleWithSingleRack() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(0, getNumCoveredWriteQuorums(ensemble, 2));\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(0, getNumCoveredWriteQuorums(ensemble2, 2));\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n@@ -344,10 +344,10 @@ public void testNewEnsembleWithMultipleRacks() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             int numCovered = getNumCoveredWriteQuorums(ensemble, 2);\n             assertTrue(numCovered >= 1 && numCovered < 3);\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             numCovered = getNumCoveredWriteQuorums(ensemble2, 2);\n             assertTrue(numCovered >= 1 && numCovered < 3);\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -386,9 +386,9 @@ public void testNewEnsembleWithEnoughRacks() throws Exception {\n         addrs.add(addr8);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble1 = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble1 = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(3, getNumCoveredWriteQuorums(ensemble1, 2));\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(4, getNumCoveredWriteQuorums(ensemble2, 2));\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n@@ -489,12 +489,12 @@ public void testPlacementOnStabilizeNetworkTopology() throws Exception {\n         // we will never use addr4 even it is in the stabilized network topology\n         for (int i = 0 ; i < 5; i++) {\n             ArrayList<BookieSocketAddress> ensemble =\n-                    repp.newEnsemble(3, 3, 3, new HashSet<BookieSocketAddress>());\n+                    repp.newEnsemble(3, 3, 3, null, new HashSet<BookieSocketAddress>());\n             assertFalse(ensemble.contains(addr4));\n         }\n \n         // we could still use addr4 for urgent allocation if it is just bookie flapping\n-        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(4, 4, 4, new HashSet<BookieSocketAddress>());\n+        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(4, 4, 4, null, new HashSet<BookieSocketAddress>());\n         assertTrue(ensemble.contains(addr4));\n     }\n }"},{"sha":"5c61ae372b45da947a44a74f3ccca8f9d76b33d7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java?ref=95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","patch":"@@ -269,7 +269,7 @@ public void testReplaceBookieWithEnoughBookiesInSameRegion() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         // replace node under r2\n-        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, new HashSet<BookieSocketAddress>());\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, new HashSet<BookieSocketAddress>());\n         assertEquals(addr3, replacedBookie);\n     }\n \n@@ -294,7 +294,7 @@ public void testReplaceBookieWithEnoughBookiesInDifferentRegion() throws Excepti\n         // replace node under r2\n         Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n         excludedAddrs.add(addr1);\n-        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n \n         assertFalse(addr1.equals(replacedBookie));\n         assertTrue(addr3.equals(replacedBookie) || addr4.equals(replacedBookie));\n@@ -319,7 +319,7 @@ public void testNewEnsembleBookieWithNotEnoughBookies() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> list = repp.newEnsemble(5, 5, 3, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> list = repp.newEnsemble(5, 5, 3, null, new HashSet<BookieSocketAddress>());\n             LOG.info(\"Ensemble : {}\", list);\n             fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -351,7 +351,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n         excludedAddrs.add(addr3);\n         excludedAddrs.add(addr4);\n         try {\n-            repp.replaceBookie(1, 1, 1, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+            repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n             fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n         } catch (BKNotEnoughBookiesException bnebe) {\n             // should throw not enou\n@@ -380,9 +380,9 @@ public void testNewEnsembleWithSingleRegion() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(0, getNumCoveredRegionsInWriteQuorum(ensemble, 2));\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(0, getNumCoveredRegionsInWriteQuorum(ensemble2, 2));\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n@@ -411,15 +411,15 @@ public void testNewEnsembleWithMultipleRegions() throws Exception {\n         addrs.add(addr4);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             int numCovered = getNumCoveredRegionsInWriteQuorum(ensemble, 2);\n             assertTrue(numCovered >= 1);\n             assertTrue(numCovered < 3);\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n         }\n         try {\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             int numCovered = getNumCoveredRegionsInWriteQuorum(ensemble2, 2);\n             assertTrue(numCovered >= 1 && numCovered < 3);\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -458,9 +458,9 @@ public void testNewEnsembleWithEnoughRegions() throws Exception {\n         addrs.add(addr8);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble1 = repp.newEnsemble(3, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble1 = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(3, getNumCoveredRegionsInWriteQuorum(ensemble1, 2));\n-            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n             assertEquals(4, getNumCoveredRegionsInWriteQuorum(ensemble2, 2));\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n@@ -507,22 +507,22 @@ public void testNewEnsembleWithThreeRegions() throws Exception {\n         addrs.add(addr10);\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.contains(addr4));\n             assert(ensemble.contains(addr8));\n             assert(ensemble.size() == 6);\n             assertEquals(3, getNumRegionsInEnsemble(ensemble));\n-            ensemble = repp.newEnsemble(7, 7, 4, new HashSet<BookieSocketAddress>());\n+            ensemble = repp.newEnsemble(7, 7, 4, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.contains(addr4));\n             assert(ensemble.contains(addr8));\n             assert(ensemble.size() == 7);\n             assertEquals(3, getNumRegionsInEnsemble(ensemble));\n-            ensemble = repp.newEnsemble(8, 8, 5, new HashSet<BookieSocketAddress>());\n+            ensemble = repp.newEnsemble(8, 8, 5, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.contains(addr4));\n             assert(ensemble.contains(addr8));\n             assert(ensemble.size() == 8);\n             assertEquals(3, getNumRegionsInEnsemble(ensemble));\n-            ensemble = repp.newEnsemble(9, 9, 5, new HashSet<BookieSocketAddress>());\n+            ensemble = repp.newEnsemble(9, 9, 5, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.contains(addr4));\n             assert(ensemble.contains(addr8));\n             assert(ensemble.size() == 9);\n@@ -575,7 +575,7 @@ public void testNewEnsembleWithThreeRegionsWithDisable() throws Exception {\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         try {\n             ((SettableFeature) featureProvider.scope(\"region1\").getFeature(\"disallowBookies\")).set(true);\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, null, new HashSet<BookieSocketAddress>());\n             assertEquals(2, getNumRegionsInEnsemble(ensemble));\n             assert(ensemble.contains(addr1));\n             assert(ensemble.contains(addr3));\n@@ -589,14 +589,14 @@ public void testNewEnsembleWithThreeRegionsWithDisable() throws Exception {\n         }\n         try {\n             ((SettableFeature) featureProvider.scope(\"region2\").getFeature(\"disallowBookies\")).set(true);\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, null, new HashSet<BookieSocketAddress>());\n             fail(\"Should get not enough bookies exception even there is only one region with insufficient bookies.\");\n         } catch (BKNotEnoughBookiesException bnebe) {\n             // Expected\n         }\n         try {\n             ((SettableFeature) featureProvider.scope(\"region2\").getFeature(\"disallowBookies\")).set(false);\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(6, 6, 4, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.contains(addr1));\n             assert(ensemble.contains(addr3));\n             assert(ensemble.contains(addr4));\n@@ -669,7 +669,7 @@ public void testNewEnsembleWithFiveRegions() throws Exception {\n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n \n         try {\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(10, 10, 10, new HashSet<BookieSocketAddress>());\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(10, 10, 10, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.size() == 10);\n             assertEquals(5, getNumRegionsInEnsemble(ensemble));\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -680,7 +680,7 @@ public void testNewEnsembleWithFiveRegions() throws Exception {\n         try{\n             Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n             excludedAddrs.add(addr10);\n-            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(10, 10, 10, excludedAddrs);\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(10, 10, 10, null, excludedAddrs);\n             assert(ensemble.contains(addr11) && ensemble.contains(addr12));\n             assert(ensemble.size() == 10);\n             assertEquals(5, getNumRegionsInEnsemble(ensemble));\n@@ -771,7 +771,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n \n         ArrayList<BookieSocketAddress> ensemble;\n         try {\n-            ensemble = repp.newEnsemble(6, 6, ackQuorum, new HashSet<BookieSocketAddress>());\n+            ensemble = repp.newEnsemble(6, 6, ackQuorum, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.size() == 6);\n             assertEquals(3, getNumRegionsInEnsemble(ensemble));\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -792,7 +792,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n             Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n             for(BookieSocketAddress addr: region2Bookies) {\n                 if (ensemble.contains(addr)) {\n-                    BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, ensemble, addr, excludedAddrs);\n+                    BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, null, ensemble, addr, excludedAddrs);\n                     ensemble.remove(addr);\n                     ensemble.add(replacedBookie);\n                 }\n@@ -816,7 +816,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n             Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n \n             try {\n-                BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, ensemble, bookieToReplace, excludedAddrs);\n+                BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, null, ensemble, bookieToReplace, excludedAddrs);\n                 assert (replacedBookie.equals(replacedBookieExpected));\n                 assertEquals(3, getNumRegionsInEnsemble(ensemble));\n             } catch (BKNotEnoughBookiesException bnebe) {\n@@ -825,7 +825,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n \n             excludedAddrs.add(replacedBookieExpected);\n             try {\n-                BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, ensemble, bookieToReplace, excludedAddrs);\n+                BookieSocketAddress replacedBookie = repp.replaceBookie(6, 6, ackQuorum, null, ensemble, bookieToReplace, excludedAddrs);\n                 if (minDurability > 1 && !disableDurabilityFeature.isAvailable()) {\n                     fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n                 }\n@@ -900,7 +900,7 @@ public void testEnsembleDurabilityDisabledInternal(int minDurability, boolean di\n \n         ArrayList<BookieSocketAddress> ensemble;\n         try {\n-            ensemble = repp.newEnsemble(6, 6, 4, new HashSet<BookieSocketAddress>());\n+            ensemble = repp.newEnsemble(6, 6, 4, null, new HashSet<BookieSocketAddress>());\n             assert(ensemble.size() == 6);\n         } catch (BKNotEnoughBookiesException bnebe) {\n             LOG.error(\"BKNotEnoughBookiesException\", bnebe);\n@@ -911,7 +911,7 @@ public void testEnsembleDurabilityDisabledInternal(int minDurability, boolean di\n         Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n \n         try{\n-            repp.replaceBookie(6, 6, 4, ensemble, addr4, excludedAddrs);\n+            repp.replaceBookie(6, 6, 4, null, ensemble, addr4, excludedAddrs);\n         } catch (BKNotEnoughBookiesException bnebe) {\n             fail(\"Should not get not enough bookies exception even there is only one rack.\");\n         }\n@@ -964,7 +964,7 @@ public void testNewEnsembleFailWithFiveRegions() throws Exception {\n         excludedAddrs.add(addr10);\n         excludedAddrs.add(addr9);\n         try {\n-            ArrayList<BookieSocketAddress> list = repp.newEnsemble(5, 5, 5, excludedAddrs);\n+            ArrayList<BookieSocketAddress> list = repp.newEnsemble(5, 5, 5, null, excludedAddrs);\n             LOG.info(\"Ensemble : {}\", list);\n             fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n         } catch (BKNotEnoughBookiesException bnebe) {\n@@ -1025,7 +1025,7 @@ public void testBasicReorderReadLACSequenceWithLocalRegion() throws Exception {\n     private void basicReorderReadSequenceWithLocalRegionTest(String myRegion, boolean isReadLAC) throws Exception {\n         prepareNetworkTopologyForReorderTests(myRegion);\n \n-        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, new HashSet<BookieSocketAddress>());\n+        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, null, new HashSet<BookieSocketAddress>());\n         assertEquals(9, getNumCoveredRegionsInWriteQuorum(ensemble, 9));\n \n         DistributionSchedule ds = new RoundRobinDistributionSchedule(9, 9, 9);\n@@ -1076,7 +1076,7 @@ public void testBasicReorderReadLACSequenceWithRemoteRegion() throws Exception {\n     private void basicReorderReadSequenceWithRemoteRegionTest(String myRegion, boolean isReadLAC) throws Exception {\n         prepareNetworkTopologyForReorderTests(myRegion);\n \n-        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, new HashSet<BookieSocketAddress>());\n+        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, null, new HashSet<BookieSocketAddress>());\n         assertEquals(9, getNumCoveredRegionsInWriteQuorum(ensemble, 9));\n \n         DistributionSchedule ds = new RoundRobinDistributionSchedule(9, 9, 9);\n@@ -1139,7 +1139,7 @@ private void reorderReadSequenceWithUnavailableOrReadOnlyBookiesTest(boolean isR\n \n         prepareNetworkTopologyForReorderTests(myRegion);\n \n-        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, new HashSet<BookieSocketAddress>());\n+        ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(9, 9, 5, null, new HashSet<BookieSocketAddress>());\n         assertEquals(9, getNumCoveredRegionsInWriteQuorum(ensemble, 9));\n \n         DistributionSchedule ds = new RoundRobinDistributionSchedule(9, 9, 9);"}]}