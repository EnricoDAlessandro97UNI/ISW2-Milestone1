{"sha":"bac3ed3603f9dc9864beb610bea215c186ef4fab","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmJhYzNlZDM2MDNmOWRjOTg2NGJlYjYxMGJlYTIxNWMxODZlZjRmYWI=","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2016-02-23T18:16:06Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-23T18:16:06Z"},"message":"BOOKKEEPER-879: Record ledger creation time\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>, Flavio Junqueira <fpj@apache.org>\n\nCloses #2 from eolivelli/master and squashes the following commits:\n\n509ad4f [eolivelli] BOOKKEEPER-879: Record ledger creation time\n227d50c [eolivelli] BOOKKEEPER-879: Record ledger creation time\n94cdee6 [eolivelli] BOOKKEEPER-879: Record ledger creation time\n2a8e700 [eolivelli] BOOKKEEPER-879: Record ledger creation time\nc43f0b4 [eolivelli] BOOKKEEPER-879: Record ledger creation time\ne33f2e0 [eolivelli] BOOKKEEPER-879: Record ledger creation time","tree":{"sha":"e3ddc371af9725b87a8fde2babba7bab5e9739d5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/e3ddc371af9725b87a8fde2babba7bab5e9739d5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/bac3ed3603f9dc9864beb610bea215c186ef4fab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bac3ed3603f9dc9864beb610bea215c186ef4fab","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/bac3ed3603f9dc9864beb610bea215c186ef4fab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bac3ed3603f9dc9864beb610bea215c186ef4fab/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9c937f5d814d4079b6134db361a0e2de1e37cd05","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9c937f5d814d4079b6134db361a0e2de1e37cd05","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9c937f5d814d4079b6134db361a0e2de1e37cd05"}],"stats":{"total":151,"additions":131,"deletions":20},"files":[{"sha":"a58adbaa5ba83aa2c678b8089462c2a6818b824b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -37,6 +37,7 @@\n import java.util.TreeMap;\n \n import static com.google.common.base.Charsets.UTF_8;\n+import com.google.common.base.Optional;\n \n /**\n  * This class encapsulates all the ledger metadata that is persistently stored\n@@ -66,6 +67,7 @@ public class LedgerMetadata {\n     private int ackQuorumSize;\n     private long length;\n     private long lastEntryId;\n+    private long ctime;\n \n     private LedgerMetadataFormat.State state;\n     private SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles =\n@@ -82,6 +84,7 @@ public LedgerMetadata(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n         this.ensembleSize = ensembleSize;\n         this.writeQuorumSize = writeQuorumSize;\n         this.ackQuorumSize = ackQuorumSize;\n+        this.ctime = System.currentTimeMillis();\n \n         /*\n          * It is set in PendingReadOp.readEntryComplete, and\n@@ -104,6 +107,7 @@ public LedgerMetadata(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n     LedgerMetadata(LedgerMetadata other) {\n         this.ensembleSize = other.ensembleSize;\n         this.writeQuorumSize = other.writeQuorumSize;\n+        this.ctime = other.ctime;\n         this.ackQuorumSize = other.ackQuorumSize;\n         this.length = other.length;\n         this.lastEntryId = other.lastEntryId;\n@@ -150,6 +154,14 @@ public int getWriteQuorumSize() {\n         return writeQuorumSize;\n     }\n \n+    /**\n+     * Get the creation timestamp of the ledger\n+     * @return \n+     */\n+    public long getCtime() {\n+        return ctime;\n+    }        \n+\n     public int getAckQuorumSize() {\n         return ackQuorumSize;\n     }\n@@ -255,7 +267,7 @@ public byte[] serialize() {\n         LedgerMetadataFormat.Builder builder = LedgerMetadataFormat.newBuilder();\n         builder.setQuorumSize(writeQuorumSize).setAckQuorumSize(ackQuorumSize)\n             .setEnsembleSize(ensembleSize).setLength(length)\n-            .setState(state).setLastEntryId(lastEntryId);\n+            .setState(state).setLastEntryId(lastEntryId).setCtime(ctime);\n \n         if (hasPassword) {\n             builder.setDigestType(digestType).setPassword(ByteString.copyFrom(password));\n@@ -308,11 +320,13 @@ private byte[] serializeVersion1() {\n      *            byte array to parse\n      * @param version\n      *            version of the ledger metadata\n+     * @param msCtime\n+     *            metadata store creation time, used for legacy ledgers\n      * @return LedgerConfig\n      * @throws IOException\n      *             if the given byte[] cannot be parsed\n      */\n-    public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws IOException {\n+    public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional<Long> msCtime) throws IOException {\n         LedgerMetadata lc = new LedgerMetadata();\n         lc.version = version;\n \n@@ -351,7 +365,12 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws I\n         LedgerMetadataFormat.Builder builder = LedgerMetadataFormat.newBuilder();\n         TextFormat.merge(reader, builder);\n         LedgerMetadataFormat data = builder.build();\n-        lc.writeQuorumSize = data.getQuorumSize();\n+        lc.writeQuorumSize = data.getQuorumSize();        \n+        if (data.hasCtime()) {\n+            lc.ctime = data.getCtime();\n+        } else if (msCtime.isPresent()) {\n+            lc.ctime = msCtime.get();\n+        }        \n         if (data.hasAckQuorumSize()) {\n             lc.ackQuorumSize = data.getAckQuorumSize();\n         } else {\n@@ -463,6 +482,7 @@ boolean isConflictWith(LedgerMetadata newMeta) {\n         if (metadataFormatVersion != newMeta.metadataFormatVersion ||\n             ensembleSize != newMeta.ensembleSize ||\n             writeQuorumSize != newMeta.writeQuorumSize ||\n+            ctime != newMeta.ctime ||\n             ackQuorumSize != newMeta.ackQuorumSize ||\n             length != newMeta.length ||\n             state != newMeta.state ||"},{"sha":"fbf38ad22e748900e3eaa29d740e533c443bfa68","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.bookkeeper.meta;\n \n+import com.google.common.base.Optional;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.List;\n@@ -355,10 +356,14 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n                     readCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n-\n+                if (stat == null) {\n+                    LOG.error(\"Could not parse ledger metadata for ledger: \" + ledgerId+\". Stat object is null\");\n+                    readCb.operationComplete(BKException.Code.ZKException, null);\n+                    return;\n+                }\n                 LedgerMetadata metadata;\n                 try {\n-                    metadata = LedgerMetadata.parseConfig(data, new ZkVersion(stat.getVersion()));\n+                    metadata = LedgerMetadata.parseConfig(data, new ZkVersion(stat.getVersion()), Optional.of(stat.getCtime()));\n                 } catch (IOException e) {\n                     LOG.error(\"Could not parse ledger metadata for ledger: \" + ledgerId, e);\n                     readCb.operationComplete(BKException.Code.ZKException, null);"},{"sha":"8a82d41b891f583e7f435d9f5d30981b9b6e4964","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.bookkeeper.meta;\n \n+import com.google.common.base.Optional;\n import static org.apache.bookkeeper.metastore.MetastoreTable.ALL_FIELDS;\n import static org.apache.bookkeeper.metastore.MetastoreTable.NON_FIELDS;\n \n@@ -408,7 +409,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n                     LedgerMetadata metadata;\n                     try {\n                         metadata = LedgerMetadata\n-                                .parseConfig(value.getValue().getField(META_FIELD), value.getVersion());\n+                                .parseConfig(value.getValue().getField(META_FIELD), value.getVersion(), Optional.<Long>absent());\n                     } catch (IOException e) {\n                         LOG.error(\"Could not parse ledger metadata for ledger \" + ledgerId + \" : \", e);\n                         readCb.operationComplete(BKException.Code.MetaStoreException, null);"},{"sha":"4552144ab9de315c12248cd8653754022188c05d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","status":"modified","additions":72,"deletions":14,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FDataFormats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FDataFormats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FDataFormats.java?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -52,6 +52,10 @@ org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.SegmentOrBuilder ge\n     // optional int32 ackQuorumSize = 9;\n     boolean hasAckQuorumSize();\n     int getAckQuorumSize();\n+    \n+    // optional int64 ctime = 10;\n+    boolean hasCtime();\n+    long getCtime();\n   }\n   public static final class LedgerMetadataFormat extends\n       com.google.protobuf.GeneratedMessage\n@@ -781,6 +785,16 @@ public int getAckQuorumSize() {\n       return ackQuorumSize_;\n     }\n     \n+    // optional int64 ctime = 10;\n+    public static final int CTIME_FIELD_NUMBER = 10;\n+    private long ctime_;\n+    public boolean hasCtime() {\n+      return ((bitField0_ & 0x00000100) == 0x00000100);\n+    }\n+    public long getCtime() {\n+      return ctime_;\n+    }\n+    \n     private void initFields() {\n       quorumSize_ = 0;\n       ensembleSize_ = 0;\n@@ -791,6 +805,7 @@ private void initFields() {\n       digestType_ = org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.DigestType.CRC32;\n       password_ = com.google.protobuf.ByteString.EMPTY;\n       ackQuorumSize_ = 0;\n+      ctime_ = 0L;\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -853,6 +868,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000080) == 0x00000080)) {\n         output.writeInt32(9, ackQuorumSize_);\n       }\n+      if (((bitField0_ & 0x00000100) == 0x00000100)) {\n+        output.writeInt64(10, ctime_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -898,6 +916,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeInt32Size(9, ackQuorumSize_);\n       }\n+      if (((bitField0_ & 0x00000100) == 0x00000100)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeInt64Size(10, ctime_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -1045,6 +1067,8 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000080);\n         ackQuorumSize_ = 0;\n         bitField0_ = (bitField0_ & ~0x00000100);\n+        ctime_ = 0L;\n+        bitField0_ = (bitField0_ & ~0x00000200);\n         return this;\n       }\n       \n@@ -1124,6 +1148,10 @@ public org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat buildPartial\n           to_bitField0_ |= 0x00000080;\n         }\n         result.ackQuorumSize_ = ackQuorumSize_;\n+        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {\n+          to_bitField0_ |= 0x00000100;\n+        }\n+        result.ctime_ = ctime_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -1190,6 +1218,9 @@ public Builder mergeFrom(org.apache.bookkeeper.proto.DataFormats.LedgerMetadataF\n         if (other.hasAckQuorumSize()) {\n           setAckQuorumSize(other.getAckQuorumSize());\n         }\n+        if (other.hasCtime()) {\n+          setCtime(other.getCtime());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -1301,6 +1332,11 @@ public Builder mergeFrom(\n               ackQuorumSize_ = input.readInt32();\n               break;\n             }\n+            case 80: {\n+              bitField0_ |= 0x00000200;\n+              ctime_ = input.readInt64();\n+              break;\n+            }\n           }\n         }\n       }\n@@ -1670,6 +1706,27 @@ public Builder clearAckQuorumSize() {\n         return this;\n       }\n       \n+      // optional int64 ctime = 10;\n+      private long ctime_ ;\n+      public boolean hasCtime() {\n+        return ((bitField0_ & 0x00000200) == 0x00000200);\n+      }\n+      public long getCtime() {\n+        return ctime_;\n+      }\n+      public Builder setCtime(long value) {\n+        bitField0_ |= 0x00000200;\n+        ctime_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearCtime() {\n+        bitField0_ = (bitField0_ & ~0x00000200);\n+        ctime_ = 0L;\n+        onChanged();\n+        return this;\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:LedgerMetadataFormat)\n     }\n     \n@@ -3993,26 +4050,27 @@ void setBookieId(com.google.protobuf.ByteString value) {\n       descriptor;\n   static {\n     java.lang.String[] descriptorData = {\n-      \"\\n src/main/proto/DataFormats.proto\\\"\\262\\003\\n\\024L\" +\n+      \"\\n src/main/proto/DataFormats.proto\\\"\\301\\003\\n\\024L\" +\n       \"edgerMetadataFormat\\022\\022\\n\\nquorumSize\\030\\001 \\002(\\005\\022\" +\n       \"\\024\\n\\014ensembleSize\\030\\002 \\002(\\005\\022\\016\\n\\006length\\030\\003 \\002(\\003\\022\\023\\n\" +\n       \"\\013lastEntryId\\030\\004 \\001(\\003\\0220\\n\\005state\\030\\005 \\002(\\0162\\033.Ledg\" +\n       \"erMetadataFormat.State:\\004OPEN\\022.\\n\\007segment\\030\" +\n       \"\\006 \\003(\\0132\\035.LedgerMetadataFormat.Segment\\0224\\n\\n\" +\n       \"digestType\\030\\007 \\001(\\0162 .LedgerMetadataFormat.\" +\n       \"DigestType\\022\\020\\n\\010password\\030\\010 \\001(\\014\\022\\025\\n\\rackQuoru\" +\n-      \"mSize\\030\\t \\001(\\005\\0327\\n\\007Segment\\022\\026\\n\\016ensembleMember\" +\n-      \"\\030\\001 \\003(\\t\\022\\024\\n\\014firstEntryId\\030\\002 \\002(\\003\\\".\\n\\005State\\022\\010\\n\",\n-      \"\\004OPEN\\020\\001\\022\\017\\n\\013IN_RECOVERY\\020\\002\\022\\n\\n\\006CLOSED\\020\\003\\\"!\\n\\n\" +\n-      \"DigestType\\022\\t\\n\\005CRC32\\020\\001\\022\\010\\n\\004HMAC\\020\\002\\\"@\\n\\037Ledge\" +\n-      \"rRereplicationLayoutFormat\\022\\014\\n\\004type\\030\\001 \\002(\\t\" +\n-      \"\\022\\017\\n\\007version\\030\\002 \\002(\\005\\\".\\n\\033UnderreplicatedLedg\" +\n-      \"erFormat\\022\\017\\n\\007replica\\030\\001 \\003(\\t\\\"^\\n\\014CookieForma\" +\n-      \"t\\022\\022\\n\\nbookieHost\\030\\001 \\002(\\t\\022\\022\\n\\njournalDir\\030\\002 \\002(\" +\n-      \"\\t\\022\\022\\n\\nledgerDirs\\030\\003 \\002(\\t\\022\\022\\n\\ninstanceId\\030\\004 \\001(\" +\n-      \"\\t\\\"\\\"\\n\\016LockDataFormat\\022\\020\\n\\010bookieId\\030\\001 \\001(\\t\\\"%\\n\" +\n-      \"\\021AuditorVoteFormat\\022\\020\\n\\010bookieId\\030\\001 \\001(\\tB\\037\\n\\033\" +\n-      \"org.apache.bookkeeper.protoH\\001\"\n+      \"mSize\\030\\t \\001(\\005\\022\\r\\n\\005ctime\\030\\n \\001(\\003\\0327\\n\\007Segment\\022\\026\\n\" +\n+      \"\\016ensembleMember\\030\\001 \\003(\\t\\022\\024\\n\\014firstEntryId\\030\\002 \",\n+      \"\\002(\\003\\\".\\n\\005State\\022\\010\\n\\004OPEN\\020\\001\\022\\017\\n\\013IN_RECOVERY\\020\\002\\022\" +\n+      \"\\n\\n\\006CLOSED\\020\\003\\\"!\\n\\nDigestType\\022\\t\\n\\005CRC32\\020\\001\\022\\010\\n\\004\" +\n+      \"HMAC\\020\\002\\\"@\\n\\037LedgerRereplicationLayoutForma\" +\n+      \"t\\022\\014\\n\\004type\\030\\001 \\002(\\t\\022\\017\\n\\007version\\030\\002 \\002(\\005\\\".\\n\\033Unde\" +\n+      \"rreplicatedLedgerFormat\\022\\017\\n\\007replica\\030\\001 \\003(\\t\" +\n+      \"\\\"^\\n\\014CookieFormat\\022\\022\\n\\nbookieHost\\030\\001 \\002(\\t\\022\\022\\n\\n\" +\n+      \"journalDir\\030\\002 \\002(\\t\\022\\022\\n\\nledgerDirs\\030\\003 \\002(\\t\\022\\022\\n\\n\" +\n+      \"instanceId\\030\\004 \\001(\\t\\\"\\\"\\n\\016LockDataFormat\\022\\020\\n\\010bo\" +\n+      \"okieId\\030\\001 \\001(\\t\\\"%\\n\\021AuditorVoteFormat\\022\\020\\n\\010boo\" +\n+      \"kieId\\030\\001 \\001(\\tB\\037\\n\\033org.apache.bookkeeper.pro\",\n+      \"toH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -4024,7 +4082,7 @@ public com.google.protobuf.ExtensionRegistry assignDescriptors(\n           internal_static_LedgerMetadataFormat_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_LedgerMetadataFormat_descriptor,\n-              new java.lang.String[] { \"QuorumSize\", \"EnsembleSize\", \"Length\", \"LastEntryId\", \"State\", \"Segment\", \"DigestType\", \"Password\", \"AckQuorumSize\", },\n+              new java.lang.String[] { \"QuorumSize\", \"EnsembleSize\", \"Length\", \"LastEntryId\", \"State\", \"Segment\", \"DigestType\", \"Password\", \"AckQuorumSize\", \"Ctime\", },\n               org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.class,\n               org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.Builder.class);\n           internal_static_LedgerMetadataFormat_Segment_descriptor ="},{"sha":"6d97c3a452e80aac055dab4eb77752ee358d1e08","filename":"bookkeeper-server/src/main/proto/DataFormats.proto","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fproto%2FDataFormats.proto","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Fmain%2Fproto%2FDataFormats.proto","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fproto%2FDataFormats.proto?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -48,6 +48,8 @@ message LedgerMetadataFormat {\n     optional bytes password = 8;\n \n     optional int32 ackQuorumSize = 9;\n+    \n+    optional int64 ctime = 10;\n }\n \n message LedgerRereplicationLayoutFormat {"},{"sha":"70ff6e0ad097d76752befe385f1dfe785e0e2c4f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bac3ed3603f9dc9864beb610bea215c186ef4fab/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java?ref=bac3ed3603f9dc9864beb610bea215c186ef4fab","patch":"@@ -108,4 +108,29 @@ public void testRemoveNotSupported()\n         Assert.fail(\"Remove is not supported, we shouln't have reached this point\");\n \n     }\n+    \n+    @Test(timeout = 60000)\n+    public void testCtimeRecorded()\n+            throws Exception {\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+\n+        bkc.createLedger(digestType, \"testPasswd\".\n+                getBytes()).close();\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterable<Long> iterable = admin.listLedgers();\n+\n+        for (Long lId : iterable) {\n+            LedgerHandle ledger = bkc.openLedger(lId, digestType, \"testPasswd\".getBytes());\n+            LedgerMetadata metaData = ledger.getLedgerMetadata();\n+            Assert.assertTrue(\"ctime was not recorded\", metaData.getCtime() > 0);\n+        }\n+\n+    }\n+    \n }"}]}