{"sha":"715fa5cefc31a7041725cb959641287f60921dd7","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjcxNWZhNWNlZmMzMWE3MDQxNzI1Y2I5NTk2NDEyODdmNjA5MjFkZDc=","commit":{"author":{"name":"Brennon York","email":"brennon.york@capitalone.com","date":"2016-12-20T06:25:03Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-20T06:25:03Z"},"message":"DL-122: Use assertions from Junit rather than assert() for tests\n\n* changed all instances of `assert()` to junit versions in `src/test`\n\nHere is the script I used to find all instances of `assert()` inside the `src/test` folder:\n\n```\ngrep -r \"assert(\" * 2>/dev/null | grep -v \"main\"\n```\n\nThe `grep -v \"main\"` removes all instances of the usage within the main source tree (which there are quite a few). I did this as I assumed the JIRA ticket spirit was not to remove those instances from the main tree and thus would require including `junit` in core compilation rather than scoped for `test` as is.\n\nAuthor: Brennon York <brennon.york@capitalone.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #77 from brennonyork/DL-122","tree":{"sha":"fcb3adb6392a7c564c62027a1352d64bbf789891","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/fcb3adb6392a7c564c62027a1352d64bbf789891"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/715fa5cefc31a7041725cb959641287f60921dd7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/715fa5cefc31a7041725cb959641287f60921dd7","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/715fa5cefc31a7041725cb959641287f60921dd7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/715fa5cefc31a7041725cb959641287f60921dd7/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"64bcb21f5e6e21b49ac743941445d63b8b4e87d3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/64bcb21f5e6e21b49ac743941445d63b8b4e87d3","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/64bcb21f5e6e21b49ac743941445d63b8b4e87d3"}],"stats":{"total":57,"additions":30,"deletions":27},"files":[{"sha":"57b576e7c14e07fe483b496097a371bca83e41bc","filename":"src/test/java/com/twitter/distributedlog/DLMTestUtil.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java?ref=715fa5cefc31a7041725cb959641287f60921dd7","patch":"@@ -221,7 +221,7 @@ public static LogRecord getLogRecordInstance(long txId, int size) {\n     public static void verifyLogRecord(LogRecord record) {\n         assertEquals(generatePayload(record.getTransactionId()).length, record.getPayload().length);\n         assertArrayEquals(generatePayload(record.getTransactionId()), record.getPayload());\n-        assert(!record.isControl());\n+        assertTrue(!record.isControl());\n         verifyPayload(record.getTransactionId(), record.getPayload());\n     }\n \n@@ -275,7 +275,7 @@ static LogRecord getEmptyLogRecordInstance(long txId) {\n     }\n \n     static void verifyEmptyLogRecord(LogRecord record) {\n-        assert(record.getPayload().length == 0);\n+        assertEquals(record.getPayload().length, 0);\n     }\n \n     public static LogRecordWithDLSN getLogRecordWithDLSNInstance(DLSN dlsn, long txId) {"},{"sha":"38aaa5b3981de9b177f8ab129091cd2117e04c8b","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderWriter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java?ref=715fa5cefc31a7041725cb959641287f60921dd7","patch":"@@ -1108,8 +1108,8 @@ public void onFailure(Throwable cause) {\n         writer.abort();\n \n         executionTime.stop();\n-        assert(!(Thread.interrupted()));\n-        assert(success);\n+        assertTrue(!(Thread.interrupted()));\n+        assertTrue(success);\n \n         LogRecordWithDLSN last = dlm.getLastLogRecord();\n         LOG.info(\"Last Entry {}; elapsed time {}\", last.getDlsn().getEntryId(), executionTime.elapsed(TimeUnit.MILLISECONDS));\n@@ -1546,9 +1546,9 @@ public void run() {\n         } catch (IdleReaderException exc) {\n             exceptionEncountered = true;\n         }\n-        assert(!exceptionEncountered);\n+        assertTrue(!exceptionEncountered);\n         Assert.assertEquals(recordCount, segmentSize * numSegments);\n-        assert(!currentThread.isInterrupted());\n+        assertTrue(!currentThread.isInterrupted());\n         executor.shutdown();\n     }\n "},{"sha":"c0789ecb289e74a220d107758a6054a36762e159","filename":"src/test/java/com/twitter/distributedlog/TestBKDistributedLogManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java?ref=715fa5cefc31a7041725cb959641287f60921dd7","patch":"@@ -725,7 +725,7 @@ public void testWriteFailsAfterMarkEndOfStream() throws Exception {\n         LogRecord last = dlm.getLastLogRecord();\n         assertEquals(txid - 1, last.getTransactionId());\n         DLMTestUtil.verifyLogRecord(last);\n-        assert(dlm.isEndOfStreamMarked());\n+        assertTrue(dlm.isEndOfStreamMarked());\n \n         LogWriter writer = null;\n         boolean exceptionEncountered = false;\n@@ -738,7 +738,7 @@ public void testWriteFailsAfterMarkEndOfStream() throws Exception {\n             exceptionEncountered = true;\n         }\n         writer.close();\n-        assert(exceptionEncountered);\n+        assertTrue(exceptionEncountered);\n     }\n \n     @Test(timeout = 60000)\n@@ -805,7 +805,7 @@ public void testMaxLogRecSize() throws Exception {\n             FutureUtils.result(out.asyncClose());\n         }\n         bkdlmAndClients.close();\n-        assert(exceptionEncountered);\n+        assertTrue(exceptionEncountered);\n     }\n \n     @Test(timeout = 60000)\n@@ -831,7 +831,7 @@ public void testMaxTransmissionSize() throws Exception {\n             FutureUtils.result(out.asyncClose());\n         }\n         bkdlmAndClients.close();\n-        assert(!exceptionEncountered);\n+        assertTrue(!exceptionEncountered);\n     }\n \n     @Test(timeout = 60000)\n@@ -884,7 +884,7 @@ public void deleteDuringRead() throws Exception {\n         } catch (LogNotFoundException exc) {\n             exceptionEncountered = true;\n         }\n-        assert(exceptionEncountered);\n+        assertTrue(exceptionEncountered);\n         reader.close();\n     }\n "},{"sha":"b3724bc990ea3f5e4ac2b5310a093b7c7f2af665","filename":"src/test/java/com/twitter/distributedlog/TestBKDistributedLogNamespace.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java?ref=715fa5cefc31a7041725cb959641287f60921dd7","patch":"@@ -49,6 +49,7 @@\n import org.slf4j.LoggerFactory;\n \n \n+import static org.hamcrest.core.IsNot.not;\n import static org.junit.Assert.*;\n \n public class TestBKDistributedLogNamespace extends TestDistributedLogBase {\n@@ -122,10 +123,10 @@ public void testClientSharingOptions() throws Exception {\n             BKDistributedLogManager bkdlm2 = (BKDistributedLogManager)namespace.createDistributedLogManager(\"perstream2\",\n                 DistributedLogManagerFactory.ClientSharingOption.PerStreamClients);\n \n-            assert(bkdlm1.getReaderBKC() != bkdlm2.getReaderBKC());\n-            assert(bkdlm1.getWriterBKC() != bkdlm2.getWriterBKC());\n-            assert(bkdlm1.getReaderZKC() != bkdlm2.getReaderZKC());\n-            assert(bkdlm1.getWriterZKC() != bkdlm2.getWriterZKC());\n+            assertThat(bkdlm1.getReaderBKC(), not(bkdlm2.getReaderBKC()));\n+            assertThat(bkdlm1.getWriterBKC(), not(bkdlm2.getWriterBKC()));\n+            assertThat(bkdlm1.getReaderZKC(), not(bkdlm2.getReaderZKC()));\n+            assertThat(bkdlm1.getWriterZKC(), not(bkdlm2.getWriterZKC()));\n \n         }\n \n@@ -136,10 +137,10 @@ public void testClientSharingOptions() throws Exception {\n             BKDistributedLogManager bkdlm2 = (BKDistributedLogManager)namespace.createDistributedLogManager(\"sharedZK2\",\n                 DistributedLogManagerFactory.ClientSharingOption.SharedZKClientPerStreamBKClient);\n \n-            assert(bkdlm1.getReaderBKC() != bkdlm2.getReaderBKC());\n-            assert(bkdlm1.getWriterBKC() != bkdlm2.getWriterBKC());\n-            assert(bkdlm1.getReaderZKC() == bkdlm2.getReaderZKC());\n-            assert(bkdlm1.getWriterZKC() == bkdlm2.getWriterZKC());\n+            assertThat(bkdlm1.getReaderBKC(), not(bkdlm2.getReaderBKC()));\n+            assertThat(bkdlm1.getWriterBKC(), not(bkdlm2.getWriterBKC()));\n+            assertEquals(bkdlm1.getReaderZKC(), bkdlm2.getReaderZKC());\n+            assertEquals(bkdlm1.getWriterZKC(), bkdlm2.getWriterZKC());\n         }\n \n         {\n@@ -149,10 +150,10 @@ public void testClientSharingOptions() throws Exception {\n             BKDistributedLogManager bkdlm2 = (BKDistributedLogManager)namespace.createDistributedLogManager(\"sharedBoth2\",\n                 DistributedLogManagerFactory.ClientSharingOption.SharedClients);\n \n-            assert(bkdlm1.getReaderBKC() == bkdlm2.getReaderBKC());\n-            assert(bkdlm1.getWriterBKC() == bkdlm2.getWriterBKC());\n-            assert(bkdlm1.getReaderZKC() == bkdlm2.getReaderZKC());\n-            assert(bkdlm1.getWriterZKC() == bkdlm2.getWriterZKC());\n+            assertEquals(bkdlm1.getReaderBKC(), bkdlm2.getReaderBKC());\n+            assertEquals(bkdlm1.getWriterBKC(), bkdlm2.getWriterBKC());\n+            assertEquals(bkdlm1.getReaderZKC(), bkdlm2.getReaderZKC());\n+            assertEquals(bkdlm1.getWriterZKC(), bkdlm2.getWriterZKC());\n         }\n \n     }"},{"sha":"604be0ee12abf2db353a871215b1fa99797623d3","filename":"src/test/java/com/twitter/distributedlog/TestDistributedLogBase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/715fa5cefc31a7041725cb959641287f60921dd7/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogBase.java?ref=715fa5cefc31a7041725cb959641287f60921dd7","patch":"@@ -17,6 +17,8 @@\n  */\n package com.twitter.distributedlog;\n \n+import static org.junit.Assert.assertTrue;\n+\n import com.twitter.distributedlog.impl.BKLogSegmentEntryWriter;\n import com.twitter.distributedlog.logsegment.LogSegmentEntryWriter;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataStore;\n@@ -188,27 +190,27 @@ public DLMTestUtil.BKLogPartitionWriteHandlerAndClients createNewBKDLM(\n     @SuppressWarnings(\"deprecation\")\n     protected LogSegmentMetadataStore getLogSegmentMetadataStore(DistributedLogManagerFactory factory) {\n         DistributedLogNamespace namespace = factory.getNamespace();\n-        assert(namespace instanceof BKDistributedLogNamespace);\n+        assertTrue(namespace instanceof BKDistributedLogNamespace);\n         return ((BKDistributedLogNamespace) namespace).getWriterSegmentMetadataStore();\n     }\n \n     @SuppressWarnings(\"deprecation\")\n     protected ZooKeeperClient getZooKeeperClient(DistributedLogManagerFactory factory) throws Exception {\n         DistributedLogNamespace namespace = factory.getNamespace();\n-        assert(namespace instanceof BKDistributedLogNamespace);\n+        assertTrue(namespace instanceof BKDistributedLogNamespace);\n         return ((BKDistributedLogNamespace) namespace).getSharedWriterZKCForDL();\n     }\n \n     @SuppressWarnings(\"deprecation\")\n     protected BookKeeperClient getBookKeeperClient(DistributedLogManagerFactory factory) throws Exception {\n         DistributedLogNamespace namespace = factory.getNamespace();\n-        assert(namespace instanceof BKDistributedLogNamespace);\n+        assertTrue(namespace instanceof BKDistributedLogNamespace);\n         return ((BKDistributedLogNamespace) namespace).getReaderBKC();\n     }\n \n     protected LedgerHandle getLedgerHandle(BKLogSegmentWriter segmentWriter) {\n         LogSegmentEntryWriter entryWriter = segmentWriter.getEntryWriter();\n-        assert(entryWriter instanceof BKLogSegmentEntryWriter);\n+        assertTrue(entryWriter instanceof BKLogSegmentEntryWriter);\n         return ((BKLogSegmentEntryWriter) entryWriter).getLedgerHandle();\n     }\n }"}]}