{"sha":"30742c0375eb11dd653f92f734aaa478faa6c0cc","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjMwNzQyYzAzNzVlYjExZGQ2NTNmOTJmNzM0YWFhNDc4ZmFhNmMwY2M=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-28T00:45:43Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-28T00:45:43Z"},"message":"DL-150: Ensure namespace path is created for TestZKLogMetadataForWriter\n\nAuthor: Sijie Guo <sijieg@twitter.com>\n\nReviewers: Leigh Stewart <lstewart@apache.org>\n\nCloses #83 from sijie/sijie/FixTestCreateLogMetadata","tree":{"sha":"7e9ed0b5ef37c79f6e1292ef2e80724d34de97f1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/7e9ed0b5ef37c79f6e1292ef2e80724d34de97f1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/30742c0375eb11dd653f92f734aaa478faa6c0cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/30742c0375eb11dd653f92f734aaa478faa6c0cc","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/30742c0375eb11dd653f92f734aaa478faa6c0cc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/30742c0375eb11dd653f92f734aaa478faa6c0cc/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3953dfb058ce841c8a23faadfc707ed5995f7b40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3953dfb058ce841c8a23faadfc707ed5995f7b40","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/3953dfb058ce841c8a23faadfc707ed5995f7b40"}],"stats":{"total":30,"additions":19,"deletions":11},"files":[{"sha":"648b82894615d7d1d8fbb8492d5ec0d7f39cf171","filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogMetadataForWriter.java","status":"modified","additions":19,"deletions":11,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/30742c0375eb11dd653f92f734aaa478faa6c0cc/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/30742c0375eb11dd653f92f734aaa478faa6c0cc/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java?ref=30742c0375eb11dd653f92f734aaa478faa6c0cc","patch":"@@ -29,20 +29,24 @@\n import com.twitter.distributedlog.DistributedLogConstants;\n import com.twitter.distributedlog.exceptions.LogNotFoundException;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClusterTestCase;\n import com.twitter.distributedlog.util.DLUtils;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.Utils;\n import org.apache.bookkeeper.meta.ZkVersion;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.Transaction;\n+import org.apache.zookeeper.ZooDefs;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.net.URI;\n import java.util.List;\n@@ -55,12 +59,15 @@\n  */\n public class TestZKLogMetadataForWriter extends ZooKeeperClusterTestCase {\n \n+    private static final Logger logger = LoggerFactory.getLogger(TestZKLogMetadataForWriter.class);\n+\n     private final static int sessionTimeoutMs = 30000;\n \n     @Rule\n     public TestName testName = new TestName();\n \n     private ZooKeeperClient zkc;\n+    private URI uri;\n \n     private static void createLog(ZooKeeperClient zk, URI uri, String logName, String logIdentifier)\n             throws Exception {\n@@ -98,6 +105,17 @@ public void setup() throws Exception {\n                 .uri(DLMTestUtil.createDLMURI(zkPort, \"/\"))\n                 .sessionTimeoutMs(sessionTimeoutMs)\n                 .build();\n+        uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n+        try {\n+            ZkUtils.createFullPathOptimistic(\n+                    zkc.get(),\n+                    uri.getPath(),\n+                    new byte[0],\n+                    ZooDefs.Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.PERSISTENT);\n+        } catch (KeeperException.NodeExistsException nee) {\n+            logger.debug(\"The namespace uri already exists.\");\n+        }\n     }\n \n     @After\n@@ -187,7 +205,6 @@ private void testCreateLogMetadataWithMissingPaths(URI uri,\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingLogSegmentsPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -198,7 +215,6 @@ public void testCreateLogMetadataMissingLogSegmentsPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingMaxTxIdPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -209,7 +225,6 @@ public void testCreateLogMetadataMissingMaxTxIdPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingLockPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -220,7 +235,6 @@ public void testCreateLogMetadataMissingLockPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingReadLockPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -231,7 +245,6 @@ public void testCreateLogMetadataMissingReadLockPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingVersionPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -253,7 +266,6 @@ public void testCreateLogMetadataMissingAllocatorPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataMissingAllPath() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         String logRootPath = getLogRootPath(uri, logName, logIdentifier);\n@@ -269,7 +281,6 @@ public void testCreateLogMetadataMissingAllPath() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataOnExistedLog() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         List<String> pathsToDelete = Lists.newArrayList();\n@@ -278,7 +289,6 @@ public void testCreateLogMetadataOnExistedLog() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadata() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         List<String> pathsToDelete = Lists.newArrayList();\n@@ -288,7 +298,6 @@ public void testCreateLogMetadata() throws Exception {\n \n     @Test(timeout = 60000, expected = LogNotFoundException.class)\n     public void testCreateLogMetadataWithCreateIfNotExistsSetToFalse() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         FutureUtils.result(ZKLogMetadataForWriter.of(uri, logName, logIdentifier,\n@@ -297,7 +306,6 @@ public void testCreateLogMetadataWithCreateIfNotExistsSetToFalse() throws Except\n \n     @Test(timeout = 60000)\n     public void testCreateLogMetadataWithCustomMetadata() throws Exception {\n-        URI uri = DLMTestUtil.createDLMURI(zkPort, \"\");\n         String logName = testName.getMethodName();\n         String logIdentifier = \"<default>\";\n         List<String> pathsToDelete = Lists.newArrayList();"}]}