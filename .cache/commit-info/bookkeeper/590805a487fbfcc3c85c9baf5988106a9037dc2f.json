{"sha":"590805a487fbfcc3c85c9baf5988106a9037dc2f","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjU5MDgwNWE0ODdmYmZjYzNjODVjOWJhZjU5ODgxMDZhOTAzN2RjMmY=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T00:27:38Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:12:04Z"},"message":"DL-160: Remove 'DLSN' suffix from async and sync readers","tree":{"sha":"4725684317e6cdf54499117a1839221bbf6be572","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/4725684317e6cdf54499117a1839221bbf6be572"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/590805a487fbfcc3c85c9baf5988106a9037dc2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/590805a487fbfcc3c85c9baf5988106a9037dc2f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/590805a487fbfcc3c85c9baf5988106a9037dc2f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/590805a487fbfcc3c85c9baf5988106a9037dc2f/comments","author":null,"committer":null,"parents":[{"sha":"d7105aa88f29faecd779c4371fb023775e2c7e40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d7105aa88f29faecd779c4371fb023775e2c7e40","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d7105aa88f29faecd779c4371fb023775e2c7e40"}],"stats":{"total":82,"additions":41,"deletions":41},"files":[{"sha":"18d2e1581fdd358eef15acf8fdcff62a5b7db9da","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogReader.java","status":"renamed","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReader.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -72,8 +72,8 @@\n  * <li> `async_reader`/idle_reader_error: counter. the number idle reader errors.\n  * </ul>\n  */\n-class BKAsyncLogReaderDLSN implements AsyncLogReader, Runnable, AsyncNotification {\n-    static final Logger LOG = LoggerFactory.getLogger(BKAsyncLogReaderDLSN.class);\n+class BKAsyncLogReader implements AsyncLogReader, Runnable, AsyncNotification {\n+    static final Logger LOG = LoggerFactory.getLogger(BKAsyncLogReader.class);\n \n     private static final Function1<List<LogRecordWithDLSN>, LogRecordWithDLSN> READ_NEXT_MAP_FUNCTION =\n             new AbstractFunction1<List<LogRecordWithDLSN>, LogRecordWithDLSN>() {\n@@ -207,12 +207,12 @@ void complete() {\n         }\n     }\n \n-    BKAsyncLogReaderDLSN(BKDistributedLogManager bkdlm,\n-                         ScheduledExecutorService executorService,\n-                         DLSN startDLSN,\n-                         Optional<String> subscriberId,\n-                         boolean returnEndOfStreamRecord,\n-                         StatsLogger statsLogger) {\n+    BKAsyncLogReader(BKDistributedLogManager bkdlm,\n+                     ScheduledExecutorService executorService,\n+                     DLSN startDLSN,\n+                     Optional<String> subscriberId,\n+                     boolean returnEndOfStreamRecord,\n+                     StatsLogger statsLogger) {\n         this.bkDistributedLogManager = bkdlm;\n         this.executorService = executorService;\n         this.readHandler = bkDistributedLogManager.createReadHandler(subscriberId,\n@@ -428,7 +428,7 @@ public void onSuccess(Void value) {\n                                     .map(new AbstractFunction1<Versioned<List<LogSegmentMetadata>>, BoxedUnit>() {\n                                         @Override\n                                         public BoxedUnit apply(Versioned<List<LogSegmentMetadata>> logSegments) {\n-                                            readAheadEntryReader.addStateChangeNotification(BKAsyncLogReaderDLSN.this);\n+                                            readAheadEntryReader.addStateChangeNotification(BKAsyncLogReader.this);\n                                             readAheadEntryReader.start(logSegments.getValue());\n                                             return BoxedUnit.UNIT;\n                                         }","previous_filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogReaderDLSN.java"},{"sha":"219c0cf837f0b8342060ce18f15341ce8bc5f37a","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -98,7 +98,7 @@\n  * <li> `log_writer/*`: all asynchronous writer related metrics are exposed under scope `log_writer`.\n  * See {@link BKAsyncLogWriter} for detail stats.\n  * <li> `async_reader/*`: all asyncrhonous reader related metrics are exposed under scope `async_reader`.\n- * See {@link BKAsyncLogReaderDLSN} for detail stats.\n+ * See {@link BKAsyncLogReader} for detail stats.\n  * <li> `writer_future_pool/*`: metrics about the future pools that used by writers are exposed under\n  * scope `writer_future_pool`. See {@link MonitoredFuturePool} for detail stats.\n  * <li> `reader_future_pool/*`: metrics about the future pools that used by readers are exposed under\n@@ -955,7 +955,7 @@ public AsyncLogReader getAsyncLogReader(DLSN fromDLSN) throws IOException {\n     @Override\n     public Future<AsyncLogReader> openAsyncLogReader(DLSN fromDLSN) {\n         Optional<String> subscriberId = Optional.absent();\n-        AsyncLogReader reader = new BKAsyncLogReaderDLSN(\n+        AsyncLogReader reader = new BKAsyncLogReader(\n                 this,\n                 scheduler,\n                 fromDLSN,\n@@ -993,7 +993,7 @@ protected Future<AsyncLogReader> getAsyncLogReaderWithLock(final Optional<DLSN>\n         if (!fromDLSN.isPresent() && !subscriberId.isPresent()) {\n             return Future.exception(new UnexpectedException(\"Neither from dlsn nor subscriber id is provided.\"));\n         }\n-        final BKAsyncLogReaderDLSN reader = new BKAsyncLogReaderDLSN(\n+        final BKAsyncLogReader reader = new BKAsyncLogReader(\n                 BKDistributedLogManager.this,\n                 scheduler,\n                 fromDLSN.isPresent() ? fromDLSN.get() : DLSN.InitialDLSN,\n@@ -1077,7 +1077,7 @@ LogReader getInputStreamInternal(DLSN fromDLSN, Optional<Long> fromTxnId)\n             throws IOException {\n         LOG.info(\"Create sync reader starting from {}\", fromDLSN);\n         checkClosedOrInError(\"getInputStream\");\n-        return new BKSyncLogReaderDLSN(\n+        return new BKSyncLogReader(\n                 conf,\n                 this,\n                 fromDLSN,"},{"sha":"308f42ad9860edfb7f9c0583055b608f7c4eeedf","filename":"src/main/java/com/twitter/distributedlog/BKSyncLogReader.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReader.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -41,7 +41,7 @@\n /**\n  * Synchronous Log Reader based on {@link AsyncLogReader}\n  */\n-class BKSyncLogReaderDLSN implements LogReader, AsyncNotification {\n+class BKSyncLogReader implements LogReader, AsyncNotification {\n \n     private final BKDistributedLogManager bkdlm;\n     private final BKLogReadHandler readHandler;\n@@ -63,11 +63,11 @@ class BKSyncLogReaderDLSN implements LogReader, AsyncNotification {\n     // Stats\n     private final Counter idleReaderError;\n \n-    BKSyncLogReaderDLSN(DistributedLogConfiguration conf,\n-                        BKDistributedLogManager bkdlm,\n-                        DLSN startDLSN,\n-                        Optional<Long> startTransactionId,\n-                        StatsLogger statsLogger) throws IOException {\n+    BKSyncLogReader(DistributedLogConfiguration conf,\n+                    BKDistributedLogManager bkdlm,\n+                    DLSN startDLSN,\n+                    Optional<Long> startTransactionId,\n+                    StatsLogger statsLogger) throws IOException {\n         this.bkdlm = bkdlm;\n         this.readHandler = bkdlm.createReadHandler(\n                 Optional.<String>absent(),\n@@ -104,7 +104,7 @@ private void startReadAhead(DLSN startDLSN) throws IOException {\n                 .map(new AbstractFunction1<Versioned<List<LogSegmentMetadata>>, BoxedUnit>() {\n                     @Override\n                     public BoxedUnit apply(Versioned<List<LogSegmentMetadata>> logSegments) {\n-                        readAheadReader.addStateChangeNotification(BKSyncLogReaderDLSN.this);\n+                        readAheadReader.addStateChangeNotification(BKSyncLogReader.this);\n                         readAheadReader.start(logSegments.getValue());\n                         return BoxedUnit.UNIT;\n                     }","previous_filename":"src/main/java/com/twitter/distributedlog/BKSyncLogReaderDLSN.java"},{"sha":"c07fad936f44052862f64f9c850243460053ce93","filename":"src/main/resources/findbugsExclude.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fresources%2FfindbugsExclude.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Fmain%2Fresources%2FfindbugsExclude.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fresources%2FfindbugsExclude.xml?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -33,7 +33,7 @@\n     <Bug pattern=\"EI_EXPOSE_REP\" />\n   </Match>\n   <Match>\n-    <Class name=\"com.twitter.distributedlog.BKAsyncLogReaderDLSN\" />\n+    <Class name=\"com.twitter.distributedlog.BKAsyncLogReader\" />\n     <Method name=\"run\" />\n     <Bug pattern=\"JLM_JSR166_UTILCONCURRENT_MONITORENTER\" />\n   </Match>"},{"sha":"3a1ab8863f4df8b69d13d532f89571610bd7ea6b","filename":"src/test/java/com/twitter/distributedlog/NonBlockingReadsTestUtil.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FNonBlockingReadsTestUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FNonBlockingReadsTestUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FNonBlockingReadsTestUtil.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -46,15 +46,15 @@ static void readNonBlocking(DistributedLogManager dlm,\n                                 boolean forceStall,\n                                 long segmentSize,\n                                 boolean waitForIdle) throws Exception {\n-        BKSyncLogReaderDLSN reader = null;\n+        BKSyncLogReader reader = null;\n         try {\n-            reader = (BKSyncLogReaderDLSN) dlm.getInputStream(1);\n+            reader = (BKSyncLogReader) dlm.getInputStream(1);\n         } catch (LogNotFoundException lnfe) {\n         }\n         while (null == reader) {\n             TimeUnit.MILLISECONDS.sleep(20);\n             try {\n-                reader = (BKSyncLogReaderDLSN) dlm.getInputStream(1);\n+                reader = (BKSyncLogReader) dlm.getInputStream(1);\n             } catch (LogNotFoundException lnfe) {\n             } catch (LogEmptyException lee) {\n             } catch (IOException ioe) {"},{"sha":"a6cffbb71c6c24f0f9bd94ac33bb57650576f0e9","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderLock.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderLock.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderLock.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderLock.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -75,7 +75,7 @@ public void testReaderLockIfLockPathDoesntExist() throws Exception {\n         writer.closeAndComplete();\n \n         Future<AsyncLogReader> futureReader1 = dlm.getAsyncLogReaderWithLock(DLSN.InitialDLSN);\n-        BKAsyncLogReaderDLSN reader1 = (BKAsyncLogReaderDLSN) Await.result(futureReader1);\n+        BKAsyncLogReader reader1 = (BKAsyncLogReader) Await.result(futureReader1);\n         LogRecordWithDLSN record = Await.result(reader1.readNext());\n         assertEquals(1L, record.getTransactionId());\n         assertEquals(0L, record.getSequenceId());\n@@ -542,7 +542,7 @@ public void testAsyncReadWithSubscriberId() throws Exception {\n             writer.closeAndComplete();\n         }\n \n-        BKAsyncLogReaderDLSN reader0 = (BKAsyncLogReaderDLSN) Await.result(dlm.getAsyncLogReaderWithLock(subscriberId));\n+        BKAsyncLogReader reader0 = (BKAsyncLogReader) Await.result(dlm.getAsyncLogReaderWithLock(subscriberId));\n         assertEquals(DLSN.NonInclusiveLowerBound, reader0.getStartDLSN());\n         long numTxns = 0;\n         LogRecordWithDLSN record = Await.result(reader0.readNext());\n@@ -562,7 +562,7 @@ public void testAsyncReadWithSubscriberId() throws Exception {\n \n         SubscriptionsStore subscriptionsStore = dlm.getSubscriptionsStore();\n         Await.result(subscriptionsStore.advanceCommitPosition(subscriberId, readDLSN));\n-        BKAsyncLogReaderDLSN reader1 = (BKAsyncLogReaderDLSN) Await.result(dlm.getAsyncLogReaderWithLock(subscriberId));\n+        BKAsyncLogReader reader1 = (BKAsyncLogReader) Await.result(dlm.getAsyncLogReaderWithLock(subscriberId));\n         assertEquals(readDLSN, reader1.getStartDLSN());\n         numTxns = 0;\n         long startTxID =  10L;"},{"sha":"65507ac2520247ef5ce121b0dca8db143af46340","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderWriter.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -1397,7 +1397,7 @@ public void run() {\n             }, 0, TimeUnit.MILLISECONDS);\n \n         latch.await();\n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         if (simulateReaderStall) {\n             reader.disableProcessingReadRequests();\n         }\n@@ -1538,7 +1538,7 @@ public void run() {\n                 }, 0, TimeUnit.MILLISECONDS);\n \n         latch.await();\n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN)dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader)dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         reader.disableReadAheadLogSegmentsNotification();\n         boolean exceptionEncountered = false;\n         int recordCount = 0;\n@@ -1616,7 +1616,7 @@ public void testMaxReadAheadRecords() throws Exception {\n         record.setControl();\n         Await.result(writer.write(record));\n \n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         record = Await.result(reader.readNext());\n         LOG.info(\"Read record {}\", record);\n         assertEquals(1L, record.getTransactionId());\n@@ -1668,7 +1668,7 @@ public void testMarkEndOfStream() throws Exception {\n         } catch (EndOfStreamException ex) {\n         }\n \n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         LogRecord record = null;\n         for (int j = 0; j < NUM_RECORDS; j++) {\n             record = Await.result(reader.readNext());\n@@ -1702,7 +1702,7 @@ public void testMarkEndOfStreamAtBeginningOfSegment() throws Exception {\n         }\n         writer.close();\n \n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         try {\n             LogRecord record = Await.result(reader.readNext());\n             fail(\"Should have thrown\");\n@@ -1727,7 +1727,7 @@ public void testBulkReadWaitingMoreRecords() throws Exception {\n         controlRecord.setControl();\n         FutureUtils.result(writer.write(controlRecord));\n \n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         Future<List<LogRecordWithDLSN>> bulkReadFuture = reader.readBulk(2, Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n         Future<LogRecordWithDLSN> readFuture = reader.readNext();\n \n@@ -1772,7 +1772,7 @@ public void testBulkReadNotWaitingMoreRecords() throws Exception {\n         controlRecord.setControl();\n         FutureUtils.result(writer.write(controlRecord));\n \n-        BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n+        BKAsyncLogReader reader = (BKAsyncLogReader) dlm.getAsyncLogReader(DLSN.InitialDLSN);\n         Future<List<LogRecordWithDLSN>> bulkReadFuture = reader.readBulk(2, 0, TimeUnit.MILLISECONDS);\n         Future<LogRecordWithDLSN> readFuture = reader.readNext();\n "},{"sha":"d28b62cb905c585bc8e9c3d8aba4a2598abe0244","filename":"src/test/java/com/twitter/distributedlog/TestBKSyncLogReader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKSyncLogReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKSyncLogReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKSyncLogReader.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -159,7 +159,7 @@ public void testReadRecordsAfterReadAheadCaughtUp() throws Exception {\n \n         // all 10 records are added to the stream\n         // then open a reader to read\n-        BKSyncLogReaderDLSN reader = (BKSyncLogReaderDLSN) dlm.getInputStream(1L);\n+        BKSyncLogReader reader = (BKSyncLogReader) dlm.getInputStream(1L);\n \n         // wait until readahead caught up\n         while (!reader.getReadAheadReader().isReadAheadCaughtUp()) {\n@@ -226,7 +226,7 @@ public void testReadRecordsWhenReadAheadCatchingUp() throws Exception {\n         logger.info(\"Write first 10 records\");\n \n         // open a reader to read\n-        BKSyncLogReaderDLSN reader = (BKSyncLogReaderDLSN) dlm.getInputStream(1L);\n+        BKSyncLogReader reader = (BKSyncLogReader) dlm.getInputStream(1L);\n         // resume reading from sync reader. so it should be able to read all 10 records\n         // and return null to claim it as caughtup\n         LogRecord record = reader.readNext(false);\n@@ -283,7 +283,7 @@ public void run() {\n         }, 0, 400, TimeUnit.MILLISECONDS);\n \n         // open a reader to read\n-        BKSyncLogReaderDLSN reader = (BKSyncLogReaderDLSN) dlm.getInputStream(1L);\n+        BKSyncLogReader reader = (BKSyncLogReader) dlm.getInputStream(1L);\n         // resume reading from sync reader. so it should be able to read all 10 records\n         // and return null to claim it as caughtup\n         LogRecord record = reader.readNext(false);"},{"sha":"bfa91567033561642258d23e55fc53716f3cfc3b","filename":"src/test/java/com/twitter/distributedlog/TestNonBlockingReadsMultiReader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReadsMultiReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReadsMultiReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReadsMultiReader.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -99,7 +99,7 @@ public void testMultiReaders() throws Exception {\n \n         DistributedLogManager dlmread = createNewDLM(conf, name);\n \n-        BKSyncLogReaderDLSN reader0 = (BKSyncLogReaderDLSN) dlmread.getInputStream(0);\n+        BKSyncLogReader reader0 = (BKSyncLogReader) dlmread.getInputStream(0);\n \n         try {\n             ReaderThread[] readerThreads = new ReaderThread[1];"},{"sha":"6040549883df9e1b40e8abd6db8cbeaa471cd037","filename":"src/test/java/com/twitter/distributedlog/TestReader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestReader.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -118,7 +118,7 @@ public void run() {\n                 try {\n                     AsyncLogReader reader = dlm.getAsyncLogReader(dlsn);\n                     if (simulateErrors) {\n-                        ((BKAsyncLogReaderDLSN) reader).simulateErrors();\n+                        ((BKAsyncLogReader) reader).simulateErrors();\n                     }\n                     nextDLSN = dlsn;\n                     LOG.info(\"Positioned reader {} at {}\", readerName, dlsn);"},{"sha":"99ef04195d50d6a960f5a7a766b854c069b485a5","filename":"src/test/java/com/twitter/distributedlog/TestRollLogSegments.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestRollLogSegments.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/590805a487fbfcc3c85c9baf5988106a9037dc2f/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestRollLogSegments.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestRollLogSegments.java?ref=590805a487fbfcc3c85c9baf5988106a9037dc2f","patch":"@@ -312,7 +312,7 @@ public void onFailure(Throwable cause) {\n     }\n \n     private void checkAndWaitWriterReaderPosition(BKLogSegmentWriter writer, long expectedWriterPosition,\n-                                                  BKAsyncLogReaderDLSN reader, long expectedReaderPosition,\n+                                                  BKAsyncLogReader reader, long expectedReaderPosition,\n                                                   LedgerHandle inspector, long expectedLac) throws Exception {\n         while (getLedgerHandle(writer).getLastAddConfirmed() < expectedWriterPosition) {\n             Thread.sleep(1000);\n@@ -357,7 +357,7 @@ public void testCaughtUpReaderOnLogSegmentRolling() throws Exception {\n         }\n \n         BKDistributedLogManager readDLM = (BKDistributedLogManager) createNewDLM(confLocal, name);\n-        final BKAsyncLogReaderDLSN reader = (BKAsyncLogReaderDLSN) readDLM.getAsyncLogReader(DLSN.InitialDLSN);\n+        final BKAsyncLogReader reader = (BKAsyncLogReader) readDLM.getAsyncLogReader(DLSN.InitialDLSN);\n \n         // 2) reader should be able to read 5 entries.\n         for (long i = 1; i <= numEntries; i++) {"}]}