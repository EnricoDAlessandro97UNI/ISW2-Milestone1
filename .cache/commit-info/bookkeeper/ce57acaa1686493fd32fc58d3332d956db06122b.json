{"sha":"ce57acaa1686493fd32fc58d3332d956db06122b","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmNlNTdhY2FhMTY4NjQ5M2ZkMzJmYzU4ZDMzMzJkOTU2ZGIwNjEyMmI=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-25T09:08:03Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-25T09:08:03Z"},"message":"ISSUE #247: Missing JavaDoc for classes\n\nDescriptions of the changes in this PR:\n\n- Addressed the `TODO` comments by adding JavaDoc\n- Make sure there is a Github issue for each unaddressed `TODO` comment\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nThis closes #285 from sijie/issue_247, closes #247","tree":{"sha":"61546e91a12d9aadfbf93da01095c29c533a918f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/61546e91a12d9aadfbf93da01095c29c533a918f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/ce57acaa1686493fd32fc58d3332d956db06122b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ce57acaa1686493fd32fc58d3332d956db06122b","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/ce57acaa1686493fd32fc58d3332d956db06122b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ce57acaa1686493fd32fc58d3332d956db06122b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"24ac8ead6240aaaaa845afccb4e606fbe0da1602","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/24ac8ead6240aaaaa845afccb4e606fbe0da1602","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/24ac8ead6240aaaaa845afccb4e606fbe0da1602"}],"stats":{"total":329,"additions":98,"deletions":231},"files":[{"sha":"3421b98f2814d88593037f67a10a59df98efdf45","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -49,7 +49,7 @@\n import io.netty.channel.nio.NioEventLoopGroup;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A utility class used for benchmarking the performance of bookies.\n  */\n public class BenchBookie {\n     static final Logger LOG = LoggerFactory.getLogger(BenchBookie.class);"},{"sha":"5f861353804e82c51c04b454cf948bfad3aa3ab1","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -48,7 +48,7 @@\n import static com.google.common.base.Charsets.UTF_8;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A benchmark that benchmarks the read throughput and latency.\n  */\n public class BenchReadThroughputLatency {\n     static final Logger LOG = LoggerFactory.getLogger(BenchReadThroughputLatency.class);"},{"sha":"df6d295e86450a29c29f4a23c8541d8a43486ad5","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -57,7 +57,7 @@\n import static com.google.common.base.Charsets.UTF_8;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A benchmark that benchmarks write throughput and latency.\n  */\n public class BenchThroughputLatency implements AddCallback, Runnable {\n     static final Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);"},{"sha":"34f9ceb05d2fb2ad1e7b6ae4c95a52b5d0f62e91","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -35,7 +35,7 @@\n import org.apache.zookeeper.KeeperException;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A mysql client performing writes and reads that used for benchmark comparison with BookKeeper.\n  */\n public class MySqlClient {\n     static final Logger LOG = LoggerFactory.getLogger(MySqlClient.class);\n@@ -67,8 +67,6 @@ public MySqlClient(String hostport, String user, String pass)\n             stmt.execute(\"create table data(transaction_id bigint PRIMARY KEY AUTO_INCREMENT, content TEXT);\");\n             LOG.info(\"Database initialization terminated\");\n         } catch (SQLException e) {\n-\n-            // TODO Auto-generated catch block\n             e.printStackTrace();\n         }\n     }"},{"sha":"84918ae57b73ef7d977eb0e258b5c11c64287620","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -18,6 +18,6 @@\n  *\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * Benchmark utils for benchmarking the performance of Apache BookKeeper.\n  */\n-package org.apache.bookkeeper.benchmark;\n\\ No newline at end of file\n+package org.apache.bookkeeper.benchmark;"},{"sha":"74134b5ff660da21030a0bc7a17f329287a39cbc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthCallbacks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthCallbacks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthCallbacks.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,7 @@\n public abstract class AuthCallbacks {\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Generic callback used in authentication providers.\n      */\n     public interface GenericCallback<T> {\n "},{"sha":"9ead4c2dc2337855c5abd808f131b7a96f288bfd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -30,7 +30,7 @@\n import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A factory to manage the authentication provider factories.\n  */\n public class AuthProviderFactoryFactory {\n "},{"sha":"8de0af287971f105da07a4c4de71e5f720a008fc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -28,12 +28,13 @@\n \n /**\n  * Bookie authentication provider interface.\n- * This must be implemented by any party wishing to implement\n+ *\n+ * <p>This must be implemented by any party wishing to implement\n  * an authentication mechanism for bookkeeper connections.\n  */\n public interface BookieAuthProvider {\n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * A factory to create the bookie authentication provider.\n      */\n     interface Factory {\n         /**"},{"sha":"318541cf0f54c8601af4b3610b3fe8126e3409b6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -32,7 +32,7 @@\n  */\n public interface ClientAuthProvider {\n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * A factory to create the authentication providers for bookkeeper clients.\n      */\n     interface Factory {\n         /**"},{"sha":"d3b4b9d48d8894f04533cdfbb287d21b9dd6f862","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * Classes used to handle authentication in bookies and clients.\n  */\n-package org.apache.bookkeeper.auth;\n\\ No newline at end of file\n+package org.apache.bookkeeper.auth;"},{"sha":"bfd1cc1a40a26da395400668bcb6b492a46f4b3e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -21,7 +21,7 @@\n package org.apache.bookkeeper.bookie;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A utility class used for managing the <i>stats constants</i> used in server side.\n  */\n public interface BookKeeperServerStats {\n "},{"sha":"80da02c490bbcb7a581c19526d41825c7fe4a9f1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -178,7 +178,7 @@ public class Bookie extends BookieCriticalThread {\n     private final OpStatsLogger readBytesStats;\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Exception is thrown when no such a ledger is found in this bookie.\n      */\n     public static class NoLedgerException extends IOException {\n         private static final long serialVersionUID = 1L;\n@@ -193,7 +193,7 @@ public long getLedgerId() {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Exception is thrown when no such an entry is found in this bookie.\n      */\n     public static class NoEntryException extends IOException {\n         private static final long serialVersionUID = 1L;"},{"sha":"e98d637023a3aebbeea1eaccb8d3f572e5f6952e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,8 @@\n  */\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * Signals that a Bookie exception of some sort has occurred. This class\n+ * is the general class of exceptions produced by failed or interrupted bookie operations.\n  */\n @SuppressWarnings(\"serial\")\n public abstract class BookieException extends Exception {\n@@ -58,7 +59,7 @@ public static BookieException create(int code) {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * An exception code indicates the failure reason.\n      */\n     public interface Code {\n         int OK = 0;\n@@ -119,7 +120,7 @@ public String getMessage(int code) {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signals that an unauthorized operation attempts to access the data in a bookie.\n      */\n     public static class BookieUnauthorizedAccessException extends BookieException {\n         public BookieUnauthorizedAccessException() {\n@@ -128,7 +129,7 @@ public BookieUnauthorizedAccessException() {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signals that an illegal operation attempts to access the data in a bookie.\n      */\n     public static class BookieIllegalOpException extends BookieException {\n         public BookieIllegalOpException() {\n@@ -137,7 +138,7 @@ public BookieIllegalOpException() {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signals that a ledger has been fenced in a bookie. No more entries can be appended to that ledger.\n      */\n     public static class LedgerFencedException extends BookieException {\n         public LedgerFencedException() {\n@@ -146,7 +147,9 @@ public LedgerFencedException() {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signal that an invalid cookie is found when starting a bookie.\n+     *\n+     * <p>This exception is mainly used for detecting if there is any malformed configuration in a bookie.\n      */\n     public static class InvalidCookieException extends BookieException {\n         public InvalidCookieException() {\n@@ -163,7 +166,7 @@ public InvalidCookieException(Throwable cause) {\n     }\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signals that an exception occurs on upgrading a bookie.\n      */\n     public static class UpgradeException extends BookieException {\n         public UpgradeException() {\n@@ -179,6 +182,9 @@ public UpgradeException(String reason) {\n         }\n     }\n     \n+    /**\n+     * Signals when multiple ledger/journal directories are mounted in same disk partition.\n+     */\n     public static class DiskPartitionDuplicationException extends BookieException {\n         public DiskPartitionDuplicationException() {\n             super(Code.DiskPartitionDuplicationException);"},{"sha":"ef4d6f31c3548edaed72cc101baed6c7a7964f69","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannelBase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBufferedChannelBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBufferedChannelBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBufferedChannelBase.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -21,7 +21,8 @@\n import java.nio.channels.FileChannel;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code BufferedChannelBase} adds functionlity to an existing file channel, the ability\n+ * to buffer the input and output data. This class is a base class for wrapping the {@link FileChannel}.\n  */\n public abstract class BufferedChannelBase {\n     protected final FileChannel fileChannel;"},{"sha":"5cce117b56d322c55f147ccf5ae7bb54570936b8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSourceList.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -26,7 +26,7 @@\n import com.google.common.collect.Lists;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code CheckpointSourceList} manages a list of {@link CheckpointSource}s.\n  */\n public class CheckpointSourceList implements CheckpointSource {\n "},{"sha":"fb7ddc5f02fa0ac3da8544eb8e1252294a3b0d1b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKey.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKey.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -23,7 +23,9 @@\n import java.util.Comparator;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * An {@code EntryKey} represents an entry in a ledger, identified by {@code ledgerId} and {@code entryId}.\n+ *\n+ * <p>This class is mainly used in {@code SortedLedgerStorage} for managing and sorting the entries in the memtable.\n  */\n public class EntryKey {\n     long ledgerId;"},{"sha":"87005ce0c99c073880c7525e75ae1fb6389871d4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLocation.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,7 @@\n package org.apache.bookkeeper.bookie;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * An {@code EntryLocation} represents the location where an entry is stored.\n  */\n public class EntryLocation {\n     public final long ledger;\n@@ -34,4 +34,4 @@ public EntryLocation(long ledger, long entry, long location) {\n         this.entry = entry;\n         this.location = location;\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"6118002870f439d8df4d79de380e0ac4489e85d0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -48,7 +48,7 @@\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.NUM_OPEN_LEDGERS;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code IndexPersistenceMgr} is responsible for managing the persistence state for the index in a bookie.\n  */\n public class IndexPersistenceMgr {\n     private static final Logger LOG = LoggerFactory.getLogger(IndexPersistenceMgr.class);"},{"sha":"117c68747bc8538cc62819c0b5e11e442df847f9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -52,8 +52,9 @@\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.STORAGE_GET_OFFSET;\n \n /**\n- * Interleave ledger storage\n- * This ledger storage implementation stores all entries in a single\n+ * Interleave ledger storage.\n+ *\n+ * <p>This ledger storage implementation stores all entries in a single\n  * file and maintains an index file for each ledger.\n  */\n public class InterleavedLedgerStorage implements CompactableLedgerStorage, EntryLogListener {\n@@ -463,7 +464,7 @@ public void onRotateEntryLog() {\n         // in ledger storage and ready to be synced to disk.\n         // TODO: we could consider remove checkpointSource and checkpointSouce#newCheckpoint\n         // later if we provide kind of LSN (Log/Journal Squeuence Number)\n-        // mechanism when adding entry.\n+        // mechanism when adding entry. {@link https://github.com/apache/bookkeeper/issues/279}\n         checkpointHolder.setNextCheckpoint(checkpointSource.newCheckpoint());\n     }\n }"},{"sha":"a0c112d62c2fb9db917bdb3bd64687368515ae82","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LastAddConfirmedUpdateNotification.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLastAddConfirmedUpdateNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLastAddConfirmedUpdateNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLastAddConfirmedUpdateNotification.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -21,7 +21,9 @@\n package org.apache.bookkeeper.bookie;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A signal object is used for notifying the observers when the {@code LastAddConfirmed} is advanced.\n+ *\n+ * <p>The signal object contains the latest {@code LastAddConfirmed} and when the {@code LastAddConfirmed} is advanced.\n  */\n public class LastAddConfirmedUpdateNotification {\n     public long lastAddConfirmed;"},{"sha":"80aa965dae11fad119e491e0202890849e026f72","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -31,8 +31,7 @@\n import org.apache.bookkeeper.meta.LedgerManager;\n \n /**\n- * Interface for storing ledger data\n- * on persistant storage.\n+ * Interface for storing ledger data on persistent storage.\n  */\n public interface LedgerStorage {\n \n@@ -148,7 +147,7 @@ void initialize(ServerConfiguration conf, LedgerManager ledgerManager, LedgerDir\n     void deleteLedger(long ledgerId) throws IOException;\n \n     /**\n-     * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+     * Signals that a ledger is deleted by the garbage collection thread.\n      */\n     interface LedgerDeletionListener {\n         void ledgerDeleted(long ledgerId);"},{"sha":"6a9d0c44a1ef730944cc36cab83b1af0c6455910","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorageFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -25,7 +25,7 @@\n import org.apache.bookkeeper.util.ReflectionUtils;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A factory that creates {@link LedgerStorage} by reflection.\n  */\n public class LedgerStorageFactory {\n     public static LedgerStorage createLedgerStorage(String name) throws IOException {"},{"sha":"786508ef1fa2b1867b05b874a3e647b083b193b0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/MarkerFileChannel.java","status":"removed","additions":0,"deletions":146,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/24ac8ead6240aaaaa845afccb4e606fbe0da1602/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FMarkerFileChannel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/24ac8ead6240aaaaa845afccb4e606fbe0da1602/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FMarkerFileChannel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FMarkerFileChannel.java?ref=24ac8ead6240aaaaa845afccb4e606fbe0da1602","patch":"@@ -1,146 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.bookie;\n-\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.nio.MappedByteBuffer;\n-import java.nio.channels.FileChannel;\n-import java.nio.channels.FileLock;\n-import java.nio.channels.ReadableByteChannel;\n-import java.nio.channels.WritableByteChannel;\n-\n-/**\n- * This class is just a stub that can be used in collections with FileChannels.\n- */\n-public class MarkerFileChannel extends FileChannel {\n-\n-    @Override\n-    public void force(boolean metaData) throws IOException {\n-        // TODO Auto-generated method stub\n-\n-    }\n-\n-    @Override\n-    public FileLock lock(long position, long size, boolean shared)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public MappedByteBuffer map(MapMode mode, long position, long size)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public long position() throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public FileChannel position(long newPosition) throws IOException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public int read(ByteBuffer dst) throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public int read(ByteBuffer dst, long position) throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public long read(ByteBuffer[] dsts, int offset, int length)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public long size() throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public long transferFrom(ReadableByteChannel src, long position, long count)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public long transferTo(long position, long count, WritableByteChannel target)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public FileChannel truncate(long size) throws IOException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public FileLock tryLock(long position, long size, boolean shared)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n-\n-    @Override\n-    public int write(ByteBuffer src) throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public int write(ByteBuffer src, long position) throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    public long write(ByteBuffer[] srcs, int offset, int length)\n-            throws IOException {\n-        // TODO Auto-generated method stub\n-        return 0;\n-    }\n-\n-    @Override\n-    protected void implCloseChannel() throws IOException {\n-        // TODO Auto-generated method stub\n-\n-    }\n-\n-}"},{"sha":"7151062c08d9cd45d44870fdf4036148786110bf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -39,7 +39,10 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code SortedLedgerStorage} is an extension of {@link InterleavedLedgerStorage}. It\n+ * is comprised of two {@code MemTable}s and a {@code InterleavedLedgerStorage}. All the\n+ * entries will be first added into a {@code MemTable}, and then be flushed back to the\n+ * {@code InterleavedLedgerStorage} when the {@code MemTable} becomes full.\n  */\n public class SortedLedgerStorage extends InterleavedLedgerStorage\n         implements LedgerStorage, CacheCallback, SkipListFlusher {\n@@ -199,7 +202,7 @@ public void run() {\n                     }\n                 } catch (IOException e) {\n                     // TODO: if we failed to flush data, we should switch the bookie back to readonly mode\n-                    //       or shutdown it.\n+                    //       or shutdown it. {@link https://github.com/apache/bookkeeper/issues/280}\n                     LOG.error(\"Exception thrown while flushing skip list cache.\", e);\n                 }\n             }"},{"sha":"c0d08baeeac29e9b010cf5de0d549f99bcd8bee0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -17,6 +17,6 @@\n  * under the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * Provides a <i>Bookie</i> server that stores entries for clients.\n  */\n-package org.apache.bookkeeper.bookie;\n\\ No newline at end of file\n+package org.apache.bookkeeper.bookie;"},{"sha":"2cd5903235e47f9499b5a5cd0efbc9aabea11807","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -379,7 +379,7 @@ public void safeRun() {\n                 List<PendingAddOp> pendingAdds;\n \n                 if (isClosed()) {\n-                    // TODO: make ledger metadata immutable\n+                    // TODO: make ledger metadata immutable {@link https://github.com/apache/bookkeeper/issues/281}\n                     // Although the metadata is already closed, we don't need to proceed zookeeper metadata update, but\n                     // we still need to error out the pending add ops.\n                     //"},{"sha":"3965eb695a7185b5845e6bf3f92abc68ff80905b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -178,16 +178,6 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n     public void process(WatchedEvent event) {\n         LOG.info(\"Received watched event {} from zookeeper based ledger manager.\", event);\n         if (Event.EventType.None == event.getType()) {\n-            /** TODO: BOOKKEEPER-537 to handle expire events.\n-            if (Event.KeeperState.Expired == event.getState()) {\n-                LOG.info(\"ZooKeeper client expired on ledger manager.\");\n-                Set<Long> keySet = new HashSet<Long>(listeners.keySet());\n-                for (Long lid : keySet) {\n-                    scheduler.submit(new ReadLedgerMetadataTask(lid));\n-                    LOG.info(\"Re-read ledger metadata for {} after zookeeper session expired.\", lid);\n-                }\n-            }\n-            **/\n             return;\n         }\n         String path = event.getPath();"},{"sha":"fe260fce02caae1f6d9d84c35a7f2c5e50c12a01","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -80,7 +80,6 @@ protected String getLedgerPath(long ledgerId) {\n \n     @Override\n     protected long getLedgerId(String ledgerPath) throws IOException {\n-        // TODO Auto-generated method stub\n         if (!ledgerPath.startsWith(ledgerRootPath)) {\n             throw new IOException(\"it is not a valid hashed path name : \" + ledgerPath);\n         }"},{"sha":"6612683a3b7316167843d5e9b5d9afaba563a9d1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -107,6 +107,7 @@ public LedgerManagerFactory initialize(final AbstractConfiguration conf, final Z\n             metastore = MetastoreFactory.createMetaStore(msName);\n \n             // TODO: should record version in somewhere. e.g. ZooKeeper\n+            // {@link https://github.com/apache/bookkeeper/issues/282}\n             int msVersion = metastore.getVersion();\n             metastore.init(conf, msVersion);\n         } catch (Throwable t) {"},{"sha":"9cc7d173a83e31112ede9e1652c5205bf721e29c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -70,7 +70,7 @@ protected void processPacket() {\n                 LOG.debug(\"##### Read entry ##### {} -- ref-count: {}\", data.readableBytes(), data.refCnt());\n             }\n             if (null != fenceResult) {\n-                // TODO:\n+                // TODO: {@link https://github.com/apache/bookkeeper/issues/283}\n                 // currently we don't have readCallback to run in separated read\n                 // threads. after BOOKKEEPER-429 is complete, we could improve\n                 // following code to make it not wait here"},{"sha":"7a98668bb8092c35c8400676aa023caf039a61f4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -125,6 +125,7 @@ public void process(WatchedEvent event) {\n             LOG.debug(\"Received {} from ZooKeeper server\", event.getState());\n         }\n         // TODO: Needs to handle AuthFailed, SaslAuthenticated events\n+        //       {@link https://github.com/apache/bookkeeper/issues/284}\n         switch (event.getState()) {\n         case SyncConnected:\n             LOG.info(\"ZooKeeper client is connected now.\");"},{"sha":"a3cce934e80ca1928e8435a891884be9fa614ca3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -74,7 +74,6 @@ public void setUp() throws Exception {\n \n     @After\n     public void tearDown() throws Exception {\n-        //TODO: it is being shut down but never started. why?\n         ledgerMonitor.shutdown();\n         FileUtils.deleteDirectory(journalDir);\n         FileUtils.deleteDirectory(ledgerDir);"},{"sha":"f1fa824a51c2be83ca43b00692b11951c608d02f","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -44,7 +44,7 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@link StatsProvider} implemented based on <i>Codahale</i> metrics library.\n  */\n @SuppressWarnings(\"deprecation\")\n public class CodahaleMetricsProvider implements StatsProvider {"},{"sha":"3be6fdd45295cf30bb87a42ce215885dcfe5624d","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -21,7 +21,7 @@\n import static com.codahale.metrics.MetricRegistry.name;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@link StatsLogger} implemented based on <i>Codahale</i> metrics library.\n  */\n public class CodahaleStatsLogger implements StatsLogger {\n     protected final String basename;"},{"sha":"7276104dca7f0af606bd22ec96228cd8f78013d0","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDoc Comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A lightweight stats library implemention based on <i>Codahale</i> metrics library.\n  */\n-package org.apache.bookkeeper.stats;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats;"},{"sha":"60e19bd06f20be24ceee5a90aa54b01531af9c76","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusCounter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -21,7 +21,7 @@\n import io.prometheus.client.Gauge;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@link Counter} implementation based on <i>Prometheus</i> metrics library.\n  */\n public class PrometheusCounter implements Counter {\n "},{"sha":"b745d260332aeb07cf24baea5148f6390e07b361","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusMetricsProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -33,7 +33,7 @@\n import io.prometheus.client.hotspot.ThreadExports;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A <i>Prometheus</i> based {@link StatsProvider} implementation.\n  */\n public class PrometheusMetricsProvider implements StatsProvider {\n "},{"sha":"b30fd9921bcf9f82dce01366a7d4d4d3158c8671","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusOpStatsLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,7 @@\n import io.prometheus.client.Summary;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code Prometheus} based {@link OpStatsLogger} implementation.\n  */\n public class PrometheusOpStatsLogger implements OpStatsLogger {\n "},{"sha":"b25960ce0a60081a0a83b7bbf9f2579cc31a6e13","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,7 @@\n import io.prometheus.client.CollectorRegistry;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code Prometheus} based {@link StatsLogger} implementation.\n  */\n public class PrometheusStatsLogger implements StatsLogger {\n "},{"sha":"a264d8f1fd5d5d1c1da4641bd72eb1dd58d39415","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A stats provider implementation based on {@link Prometheus}.\n  */\n-package org.apache.bookkeeper.stats;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats;"},{"sha":"46448a67fada6375bf5edf024427b0c99382b118","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -30,7 +30,7 @@\n import java.util.Map;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A <i>Finagle Stats</i> library based {@link StatsLogger} implementation.\n  */\n public class FinagleStatsLoggerImpl implements StatsLogger {\n     private final StatsReceiver stats;"},{"sha":"a839cd320624c86e113fb9b4d355072ad1604481","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -16,6 +16,6 @@\n  * limitations under the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A stats provider implemented based on <i>finagle stats</i> library.\n  */\n-package org.apache.bookkeeper.stats.twitter.finagle;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats.twitter.finagle;"},{"sha":"e36d573a2feb95f0f45c8c2a1b92e8bcb1f130ec","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -36,7 +36,7 @@\n import java.util.concurrent.TimeUnit;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A <i>Twitter Ostrich</i> library based {@link StatsProvider} implementation.\n  */\n public class OstrichProvider implements StatsProvider {\n "},{"sha":"2db25846edac744731ff114372868c17595cce48","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDOc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A stats provider implemented based on <i>Twitter Ostrich</i> library.\n  */\n-package org.apache.bookkeeper.stats.twitter.ostrich;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats.twitter.ostrich;"},{"sha":"34e0eea6d5a7ef2da8e43d0d423c713549540c10","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -49,7 +49,6 @@ public HTTPStatsExporter(int port) {\n \n     public void start() throws Exception {\n         // Start the sampler. Sample every 1 second and retain for 1 hour\n-        // TODO: Make this configurable if needed.\n         TimeSeriesRepository sampler = new TimeSeriesRepositoryImpl(Stats.STAT_REGISTRY,\n                 Amount.of(1L, Time.SECONDS), Amount.of(1L, Time.HOURS));\n         sampler.start(this.shutDownRegistry);"},{"sha":"00928adb791acc481da7101a706b022315a02604","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -54,7 +54,6 @@ public void registerFailedValue(long value) {\n     }\n \n     public synchronized void clear() {\n-        //TODO: Figure out how to clear RequestStats. Till then this is a no-op\n     }\n \n     /**"},{"sha":"75c2842c986729a97d0dc0f2fdb4381c4b3057ef","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -24,7 +24,7 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A stats provider implemented based on <i>Twitter Stats</i> library.\n  */\n public class TwitterStatsProvider implements StatsProvider {\n "},{"sha":"bc358f4861aa7f0cc95e1599149d6980350aa31c","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A stats provider implementation based on <i>Twitter Science Stats</i> library.\n  */\n-package org.apache.bookkeeper.stats.twitter.science;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats.twitter.science;"},{"sha":"69b6d1766756fa0467758202cda335d4a2a660da","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -20,7 +20,7 @@\n import java.util.concurrent.ConcurrentMap;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code StatsLogger} that caches the stats objects created by other {@code StatsLogger}.\n  */\n public class CachingStatsLogger implements StatsLogger {\n "},{"sha":"5e34bf1274f669e268e715a66dac0e984ddd503f","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -22,7 +22,10 @@\n import java.util.concurrent.ConcurrentMap;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A {@code CachingStatsProvider} adds the caching functionality to an existing {@code StatsProvider}.\n+ *\n+ * <p>The stats provider will cache the stats objects created by the other {@code StatsProvider} to allow\n+ * the reusability of stats objects and avoid creating a lot of stats objects.\n  */\n public class CachingStatsProvider implements StatsProvider {\n "},{"sha":"2d242c5acff9062c3ca3196bae1cca39475d22b8","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -19,12 +19,18 @@\n import java.util.concurrent.TimeUnit;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A <i>no-op</i> {@code StatsLogger}.\n+ *\n+ * <p>Metrics are not recorded, making this receiver useful in unit tests and as defaults in\n+ * situations where metrics are not strictly required.\n  */\n public class NullStatsLogger implements StatsLogger {\n \n     public static final NullStatsLogger INSTANCE = new NullStatsLogger();\n \n+    /**\n+     * A <i>no-op</i> {@code OpStatsLogger}.\n+     */\n     static class NullOpStatsLogger implements OpStatsLogger {\n         final OpStatsData nullOpStats = new OpStatsData(0, 0, 0, new long[6]);\n \n@@ -60,6 +66,9 @@ public void clear() {\n     }\n     static NullOpStatsLogger nullOpStatsLogger = new NullOpStatsLogger();\n \n+    /**\n+     * A <i>no-op</i> {@code Counter}.\n+     */\n     static class NullCounter implements Counter {\n         @Override\n         public void clear() {"},{"sha":"21703f725f2467c29f54a9c5fefc186824a8969b","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -19,7 +19,7 @@\n import org.apache.commons.configuration.Configuration;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A <i>no-op</i> stats provider implementation.\n  */\n public class NullStatsProvider implements StatsProvider {\n "},{"sha":"033e420976b0c53e78b268346b835cbc660f1e7e","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -28,7 +28,7 @@\n import java.lang.reflect.InvocationTargetException;\n \n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * An umbrella class for loading stats provider.\n  */\n public class Stats {\n     static final Logger LOG = LoggerFactory.getLogger(Stats.class);"},{"sha":"4e335d49a0cf06dcac132d9bd9a9b44a4e6fbccb","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ce57acaa1686493fd32fc58d3332d956db06122b/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=ce57acaa1686493fd32fc58d3332d956db06122b","patch":"@@ -15,6 +15,6 @@\n  * the License.\n  */\n /**\n- * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ * A lightweight stats library used for exporting bookkeeper stats.\n  */\n-package org.apache.bookkeeper.stats;\n\\ No newline at end of file\n+package org.apache.bookkeeper.stats;"}]}