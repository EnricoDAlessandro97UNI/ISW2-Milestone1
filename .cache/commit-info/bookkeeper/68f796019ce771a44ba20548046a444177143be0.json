{"sha":"68f796019ce771a44ba20548046a444177143be0","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjY4Zjc5NjAxOWNlNzcxYTQ0YmEyMDU0ODA0NmE0NDQxNzcxNDNiZTA=","commit":{"author":{"name":"Yiming Zang","email":"yzang@twitter.com","date":"2016-11-30T22:16:14Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:07:27Z"},"message":"DL-116: Add tool for deleting subscriber from subscription store\n\nTest Plan:\n\n1. manually create znode for subscribers resume point\n2. use the tool to delete the subscriberId","tree":{"sha":"337f126062021055c2e0914c6386601a16718bd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/337f126062021055c2e0914c6386601a16718bd9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/68f796019ce771a44ba20548046a444177143be0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/68f796019ce771a44ba20548046a444177143be0","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/68f796019ce771a44ba20548046a444177143be0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/68f796019ce771a44ba20548046a444177143be0/comments","author":null,"committer":null,"parents":[{"sha":"d606ee4ba0080431c5ec67b8805ff3bb269005d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d606ee4ba0080431c5ec67b8805ff3bb269005d6","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d606ee4ba0080431c5ec67b8805ff3bb269005d6"}],"stats":{"total":183,"additions":181,"deletions":2},"files":[{"sha":"27d5c1d82eeef7532858f8e4312859e6b2ede78d","filename":"src/main/java/com/twitter/distributedlog/subscription/SubscriptionsStore.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FSubscriptionsStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FSubscriptionsStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FSubscriptionsStore.java?ref=68f796019ce771a44ba20548046a444177143be0","patch":"@@ -56,4 +56,14 @@ public interface SubscriptionsStore extends Closeable {\n      */\n     public Future<BoxedUnit> advanceCommitPosition(String subscriberId, DLSN newPosition);\n \n+    /**\n+     * Delete the subscriber <i>subscriberId</i> permanently. Once the subscriber is deleted, all the\n+     * data stored under this subscriber will be lost.\n+     * @param subscriberId subscriber id\n+     * @return future represent success or failure.\n+     * return true only if there's such subscriber and we removed it successfully.\n+     * return false if there's no such subscriber, or we failed to remove.\n+     */\n+    public Future<Boolean> deleteSubscriber(String subscriberId);\n+\n }"},{"sha":"f1e62510dfaff53b9c55721f7df4c2aff537cf6a","filename":"src/main/java/com/twitter/distributedlog/subscription/ZKSubscriptionsStore.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FZKSubscriptionsStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FZKSubscriptionsStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2FZKSubscriptionsStore.java?ref=68f796019ce771a44ba20548046a444177143be0","patch":"@@ -20,9 +20,12 @@\n import com.twitter.distributedlog.DLSN;\n import com.twitter.distributedlog.ZooKeeperClient;\n import com.twitter.distributedlog.exceptions.DLInterruptedException;\n+import com.twitter.distributedlog.util.Utils;\n import com.twitter.util.Function;\n import com.twitter.util.Future;\n import com.twitter.util.Promise;\n+\n+import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n@@ -59,7 +62,7 @@ private ZKSubscriptionStateStore getSubscriber(String subscriberId) {\n         ZKSubscriptionStateStore ss = subscribers.get(subscriberId);\n         if (ss == null) {\n             ZKSubscriptionStateStore newSS = new ZKSubscriptionStateStore(zkc,\n-                    String.format(\"%s/%s\", zkPath, subscriberId));\n+                getSubscriberZKPath(subscriberId));\n             ZKSubscriptionStateStore oldSS = subscribers.putIfAbsent(subscriberId, newSS);\n             if (oldSS == null) {\n                 ss = newSS;\n@@ -75,6 +78,10 @@ private ZKSubscriptionStateStore getSubscriber(String subscriberId) {\n         return ss;\n     }\n \n+    private String getSubscriberZKPath(String subscriberId) {\n+        return String.format(\"%s/%s\", zkPath, subscriberId);\n+    }\n+\n     @Override\n     public Future<DLSN> getLastCommitPosition(String subscriberId) {\n         return getSubscriber(subscriberId).getLastCommitPosition();\n@@ -140,6 +147,13 @@ public Future<BoxedUnit> advanceCommitPosition(String subscriberId, DLSN newPosi\n         return getSubscriber(subscriberId).advanceCommitPosition(newPosition);\n     }\n \n+    @Override\n+    public Future<Boolean> deleteSubscriber(String subscriberId) {\n+        subscribers.remove(subscriberId);\n+        String path = getSubscriberZKPath(subscriberId);\n+        return Utils.zkDeleteIfNotExist(zkc, path, new ZkVersion(-1));\n+    }\n+\n     @Override\n     public void close() throws IOException {\n         // no-op"},{"sha":"bed2fcd9758c3f3c4ed0b210a428852e726e7cec","filename":"src/main/java/com/twitter/distributedlog/tools/DistributedLogTool.java","status":"modified","additions":118,"deletions":1,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java?ref=68f796019ce771a44ba20548046a444177143be0","patch":"@@ -105,6 +105,8 @@\n import com.twitter.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import com.twitter.distributedlog.util.SchedulerUtils;\n import com.twitter.util.Await;\n+import com.twitter.util.Future;\n+import com.twitter.util.FutureEventListener;\n \n import static com.google.common.base.Charsets.UTF_8;\n \n@@ -802,7 +804,7 @@ private int truncateStreams(final com.twitter.distributedlog.DistributedLogManag\n                 return 0;\n             }\n             numThreads = Math.min(streams.size(), numThreads);\n-            final int numStreamsPerThreads = streams.size() / numThreads;\n+            final int numStreamsPerThreads = streams.size() / numThreads + 1;\n             Thread[] threads = new Thread[numThreads];\n             for (int i = 0; i < numThreads; i++) {\n                 final int tid = i;\n@@ -2723,6 +2725,120 @@ protected int runSimpleCmd() throws Exception {\n         }\n     }\n \n+    public static class DeleteSubscriberCommand extends PerDLCommand {\n+\n+        int numThreads = 1;\n+        String streamPrefix = null;\n+        String subscriberId = null;\n+        AtomicInteger streamIndex = new AtomicInteger();\n+\n+        DeleteSubscriberCommand() {\n+            super(\"delete_subscriber\", \"Delete the subscriber in subscription store. \");\n+            options.addOption(\"s\", \"subscriberId\", true, \"SubscriberId to remove from the stream\");\n+            options.addOption(\"t\", \"threads\", true, \"Number of threads\");\n+            options.addOption(\"ft\", \"filter\", true, \"Stream filter by prefix\");\n+        }\n+\n+        @Override\n+        protected void parseCommandLine(CommandLine cmdline) throws ParseException {\n+            super.parseCommandLine(cmdline);\n+            if (!cmdline.hasOption(\"s\")) {\n+                throw new ParseException(\"No subscriberId provided.\");\n+            } else {\n+                subscriberId = cmdline.getOptionValue(\"s\");\n+            }\n+            if (cmdline.hasOption(\"t\")) {\n+                numThreads = Integer.parseInt(cmdline.getOptionValue(\"t\"));\n+            }\n+            if (cmdline.hasOption(\"ft\")) {\n+                streamPrefix = cmdline.getOptionValue(\"ft\");\n+            }\n+        }\n+\n+        @Override\n+        protected String getUsage() {\n+            return \"delete_subscriber [options]\";\n+        }\n+\n+        @Override\n+        protected int runCmd() throws Exception {\n+            getConf().setZkAclId(getZkAclId());\n+            return deleteSubscriber(getFactory());\n+        }\n+\n+        private int deleteSubscriber(final com.twitter.distributedlog.DistributedLogManagerFactory factory) throws Exception {\n+            Collection<String> streamCollection = factory.enumerateAllLogsInNamespace();\n+            final List<String> streams = new ArrayList<String>();\n+            if (null != streamPrefix) {\n+                for (String s : streamCollection) {\n+                    if (s.startsWith(streamPrefix)) {\n+                        streams.add(s);\n+                    }\n+                }\n+            } else {\n+                streams.addAll(streamCollection);\n+            }\n+            if (0 == streams.size()) {\n+                return 0;\n+            }\n+            System.out.println(\"Streams : \" + streams);\n+            if (!getForce() && !IOUtils.confirmPrompt(\"Do you want to delete subscriber \"\n+                + subscriberId + \" for \" + streams.size() + \" streams ?\")) {\n+                return 0;\n+            }\n+            numThreads = Math.min(streams.size(), numThreads);\n+            final int numStreamsPerThreads = streams.size() / numThreads + 1;\n+            Thread[] threads = new Thread[numThreads];\n+            for (int i = 0; i < numThreads; i++) {\n+                final int tid = i;\n+                threads[i] = new Thread(\"RemoveSubscriberThread-\" + i) {\n+                    @Override\n+                    public void run() {\n+                        try {\n+                            deleteSubscriber(factory, streams, tid, numStreamsPerThreads);\n+                            System.out.println(\"Thread \" + tid + \" finished.\");\n+                        } catch (Exception e) {\n+                            System.err.println(\"Thread \" + tid + \" quits with exception : \" + e.getMessage());\n+                        }\n+                    }\n+                };\n+                threads[i].start();\n+            }\n+            for (int i = 0; i < numThreads; i++) {\n+                threads[i].join();\n+            }\n+            return 0;\n+        }\n+\n+        private void deleteSubscriber(com.twitter.distributedlog.DistributedLogManagerFactory factory, List<String> streams,\n+                                      int tid, int numStreamsPerThreads) throws Exception {\n+            int startIdx = tid * numStreamsPerThreads;\n+            int endIdx = Math.min(streams.size(), (tid + 1) * numStreamsPerThreads);\n+            for (int i = startIdx; i < endIdx; i++) {\n+                final String s = streams.get(i);\n+                DistributedLogManager dlm =\n+                    factory.createDistributedLogManagerWithSharedClients(s);\n+                final CountDownLatch countDownLatch = new CountDownLatch(1);\n+                dlm.getSubscriptionsStore().deleteSubscriber(subscriberId)\n+                    .addEventListener(new FutureEventListener<Boolean>() {\n+                        @Override\n+                        public void onFailure(Throwable cause) {\n+                            System.out.println(\"Failed to delete subscriber for stream \" + s);\n+                            cause.printStackTrace();\n+                            countDownLatch.countDown();\n+                        }\n+\n+                        @Override\n+                        public void onSuccess(Boolean value) {\n+                            countDownLatch.countDown();\n+                        }\n+                    });\n+                countDownLatch.await();\n+                dlm.close();\n+            }\n+        }\n+    }\n+\n     public DistributedLogTool() {\n         super();\n         addCommand(new AuditBKSpaceCommand());\n@@ -2748,6 +2864,7 @@ public DistributedLogTool() {\n         addCommand(new DeserializeDLSNCommand());\n         addCommand(new SerializeDLSNCommand());\n         addCommand(new WatchNamespaceCommand());\n+        addCommand(new DeleteSubscriberCommand());\n     }\n \n     @Override"},{"sha":"fce9bcd2da2dd42a2113add68d4c80af9070640e","filename":"src/main/java/com/twitter/distributedlog/util/Utils.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/68f796019ce771a44ba20548046a444177143be0/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FUtils.java?ref=68f796019ce771a44ba20548046a444177143be0","patch":"@@ -432,6 +432,44 @@ public void processResult(int rc, String path, Object ctx) {\n         return promise;\n     }\n \n+    /**\n+     * Delete the given <i>path</i> from zookeeper.\n+     *\n+     * @param zkc\n+     *          zookeeper client\n+     * @param path\n+     *          path to delete\n+     * @param version\n+     *          version used to set data\n+     * @return future representing if the delete is successful. Return true if the node is deleted,\n+     * false if the node doesn't exist, otherwise future will throw exception\n+     *\n+     */\n+    public static Future<Boolean> zkDeleteIfNotExist(ZooKeeperClient zkc, String path, ZkVersion version) {\n+        ZooKeeper zk;\n+        try {\n+            zk = zkc.get();\n+        } catch (ZooKeeperClient.ZooKeeperConnectionException e) {\n+            return Future.exception(FutureUtils.zkException(e, path));\n+        } catch (InterruptedException e) {\n+            return Future.exception(FutureUtils.zkException(e, path));\n+        }\n+        final Promise<Boolean> promise = new Promise<Boolean>();\n+        zk.delete(path, version.getZnodeVersion(), new AsyncCallback.VoidCallback() {\n+            @Override\n+            public void processResult(int rc, String path, Object ctx) {\n+                if (KeeperException.Code.OK.intValue() == rc ) {\n+                    promise.setValue(true);\n+                } else if (KeeperException.Code.NONODE.intValue() == rc) {\n+                    promise.setValue(false);\n+                } else {\n+                    promise.setException(KeeperException.create(KeeperException.Code.get(rc)));\n+                }\n+            }\n+        }, null);\n+        return promise;\n+    }\n+\n     public static Future<Void> asyncClose(@Nullable AsyncCloseable closeable,\n                                           boolean swallowIOException) {\n         if (null == closeable) {"}]}