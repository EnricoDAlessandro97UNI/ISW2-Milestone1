{"sha":"b63eb86da3757a3740f922093128868d5a53394c","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmI2M2ViODZkYTM3NTdhMzc0MGY5MjIwOTMxMjg4NjhkNWE1MzM5NGM=","commit":{"author":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-28T09:31:43Z"},"committer":{"name":"jiazhai","email":"zhaijia@live.com","date":"2017-07-28T09:31:43Z"},"message":"ISSUE #300: EnsemblePlacementPolicy must not use com.google.common.base.Optional but java.util.Optional\n\nUse standard java8 java.util.Optional instead of Optional from Guava.\nIn BookKeeper 4.5 we are shading Guava so this class is not available to downstream projects\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Jia Zhai <None>, Matteo Merli <None>, Sijie Guo <None>\n\nThis closes #302 from eolivelli/issue-300-no-guava, closes #300","tree":{"sha":"5c5c7e44bc77714ac1744c595e128610275a9a42","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/5c5c7e44bc77714ac1744c595e128610275a9a42"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/b63eb86da3757a3740f922093128868d5a53394c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b63eb86da3757a3740f922093128868d5a53394c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b63eb86da3757a3740f922093128868d5a53394c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b63eb86da3757a3740f922093128868d5a53394c/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"0ccbc0e9c3e6a82d5e44b8347cc6567e043f253f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0ccbc0e9c3e6a82d5e44b8347cc6567e043f253f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0ccbc0e9c3e6a82d5e44b8347cc6567e043f253f"}],"stats":{"total":83,"additions":38,"deletions":45},"files":[{"sha":"e4ab92b32b01a61a6d8b6f7244359ce6bcf3f29d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LocalBookieEnsemblePlacementPolicy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -17,8 +17,6 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n-import com.google.common.base.Optional;\n-\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -42,6 +40,7 @@\n import org.slf4j.LoggerFactory;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n \n /**\n  * Special ensemble placement policy that always return local bookie. Only works with ledgers with ensemble=1."},{"sha":"00f532dfce98faa1724687ec038ab864668cca5d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -439,7 +439,7 @@ private EnsemblePlacementPolicy initializeEnsemblePlacementPolicy(ClientConfigur\n         throws IOException {\n         try {\n             Class<? extends EnsemblePlacementPolicy> policyCls = conf.getEnsemblePlacementPolicy();\n-            return ReflectionUtils.newInstance(policyCls).initialize(conf, Optional.fromNullable(dnsResolver),\n+            return ReflectionUtils.newInstance(policyCls).initialize(conf, java.util.Optional.ofNullable(dnsResolver),\n                     timer, featureProvider, statsLogger);\n         } catch (ConfigurationException e) {\n             throw new IOException(\"Failed to initialize ensemble placement policy : \", e);"},{"sha":"24b1c8e6471654d7812607beb9ea0d038ad3feaf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -25,11 +25,8 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n-\n-import com.google.common.base.Optional;\n-\n import io.netty.util.HashedWheelTimer;\n-\n+import java.util.Optional;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.apache.bookkeeper.client.WeightedRandomSelection.WeightedObject;"},{"sha":"0561386cc4678564e3576111b49de45a23c00c81","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -23,9 +23,9 @@\n import java.util.Map;\n import java.util.Set;\n \n-import com.google.common.base.Optional;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n \n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;"},{"sha":"020a101ec3ad69537ce3e99113444576020de691","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicyImpl.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -51,11 +51,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Optional;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n \n /**\n  * Simple rackware ensemble placement policy."},{"sha":"c7f2802355f7dee147cdaddb8c5b6a636cd46fee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -27,11 +27,8 @@\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-\n-import com.google.common.base.Optional;\n-\n import io.netty.util.HashedWheelTimer;\n-\n+import java.util.Optional;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.feature.Feature;\n import org.apache.bookkeeper.feature.FeatureProvider;"},{"sha":"7ed90fd9119d5d44e72c82678d0d5d3b4da447d5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -29,10 +29,10 @@\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n \n-import com.google.common.base.Optional;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n import junit.framework.TestCase;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n@@ -88,7 +88,7 @@ protected void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n     }\n \n     @Override\n@@ -110,7 +110,7 @@ public void testNodeDown() throws Exception {\n         updateMyRack(NetworkTopology.DEFAULT_RACK);\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -138,7 +138,7 @@ public void testNodeReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -169,7 +169,7 @@ public void testTwoNodesDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -199,7 +199,7 @@ public void testNodeDownAndReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -444,7 +444,7 @@ public void testWeightedPlacementAndReplaceBookieWithEnoughBookiesInSameRack() t\n         int multiple = 10;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(-1); // no max cap on weight\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -491,7 +491,7 @@ public void testWeightedPlacementAndReplaceBookieWithoutEnoughBookiesInSameRack(\n         int multiple = 10, maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -567,7 +567,7 @@ public void testWeightedPlacementAndNewEnsembleWithEnoughBookiesInSameRack() thr\n         int maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -637,7 +637,7 @@ public void testWeightedPlacementAndNewEnsembleWithoutEnoughBookies() throws Exc\n         int maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -690,7 +690,7 @@ public void testNodeWithFailures() throws Exception {\n         updateMyRack(NetworkTopology.DEFAULT_RACK);\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -721,7 +721,7 @@ public void testPlacementOnStabilizeNetworkTopology() throws Exception {\n         ClientConfiguration confLocal = new ClientConfiguration();\n         confLocal.addConfiguration(conf);\n         confLocal.setNetworkTopologyStabilizePeriodSeconds(99999);\n-        repp.initialize(confLocal, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(confLocal, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);"},{"sha":"387b83a0a75a9f09570a2233ee3722598c099f1c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -46,10 +46,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.base.Optional;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n \n /**\n  * In this testsuite, ScriptBasedMapping is used as DNS_RESOLVER_CLASS for\n@@ -83,7 +83,7 @@ public void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n         \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n     }\n \n     @After"},{"sha":"74cf1f52cb9139abc8a3b487ef9bc7983f88c227","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b63eb86da3757a3740f922093128868d5a53394c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java?ref=b63eb86da3757a3740f922093128868d5a53394c","patch":"@@ -25,10 +25,10 @@\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n \n-import com.google.common.base.Optional;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n import io.netty.util.HashedWheelTimer;\n+import java.util.Optional;\n \n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -98,7 +98,7 @@ protected void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n     }\n \n     @Override\n@@ -113,7 +113,7 @@ public void testNotReorderReadIfInDefaultRack() throws Exception {\n         updateMyRack(NetworkTopology.DEFAULT_RACK);\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         List<Integer> reorderSet = repp.reorderReadSequence(ensemble, writeSet, new HashMap<BookieSocketAddress, Long>());\n         assertFalse(reorderSet == writeSet);\n@@ -126,7 +126,7 @@ public void testNodeInSameRegion() throws Exception {\n         updateMyRack(\"/r1/rack3\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -152,7 +152,7 @@ public void testNodeNotInSameRegions() throws Exception {\n         updateMyRack(\"/r2/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         List<Integer> reoderSet = repp.reorderReadSequence(ensemble, writeSet, new HashMap<BookieSocketAddress, Long>());\n         LOG.info(\"reorder set : {}\", reoderSet);\n@@ -166,7 +166,7 @@ public void testNodeDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -195,7 +195,7 @@ public void testNodeReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -226,7 +226,7 @@ public void testTwoNodesDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -362,7 +362,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n     public void testNewEnsembleWithSingleRegion() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -393,7 +393,7 @@ public void testNewEnsembleWithSingleRegion() throws Exception {\n     public void testNewEnsembleWithMultipleRegions() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -471,7 +471,7 @@ public void testNewEnsembleWithEnoughRegions() throws Exception {\n     public void testNewEnsembleWithThreeRegions() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -538,7 +538,7 @@ public void testNewEnsembleWithThreeRegionsWithDisable() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n         conf.setProperty(REPP_DISALLOW_BOOKIE_PLACEMENT_IN_REGION_FEATURE_NAME, \"disallowBookies\");\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -617,7 +617,7 @@ public void testNewEnsembleWithFiveRegions() throws Exception {\n         repp = new RegionAwareEnsemblePlacementPolicy();\n         conf.setProperty(REPP_REGIONS_TO_WRITE, \"region1;region2;region3;region4;region5\");\n         conf.setProperty(REPP_MINIMUM_REGIONS_FOR_DURABILITY, 5);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -722,7 +722,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n         }\n         conf.setProperty(REPP_DISALLOW_BOOKIE_PLACEMENT_IN_REGION_FEATURE_NAME, \"disallowBookies\");\n \n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -859,7 +859,7 @@ public void testEnsembleDurabilityDisabledInternal(int minDurability, boolean di\n             conf.setProperty(REPP_ENABLE_DURABILITY_ENFORCEMENT_IN_REPLACE, true);\n         }\n \n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -924,7 +924,7 @@ public void testNewEnsembleFailWithFiveRegions() throws Exception {\n         conf.setProperty(REPP_REGIONS_TO_WRITE, \"region1;region2;region3;region4;region5\");\n         conf.setProperty(REPP_MINIMUM_REGIONS_FOR_DURABILITY, 5);\n         conf.setProperty(REPP_ENABLE_VALIDATION, false);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -977,7 +977,7 @@ private void prepareNetworkTopologyForReorderTests(String myRegion) throws Excep\n         updateMyRack(\"/\" + myRegion);\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n@@ -1207,7 +1207,7 @@ public void testNodeWithFailures() throws Exception {\n         updateMyRack(\"/r2/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n \n         BookieSocketAddress addr5 = new BookieSocketAddress(\"127.0.0.6\", 3181);\n         BookieSocketAddress addr6 = new BookieSocketAddress(\"127.0.0.7\", 3181);"}]}