{"sha":"9db51b8d532d18485798d9dd96973c22450a0495","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjlkYjUxYjhkNTMyZDE4NDg1Nzk4ZDlkZDk2OTczYzIyNDUwYTA0OTU=","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2016-09-10T18:27:43Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-09-10T18:27:43Z"},"message":"BOOKKEEPER-930: Option to disable Bookie networking\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: sijie@apache.org <sijie@apache.org>\n\nCloses #49 from eolivelli/BOOKKEEPER-930","tree":{"sha":"52b5c1ff5fa401707779487a1612a7f8f03ba866","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/52b5c1ff5fa401707779487a1612a7f8f03ba866"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/9db51b8d532d18485798d9dd96973c22450a0495","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9db51b8d532d18485798d9dd96973c22450a0495","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9db51b8d532d18485798d9dd96973c22450a0495","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9db51b8d532d18485798d9dd96973c22450a0495/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"28f23e80bc1f64a22b45c52166cd51d526eacb5b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/28f23e80bc1f64a22b45c52166cd51d526eacb5b","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/28f23e80bc1f64a22b45c52166cd51d526eacb5b"}],"stats":{"total":388,"additions":318,"deletions":70},"files":[{"sha":"67e81cc1443dc357a55d1e6441035d50f67aed68","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -114,6 +114,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     // registration.\n     protected final static String USE_HOST_NAME_AS_BOOKIE_ID = \"useHostNameAsBookieID\";\n     protected final static String ENABLE_LOCAL_TRANSPORT = \"enableLocalTransport\";\n+    protected final static String DISABLE_SERVER_SOCKET_BIND = \"disableServerSocketBind\";\n \n     protected final static String SORTED_LEDGER_STORAGE_ENABLED = \"sortedLedgerStorageEnabled\";\n     protected final static String SKIP_LIST_SIZE_LIMIT = \"skipListSizeLimit\";\n@@ -1561,7 +1562,7 @@ public ServerConfiguration setUseHostNameAsBookieID(boolean useHostName) {\n     }\n \n     /**\n-     * Get hwhether to use listen for local JVM clients. Defaults to false.\n+     * Get whether to listen for local JVM clients. Defaults to false.\n      *\n      * @return true, then bookie will be listen for local JVM clients\n      */\n@@ -1582,6 +1583,28 @@ public ServerConfiguration setEnableLocalTransport(boolean enableLocalTransport)\n         return this;\n     }\n \n+    /**\n+     * Get whether to disable bind of server-side sockets. Defaults to false.\n+     *\n+     * @return true, then bookie will not listen for network connections\n+     */\n+    public boolean isDisableServerSocketBind() {\n+        return getBoolean(DISABLE_SERVER_SOCKET_BIND, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to disable bind on network interfaces,\n+     * this bookie will be available only to BookKeeper clients executed on the local JVM\n+     *\n+     * @see #getDisableServerSocketBind\n+     * @param disableServerSocketBind\n+     *            whether to disable binding on network interfaces\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setDisableServerSocketBind(boolean disableServerSocketBind) {\n+        setProperty(DISABLE_SERVER_SOCKET_BIND, disableServerSocketBind);\n+        return this;\n+    }\n \n     /**\n      * Get the stats provider used by bookie."},{"sha":"5fcc64eaeb05259ec96e0ea7ca2dbe0e7f9ea869","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":32,"deletions":66,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -21,20 +21,14 @@\n package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.auth.BookieAuthProvider;\n import org.apache.bookkeeper.auth.AuthProviderFactoryFactory;\n import org.apache.bookkeeper.processor.RequestProcessor;\n import org.apache.zookeeper.KeeperException;\n-import org.jboss.netty.bootstrap.ServerBootstrap;\n import org.jboss.netty.channel.Channel;\n-import org.jboss.netty.channel.ChannelFactory;\n import org.jboss.netty.channel.ChannelHandlerContext;\n import org.jboss.netty.channel.ChannelPipeline;\n import org.jboss.netty.channel.ChannelPipelineFactory;\n@@ -44,18 +38,14 @@\n import org.jboss.netty.channel.group.ChannelGroup;\n import org.jboss.netty.channel.group.ChannelGroupFuture;\n import org.jboss.netty.channel.group.DefaultChannelGroup;\n-import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;\n import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;\n import org.jboss.netty.handler.codec.frame.LengthFieldPrepender;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.protobuf.ExtensionRegistry;\n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n-import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;\n-import org.jboss.netty.channel.local.LocalAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * Netty server for serving bookie requests\n@@ -65,21 +55,19 @@ class BookieNettyServer {\n \n     final static int maxMessageSize = 0xfffff;\n     final ServerConfiguration conf;\n-    final ChannelFactory serverChannelFactory;\n-    final ChannelFactory jvmServerChannelFactory;\n+    final List<ChannelManager> channels = new ArrayList<>();\n     final RequestProcessor requestProcessor;\n     final ChannelGroup allChannels = new CleanupChannelGroup();\n     final AtomicBoolean isRunning = new AtomicBoolean(false);\n-    Object suspensionLock = new Object();\n+    final Object suspensionLock = new Object();\n     boolean suspended = false;\n-    final BookieSocketAddress bookieAddress;\n \n     final BookieAuthProvider.Factory authProviderFactory;\n     final BookieProtoEncoding.ResponseEncoder responseEncoder;\n     final BookieProtoEncoding.RequestDecoder requestDecoder;\n \n     BookieNettyServer(ServerConfiguration conf, RequestProcessor processor)\n-            throws IOException, KeeperException, InterruptedException, BookieException  {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         this.conf = conf;\n         this.requestProcessor = processor;\n \n@@ -89,25 +77,25 @@ class BookieNettyServer {\n         responseEncoder = new BookieProtoEncoding.ResponseEncoder(registry);\n         requestDecoder = new BookieProtoEncoding.RequestDecoder(registry);\n \n-        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n-        String base = \"bookie-\" + conf.getBookiePort() + \"-netty\";\n-        serverChannelFactory = new NioServerSocketChannelFactory(\n-                Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-boss-%d\").build()),\n-                Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-worker-%d\").build()));\n+        if (!conf.isDisableServerSocketBind()) {\n+            channels.add(new NioServerSocketChannelManager());\n+        }\n         if (conf.isEnableLocalTransport()) {\n-            jvmServerChannelFactory = new DefaultLocalServerChannelFactory();\n-        } else {\n-            jvmServerChannelFactory = null;\n+            channels.add(new VMLocalChannelManager());\n         }\n-        bookieAddress = Bookie.getBookieAddress(conf);\n-        InetSocketAddress bindAddress;\n-        if (conf.getListeningInterface() == null) {\n-            // listen on all interfaces\n-            bindAddress = new InetSocketAddress(conf.getBookiePort());\n-        } else {\n-            bindAddress = bookieAddress.getSocketAddress();\n+        try {\n+            for (ChannelManager channel : channels) {\n+                Channel nettyChannel = channel.start(conf, new BookiePipelineFactory());\n+                allChannels.add(nettyChannel);\n+            }\n+        } catch (IOException bindError) {\n+            // clean up all the channels, if this constructor throws an exception the caller code will\n+            // not be able to call close(), leading to a resource leak \n+            for (ChannelManager channel : channels) {\n+                channel.close();\n+            }\n+            throw bindError;\n         }\n-        listenOn(bindAddress, bookieAddress);\n     }\n \n     boolean isRunning() {\n@@ -131,44 +119,21 @@ void resumeProcessing() {\n         }\n     }\n \n-    private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress) {\n-        ServerBootstrap bootstrap = new ServerBootstrap(serverChannelFactory);\n-        bootstrap.setPipelineFactory(new BookiePipelineFactory());\n-        bootstrap.setOption(\"child.tcpNoDelay\", conf.getServerTcpNoDelay());\n-        bootstrap.setOption(\"child.soLinger\", 2);\n-\n-        Channel listen = bootstrap.bind(address);\n-        allChannels.add(listen);\n-\n-        if (conf.isEnableLocalTransport()) {\n-            ServerBootstrap jvmbootstrap = new ServerBootstrap(jvmServerChannelFactory);\n-            jvmbootstrap.setPipelineFactory(new BookiePipelineFactory());\n-\n-            // use the same address 'name', so clients can find local Bookie still discovering them using ZK\n-            Channel jvmlisten = jvmbootstrap.bind(bookieAddress.getLocalAddress());\n-            allChannels.add(jvmlisten);\n-            LocalBookiesRegistry.registerLocalBookieAddress(bookieAddress);\n-        }\n-    }\n-\n     void start() {\n         isRunning.set(true);\n     }\n \n     void shutdown() {\n         LOG.info(\"Shutting down BookieNettyServer\");\n-        if (conf.isEnableLocalTransport()) {\n-            LocalBookiesRegistry.unregisterLocalBookieAddress(bookieAddress);\n-        }\n         isRunning.set(false);\n         allChannels.close().awaitUninterruptibly();\n-        serverChannelFactory.releaseExternalResources();\n-        if (conf.isEnableLocalTransport()) {\n-            jvmServerChannelFactory.releaseExternalResources();\n+        for (ChannelManager channel : channels) {\n+            channel.close();\n         }\n     }\n \n-    private class BookiePipelineFactory implements ChannelPipelineFactory {\n+    class BookiePipelineFactory implements ChannelPipelineFactory {\n+\n         public ChannelPipeline getPipeline() throws Exception {\n             synchronized (suspensionLock) {\n                 while (suspended) {\n@@ -177,16 +142,16 @@ public ChannelPipeline getPipeline() throws Exception {\n             }\n             ChannelPipeline pipeline = Channels.pipeline();\n             pipeline.addLast(\"lengthbaseddecoder\",\n-                             new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));\n+                    new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));\n             pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n \n             pipeline.addLast(\"bookieProtoDecoder\", requestDecoder);\n             pipeline.addLast(\"bookieProtoEncoder\", responseEncoder);\n             pipeline.addLast(\"bookieAuthHandler\",\n-                             new AuthHandler.ServerSideHandler(authProviderFactory));\n+                    new AuthHandler.ServerSideHandler(authProviderFactory));\n \n-            SimpleChannelHandler requestHandler = isRunning.get() ?\n-                    new BookieRequestHandler(conf, requestProcessor, allChannels)\n+            SimpleChannelHandler requestHandler = isRunning.get()\n+                    ? new BookieRequestHandler(conf, requestProcessor, allChannels)\n                     : new RejectRequestHandler();\n \n             pipeline.addLast(\"bookieRequestHandler\", requestHandler);\n@@ -204,6 +169,7 @@ public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws E\n     }\n \n     private static class CleanupChannelGroup extends DefaultChannelGroup {\n+\n         private AtomicBoolean closed = new AtomicBoolean(false);\n \n         CleanupChannelGroup() {\n@@ -230,9 +196,9 @@ public boolean equals(Object o) {\n             if (!(o instanceof CleanupChannelGroup)) {\n                 return false;\n             }\n-            CleanupChannelGroup other = (CleanupChannelGroup)o;\n+            CleanupChannelGroup other = (CleanupChannelGroup) o;\n             return other.closed.get() == closed.get()\n-                && super.equals(other);\n+                    && super.equals(other);\n         }\n \n         @Override"},{"sha":"15f00db1f60901b86d92880f0c62d8e77d7f96fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ChannelManager.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FChannelManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FChannelManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FChannelManager.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2016 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import java.io.IOException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelPipelineFactory;\n+\n+/**\n+ * Manages the lifycycle of a communication Channel\n+ * @author enrico.olivelli\n+ */\n+public abstract class ChannelManager {\n+\n+    /**\n+     * Boots the Channel\n+     * @param conf Bookie Configuration\n+     * @param channelPipelineFactory Netty Pipeline Factory\n+     * @param bookieAddress The actual address to listen on\n+     * @return the channel which is listening for incoming connections\n+     * @throws IOException \n+     */\n+    public abstract Channel start(ServerConfiguration conf, ChannelPipelineFactory channelPipelineFactory) throws IOException;\n+\n+    /**\n+     * Releases all resources\n+     */\n+    public abstract void close();\n+}"},{"sha":"0dd2aa31f0a2fd60464a5241d522d46918730782","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/LocalBookiesRegistry.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -35,7 +35,9 @@ static void registerLocalBookieAddress(BookieSocketAddress address) {\n         localBookiesRegistry.put(address,Boolean.TRUE);\n     }\n     static void unregisterLocalBookieAddress(BookieSocketAddress address) {\n-        localBookiesRegistry.remove(address);\n+        if (address!= null) {\n+            localBookiesRegistry.remove(address);\n+        }\n     }\n     static boolean isLocalBookie(BookieSocketAddress address) {        \n         return localBookiesRegistry.containsKey(address);"},{"sha":"925d677e742115d643e99f8ebabf6d15c93dd9a2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NioServerSocketChannelManager.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNioServerSocketChannelManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNioServerSocketChannelManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNioServerSocketChannelManager.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2016 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.Executors;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.jboss.netty.bootstrap.ServerBootstrap;\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelFactory;\n+import org.jboss.netty.channel.ChannelPipelineFactory;\n+import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;\n+\n+/**\n+ * Manages a NioServerSocketChannel channel\n+ *\n+ * @author enrico.olivelli\n+ */\n+public class NioServerSocketChannelManager extends ChannelManager {\n+\n+    private ChannelFactory channelFactory;\n+\n+    @Override\n+    public Channel start(ServerConfiguration conf, ChannelPipelineFactory bookiePipelineFactory) throws IOException {\n+        BookieSocketAddress bookieAddress = Bookie.getBookieAddress(conf);\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+        String base = \"bookie-\" + conf.getBookiePort() + \"-netty\";\n+        this.channelFactory = new NioServerSocketChannelFactory(\n+                Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-boss-%d\").build()),\n+                Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-worker-%d\").build()));\n+\n+        ServerBootstrap bootstrap = new ServerBootstrap(channelFactory);\n+        bootstrap.setPipelineFactory(bookiePipelineFactory);\n+        bootstrap.setOption(\"child.tcpNoDelay\", conf.getServerTcpNoDelay());\n+        bootstrap.setOption(\"child.soLinger\", 2);\n+\n+        InetSocketAddress bindAddress;\n+        if (conf.getListeningInterface() == null) {\n+            // listen on all interfaces\n+            bindAddress = new InetSocketAddress(conf.getBookiePort());\n+        } else {\n+            bindAddress = bookieAddress.getSocketAddress();\n+        }\n+        \n+        Channel listen = bootstrap.bind(bindAddress);\n+        return listen;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (channelFactory != null) {\n+            channelFactory.releaseExternalResources();\n+        }\n+        channelFactory = null;\n+    }\n+}\n\\ No newline at end of file"},{"sha":"21b16fb40664cf230e4b3f516a277a4322d7fa06","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -588,7 +588,7 @@ void errorOutReadKey(final CompletionKey key, final int rc) {\n             public void safeRun() {\n                 String bAddress = \"null\";\n                 Channel c = channel;\n-                if (c != null) {\n+                if (c != null && c.getRemoteAddress() != null) {\n                     bAddress = c.getRemoteAddress().toString();\n                 }\n \n@@ -620,7 +620,7 @@ void errorOutAddKey(final CompletionKey key, final int rc) {\n             public void safeRun() {\n                 String bAddress = \"null\";\n                 Channel c = channel;\n-                if(c != null) {\n+                if(c != null && c.getRemoteAddress() != null) {\n                     bAddress = c.getRemoteAddress().toString();\n                 }\n                 LOG.debug(\"Could not write request for adding entry: {} ledger-id: {} bookie: {} rc: {}\","},{"sha":"03881b53ff998371e9c826b00b01a0c0c5d1a282","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/VMLocalChannelManager.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FVMLocalChannelManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FVMLocalChannelManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FVMLocalChannelManager.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2016 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import java.io.IOException;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.jboss.netty.bootstrap.ServerBootstrap;\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelFactory;\n+import org.jboss.netty.channel.ChannelPipelineFactory;\n+import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;\n+\n+/**\n+ * Manages VM-local channels\n+ *\n+ * @author enrico.olivelli\n+ */\n+public class VMLocalChannelManager extends ChannelManager {\n+\n+    private ChannelFactory channelFactory;\n+    private BookieSocketAddress bookieAddress;\n+\n+    @Override\n+    public Channel start(ServerConfiguration conf, ChannelPipelineFactory bookiePipelineFactory) throws IOException {\n+        BookieSocketAddress bookieAddress = Bookie.getBookieAddress(conf);\n+        this.channelFactory = new DefaultLocalServerChannelFactory();\n+        this.bookieAddress = bookieAddress;\n+        ServerBootstrap jvmbootstrap = new ServerBootstrap(channelFactory);\n+        jvmbootstrap.setPipelineFactory(bookiePipelineFactory);\n+\n+        // use the same address 'name', so clients can find local Bookie still discovering them using ZK\n+        Channel jvmlisten = jvmbootstrap.bind(bookieAddress.getLocalAddress());\n+        LocalBookiesRegistry.registerLocalBookieAddress(bookieAddress);\n+        return jvmlisten;\n+    }\n+\n+    @Override\n+    public void close() {\n+        LocalBookiesRegistry.unregisterLocalBookieAddress(bookieAddress);\n+        if (channelFactory != null) {\n+            channelFactory.releaseExternalResources();\n+        }\n+        channelFactory = null;\n+    }\n+\n+}"},{"sha":"5a1f7fc72b3eb2edfe79f0cb9cf9fc96b8efe1ec","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/NetworkLessBookieTest.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9db51b8d532d18485798d9dd96973c22450a0495/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java?ref=9db51b8d532d18485798d9dd96973c22450a0495","patch":"@@ -0,0 +1,79 @@\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+\n+package org.apache.bookkeeper.proto;\n+\n+import java.util.concurrent.CountDownLatch;\n+import org.apache.bookkeeper.client.BookKeeper;\n+\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.test.BaseTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Tests of the main BookKeeper client using networkless comunication\n+ */\n+public class NetworkLessBookieTest extends BaseTestCase {\n+    \n+    protected ServerConfiguration newServerConfiguration() throws Exception {       \n+        return super\n+                .newServerConfiguration()\n+                .setDisableServerSocketBind(true)\n+                .setEnableLocalTransport(true);\n+    }\n+        \n+    DigestType digestType;\n+    \n+    public NetworkLessBookieTest(DigestType digestType) {\n+        super(4);            \n+        this.digestType=digestType;\n+    }\n+\n+    @Test\n+    public void testUseLocalBookie() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+                \n+        try (BookKeeper bkc = new BookKeeper(conf);) {\n+            try (LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes());) {\n+                h.addEntry(\"test\".getBytes());\n+            }\n+        }\n+\n+        for (BookieServer bk : bs) {\n+            for (ChannelManager channel : bk.nettyServer.channels) {\n+                if (! (channel instanceof VMLocalChannelManager)) {\n+                    Assert.fail();\n+                }\n+            }\n+        }\n+    }\n+\n+}"}]}