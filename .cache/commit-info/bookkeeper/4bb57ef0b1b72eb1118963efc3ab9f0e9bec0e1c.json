{"sha":"4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjRiYjU3ZWYwYjFiNzJlYjExMTg5NjNlZmMzYWI5ZjBlOWJlYzBlMWM=","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2016-12-17T01:42:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-17T01:42:18Z"},"message":"BOOKKEEPER-967: New testsuite for RackPlacement\n\nAdded New Testsuite for testing\nRackAwareEnsemblePlacementPolicy using\nScriptBasedMapping. It works\nonly on Unix based OS, because of Shell\nscript.\n\nThis testsuite has similar testscenarios as in\nTestRackawareEnsemblePlacementPolicy.java.\n\nAlso here it is assumed that the script file\nhas execution permission.\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #86 from reddycharan/testrackawareusingscript","tree":{"sha":"c083aa7d99d881737aa36c38290a9bae78278779","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/c083aa7d99d881737aa36c38290a9bae78278779"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d2e82d4942be079cbfdb179e9a3fe3e574beff8d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d2e82d4942be079cbfdb179e9a3fe3e574beff8d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d2e82d4942be079cbfdb179e9a3fe3e574beff8d"}],"stats":{"total":285,"additions":285,"deletions":0},"files":[{"sha":"ff53d7fabb8901685b62b0151092611a1aa124e6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java","status":"added","additions":271,"deletions":0,"changes":271,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRackawareEnsemblePlacementPolicyUsingScript.java?ref=4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","patch":"@@ -0,0 +1,271 @@\n+package org.apache.bookkeeper.client;\n+\n+import static org.apache.bookkeeper.client.RackawareEnsemblePlacementPolicy.REPP_DNS_RESOLVER_CLASS;\n+import static org.apache.bookkeeper.feature.SettableFeatureProvider.DISABLE_ALL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.net.CommonConfigurationKeys;\n+import org.apache.bookkeeper.net.DNSToSwitchMapping;\n+import org.apache.bookkeeper.net.ScriptBasedMapping;\n+import org.apache.bookkeeper.util.Shell;\n+import org.jboss.netty.util.HashedWheelTimer;\n+import org.junit.After;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Optional;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+/**\n+ * In this testsuite, ScriptBasedMapping is used as DNS_RESOLVER_CLASS for\n+ * mapping nodes to racks. Shell Script -\n+ * src/test/resources/networkmappingscript.sh is used in ScriptBasedMapping for\n+ * resolving racks. This script maps HostAddress to rack depending on the last\n+ * character of the HostAddress string. for eg. 127.0.0.1 :- /1, 127.0.0.2 :-\n+ * /2, 99.12.34.21 :- /1\n+ * \n+ * This testsuite has same testscenarios as in\n+ * TestRackawareEnsemblePlacementPolicy.java.\n+ * \n+ * For now this Testsuite works only on Unix based OS.\n+ */\n+public class TestRackawareEnsemblePlacementPolicyUsingScript {\n+    \n+    static final Logger LOG = LoggerFactory.getLogger(TestRackawareEnsemblePlacementPolicyUsingScript.class);\n+\n+    HashedWheelTimer timer;\n+    RackawareEnsemblePlacementPolicy repp;\n+    ClientConfiguration conf = new ClientConfiguration();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        conf.setProperty(REPP_DNS_RESOLVER_CLASS, ScriptBasedMapping.class.getName());\n+        conf.setProperty(CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY,\n+                \"src/test/resources/networkmappingscript.sh\");\n+        timer = new HashedWheelTimer(\n+                new ThreadFactoryBuilder().setNameFormat(\"TestTimer-%d\").build(),\n+                conf.getTimeoutTimerTickDurationMs(), TimeUnit.MILLISECONDS,\n+                conf.getTimeoutTimerNumTicks());\n+        \n+        repp = new RackawareEnsemblePlacementPolicy();\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>absent(), timer, DISABLE_ALL, null);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        repp.uninitalize();\n+    }\n+\n+    private void ignoreTestIfItIsWindowsOS() {\n+        Assume.assumeTrue(!Shell.WINDOWS);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testReplaceBookieWithEnoughBookiesInSameRack() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.1.2\", 3181); // /2 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181); // /4 rack\n+\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        // replace node under r2\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, new HashSet<BookieSocketAddress>());\n+        assertEquals(addr3, replacedBookie);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testReplaceBookieWithEnoughBookiesInDifferentRack() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.3\", 3181); // /3 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181); // /4 rack\n+\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        // replace node under r2\n+        Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n+        excludedAddrs.add(addr1);\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+\n+        assertFalse(addr1.equals(replacedBookie));\n+        assertTrue(addr3.equals(replacedBookie) || addr4.equals(replacedBookie));\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.3\", 3181); // /3 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181); // /4 rack\n+\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        // replace node under r2\n+        Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n+        excludedAddrs.add(addr1);\n+        excludedAddrs.add(addr3);\n+        excludedAddrs.add(addr4);\n+        try {\n+            repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+            fail(\"Should throw BKNotEnoughBookiesException when there is not enough bookies\");\n+        } catch (BKNotEnoughBookiesException bnebe) {\n+            // should throw not BKNotEnoughBookiesException\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testNewEnsembleWithSingleRack() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.1.1\", 3181); // /1 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.2.1\", 3181); // /1 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.3.1\", 3181); // /1 rack\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        try {\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            assertEquals(0, getNumCoveredWriteQuorums(ensemble, 2));\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            assertEquals(0, getNumCoveredWriteQuorums(ensemble2, 2));\n+        } catch (BKNotEnoughBookiesException bnebe) {\n+            fail(\"Should not get not enough bookies exception even there is only one rack.\");\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testNewEnsembleWithMultipleRacks() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.1.2\", 3181); // /2 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.2.2\", 3181); // /2 rack\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        try {\n+            ArrayList<BookieSocketAddress> ensemble = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            int numCovered = getNumCoveredWriteQuorums(ensemble, 2);\n+            assertTrue(numCovered == 2);\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            numCovered = getNumCoveredWriteQuorums(ensemble2, 2);\n+            assertTrue(numCovered == 2);\n+        } catch (BKNotEnoughBookiesException bnebe) {\n+            fail(\"Should not get not enough bookies exception\");\n+        }\n+    }\n+\n+    @Test(timeout = 90000)\n+    public void testNewEnsembleWithEnoughRacks() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.3\", 3181); // /3 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181); // /4 rack\n+        BookieSocketAddress addr5 = new BookieSocketAddress(\"127.0.1.1\", 3181); // /1 rack\n+        BookieSocketAddress addr6 = new BookieSocketAddress(\"127.0.1.2\", 3181); // /2 rack\n+        BookieSocketAddress addr7 = new BookieSocketAddress(\"127.0.1.3\", 3181); // /3 rack\n+        BookieSocketAddress addr8 = new BookieSocketAddress(\"127.0.1.4\", 3181); // /4 rack\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        addrs.add(addr5);\n+        addrs.add(addr6);\n+        addrs.add(addr7);\n+        addrs.add(addr8);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        try {\n+            ArrayList<BookieSocketAddress> ensemble1 = repp.newEnsemble(3, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            assertEquals(3, getNumCoveredWriteQuorums(ensemble1, 2));\n+            ArrayList<BookieSocketAddress> ensemble2 = repp.newEnsemble(4, 2, 2, null, new HashSet<BookieSocketAddress>());\n+            assertEquals(4, getNumCoveredWriteQuorums(ensemble2, 2));\n+        } catch (BKNotEnoughBookiesException bnebe) {\n+            fail(\"Should not get not enough bookies exception.\");\n+        }\n+    }\n+\n+    /**\n+     * Test for BOOKKEEPER-633\n+     */\n+\n+    @Test(timeout = 60000)\n+    public void testRemoveBookieFromCluster() {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+        BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.1.2\", 3181); // /2 rack\n+        BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181); // /4 rack\n+        // Update cluster\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        addrs.remove(addr1);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+    }\n+\n+    private int getNumCoveredWriteQuorums(ArrayList<BookieSocketAddress> ensemble, int writeQuorumSize)\n+            throws Exception {\n+        int ensembleSize = ensemble.size();\n+        int numCoveredWriteQuorums = 0;\n+        for (int i = 0; i < ensembleSize; i++) {\n+            Set<String> racks = new HashSet<String>();\n+            for (int j = 0; j < writeQuorumSize; j++) {\n+                int bookieIdx = (i + j) % ensembleSize;\n+                BookieSocketAddress addr = ensemble.get(bookieIdx);\n+                String hostAddress = addr.getSocketAddress().getAddress().getHostAddress();\n+                String rack = \"/\" + hostAddress.charAt(hostAddress.length() - 1);\n+                racks.add(rack);\n+            }\n+            numCoveredWriteQuorums += (racks.size() > 1 ? 1 : 0);\n+        }\n+        return numCoveredWriteQuorums;\n+    }\n+    \n+}"},{"sha":"136ee0b5ba639d91412c44a6f4640fcb7b3df434","filename":"bookkeeper-server/src/test/resources/networkmappingscript.sh","status":"added","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c/bookkeeper-server%2Fsrc%2Ftest%2Fresources%2Fnetworkmappingscript.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c/bookkeeper-server%2Fsrc%2Ftest%2Fresources%2Fnetworkmappingscript.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fresources%2Fnetworkmappingscript.sh?ref=4bb57ef0b1b72eb1118963efc3ab9f0e9bec0e1c","patch":"@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+# This script is used as NetworkTopology Mapping Script in TestRackawareEnsemblePlacementPolicyUsingScript.java TestSuite\n+# It just maps HostAddress to rack depending on the last character of the HostAddress string\n+# for eg. \n+#       127.0.0.1    - /1\n+#       127.0.0.2    - /2\n+#       199.12.34.21 - /1\n+# This script file is used just for testing purpose\n+\n+for var in \"$@\"\n+do\n+    i=$((${#var}-1))\n+    echo /${var:$i:1}\n+done\n\\ No newline at end of file"}]}