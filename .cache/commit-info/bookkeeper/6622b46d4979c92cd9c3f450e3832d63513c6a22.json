{"sha":"6622b46d4979c92cd9c3f450e3832d63513c6a22","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjY2MjJiNDZkNDk3OWM5MmNkOWMzZjQ1MGUzODMyZDYzNTEzYzZhMjI=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-04-21T07:17:45Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-04-21T07:17:45Z"},"message":"BOOKKEEPER-849: Collect stats with sub-milliseconds precision (Matteo Merli via sijie)","tree":{"sha":"395b08652beeb2e6d834995141cbd57ff240a4b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/395b08652beeb2e6d834995141cbd57ff240a4b2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/6622b46d4979c92cd9c3f450e3832d63513c6a22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6622b46d4979c92cd9c3f450e3832d63513c6a22","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6622b46d4979c92cd9c3f450e3832d63513c6a22","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6622b46d4979c92cd9c3f450e3832d63513c6a22/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"638b332569a0ce4c502cc4d15be535a67d464f9d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/638b332569a0ce4c502cc4d15be535a67d464f9d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/638b332569a0ce4c502cc4d15be535a67d464f9d"}],"stats":{"total":300,"additions":200,"deletions":100},"files":[{"sha":"308a0a4375d1039a7db6325b55a5bf2ec5eba8ff","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -67,6 +67,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-844: Add more metrics about latency and bytes characteristics on bookie operations (Tong Yu via sijie)\n \n+      BOOKKEEPER-849: Collect stats with sub-milliseconds precision (Matteo Merli via sijie)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"c7919f71102061285656842f749f8c8aa1f70724","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -44,6 +44,7 @@ public interface BookKeeperServerStats {\n     public final static String BOOKIE_READ_ENTRY = \"BOOKIE_READ_ENTRY\";\n \n     // Journal Stats\n+    public final static String JOURNAL_SCOPE = \"journal\";\n     public final static String JOURNAL_ADD_ENTRY = \"JOURNAL_ADD_ENTRY\";\n     public final static String JOURNAL_MEM_ADD_ENTRY = \"JOURNAL_MEM_ADD_ENTRY\";\n     public final static String JOURNAL_PREALLOCATION = \"JOURNAL_PREALLOCATION\";"},{"sha":"3078ff1659674c4fde9815f4dfa8d767825c797e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -88,6 +88,7 @@\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.READ_BYTES;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_STATUS;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.WRITE_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.JOURNAL_SCOPE;\n \n /**\n  * Implements a bookie.\n@@ -486,7 +487,8 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // directories are full, would throws exception and fail bookie startup.\n         this.ledgerDirsManager.init();\n         // instantiate the journal\n-        journal = new Journal(conf, ledgerDirsManager);\n+        journal = new Journal(conf, ledgerDirsManager, statsLogger.scope(JOURNAL_SCOPE));\n+\n         // Check the type of storage.\n         if (conf.getSortedLedgerStorageEnabled()) {\n             ledgerStorage = new SortedLedgerStorage(conf, ledgerManager,\n@@ -1123,13 +1125,13 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n             transitionToReadOnlyMode();\n             throw new IOException(e);\n         } finally {\n-            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            long elapsedNanos = MathUtils.elapsedNanos(requestNanos);\n             if (success) {\n-                recoveryAddEntryStats.registerSuccessfulEvent(elapsedMSec);\n-                addBytesStats.registerSuccessfulEvent(entrySize);\n+                recoveryAddEntryStats.registerSuccessfulEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                addBytesStats.registerSuccessfulValue(entrySize);\n             } else {\n-                recoveryAddEntryStats.registerFailedEvent(elapsedMSec);\n-                addBytesStats.registerFailedEvent(entrySize);\n+                recoveryAddEntryStats.registerFailedEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                addBytesStats.registerFailedValue(entrySize);\n             }\n         }\n     }\n@@ -1158,13 +1160,13 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n             transitionToReadOnlyMode();\n             throw new IOException(e);\n         } finally {\n-            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            long elapsedNanos = MathUtils.elapsedNanos(requestNanos);\n             if (success) {\n-                addEntryStats.registerSuccessfulEvent(elapsedMSec);\n-                addBytesStats.registerSuccessfulEvent(entrySize);\n+                addEntryStats.registerSuccessfulEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                addBytesStats.registerSuccessfulValue(entrySize);\n             } else {\n-                addEntryStats.registerFailedEvent(elapsedMSec);\n-                addBytesStats.registerFailedEvent(entrySize);\n+                addEntryStats.registerFailedEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                addBytesStats.registerFailedValue(entrySize);\n             }\n         }\n     }\n@@ -1213,13 +1215,13 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n             success = true;\n             return entry;\n         } finally {\n-            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            long elapsedNanos = MathUtils.elapsedNanos(requestNanos);\n             if (success) {\n-                readEntryStats.registerSuccessfulEvent(elapsedMSec);\n-                readBytesStats.registerSuccessfulEvent(entrySize);\n+                readEntryStats.registerSuccessfulEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                readBytesStats.registerSuccessfulValue(entrySize);\n             } else {\n-                readEntryStats.registerFailedEvent(elapsedMSec);\n-                readBytesStats.registerFailedEvent(entrySize);\n+                readEntryStats.registerFailedEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n+                readBytesStats.registerFailedValue(entrySize);\n             }\n         }\n     }"},{"sha":"60da56059ece4c06213b1b20298e964423f85bbe","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -26,14 +26,14 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.stats.Counter;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n \n@@ -187,9 +187,9 @@ Checkpoint snapshot(Checkpoint oldCp) throws IOException {\n             }\n \n             if (null != cp) {\n-                snapshotStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                snapshotStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                snapshotStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                snapshotStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n         return cp;\n@@ -309,9 +309,9 @@ public long addEntry(long ledgerId, long entryId, final ByteBuffer entry, final\n             return size;\n         } finally {\n             if (success) {\n-                putEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                putEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                putEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                putEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n     }\n@@ -382,9 +382,9 @@ public EntryKeyValue getEntry(long ledgerId, long entryId) throws IOException {\n         } finally {\n             this.lock.readLock().unlock();\n             if (success) {\n-                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n \n@@ -411,9 +411,9 @@ public EntryKeyValue getLastEntry(long ledgerId) throws IOException {\n         } finally {\n             this.lock.readLock().unlock();\n             if (success) {\n-                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n "},{"sha":"5ee9ab0ddc747ebe36aea4db0c8786bbe5da9651","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -28,6 +28,9 @@\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+\n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager;\n@@ -232,9 +235,9 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n             success = true;\n         } finally {\n             if (success) {\n-                getOffsetStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getOffsetStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                getOffsetStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getOffsetStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n         // Get Entry\n@@ -246,9 +249,9 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n             return ByteBuffer.wrap(retBytes);\n         } finally {\n             if (success) {\n-                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             } else {\n-                getEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                getEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);\n             }\n         }\n     }"},{"sha":"cc61aa5afafcf4d7ebc1f12e210f62bd9fa5b0ca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -342,7 +342,8 @@ public int process(boolean shouldForceWrite) throws IOException {\n         @Override\n         public void run() {\n             for (QueueEntry e : this.forceWriteWaiters) {\n-                journalAddEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(e.enqueueTime));\n+                journalAddEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(e.enqueueTime),\n+                        TimeUnit.NANOSECONDS);\n                 e.callback();    // Process cbs inline\n             }\n         }\n@@ -406,7 +407,7 @@ public void run() {\n                             // the last force write and then reset the counter so we can accumulate\n                             // requests in the write we are about to issue\n                             if (numReqInLastForceWrite > 0) {\n-                                forceWriteGroupingCountStats.registerSuccessfulEvent(numReqInLastForceWrite);\n+                                forceWriteGroupingCountStats.registerSuccessfulValue(numReqInLastForceWrite);\n                                 numReqInLastForceWrite = 0;\n                             }\n                         }\n@@ -810,7 +811,7 @@ public void run() {\n                                         removePagesFromCache,\n                                         conf.getJournalFormatVersionToWrite());\n                     journalCreationStats.registerSuccessfulEvent(\n-                            journalCreationWatcher.stop().elapsedTime(TimeUnit.MILLISECONDS));\n+                            journalCreationWatcher.stop().elapsedTime(TimeUnit.NANOSECONDS), TimeUnit.NANOSECONDS);\n \n                     bc = logFile.getBufferedChannel();\n \n@@ -864,7 +865,7 @@ public void run() {\n                             bc.flush(false);\n                             lastFlushPosition = bc.position();\n                             journalFlushStats.registerSuccessfulEvent(\n-                                    journalFlushWatcher.stop().elapsedTime(TimeUnit.MILLISECONDS));\n+                                    journalFlushWatcher.stop().elapsedTime(TimeUnit.NANOSECONDS), TimeUnit.NANOSECONDS);\n \n                             // Trace the lifetime of entries through persistence\n                             if (LOG.isDebugEnabled()) {\n@@ -873,8 +874,8 @@ public void run() {\n                                 }\n                             }\n \n-                            forceWriteBatchEntriesStats.registerSuccessfulEvent(toFlush.size());\n-                            forceWriteBatchBytesStats.registerSuccessfulEvent(batchSize);\n+                            forceWriteBatchEntriesStats.registerSuccessfulValue(toFlush.size());\n+                            forceWriteBatchBytesStats.registerSuccessfulValue(batchSize);\n \n                             forceWriteRequests.put(new ForceWriteRequest(logFile, logId, lastFlushPosition, toFlush, (lastFlushPosition > maxJournalSize), false));\n                             toFlush = new LinkedList<QueueEntry>();"},{"sha":"9cda8caf779e928b7ab5df62d567da8473a09411","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -23,6 +23,7 @@\n \n import java.security.GeneralSecurityException;\n import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n@@ -142,9 +143,9 @@ public void operationComplete(int rc, Long ledgerId) {\n     private void createComplete(int rc, LedgerHandle lh) {\n         // Opened a new ledger\n         if (BKException.Code.OK != rc) {\n-            createOpLogger.registerFailedEvent(MathUtils.elapsedMSec(startTime));\n+            createOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         } else {\n-            createOpLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(startTime));\n+            createOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         }\n         cb.createComplete(rc, lh, ctx);\n     }"},{"sha":"13ce1fd6ae7dd877e0c2e17dbe8ee6feaf2d3008","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -21,6 +21,8 @@\n \n package org.apache.bookkeeper.client;\n \n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n@@ -81,9 +83,9 @@ public void initiate() {\n     @Override\n     public void safeOperationComplete(int rc, Void result) {\n         if (BKException.Code.OK != rc) {\n-            deleteOpLogger.registerFailedEvent(MathUtils.elapsedMSec(startTime));\n+            deleteOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         } else {\n-            deleteOpLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(startTime));\n+            deleteOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         }\n         cb.deleteComplete(rc, this.ctx);\n     }"},{"sha":"69a09e9f368accd4b2d3c1c339d65191bddd3693","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -22,6 +22,7 @@\n package org.apache.bookkeeper.client;\n \n import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n import java.security.GeneralSecurityException;\n \n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -31,7 +32,6 @@\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -196,9 +196,9 @@ public void readLastConfirmedComplete(int rc,\n \n     void openComplete(int rc, LedgerHandle lh) {\n         if (BKException.Code.OK != rc) {\n-            openOpLogger.registerFailedEvent(MathUtils.elapsedMSec(startTime));\n+            openOpLogger.registerFailedEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         } else {\n-            openOpLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(startTime));\n+            openOpLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n         }\n         cb.openComplete(rc, lh, ctx);\n     }"},{"sha":"fb876777e3596dc0e77a1fc000a5fa3ed6d0d3aa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -19,6 +19,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n@@ -54,7 +55,7 @@ class PendingAddOp implements WriteCallback {\n \n     LedgerHandle lh;\n     boolean isRecoveryAdd = false;\n-    long requestTimeMillis;\n+    long requestTimeNanos;\n     OpStatsLogger addOpLogger;\n \n     PendingAddOp(LedgerHandle lh, AddCallback cb, Object ctx) {\n@@ -130,7 +131,7 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n     }\n \n     void initiate(ChannelBuffer toSend, int entryLength) {\n-        requestTimeMillis = MathUtils.now();\n+        requestTimeNanos = MathUtils.nowInNano();\n         this.toSend = toSend;\n         this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n@@ -189,13 +190,13 @@ public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddre\n     }\n \n     void submitCallback(final int rc) {\n-        long latencyMillis = MathUtils.now() - requestTimeMillis;\n+        long latencyNanos = MathUtils.elapsedNanos(requestTimeNanos);\n         if (rc != BKException.Code.OK) {\n-            addOpLogger.registerFailedEvent(latencyMillis);\n+            addOpLogger.registerFailedEvent(latencyNanos, TimeUnit.NANOSECONDS);\n             LOG.error(\"Write of ledger entry to quorum failed: L{} E{}\",\n                       lh.getId(), entryId);\n         } else {\n-            addOpLogger.registerSuccessfulEvent(latencyMillis);\n+            addOpLogger.registerSuccessfulEvent(latencyNanos, TimeUnit.NANOSECONDS);\n         }\n         cb.addComplete(rc, lh, entryId, ctx);\n     }"},{"sha":"102d38e50c7909e279337a4eb94637fd43a36e7d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -67,7 +67,7 @@ class PendingReadOp implements Enumeration<LedgerEntry>, ReadEntryCallback {\n     long numPendingEntries;\n     long startEntryId;\n     long endEntryId;\n-    long requestTimeMillis;\n+    long requestTimeNanos;\n     OpStatsLogger readOpLogger;\n \n     final int maxMissedReadsAllowed;\n@@ -285,7 +285,7 @@ private void cancelSpeculativeTask(boolean mayInterruptIfRunning) {\n \n     public void initiate() throws InterruptedException {\n         long nextEnsembleChange = startEntryId, i = startEntryId;\n-        this.requestTimeMillis = MathUtils.now();\n+        this.requestTimeNanos = MathUtils.nowInNano();\n         ArrayList<BookieSocketAddress> ensemble = null;\n \n         if (speculativeReadTimeout > 0) {\n@@ -373,7 +373,7 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n     }\n \n     private void submitCallback(int code) {\n-        long latencyMillis = MathUtils.now() - requestTimeMillis;\n+        long latencyNanos = MathUtils.elapsedNanos(requestTimeNanos);\n         if (code != BKException.Code.OK) {\n             long firstUnread = LedgerHandle.INVALID_ENTRY_ID;\n             for (LedgerEntryRequest req : seq) {\n@@ -384,9 +384,9 @@ private void submitCallback(int code) {\n             }\n             LOG.error(\"Read of ledger entry failed: L{} E{}-E{}, Heard from {}. First unread entry is {}\",\n                     new Object[] { lh.getId(), startEntryId, endEntryId, heardFromHosts, firstUnread });\n-            readOpLogger.registerFailedEvent(latencyMillis);\n+            readOpLogger.registerFailedEvent(latencyNanos, TimeUnit.NANOSECONDS);\n         } else {\n-            readOpLogger.registerSuccessfulEvent(latencyMillis);\n+            readOpLogger.registerSuccessfulEvent(latencyNanos, TimeUnit.NANOSECONDS);\n         }\n         cancelSpeculativeTask(true);\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);"},{"sha":"a2dc4d8b16148a2b9f0bc229444e14952bb1d593","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -17,6 +17,8 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookieProtocol.Request;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n@@ -55,9 +57,9 @@ protected boolean isVersionCompatible() {\n     protected void sendResponse(int rc, Object response, OpStatsLogger statsLogger) {\n         channel.write(response);\n         if (BookieProtocol.EOK == rc) {\n-            statsLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(enqueueNanos));\n+            statsLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(enqueueNanos), TimeUnit.NANOSECONDS);\n         } else {\n-            statsLogger.registerFailedEvent(MathUtils.elapsedMSec(enqueueNanos));\n+            statsLogger.registerFailedEvent(MathUtils.elapsedNanos(enqueueNanos), TimeUnit.NANOSECONDS);\n         }\n     }\n "},{"sha":"0d7bbeed86b692208b79be3282bba8ab9c4bb7d3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -20,6 +20,8 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.proto.BookkeeperProtocol.BKPacketHeader;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.ProtocolVersion;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.Request;\n@@ -46,9 +48,9 @@ public PacketProcessorBaseV3(Request request, Channel channel,\n     protected void sendResponse(StatusCode code, Object response, OpStatsLogger statsLogger) {\n         channel.write(response);\n         if (StatusCode.EOK == code) {\n-            statsLogger.registerSuccessfulEvent(MathUtils.elapsedMSec(enqueueNanos));\n+            statsLogger.registerSuccessfulEvent(MathUtils.elapsedNanos(enqueueNanos), TimeUnit.NANOSECONDS);\n         } else {\n-            statsLogger.registerFailedEvent(MathUtils.elapsedMSec(enqueueNanos));\n+            statsLogger.registerFailedEvent(MathUtils.elapsedNanos(enqueueNanos), TimeUnit.NANOSECONDS);\n         }\n     }\n "},{"sha":"34b0362d7da098f8071bf0da8a29f2d6c559257e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -825,16 +825,16 @@ public ReadCompletion(final OpStatsLogger readEntryOpLogger,\n                               final Object originalCtx, final long ledgerId, final long entryId,\n                               final Timeout timeout) {\n             super(originalCtx, ledgerId, entryId, timeout);\n-            final long requestTimeMillis = MathUtils.now();\n+            final long startTime = MathUtils.nowInNano();\n             this.cb = null == readEntryOpLogger ? originalCallback : new ReadEntryCallback() {\n                 @Override\n                 public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer buffer, Object ctx) {\n                     cancelTimeout();\n-                    long latencyMillis = MathUtils.now() - requestTimeMillis;\n+                    long latency = MathUtils.elapsedNanos(startTime);\n                     if (rc != BKException.Code.OK) {\n-                        readEntryOpLogger.registerFailedEvent(latencyMillis);\n+                        readEntryOpLogger.registerFailedEvent(latency, TimeUnit.NANOSECONDS);\n                     } else {\n-                        readEntryOpLogger.registerSuccessfulEvent(latencyMillis);\n+                        readEntryOpLogger.registerSuccessfulEvent(latency, TimeUnit.NANOSECONDS);\n                     }\n                     originalCallback.readEntryComplete(rc, ledgerId, entryId, buffer, originalCtx);\n                 }\n@@ -856,16 +856,16 @@ public AddCompletion(final OpStatsLogger addEntryOpLogger,\n                              final Object originalCtx, final long ledgerId, final long entryId,\n                              final Timeout timeout) {\n             super(originalCtx, ledgerId, entryId, timeout);\n-            final long requestTimeMillis = MathUtils.now();\n+            final long startTime = MathUtils.nowInNano();\n             this.cb = null == addEntryOpLogger ? originalCallback : new WriteCallback() {\n                 @Override\n                 public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddress addr, Object ctx) {\n                     cancelTimeout();\n-                    long latencyMillis = MathUtils.now() - requestTimeMillis;\n+                    long latency = MathUtils.elapsedNanos(startTime);\n                     if (rc != BKException.Code.OK) {\n-                        addEntryOpLogger.registerFailedEvent(latencyMillis);\n+                        addEntryOpLogger.registerFailedEvent(latency, TimeUnit.NANOSECONDS);\n                     } else {\n-                        addEntryOpLogger.registerSuccessfulEvent(latencyMillis);\n+                        addEntryOpLogger.registerSuccessfulEvent(latency, TimeUnit.NANOSECONDS);\n                     }\n                     originalCallback.writeComplete(rc, ledgerId, entryId, addr, originalCtx);\n                 }\n@@ -917,7 +917,7 @@ public String toString() {\n         }\n \n         private long elapsedTime() {\n-            return MathUtils.elapsedMSec(requestAt);\n+            return MathUtils.elapsedNanos(requestAt);\n         }\n \n         @Override\n@@ -927,14 +927,15 @@ public void run(Timeout timeout) throws Exception {\n             }\n             if (OperationType.ADD_ENTRY == operationType) {\n                 errorOutAddKey(this);\n-                addTimeoutOpLogger.registerSuccessfulEvent(elapsedTime());\n+                addTimeoutOpLogger.registerSuccessfulEvent(elapsedTime(), TimeUnit.NANOSECONDS);\n             } else {\n                 errorOutReadKey(this);\n-                readTimeoutOpLogger.registerSuccessfulEvent(elapsedTime());\n+                readTimeoutOpLogger.registerSuccessfulEvent(elapsedTime(), TimeUnit.NANOSECONDS);\n             }\n         }\n     }\n \n+\n     /**\n      * Note : Helper functions follow\n      */"},{"sha":"7c17bb1c93b50958e482aaa2b8cfed9c5e33f321","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -120,12 +120,14 @@ protected void processPacket() {\n         LOG.trace(\"Read entry rc = {} for {}\",\n                 new Object[] { errorCode, read });\n         if (errorCode == BookieProtocol.EOK) {\n-            requestProcessor.readEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.readEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n             sendResponse(errorCode, ResponseBuilder.buildReadResponse(data, read),\n                          requestProcessor.readRequestStats);\n \n         } else {\n-            requestProcessor.readEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.readEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n             sendResponse(errorCode, ResponseBuilder.buildErrorResponse(errorCode, read),\n                          requestProcessor.readRequestStats);\n         }"},{"sha":"4073d41005530902f94533aa3bf83d578db5942c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -134,9 +134,11 @@ private ReadResponse getReadResponse() {\n         }\n \n         if (status == StatusCode.EOK) {\n-            requestProcessor.readEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.readEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n         } else {\n-            requestProcessor.readEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.readEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n         }\n \n         // Finally set status and return. The body would have been updated if"},{"sha":"f493d73da87730efb50bb3551f517298db28926b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -18,6 +18,7 @@\n package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n@@ -77,7 +78,8 @@ protected void processPacket() {\n             rc = BookieProtocol.EUA;\n         }\n         if (rc != BookieProtocol.EOK) {\n-            requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n             sendResponse(rc,\n                          ResponseBuilder.buildErrorResponse(rc, add),\n                          requestProcessor.addRequestStats);\n@@ -88,9 +90,11 @@ protected void processPacket() {\n     public void writeComplete(int rc, long ledgerId, long entryId,\n                               BookieSocketAddress addr, Object ctx) {\n         if (BookieProtocol.EOK == rc) {\n-            requestProcessor.addEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.addEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n         } else {\n-            requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+            requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                    TimeUnit.NANOSECONDS);\n         }\n         sendResponse(rc,\n                      ResponseBuilder.buildAddResponse(request),"},{"sha":"6517d8f0a3f2c4f0a3cb671e83188278fedeca20","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -22,6 +22,7 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n@@ -70,9 +71,11 @@ private AddResponse getAddResponse() {\n             public void writeComplete(int rc, long ledgerId, long entryId,\n                                       BookieSocketAddress addr, Object ctx) {\n                 if (BookieProtocol.EOK == rc) {\n-                    requestProcessor.addEntryStats.registerSuccessfulEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                    requestProcessor.addEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                            TimeUnit.NANOSECONDS);\n                 } else {\n-                    requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedMSec(startTimeNanos));\n+                    requestProcessor.addEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n+                            TimeUnit.NANOSECONDS);\n                 }\n \n                 StatusCode status;"},{"sha":"4239b6a0920a8489dd2b561ddddd6c3af682b618","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -28,8 +28,10 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import com.google.common.base.Stopwatch;\n+\n import org.apache.bookkeeper.bookie.BookieThread;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BKException.BKBookieHandleNotAvailableException;\n@@ -189,9 +191,9 @@ private void rereplicate() throws InterruptedException, BKException,\n         } finally {\n             long latencyMillis = stopwatch.stop().elapsedMillis();\n             if (success) {\n-                rereplicateOpStats.registerSuccessfulEvent(latencyMillis);\n+                rereplicateOpStats.registerSuccessfulEvent(latencyMillis, TimeUnit.MILLISECONDS);\n             } else {\n-                rereplicateOpStats.registerFailedEvent(latencyMillis);\n+                rereplicateOpStats.registerFailedEvent(latencyMillis, TimeUnit.MILLISECONDS);\n             }\n         }\n     }"},{"sha":"4cff2bbd25b543e9cb6b2d0c8c0dbc772cde9725","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -73,4 +73,15 @@ public static long nowInNano() {\n     public static long elapsedMSec (long startNanoTime) {\n        return (System.nanoTime() - startNanoTime)/ NANOSECONDS_PER_MILLISECOND;\n     }\n+\n+    /**\n+     * Nanoseconds elapsed since the time specified, the input is nanoTime\n+     * the only conversion happens when computing the elapsed time\n+     *\n+     * @param startNanoTime the start of the interval that we are measuring\n+     * @return elapsed time in milliseconds.\n+     */\n+    public static long elapsedNanos(long startNanoTime) {\n+       return System.nanoTime() - startNanoTime;\n+    }\n }"},{"sha":"fa250590c2519904737e94c3be356a1cba245e1c","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -23,7 +23,6 @@\n import com.codahale.metrics.Snapshot;\n \n import java.util.Arrays;\n-import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n class CodahaleOpStatsLogger implements OpStatsLogger {\n@@ -36,12 +35,22 @@ class CodahaleOpStatsLogger implements OpStatsLogger {\n     }\n \n     // OpStatsLogger functions\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        fail.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+        fail.update(eventLatency, unit);\n     }\n \n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        success.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+        success.update(eventLatency, unit);\n+    }\n+\n+    public void registerSuccessfulValue(long value) {\n+        // Values are inserted as millis, which is the unit they will be presented, to maintain 1:1 scale\n+        success.update(value, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void registerFailedValue(long value) {\n+        // Values are inserted as millis, which is the unit they will be presented, to maintain 1:1 scale\n+        fail.update(value, TimeUnit.MILLISECONDS);\n     }\n \n     public synchronized void clear() {"},{"sha":"4cc22facfb30535746692a80fa106162668d6d42","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/test/java/org/apache/bookkeeper/stats/CodahaleOpStatsTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsTest.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -23,7 +23,7 @@ public class CodahaleOpStatsTest {\n     @org.junit.Test\n     public void testToOpStatsData() {\n         OpStatsLogger logger = new CodahaleMetricsProvider().getStatsLogger(\"test\").getOpStatsLogger(\"testLogger\");\n-        logger.registerSuccessfulEvent(1);\n+        logger.registerSuccessfulValue(1);\n         // the following should not throw any exception\n         OpStatsData statsData = logger.toOpStatsData();\n         assertEquals(1, statsData.getNumSuccessfulEvents());"},{"sha":"3e8eeb969d57667096ff0e6b97cb9de760a3ae1b","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOpStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOpStatsLoggerImpl.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -16,6 +16,8 @@\n  */\n package org.apache.bookkeeper.stats.twitter.ostrich;\n \n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.stats.OpStatsData;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n@@ -44,17 +46,29 @@ private String statName(String statName) {\n     }\n \n     @Override\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        failureMetric.add((int)eventLatencyMillis);\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+        failureMetric.add((int) unit.toMillis(eventLatency));\n         failureCounter.incr();\n     }\n \n     @Override\n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        successMetric.add((int)eventLatencyMillis);\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+        successMetric.add((int) unit.toMillis(eventLatency));\n+        successCounter.incr();\n+    }\n+\n+    @Override\n+    public void registerSuccessfulValue(long value) {\n+        successMetric.add((int) value);\n         successCounter.incr();\n     }\n \n+    @Override\n+    public void registerFailedValue(long value) {\n+        failureMetric.add((int) value);\n+        failureCounter.incr();\n+    }\n+\n     @Override\n     public OpStatsData toOpStatsData() {\n         long numSuccess = successCounter.apply();"},{"sha":"77c4bff00378e1893a85f8fb3555bf31238a3519","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -36,12 +36,20 @@ public OpStatsLoggerImpl(String name) {\n     }\n \n     // OpStatsLogger functions\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        this.events.incErrors(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+        this.events.incErrors(unit.toMicros(eventLatency));\n     }\n \n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        this.events.requestComplete(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+        this.events.requestComplete(unit.toMicros(eventLatency));\n+    }\n+\n+    public void registerSuccessfulValue(long value) {\n+        this.events.requestComplete(TimeUnit.MILLISECONDS.toMicros(value));\n+    }\n+\n+    public void registerFailedValue(long value) {\n+        this.events.incErrors(TimeUnit.MILLISECONDS.toMicros(value));\n     }\n \n     public synchronized void clear() {"},{"sha":"3fc1049ee1e31ddeebf74b75cd436e7450432656","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -16,6 +16,8 @@\n  */\n package org.apache.bookkeeper.stats;\n \n+import java.util.concurrent.TimeUnit;\n+\n public class NullStatsLogger implements StatsLogger {\n \n     public static final NullStatsLogger INSTANCE = new NullStatsLogger();\n@@ -24,12 +26,22 @@ static class NullOpStatsLogger implements OpStatsLogger {\n         final OpStatsData nullOpStats = new OpStatsData(0, 0, 0, new long[6]);\n \n         @Override\n-        public void registerFailedEvent(long eventLatencyMillis) {\n+        public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+            // nop\n+        }\n+\n+        @Override\n+        public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+            // nop\n+        }\n+\n+        @Override\n+        public void registerSuccessfulValue(long value) {\n             // nop\n         }\n \n         @Override\n-        public void registerSuccessfulEvent(long eventLatencyMillis) {\n+        public void registerFailedValue(long value) {\n             // nop\n         }\n "},{"sha":"bbd69925d05b126ca9d3dac76b0d3cb04b582d36","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6622b46d4979c92cd9c3f450e3832d63513c6a22/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java?ref=6622b46d4979c92cd9c3f450e3832d63513c6a22","patch":"@@ -16,24 +16,39 @@\n  */\n package org.apache.bookkeeper.stats;\n \n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * This interface handles logging of statistics related to each operation (PUBLISH,\n  * CONSUME etc.)\n  */\n public interface OpStatsLogger {\n \n     /**\n-     * Increment the failed op counter with the given eventLatencyMillis.\n-     * @param eventLatencyMillis The event latency in milliseconds.\n+     * Increment the failed op counter with the given eventLatency.\n+     * @param eventLatencyMillis The event latency\n+     * @param unit\n      */\n-    public void registerFailedEvent(long eventLatencyMillis);\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit);\n \n     /**\n-     * An operation succeeded with the given eventLatencyMillis. Update\n+     * An operation succeeded with the given eventLatency. Update\n      * stats to reflect the same\n-     * @param eventLatencyMillis The event latency in milliseconds.\n+     * @param eventLatencyMillis The event latency\n+     * @param unit\n+     */\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit);\n+\n+    /**\n+     * An operation with the given value succeeded\n+     * @param value\n+     */\n+    public void registerSuccessfulValue(long value);\n+\n+    /**\n+     * An operation with the given value failed\n      */\n-    public void registerSuccessfulEvent(long eventLatencyMillis);\n+    public void registerFailedValue(long value);\n \n     /**\n      * @return Returns an OpStatsData object with necessary values. We need this function"}]}