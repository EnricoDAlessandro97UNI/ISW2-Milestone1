{"sha":"e0d331781ec7a0e415bc6f16c38686aab34cb0c5","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmUwZDMzMTc4MWVjN2EwZTQxNWJjNmYxNmMzODY4NmFhYjM0Y2IwYzU=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-04-21T07:55:03Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-04-21T07:55:03Z"},"message":"BOOKKEEPER-836: disable compaction when disk becomes full, otherwise compaction will fill up disk quickly (zhaijia via sijie)","tree":{"sha":"3b79c457c8f4d8925a82fc08c6cde28d549e71f7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/3b79c457c8f4d8925a82fc08c6cde28d549e71f7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/e0d331781ec7a0e415bc6f16c38686aab34cb0c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e0d331781ec7a0e415bc6f16c38686aab34cb0c5","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e0d331781ec7a0e415bc6f16c38686aab34cb0c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6dd505342051f267ca6af5fba1b70637c1e3fe0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b6dd505342051f267ca6af5fba1b70637c1e3fe0","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b6dd505342051f267ca6af5fba1b70637c1e3fe0"}],"stats":{"total":177,"additions":164,"deletions":13},"files":[{"sha":"686b8670fca7346f9a96792a905f740451bc5774","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=e0d331781ec7a0e415bc6f16c38686aab34cb0c5","patch":"@@ -83,6 +83,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-695: Some entry logs are not removed from the bookie storage (Matteo Merli via sijie)\n \n+        BOOKKEEPER-836: disable compaction when disk becomes full, otherwise compaction will fill up disk quickly (zhaijia via sijie)\n+\n Release 4.3.0 - 2014-10-03\n \n   Non-backward compatible changes:"},{"sha":"1ca43e0a64f7ef90671d442968f88429240b03db","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":47,"deletions":6,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=e0d331781ec7a0e415bc6f16c38686aab34cb0c5","patch":"@@ -66,6 +66,8 @@ public class GarbageCollectorThread extends BookieThread {\n     final double majorCompactionThreshold;\n     final long majorCompactionInterval;\n \n+    final boolean isForceGCAllowWhenNoSpace;\n+\n     long lastMinorCompactionTime;\n     long lastMajorCompactionTime;\n \n@@ -93,6 +95,10 @@ public class GarbageCollectorThread extends BookieThread {\n \n     // Boolean to trigger a forced GC.\n     final AtomicBoolean forceGarbageCollection = new AtomicBoolean(false);\n+    // Boolean to disable major compaction, when disk is almost full\n+    final AtomicBoolean suspendMajorCompaction = new AtomicBoolean(false);\n+    // Boolean to disable minor compaction, when disk is full\n+    final AtomicBoolean suspendMinorCompaction = new AtomicBoolean(false);\n \n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n@@ -264,6 +270,7 @@ public void clean(long ledgerId) {\n         minorCompactionInterval = conf.getMinorCompactionInterval() * SECOND;\n         majorCompactionThreshold = conf.getMajorCompactionThreshold();\n         majorCompactionInterval = conf.getMajorCompactionInterval() * SECOND;\n+        isForceGCAllowWhenNoSpace = conf.getIsForceGCAllowWhenNoSpace();\n \n         if (minorCompactionInterval > 0 && minorCompactionThreshold > 0) {\n             if (minorCompactionThreshold > 1.0f) {\n@@ -321,6 +328,30 @@ public void disableForceGC() {\n         }\n     }\n \n+    public void suspendMajorGC() {\n+        if (suspendMajorCompaction.compareAndSet(false, true)) {\n+            LOG.info(\"Suspend Major Compaction triggered by thread: {}\", Thread.currentThread().getName());\n+        }\n+    }\n+    \n+    public void resumeMajorGC() {\n+        if (suspendMajorCompaction.compareAndSet(true, false)) {\n+            LOG.info(\"{} Major Compaction back to normal since bookie has enough space now.\", Thread.currentThread().getName());\n+        }\n+    }\n+\n+    public void suspendMinorGC() {\n+        if (suspendMinorCompaction.compareAndSet(false, true)) {\n+            LOG.info(\"Suspend Minor Compaction triggered by thread: {}\", Thread.currentThread().getName());\n+        }\n+    }\n+    \n+    public void resumeMinorGC() {\n+        if (suspendMinorCompaction.compareAndSet(true, false)) {\n+            LOG.info(\"{} Minor Compaction back to normal since bookie has enough space now.\", Thread.currentThread().getName());\n+        }\n+    }\n+\n     @Override\n     public void run() {\n         while (running) {\n@@ -332,6 +363,7 @@ public void run() {\n                     continue;\n                 }\n             }\n+\n             boolean force = forceGarbageCollection.get();\n             if (force) {\n                 LOG.info(\"Garbage collector thread forced to perform GC before expiry of wait time.\");\n@@ -347,22 +379,31 @@ public void run() {\n             // gc entry logs\n             doGcEntryLogs();\n \n+            boolean suspendMajor = suspendMajorCompaction.get();\n+            boolean suspendMinor = suspendMinorCompaction.get();\n+            if (suspendMajor) {\n+                LOG.info(\"Disk almost full, suspend major compaction to slow down filling disk.\");\n+            }\n+            if (suspendMinor) {\n+                LOG.info(\"Disk full, suspend minor compaction to slow down filling disk.\");\n+            }\n+\n             long curTime = MathUtils.now();\n-            if (force || (enableMajorCompaction &&\n-                curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n+            if (enableMajorCompaction && (!suspendMajor) && \n+                (force || curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n                 // enter major compaction\n-                LOG.info(\"Enter major compaction\");\n+                LOG.info(\"Enter major compaction, suspendMajor {}\", suspendMajor);\n                 doCompactEntryLogs(majorCompactionThreshold);\n                 lastMajorCompactionTime = MathUtils.now();\n                 // also move minor compaction time\n                 lastMinorCompactionTime = lastMajorCompactionTime;\n                 continue;\n             }\n \n-            if (force || (enableMinorCompaction &&\n-                curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n+            if (enableMinorCompaction && (!suspendMinor) && \n+                (force || curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n                 // enter minor compaction\n-                LOG.info(\"Enter minor compaction\");\n+                LOG.info(\"Enter minor compaction, suspendMinor {}\", suspendMinor);\n                 doCompactEntryLogs(minorCompactionThreshold);\n                 lastMinorCompactionTime = MathUtils.now();\n             }"},{"sha":"eb277578e3f291799f39d427a75f3ad3c6f7de99","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":33,"deletions":7,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=e0d331781ec7a0e415bc6f16c38686aab34cb0c5","patch":"@@ -127,17 +127,31 @@ public void diskFailed(File disk) {\n \n             @Override\n             public void diskAlmostFull(File disk) {\n-                gcThread.enableForceGC();\n+                if (gcThread.isForceGCAllowWhenNoSpace) {\n+                    gcThread.enableForceGC();\n+                } else {\n+                    gcThread.suspendMajorGC();\n+                }\n             }\n \n             @Override\n             public void diskFull(File disk) {\n-                gcThread.enableForceGC();\n+                if (gcThread.isForceGCAllowWhenNoSpace) {\n+                    gcThread.enableForceGC();\n+                } else {\n+                    gcThread.suspendMajorGC();\n+                    gcThread.suspendMinorGC();\n+                }\n             }\n \n             @Override\n             public void allDisksFull() {\n-                gcThread.enableForceGC();\n+                if (gcThread.isForceGCAllowWhenNoSpace) {\n+                    gcThread.enableForceGC();\n+                } else {\n+                    gcThread.suspendMajorGC();\n+                    gcThread.suspendMinorGC();\n+                }\n             }\n \n             @Override\n@@ -147,14 +161,26 @@ public void fatalError() {\n \n             @Override\n             public void diskWritable(File disk) {\n-                // we have enough space now, disable force gc.\n-                gcThread.disableForceGC();\n+                // we have enough space now\n+                if (gcThread.isForceGCAllowWhenNoSpace) {\n+                    // disable force gc.\n+                    gcThread.disableForceGC();\n+                } else {\n+                    // resume compaction to normal.\n+                    gcThread.resumeMajorGC();\n+                    gcThread.resumeMinorGC();\n+                }\n             }\n \n             @Override\n             public void diskJustWritable(File disk) {\n-                // if a disk is just writable, we still need force gc.\n-                gcThread.enableForceGC();\n+                if (gcThread.isForceGCAllowWhenNoSpace) {\n+                    // if a disk is just writable, we still need force gc.\n+                    gcThread.enableForceGC();\n+                } else {\n+                    // still under warn threshold, only resume minor compaction.\n+                    gcThread.resumeMinorGC();\n+                }\n             }\n         };\n     }"},{"sha":"91646160681a46a368608d8d57f5bb1e2b882a89","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=e0d331781ec7a0e415bc6f16c38686aab34cb0c5","patch":"@@ -47,6 +47,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n \n     // Gc Parameters\n     protected final static String GC_WAIT_TIME = \"gcWaitTime\";\n+    protected final static String IS_FORCE_GC_ALLOW_WHEN_NO_SPACE = \"isForceGCAllowWhenNoSpace\";\n     // Sync Parameters\n     protected final static String FLUSH_INTERVAL = \"flushInterval\";\n     // Bookie death watch interval\n@@ -782,6 +783,32 @@ public ServerConfiguration setMajorCompactionInterval(long interval) {\n         return this;\n     }\n \n+    /**\n+     * Get whether force compaction is allowed when disk full or almost full.\n+     *\n+     * Force GC may get some space back, but may also fill up disk space more\n+     * quickly. This is because new log files are created before GC, while old\n+     * garbage log files deleted after GC. \n+     *\n+     * @return true  - do force GC when disk full, \n+     *         false - suspend GC when disk full.\n+     */\n+    public boolean getIsForceGCAllowWhenNoSpace() {\n+        return getBoolean(IS_FORCE_GC_ALLOW_WHEN_NO_SPACE, false);\n+    }\n+\n+    /**\n+     * Set whether force GC is allowed when disk full or almost full.\n+     * \n+     * @param force true to allow force GC; false to suspend GC\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setIsForceGCAllowWhenNoSpace(boolean force) {\n+        setProperty(IS_FORCE_GC_ALLOW_WHEN_NO_SPACE, force);\n+        return this;\n+    }\n+\n     /**\n      * Set the grace period which the rereplication worker will wait before\n      * fencing and rereplicating a ledger fragment which is still being written"},{"sha":"101fdacc5bbd9eaf65a7a249615c9b1300a25405","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e0d331781ec7a0e415bc6f16c38686aab34cb0c5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=e0d331781ec7a0e415bc6f16c38686aab34cb0c5","patch":"@@ -571,4 +571,59 @@ private ByteBuffer genEntry(long ledger, long entry, int size) {\n         bb.flip();\n         return bb;\n     }\n+\n+    /**\n+     * Suspend garbage collection when suspendMajor/suspendMinor is set.\n+     */\n+    @Test(timeout=60000)\n+    public void testSuspendGarbageCollection() throws Exception {\n+        ServerConfiguration conf = newServerConfiguration();\n+        conf.setGcWaitTime(500);\n+        conf.setMinorCompactionInterval(1);\n+        conf.setMajorCompactionInterval(2);\n+        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        CheckpointSource cp = new CheckpointSource() {\n+            @Override\n+            public Checkpoint newCheckpoint() {\n+                // Do nothing.\n+                return null;\n+            }\n+\n+            @Override\n+            public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n+                throws IOException {\n+                // Do nothing.\n+            }\n+        };\n+        Bookie.checkDirectoryStructure(conf.getJournalDir());\n+        for (File dir : dirManager.getAllLedgerDirs()) {\n+            Bookie.checkDirectoryStructure(dir);\n+        }\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf,\n+                        LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n+                        dirManager, cp);\n+        storage.start();\n+        \n+        // test suspend Major GC.\n+        Thread.sleep(conf.getMajorCompactionInterval() * 1000\n+                   + conf.getGcWaitTime());\n+        storage.gcThread.suspendMajorGC();\n+        Thread.sleep(1000);\n+        long startTime = MathUtils.now();\n+        Thread.sleep(conf.getMajorCompactionInterval() * 1000\n+                   + conf.getGcWaitTime());\n+        assertTrue(\"major compaction triggered while set suspend\",\n+                storage.gcThread.lastMajorCompactionTime < startTime); \n+\n+        // test suspend Minor GC.\n+        storage.gcThread.suspendMinorGC();\n+        Thread.sleep(1000);\n+        startTime = MathUtils.now();\n+        Thread.sleep(conf.getMajorCompactionInterval() * 1000\n+                   + conf.getGcWaitTime());\n+        assertTrue(\"minor compaction triggered while set suspend\",\n+                storage.gcThread.lastMinorCompactionTime < startTime);\n+        storage.gcThread.resumeMinorGC();\n+        storage.gcThread.resumeMajorGC();\n+    }\n }"}]}