{"sha":"21366fee0e43e69591a03d7b517cf66dff2861d9","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjIxMzY2ZmVlMGU0M2U2OTU5MWEwM2Q3YjUxN2NmNjZkZmYyODYxZDk=","commit":{"author":{"name":"sigee","email":"sigee15@gmail.com","date":"2017-07-04T04:14:11Z"},"committer":{"name":"jiazhai","email":"zhaijia@live.com","date":"2017-07-04T04:14:11Z"},"message":"Issue 223: Code cleanups\n\nDescriptions of the changes in this PR:\n\nThere are some different kind of cleanups by commits. To make the code more readeable and improve code quality and improve performance in some cases.\nE.g.:\n - Remove unnecessary semicolons\n - Remove unused/unneeded/duplicated imports\n- Replace l to L in long literals\n- Remove boxing on an already boxed value\n- Replace iterations to bulk operations\n\nAuthor: sigee <sigee15@gmail.com>\n\nReviewers: Enrico Olivelli <None>, Jia Zhai <None>, Sijie Guo <None>\n\nThis closes #217 from sigee/cleanups","tree":{"sha":"8e67252b110969c03fe689db38d294b1167a034c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/8e67252b110969c03fe689db38d294b1167a034c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/21366fee0e43e69591a03d7b517cf66dff2861d9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/21366fee0e43e69591a03d7b517cf66dff2861d9","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/21366fee0e43e69591a03d7b517cf66dff2861d9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/21366fee0e43e69591a03d7b517cf66dff2861d9/comments","author":{"login":"sigee","id":6528240,"node_id":"MDQ6VXNlcjY1MjgyNDA=","avatar_url":"https://avatars.githubusercontent.com/u/6528240?v=4","gravatar_id":"","url":"https://api.github.com/users/sigee","html_url":"https://github.com/sigee","followers_url":"https://api.github.com/users/sigee/followers","following_url":"https://api.github.com/users/sigee/following{/other_user}","gists_url":"https://api.github.com/users/sigee/gists{/gist_id}","starred_url":"https://api.github.com/users/sigee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sigee/subscriptions","organizations_url":"https://api.github.com/users/sigee/orgs","repos_url":"https://api.github.com/users/sigee/repos","events_url":"https://api.github.com/users/sigee/events{/privacy}","received_events_url":"https://api.github.com/users/sigee/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"e735c0305c8b3737e78ba5a1ba15b5d80a5ffb47","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e735c0305c8b3737e78ba5a1ba15b5d80a5ffb47","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e735c0305c8b3737e78ba5a1ba15b5d80a5ffb47"}],"stats":{"total":330,"additions":117,"deletions":213},"files":[{"sha":"71e76b6d6d603b714a33978c16945d3fe8c61a7d","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,9 +23,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n-import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.Random;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Semaphore;"},{"sha":"3fc9d259c4782e44e7b7d0cfd5d00e446dd7539b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -43,15 +43,12 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n-import org.apache.bookkeeper.bookie.Journal;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookieInfoReader;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -68,10 +65,7 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.proto.BookieClient;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GetBookieInfoCallback;\n import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.IOUtils;\n@@ -86,13 +80,10 @@\n import org.apache.commons.cli.MissingArgumentException;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.io.FileUtils;\n-import org.apache.commons.io.HexDump;\n-import org.apache.commons.io.output.ByteArrayOutputStream;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.mutable.MutableBoolean;\n import org.apache.zookeeper.KeeperException;\n@@ -103,7 +94,6 @@\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AbstractFuture;\n \n-import javax.sql.rowset.serial.SerialRef;\n \n /**\n  * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster."},{"sha":"c758195c1e784d5a2ca8aa221b867b97880ba89a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -125,7 +125,7 @@ private boolean isSuperSet(String[] s1, String[] s2) {\n     }\n \n     private boolean verifyLedgerDirs(Cookie c, boolean checkIfSuperSet) {\n-        if (checkIfSuperSet == false) {\n+        if (!checkIfSuperSet) {\n             return ledgerDirs.equals(c.ledgerDirs);\n         } else {\n             return isSuperSet(decodeDirPathFromCookie(ledgerDirs), decodeDirPathFromCookie(c.ledgerDirs));"},{"sha":"5aeb38509da346efdb20c1a9999cb7fb8cdaf3fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -438,7 +438,7 @@ static final private void checkParents(File f) throws IOException {\n         if (parent.exists()) {\n             return;\n         }\n-        if (parent.mkdirs() == false) {\n+        if (!parent.mkdirs()) {\n             throw new IOException(\"Counldn't mkdirs for \" + parent);\n         }\n     }"},{"sha":"bd8837c4501494b3359eb7808a72ea02b192cefa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -44,12 +44,7 @@\n import java.io.File;\n import java.io.FilenameFilter;\n import java.io.IOException;\n-import java.util.Map;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Scanner;\n-import java.util.NoSuchElementException;\n+import java.util.*;\n \n import static com.google.common.base.Charsets.UTF_8;\n \n@@ -100,9 +95,7 @@ public boolean accept(File dir, String name) {\n     private static List<File> getAllDirectories(ServerConfiguration conf) {\n         List<File> dirs = new ArrayList<File>();\n         dirs.addAll(Lists.newArrayList(conf.getJournalDirs()));\n-        for (File d: conf.getLedgerDirs()) {\n-            dirs.add(d);\n-        }\n+        Collections.addAll(dirs, conf.getLedgerDirs());\n         return dirs;\n     }\n "},{"sha":"7e9885c7919db6d0b38848939e522b8f2bc3eb26","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyFileInfo.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,13 +23,6 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.io.RandomAccessFile;\n-import java.nio.ByteBuffer;\n-import java.nio.BufferUnderflowException;\n-import java.nio.channels.FileChannel;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Provide a readonly file info."},{"sha":"16d39cee567405fba912972f9dc945b03b074347","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -474,7 +474,7 @@ public void recoverComplete(int rc, Object ctx) {\n \n         // Wait for the async method to complete.\n         synchronized (sync) {\n-            while (sync.value == false) {\n+            while (!sync.value) {\n                 sync.wait();\n             }\n         }\n@@ -520,7 +520,6 @@ public void processResult(int rc, String path, Object ctx) {\n                 getAvailableBookies(bookieSrc, bookieDest, cb, context);\n             }\n \n-            ;\n         }, null);\n     }\n "},{"sha":"da66848dd2245c2f0cf148b9c1cae2dc7e43ac6f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieInfoReader.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -123,7 +123,7 @@ void availableBookiesChanged(Set<BookieSocketAddress> newBookies) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     void getReadWriteBookieInfo(Collection<BookieSocketAddress> newBookiesList) {\n-        if (instanceRunning.get() == false) {\n+        if (!instanceRunning.get()) {\n             instanceRunning.compareAndSet(false, true);\n         } else {\n             isQueued.set(true);\n@@ -164,9 +164,7 @@ void getReadWriteBookieInfo(Collection<BookieSocketAddress> newBookiesList) {\n                     bookieInfoMap.remove(b);\n                     this.bookies.remove(b);\n                 }\n-                for (BookieSocketAddress b : joinedBookies) {\n-                    this.bookies.add(b);\n-                }\n+                this.bookies.addAll(joinedBookies);\n             } else {\n                 joinedBookies = this.bookies = newBookiesList;\n             }"},{"sha":"bd6c7d662a3b286b0cb8b78192ecf02fc7641839","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -475,7 +475,7 @@ public String toString() {\n                     public String toString() {\n                         return String.format(\"WriteLedgerConfigForClose(%d)\", ledgerId);\n                     }\n-                };\n+                }\n \n                 writeLedgerConfig(new CloseCb());\n "},{"sha":"ff07575168a52227110c57468217c3ec327355bb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTryReadLastConfirmedOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTryReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTryReadLastConfirmedOp.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -26,8 +26,6 @@\n \n import io.netty.buffer.ByteBuf;\n \n-import java.util.List;\n-\n /**\n  * This op is try to read last confirmed without involving quorum coverage checking.\n  * Use {@link ReadLastConfirmedOp} if you need quorum coverage checking."},{"sha":"f185e1109f3ffaf32f55a2ee05295657303e6be9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/WeightedRandomSelection.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -28,7 +28,6 @@\n import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n-import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"b4dd06627ba1c8180cf5268315323716e5772699","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -1713,7 +1713,7 @@ public ServerConfiguration setJournalRemovePagesFromCache(boolean enabled) {\n     public String getLedgerStorageClass() {\n         String ledgerStorageClass = getString(LEDGER_STORAGE_CLASS, SortedLedgerStorage.class.getName());\n         if (ledgerStorageClass.equals(SortedLedgerStorage.class.getName())\n-                && getSortedLedgerStorageEnabled() == false) {\n+                && !getSortedLedgerStorageEnabled()) {\n             // This is to retain compatibility with BK-4.3 configuration\n             // In BK-4.3, the ledger storage is configured through the \"sortedLedgerStorageEnabled\" flag :\n             // sortedLedgerStorageEnabled == true (default) ---> use SortedLedgerStorage"},{"sha":"33a46c62e8de7e5b75fb4bbf2c9c425225967a06","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -90,7 +90,7 @@ public void format(AbstractConfiguration conf, ZooKeeper zk)\n             String ledgersRootPath = conf.getZkLedgersRootPath();\n             List<String> children = zk.getChildren(ledgersRootPath, false);\n             for (String child : children) {\n-                if (ledgerManager.isSpecialZnode(child)) {\n+                if (FlatLedgerManager.isSpecialZnode(child)) {\n                     continue;\n                 }\n                 ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);"},{"sha":"730e288ff0da00bb91a1cb066792830571ca624b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -24,7 +24,6 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.ACL;\n "},{"sha":"60c44f749b18f49d0ec83db6a572913de3d745b9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LegacyHierarchicalLedgerManager.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLegacyHierarchicalLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLegacyHierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLegacyHierarchicalLedgerManager.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,17 +23,13 @@\n import java.util.List;\n import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.TreeSet;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"b01886e6c300b033b9c49570c459fff50db2074c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LongHierarchicalLedgerManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongHierarchicalLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongHierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongHierarchicalLedgerManager.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -24,7 +24,6 @@\n import java.util.List;\n import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.TreeSet;\n \n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;"},{"sha":"f410744436a74209dfc604d3ad37831b7c9708ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LongZkLedgerIdGenerator.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -19,9 +19,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Formatter;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Optional;\n \n import org.apache.bookkeeper.client.BKException;\n@@ -70,7 +68,7 @@ private enum HighOrderLedgerIdGenPathStatus {\n         UNKNOWN,\n         PRESENT,\n         NOT_PRESENT\n-    };\n+    }\n \n     public LongZkLedgerIdGenerator(ZooKeeper zk, String ledgersPath, String idGenZnodeName, ZkLedgerIdGenerator shortIdGen, List<ACL> zkAcls) {\n         this.zk = zk;\n@@ -91,8 +89,8 @@ private void generateLongLedgerIdLowBits(final String ledgerPrefix, long highBit\n             @Override\n             public void operationComplete(int rc, Long result) {\n                 if(rc == BKException.Code.OK) {\n-                    assert((highBits & 0xFFFFFFFF00000000l) == 0);\n-                    assert((result & 0xFFFFFFFF00000000l) == 0);\n+                    assert((highBits & 0xFFFFFFFF00000000L) == 0);\n+                    assert((result & 0xFFFFFFFF00000000L) == 0);\n                     cb.operationComplete(rc, (highBits << 32) | result);\n                 }\n                 else if(rc == BKException.Code.LedgerIdOverflowException) {"},{"sha":"03e471c91f16447c9e91f48153935e4441126b3a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -28,7 +28,6 @@\n import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.ACL;\n import org.slf4j.Logger;"},{"sha":"e9d48f3d46db5811e6c9f1d188e99cf21e0992f2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -49,7 +49,6 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n@@ -93,7 +92,7 @@ private static class Lock {\n \n         String getLockZNode() { return lockZNode; }\n         int getLedgerZNodeVersion() { return ledgerZNodeVersion; }\n-    };\n+    }\n     private final Map<Long, Lock> heldLocks = new ConcurrentHashMap<Long, Lock>();\n     private final Pattern idExtractionPattern;\n "},{"sha":"d97112c3def064c39b2de67a18a4d051774e9206","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmetastore%2FMSWatchedEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmetastore%2FMSWatchedEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmetastore%2FMSWatchedEvent.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -18,7 +18,7 @@\n package org.apache.bookkeeper.metastore;\n \n public class MSWatchedEvent {\n-    public enum EventType {CHANGED, REMOVED};\n+    public enum EventType {CHANGED, REMOVED}\n     \n     String key;\n     EventType type;"},{"sha":"1376048df5c1db43e7bf7864ddd834328ea23510","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -32,7 +32,6 @@\n \n import org.apache.bookkeeper.auth.AuthProviderFactoryFactory;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -51,6 +50,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.Lists;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.google.protobuf.ExtensionRegistry;\n \n import io.netty.buffer.ByteBuf;"},{"sha":"c1114bb221400592719c92c948290dd29e6b3a3d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -257,7 +257,7 @@ protected void initChannel(LocalChannel ch) throws Exception {\n                     pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n \n                     pipeline.addLast(\"bookieProtoDecoder\", new BookieProtoEncoding.RequestDecoder(registry));\n-                    pipeline.addLast(\"bookieProtoEncoder\", new BookieProtoEncoding.ResponseEncoder(registry));;\n+                    pipeline.addLast(\"bookieProtoEncoder\", new BookieProtoEncoding.ResponseEncoder(registry));\n                     pipeline.addLast(\"bookieAuthHandler\", new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));\n \n                     ChannelInboundHandler requestHandler = isRunning.get()"},{"sha":"2ec567b9820da8bbb80d2e06dfe68247623093f5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -97,7 +97,6 @@\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n-import org.apache.commons.lang.SystemUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"3df941f1facebc32c22323d61a3ed2c12c0e2762","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -43,7 +43,6 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.replication.ReplicationStats;\n import org.apache.bookkeeper.stats.Counter;\n-import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;"},{"sha":"4dde5442027ef9d986f5467ef90205586228e269","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -48,7 +48,6 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import com.google.protobuf.TextFormat;\n import static com.google.common.base.Charsets.UTF_8;\n "},{"sha":"19ccd85eb79655878ac1e6c5743140869cb5b490","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -36,9 +36,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;"},{"sha":"8ad0e129a1f370b31c03d6fbadcd07e55972320c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FEntryFormatter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FEntryFormatter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FEntryFormatter.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -21,8 +21,6 @@\n \n package org.apache.bookkeeper.util;\n \n-import java.io.IOException;\n-\n import org.apache.commons.configuration.Configuration;\n \n import org.slf4j.Logger;"},{"sha":"d900e60ec4eae5f6b45e9027610ece467ed06b0f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FHexDumpEntryFormatter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FHexDumpEntryFormatter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FHexDumpEntryFormatter.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -50,4 +50,4 @@ public void formatEntry(java.io.InputStream input) {\n         }\n     }\n \n-};\n+}"},{"sha":"de9918104283093d134a9916dc56c3c3e6c4952e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FIOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FIOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FIOUtils.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -25,7 +25,6 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.WritableByteChannel;\n \n-import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n \n /**"},{"sha":"d76bc20ca963c2375dee315900cfc5b19a95206b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FStringEntryFormatter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FStringEntryFormatter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FStringEntryFormatter.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,8 +23,6 @@\n \n import java.io.IOException;\n \n-import org.apache.commons.configuration.Configuration;\n-\n import com.google.protobuf.ByteString;\n \n public class StringEntryFormatter extends EntryFormatter {\n@@ -44,4 +42,4 @@ public void formatEntry(java.io.InputStream input) {\n         }\n     }\n \n-};\n+}"},{"sha":"440a69aba6c3948e82e650c3aba231e60e2638c2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -38,7 +38,6 @@\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.data.ACL;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -241,7 +240,7 @@ public void operationComplete(int rc, List<String> ledgers) {\n         });\n \n         synchronized (ctx) {\n-            while (ctx.done == false) {\n+            while (!ctx.done) {\n                 ctx.wait();\n             }\n         }"},{"sha":"b78eb5f51a988cbc8e3bcd78c8147321563671c0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMap.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMap.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMap.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -474,7 +474,7 @@ private static <V> void insertKeyValueNoLock(long[] keys, V[] values, long key,\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     static final long hash(long key) {"},{"sha":"d9c67f37a05fba146a481784c2ba4ad5099805c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashSet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSet.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -395,7 +395,7 @@ private static void insertKeyValueNoLock(long[] table, int capacity, long item)\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     final static long hash(long key) {"},{"sha":"12a3d76ef8c9caab5660940cac7307141edfe01d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentLongLongHashMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMap.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMap.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMap.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -697,7 +697,7 @@ private static void insertKeyValueNoLock(long[] table, int capacity, long key, l\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     final static long hash(long key) {"},{"sha":"13a75293a957ce8b285c0705b9956cf2a89d87a8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentLongLongPairHashMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongPairHashMap.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongPairHashMap.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongPairHashMap.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -488,7 +488,7 @@ private static void insertKeyValueNoLock(long[] table, int capacity, long key1,\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     final static long hash(long key1, long key2) {"},{"sha":"fe9612c1da453148471c92f8ad48fe55b8562161","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMap.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMap.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMap.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -473,7 +473,7 @@ private static <K, V> void insertKeyValueNoLock(Object[] table, int capacity, K\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     final static <K> long hash(K key) {"},{"sha":"a056a176aee067ee0bf4c1a724b6d73c49ec62e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSet.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -396,7 +396,7 @@ private static <V> void insertValueNoLock(V[] values, V value) {\n         }\n     }\n \n-    private static final long HashMixer = 0xc6a4a7935bd1e995l;\n+    private static final long HashMixer = 0xc6a4a7935bd1e995L;\n     private static final int R = 47;\n \n     final static <K> long hash(K key) {"},{"sha":"878422ca87c9a0cc16b9f2fe3ce53ae6860e4db0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -34,7 +34,6 @@\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"f49f8aefa3c323f0253cf8ce987f418c2b3978db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -21,7 +21,6 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.IOException;\n-import java.util.concurrent.Future;\n \n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n "},{"sha":"278f08acbcb6f3cb7971a433dd1cb34e78710df4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -105,7 +105,7 @@ protected Bookie newBookie(ServerConfiguration conf)\n                 bookie.zk = zkc;\n                 zkc.close();\n                 return bookie;\n-            };\n+            }\n         };\n \n         bkServer.start();"},{"sha":"30062e9b76d75806ff75735ed36636745cffa9ec","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -20,9 +20,6 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.fail;\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n "},{"sha":"0f22415aedec64bdee265a64b0dbaefc331b9ba1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -534,9 +534,9 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         assertFalse(\"Log shouldnt exist\", log0.exists());\n         InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n         storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n-        ledgers.add(1l);\n-        ledgers.add(2l);\n-        ledgers.add(3l);\n+        ledgers.add(1L);\n+        ledgers.add(2L);\n+        ledgers.add(3L);\n         storage.setMasterKey(1, KEY);\n         storage.setMasterKey(2, KEY);\n         storage.setMasterKey(3, KEY);\n@@ -548,8 +548,8 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         storage.shutdown();\n \n         assertTrue(\"Log should exist\", log0.exists());\n-        ledgers.remove(2l);\n-        ledgers.remove(3l);\n+        ledgers.remove(2L);\n+        ledgers.remove(3L);\n \n         storage = new InterleavedLedgerStorage();\n         storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n@@ -563,7 +563,7 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         }\n         assertFalse(\"Log shouldnt exist\", log0.exists());\n \n-        ledgers.add(4l);\n+        ledgers.add(4L);\n         storage.setMasterKey(4, KEY);\n         storage.addEntry(genEntry(4, 1, ENTRY_SIZE)); // force ledger 1 page to flush\n "},{"sha":"7d2039538a16e25a3901fb61a1d915705bc3cd98","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EnableZkSecurityBasicTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -33,7 +33,6 @@\n import org.apache.zookeeper.data.Stat;\n import org.junit.AfterClass;\n import static org.junit.Assert.assertEquals;\n-import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -86,8 +85,8 @@ public void testCreateLedgerAddEntryOnSecureZooKeepeer() throws Exception {\n \n         conf.setZkEnableSecurity(true);\n \n-        try (BookKeeper bkc = new BookKeeper(conf);) {\n-            try (LedgerHandle lh = bkc.createLedger(1, 1, 1, BookKeeper.DigestType.CRC32, \"testPasswd\".getBytes());) {\n+        try (BookKeeper bkc = new BookKeeper(conf)) {\n+            try (LedgerHandle lh = bkc.createLedger(1, 1, 1, BookKeeper.DigestType.CRC32, \"testPasswd\".getBytes())) {\n                 lh.addEntry(\"foo\".getBytes(StandardCharsets.UTF_8));\n             }\n         }"},{"sha":"4f2d58f4457c4d1da929d160689a542846d756d3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexCorruptionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexCorruptionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexCorruptionTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -81,7 +81,7 @@ public void testNoSuchLedger() throws Exception {\n         restartBookies();\n \n         Enumeration<LedgerEntry> seq = wlh.readEntries(0, numMsgs - 1);\n-        assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements() == true);\n+        assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements());\n         int entryId = 0;\n         while (seq.hasMoreElements()) {\n             LedgerEntry e = seq.nextElement();\n@@ -139,7 +139,7 @@ public void testEmptyIndexPage() throws Exception {\n \n         numMsgs += 3;\n         Enumeration<LedgerEntry> seq = lh2.readEntries(0, numMsgs - 1);\n-        assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements() == true);\n+        assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements());\n         int entryId = 0;\n         while (seq.hasMoreElements()) {\n             LedgerEntry e = seq.nextElement();"},{"sha":"1b58c2bb10eaea831c1b2516a2c9183ba56bb84b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestGcOverreplicatedLedger.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -231,9 +231,7 @@ private BookieSocketAddress getBookieNotInEnsemble(LedgerMetadata ledgerMetadata\n         }\n         SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles = ledgerMetadata.getEnsembles();\n         for (ArrayList<BookieSocketAddress> fragmentEnsembles : ensembles.values()) {\n-            for (BookieSocketAddress ensemble : fragmentEnsembles) {\n-                allAddresses.remove(ensemble);\n-            }\n+            allAddresses.removeAll(fragmentEnsembles);\n         }\n         Assert.assertEquals(allAddresses.size(), 1);\n         return allAddresses.get(0);"},{"sha":"5d5cc164a6bbade348de1e076d375a41c71771fd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -40,10 +40,8 @@\n import com.google.common.util.concurrent.SettableFuture;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.Unpooled;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.Enumeration;\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n@@ -470,7 +468,7 @@ Set<LedgerFragment> getResult(int time, TimeUnit unit) throws Exception {\n     @Test(timeout = 60000)\n     public void testBookKeeperAdmin() throws Exception {\n         BookKeeper bk = new BookKeeper(baseClientConf, zkc);\n-        try (BookKeeperAdmin bkadmin = new BookKeeperAdmin(bk);) {\n+        try (BookKeeperAdmin bkadmin = new BookKeeperAdmin(bk)) {\n \n             LOG.info(\"Create ledger and add entries to it\");\n             LedgerHandle lh1 = createLedgerWithEntries(bk, 100);"},{"sha":"ab22ef729d91a04060b22da9bc000a34f24a82f4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -297,10 +297,10 @@ public void testAutoCloseableBookKeeper() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()\n                 .setZkServers(zkUtil.getZooKeeperConnectString());\n         BookKeeper _bkc;\n-        try (BookKeeper bkc = new BookKeeper(conf);) {\n+        try (BookKeeper bkc = new BookKeeper(conf)) {\n             _bkc = bkc;\n             long ledgerId;\n-            try (LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes());) {\n+            try (LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes())) {\n                 ledgerId = lh.getId();\n                 for (int i = 0; i < 100; i++) {\n                     lh.addEntry(\"foobar\".getBytes());\n@@ -441,7 +441,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n         ClientConfiguration clientConfiguration = new ClientConfiguration()\n             .setZkServers(zkUtil.getZooKeeperConnectString());\n \n-        try (BookKeeper bkWriter = new BookKeeper(clientConfiguration);) {\n+        try (BookKeeper bkWriter = new BookKeeper(clientConfiguration)) {\n             LedgerHandle writeLh = bkWriter.createLedger(digestType, \"testPasswd\".getBytes());\n             long ledgerId = writeLh.getId();\n             int numOfEntries = 5;\n@@ -450,7 +450,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n             }\n \n             try (BookKeeper bkReader = new BookKeeper(clientConfiguration);\n-                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes());) {\n+                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes())) {\n                 Assert.assertTrue(\n                     \"Expected LAC of rlh: \" + (numOfEntries - 2) + \" actual LAC of rlh: \" + rlh.getLastAddConfirmed(),\n                     (rlh.getLastAddConfirmed() == (numOfEntries - 2)));\n@@ -471,7 +471,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n             }\n \n             try (BookKeeper bkReader = new BookKeeper(clientConfiguration);\n-                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes());) {\n+                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes())) {\n                 Assert.assertTrue(\n                     \"Expected LAC of rlh: \" + (numOfEntries - 2) + \" actual LAC of rlh: \" + rlh.getLastAddConfirmed(),\n                     (rlh.getLastAddConfirmed() == (numOfEntries - 2)));\n@@ -538,7 +538,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n             restartBookies();\n \n             try (BookKeeper bkReader = new BookKeeper(clientConfiguration);\n-                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes());) {\n+                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes())) {\n                 Assert.assertTrue(\n                     \"Expected LAC of rlh: \" + (numOfEntries - 2) + \" actual LAC of rlh: \" + rlh.getLastAddConfirmed(),\n                     (rlh.getLastAddConfirmed() == (numOfEntries - 2)));\n@@ -559,7 +559,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n             }\n \n             try (BookKeeper bkReader = new BookKeeper(clientConfiguration);\n-                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes());) {\n+                LedgerHandle rlh = bkReader.openLedgerNoRecovery(ledgerId, digestType, \"testPasswd\".getBytes())) {\n                 Assert.assertTrue(\n                     \"Expected LAC of rlh: \" + (numOfEntries - 2) + \" actual LAC of rlh: \" + rlh.getLastAddConfirmed(),\n                     (rlh.getLastAddConfirmed() == (numOfEntries - 2)));\n@@ -623,7 +623,7 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n \n             // open ledger with fencing, this will repair the ledger and make the last entry readable\n             try (BookKeeper bkReader = new BookKeeper(clientConfiguration);\n-                LedgerHandle rlh = bkReader.openLedger(ledgerId, digestType, \"testPasswd\".getBytes());) {\n+                LedgerHandle rlh = bkReader.openLedger(ledgerId, digestType, \"testPasswd\".getBytes())) {\n                 Assert.assertTrue(\n                     \"Expected LAC of rlh: \" + (numOfEntries - 1) + \" actual LAC of rlh: \" + rlh.getLastAddConfirmed(),\n                     (rlh.getLastAddConfirmed() == (numOfEntries - 1)));"},{"sha":"b33cbfddb4140dd866b95d83df26bb487ab91f8e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieRecoveryTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -334,7 +334,7 @@ public void testAsyncBookieRecoveryToSpecificBookie() throws Exception {\n \n         // Wait for the async method to complete.\n         synchronized (sync) {\n-            while (sync.value == false) {\n+            while (!sync.value) {\n                 sync.wait();\n             }\n             assertTrue(bookieRecoverCb.success);\n@@ -391,7 +391,7 @@ public void testAsyncBookieRecoveryToRandomBookies() throws Exception {\n \n         // Wait for the async method to complete.\n         synchronized (sync) {\n-            while (sync.value == false) {\n+            while (!sync.value) {\n                 sync.wait();\n             }\n             assertTrue(bookieRecoverCb.success);\n@@ -514,7 +514,7 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ByteBuf buffe\n         }\n \n         long await() throws InterruptedException {\n-            if (latch.await(60, TimeUnit.SECONDS) == false) {\n+            if (!latch.await(60, TimeUnit.SECONDS)) {\n                 LOG.warn(\"Didn't get all responses in verification\");\n                 return 0;\n             } else {\n@@ -593,7 +593,7 @@ public void operationComplete(int rc, LedgerMetadata result) {\n         });\n \n         synchronized (syncObj) {\n-            while (syncObj.value == false) {\n+            while (!syncObj.value) {\n                 syncObj.wait();\n             }\n         }"},{"sha":"cc591aa5cc84b7222c1b417dbea39e036d1f3d61","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/GenericEnsemblePlacementPolicyTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FGenericEnsemblePlacementPolicyTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -85,7 +85,7 @@ public void testNewEnsemble() throws Exception {\n         try {\n             Map<String, byte[]> customMetadata = new HashMap<>();\n             customMetadata.put(property, value);\n-            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc)) {\n                 bk.createLedger(1, 1, 1, digestType, PASSWORD.getBytes(), customMetadata);\n             }\n             assertEquals(1, customMetadataOnNewEnsembleStack.size());\n@@ -102,7 +102,7 @@ public void testNewEnsembleWithNotEnoughtBookies() throws Exception {\n             startBKCluster();\n             Map<String, byte[]> customMetadata = new HashMap<>();\n             customMetadata.put(property, value);\n-            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc)) {\n                 bk.createLedger(1, 1, 1, digestType, PASSWORD.getBytes(), customMetadata);\n                 fail(\"creation should fail\");\n             } catch (BKException.BKNotEnoughBookiesException bneb) {\n@@ -122,8 +122,8 @@ public void testReplaceBookie() throws Exception {\n         try {\n             Map<String, byte[]> customMetadata = new HashMap<>();\n             customMetadata.put(property, value);\n-            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc);) {\n-                try (LedgerHandle lh = bk.createLedger(2, 2, 2, digestType, PASSWORD.getBytes(), customMetadata);) {\n+            try (BookKeeper bk = new BookKeeper(baseClientConf, zkc)) {\n+                try (LedgerHandle lh = bk.createLedger(2, 2, 2, digestType, PASSWORD.getBytes(), customMetadata)) {\n                     lh.addEntry(value);\n                     long lId = lh.getId();\n                     ArrayList<BookieSocketAddress> ensembleAtFirstEntry = lh.getLedgerMetadata().getEnsemble(lId);"},{"sha":"161826d6757300511c1231bf2ac3afacd567fb96","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -20,7 +20,6 @@\n import io.netty.buffer.ByteBuf;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;"},{"sha":"8231ed81e3729ac9e2e05aff13b0881e9290d043","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,8 +23,6 @@\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.test.BaseTestCase;\n \n-import org.apache.zookeeper.KeeperException;\n-\n import org.junit.Assert;\n import org.junit.Test;\n import org.slf4j.Logger;"},{"sha":"ba7e34f4a957c3b5bf618699a66dd485b50ea584","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ParallelLedgerRecoveryTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FParallelLedgerRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FParallelLedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FParallelLedgerRecoveryTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -22,7 +22,6 @@\n \n import static com.google.common.base.Charsets.UTF_8;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import io.netty.buffer.ByteBuf;"},{"sha":"bfe7ce379e5aafddaefe04dabc313ca1a295c197","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestAddEntryQuorumTimeout.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -22,7 +22,6 @@\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Assert;"},{"sha":"f460a31a8317f2168b4168cdb540303a51513790","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestBookieWatcher.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -26,7 +26,6 @@\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;"},{"sha":"fbe50a11991c0ab16b46d508ab43e889373f63b4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestGetBookieInfoTimeout.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestGetBookieInfoTimeout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestGetBookieInfoTimeout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestGetBookieInfoTimeout.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -115,7 +115,7 @@ class CallbackObj {\n                 this.freeDiskSpace = 0L;\n                 this.totalDiskCapacity = 0L;\n             }\n-        };\n+        }\n         CallbackObj obj = new CallbackObj(flags);\n         bc.getBookieInfo(addr, flags, new GetBookieInfoCallback() {\n             @Override"},{"sha":"4ee892c5bd6e50f5fbaf112bce603a1d2a250207","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadTimeout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadTimeout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadTimeout.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -63,9 +63,7 @@ public void testReadTimeout() throws Exception {\n         }\n         \n         Set<BookieSocketAddress> beforeSet = new HashSet<BookieSocketAddress>();\n-        for (BookieSocketAddress addr : writelh.getLedgerMetadata().getEnsemble(numEntries)) {\n-            beforeSet.add(addr);\n-        }\n+        beforeSet.addAll(writelh.getLedgerMetadata().getEnsemble(numEntries));\n \n         final BookieSocketAddress bookieToSleep\n             = writelh.getLedgerMetadata().getEnsemble(numEntries).get(0);\n@@ -84,9 +82,7 @@ public void addComplete(int rc, LedgerHandle lh,\n         Assert.assertTrue(\"Write request did not finish\", completed.get());\n \n         Set<BookieSocketAddress> afterSet = new HashSet<BookieSocketAddress>();\n-        for (BookieSocketAddress addr : writelh.getLedgerMetadata().getEnsemble(numEntries + 1)) {\n-            afterSet.add(addr);\n-        }\n+        afterSet.addAll(writelh.getLedgerMetadata().getEnsemble(numEntries + 1));\n         beforeSet.removeAll(afterSet);\n         Assert.assertTrue(\"Bookie set should not match\", beforeSet.size() != 0);\n     }"},{"sha":"26d7e6be59cffd92ecff347e29b6fb17febca819","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestRegionAwareEnsemblePlacementPolicy.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -32,7 +32,6 @@\n \n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.feature.Feature;\n import org.apache.bookkeeper.feature.FeatureProvider;\n import org.apache.bookkeeper.feature.SettableFeature;\n import org.apache.bookkeeper.feature.SettableFeatureProvider;\n@@ -47,7 +46,6 @@\n \n import junit.framework.TestCase;\n \n-import static org.apache.bookkeeper.client.RackawareEnsemblePlacementPolicy.REPP_DNS_RESOLVER_CLASS;\n import static org.apache.bookkeeper.client.RegionAwareEnsemblePlacementPolicy.*;\n import static org.apache.bookkeeper.feature.SettableFeatureProvider.DISABLE_ALL;\n "},{"sha":"48d99849391d3a837b68f131703cb7937110787b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/UpdateLedgerOpTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -240,7 +240,7 @@ public void addComplete(int rccb, LedgerHandle lh, long entryId, Object ctx) {\n                     lh.asyncAddEntry((\"foobar\" + i).getBytes(), cb, null);\n                 }\n \n-            };\n+            }\n         };\n         th.start();\n         ArrayList<BookieSocketAddress> ensemble = lh.getLedgerMetadata().getEnsemble(0);"},{"sha":"4921af9b59a2661c91fbc59785d255a0e198ee5a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/NetworkLessBookieTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -64,8 +64,8 @@ public void testUseLocalBookie() throws Exception {\n         zkUtil.sleepServer(5, l);\n         l.await();\n                 \n-        try (BookKeeper bkc = new BookKeeper(conf);) {\n-            try (LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes());) {\n+        try (BookKeeper bkc = new BookKeeper(conf)) {\n+            try (LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes())) {\n                 h.addEntry(\"test\".getBytes());\n             }\n         }"},{"sha":"d08d006b2215cf37657f1948f92d0767526ac827","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -45,7 +45,6 @@\n import io.netty.channel.nio.NioEventLoopGroup;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;"},{"sha":"103f1ce1df3fc75783463b17a994e58ef25fd1e8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -624,7 +624,7 @@ public void process(WatchedEvent event) {\n                     + event.getPath());\n             for (Long ledgerId : ledgerList) {\n                 if (event.getPath().contains(ledgerId + \"\")) {\n-                    urLedgerList.add(Long.valueOf(ledgerId));\n+                    urLedgerList.add(ledgerId);\n                 }\n             }\n             LOG.debug(\"Count down and waiting for next notification\");"},{"sha":"49b18004417c8145f27ad7de17db6aee697ce64d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -28,7 +28,6 @@\n \n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n import org.slf4j.Logger;"},{"sha":"0ff8f0ad3e2d46cb1737af224504c0500628702d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/sasl/GSSAPIBookKeeperTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FGSSAPIBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FGSSAPIBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FGSSAPIBookKeeperTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -180,7 +180,7 @@ private int entryCount(long ledgerId, ServerConfiguration bookieConf,\n \n         try (BookKeeper bkc = new BookKeeper(clientConf, zkc);\n             LedgerHandle lh = bkc.openLedger(ledgerId, DigestType.CRC32,\n-                PASSWD);) {\n+                PASSWD)) {\n             if (lh.getLastAddConfirmed() < 0) {\n                 return 0;\n             }"},{"sha":"572e315724f900cd7601345f680d3c152d0c5d47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/sasl/MD5DigestBookKeeperTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FMD5DigestBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FMD5DigestBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FMD5DigestBookKeeperTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -88,7 +88,7 @@ private int entryCount(long ledgerId, ServerConfiguration bookieConf,\n \n         try (BookKeeper bkc = new BookKeeper(clientConf, zkc);\n             LedgerHandle lh = bkc.openLedger(ledgerId, DigestType.CRC32,\n-                PASSWD);) {\n+                PASSWD)) {\n \n             if (lh.getLastAddConfirmed() < 0) {\n                 return 0;"},{"sha":"a54436eef6a97d7cd3b16e432067cd72250b8e92","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -161,7 +161,7 @@ public void testAsyncCreateClose() throws IOException, BKException {\n             lh.asyncReadEntries(0, numEntriesToWrite - 1, this, sync);\n \n             synchronized (sync) {\n-                while (sync.value == false) {\n+                while (!sync.value) {\n                     sync.wait();\n                 }\n             }"},{"sha":"9106841ef54f4a41749d1ec0d1068cb8adfa652d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -167,7 +167,7 @@ protected void startBKCluster() throws Exception {\n      */\n     protected void stopBKCluster() throws Exception {\n         if (bkc != null) {\n-            bkc.close();;\n+            bkc.close();\n         }\n \n         for (BookieServer server : bs) {\n@@ -629,7 +629,7 @@ public void startReplicationService() throws Exception {\n      * isAutoRecoveryEnabled is true.\n      */\n     public void stopReplicationService() throws Exception{\n-        if(false == isAutoRecoveryEnabled()){\n+        if(!isAutoRecoveryEnabled()){\n             return;\n         }\n         for (Entry<BookieServer, AutoRecoveryMain> autoRecoveryProcess : autoRecoveryProcesses"},{"sha":"7de5cbdc066294e1b7a57436f4218fbba735ee36","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -269,7 +269,7 @@ class CallbackObj {\n                 this.freeDiskSpace = 0L;\n                 this.totalDiskCapacity = 0L;\n             }\n-        };\n+        }\n         CallbackObj obj = new CallbackObj(flags);\n         bc.getBookieInfo(addr, flags, new GetBookieInfoCallback() {\n             @Override"},{"sha":"e6aa42381b81527899ef96e859dc50048ebd4319","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -141,7 +141,7 @@ private void validLedgerEntries(long[] ledgerIds, int msgSize, int numMsgs) thro\n             }\n             while (start < numMsgs) {\n                 Enumeration<LedgerEntry> seq = lhs[j].readEntries(start, end);\n-                assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements() == true);\n+                assertTrue(\"Enumeration of ledger entries has no element\", seq.hasMoreElements());\n                 while (seq.hasMoreElements()) {\n                     LedgerEntry e = seq.nextElement();\n                     assertEquals(entryId, e.getEntryId());"},{"sha":"85d657ceea9e0dabca4b2b1a0ea3c38804e9e7d1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -222,7 +222,7 @@ private void testReadWriteAsyncSingleClient(int numEntries) throws IOException {\n             lh.asyncReadEntries(0, numEntriesToWrite - 1, this, sync);\n \n             synchronized (sync) {\n-                while (sync.value == false) {\n+                while (!sync.value) {\n                     sync.wait();\n                 }\n                 assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n@@ -345,7 +345,7 @@ public void testReadWriteRangeAsyncSingleClient() throws IOException {\n             lh.asyncReadEntries(0, numEntries - 1, this, sync);\n \n             synchronized (sync) {\n-                while (sync.value == false) {\n+                while (!sync.value) {\n                     sync.wait();\n                 }\n                 assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n@@ -430,7 +430,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n             LOG.info(\"Ledger ID: \" + lh.getId());\n             for (int i = 0; i < numEntriesToWrite; i++) {\n                 int randomInt = rng.nextInt(maxInt);\n-                byte[] entry = new String(Integer.toString(randomInt)).getBytes(charset);\n+                byte[] entry = Integer.toString(randomInt).getBytes(charset);\n                 entries.add(entry);\n                 lh.asyncAddEntry(entry, this, sync);\n             }\n@@ -765,7 +765,7 @@ public void testReadFromOpenLedger() throws Exception {\n             long toRead = lac - 1;\n \n             Enumeration<LedgerEntry> readEntry = lhOpen.readEntries(toRead, toRead);\n-            assertTrue(\"Enumeration of ledger entries has no element\", readEntry.hasMoreElements() == true);\n+            assertTrue(\"Enumeration of ledger entries has no element\", readEntry.hasMoreElements());\n             LedgerEntry e = readEntry.nextElement();\n             assertEquals(toRead, e.getEntryId());\n             Assert.assertArrayEquals(entries.get((int)toRead), e.getEntry());\n@@ -851,7 +851,7 @@ public void testReadFromOpenLedgerOpenOnce() throws Exception {\n             long readLastConfirmed = lhOpen.readLastConfirmed();\n             assertTrue(readLastConfirmed != 0);\n             Enumeration<LedgerEntry> readEntry = lhOpen.readEntries(toRead, toRead);\n-            assertTrue(\"Enumeration of ledger entries has no element\", readEntry.hasMoreElements() == true);\n+            assertTrue(\"Enumeration of ledger entries has no element\", readEntry.hasMoreElements());\n             LedgerEntry e = readEntry.nextElement();\n             assertEquals(toRead, e.getEntryId());\n             Assert.assertArrayEquals(entries.get(toRead), e.getEntry());"},{"sha":"240230936670cd9c5ec526547f4673f7533d74a6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -23,17 +23,12 @@\n \n import java.io.File;\n import org.junit.Test;\n-import org.junit.Before;\n-import org.junit.After;\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n \n-import java.net.InetAddress;\n import java.util.HashSet;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.bookie.Bookie;\n-import org.apache.bookkeeper.util.IOUtils;\n \n public class BookieZKExpireTest extends BookKeeperClusterTestCase {\n "},{"sha":"6655eab33ecfc593b7eb2b7d6d35daa74f51a612","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -20,24 +20,14 @@\n  */\n package org.apache.bookkeeper.test;\n \n-import java.io.File;\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Random;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.zookeeper.KeeperException;\n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n "},{"sha":"b5d01b3b08b7109eac8103f7d9cc2b004058be36","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -50,7 +50,7 @@\n public class TestBackwardCompat {\n     private final static Logger LOG = LoggerFactory.getLogger(TestBackwardCompat.class);\n \n-    private static ZooKeeperUtil zkUtil = new ZooKeeperUtil();;\n+    private static ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n     private static byte[] ENTRY_DATA = \"ThisIsAnEntry\".getBytes();\n \n     static void waitUp(int port) throws Exception {"},{"sha":"a327479ce096dde0677cfbfb4a7729d637d4c95a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -27,7 +27,6 @@\n import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.util.IOUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;"},{"sha":"ebacb3bad9c88f3d7ada06dc667555cd26aaf28e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestZkUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestZkUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestZkUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestZkUtils.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -62,12 +62,12 @@ public void testAsyncCreateAndDeleteFullPathOptimistic() throws IOException, Kee\n         /*\n          * \"/ledgers/available\" is already created in ZooKeeperUtil.startServer\n          */\n-        String ledgerZnodePath = new String(\"/ledgers/000/000/000/001\");\n+        String ledgerZnodePath = \"/ledgers/000/000/000/001\";\n         ZkUtils.createFullPathOptimistic(zkc, ledgerZnodePath, \"data\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                 CreateMode.PERSISTENT);\n         assertTrue(ledgerZnodePath + \" zNode should exist\", null != zkc.exists(ledgerZnodePath, false));\n \n-        ledgerZnodePath = new String(\"/ledgers/000/000/000/002\");\n+        ledgerZnodePath = \"/ledgers/000/000/000/002\";\n         ZkUtils.createFullPathOptimistic(zkc, ledgerZnodePath, \"data\".getBytes(), Ids.OPEN_ACL_UNSAFE,\n                 CreateMode.PERSISTENT);\n         assertTrue(ledgerZnodePath + \" zNode should exist\", null != zkc.exists(ledgerZnodePath, false));\n@@ -76,7 +76,7 @@ public void testAsyncCreateAndDeleteFullPathOptimistic() throws IOException, Kee\n         assertTrue(ledgerZnodePath + \" zNode should not exist, since it is deleted\",\n                 null == zkc.exists(ledgerZnodePath, false));\n \n-        ledgerZnodePath = new String(\"/ledgers/000/000/000/001\");\n+        ledgerZnodePath = \"/ledgers/000/000/000/001\";\n         assertTrue(ledgerZnodePath + \" zNode should exist\", null != zkc.exists(ledgerZnodePath, false));\n         ZkUtils.deleteFullPathOptimistic(zkc, ledgerZnodePath, -1);\n         assertTrue(ledgerZnodePath + \" zNode should not exist, since it is deleted\","},{"sha":"ed5bb2d8e7f2e2fb9a1715bcbdc9a79181308e7b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashMapTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMapTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMapTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashMapTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -244,7 +244,7 @@ public void testIteration() {\n \n         map.put(0, \"zero\");\n \n-        assertEquals(map.keys(), Lists.newArrayList(0l));\n+        assertEquals(map.keys(), Lists.newArrayList(0L));\n         assertEquals(map.values(), Lists.newArrayList(\"zero\"));\n \n         map.remove(0);\n@@ -258,7 +258,7 @@ public void testIteration() {\n \n         List<Long> keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         List<String> values = map.values();\n         Collections.sort(values);\n@@ -268,7 +268,7 @@ public void testIteration() {\n \n         keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         values = map.values();\n         Collections.sort(values);"},{"sha":"4eed7354f170e6671fac66a084533302209bb8cb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongHashSetTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSetTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSetTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongHashSetTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -218,21 +218,21 @@ public void testIteration() {\n \n         assertEquals(set.items(), Collections.emptySet());\n \n-        set.add(0l);\n+        set.add(0L);\n \n-        assertEquals(set.items(), Sets.newHashSet(0l));\n+        assertEquals(set.items(), Sets.newHashSet(0L));\n \n-        set.remove(0l);\n+        set.remove(0L);\n \n         assertEquals(set.items(), Collections.emptySet());\n \n-        set.add(0l);\n-        set.add(1l);\n-        set.add(2l);\n+        set.add(0L);\n+        set.add(1L);\n+        set.add(2L);\n \n         List<Long> values = Lists.newArrayList(set.items());\n         Collections.sort(values);\n-        assertEquals(values, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(values, Lists.newArrayList(0L, 1L, 2L));\n \n         set.clear();\n         assertTrue(set.isEmpty());"},{"sha":"fb26393ac2416100a4a4b5d5fec3996639d038cd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentLongLongHashMapTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMapTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMapTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentLongLongHashMapTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -242,8 +242,8 @@ public void testIteration() {\n \n         map.put(0, 0);\n \n-        assertEquals(map.keys(), Lists.newArrayList(0l));\n-        assertEquals(map.values(), Lists.newArrayList(0l));\n+        assertEquals(map.keys(), Lists.newArrayList(0L));\n+        assertEquals(map.values(), Lists.newArrayList(0L));\n \n         map.remove(0);\n \n@@ -256,21 +256,21 @@ public void testIteration() {\n \n         List<Long> keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         List<Long> values = map.values();\n         Collections.sort(values);\n-        assertEquals(values, Lists.newArrayList(0l, 11l, 22l));\n+        assertEquals(values, Lists.newArrayList(0L, 11L, 22L));\n \n         map.put(1, 111);\n \n         keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         values = map.values();\n         Collections.sort(values);\n-        assertEquals(values, Lists.newArrayList(0l, 22l, 111l));\n+        assertEquals(values, Lists.newArrayList(0L, 22L, 111L));\n \n         map.clear();\n         assertTrue(map.isEmpty());\n@@ -464,9 +464,9 @@ public void testAsMap() {\n         lmap.put(3, 33);\n \n         Map<Long, Long> map = Maps.newTreeMap();\n-        map.put(1l, 11l);\n-        map.put(2l, 22l);\n-        map.put(3l, 33l);\n+        map.put(1L, 11L);\n+        map.put(2L, 22L);\n+        map.put(3L, 33L);\n \n         assertEquals(map, lmap.asMap());\n     }"},{"sha":"be6fcc6880068c5eeeacc2b6884420c80a4b8da3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashMapTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMapTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMapTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashMapTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -229,33 +229,33 @@ public void testIteration() {\n         assertEquals(map.keys(), Collections.emptyList());\n         assertEquals(map.values(), Collections.emptyList());\n \n-        map.put(0l, \"zero\");\n+        map.put(0L, \"zero\");\n \n-        assertEquals(map.keys(), Lists.newArrayList(0l));\n+        assertEquals(map.keys(), Lists.newArrayList(0L));\n         assertEquals(map.values(), Lists.newArrayList(\"zero\"));\n \n-        map.remove(0l);\n+        map.remove(0L);\n \n         assertEquals(map.keys(), Collections.emptyList());\n         assertEquals(map.values(), Collections.emptyList());\n \n-        map.put(0l, \"zero\");\n-        map.put(1l, \"one\");\n-        map.put(2l, \"two\");\n+        map.put(0L, \"zero\");\n+        map.put(1L, \"one\");\n+        map.put(2L, \"two\");\n \n         List<Long> keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         List<String> values = map.values();\n         Collections.sort(values);\n         assertEquals(values, Lists.newArrayList(\"one\", \"two\", \"zero\"));\n \n-        map.put(1l, \"uno\");\n+        map.put(1L, \"uno\");\n \n         keys = map.keys();\n         Collections.sort(keys);\n-        assertEquals(keys, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(keys, Lists.newArrayList(0L, 1L, 2L));\n \n         values = map.values();\n         Collections.sort(values);\n@@ -302,11 +302,11 @@ public void testHashConflictWithDeletion() {\n     @Test\n     public void testPutIfAbsent() {\n         ConcurrentOpenHashMap<Long, String> map = new ConcurrentOpenHashMap<>();\n-        assertEquals(map.putIfAbsent(1l, \"one\"), null);\n-        assertEquals(map.get(1l), \"one\");\n+        assertEquals(map.putIfAbsent(1L, \"one\"), null);\n+        assertEquals(map.get(1L), \"one\");\n \n-        assertEquals(map.putIfAbsent(1l, \"uno\"), \"one\");\n-        assertEquals(map.get(1l), \"one\");\n+        assertEquals(map.putIfAbsent(1L, \"uno\"), \"one\");\n+        assertEquals(map.get(1L), \"one\");\n     }\n \n     @Test"},{"sha":"89f59b871ff35f98a4c6e0f9e7efc319896e218c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/collections/ConcurrentOpenHashSetTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSetTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSetTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2Fcollections%2FConcurrentOpenHashSetTest.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -217,21 +217,21 @@ public void testIteration() {\n \n         assertEquals(set.values(), Collections.emptyList());\n \n-        set.add(0l);\n+        set.add(0L);\n \n-        assertEquals(set.values(), Lists.newArrayList(0l));\n+        assertEquals(set.values(), Lists.newArrayList(0L));\n \n-        set.remove(0l);\n+        set.remove(0L);\n \n         assertEquals(set.values(), Collections.emptyList());\n \n-        set.add(0l);\n-        set.add(1l);\n-        set.add(2l);\n+        set.add(0L);\n+        set.add(1L);\n+        set.add(2L);\n \n         List<Long> values = set.values();\n         Collections.sort(values);\n-        assertEquals(values, Lists.newArrayList(0l, 1l, 2l));\n+        assertEquals(values, Lists.newArrayList(0L, 1L, 2L));\n \n         set.clear();\n         assertTrue(set.isEmpty());"},{"sha":"37c14616f7d98d68b6283f95ed9da4495c11d620","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/21366fee0e43e69591a03d7b517cf66dff2861d9/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java?ref=21366fee0e43e69591a03d7b517cf66dff2861d9","patch":"@@ -26,15 +26,12 @@\n import com.codahale.metrics.JmxReporter;\n import com.google.common.base.Strings;\n import com.google.common.net.HostAndPort;\n-import static com.codahale.metrics.MetricRegistry.name;\n import com.codahale.metrics.graphite.Graphite;\n import com.codahale.metrics.graphite.GraphiteReporter;\n \n import com.codahale.metrics.jvm.GarbageCollectorMetricSet;\n import com.codahale.metrics.jvm.MemoryUsageGaugeSet;\n \n-import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.stats.StatsProvider;\n import org.apache.commons.configuration.Configuration;\n \n import java.util.List;"}]}