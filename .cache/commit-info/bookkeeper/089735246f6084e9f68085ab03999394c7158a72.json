{"sha":"089735246f6084e9f68085ab03999394c7158a72","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjA4OTczNTI0NmY2MDg0ZTlmNjgwODVhYjAzOTk5Mzk0YzcxNThhNzI=","commit":{"author":{"name":"Dave Rusek","email":"dave.rusek@gmail.com","date":"2016-05-13T02:18:32Z"},"committer":{"name":"Guo Sijie","email":"sijie@users.noreply.github.com","date":"2016-05-13T02:18:32Z"},"message":"Fixes #14: remove concurrency from ConfigurationSubscription tests (#16)","tree":{"sha":"934c5a922de5c320c4e1bb576ba3b505d6732b7c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/934c5a922de5c320c4e1bb576ba3b505d6732b7c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/089735246f6084e9f68085ab03999394c7158a72","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/089735246f6084e9f68085ab03999394c7158a72","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/089735246f6084e9f68085ab03999394c7158a72","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/089735246f6084e9f68085ab03999394c7158a72/comments","author":{"login":"mgodave","id":556310,"node_id":"MDQ6VXNlcjU1NjMxMA==","avatar_url":"https://avatars.githubusercontent.com/u/556310?v=4","gravatar_id":"","url":"https://api.github.com/users/mgodave","html_url":"https://github.com/mgodave","followers_url":"https://api.github.com/users/mgodave/followers","following_url":"https://api.github.com/users/mgodave/following{/other_user}","gists_url":"https://api.github.com/users/mgodave/gists{/gist_id}","starred_url":"https://api.github.com/users/mgodave/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mgodave/subscriptions","organizations_url":"https://api.github.com/users/mgodave/orgs","repos_url":"https://api.github.com/users/mgodave/repos","events_url":"https://api.github.com/users/mgodave/events{/privacy}","received_events_url":"https://api.github.com/users/mgodave/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5a71ed88116fcdffcccdb99eb79055912c46a85e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5a71ed88116fcdffcccdb99eb79055912c46a85e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5a71ed88116fcdffcccdb99eb79055912c46a85e"}],"stats":{"total":97,"additions":24,"deletions":73},"files":[{"sha":"c05ea549b683358678c4eedf2986e2588529e5b8","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/089735246f6084e9f68085ab03999394c7158a72/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/089735246f6084e9f68085ab03999394c7158a72/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=089735246f6084e9f68085ab03999394c7158a72","patch":"@@ -51,6 +51,12 @@\n       <version>4.8.1</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.jmock</groupId>\n+      <artifactId>jmock</artifactId>\n+      <version>2.8.2</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-log4j12</artifactId>"},{"sha":"a044a13ae40e678c5d0f98e84282e864a15e6530","filename":"src/main/java/com/twitter/distributedlog/config/ConcurrentConstConfiguration.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/089735246f6084e9f68085ab03999394c7158a72/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConcurrentConstConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/089735246f6084e9f68085ab03999394c7158a72/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConcurrentConstConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConcurrentConstConfiguration.java?ref=089735246f6084e9f68085ab03999394c7158a72","patch":"@@ -18,18 +18,12 @@\n package com.twitter.distributedlog.config;\n \n import com.google.common.base.Preconditions;\n-\n import org.apache.commons.configuration.Configuration;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Invariant thread-safe view of some configuration.\n  */\n public class ConcurrentConstConfiguration extends ConcurrentBaseConfiguration {\n-    static final Logger LOG = LoggerFactory.getLogger(ConcurrentConstConfiguration.class);\n-\n     public ConcurrentConstConfiguration(Configuration conf) {\n         Preconditions.checkNotNull(conf);\n         copy(conf);"},{"sha":"eda60d5d7748d4e4d5909ac1ec5aef5f9ad94ee0","filename":"src/test/java/com/twitter/distributedlog/config/ConfigTestUtil.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5a71ed88116fcdffcccdb99eb79055912c46a85e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConfigTestUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5a71ed88116fcdffcccdb99eb79055912c46a85e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConfigTestUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FConfigTestUtil.java?ref=5a71ed88116fcdffcccdb99eb79055912c46a85e","patch":"@@ -1,30 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.twitter.distributedlog.config;\n-\n-import com.google.common.base.Objects;\n-\n-import org.apache.commons.configuration.Configuration;\n-\n-class ConfigTestUtil {\n-    static void waitForConfig(Configuration conf, String name, String value) throws Exception {\n-        while (!Objects.equal(conf.getProperty(name), value)) {\n-            Thread.sleep(100);\n-        }\n-    }\n-}"},{"sha":"278bf29e627a0cc9e6c6442d2583c2b25f84e1b3","filename":"src/test/java/com/twitter/distributedlog/config/TestConfigurationSubscription.java","status":"modified","additions":18,"deletions":37,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/089735246f6084e9f68085ab03999394c7158a72/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/089735246f6084e9f68085ab03999394c7158a72/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java?ref=089735246f6084e9f68085ab03999394c7158a72","patch":"@@ -17,22 +17,21 @@\n  */\n package com.twitter.distributedlog.config;\n \n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ScheduledThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n import com.google.common.collect.Lists;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import org.apache.commons.configuration.event.ConfigurationEvent;\n import org.apache.commons.configuration.event.ConfigurationListener;\n+import org.jmock.lib.concurrent.DeterministicScheduler;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n import static org.junit.Assert.*;\n \n /**\n@@ -46,20 +45,17 @@ public class TestConfigurationSubscription {\n     @Test(timeout = 60000)\n     public void testReloadConfiguration() throws Exception {\n         PropertiesWriter writer = new PropertiesWriter();\n-        ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);\n         FileConfigurationBuilder builder = new PropertiesConfigurationBuilder(writer.getFile().toURI().toURL());\n         ConcurrentConstConfiguration conf = new ConcurrentConstConfiguration(new DistributedLogConfiguration());\n+        DeterministicScheduler executorService = new DeterministicScheduler();\n         List<FileConfigurationBuilder> fileConfigBuilders = Lists.newArrayList(builder);\n         ConfigurationSubscription confSub =\n                 new ConfigurationSubscription(conf, fileConfigBuilders, executorService, 100, TimeUnit.MILLISECONDS);\n-        final CountDownLatch reloadLatch = new CountDownLatch(1);\n-        final AtomicReference<ConcurrentBaseConfiguration> confHolder =\n-                new AtomicReference<ConcurrentBaseConfiguration>();\n+        final AtomicReference<ConcurrentBaseConfiguration> confHolder = new AtomicReference<>();\n         confSub.registerListener(new com.twitter.distributedlog.config.ConfigurationListener() {\n             @Override\n             public void onReload(ConcurrentBaseConfiguration conf) {\n                 confHolder.set(conf);\n-                reloadLatch.countDown();\n             }\n         });\n         assertEquals(null, conf.getProperty(\"prop1\"));\n@@ -70,7 +66,6 @@ public void onReload(ConcurrentBaseConfiguration conf) {\n \n         // reload the config\n         confSub.reload();\n-        reloadLatch.await();\n         assertNotNull(confHolder.get());\n         assertTrue(conf == confHolder.get());\n         assertEquals(\"1\", conf.getProperty(\"prop1\"));\n@@ -79,34 +74,20 @@ public void onReload(ConcurrentBaseConfiguration conf) {\n     @Test(timeout = 60000)\n     public void testAddReloadBasicsConfig() throws Exception {\n         PropertiesWriter writer = new PropertiesWriter();\n-        ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);\n+        DeterministicScheduler mockScheduler = new DeterministicScheduler();\n         FileConfigurationBuilder builder = new PropertiesConfigurationBuilder(writer.getFile().toURI().toURL());\n         ConcurrentConstConfiguration conf = new ConcurrentConstConfiguration(new DistributedLogConfiguration());\n         List<FileConfigurationBuilder> fileConfigBuilders = Lists.newArrayList(builder);\n         ConfigurationSubscription confSub =\n-                new ConfigurationSubscription(conf, fileConfigBuilders, executorService, 100, TimeUnit.MILLISECONDS);\n+                new ConfigurationSubscription(conf, fileConfigBuilders, mockScheduler, 100, TimeUnit.MILLISECONDS);\n         assertEquals(null, conf.getProperty(\"prop1\"));\n \n         // add\n         writer.setProperty(\"prop1\", \"1\");\n         writer.save();\n-        ConfigTestUtil.waitForConfig(conf, \"prop1\", \"1\");\n+        mockScheduler.tick(100, TimeUnit.MILLISECONDS);\n         assertEquals(\"1\", conf.getProperty(\"prop1\"));\n-        Thread.sleep(1000);\n-\n-        // update\n-        writer.setProperty(\"prop1\", \"2\");\n-        writer.save();\n-        ConfigTestUtil.waitForConfig(conf, \"prop1\", \"2\");\n-        assertEquals(\"2\", conf.getProperty(\"prop1\"));\n-        Thread.sleep(1000);\n \n-        // remove\n-        writer.removeProperty(\"prop1\");\n-        writer.save();\n-        ConfigTestUtil.waitForConfig(conf, \"prop1\", null);\n-        assertEquals(null, conf.getProperty(\"prop1\"));\n-        executorService.shutdown();\n     }\n \n     @Test(timeout = 60000)\n@@ -119,12 +100,12 @@ public void testInitialConfigLoad() throws Exception {\n         writer.setProperty(\"prop5\", \"true\");\n         writer.save();\n \n-        ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);\n+        ScheduledExecutorService mockScheduler = new DeterministicScheduler();\n         FileConfigurationBuilder builder = new PropertiesConfigurationBuilder(writer.getFile().toURI().toURL());\n         ConcurrentConstConfiguration conf = new ConcurrentConstConfiguration(new DistributedLogConfiguration());\n         List<FileConfigurationBuilder> fileConfigBuilders = Lists.newArrayList(builder);\n         ConfigurationSubscription confSub =\n-                new ConfigurationSubscription(conf, fileConfigBuilders, executorService, 100, TimeUnit.MILLISECONDS);\n+                new ConfigurationSubscription(conf, fileConfigBuilders, mockScheduler, 100, TimeUnit.MILLISECONDS);\n         assertEquals(1, conf.getInt(\"prop1\"));\n         assertEquals(\"abc\", conf.getString(\"prop2\"));\n         assertEquals(123.0, conf.getFloat(\"prop3\"), 0);\n@@ -138,12 +119,12 @@ public void testExceptionInConfigLoad() throws Exception {\n         writer.setProperty(\"prop1\", \"1\");\n         writer.save();\n \n-        ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);\n+        DeterministicScheduler mockScheduler = new DeterministicScheduler();\n         FileConfigurationBuilder builder = new PropertiesConfigurationBuilder(writer.getFile().toURI().toURL());\n         ConcurrentConstConfiguration conf = new ConcurrentConstConfiguration(new DistributedLogConfiguration());\n         List<FileConfigurationBuilder> fileConfigBuilders = Lists.newArrayList(builder);\n         ConfigurationSubscription confSub =\n-                new ConfigurationSubscription(conf, fileConfigBuilders, executorService, 100, TimeUnit.MILLISECONDS);\n+                new ConfigurationSubscription(conf, fileConfigBuilders, mockScheduler, 100, TimeUnit.MILLISECONDS);\n \n         final AtomicInteger count = new AtomicInteger(1);\n         conf.addConfigurationListener(new ConfigurationListener() {\n@@ -163,14 +144,14 @@ public void configurationChanged(ConfigurationEvent event) {\n         while (count.get() == initial) {\n             writer.setProperty(\"prop1\", Integer.toString(i++));\n             writer.save();\n-            Thread.sleep(100);\n+            mockScheduler.tick(100, TimeUnit.MILLISECONDS);\n         }\n \n         initial = count.get();\n         while (count.get() == initial) {\n             writer.setProperty(\"prop1\", Integer.toString(i++));\n             writer.save();\n-            Thread.sleep(100);\n+            mockScheduler.tick(100, TimeUnit.MILLISECONDS);\n         }\n     }\n }"}]}