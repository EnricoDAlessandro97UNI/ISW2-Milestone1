{"sha":"a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmExM2Q3NWQ3ZWFlMjlmMWNlNDJkYmZlNWM2YjQ4NzhhODIyZmRmOTE=","commit":{"author":{"name":"Siddharth Boobna","email":"sboobna@yahoo-inc.com","date":"2016-03-16T04:03:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-03-16T04:03:33Z"},"message":"BOOKKEEPER-894: add command to read ledger entries form shell\n\nAuthor: Siddharth Boobna <sboobna@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #24 from sboobna/BOOKKEEPER-894","tree":{"sha":"16a84cb6e03c76166251b9a5027c8cd92c925d16","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/16a84cb6e03c76166251b9a5027c8cd92c925d16"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1a98088e38ca0a43c26d9a4847619b0a27bb90e8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1a98088e38ca0a43c26d9a4847619b0a27bb90e8","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1a98088e38ca0a43c26d9a4847619b0a27bb90e8"}],"stats":{"total":251,"additions":227,"deletions":24},"files":[{"sha":"7d49a6a12a5e2752bf97cdf1e887ab8a7942698e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":102,"deletions":21,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","patch":"@@ -18,70 +18,69 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n-import java.util.Formatter;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.List;\n import java.util.ArrayList;\n-import java.util.Iterator;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Enumeration;\n-import java.util.Collection;\n+import java.util.Formatter;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeperAdmin;\n-import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.UpdateLedgerOp;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.Tool;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n-\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-\n-import com.google.common.util.concurrent.AbstractFuture;\n-import static com.google.common.base.Charsets.UTF_8;\n-\n-import org.apache.commons.configuration.Configuration;\n-import org.apache.commons.configuration.CompositeConfiguration;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.MissingArgumentException;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.HexDump;\n+import org.apache.commons.io.output.ByteArrayOutputStream;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.AbstractFuture;\n+\n /**\n  * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster.\n  */\n@@ -95,6 +94,7 @@ public class BookieShell implements Tool {\n     static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n     static final String CMD_RECOVER = \"recover\";\n     static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_READ_LEDGER_ENTRIES = \"readledger\";\n     static final String CMD_LISTLEDGERS = \"listledgers\";\n     static final String CMD_LEDGERMETADATA = \"ledgermetadata\";\n     static final String CMD_LISTUNDERREPLICATED = \"listunderreplicated\";\n@@ -396,6 +396,86 @@ Options getOptions() {\n         }\n     }\n \n+    /**\n+     * Command for reading ledger entries\n+     */\n+    class ReadLedgerEntriesCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        ReadLedgerEntriesCmd() {\n+            super(CMD_READ_LEDGER_ENTRIES);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Read a range of entries from a ledger\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"readledger <ledger_id> [<start_entry_id> [<end_entry_id>]]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing ledger id\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            long ledgerId;\n+            long firstEntry = 0;\n+            long lastEntry = -1;\n+            try {\n+                ledgerId = Long.parseLong(leftArgs[0]);\n+                if (leftArgs.length >= 2) {\n+                    firstEntry = Long.parseLong(leftArgs[1]);\n+                }\n+                if (leftArgs.length >= 3) {\n+                    lastEntry = Long.parseLong(leftArgs[2]);\n+                }\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid number \" + nfe.getMessage());\n+                printUsage();\n+                return -1;\n+            }\n+\n+            ClientConfiguration conf = new ClientConfiguration();\n+            conf.addConfiguration(bkConf);\n+\n+            BookKeeperAdmin bk = null;\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            try {\n+                bk = new BookKeeperAdmin(conf);\n+                Iterator<LedgerEntry> entries = bk.readEntries(ledgerId, firstEntry, lastEntry).iterator();\n+                while (entries.hasNext()) {\n+                    LedgerEntry entry = entries.next();\n+                    HexDump.dump(entry.getEntry(), 0, out, 0);\n+                    System.out.println(\"Entry Id: \" + entry.getEntryId() + \", Data: \" + new String(out.toByteArray()));\n+                    out.reset();\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Error reading entries from ledger {}\", ledgerId, e.getCause());\n+                return -1;\n+            } finally {\n+                out.close();\n+                if (bk != null) {\n+                    bk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+    }\n+\n     /**\n      * Command for listing underreplicated ledgers\n      */\n@@ -1425,6 +1505,7 @@ public interface UpdateLedgerNotifier {\n         commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n         commands.put(CMD_RECOVER, new RecoverCmd());\n         commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_READ_LEDGER_ENTRIES, new ReadLedgerEntriesCmd());\n         commands.put(CMD_LISTLEDGERS, new ListLedgersCmd());\n         commands.put(CMD_LISTUNDERREPLICATED, new ListUnderreplicatedCmd());\n         commands.put(CMD_WHOISAUDITOR, new WhoIsAuditorCmd());"},{"sha":"0bc5c45e62df822b409dd2a7c1848d3859d87ba5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","patch":"@@ -21,6 +21,7 @@\n package org.apache.bookkeeper.client;\n \n import static com.google.common.base.Charsets.UTF_8;\n+import static com.google.common.base.Preconditions.checkArgument;\n \n import java.io.IOException;\n import java.net.UnknownHostException;\n@@ -310,6 +311,123 @@ public LedgerHandle openLedgerNoRecovery(final long lId)\n         return counter.getLh();\n     }\n \n+    /**\n+     * Read entries from a ledger synchronously. If the lastEntry is -1, it will read all the entries in the ledger from\n+     * the firstEntry.\n+     * \n+     * @param ledgerId\n+     * @param firstEntry\n+     * @param lastEntry\n+     * @return\n+     * @throws InterruptedException\n+     * @throws BKException\n+     */\n+    public Iterable<LedgerEntry> readEntries(long ledgerId, long firstEntry, long lastEntry)\n+            throws InterruptedException, BKException {\n+        checkArgument(ledgerId >= 0 && firstEntry >= 0);\n+        return new LedgerEntriesIterable(ledgerId, firstEntry, lastEntry);\n+    }\n+\n+    class LedgerEntriesIterable implements Iterable<LedgerEntry> {\n+        final long ledgerId;\n+        final long firstEntryId;\n+        final long lastEntryId;\n+\n+        public LedgerEntriesIterable(long ledgerId, long firstEntry) {\n+            this(ledgerId, firstEntry, -1);\n+        }\n+\n+        public LedgerEntriesIterable(long ledgerId, long firstEntry, long lastEntry) {\n+            this.ledgerId = ledgerId;\n+            this.firstEntryId = firstEntry;\n+            this.lastEntryId = lastEntry;\n+        }\n+\n+        @Override\n+        public Iterator<LedgerEntry> iterator() {\n+            try {\n+                return new LedgerEntriesIterator(ledgerId, firstEntryId, lastEntryId);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    class LedgerEntriesIterator implements Iterator<LedgerEntry> {\n+        final LedgerHandle handle;\n+        final long ledgerId;\n+        final long lastEntryId;\n+\n+        long nextEntryId;\n+        LedgerEntry currentEntry;\n+\n+        public LedgerEntriesIterator(long ledgerId, long firstEntry, long lastEntry)\n+                throws InterruptedException, BKException {\n+            this.handle = openLedgerNoRecovery(ledgerId);\n+            this.ledgerId = ledgerId;\n+            this.nextEntryId = firstEntry;\n+            this.lastEntryId = lastEntry;\n+            this.currentEntry = null;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (currentEntry != null) {\n+                return true;\n+            }\n+            if (lastEntryId == -1 || nextEntryId <= lastEntryId) {\n+                try {\n+                    SyncCounter counter = new SyncCounter();\n+                    counter.inc();\n+\n+                    handle.asyncReadEntriesInternal(nextEntryId, nextEntryId, new LedgerHandle.SyncReadCallback(),\n+                            counter);\n+                    counter.block(0);\n+                    if (counter.getrc() != BKException.Code.OK) {\n+                        throw BKException.create(counter.getrc());\n+                    }\n+                    currentEntry = counter.getSequence().nextElement();\n+                    return true;\n+                } catch (Exception e) {\n+                    if (e instanceof BKException.BKNoSuchEntryException && lastEntryId == -1) {\n+                        // there are no more entries in the ledger, so we just return false and ignore this exception\n+                        // since the last entry id was undefined\n+                        close();\n+                        return false;\n+                    }\n+                    LOG.error(\"Error reading entry {} from ledger {}\", new Object[] { nextEntryId, ledgerId }, e);\n+                    close();\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            close();\n+            return false;\n+        }\n+\n+        @Override\n+        public LedgerEntry next() {\n+            ++nextEntryId;\n+            LedgerEntry entry = currentEntry;\n+            currentEntry = null;\n+            return entry;\n+        }\n+\n+        @Override\n+        public void remove() {\n+            // noop\n+        }\n+\n+        private void close() {\n+            if (handle != null) {\n+                try {\n+                    handle.close();\n+                } catch (Exception e) {\n+                    LOG.error(\"Error closing ledger handle {}\", handle, e);\n+                }\n+            }\n+        }\n+    }\n+\n     // Object used for calling async methods and waiting for them to complete.\n     static class SyncObject {\n         boolean value;"},{"sha":"9af2db78eb4c67e598d82a0cd4c576a80fff9f29","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=a13d75d7eae29f1ce42dbfe5c6b4878a822fdf91","patch":"@@ -458,6 +458,10 @@ public void asyncReadEntries(long firstEntry, long lastEntry,\n             return;\n         }\n \n+        asyncReadEntriesInternal(firstEntry, lastEntry, cb, ctx);\n+    }\n+\n+    void asyncReadEntriesInternal(long firstEntry, long lastEntry, ReadCallback cb, Object ctx) {\n         try {\n             new PendingReadOp(this, bk.scheduler,\n                               firstEntry, lastEntry, cb, ctx).initiate();\n@@ -1294,7 +1298,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n         }\n     }\n \n-    private static class SyncReadCallback implements ReadCallback {\n+    static class SyncReadCallback implements ReadCallback {\n         /**\n          * Implementation of callback interface for synchronous read method.\n          *\n@@ -1346,7 +1350,7 @@ public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n         }\n     }\n \n-    private static class SyncReadLastConfirmedCallback implements ReadLastConfirmedCallback {\n+    static class SyncReadLastConfirmedCallback implements ReadLastConfirmedCallback {\n         /**\n          * Implementation of  callback interface for synchronous read last confirmed method.\n          */\n@@ -1362,7 +1366,7 @@ public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n         }\n     }\n \n-    private static class SyncCloseCallback implements CloseCallback {\n+    static class SyncCloseCallback implements CloseCallback {\n         /**\n          * Close callback method\n          *"}]}