{"sha":"7e9350cff67f0cb72ab757d500d98044cbdd4264","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjdlOTM1MGNmZjY3ZjBjYjcyYWI3NTdkNTAwZDk4MDQ0Y2JkZDQyNjQ=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-19T06:43:14Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-19T06:43:14Z"},"message":"ISSUE #256: BookieInitializationTest.testWithDiskFullAndAbilityToCreateNewIndexFile failed\n\nDescriptions of the changes in this PR:\n\nin c49621b, we allow creating FileInfo even when disk is full to allow fence requests succeed at this case.\n\nit is conflicted with Charan's change. Since there is already a setting to configure the min usable size to allow index file creation. if we configure that to be zero, it is same as allowing index file creation even disks are full. so removing the fallback logic introduced in c49621b.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Charan Reddy Guttapalem, Enrico Olivelli\n\nThis closes #257 from sijie/issue_256, closes #256","tree":{"sha":"35b5b0e6c57b751aa14d6226c8f57effcde4509c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/35b5b0e6c57b751aa14d6226c8f57effcde4509c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/7e9350cff67f0cb72ab757d500d98044cbdd4264","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7e9350cff67f0cb72ab757d500d98044cbdd4264","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7e9350cff67f0cb72ab757d500d98044cbdd4264","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7e9350cff67f0cb72ab757d500d98044cbdd4264/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7277657740c276b6f036322177c147264ba5100b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7277657740c276b6f036322177c147264ba5100b","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7277657740c276b6f036322177c147264ba5100b"}],"stats":{"total":35,"additions":2,"deletions":33},"files":[{"sha":"859e8d7a7f4aef4b8c4925681a438068bc22170d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":2,"deletions":33,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e9350cff67f0cb72ab757d500d98044cbdd4264/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e9350cff67f0cb72ab757d500d98044cbdd4264/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=7e9350cff67f0cb72ab757d500d98044cbdd4264","patch":"@@ -128,7 +128,7 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                         throw new Bookie.NoLedgerException(ledger);\n                     }\n                     // We don't have a ledger index file on disk, so create it.\n-                    lf = getNewLedgerIndexFile(ledger, null, true);\n+                    lf = getNewLedgerIndexFile(ledger, null);\n                     createdNewFile = true;\n                 }\n             }\n@@ -179,38 +179,7 @@ private FileInfo putFileInfo(Long ledger, byte masterKey[], File lf, boolean cre\n      */\n     private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n                     throws NoWritableLedgerDirException {\n-        return getNewLedgerIndexFile(ledger, excludedDir, false);\n-    }\n-\n-    /**\n-     * Get a new index file for a ledger in a lazy way.\n-     *\n-     + <p>If fallback is false, this function will throw exception when there are no writable dirs.\n-     + If fallback is true and there's no writable dirs, it will ignore the error and pick any dir.\n-     + Set fallback to true is useful when we want to delay disk check and just get the File pointer, e.g. fence ledger\n-     *\n-     * @param ledger\n-     *          Ledger id.\n-     * @param excludedDir\n-     *          The ledger directory to exclude.\n-     * @param fallback\n-     *          If fallback is false, the function will throw exception when there are no writable dirs;\n-     *          If it is true and there's no writable dirs, it will ignore the error and pick any dir.\n-     * @return new index file object.\n-     * @throws NoWritableLedgerDirException if there is no writable dir available.\n-     */\n-    private File getNewLedgerIndexFile(Long ledger, File excludedDir, boolean fallback)\n-                    throws NoWritableLedgerDirException {\n-        File dir = null;\n-        try {\n-            dir = ledgerDirsManager.pickRandomWritableDirForNewIndexFile(excludedDir);\n-        } catch (NoWritableLedgerDirException e) {\n-            if (fallback) {\n-                dir = ledgerDirsManager.pickRandomDir(excludedDir);\n-            } else {\n-                throw e;\n-            }\n-        }\n+        File dir = ledgerDirsManager.pickRandomWritableDirForNewIndexFile(excludedDir);\n         String ledgerName = getLedgerName(ledger);\n         return new File(dir, ledgerName);\n     }"}]}