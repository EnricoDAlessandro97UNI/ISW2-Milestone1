{"sha":"7e7fcf6618417a0846baae4b6ee84778571a3556","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjdlN2ZjZjY2MTg0MTdhMDg0NmJhYWU0YjZlZTg0Nzc4NTcxYTM1NTY=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-05-09T19:06:08Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-05-09T19:06:08Z"},"message":"Initial Check-in for distributedlog oss","tree":{"sha":"f28af668cffdb31c14b0442372870b7a62e5210b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f28af668cffdb31c14b0442372870b7a62e5210b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/7e7fcf6618417a0846baae4b6ee84778571a3556","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7e7fcf6618417a0846baae4b6ee84778571a3556","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7e7fcf6618417a0846baae4b6ee84778571a3556","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7e7fcf6618417a0846baae4b6ee84778571a3556/comments","author":null,"committer":null,"parents":[],"stats":{"total":3919,"additions":3919,"deletions":0},"files":[{"sha":"a21b0e659997431717c1b73418d965acbaed8822","filename":"pom.xml","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.twitter</groupId>\n+    <artifactId>distributedlog</artifactId>\n+    <version>0.3.51-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>distributedlog-protocol</artifactId>\n+  <name>DistributedLog Protocol</name>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${bookkeeper.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.thrift</groupId>\n+      <artifactId>libthrift</artifactId>\n+      <version>0.5.0-1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter</groupId>\n+      <artifactId>scrooge-core_2.11</artifactId>\n+      <version>${scrooge.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter</groupId>\n+      <artifactId>finagle-core_2.11</artifactId>\n+      <version>${birdcage.sha}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter</groupId>\n+      <artifactId>finagle-thrift_2.11</artifactId>\n+      <version>${birdcage.sha}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-lang</groupId>\n+      <artifactId>commons-lang</artifactId>\n+      <version>2.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-codec</groupId>\n+      <artifactId>commons-codec</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>net.jpountz.lz4</groupId>\n+      <artifactId>lz4</artifactId>\n+      <version>1.2.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.8.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>com.twitter</groupId>\n+        <artifactId>scrooge-maven-plugin</artifactId>\n+        <version>${scrooge-maven-plugin.version}</version>\n+        <configuration>\n+          <language>java</language>\n+          <thriftOpts>\n+            <thriftOpt>--finagle</thriftOpt>\n+          </thriftOpts>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>thrift-sources</id>\n+            <phase>generate-sources</phase>\n+            <goals>\n+              <goal>compile</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <configuration>\n+          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"9e3b76c1a12435b1689cbca7f5633641644d1047","filename":"src/main/java/com/twitter/distributedlog/DLSN.java","status":"added","additions":261,"deletions":0,"changes":261,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,261 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * DistributedLog Sequence Number (DLSN) is the system generated sequence number for log record.\n+ *\n+ * <p>DLSN is comprised with 3 components:\n+ * <ul>\n+ * <li>LogSegment Sequence Number: the sequence number of log segment that the record is written in\n+ * <li>Entry Id: the entry id of the entry that the record is batched in\n+ * <li>Slot Id: the slot id that the record is in the entry\n+ * </ul>\n+ *\n+ * @see LogRecordWithDLSN\n+ */\n+public class DLSN implements Comparable<DLSN> {\n+\n+    public static final byte VERSION0 = (byte) 0;\n+    public static final byte VERSION1 = (byte) 1;\n+\n+    // The initial DLSN that DL starts with\n+    public static final DLSN InitialDLSN = new DLSN(1, 0 , 0);\n+    // The non-inclusive lower bound DLSN\n+    public static final DLSN NonInclusiveLowerBound = new DLSN(1, 0 , -1);\n+    // Invalid DLSN\n+    public static final DLSN InvalidDLSN = new DLSN(0,-1,-1);\n+\n+    static final byte CUR_VERSION = VERSION1;\n+    static final int VERSION0_LEN = Long.SIZE * 3 + Byte.SIZE;\n+    static final int VERSION1_LEN = Long.SIZE * 3 / Byte.SIZE + 1;\n+\n+    private final long logSegmentSequenceNo;\n+    private final long entryId;\n+    private final long slotId;\n+\n+    public DLSN(long logSegmentSequenceNo, long entryId, long slotId) {\n+        this.logSegmentSequenceNo = logSegmentSequenceNo;\n+        this.entryId = entryId;\n+        this.slotId = slotId;\n+    }\n+\n+    /**\n+     * Return the sequence number of the log segment that the record is written to.\n+     *\n+     * @return sequence number of the log segment that the record is written to.\n+     */\n+    public long getLogSegmentSequenceNo() {\n+        return logSegmentSequenceNo;\n+    }\n+\n+    /**\n+     * use {@link #getLogSegmentSequenceNo()} instead\n+     */\n+    @Deprecated\n+    long getLedgerSequenceNo() {\n+        return logSegmentSequenceNo;\n+    }\n+\n+    /**\n+     * Return the entry id of the batch that the record is written to.\n+     *\n+     * @return entry id of the batch that the record is written to.\n+     */\n+    public long getEntryId() {\n+        return entryId;\n+    }\n+\n+    /**\n+     * Return the slot id in the batch that the record is written to.\n+     *\n+     * @return slot id in the batch that the record is written to.\n+     */\n+    public long getSlotId() {\n+        return slotId;\n+    }\n+\n+    @Override\n+    public int compareTo(DLSN that) {\n+        if (this.logSegmentSequenceNo != that.logSegmentSequenceNo) {\n+            return (this.logSegmentSequenceNo < that.logSegmentSequenceNo)? -1 : 1;\n+        } else if (this.entryId != that.entryId) {\n+            return (this.entryId < that.entryId)? -1 : 1;\n+        } else {\n+            return (this.slotId < that.slotId)? -1 : (this.slotId == that.slotId)? 0 : 1;\n+        }\n+    }\n+\n+    /**\n+     * Serialize the DLSN into bytes with current version.\n+     *\n+     * @return the serialized bytes\n+     */\n+    public byte[] serializeBytes() {\n+        return serializeBytes(CUR_VERSION);\n+    }\n+\n+    /**\n+     * Serialize the DLSN into bytes with given <code>version</code>.\n+     *\n+     * @param version\n+     *          version to serialize the DLSN\n+     * @return the serialized bytes\n+     */\n+    public byte[] serializeBytes(byte version) {\n+        Preconditions.checkArgument(version <= CUR_VERSION && version >= VERSION0);\n+        byte[] data = new byte[CUR_VERSION == version ? VERSION1_LEN : VERSION0_LEN];\n+        ByteBuffer bb = ByteBuffer.wrap(data);\n+        bb.put(version);\n+        bb.putLong(logSegmentSequenceNo);\n+        bb.putLong(entryId);\n+        bb.putLong(slotId);\n+        return data;\n+    }\n+\n+    /**\n+     * Serialize the DLSN into base64 encoded string.\n+     *\n+     * @return serialized base64 string\n+     * @see #serializeBytes()\n+     */\n+    public String serialize() {\n+        return serialize(CUR_VERSION);\n+    }\n+\n+    /**\n+     * Serialize the DLSN into base64 encoded string with given <code>version</code>.\n+     *\n+     * @param version\n+     *          version to serialize the DLSN\n+     * @return the serialized base64 string\n+     * @see #serializeBytes(byte)\n+     */\n+    public String serialize(byte version) {\n+        return Base64.encodeBase64String(serializeBytes(version));\n+    }\n+\n+    /**\n+     * Deserialize the DLSN from base64 encoded string <code>dlsn</code>.\n+     *\n+     * @param dlsn\n+     *          base64 encoded string\n+     * @return dlsn\n+     */\n+    public static DLSN deserialize(String dlsn) {\n+        byte[] data = Base64.decodeBase64(dlsn);\n+        return deserializeBytes(data);\n+    }\n+\n+    /**\n+     * Deserialize the DLSN from bytes array.\n+     *\n+     * @param data\n+     *          serialized bytes\n+     * @return dlsn\n+     */\n+    public static DLSN deserializeBytes(byte[] data) {\n+        ByteBuffer bb = ByteBuffer.wrap(data);\n+        byte version = bb.get();\n+        if (VERSION0 == version) {\n+            if (VERSION0_LEN != data.length) {\n+                throw new IllegalArgumentException(\"Invalid version zero DLSN \" + Hex.encodeHexString(data));\n+            }\n+        } else if (VERSION1 == version) {\n+            if (VERSION1_LEN != data.length) {\n+                throw new IllegalArgumentException(\"Invalid version one DLSN \" + Hex.encodeHexString(data));\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid DLSN : version = \"\n+                    + version + \", \" + Hex.encodeHexString(data));\n+        }\n+        return new DLSN(bb.getLong(), bb.getLong(), bb.getLong());\n+    }\n+\n+    // Keep original version0 logic for testing.\n+    @VisibleForTesting\n+    static DLSN deserialize0(String dlsn) {\n+        byte[] data = Base64.decodeBase64(dlsn);\n+        ByteBuffer bb = ByteBuffer.wrap(data);\n+        byte version = bb.get();\n+        if (VERSION0 != version || VERSION0_LEN != data.length) {\n+            throw new IllegalArgumentException(\"Invalid DLSN \" + dlsn);\n+        }\n+        return new DLSN(bb.getLong(), bb.getLong(), bb.getLong());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"DLSN{\" +\n+            \"logSegmentSequenceNo=\" + logSegmentSequenceNo +\n+            \", entryId=\" + entryId +\n+            \", slotId=\" + slotId +\n+            '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof DLSN)) return false;\n+\n+        DLSN dlsn = (DLSN) o;\n+\n+        if (entryId != dlsn.entryId) return false;\n+        if (logSegmentSequenceNo != dlsn.logSegmentSequenceNo) return false;\n+        if (slotId != dlsn.slotId) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = (int) (logSegmentSequenceNo ^ (logSegmentSequenceNo >>> 32));\n+        result = 31 * result + (int) (entryId ^ (entryId >>> 32));\n+        result = 31 * result + (int) (slotId ^ (slotId >>> 32));\n+        return result;\n+    }\n+\n+    /**\n+     * Positions to a DLSN greater than the current value - this may not\n+     * correspond to an actual LogRecord, its just used by the positioning logic\n+     * to position the reader\n+     *\n+     * @return the next DLSN\n+     */\n+    public DLSN getNextDLSN() {\n+        return new DLSN(logSegmentSequenceNo, entryId, slotId + 1);\n+    }\n+\n+    /**\n+     * Positions to a DLSN greater than the current value - this may not\n+     * correspond to an actual LogRecord, its just used by the positioning logic\n+     * to position the reader\n+     *\n+     * @return the next DLSN\n+     */\n+    public DLSN positionOnTheNextLedger() {\n+        return new DLSN(logSegmentSequenceNo + 1 , 0, 0);\n+    }\n+}"},{"sha":"d3f7a99e49ccab3d16f41c260a1685bed7a8edb3","filename":"src/main/java/com/twitter/distributedlog/EnvelopedRecordSetReader.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,114 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.twitter.distributedlog.io.CompressionCodec;\n+import com.twitter.distributedlog.io.CompressionUtils;\n+\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+import static com.twitter.distributedlog.LogRecordSet.*;\n+\n+/**\n+ * Record reader to read records from an enveloped entry buffer.\n+ */\n+class EnvelopedRecordSetReader implements LogRecordSet.Reader {\n+\n+    private final long logSegmentSeqNo;\n+    private final long entryId;\n+    private final long transactionId;\n+    private final long startSequenceId;\n+    private int numRecords;\n+    private final ByteBuffer reader;\n+\n+    // slot id\n+    private long slotId;\n+    private int position;\n+\n+    EnvelopedRecordSetReader(long logSegmentSeqNo,\n+                             long entryId,\n+                             long transactionId,\n+                             long startSlotId,\n+                             int startPositionWithinLogSegment,\n+                             long startSequenceId,\n+                             InputStream in)\n+            throws IOException {\n+        this.logSegmentSeqNo = logSegmentSeqNo;\n+        this.entryId = entryId;\n+        this.transactionId = transactionId;\n+        this.slotId = startSlotId;\n+        this.position = startPositionWithinLogSegment;\n+        this.startSequenceId = startSequenceId;\n+\n+        // read data\n+        DataInputStream src = new DataInputStream(in);\n+        int metadata = src.readInt();\n+        int version = metadata & METADATA_VERSION_MASK;\n+        if (version != VERSION) {\n+            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\" +\n+                    \" Required: %d\", version, VERSION));\n+        }\n+        int codecCode = metadata & METADATA_COMPRESSION_MASK;\n+        this.numRecords = src.readInt();\n+        int originDataLen = src.readInt();\n+        int actualDataLen = src.readInt();\n+        byte[] compressedData = new byte[actualDataLen];\n+        src.readFully(compressedData);\n+\n+        if (COMPRESSION_CODEC_LZ4 == codecCode) {\n+            CompressionCodec codec = CompressionUtils.getCompressionCodec(CompressionCodec.Type.LZ4);\n+            byte[] decompressedData = codec.decompress(compressedData, 0, actualDataLen,\n+                    originDataLen, NullOpStatsLogger);\n+            this.reader = ByteBuffer.wrap(decompressedData);\n+        } else {\n+            if (originDataLen != actualDataLen) {\n+                throw new IOException(\"Inconsistent data length found for a non-compressed record set : original = \"\n+                        + originDataLen + \", actual = \" + actualDataLen);\n+            }\n+            this.reader = ByteBuffer.wrap(compressedData);\n+        }\n+    }\n+\n+    @Override\n+    public LogRecordWithDLSN nextRecord() throws IOException {\n+        if (numRecords <= 0) {\n+            return null;\n+        }\n+\n+        int recordLen = reader.getInt();\n+        byte[] recordData = new byte[recordLen];\n+        reader.get(recordData);\n+        DLSN dlsn = new DLSN(logSegmentSeqNo, entryId, slotId);\n+\n+        LogRecordWithDLSN record =\n+                new LogRecordWithDLSN(dlsn, startSequenceId);\n+        record.setPositionWithinLogSegment(position);\n+        record.setTransactionId(transactionId);\n+        record.setPayload(recordData);\n+\n+        ++slotId;\n+        ++position;\n+        --numRecords;\n+\n+        return record;\n+    }\n+\n+}"},{"sha":"32b3cf4fabec3459ae44ee542b999059726a9750","filename":"src/main/java/com/twitter/distributedlog/EnvelopedRecordSetWriter.java","status":"added","additions":192,"deletions":0,"changes":192,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,192 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.twitter.distributedlog.io.Buffer;\n+import com.twitter.distributedlog.io.CompressionCodec;\n+import com.twitter.distributedlog.io.CompressionUtils;\n+import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n+import com.twitter.distributedlog.exceptions.WriteException;\n+import com.twitter.util.Promise;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static com.twitter.distributedlog.LogRecord.MAX_LOGRECORD_SIZE;\n+import static com.twitter.distributedlog.LogRecordSet.*;\n+\n+/**\n+ * {@link Buffer} based log record set writer.\n+ */\n+class EnvelopedRecordSetWriter implements LogRecordSet.Writer {\n+\n+    static final Logger logger = LoggerFactory.getLogger(EnvelopedRecordSetWriter.class);\n+\n+    private final Buffer buffer;\n+    private final DataOutputStream writer;\n+    private final WritableByteChannel writeChannel;\n+    private final List<Promise<DLSN>> promiseList;\n+    private final CompressionCodec.Type codec;\n+    private final int codecCode;\n+    private int count = 0;\n+    private ByteBuffer recordSetBuffer = null;\n+\n+    EnvelopedRecordSetWriter(int initialBufferSize,\n+                             CompressionCodec.Type codec) {\n+        this.buffer = new Buffer(Math.max(initialBufferSize, HEADER_LEN));\n+        this.promiseList = new LinkedList<Promise<DLSN>>();\n+        this.codec = codec;\n+        switch (codec) {\n+            case LZ4:\n+                this.codecCode = COMPRESSION_CODEC_LZ4;\n+                break;\n+            default:\n+                this.codecCode = COMPRESSION_CODEC_NONE;\n+                break;\n+        }\n+        this.writer = new DataOutputStream(buffer);\n+        try {\n+            this.writer.writeInt((VERSION & METADATA_VERSION_MASK)\n+                    | (codecCode & METADATA_COMPRESSION_MASK));\n+            this.writer.writeInt(0); // count\n+            this.writer.writeInt(0); // original len\n+            this.writer.writeInt(0); // actual len\n+        } catch (IOException e) {\n+            logger.warn(\"Failed to serialize the header to an enveloped record set\", e);\n+        }\n+        this.writeChannel = Channels.newChannel(writer);\n+    }\n+\n+    synchronized List<Promise<DLSN>> getPromiseList() {\n+        return promiseList;\n+    }\n+\n+    @Override\n+    public synchronized void writeRecord(ByteBuffer record,\n+                                         Promise<DLSN> transmitPromise)\n+            throws LogRecordTooLongException, WriteException {\n+        int logRecordSize = record.remaining();\n+        if (logRecordSize > MAX_LOGRECORD_SIZE) {\n+            throw new LogRecordTooLongException(\n+                    \"Log Record of size \" + logRecordSize + \" written when only \"\n+                            + MAX_LOGRECORD_SIZE + \" is allowed\");\n+        }\n+        try {\n+            writer.writeInt(record.remaining());\n+            writeChannel.write(record);\n+            ++count;\n+            promiseList.add(transmitPromise);\n+        } catch (IOException e) {\n+            logger.error(\"Failed to append record to record set\", e);\n+            throw new WriteException(\"\", \"Failed to append record to record set\");\n+        }\n+    }\n+\n+    private synchronized void satisfyPromises(long lssn, long entryId, long startSlotId) {\n+        long nextSlotId = startSlotId;\n+        for (Promise<DLSN> promise : promiseList) {\n+            promise.setValue(new DLSN(lssn, entryId, nextSlotId));\n+            nextSlotId++;\n+        }\n+        promiseList.clear();\n+    }\n+\n+    private synchronized void cancelPromises(Throwable reason) {\n+        for (Promise<DLSN> promise : promiseList) {\n+            promise.setException(reason);\n+        }\n+        promiseList.clear();\n+    }\n+\n+    @Override\n+    public int getNumBytes() {\n+        return buffer.size();\n+    }\n+\n+    @Override\n+    public synchronized int getNumRecords() {\n+        return count;\n+    }\n+\n+    @Override\n+    public synchronized ByteBuffer getBuffer() {\n+        if (null == recordSetBuffer) {\n+            recordSetBuffer = createBuffer();\n+        }\n+        return recordSetBuffer.duplicate();\n+    }\n+\n+    ByteBuffer createBuffer() {\n+        byte[] data = buffer.getData();\n+        int dataOffset = HEADER_LEN;\n+        int dataLen = buffer.size() - HEADER_LEN;\n+\n+        if (COMPRESSION_CODEC_LZ4 != codecCode) {\n+            ByteBuffer recordSetBuffer = ByteBuffer.wrap(data, 0, buffer.size());\n+            // update count\n+            recordSetBuffer.putInt(4, count);\n+            // update data len\n+            recordSetBuffer.putInt(8, dataLen);\n+            recordSetBuffer.putInt(12, dataLen);\n+            return recordSetBuffer;\n+        }\n+\n+        // compression\n+\n+        CompressionCodec compressor =\n+                    CompressionUtils.getCompressionCodec(codec);\n+        byte[] compressed =\n+                compressor.compress(data, dataOffset, dataLen, NullOpStatsLogger);\n+\n+        ByteBuffer recordSetBuffer;\n+        if (compressed.length > dataLen) {\n+            byte[] newData = new byte[HEADER_LEN + compressed.length];\n+            System.arraycopy(data, 0, newData, 0, HEADER_LEN + dataLen);\n+            recordSetBuffer = ByteBuffer.wrap(newData);\n+        } else {\n+            recordSetBuffer = ByteBuffer.wrap(data);\n+        }\n+        // version\n+        recordSetBuffer.position(4);\n+        // update count\n+        recordSetBuffer.putInt(count);\n+        // update data len\n+        recordSetBuffer.putInt(dataLen);\n+        recordSetBuffer.putInt(compressed.length);\n+        recordSetBuffer.put(compressed);\n+        recordSetBuffer.flip();\n+        return recordSetBuffer;\n+    }\n+\n+    @Override\n+    public void completeTransmit(long lssn, long entryId, long startSlotId) {\n+        satisfyPromises(lssn, entryId, startSlotId);\n+    }\n+\n+    @Override\n+    public void abortTransmit(Throwable reason) {\n+        cancelPromises(reason);\n+    }\n+}"},{"sha":"c104212f1b740588a2c3a65c566b6cf40b84c5c9","filename":"src/main/java/com/twitter/distributedlog/LogRecord.java","status":"added","additions":595,"deletions":0,"changes":595,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,595 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Log record is the basic element in a log.\n+ *\n+ * <p>A log is a sequence of log records. Each log record is a sequence of bytes.\n+ * Log records are written sequentially into a stream, and will be assigned with\n+ * an unique system generated sequence number {@link DLSN} (distributedlog sequence\n+ * number). Besides {@link DLSN}, application can assign its own sequence number\n+ * while constructing log records. The application defined sequence number is called\n+ * <code>TransactionID</code> (<i>txid</i>). Either {@link DLSN} or <code>TransactionId</code>\n+ * could be used to position readers to start from specific log records.\n+ *\n+ * <h3>User Record</h3>\n+ *\n+ * User records are the records written by applications and read by applications. They\n+ * are constructed via {@link #LogRecord(long, byte[])} by applications and appended to\n+ * logs by writers. And they would be deserialized from bytes by the readers and return\n+ * to applications.\n+ *\n+ * <h3>Control Record</h3>\n+ *\n+ * Control records are special records that written by distributedlog. They are invisible\n+ * to applications. They could be treated as <i>commit requests</i> as what people could find\n+ * in distributed consensus algorithms, since they are usually written by distributedlog to\n+ * commit application written records. <i>Commit</i> means making application written records\n+ * visible to readers to achieve consistent views among them.\n+ * <p>\n+ * They are named as 'Control Records' for controlling visibility of application written records.\n+ * <p>\n+ * The transaction id of 'Control Records' are assigned by distributedlog by inheriting from last\n+ * written user records. So we could indicate what user records that a control record is committing\n+ * by looking at its transaction id.\n+ *\n+ * <h4>EndOfStream Record</h4>\n+ *\n+ * <code>EoS</code>(EndOfStream) is a special control record that would be written by a writer\n+ * to seal a log. After a <i>EoS</i> record is written to a log, no writers could append any record\n+ * after that and readers will get {@link com.twitter.distributedlog.exceptions.EndOfStreamException}\n+ * when they reach EoS.\n+ * <p>TransactionID of EoS is <code>Long.MAX_VALUE</code>.\n+ *\n+ * <h3>Serialization & Deserialization</h3>\n+ *\n+ * Data type in brackets. Interpretation should be on the basis of data types and not individual\n+ * bytes to honor Endianness.\n+ * <p>\n+ * <pre>\n+ * LogRecord structure:\n+ * -------------------\n+ * Bytes 0 - 7                      : Metadata (Long)\n+ * Bytes 8 - 15                     : TxId (Long)\n+ * Bytes 16 - 19                    : Payload length (Integer)\n+ * Bytes 20 - 20+payload.length-1   : Payload (Byte[])\n+ *\n+ * Metadata: 8 Bytes (Long)\n+ * --------\n+ *\n+ * 0x 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n+ *            |_____________| |_____|\n+ *                   |           |\n+ *               position      flags\n+ *\n+ * Flags: 2 Bytes (least significant)\n+ * -----\n+ * Bit  0      : If set, control record, else record with payload.\n+ * Bit  1      : If set, end of stream.\n+ * Bits 2 - 15 : Unused\n+ * </pre>\n+ *\n+ * <h3>Sequence Numbers</h3>\n+ *\n+ * A record is associated with three types of sequence numbers. They are generated\n+ * and used for different purposes. Check {@link LogRecordWithDLSN} for more details.\n+ *\n+ * @see LogRecordWithDLSN\n+ */\n+public class LogRecord {\n+    static final Logger LOG = LoggerFactory.getLogger(LogRecord.class);\n+\n+    // Allow 4K overhead for metadata within the max transmission size\n+    public static final int MAX_LOGRECORD_SIZE = 1024 * 1024 - 8 * 1024; //1MB - 8KB\n+    // Allow 4K overhead for transmission overhead\n+    public static final int MAX_LOGRECORDSET_SIZE = 1024 * 1024 - 4 * 1024; //1MB - 4KB\n+\n+    private static final int INPUTSTREAM_MARK_LIMIT = 16;\n+\n+    static final long LOGRECORD_METADATA_FLAGS_MASK = 0xffffL;\n+    static final long LOGRECORD_METADATA_FLAGS_UMASK = 0xffffffffffff0000L;\n+    static final long LOGRECORD_METADATA_POSITION_MASK = 0x0000ffffffff0000L;\n+    static final long LOGRECORD_METADATA_POSITION_UMASK = 0xffff00000000ffffL;\n+    static final int LOGRECORD_METADATA_POSITION_SHIFT = 16;\n+    static final long LOGRECORD_METADATA_UNUSED_MASK = 0xffff000000000000L;\n+\n+    // TODO: Replace with EnumSet\n+    static final long LOGRECORD_FLAGS_CONTROL_MESSAGE = 0x1;\n+    static final long LOGRECORD_FLAGS_END_OF_STREAM = 0x2;\n+    static final long LOGRECORD_FLAGS_RECORD_SET = 0x4;\n+\n+    private long metadata;\n+    private long txid;\n+    private byte[] payload;\n+\n+    /**\n+     * Construct an uninitialized log record.\n+     * <p>\n+     * NOTE: only deserializer should call this constructor.\n+     */\n+    protected LogRecord() {\n+        this.txid = 0;\n+        this.metadata = 0;\n+    }\n+\n+    /**\n+     * Construct a log record with <i>TransactionId</i> and payload.\n+     * <p>Usually writer would construct the log record for writing.\n+     *\n+     * @param txid\n+     *          application defined transaction id.\n+     * @param payload\n+     *          record data\n+     */\n+    public LogRecord(long txid, byte[] payload) {\n+        this.txid = txid;\n+        this.payload = payload;\n+        this.metadata = 0;\n+    }\n+\n+    //\n+    // Accessors\n+    //\n+\n+    /**\n+     * Return application defined transaction id.\n+     *\n+     * @return transacton id.\n+     */\n+    public long getTransactionId() {\n+        return txid;\n+    }\n+\n+    /**\n+     * Set application defined transaction id.\n+     *\n+     * @param txid application defined transaction id.\n+     */\n+    protected void setTransactionId(long txid) {\n+        this.txid = txid;\n+    }\n+\n+    /**\n+     * Return the payload of this log record.\n+     *\n+     * @return payload of this log record.\n+     */\n+    public byte[] getPayload() {\n+        return payload;\n+    }\n+\n+    /**\n+     * Set payload for this log record.\n+     *\n+     * @param payload payload of this log record\n+     */\n+    void setPayload(byte[] payload) {\n+        this.payload = payload;\n+    }\n+\n+    /**\n+     * Return the payload as an {@link InputStream}.\n+     *\n+     * @return payload as input stream\n+     */\n+    public InputStream getPayLoadInputStream() {\n+        return new ByteArrayInputStream(payload);\n+    }\n+\n+    //\n+    // Metadata & Flags\n+    //\n+\n+    protected void setMetadata(long metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    protected long getMetadata() {\n+        return this.metadata;\n+    }\n+\n+    /**\n+     * Set the position in the log segment.\n+     *\n+     * @see #getPositionWithinLogSegment()\n+     * @param positionWithinLogSegment position in the log segment.\n+     */\n+    void setPositionWithinLogSegment(int positionWithinLogSegment) {\n+        assert(positionWithinLogSegment >= 0);\n+        metadata = (metadata & LOGRECORD_METADATA_POSITION_UMASK) |\n+                (((long) positionWithinLogSegment) << LOGRECORD_METADATA_POSITION_SHIFT);\n+    }\n+\n+    /**\n+     * The position in the log segment means how many records (inclusive) added to the log segment so far.\n+     *\n+     * @return position of the record in the log segment.\n+     */\n+    public int getPositionWithinLogSegment() {\n+        long ret = (metadata & LOGRECORD_METADATA_POSITION_MASK) >> LOGRECORD_METADATA_POSITION_SHIFT;\n+        if (ret < 0 || ret > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException\n+                (ret + \" position should never exceed max integer value\");\n+        }\n+        return (int) ret;\n+    }\n+\n+    /**\n+     * Get the last position of this record in the log segment.\n+     * <p>If the record isn't record set, it would be same as {@link #getPositionWithinLogSegment()},\n+     * otherwise, it would be {@link #getPositionWithinLogSegment()} + numRecords - 1. If the record set\n+     * version is unknown, it would be same as {@link #getPositionWithinLogSegment()}.\n+     *\n+     * @return last position of this record in the log segment.\n+     */\n+    int getLastPositionWithinLogSegment() {\n+        if (isRecordSet()) {\n+            try {\n+                return getPositionWithinLogSegment() + LogRecordSet.numRecords(this) - 1;\n+            } catch (IOException e) {\n+                // if it is unrecognized record set, we will return the position of this record set.\n+                return getPositionWithinLogSegment();\n+            }\n+        } else {\n+            return getPositionWithinLogSegment();\n+        }\n+    }\n+\n+    /**\n+     * Set the record to represent a set of records.\n+     * <p>The bytes in this record is the serialized format of {@link LogRecordSet}.\n+     */\n+    public void setRecordSet() {\n+        metadata = metadata | LOGRECORD_FLAGS_RECORD_SET;\n+    }\n+\n+    /**\n+     * Check if the record represents a set of records.\n+     *\n+     * @return true if the record represents a set of records, otherwise false.\n+     * @see #setRecordSet()\n+     */\n+    public boolean isRecordSet() {\n+        return isRecordSet(metadata);\n+    }\n+\n+    public static boolean isRecordSet(long metadata) {\n+        return ((metadata & LOGRECORD_FLAGS_RECORD_SET) != 0);\n+    }\n+\n+    @VisibleForTesting\n+    public void setControl() {\n+        metadata = metadata | LOGRECORD_FLAGS_CONTROL_MESSAGE;\n+    }\n+\n+    /**\n+     * Check if the record is a control record.\n+     *\n+     * @return true if the record is a control record, otherwise false.\n+     */\n+    public boolean isControl() {\n+        return isControl(metadata);\n+    }\n+\n+    /**\n+     * Check flags to see if it indicates a control record.\n+     *\n+     * @param flags record flags\n+     * @return true if the record is a control record, otherwise false.\n+     */\n+    public static boolean isControl(long flags) {\n+        return ((flags & LOGRECORD_FLAGS_CONTROL_MESSAGE) != 0);\n+    }\n+\n+    /**\n+     * Set the record as <code>EoS</code> mark.\n+     *\n+     * @see #isEndOfStream()\n+     */\n+    void setEndOfStream() {\n+        metadata = metadata | LOGRECORD_FLAGS_END_OF_STREAM;\n+    }\n+\n+    /**\n+     * Check if the record is a <code>EoS</code> mark.\n+     * <p><code>EoS</code> mark is a special record that writer would\n+     * add to seal a log. after <code>Eos</code> mark is written,\n+     * writers can't write any more records and readers will get\n+     * {@link com.twitter.distributedlog.exceptions.EndOfStreamException}\n+     * when they reach <code>EoS</code>.\n+     *\n+     * @return true\n+     */\n+    boolean isEndOfStream() {\n+        return ((metadata & LOGRECORD_FLAGS_END_OF_STREAM) != 0);\n+    }\n+\n+    //\n+    // Serialization & Deserialization\n+    //\n+\n+    protected void readPayload(DataInputStream in) throws IOException {\n+        int length = in.readInt();\n+        if (length < 0) {\n+            throw new EOFException(\"Log Record is corrupt: Negative length \" + length);\n+        }\n+        payload = new byte[length];\n+        in.readFully(payload);\n+    }\n+\n+    private void writePayload(DataOutputStream out) throws IOException {\n+        out.writeInt(payload.length);\n+        out.write(payload);\n+    }\n+\n+    private void writeToStream(DataOutputStream out) throws IOException {\n+        out.writeLong(metadata);\n+        out.writeLong(txid);\n+        writePayload(out);\n+    }\n+\n+    /**\n+     * The size of the serialized log record, this is used to estimate how much will\n+     * be be appended to the in-memory buffer\n+     *\n+     * @return serialized size\n+     */\n+    int getPersistentSize() {\n+        // Flags + TxId + Payload-length + payload\n+        return 2 * (Long.SIZE / 8) + Integer.SIZE / 8 + payload.length;\n+    }\n+\n+    /**\n+     * Class for writing log records\n+     */\n+    public static class Writer {\n+        private final DataOutputStream buf;\n+\n+        public Writer(DataOutputStream out) {\n+            this.buf = out;\n+        }\n+\n+        /**\n+         * Write an operation to the output stream\n+         *\n+         * @param record The operation to write\n+         * @throws IOException if an error occurs during writing.\n+         */\n+        public void writeOp(LogRecord record) throws IOException {\n+            record.writeToStream(buf);\n+        }\n+\n+        public int getPendingBytes() {\n+            return buf.size();\n+        }\n+    }\n+\n+    /**\n+     * This class is a package private class for reading log records\n+     * from the persistent\n+      */\n+    public static class Reader {\n+        private final RecordStream recordStream;\n+        private final DataInputStream in;\n+        private final long startSequenceId;\n+        private final boolean deserializeRecordSet;\n+        private static final int SKIP_BUFFER_SIZE = 512;\n+        private LogRecordSet.Reader recordSetReader = null;\n+        private LogRecordWithDLSN lastRecordSkipTo = null;\n+\n+        /**\n+         * Construct the reader\n+         *\n+         * @param in The stream to read from.\n+         */\n+        public Reader(RecordStream recordStream,\n+                      DataInputStream in,\n+                      long startSequenceId) {\n+            this(recordStream, in, startSequenceId, true);\n+        }\n+\n+        public Reader(RecordStream recordStream,\n+                      DataInputStream in,\n+                      long startSequenceId,\n+                      boolean deserializeRecordSet) {\n+            this.recordStream = recordStream;\n+            this.in = in;\n+            this.startSequenceId = startSequenceId;\n+            this.deserializeRecordSet = deserializeRecordSet;\n+        }\n+\n+        /**\n+         * Read an operation from the input stream.\n+         * <p/>\n+         * Note that the objects returned from this method may be re-used by future\n+         * calls to the same method.\n+         *\n+         * @return the operation read from the stream, or null at the end of the file\n+         * @throws IOException on error.\n+         */\n+        public LogRecordWithDLSN readOp() throws IOException {\n+            LogRecordWithDLSN nextRecordInStream;\n+            while (true) {\n+                if (lastRecordSkipTo != null) {\n+                    nextRecordInStream = lastRecordSkipTo;\n+                    recordStream.advance(1);\n+                    lastRecordSkipTo = null;\n+                    return nextRecordInStream;\n+                }\n+                if (recordSetReader != null) {\n+                    nextRecordInStream = recordSetReader.nextRecord();\n+                    if (null != nextRecordInStream) {\n+                        recordStream.advance(1);\n+                        return nextRecordInStream;\n+                    } else {\n+                        recordSetReader = null;\n+                    }\n+                }\n+\n+                try {\n+                    long metadata = in.readLong();\n+                    // Reading the first 8 bytes positions the record stream on the correct log record\n+                    // By this time all components of the DLSN are valid so this is where we shoud\n+                    // retrieve the currentDLSN and advance to the next\n+                    // Given that there are 20 bytes following the read position of the previous call\n+                    // to readLong, we should not have moved ahead in the stream.\n+                    nextRecordInStream = new LogRecordWithDLSN(recordStream.getCurrentPosition(), startSequenceId);\n+                    nextRecordInStream.setMetadata(metadata);\n+                    nextRecordInStream.setTransactionId(in.readLong());\n+                    nextRecordInStream.readPayload(in);\n+                    if (LOG.isTraceEnabled()) {\n+                        if (nextRecordInStream.isControl()) {\n+                            LOG.trace(\"Reading {} Control DLSN {}\", recordStream.getName(), nextRecordInStream.getDlsn());\n+                        } else {\n+                            LOG.trace(\"Reading {} Valid DLSN {}\", recordStream.getName(), nextRecordInStream.getDlsn());\n+                        }\n+                    }\n+\n+                    int numRecords = 1;\n+                    if (!deserializeRecordSet && nextRecordInStream.isRecordSet()) {\n+                        numRecords = LogRecordSet.numRecords(nextRecordInStream);\n+                    }\n+\n+                    if (deserializeRecordSet && nextRecordInStream.isRecordSet()) {\n+                        recordSetReader = LogRecordSet.of(nextRecordInStream);\n+                    } else {\n+                        recordStream.advance(numRecords);\n+                        return nextRecordInStream;\n+                    }\n+                } catch (EOFException eof) {\n+                    // Expected\n+                    break;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public boolean skipTo(long txId, boolean skipControl) throws IOException {\n+            return skipTo(txId, null, skipControl);\n+        }\n+\n+        public boolean skipTo(DLSN dlsn) throws IOException {\n+            return skipTo(null, dlsn, false);\n+        }\n+\n+        private boolean skipTo(Long txId, DLSN dlsn, boolean skipControl) throws IOException {\n+            LOG.debug(\"SkipTo\");\n+            byte[] skipBuffer = null;\n+            boolean found = false;\n+            while (true) {\n+                try {\n+                    long flags;\n+                    long currTxId;\n+\n+                    // if there is not record set, read next record\n+                    if (null == recordSetReader) {\n+                        in.mark(INPUTSTREAM_MARK_LIMIT);\n+                        flags = in.readLong();\n+                        currTxId = in.readLong();\n+                    } else {\n+                        // check record set until reach end of record set\n+                        lastRecordSkipTo = recordSetReader.nextRecord();\n+                        if (null == lastRecordSkipTo) {\n+                            // reach end of record set\n+                            recordSetReader = null;\n+                            continue;\n+                        }\n+                        flags = lastRecordSkipTo.getMetadata();\n+                        currTxId = lastRecordSkipTo.getTransactionId();\n+                    }\n+\n+                    if ((null != dlsn) && (recordStream.getCurrentPosition().compareTo(dlsn) >=0)) {\n+                        if (LOG.isTraceEnabled()) {\n+                            LOG.trace(\"Found position {} beyond {}\", recordStream.getCurrentPosition(), dlsn);\n+                        }\n+                        if (null == lastRecordSkipTo) {\n+                            in.reset();\n+                        }\n+                        found = true;\n+                        break;\n+                    }\n+                    if ((null != txId) && (currTxId >= txId)) {\n+                        if (!skipControl || !isControl(flags)) {\n+                            if (LOG.isTraceEnabled()) {\n+                                LOG.trace(\"Found position {} beyond {}\", currTxId, txId);\n+                            }\n+                            if (null == lastRecordSkipTo) {\n+                                in.reset();\n+                            }\n+                            found = true;\n+                            break;\n+                        }\n+                    }\n+\n+                    if (null != lastRecordSkipTo) {\n+                        recordStream.advance(1);\n+                        continue;\n+                    }\n+\n+                    // get the num of records to skip\n+                    if (isRecordSet(flags)) {\n+                        // read record set\n+                        LogRecordWithDLSN record = new LogRecordWithDLSN(recordStream.getCurrentPosition(), startSequenceId);\n+                        record.setMetadata(flags);\n+                        record.setTransactionId(currTxId);\n+                        record.readPayload(in);\n+                        recordSetReader = LogRecordSet.of(record);\n+                    } else {\n+                        int length = in.readInt();\n+                        if (length < 0) {\n+                            // We should never really see this as we only write complete entries to\n+                            // BK and BK client has logic to detect torn writes (through checksum)\n+                            LOG.info(\"Encountered Record with negative length at TxId: {}\", currTxId);\n+                            break;\n+                        }\n+                        // skip single record\n+                        if (null == skipBuffer) {\n+                            skipBuffer = new byte[SKIP_BUFFER_SIZE];\n+                        }\n+                        int read = 0;\n+                        while (read < length) {\n+                            int bytesToRead = Math.min(length - read, SKIP_BUFFER_SIZE);\n+                            in.readFully(skipBuffer, 0, bytesToRead);\n+                            read += bytesToRead;\n+                        }\n+                        if (LOG.isTraceEnabled()) {\n+                            LOG.trace(\"Skipped Record with TxId {} DLSN {}\", currTxId, recordStream.getCurrentPosition());\n+                        }\n+                        recordStream.advance(1);\n+                    }\n+                } catch (EOFException eof) {\n+                    LOG.debug(\"Skip encountered end of file Exception\", eof);\n+                    break;\n+                }\n+            }\n+            return found;\n+        }\n+    }\n+}"},{"sha":"dad8e3ece58cca08fd6e55a3c982cea3f36d7058","filename":"src/main/java/com/twitter/distributedlog/LogRecordSet.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,154 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.google.common.base.Preconditions;\n+import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n+import com.twitter.distributedlog.exceptions.WriteException;\n+import com.twitter.distributedlog.io.CompressionCodec;\n+import com.twitter.util.Promise;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A set of {@link LogRecord}s.\n+ * <pre>\n+ * Structure:\n+ * Bytes 0  -  4                : Metadata (version + flags)\n+ * Bytes 4  - 7                 : Number of Records\n+ * Bytes 8  - 11                : Original Payload Length\n+ * Bytes 12 - 15                : Actual Payload Length\n+ * Bytes 16 - 16+length-1       : Payload\n+ * ------------------------------------------------------\n+ *\n+ * Metadata: Version and Flags // 32 Bits\n+ * --------------------------------------\n+ * 0 ... 0 0 0 0 0\n+ *             |_|\n+ *              |\n+ *    Compression Codec: // 2 Bits (Least significant)\n+ *    -----------------\n+ *    00        : No Compression\n+ *    01        : LZ4 Compression\n+ *    10        : Unused\n+ *    11        : Unused\n+ *\n+ * </pre>\n+ */\n+public class LogRecordSet {\n+\n+    static final OpStatsLogger NullOpStatsLogger =\n+            NullStatsLogger.INSTANCE.getOpStatsLogger(\"\");\n+\n+    public static final int HEADER_LEN =\n+            4 /* Metadata */\n+          + 4 /* Count */\n+          + 8 /* Lengths */\n+            ;\n+\n+    // Version\n+    static final int VERSION = 0x1000;\n+\n+    // Metadata\n+    static final int METADATA_VERSION_MASK = 0xf000;\n+    static final int METADATA_COMPRESSION_MASK = 0x3;\n+\n+    // Compression Codec\n+    static final int COMPRESSION_CODEC_NONE = 0x0;\n+    static final int COMPRESSION_CODEC_LZ4 = 0X1;\n+\n+    public static int numRecords(LogRecord record) throws IOException {\n+        Preconditions.checkArgument(record.isRecordSet(),\n+                \"record is not a recordset\");\n+        byte[] data = record.getPayload();\n+        return numRecords(data);\n+    }\n+\n+    public static int numRecords(byte[] data) throws IOException {\n+        ByteBuffer buffer = ByteBuffer.wrap(data);\n+        int metadata = buffer.getInt();\n+        int version = (metadata & METADATA_VERSION_MASK);\n+        if (version != VERSION) {\n+            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\" +\n+                    \" Required: %d\", version, VERSION));\n+        }\n+        return buffer.getInt();\n+    }\n+\n+    public static Writer newWriter(int initialBufferSize,\n+                                   CompressionCodec.Type codec) {\n+        return new EnvelopedRecordSetWriter(initialBufferSize, codec);\n+    }\n+\n+    public static Reader of(LogRecordWithDLSN record) throws IOException {\n+        Preconditions.checkArgument(record.isRecordSet(),\n+                \"record is not a recordset\");\n+        byte[] data = record.getPayload();\n+        DLSN dlsn = record.getDlsn();\n+        int startPosition = record.getPositionWithinLogSegment();\n+        long startSequenceId = record.getStartSequenceIdOfCurrentSegment();\n+\n+        return new EnvelopedRecordSetReader(\n+                dlsn.getLogSegmentSequenceNo(),\n+                dlsn.getEntryId(),\n+                record.getTransactionId(),\n+                dlsn.getSlotId(),\n+                startPosition,\n+                startSequenceId,\n+                new ByteArrayInputStream(data));\n+    }\n+\n+    /**\n+     * Writer to append {@link LogRecord}s to {@link LogRecordSet}.\n+     */\n+    public static interface Writer extends LogRecordSetBuffer {\n+\n+        /**\n+         * Write a {@link LogRecord} to this record set.\n+         *\n+         * @param record\n+         *          record to write\n+         * @param transmitPromise\n+         *          callback for transmit result. the promise is only\n+         *          satisfied when this record set is transmitted.\n+         * @throws LogRecordTooLongException if the record is too long\n+         * @throws WriteException when encountered exception writing the record\n+         */\n+        void writeRecord(ByteBuffer record, Promise<DLSN> transmitPromise)\n+                throws LogRecordTooLongException, WriteException;\n+    }\n+\n+    /**\n+     * Reader to read {@link LogRecord}s from this record set.\n+     */\n+    public static interface Reader {\n+\n+        /**\n+         * Read next log record from this record set.\n+         *\n+         * @return next log record from this record set.\n+         */\n+        LogRecordWithDLSN nextRecord() throws IOException;\n+\n+    }\n+\n+}"},{"sha":"8591e4e89eaf7d971531eec13aed1e0b430f5b01","filename":"src/main/java/com/twitter/distributedlog/LogRecordSetBuffer.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSetBuffer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSetBuffer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSetBuffer.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Write representation of a {@link LogRecordSet}.\n+ * It is a buffer of log record set, used for transmission.\n+ */\n+public interface LogRecordSetBuffer {\n+\n+    /**\n+     * Return number of records in current record set.\n+     *\n+     * @return number of records in current record set.\n+     */\n+    int getNumRecords();\n+\n+    /**\n+     * Return number of bytes in current record set.\n+     *\n+     * @return number of bytes in current record set.\n+     */\n+    int getNumBytes();\n+\n+    /**\n+     * Get the buffer to transmit.\n+     *\n+     * @return the buffer to transmit.\n+     */\n+    ByteBuffer getBuffer();\n+\n+    /**\n+     * Complete transmit.\n+     *\n+     * @param lssn log segment sequence number\n+     * @param entryId entry id\n+     * @param startSlotId start slot id\n+     */\n+    void completeTransmit(long lssn, long entryId, long startSlotId);\n+\n+    /**\n+     * Abort transmit.\n+     *\n+     * @param reason reason to abort.\n+     */\n+    void abortTransmit(Throwable reason);\n+\n+}"},{"sha":"521e4520af9e2334e6443e4a618475f445b62dc5","filename":"src/main/java/com/twitter/distributedlog/LogRecordWithDLSN.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * Log record with {@link DLSN} and <code>SequenceId</code>.\n+ *\n+ * <h3>Sequence Numbers</h3>\n+ *\n+ * A log record will be assigned with an unique system generated sequence number {@link DLSN} when it is\n+ * written to a log. At the mean time, a 64-bits long number is assigned to the record indicates its position\n+ * within a log, which is called <code>SequenceId</code>. Besides {@link DLSN} and <code>SequenceID</code>,\n+ * application can assign its own sequence number (called <code>TransactionID</code>) to the log record while\n+ * writing it.\n+ *\n+ * <h4>Transaction ID</h4>\n+ *\n+ * Transaction ID is a positive 64-bits long number that is assigned by the application. It is a very helpful\n+ * field when application wants to organize the records and position the readers using their own sequencing method.\n+ * A typical use case of <code>TransactionID</code> is DistributedLog Write Proxy. It assigns the non-decreasing\n+ * timestamps to log records, which the timestamps could be used as `physical time` to implement `TTL` in a strong\n+ * consistent database to achieve consistent `TTL` over replicas.\n+ *\n+ * <h4>DLSN</h4>\n+ *\n+ * DistributedLog Sequence Number (<i>DLSN</i>) is the sequence number generated during written time. It is comparable\n+ * and could be used to figure out the order between records. The DLSN is comprised with 3 components. They are\n+ * <i>Log Segment Sequence Number</i>, <i>Entry Id</i> and <i>Slot Id</i>. (See {@link DLSN} for more details).\n+ * The DLSN is usually used for comparison, positioning and truncation.\n+ *\n+ * <h4>Sequence ID</h4>\n+ *\n+ * Sequence ID is introduced to address the drawback of <code>DLSN</code>, in favor of answering questions like\n+ * `how many records written between two DLSNs`. It is a 64-bits monotonic increasing number (starting from zero).\n+ * Sequence ids are only accessible by readers. That means writers don't know the sequence ids of records after they\n+ * wrote them.\n+ */\n+public class LogRecordWithDLSN extends LogRecord {\n+    private final DLSN dlsn;\n+    private final long startSequenceIdOfCurrentSegment;\n+\n+    /**\n+     * This empty constructor can only be called from Reader#readOp.\n+     */\n+    LogRecordWithDLSN(DLSN dlsn, long startSequenceIdOfCurrentSegment) {\n+        super();\n+        this.dlsn = dlsn;\n+        this.startSequenceIdOfCurrentSegment = startSequenceIdOfCurrentSegment;\n+    }\n+\n+    @VisibleForTesting\n+    public LogRecordWithDLSN(DLSN dlsn, long txid, byte[] data, long startSequenceIdOfCurrentSegment) {\n+        super(txid, data);\n+        this.dlsn = dlsn;\n+        this.startSequenceIdOfCurrentSegment = startSequenceIdOfCurrentSegment;\n+    }\n+\n+    long getStartSequenceIdOfCurrentSegment() {\n+        return startSequenceIdOfCurrentSegment;\n+    }\n+\n+    /**\n+     * Get the sequence id of the record in the log.\n+     *\n+     * @return sequence id of the record in the log.\n+     */\n+    public long getSequenceId() {\n+        return startSequenceIdOfCurrentSegment + getPositionWithinLogSegment() - 1;\n+    }\n+\n+    /**\n+     * Get the DLSN of the record in the log.\n+     *\n+     * @return DLSN of the record in the log.\n+     */\n+    public DLSN getDlsn() {\n+        return dlsn;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"LogRecordWithDLSN{\" +\n+            \"dlsn=\" + dlsn +\n+            \", txid=\" + getTransactionId() +\n+            \", position=\" + getPositionWithinLogSegment() +\n+            \", isControl=\" + isControl() +\n+            \", isEndOfStream=\" + isEndOfStream() +\n+            '}';\n+    }\n+}"},{"sha":"a2b5537ef94d82abc2a4ba7ea4b978e942f92143","filename":"src/main/java/com/twitter/distributedlog/RecordStream.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+/**\n+ * Stream of records\n+ */\n+public interface RecordStream {\n+    /**\n+     * advance <i>numRecords</i> records.\n+     */\n+    void advance(int numRecords);\n+\n+    /**\n+     * Get postion of current record in the stream\n+     *\n+     * @return position of current record\n+     */\n+    DLSN getCurrentPosition();\n+\n+    /**\n+     * Get the name of the stream\n+     *\n+     * @return the name of the stream\n+     */\n+    String getName();\n+}"},{"sha":"d2d19b23526fd5b37a6007c5300aa058d3f83881","filename":"src/main/java/com/twitter/distributedlog/annotations/DistributedLogAnnotations.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.annotations;\n+\n+public class DistributedLogAnnotations {\n+    /**\n+     * Annotation to identify flaky tests in DistributedLog.\n+     * As and when we find that a test is flaky, we'll add this annotation to it for reference.\n+     */\n+    public @interface FlakyTest {}\n+\n+    /**\n+     * Annotation to specify the occurrence of a compression operation. These are CPU intensive\n+     * and should be avoided in low-latency paths.\n+     */\n+    public @interface Compression {}\n+}"},{"sha":"f8bb7b83462a55481cb737525655b65be784dfa6","filename":"src/main/java/com/twitter/distributedlog/exceptions/AlreadyClosedException.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Thrown when the distributed log manager has already been closed\n+ * (connections have been torn down)\n+ */\n+public class AlreadyClosedException extends DLException {\n+\n+    private static final long serialVersionUID = -4721864322739563725L;\n+\n+    public AlreadyClosedException(String message) {\n+        super(StatusCode.ALREADY_CLOSED, message);\n+    }\n+}"},{"sha":"fa3fb4b9706c9909aff13c3d7e351e06aebbabda","filename":"src/main/java/com/twitter/distributedlog/exceptions/AlreadyTruncatedTransactionException.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Thrown when the transaction Id specified in the API is in the range that has already been\n+ * truncated\n+ */\n+public class AlreadyTruncatedTransactionException extends DLException {\n+\n+    private static final long serialVersionUID = 4287238797065959977L;\n+\n+    public AlreadyTruncatedTransactionException(String message) {\n+        super(StatusCode.TRUNCATED_TRANSACTION, message);\n+    }\n+}"},{"sha":"158ce314668971477238fe9ac275242ee547db11","filename":"src/main/java/com/twitter/distributedlog/exceptions/BKTransmitException.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Thrown when the send to bookkeeper fails\n+ * This is thrown by the next attempt to write, send or flush\n+ */\n+public class BKTransmitException extends DLException {\n+\n+    private static final long serialVersionUID = -5796100450432076091L;\n+\n+    final int bkRc;\n+\n+    public BKTransmitException(String message, int bkRc) {\n+        super(StatusCode.BK_TRANSMIT_ERROR, message + \" : \" + bkRc);\n+        this.bkRc = bkRc;\n+    }\n+\n+    public int getBKResultCode() {\n+        return this.bkRc;\n+    }\n+\n+}"},{"sha":"111dff6c64b6c0eefd3e990a5cb0cf21acd30b1e","filename":"src/main/java/com/twitter/distributedlog/exceptions/ChecksumFailedException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class ChecksumFailedException extends DLException {\n+\n+    private static final long serialVersionUID = 288438128880378812L;\n+\n+    public ChecksumFailedException() {\n+        super(StatusCode.CHECKSUM_FAILED, \"Checksum failed\");\n+    }\n+}"},{"sha":"6c947c26ab23a3356703eccd003657096087783e","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLClientClosedException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class DLClientClosedException extends DLException {\n+\n+    private static final long serialVersionUID = -8876218750540927584L;\n+\n+    public DLClientClosedException(String msg) {\n+        super(StatusCode.CLIENT_CLOSED, msg);\n+    }\n+\n+    public DLClientClosedException(String msg, Throwable t) {\n+        super(StatusCode.CLIENT_CLOSED, msg, t);\n+    }\n+}"},{"sha":"1e654bfa55a1fc2420a9b53a1a1ca477024488ed","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLException.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.ResponseHeader;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+import java.io.IOException;\n+\n+public class DLException extends IOException {\n+    private static final long serialVersionUID = -4485775468586114393L;\n+    protected final StatusCode code;\n+\n+    protected DLException(StatusCode code) {\n+        super();\n+        this.code = code;\n+    }\n+\n+    protected DLException(StatusCode code, String msg) {\n+        super(msg);\n+        this.code = code;\n+    }\n+\n+    protected DLException(StatusCode code, Throwable t) {\n+        super(t);\n+        this.code = code;\n+    }\n+\n+    protected DLException(StatusCode code, String msg, Throwable t) {\n+        super(msg, t);\n+        this.code = code;\n+    }\n+\n+    /**\n+     * Return the status code representing the exception.\n+     *\n+     * @return status code representing the exception.\n+     */\n+    public StatusCode getCode() {\n+        return code;\n+    }\n+\n+    public static DLException of(ResponseHeader response) {\n+        String errMsg;\n+        switch (response.getCode()) {\n+            case FOUND:\n+                if (response.isSetErrMsg()) {\n+                    errMsg = response.getErrMsg();\n+                } else {\n+                    errMsg = \"Request is redirected to \" + response.getLocation();\n+                }\n+                return new OwnershipAcquireFailedException(errMsg, response.getLocation());\n+            case SUCCESS:\n+                throw new IllegalArgumentException(\"Can't instantiate an exception for success response.\");\n+            default:\n+                if (response.isSetErrMsg()) {\n+                    errMsg = response.getErrMsg();\n+                } else {\n+                    errMsg = response.getCode().name();\n+                }\n+                return new DLException(response.getCode(), errMsg);\n+        }\n+    }\n+}"},{"sha":"78e5e9c8fbc12275427ceca1cc1cc35bfd209ce2","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLIllegalStateException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class DLIllegalStateException extends DLException {\n+\n+    private static final long serialVersionUID = -6721471104777747420L;\n+\n+    public DLIllegalStateException(String msg) {\n+        super(StatusCode.ILLEGAL_STATE, msg);\n+    }\n+\n+    public DLIllegalStateException(String msg, Throwable t) {\n+        super(StatusCode.ILLEGAL_STATE, msg, t);\n+    }\n+}"},{"sha":"a1e3d1ba72f80f81645ffe4530f03b4ee73486a3","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLInterruptedException.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLInterruptedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLInterruptedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLInterruptedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,36 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * An interrupted exception wrapper indicates dl operations are interrupted.\n+ */\n+public class DLInterruptedException extends DLException {\n+\n+    private static final long serialVersionUID = 3023394251107286496L;\n+\n+    public DLInterruptedException(String msg) {\n+        super(StatusCode.INTERRUPTED, msg);\n+    }\n+\n+    public DLInterruptedException(String msg, Throwable t) {\n+        super(StatusCode.INTERRUPTED, msg, t);\n+    }\n+}"},{"sha":"663b18bd100f1f22f1225c3528dec9becd09de35","filename":"src/main/java/com/twitter/distributedlog/exceptions/EndOfStreamException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class EndOfStreamException extends DLException {\n+\n+    private static final long serialVersionUID = -6398949401860680263L;\n+\n+    public EndOfStreamException(String message) {\n+        super(StatusCode.END_OF_STREAM, message);\n+    }\n+}"},{"sha":"331de00de94eeb062e8ba3256d407f31bef67fa4","filename":"src/main/java/com/twitter/distributedlog/exceptions/FlushException.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class FlushException extends DLException {\n+\n+    private final long lastTxIdWritten;\n+    private final long lastTxIdAcknowledged;\n+\n+    private static final long serialVersionUID = -9060360360261130489L;\n+\n+    public FlushException(String message, long lastTxIdWritten, long lastTxIdAcknowledged) {\n+        super(StatusCode.FLUSH_TIMEOUT, message);\n+        this.lastTxIdWritten = lastTxIdWritten;\n+        this.lastTxIdAcknowledged = lastTxIdAcknowledged;\n+    }\n+\n+    public FlushException(String message, long lastTxIdWritten, long lastTxIdAcknowledged, Throwable cause) {\n+        super(StatusCode.FLUSH_TIMEOUT, message, cause);\n+        this.lastTxIdWritten = lastTxIdWritten;\n+        this.lastTxIdAcknowledged = lastTxIdAcknowledged;\n+    }\n+\n+    public long getLastTxIdWritten() {\n+        return lastTxIdWritten;\n+    }\n+\n+    public long getLastTxIdAcknowledged() {\n+        return lastTxIdAcknowledged;\n+    }\n+}"},{"sha":"475606ffa4333a54609ff7ba9c348c0bd6073d62","filename":"src/main/java/com/twitter/distributedlog/exceptions/IdleReaderException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import java.io.IOException;\n+\n+public class IdleReaderException extends IOException {\n+\n+    private static final long serialVersionUID = 4882278671396434834L;\n+\n+    public IdleReaderException(String message) {\n+        super(message);\n+    }\n+}"},{"sha":"4b463963cfffeddffa6f92639b7dcf9516d032cc","filename":"src/main/java/com/twitter/distributedlog/exceptions/InternalServerException.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class InternalServerException extends DLException {\n+\n+    private static final long serialVersionUID = 288438028880978802L;\n+\n+    public InternalServerException(String msg) {\n+        super(StatusCode.INTERNAL_SERVER_ERROR, msg);\n+    }\n+\n+    public InternalServerException(Throwable t) {\n+        super(StatusCode.INTERNAL_SERVER_ERROR, t);\n+    }\n+\n+    public InternalServerException(String msg, Throwable t) {\n+        super(StatusCode.INTERNAL_SERVER_ERROR, msg, t);\n+    }\n+}"},{"sha":"fdc50c171cfff5c0178ff16919744c4b10615ade","filename":"src/main/java/com/twitter/distributedlog/exceptions/InvalidEnvelopedEntryException.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Exception thrown when encounter invalid enveloped entry\n+ */\n+public class InvalidEnvelopedEntryException extends DLException {\n+\n+    private static final long serialVersionUID = -9190621788978573862L;\n+\n+    public InvalidEnvelopedEntryException(String msg) {\n+        super(StatusCode.INVALID_ENVELOPED_ENTRY, msg);\n+    }\n+}"},{"sha":"a7d92023dc458feb783885c81cc912d80d095d87","filename":"src/main/java/com/twitter/distributedlog/exceptions/InvalidStreamNameException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class InvalidStreamNameException extends DLException {\n+\n+    private static final long serialVersionUID = 6393315766140568100L;\n+\n+    public InvalidStreamNameException(String streamName) {\n+        super(StatusCode.INVALID_STREAM_NAME, \"Invalid stream name : '\" + streamName + \"'\");\n+    }\n+\n+    public InvalidStreamNameException(String streamName, String reason) {\n+        super(StatusCode.INVALID_STREAM_NAME, \"Invalid stream name : '\" + streamName + \"' : \" + reason);\n+    }\n+}"},{"sha":"65e8692085df419b54735837e998b909e37db3a3","filename":"src/main/java/com/twitter/distributedlog/exceptions/LockCancelledException.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,28 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+public class LockCancelledException extends LockingException {\n+\n+    private static final long serialVersionUID = -148795017092861106L;\n+\n+    public LockCancelledException(String lockPath, String message, Throwable cause) {\n+        super(lockPath, message, cause);\n+    }\n+\n+}"},{"sha":"92ff8d6d40306c0a133cd73a16359d1746572a44","filename":"src/main/java/com/twitter/distributedlog/exceptions/LockingException.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class LockingException extends DLException {\n+\n+    private static final long serialVersionUID = -4960278188448464473L;\n+\n+    public LockingException(String lockPath, String message) {\n+        this(StatusCode.LOCKING_EXCEPTION, lockPath, message);\n+    }\n+\n+    public LockingException(String lockPath, String message, Throwable cause) {\n+        this(StatusCode.LOCKING_EXCEPTION, lockPath, message, cause);\n+    }\n+\n+    protected LockingException(StatusCode code, String lockPath, String message) {\n+        super(code, String.format(\"LockPath - %s: %s\", lockPath, message));\n+    }\n+\n+    protected LockingException(StatusCode code, String lockPath, String message, Throwable cause) {\n+        super(code, String.format(\"LockPath - %s: %s\", lockPath, message), cause);\n+    }\n+}"},{"sha":"84813c1e68b2b6b6ee1947e1c93240b1883c15c1","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogEmptyException.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class LogEmptyException extends DLException {\n+\n+    private static final long serialVersionUID = -1106184127178002282L;\n+\n+    public LogEmptyException(String message) {\n+        super(StatusCode.LOG_EMPTY, message);\n+    }\n+}"},{"sha":"84ac10ecefc0f302c2876e8d4b1f02268a7db2bc","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogExistsException.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,31 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Log Already Exists\n+ */\n+public class LogExistsException extends DLException {\n+    private static final long serialVersionUID = 1794053581673506784L;\n+\n+    public LogExistsException(String msg) {\n+        super(StatusCode.LOG_EXISTS, msg);\n+    }\n+}"},{"sha":"5fc843869b5c3a5646ebc57d47b1d458d5f7f190","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogNotFoundException.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class LogNotFoundException extends DLException {\n+\n+    private static final long serialVersionUID = 871435700699403164L;\n+\n+    public LogNotFoundException(String message) {\n+        super(StatusCode.LOG_NOT_FOUND, message);\n+    }\n+}"},{"sha":"a4c346b79b005ab2aafd14eadf5eedfe27a6367a","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogReadException.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.exceptions.DLException;\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+/**\n+ * Thrown when there's a failure to read an edit log op from disk when loading\n+ * edits.\n+ */\n+public class LogReadException extends DLException {\n+\n+    private static final long serialVersionUID = 302945709106128177L;\n+\n+    public LogReadException(String message) {\n+        super(StatusCode.LOG_READ_ERROR, message);\n+    }\n+}"},{"sha":"0521133a4387ba5ba966375e31b2045438871695","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogRecordTooLongException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class LogRecordTooLongException extends DLException {\n+\n+    private static final long serialVersionUID = 2788274084603111386L;\n+\n+    public LogRecordTooLongException(String message) {\n+        super(StatusCode.TOO_LARGE_RECORD, message);\n+    }\n+}"},{"sha":"76ab573155d9987ca89d9efe13741795b7e40035","filename":"src/main/java/com/twitter/distributedlog/exceptions/MetadataException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class MetadataException extends DLException {\n+\n+    private static final long serialVersionUID = 6683578078046016125L;\n+\n+    public MetadataException(String msg) {\n+        super(StatusCode.METADATA_EXCEPTION, msg);\n+    }\n+\n+    public MetadataException(String msg, Throwable t) {\n+        super(StatusCode.METADATA_EXCEPTION, msg, t);\n+    }\n+}"},{"sha":"7c703e412362527173d3a9a87a1a6874e0b97307","filename":"src/main/java/com/twitter/distributedlog/exceptions/NotYetImplementedException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class NotYetImplementedException extends DLException {\n+\n+    private static final long serialVersionUID = -6002036746792556106L;\n+\n+    public NotYetImplementedException(String method) {\n+        super(StatusCode.NOT_IMPLEMENTED, method + \"is not supported by the current version\");\n+    }\n+}"},{"sha":"ab46f646668e0fafa6046745b4e0acf7c8e488fc","filename":"src/main/java/com/twitter/distributedlog/exceptions/OverCapacityException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class OverCapacityException extends DLException {\n+\n+    private static final long serialVersionUID = -6398949404860680263L;\n+\n+    public OverCapacityException(String message) {\n+        super(StatusCode.OVER_CAPACITY, message);\n+    }\n+\n+    public OverCapacityException(StatusCode code, String message) {\n+        super(code, message);\n+    }\n+}"},{"sha":"9bdef0eb0d1c34ae0b2a371a4cbd62971d673eac","filename":"src/main/java/com/twitter/distributedlog/exceptions/OwnershipAcquireFailedException.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class OwnershipAcquireFailedException extends LockingException {\n+    private static final long serialVersionUID = 8176056926552748001L;\n+    private final String currentOwner;\n+\n+    public OwnershipAcquireFailedException(String lockPath, String currentOwner) {\n+        super(StatusCode.FOUND, lockPath,\n+              String.format(\"Lock acquisition failed, the current owner is %s\", currentOwner));\n+        this.currentOwner = currentOwner;\n+    }\n+\n+    public String getCurrentOwner() {\n+        return currentOwner;\n+    }\n+}"},{"sha":"2876d3f629bfe0daf967b3f2dc639162099186b5","filename":"src/main/java/com/twitter/distributedlog/exceptions/ReadCancelledException.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class ReadCancelledException extends DLException {\n+\n+    private static final long serialVersionUID = -6273430297547510262L;\n+\n+    public ReadCancelledException(String stream, String reason) {\n+        super(StatusCode.READ_CANCELLED_EXCEPTION,\n+              \"Read cancelled on stream \" + stream + \" : \" + reason);\n+    }\n+}"},{"sha":"4158c97b555e94d43d541a04294bbe981b8e0244","filename":"src/main/java/com/twitter/distributedlog/exceptions/RegionUnavailableException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class RegionUnavailableException extends DLException {\n+\n+    private static final long serialVersionUID = 5727337162533143957L;\n+\n+    public RegionUnavailableException(String msg) {\n+        super(StatusCode.REGION_UNAVAILABLE, msg);\n+    }\n+}"},{"sha":"e4b61c44ae42f646e099aa67af23fa790e34b6cf","filename":"src/main/java/com/twitter/distributedlog/exceptions/RequestDeniedException.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,30 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class RequestDeniedException extends DLException {\n+\n+    private static final long serialVersionUID = 7338220414584728216L;\n+\n+    public RequestDeniedException(String stream, String operation) {\n+        super(StatusCode.REQUEST_DENIED,\n+                operation + \" request to stream \" + stream + \" is denied\");\n+    }\n+}"},{"sha":"d35988c91fd197f41b6221f9af33000f1ceba056","filename":"src/main/java/com/twitter/distributedlog/exceptions/RetryableReadException.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class RetryableReadException extends DLException {\n+\n+    private static final long serialVersionUID = 2803207702150642330L;\n+\n+    public RetryableReadException (String streamName, String message) {\n+        super(StatusCode.RETRYABLE_READ, String.format(\"Reader on %s failed with %s\", streamName, message));\n+    }\n+\n+    public RetryableReadException (String streamName, String message, Throwable cause) {\n+        super(StatusCode.RETRYABLE_READ, String.format(\"Reader on %s failed with %s\", streamName, message), cause);\n+    }\n+}"},{"sha":"7851c0b22b3c342da5fde7a632104273399da607","filename":"src/main/java/com/twitter/distributedlog/exceptions/ServiceUnavailableException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class ServiceUnavailableException extends DLException {\n+\n+    private static final long serialVersionUID = 6317900286881665746L;\n+\n+    public ServiceUnavailableException(String msg) {\n+        super(StatusCode.SERVICE_UNAVAILABLE, msg);\n+    }\n+}"},{"sha":"e44706ae842ea190cc6e1d0baabe913e080e0a21","filename":"src/main/java/com/twitter/distributedlog/exceptions/StreamNotReadyException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class StreamNotReadyException extends DLException {\n+\n+    private static final long serialVersionUID = 684211282036293028L;\n+\n+    public StreamNotReadyException(String msg) {\n+        super(StatusCode.STREAM_NOT_READY, msg);\n+    }\n+}"},{"sha":"1e23da00bc545865c56674f09d47554af0f1c870","filename":"src/main/java/com/twitter/distributedlog/exceptions/StreamUnavailableException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class StreamUnavailableException extends DLException {\n+\n+    private static final long serialVersionUID = 684211282036993028L;\n+\n+    public StreamUnavailableException(String msg) {\n+        super(StatusCode.STREAM_UNAVAILABLE, msg);\n+    }\n+}"},{"sha":"bbee4e4dc2fca286b2c6e73ca5d9b5794d186151","filename":"src/main/java/com/twitter/distributedlog/exceptions/TooManyStreamsException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class TooManyStreamsException extends OverCapacityException {\n+\n+    private static final long serialVersionUID = -6391941401860180163L;\n+\n+    public TooManyStreamsException(String message) {\n+        super(StatusCode.TOO_MANY_STREAMS, message);\n+    }\n+}"},{"sha":"370b83e843a0e31545fb0e35a8afe093544140a7","filename":"src/main/java/com/twitter/distributedlog/exceptions/TransactionIdOutOfOrderException.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,44 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class TransactionIdOutOfOrderException extends DLException {\n+\n+    private static final long serialVersionUID = -6239322552103630036L;\n+    // TODO: copied from DistributedLogConstants (we should think about how to separated common constants)\n+    public static final long INVALID_TXID = -999;\n+    private final long lastTxnId;\n+\n+    public TransactionIdOutOfOrderException(long smallerTxnId, long lastTxnId) {\n+        super(StatusCode.TRANSACTION_OUT_OF_ORDER,\n+              \"Received smaller txn id \" + smallerTxnId + \", last txn id is \" + lastTxnId);\n+        this.lastTxnId = lastTxnId;\n+    }\n+\n+    public TransactionIdOutOfOrderException(long invalidTxnId) {\n+        super(StatusCode.TRANSACTION_OUT_OF_ORDER,\n+            \"The txn id \" + invalidTxnId + \" is invalid and will break the sequence\");\n+        lastTxnId = INVALID_TXID;\n+    }\n+\n+    public long getLastTxnId() {\n+        return lastTxnId;\n+    }\n+}"},{"sha":"ec26ad2c8e702c3af912d65472354201315e3332","filename":"src/main/java/com/twitter/distributedlog/exceptions/UnexpectedException.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,37 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class UnexpectedException extends DLException {\n+\n+    private static final long serialVersionUID = 903763128422774055L;\n+\n+    public UnexpectedException() {\n+        super(StatusCode.UNEXPECTED);\n+    }\n+\n+    public UnexpectedException(String msg) {\n+        super(StatusCode.UNEXPECTED, msg);\n+    }\n+\n+    public UnexpectedException(String msg, Throwable t) {\n+        super(StatusCode.UNEXPECTED, msg, t);\n+    }\n+}"},{"sha":"042c7dbea4f42cfc26eba6b550de4b8f7929be1b","filename":"src/main/java/com/twitter/distributedlog/exceptions/UnsupportedMetadataVersionException.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class UnsupportedMetadataVersionException extends DLException {\n+\n+    private static final long serialVersionUID = 4980892659955478446L;\n+\n+    public UnsupportedMetadataVersionException(String message) {\n+        super(StatusCode.UNSUPPORTED_METADATA_VERSION, String.format(message));\n+    }\n+}"},{"sha":"33f11d40ceda00ac7bcc3f98d593d94bb2bcf953","filename":"src/main/java/com/twitter/distributedlog/exceptions/WriteCancelledException.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class WriteCancelledException extends DLException {\n+\n+    private static final long serialVersionUID = -1836146493496072122L;\n+\n+    public WriteCancelledException(String stream, Throwable t) {\n+        super(StatusCode.WRITE_CANCELLED_EXCEPTION,\n+            \"Write cancelled on stream \" +\n+            stream + \" due to an earlier error\", t);\n+    }\n+\n+    public WriteCancelledException(String stream, String reason) {\n+        super(StatusCode.WRITE_CANCELLED_EXCEPTION,\n+                \"Write cancelled on stream \" + stream + \" due to : \" + reason);\n+    }\n+\n+    public WriteCancelledException(String stream) {\n+        super(StatusCode.WRITE_CANCELLED_EXCEPTION,\n+            \"Write cancelled on stream \" +\n+            stream + \" due to an earlier error\");\n+    }\n+}"},{"sha":"64714d7d7c78eea86121fb9fb2bced7a4e204fdd","filename":"src/main/java/com/twitter/distributedlog/exceptions/WriteException.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,31 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.exceptions;\n+\n+import com.twitter.distributedlog.thrift.service.StatusCode;\n+\n+public class WriteException extends DLException {\n+\n+    private static final long serialVersionUID = -1836146493446072122L;\n+\n+    public WriteException(String stream, String transmitError) {\n+        super(StatusCode.WRITE_EXCEPTION,\n+            \"Write rejected because stream \" + stream + \" has encountered an error : \" +\n+                transmitError);\n+    }\n+}"},{"sha":"4c9b23fd519bf212387ad0163a0faebce29554e9","filename":"src/main/java/com/twitter/distributedlog/io/Buffer.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FBuffer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FBuffer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FBuffer.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+/**\n+ * {@link ByteArrayOutputStream} based buffer.\n+ */\n+public class Buffer extends ByteArrayOutputStream {\n+    public Buffer(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    public byte[] getData() {\n+        return buf;\n+    }\n+}"},{"sha":"2637f8756abe200069b24217d0264aaa0aaff54c","filename":"src/main/java/com/twitter/distributedlog/io/CompressionCodec.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+/**\n+ * Common interface for compression/decompression operations using different\n+ * compression codecs.\n+ */\n+public interface CompressionCodec {\n+    /**\n+     * Enum specifying the currently supported compression types.\n+     */\n+    public static enum Type {\n+        NONE, LZ4, UNKNOWN\n+    }\n+\n+    /**\n+     * Return the compressed data as a byte array.\n+     * @param data\n+     *          The data to be compressed\n+     * @param offset\n+     *          The offset in the bytes of data to compress\n+     * @param length\n+     *          The number of bytes of data to compress\n+     * @param compressionStat\n+     *          The stat to use for timing the compression operation\n+     * @return\n+     *          The compressed data\n+     *          The returned byte array is sized to the length of the compressed data\n+     */\n+    byte[] compress(byte[] data, int offset, int length, OpStatsLogger compressionStat);\n+\n+    /**\n+     * Return the decompressed data as a byte array.\n+     * @param data\n+     *          The data to be decompressed\n+     * @param offset\n+     *          The offset in the bytes of data to decompress\n+     * @param length\n+     *          The number of bytes of data to decompress\n+     * @param decompressionStat\n+     *          The stat to use for timing the decompression operation\n+     * @return\n+     *          The decompressed data\n+     */\n+    byte[] decompress(byte[] data, int offset, int length, OpStatsLogger decompressionStat);\n+\n+    /**\n+     * Return the decompressed data as a byte array.\n+     * @param data\n+     *          The data to the decompressed\n+     * @param offset\n+     *          The offset in the bytes of data to decompress\n+     * @param length\n+     *          The number of bytes of data to decompress\n+     * @param decompressedSize\n+     *          The exact size of the decompressed data\n+     * @param decompressionStat\n+     *          The stat to use for timing the decompression operation\n+     * @return\n+     *          The decompressed data\n+     */\n+    byte[] decompress(byte[] data, int offset, int length, int decompressedSize, OpStatsLogger decompressionStat);\n+}"},{"sha":"3acef62775828bf57f265c8b6fbf1c15d7d918ed","filename":"src/main/java/com/twitter/distributedlog/io/CompressionUtils.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+public class CompressionUtils {\n+\n+    public final static String LZ4 = \"lz4\";\n+    public final static String NONE = \"none\";\n+\n+    private static CompressionCodec identityCodec = new IdentityCompressionCodec();\n+    private static CompressionCodec lz4Codec = new LZ4CompressionCodec();\n+\n+    /**\n+     * Get a cached compression codec instance for the specified type.\n+     * @param type compression codec type\n+     * @return compression codec instance\n+     */\n+    public static CompressionCodec getCompressionCodec(CompressionCodec.Type type) {\n+        if (type == CompressionCodec.Type.LZ4) {\n+            return lz4Codec;\n+        }\n+        // No Compression\n+        return identityCodec;\n+    }\n+\n+    /**\n+     * Compression type value from string.\n+     * @param compressionString compression codec presentation in string\n+     * @return compression codec type\n+     */\n+    public static CompressionCodec.Type stringToType(String compressionString) {\n+        if (compressionString.equals(LZ4)) {\n+            return CompressionCodec.Type.LZ4;\n+        } else if (compressionString.equals(NONE)) {\n+            return CompressionCodec.Type.NONE;\n+        } else {\n+            return CompressionCodec.Type.UNKNOWN;\n+        }\n+    }\n+}"},{"sha":"4cc776284eb812e07159a0d2c34b3612fee28a53","filename":"src/main/java/com/twitter/distributedlog/io/IdentityCompressionCodec.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+import java.util.Arrays;\n+\n+import com.google.common.base.Preconditions;\n+\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+public class IdentityCompressionCodec implements CompressionCodec {\n+    @Override\n+    public byte[] compress(byte[] data, int offset, int length, OpStatsLogger compressionStat) {\n+        Preconditions.checkNotNull(data);\n+        Preconditions.checkArgument(length >= 0);\n+        return Arrays.copyOfRange(data, offset, offset + length);\n+    }\n+\n+    @Override\n+    public byte[] decompress(byte[] data, int offset, int length, OpStatsLogger decompressionStat) {\n+        Preconditions.checkNotNull(data);\n+        return Arrays.copyOfRange(data, offset, offset + length);\n+    }\n+\n+    @Override\n+    // Decompressed size is the same as the length of the data because this is an\n+    // Identity compressor\n+    public byte[] decompress(byte[] data, int offset, int length,\n+                             int decompressedSize, OpStatsLogger decompressionStat) {\n+        return decompress(data, offset, length, decompressionStat);\n+    }\n+}"},{"sha":"2137452a6dbbd4c4d21ad5a7418780e333efab97","filename":"src/main/java/com/twitter/distributedlog/io/LZ4CompressionCodec.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,100 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Stopwatch;\n+\n+import net.jpountz.lz4.LZ4Compressor;\n+import net.jpountz.lz4.LZ4Exception;\n+import net.jpountz.lz4.LZ4Factory;\n+import net.jpountz.lz4.LZ4FastDecompressor;\n+import net.jpountz.lz4.LZ4SafeDecompressor;\n+\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+/**\n+ * All functions are thread safe.\n+ */\n+public class LZ4CompressionCodec implements CompressionCodec {\n+\n+    // Used for compression\n+    private final LZ4Compressor compressor;\n+    // Used to decompress when the size of the output is known\n+    private final LZ4FastDecompressor fastDecompressor;\n+    // Used to decompress when the size of the output is not known\n+    private final LZ4SafeDecompressor safeDecompressor;\n+\n+    public LZ4CompressionCodec() {\n+        this.compressor = LZ4Factory.fastestInstance().fastCompressor();\n+        this.fastDecompressor = LZ4Factory.fastestInstance().fastDecompressor();\n+        this.safeDecompressor = LZ4Factory.fastestInstance().safeDecompressor();\n+    }\n+\n+    @Override\n+    public byte[] compress(byte[] data, int offset, int length, OpStatsLogger compressionStat) {\n+        Preconditions.checkNotNull(data);\n+        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n+        Preconditions.checkArgument(length >= 0);\n+        Preconditions.checkNotNull(compressionStat);\n+\n+        Stopwatch watch = Stopwatch.createStarted();\n+        byte[] compressed = compressor.compress(data, offset, length);\n+        compressionStat.registerSuccessfulEvent(watch.elapsed(TimeUnit.MICROSECONDS));\n+        return compressed;\n+    }\n+\n+    @Override\n+    public byte[] decompress(byte[] data, int offset, int length, OpStatsLogger decompressionStat) {\n+        Preconditions.checkNotNull(data);\n+        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n+        Preconditions.checkArgument(length >= 0);\n+        Preconditions.checkNotNull(decompressionStat);\n+\n+        Stopwatch watch = Stopwatch.createStarted();\n+        // Assume that we have a compression ratio of 1/3.\n+        int outLength = length * 3;\n+        while (true) {\n+            try {\n+                byte[] decompressed = safeDecompressor.decompress(data, offset, length, outLength);\n+                decompressionStat.registerSuccessfulEvent(watch.elapsed(TimeUnit.MICROSECONDS));\n+                return decompressed;\n+            } catch (LZ4Exception e) {\n+                outLength *= 2;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    // length parameter is ignored here because of the way the fastDecompressor works.\n+    public byte[] decompress(byte[] data, int offset, int length, int decompressedSize,\n+                             OpStatsLogger decompressionStat) {\n+        Preconditions.checkNotNull(data);\n+        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n+        Preconditions.checkArgument(length >= 0);\n+        Preconditions.checkArgument(decompressedSize >= 0);\n+        Preconditions.checkNotNull(decompressionStat);\n+\n+        Stopwatch watch = Stopwatch.createStarted();\n+        byte[] decompressed = fastDecompressor.decompress(data, offset, decompressedSize);\n+        decompressionStat.registerSuccessfulEvent(watch.elapsed(TimeUnit.MICROSECONDS));\n+        return decompressed;\n+    }\n+}"},{"sha":"4196912939b6a7ee205ec8384deeaf902b5dfcb4","filename":"src/main/java/com/twitter/distributedlog/io/TransmitListener.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FTransmitListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FTransmitListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FTransmitListener.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.io;\n+\n+import com.twitter.distributedlog.DLSN;\n+\n+/**\n+ * Listener on transmit results.\n+ */\n+public interface TransmitListener {\n+\n+    /**\n+     * Finalize the transmit result and result the last\n+     * {@link DLSN} in this transmit.\n+     *\n+     * @param lssn\n+     *          log segment sequence number\n+     * @param entryId\n+     *          entry id\n+     * @return last dlsn in this transmit\n+     */\n+    DLSN finalizeTransmit(long lssn, long entryId);\n+\n+    /**\n+     * Complete the whole transmit.\n+     *\n+     * @param lssn\n+     *          log segment sequence number\n+     * @param entryId\n+     *          entry id\n+     */\n+    void completeTransmit(long lssn, long entryId);\n+\n+    /**\n+     * Abort the transmit.\n+     *\n+     * @param reason\n+     *          reason to abort transmit\n+     */\n+    void abortTransmit(Throwable reason);\n+}"},{"sha":"adee084a0f71029e4d06e0f4b1af7d8633ab44a4","filename":"src/main/java/com/twitter/distributedlog/util/BitMaskUtils.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,54 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.util;\n+\n+import com.google.common.base.Preconditions;\n+\n+public class BitMaskUtils {\n+\n+    /**\n+     * 1) Unset all bits where value in mask is set.\n+     * 2) Set these bits to value specified by newValue.\n+     *\n+     * e.g.\n+     * if oldValue = 1010, mask = 0011, newValue = 0001\n+     * 1) 1010 -> 1000\n+     * 2) 1000 -> 1001\n+     *\n+     * @param oldValue expected old value\n+     * @param mask the mask of the value for updates\n+     * @param newValue new value to set\n+     * @return updated value\n+     */\n+    public static long set(long oldValue, long mask, long newValue) {\n+        Preconditions.checkArgument(oldValue >= 0L && mask >= 0L && newValue >= 0L);\n+        return ((oldValue & (~mask)) | (newValue & mask));\n+    }\n+\n+    /**\n+     * Get the bits where mask is 1\n+     *\n+     * @param value value\n+     * @param mask mask of the value\n+     * @return the bit of the mask\n+     */\n+    public static long get(long value, long mask) {\n+        Preconditions.checkArgument(value >= 0L && mask >= 0L);\n+        return (value & mask);\n+    }\n+}"},{"sha":"a52976cdba4a2e3fe929cf1cd8f91f6954ee678f","filename":"src/main/java/com/twitter/distributedlog/util/ProtocolUtils.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.util;\n+\n+import java.util.zip.CRC32;\n+\n+import com.twitter.distributedlog.DLSN;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * With CRC embedded in the application, we have to keep track of per api crc. Ideally this\n+ * would be done by thrift.\n+ */\n+public class ProtocolUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ProtocolUtils.class);\n+\n+    // For request payload checksum\n+    private static final ThreadLocal<CRC32> requestCRC = new ThreadLocal<CRC32>() {\n+        @Override\n+        protected CRC32 initialValue() {\n+            return new CRC32();\n+        }\n+    };\n+\n+    /**\n+     * Generate crc32 for WriteOp.\n+     */\n+    public static Long writeOpCRC32(String stream, byte[] payload) {\n+        CRC32 crc = requestCRC.get();\n+        try {\n+            crc.update(stream.getBytes());\n+            crc.update(payload);\n+            return crc.getValue();\n+        } finally {\n+            crc.reset();\n+        }\n+    }\n+\n+    /**\n+     * Generate crc32 for TruncateOp.\n+     */\n+    public static Long truncateOpCRC32(String stream, DLSN dlsn) {\n+        CRC32 crc = requestCRC.get();\n+        try {\n+            crc.update(stream.getBytes());\n+            crc.update(dlsn.serializeBytes());\n+            long result = crc.getValue();\n+            return crc.getValue();\n+        } finally {\n+            crc.reset();\n+        }\n+    }\n+\n+    /**\n+     * Generate crc32 for any op which only passes a stream name.\n+     */\n+    public static Long streamOpCRC32(String stream) {\n+        CRC32 crc = requestCRC.get();\n+        try {\n+            crc.update(stream.getBytes());\n+            long result = crc.getValue();\n+            return crc.getValue();\n+        } finally {\n+            crc.reset();\n+        }\n+    }\n+}"},{"sha":"29e1a1691079d11109f52e1d8b080270ad9cd8d4","filename":"src/main/resources/findbugsExclude.xml","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fresources%2FfindbugsExclude.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fresources%2FfindbugsExclude.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fresources%2FfindbugsExclude.xml?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,23 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+//-->\n+<FindBugsFilter>\n+  <Match>\n+    <!-- generated code, we can't be held responsible for findbugs in it //-->\n+    <Class name=\"~com\\.twitter\\.distributedlog\\.thrift.*\" />\n+  </Match>\n+</FindBugsFilter>"},{"sha":"a2f0a0bbe262ca29ef61ea0304783d412787b8a9","filename":"src/main/thrift/service.thrift","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fthrift%2Fservice.thrift","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Fmain%2Fthrift%2Fservice.thrift","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fthrift%2Fservice.thrift?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,172 @@\n+namespace java com.twitter.distributedlog.thrift.service\n+\n+// Response stats codes\n+enum StatusCode {\n+    // 2xx: action requested by the client was received, understood, accepted and processed successfully.\n+\n+    // standard response for successful requests.\n+    SUCCESS = 200,\n+\n+    // 3xx: client must take additional action to complete the request.\n+    // client closed.\n+    CLIENT_CLOSED = 301,\n+    // found the stream in a different server, a redirection is required by client.\n+    FOUND = 302,\n+\n+    // 4xx: client seems to have erred.\n+\n+    // request is denied for some reason\n+    REQUEST_DENIED = 403,\n+    // request record too large\n+    TOO_LARGE_RECORD = 413,\n+\n+    // 5xx: server failed to fulfill an apparently valid request.\n+\n+    // Generic error message, given when no more specific message is suitable.\n+    INTERNAL_SERVER_ERROR = 500,\n+    // Not implemented\n+    NOT_IMPLEMENTED = 501,\n+    // Already Closed Exception\n+    ALREADY_CLOSED = 502,\n+    // Service is currently unavailable (because it is overloaded or down for maintenance).\n+    SERVICE_UNAVAILABLE = 503,\n+    // Locking exception\n+    LOCKING_EXCEPTION = 504,\n+    // ZooKeeper Errors\n+    ZOOKEEPER_ERROR = 505,\n+    // Metadata exception\n+    METADATA_EXCEPTION = 506,\n+    // BK Transmit Error\n+    BK_TRANSMIT_ERROR = 507,\n+    // Flush timeout\n+    FLUSH_TIMEOUT = 508,\n+    // Log empty\n+    LOG_EMPTY = 509,\n+    // Log not found\n+    LOG_NOT_FOUND = 510,\n+    // Truncated Transactions\n+    TRUNCATED_TRANSACTION = 511,\n+    // End of Stream\n+    END_OF_STREAM = 512,\n+    // Transaction Id Out of Order\n+    TRANSACTION_OUT_OF_ORDER = 513,\n+    // Write exception\n+    WRITE_EXCEPTION = 514,\n+    // Stream Unavailable\n+    STREAM_UNAVAILABLE = 515,\n+    // Write cancelled exception\n+    WRITE_CANCELLED_EXCEPTION = 516,\n+    // over-capacity/backpressure\n+    OVER_CAPACITY = 517,\n+    // stream exists but is not ready (recovering etc.).\n+    // the difference between NOT_READY and UNAVAILABLE is that UNAVAILABLE\n+    // indicates the stream is no longer owned by the proxy and we should\n+    // redirect. NOT_READY indicates the stream exist at the proxy but isn't\n+    // ready for writes.\n+    STREAM_NOT_READY = 518,\n+    // Region Unavailable\n+    REGION_UNAVAILABLE = 519,\n+    // Invalid Enveloped Entry\n+    INVALID_ENVELOPED_ENTRY = 520,\n+    // Unsupported metadata version\n+    UNSUPPORTED_METADATA_VERSION = 521,\n+    // Log Already Exists\n+    LOG_EXISTS = 522,\n+    // Checksum failed on the request\n+    CHECKSUM_FAILED = 523,\n+    // Overcapacity: too many streams\n+    TOO_MANY_STREAMS = 524,\n+\n+    // 6xx: unexpected\n+    UNEXPECTED = 600,\n+    INTERRUPTED = 601,\n+    INVALID_STREAM_NAME = 602,\n+    ILLEGAL_STATE = 603,\n+\n+    // 10xx: reader exceptions\n+    RETRYABLE_READ = 1000,\n+    LOG_READ_ERROR = 1001,\n+    // Read cancelled exception\n+    READ_CANCELLED_EXCEPTION = 1002,\n+}\n+\n+// Response Header\n+struct ResponseHeader {\n+    1: required StatusCode code;\n+    2: optional string errMsg;\n+    3: optional string location;\n+}\n+\n+// Write Response\n+struct WriteResponse {\n+    1: required ResponseHeader header;\n+    2: optional string dlsn;\n+}\n+\n+// Bulk write response\n+struct BulkWriteResponse {\n+    1: required ResponseHeader header;\n+    2: optional list<WriteResponse> writeResponses;\n+}\n+\n+// Write Context\n+struct WriteContext {\n+    1: optional set<string> triedHosts;\n+    2: optional i64 crc32;\n+    3: optional bool isRecordSet;\n+}\n+\n+// HeartBeat Options\n+struct HeartbeatOptions {\n+    1: optional bool sendHeartBeatToReader;\n+}\n+\n+// Server Status\n+enum ServerStatus {\n+    // service is writing and accepting new streams\n+    WRITE_AND_ACCEPT    = 100,\n+    // service is only writing to old streams, not accepting new streams\n+    WRITE_ONLY          = 200,\n+    // service is shutting down, will not write\n+    DOWN                = 300,\n+}\n+\n+// Server Info\n+struct ServerInfo {\n+    1: optional map<string, string> ownerships;\n+    2: optional ServerStatus serverStatus;\n+}\n+\n+// Client Info\n+struct ClientInfo {\n+    1: optional string streamNameRegex;\n+    2: optional bool getOwnerships;\n+}\n+\n+service DistributedLogService {\n+\n+    ServerInfo handshake();\n+\n+    ServerInfo handshakeWithClientInfo(ClientInfo clientInfo);\n+\n+    WriteResponse heartbeat(string stream, WriteContext ctx);\n+\n+    WriteResponse heartbeatWithOptions(string stream, WriteContext ctx, HeartbeatOptions options);\n+\n+    WriteResponse write(string stream, binary data);\n+\n+    WriteResponse writeWithContext(string stream, binary data, WriteContext ctx);\n+\n+    BulkWriteResponse writeBulkWithContext(string stream, list<binary> data, WriteContext ctx);\n+\n+    WriteResponse truncate(string stream, string dlsn, WriteContext ctx);\n+\n+    WriteResponse release(string stream, WriteContext ctx);\n+\n+    WriteResponse create(string stream, WriteContext ctx);\n+\n+    WriteResponse delete(string stream, WriteContext ctx);\n+\n+    // Admin Methods\n+    void setAcceptNewStream(bool enabled);\n+}"},{"sha":"373994b875cbb5ba1e17cb375d2a58de23243b4d","filename":"src/test/java/com/twitter/distributedlog/TestDLSN.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,59 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class TestDLSN {\n+\n+    @Test(timeout = 60000)\n+    public void testDLSN() {\n+        DLSN dlsn = new DLSN(99L, 88L, 77L);\n+        String dlsnv0 = dlsn.serialize(DLSN.VERSION0);\n+        String dlsnv1 = dlsn.serialize(DLSN.VERSION1);\n+        String badDLSN = \"baddlsn\";\n+\n+        assertEquals(dlsn, DLSN.deserialize(dlsnv0));\n+        assertEquals(dlsn, DLSN.deserialize(dlsnv1));\n+        try {\n+            DLSN.deserialize(badDLSN);\n+            fail(\"Should fail on deserializing bad dlsn\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+\n+        assertEquals(dlsn, DLSN.deserialize0(dlsnv0));\n+        try {\n+            DLSN.deserialize0(dlsnv1);\n+            fail(\"Should fail on deserializing version one dlsn\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+        try {\n+            DLSN.deserialize0(badDLSN);\n+            fail(\"Should fail on deserializing bad dlsn\");\n+        } catch (IllegalArgumentException iae) {\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testSerializeDeserializeBytes() {\n+        DLSN dlsn = new DLSN(99L, 88L, 77L);\n+        byte[] data = dlsn.serializeBytes();\n+        assertEquals(dlsn, DLSN.deserializeBytes(data));\n+    }\n+}"},{"sha":"bc1e6273da90a05b095e1fa3b2a6b33405ff58e5","filename":"src/test/java/com/twitter/distributedlog/TestLogRecordSet.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7e7fcf6618417a0846baae4b6ee84778571a3556/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java?ref=7e7fcf6618417a0846baae4b6ee84778571a3556","patch":"@@ -0,0 +1,177 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.google.common.collect.Lists;\n+import com.twitter.distributedlog.LogRecordSet.Reader;\n+import com.twitter.distributedlog.LogRecordSet.Writer;\n+import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n+import com.twitter.distributedlog.io.CompressionCodec.Type;\n+import com.twitter.util.Await;\n+import com.twitter.util.Future;\n+import com.twitter.util.Promise;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n+import static com.twitter.distributedlog.LogRecord.*;\n+import static com.twitter.distributedlog.LogRecordSet.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test Case for {@link LogRecordSet}\n+ */\n+public class TestLogRecordSet {\n+\n+    @Test(timeout = 60000)\n+    public void testEmptyRecordSet() throws Exception {\n+        Writer writer = LogRecordSet.newWriter(1024, Type.NONE);\n+        assertEquals(\"zero user bytes\", HEADER_LEN, writer.getNumBytes());\n+        assertEquals(\"zero records\", 0, writer.getNumRecords());\n+\n+        ByteBuffer buffer = writer.getBuffer();\n+        assertEquals(\"zero user bytes\", HEADER_LEN, buffer.remaining());\n+\n+        byte[] data = new byte[buffer.remaining()];\n+        buffer.get(data);\n+\n+        LogRecordWithDLSN record = new LogRecordWithDLSN(\n+                new DLSN(1L, 0L, 0L),\n+                1L,\n+                data,\n+                1L);\n+        record.setRecordSet();\n+        Reader reader = LogRecordSet.of(record);\n+        assertNull(\"Empty record set should return null\",\n+                reader.nextRecord());\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testWriteTooLongRecord() throws Exception {\n+        Writer writer = LogRecordSet.newWriter(1024, Type.NONE);\n+        assertEquals(\"zero user bytes\", HEADER_LEN, writer.getNumBytes());\n+        assertEquals(\"zero records\", 0, writer.getNumRecords());\n+\n+        ByteBuffer dataBuf = ByteBuffer.allocate(MAX_LOGRECORD_SIZE + 1);\n+        try {\n+            writer.writeRecord(dataBuf, new Promise<DLSN>());\n+            fail(\"Should fail on writing large record\");\n+        } catch (LogRecordTooLongException lrtle) {\n+            // expected\n+        }\n+        assertEquals(\"zero user bytes\", HEADER_LEN, writer.getNumBytes());\n+        assertEquals(\"zero records\", 0, writer.getNumRecords());\n+        ByteBuffer buffer = writer.getBuffer();\n+        assertEquals(\"zero user bytes\", HEADER_LEN, buffer.remaining());\n+\n+        byte[] data = new byte[buffer.remaining()];\n+        buffer.get(data);\n+\n+        LogRecordWithDLSN record = new LogRecordWithDLSN(\n+                new DLSN(1L, 0L, 0L),\n+                1L,\n+                data,\n+                1L);\n+        record.setRecordSet();\n+        Reader reader = LogRecordSet.of(record);\n+        assertNull(\"Empty record set should return null\",\n+                reader.nextRecord());\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testWriteRecordsNoneCompressed() throws Exception {\n+        testWriteRecords(Type.NONE);\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testWriteRecordsLZ4Compressed() throws Exception {\n+        testWriteRecords(Type.LZ4);\n+    }\n+\n+    void testWriteRecords(Type codec) throws Exception {\n+        Writer writer = LogRecordSet.newWriter(1024, codec);\n+        assertEquals(\"zero user bytes\", HEADER_LEN, writer.getNumBytes());\n+        assertEquals(\"zero records\", 0, writer.getNumRecords());\n+\n+        List<Future<DLSN>> writePromiseList = Lists.newArrayList();\n+        /// write first 5 records\n+        for (int i = 0; i < 5; i++) {\n+            ByteBuffer record = ByteBuffer.wrap((\"record-\" + i).getBytes(UTF_8));\n+            Promise<DLSN> writePromise = new Promise<DLSN>();\n+            writer.writeRecord(record, writePromise);\n+            writePromiseList.add(writePromise);\n+            assertEquals((i + 1) + \" records\", (i + 1), writer.getNumRecords());\n+        }\n+        ByteBuffer dataBuf = ByteBuffer.allocate(MAX_LOGRECORD_SIZE + 1);\n+        try {\n+            writer.writeRecord(dataBuf, new Promise<DLSN>());\n+            fail(\"Should fail on writing large record\");\n+        } catch (LogRecordTooLongException lrtle) {\n+            // expected\n+        }\n+        assertEquals(\"5 records\", 5, writer.getNumRecords());\n+\n+        /// write another 5 records\n+        for (int i = 0; i < 5; i++) {\n+            ByteBuffer record = ByteBuffer.wrap((\"record-\" + (i + 5)).getBytes(UTF_8));\n+            Promise<DLSN> writePromise = new Promise<DLSN>();\n+            writer.writeRecord(record, writePromise);\n+            writePromiseList.add(writePromise);\n+            assertEquals((i + 6) + \" records\", (i + 6), writer.getNumRecords());\n+        }\n+\n+        ByteBuffer buffer = writer.getBuffer();\n+        assertEquals(\"10 records\", 10, writer.getNumRecords());\n+\n+        // Test transmit complete\n+        writer.completeTransmit(1L, 1L, 10L);\n+        List<DLSN> writeResults = Await.result(Future.collect(writePromiseList));\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(new DLSN(1L, 1L, 10L + i), writeResults.get(i));\n+        }\n+\n+        // Test reading from buffer\n+        byte[] data = new byte[buffer.remaining()];\n+        buffer.get(data);\n+\n+        LogRecordWithDLSN record = new LogRecordWithDLSN(\n+                new DLSN(1L, 1L, 10L),\n+                99L,\n+                data,\n+                999L);\n+        record.setPositionWithinLogSegment(888);\n+        record.setRecordSet();\n+        Reader reader = LogRecordSet.of(record);\n+        LogRecordWithDLSN readRecord = reader.nextRecord();\n+        int numReads = 0;\n+        while (null != readRecord) {\n+            assertEquals(new DLSN(1L, 1L, 10L + numReads), readRecord.getDlsn());\n+            assertEquals(99L, readRecord.getTransactionId());\n+            assertEquals(888 + numReads, readRecord.getPositionWithinLogSegment());\n+            assertEquals(999L, readRecord.getStartSequenceIdOfCurrentSegment());\n+            assertEquals(999L + 888 + numReads - 1, readRecord.getSequenceId());\n+            // read next\n+            ++numReads;\n+            readRecord = reader.nextRecord();\n+        }\n+        assertEquals(10, numReads);\n+    }\n+\n+}"}]}