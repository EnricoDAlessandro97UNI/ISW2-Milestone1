{"sha":"e5939ed587d81212fb032a37b2b83401359fa7fc","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmU1OTM5ZWQ1ODdkODEyMTJmYjAzMmEzN2IyYjgzNDAxMzU5ZmE3ZmM=","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2016-04-05T16:47:07Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-05T16:47:07Z"},"message":"BOOKKEEPER-896: VM-local transport\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>, Matteo Merli <mmerli@apache.org>\n\nCloses #21 from eolivelli/BOOKKEEPER-896","tree":{"sha":"6c8d8219ddb0f1a366246497acc4800ba7c553a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/6c8d8219ddb0f1a366246497acc4800ba7c553a1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/e5939ed587d81212fb032a37b2b83401359fa7fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e5939ed587d81212fb032a37b2b83401359fa7fc","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e5939ed587d81212fb032a37b2b83401359fa7fc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e5939ed587d81212fb032a37b2b83401359fa7fc/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"d607b366ba493617408888a768a99ee3f3ffb976","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d607b366ba493617408888a768a99ee3f3ffb976","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d607b366ba493617408888a768a99ee3f3ffb976"}],"stats":{"total":196,"additions":189,"deletions":7},"files":[{"sha":"686104d64d9f384fe19aaf83ca1a70ff27dc9efc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -110,6 +110,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     // Whether the bookie should use its hostname or ipaddress for the\n     // registration.\n     protected final static String USE_HOST_NAME_AS_BOOKIE_ID = \"useHostNameAsBookieID\";\n+    protected final static String ENABLE_LOCAL_TRANSPORT = \"enableLocalTransport\";\n \n     protected final static String SORTED_LEDGER_STORAGE_ENABLED = \"sortedLedgerStorageEnabled\";\n     protected final static String SKIP_LIST_SIZE_LIMIT = \"skipListSizeLimit\";\n@@ -1524,6 +1525,29 @@ public ServerConfiguration setUseHostNameAsBookieID(boolean useHostName) {\n         return this;\n     }\n \n+    /**\n+     * Get hwhether to use listen for local JVM clients. Defaults to false.\n+     *\n+     * @return true, then bookie will be listen for local JVM clients\n+     */\n+    public boolean isEnableLocalTransport() {\n+        return getBoolean(ENABLE_LOCAL_TRANSPORT, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to listen for BookKeeper clients executed on the local JVM\n+     *\n+     * @see #getEnableLocalTransport\n+     * @param enableLocalTransport\n+     *            whether to use listen for local JVM clients\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setEnableLocalTransport(boolean enableLocalTransport) {\n+        setProperty(ENABLE_LOCAL_TRANSPORT, enableLocalTransport);\n+        return this;\n+    }\n+\n+\n     /**\n      * Get the stats provider used by bookie.\n      *"},{"sha":"eb0f6f3beb585f8316067f0abfef3b0bb94fdace","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/BookieSocketAddress.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fnet%2FBookieSocketAddress.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fnet%2FBookieSocketAddress.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fnet%2FBookieSocketAddress.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -24,6 +24,7 @@\n import java.net.UnknownHostException;\n \n import static org.apache.bookkeeper.util.BookKeeperConstants.COLON;\n+import org.jboss.netty.channel.local.LocalAddress;\n \n /**\n  * This is a data wrapper class that is an InetSocketAddress, it would use the hostname\n@@ -75,6 +76,13 @@ public InetSocketAddress getSocketAddress() {\n         return socketAddress;\n     }\n \n+    /**\n+     * Maps the socketAddress to a \"local\" address\n+     */\n+    public LocalAddress getLocalAddress() {\n+        return new LocalAddress(socketAddress.toString());\n+    }\n+\n     // Return the String \"serialized\" version of this object.\n     @Override\n     public String toString() {"},{"sha":"202a5e5a577bc7a240a3b87999e8c761c594e2f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":30,"deletions":3,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -53,6 +53,9 @@\n import com.google.protobuf.ExtensionRegistry;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;\n+import org.jboss.netty.channel.local.LocalAddress;\n \n /**\n  * Netty server for serving bookie requests\n@@ -63,11 +66,13 @@ class BookieNettyServer {\n     final static int maxMessageSize = 0xfffff;\n     final ServerConfiguration conf;\n     final ChannelFactory serverChannelFactory;\n+    final ChannelFactory jvmServerChannelFactory;\n     final RequestProcessor requestProcessor;\n     final ChannelGroup allChannels = new CleanupChannelGroup();\n     final AtomicBoolean isRunning = new AtomicBoolean(false);\n     Object suspensionLock = new Object();\n     boolean suspended = false;\n+    final BookieSocketAddress bookieAddress;\n \n     final BookieAuthProvider.Factory authProviderFactory;\n     final BookieProtoEncoding.ResponseEncoder responseEncoder;\n@@ -89,14 +94,20 @@ class BookieNettyServer {\n         serverChannelFactory = new NioServerSocketChannelFactory(\n                 Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-boss-%d\").build()),\n                 Executors.newCachedThreadPool(tfb.setNameFormat(base + \"-worker-%d\").build()));\n+        if (conf.isEnableLocalTransport()) {\n+            jvmServerChannelFactory = new DefaultLocalServerChannelFactory();\n+        } else {\n+            jvmServerChannelFactory = null;\n+        }\n+        bookieAddress = Bookie.getBookieAddress(conf);\n         InetSocketAddress bindAddress;\n         if (conf.getListeningInterface() == null) {\n             // listen on all interfaces\n             bindAddress = new InetSocketAddress(conf.getBookiePort());\n         } else {\n-            bindAddress = Bookie.getBookieAddress(conf).getSocketAddress();\n+            bindAddress = bookieAddress.getSocketAddress();\n         }\n-        listenOn(bindAddress);\n+        listenOn(bindAddress, bookieAddress);\n     }\n \n     boolean isRunning() {\n@@ -120,14 +131,24 @@ void resumeProcessing() {\n         }\n     }\n \n-    private void listenOn(InetSocketAddress address) {\n+    private void listenOn(InetSocketAddress address, BookieSocketAddress bookieAddress) {\n         ServerBootstrap bootstrap = new ServerBootstrap(serverChannelFactory);\n         bootstrap.setPipelineFactory(new BookiePipelineFactory());\n         bootstrap.setOption(\"child.tcpNoDelay\", conf.getServerTcpNoDelay());\n         bootstrap.setOption(\"child.soLinger\", 2);\n \n         Channel listen = bootstrap.bind(address);\n         allChannels.add(listen);\n+\n+        if (conf.isEnableLocalTransport()) {\n+            ServerBootstrap jvmbootstrap = new ServerBootstrap(jvmServerChannelFactory);\n+            jvmbootstrap.setPipelineFactory(new BookiePipelineFactory());\n+\n+            // use the same address 'name', so clients can find local Bookie still discovering them using ZK\n+            Channel jvmlisten = jvmbootstrap.bind(bookieAddress.getLocalAddress());\n+            allChannels.add(jvmlisten);\n+            LocalBookiesRegistry.registerLocalBookieAddress(bookieAddress);\n+        }\n     }\n \n     void start() {\n@@ -136,9 +157,15 @@ void start() {\n \n     void shutdown() {\n         LOG.info(\"Shutting down BookieNettyServer\");\n+        if (conf.isEnableLocalTransport()) {\n+            LocalBookiesRegistry.unregisterLocalBookieAddress(bookieAddress);\n+        }\n         isRunning.set(false);\n         allChannels.close().awaitUninterruptibly();\n         serverChannelFactory.releaseExternalResources();\n+        if (conf.isEnableLocalTransport()) {\n+            jvmServerChannelFactory.releaseExternalResources();\n+        }\n     }\n \n     private class BookiePipelineFactory implements ChannelPipelineFactory {"},{"sha":"f123aa65528c94661151508d467ba7c21a1dc25c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/LocalBookiesRegistry.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FLocalBookiesRegistry.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -0,0 +1,44 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+\n+/**\n+ * Local registry for embedded Bookies\n+ */\n+class LocalBookiesRegistry {\n+    \n+    private final static ConcurrentHashMap<BookieSocketAddress,Boolean> localBookiesRegistry\n+            = new ConcurrentHashMap<>();\n+    \n+    static void registerLocalBookieAddress(BookieSocketAddress address) {        \n+        localBookiesRegistry.put(address,Boolean.TRUE);\n+    }\n+    static void unregisterLocalBookieAddress(BookieSocketAddress address) {\n+        localBookiesRegistry.remove(address);\n+    }\n+    static boolean isLocalBookie(BookieSocketAddress address) {        \n+        return localBookiesRegistry.containsKey(address);\n+    }\n+    \n+}"},{"sha":"62f55ea59119d4dca7e19cca4fd677607cd211a9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -66,6 +66,9 @@\n import org.jboss.netty.channel.ExceptionEvent;\n import org.jboss.netty.channel.MessageEvent;\n import org.jboss.netty.channel.SimpleChannelHandler;\n+import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;\n+import org.jboss.netty.channel.local.LocalAddress;\n+import org.jboss.netty.channel.local.LocalClientChannelFactory;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.handler.codec.frame.CorruptedFrameException;\n import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;\n@@ -81,6 +84,8 @@\n import com.google.common.collect.Sets;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.ExtensionRegistry;\n+import java.net.SocketAddress;\n+import org.jboss.netty.channel.ChannelFactory;\n \n /**\n  * This class manages all details of connection to a particular bookie. It also\n@@ -105,7 +110,7 @@ public class PerChannelBookieClient extends SimpleChannelHandler implements Chan\n     public static final AtomicLong txnIdGenerator = new AtomicLong(0);\n \n     final BookieSocketAddress addr;\n-    final ClientSocketChannelFactory channelFactory;\n+    final ChannelFactory channelFactory;\n     final OrderedSafeExecutor executor;\n     final HashedWheelTimer requestTimer;\n     final int addEntryTimeout;\n@@ -161,7 +166,11 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n         this.conf = conf;\n         this.addr = addr;\n         this.executor = executor;\n-        this.channelFactory = channelFactory;\n+        if (LocalBookiesRegistry.isLocalBookie(addr)){\n+            this.channelFactory = new DefaultLocalClientChannelFactory();\n+        } else {\n+            this.channelFactory = channelFactory;\n+        }\n         this.state = ConnectionState.DISCONNECTED;\n         this.requestTimer = requestTimer;\n         this.addEntryTimeout = conf.getAddEntryTimeout();\n@@ -212,8 +221,11 @@ private void connect() {\n         bootstrap.setOption(\"child.receiveBufferSize\", conf.getClientReceiveBufferSize());\n         bootstrap.setOption(\"writeBufferLowWaterMark\", conf.getClientWriteBufferLowWaterMark());\n         bootstrap.setOption(\"writeBufferHighWaterMark\", conf.getClientWriteBufferHighWaterMark());\n-\n-        ChannelFuture future = bootstrap.connect(addr.getSocketAddress());\n+        SocketAddress bookieAddr = addr.getSocketAddress();        \n+        if (channelFactory instanceof LocalClientChannelFactory) {\n+            bookieAddr = addr.getLocalAddress();\n+        }\n+        ChannelFuture future = bootstrap.connect(bookieAddr);\n         future.addListener(new ChannelFutureListener() {\n             @Override\n             public void operationComplete(ChannelFuture future) throws Exception {"},{"sha":"42894766cce4b8e04e8df0dcd1ff4d0320548ff7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LocalBookKeeperTest.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e5939ed587d81212fb032a37b2b83401359fa7fc/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java?ref=e5939ed587d81212fb032a37b2b83401359fa7fc","patch":"@@ -0,0 +1,67 @@\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+\n+package org.apache.bookkeeper.client;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.test.BaseTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * Tests of the main BookKeeper client using networkless comunication\n+ */\n+public class LocalBookKeeperTest extends BaseTestCase {\n+    \n+    protected ServerConfiguration newServerConfiguration() throws Exception {       \n+        return super\n+                .newServerConfiguration()\n+                .setEnableLocalTransport(true);\n+    }\n+        \n+    DigestType digestType;\n+    \n+    public LocalBookKeeperTest(DigestType digestType) {\n+        super(4);            \n+        this.digestType=digestType;\n+    }\n+\n+    @Test\n+    public void testUseLocalBookie() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+                \n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes());\n+        h.addEntry(\"test\".getBytes());\n+        h.close();\n+        bkc.close();\n+    }\n+\n+}"}]}