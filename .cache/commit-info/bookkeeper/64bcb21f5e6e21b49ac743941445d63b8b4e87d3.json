{"sha":"64bcb21f5e6e21b49ac743941445d63b8b4e87d3","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjY0YmNiMjFmNWU2ZTIxYjQ5YWM3NDM5NDE0NDVkNjNiOGI0ZTg3ZDM=","commit":{"author":{"name":"Brennon York","email":"brennon.york@capitalone.com","date":"2016-12-20T06:22:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-20T06:22:37Z"},"message":"DL-123: Every tests should have timeout\n\n* used a simple bash script to find any tests without a timeout\n\nHere is the below bash executed from the root directory. This could be expanded to take in more than one line above the initial `grep` although, for more, it only reduces the false positive rate. After this patch there are only 4 false positives (tests where the text immediately above is not `Test(timeout = ...)`).\n```\ngrep -r \"public void test\" -B 1 * | awk '($NR+1) % 3 !=0 {printf $0; printf \" \"} NR % 3 == 0 {print \" \"}' | grep -v \"timeout\"\n```\n\nAuthor: Brennon York <brennon.york@capitalone.com>\n\nReviewers: Leigh Stewart <lstewart@apache.org>\n\nCloses #75 from brennonyork/DL-123","tree":{"sha":"b8bf9689a7b29b44480e030bc1d42125e6269bbc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/b8bf9689a7b29b44480e030bc1d42125e6269bbc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/64bcb21f5e6e21b49ac743941445d63b8b4e87d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/64bcb21f5e6e21b49ac743941445d63b8b4e87d3","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/64bcb21f5e6e21b49ac743941445d63b8b4e87d3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b05fe3a171bc8aba245ef3e0b3cccd785691387","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/8b05fe3a171bc8aba245ef3e0b3cccd785691387","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/8b05fe3a171bc8aba245ef3e0b3cccd785691387"}],"stats":{"total":52,"additions":26,"deletions":26},"files":[{"sha":"3cdd676b56b5aa86351a9ee07e41ded6d19dba42","filename":"src/test/java/com/twitter/distributedlog/TestInterleavedReaders.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestInterleavedReaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestInterleavedReaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestInterleavedReaders.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -337,7 +337,7 @@ public void testInterleavedReadersWithRollingEdgeUnPartitioned() throws Exceptio\n         dlmreader1.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testFactorySharedClients() throws Exception {\n         String name = \"distrlog-factorysharedclients\";\n         testFactory(name, true);"},{"sha":"70bfeea2d0b2149754f478c5ec1c97f4292c950c","filename":"src/test/java/com/twitter/distributedlog/TestTruncate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -111,7 +111,7 @@ public void testPurgeLogs() throws Exception {\n         distributedLogManager.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testTruncation() throws Exception {\n         String name = \"distrlog-truncation\";\n \n@@ -143,7 +143,7 @@ public void testTruncation() throws Exception {\n         pair.getLeft().close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testExplicitTruncation() throws Exception {\n         String name = \"distrlog-truncation-explicit\";\n "},{"sha":"495691334ef2f17a6f90fbaf46cc30d7c70a04cb","filename":"src/test/java/com/twitter/distributedlog/TestWriteLimiter.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestWriteLimiter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestWriteLimiter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestWriteLimiter.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -43,7 +43,7 @@ SimplePermitLimiter createPermitLimiter(boolean darkmode, int permits, Feature f\n         return new SimplePermitLimiter(darkmode, permits, new NullStatsLogger(), false, feature);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testGlobalOnly() throws Exception {\n         SimplePermitLimiter streamLimiter = createPermitLimiter(false, Integer.MAX_VALUE);\n         SimplePermitLimiter globalLimiter = createPermitLimiter(false, 1);\n@@ -59,7 +59,7 @@ public void testGlobalOnly() throws Exception {\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testStreamOnly() throws Exception {\n         SimplePermitLimiter streamLimiter = createPermitLimiter(false, 1);\n         SimplePermitLimiter globalLimiter = createPermitLimiter(false, Integer.MAX_VALUE);\n@@ -73,7 +73,7 @@ public void testStreamOnly() throws Exception {\n         assertPermits(streamLimiter, 1, globalLimiter, 1);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testDarkmode() throws Exception {\n         SimplePermitLimiter streamLimiter = createPermitLimiter(true, Integer.MAX_VALUE);\n         SimplePermitLimiter globalLimiter = createPermitLimiter(true, 1);\n@@ -83,7 +83,7 @@ public void testDarkmode() throws Exception {\n         assertPermits(streamLimiter, 2, globalLimiter, 2);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testDarkmodeWithDisabledFeature() throws Exception {\n         SettableFeature feature = new SettableFeature(\"test\", 10000);\n         SimplePermitLimiter streamLimiter = createPermitLimiter(true, 1, feature);\n@@ -97,7 +97,7 @@ public void testDarkmodeWithDisabledFeature() throws Exception {\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testDisabledFeature() throws Exception {\n         // Disable darkmode, but should still ignore limits because of the feature.\n         SettableFeature feature = new SettableFeature(\"test\", 10000);\n@@ -112,7 +112,7 @@ public void testDisabledFeature() throws Exception {\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testSetDisableFeatureAfterAcquireAndBeforeRelease() throws Exception {\n         SettableFeature feature = new SettableFeature(\"test\", 0);\n         SimplePermitLimiter streamLimiter = createPermitLimiter(false, 2, feature);\n@@ -127,7 +127,7 @@ public void testSetDisableFeatureAfterAcquireAndBeforeRelease() throws Exception\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testUnsetDisableFeatureAfterPermitsExceeded() throws Exception {\n         SettableFeature feature = new SettableFeature(\"test\", 10000);\n         SimplePermitLimiter streamLimiter = createPermitLimiter(false, 1, feature);\n@@ -153,7 +153,7 @@ public void testUnsetDisableFeatureAfterPermitsExceeded() throws Exception {\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testUnsetDisableFeatureBeforePermitsExceeded() throws Exception {\n         SettableFeature feature = new SettableFeature(\"test\", 0);\n         SimplePermitLimiter streamLimiter = createPermitLimiter(false, 1, feature);\n@@ -171,7 +171,7 @@ public void testUnsetDisableFeatureBeforePermitsExceeded() throws Exception {\n         assertPermits(streamLimiter, 2, globalLimiter, 2);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testDarkmodeGlobalUnderStreamOver() throws Exception {\n         SimplePermitLimiter streamLimiter = createPermitLimiter(true, 1);\n         SimplePermitLimiter globalLimiter = createPermitLimiter(true, 2);\n@@ -184,7 +184,7 @@ public void testDarkmodeGlobalUnderStreamOver() throws Exception {\n         assertPermits(streamLimiter, 0, globalLimiter, 0);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testDarkmodeGlobalOverStreamUnder() throws Exception {\n         SimplePermitLimiter streamLimiter = createPermitLimiter(true, 2);\n         SimplePermitLimiter globalLimiter = createPermitLimiter(true, 1);"},{"sha":"269625fd7d2217f0209adf1a3ed5282617e46bc6","filename":"src/test/java/com/twitter/distributedlog/bk/TestLedgerAllocatorPool.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -258,7 +258,7 @@ public void testAllocateMultipleLedgers() throws Exception {\n         assertEquals(numLedgers, allocatedLedgers.size());\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testConcurrentAllocation() throws Exception {\n         final int numAllocators = 5;\n         String allocationPath = \"/concurrentAllocation\";"},{"sha":"33f10e4f2622fda0fed7e892f29b30192702f5d4","filename":"src/test/java/com/twitter/distributedlog/config/TestConcurrentBaseConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConcurrentBaseConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConcurrentBaseConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConcurrentBaseConfiguration.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -26,7 +26,7 @@\n public class TestConcurrentBaseConfiguration {\n     static final Logger LOG = LoggerFactory.getLogger(TestConcurrentBaseConfiguration.class);\n \n-    @Test\n+    @Test(timeout = 20000)\n     public void testBasicOperations() throws Exception {\n         ConcurrentBaseConfiguration conf = new ConcurrentBaseConfiguration();\n         conf.setProperty(\"prop1\", \"1\");"},{"sha":"52b148572861bf93b03ca82869e2c9824a0c8615","filename":"src/test/java/com/twitter/distributedlog/impl/TestZKLogSegmentFilters.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentFilters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentFilters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentFilters.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -37,7 +37,7 @@ public class TestZKLogSegmentFilters {\n \n     static final Logger LOG = LoggerFactory.getLogger(TestZKLogSegmentFilters.class);\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testWriteFilter() {\n         Set<String> expectedFilteredSegments = new HashSet<String>();\n         List<String> segments = new ArrayList<String>();"},{"sha":"589539b7321733653bdcec2deb591b9e9a2dec52","filename":"src/test/java/com/twitter/distributedlog/limiter/TestRequestLimiter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FTestRequestLimiter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FTestRequestLimiter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FTestRequestLimiter.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -39,7 +39,7 @@ public int getCount() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testChainedRequestLimiter() throws Exception {\n         MockRequestLimiter limiter1 = new MockRequestLimiter();\n         MockRequestLimiter limiter2 = new MockRequestLimiter();"},{"sha":"82fbc69afcd093afe61605e957778fdc0f0e5aed","filename":"src/test/java/com/twitter/distributedlog/metadata/TestLogSegmentMetadataStoreUpdater.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -225,7 +225,7 @@ public void testUpdateLastDLSN() throws Exception {\n         assertEquals(inprogressLogSegment, readInprogressLogSegment);\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testChangeTruncationStatus() throws Exception {\n         String ledgerPath = \"/ledgers2\";\n         zkc.get().create(ledgerPath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"},{"sha":"706142374f80ff582becc554b1f5869552eb175d","filename":"src/test/java/com/twitter/distributedlog/util/TestConfUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestConfUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestConfUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestConfUtils.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -25,7 +25,7 @@\n \n public class TestConfUtils {\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testLoadConfiguration() {\n         Configuration conf1 = new CompositeConfiguration();\n         conf1.setProperty(\"key1\", \"value1\");"},{"sha":"8899c0ec795ada05bb3d94035b95eb03da305692","filename":"src/test/java/com/twitter/distributedlog/util/TestPermitManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestPermitManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestPermitManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestPermitManager.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -29,7 +29,7 @@\n \n public class TestPermitManager {\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testUnlimitedPermitManager() {\n         PermitManager pm = PermitManager.UNLIMITED_PERMIT_MANAGER;\n         List<PermitManager.Permit> permits = new ArrayList<PermitManager.Permit>();\n@@ -53,7 +53,7 @@ public void testUnlimitedPermitManager() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testLimitedPermitManager() {\n         ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n         PermitManager pm = new LimitedPermitManager(1, 0, TimeUnit.SECONDS, executorService);"},{"sha":"bca3b287b4126fd7b139dc235d45aabdf12b026b","filename":"src/test/java/com/twitter/distributedlog/util/TestSafeQueueingFuturePool.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestSafeQueueingFuturePool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/64bcb21f5e6e21b49ac743941445d63b8b4e87d3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestSafeQueueingFuturePool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestSafeQueueingFuturePool.java?ref=64bcb21f5e6e21b49ac743941445d63b8b4e87d3","patch":"@@ -73,7 +73,7 @@ public void shutdown() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testSimpleSuccess() throws Exception {\n         TestFuturePool<Void> pool = new TestFuturePool<Void>();\n         final AtomicBoolean result = new AtomicBoolean(false);\n@@ -88,7 +88,7 @@ public Void apply() {\n         pool.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testSimpleFailure() throws Exception {\n         TestFuturePool<Void> pool = new TestFuturePool<Void>();\n         Future<Void> future = pool.wrapper.apply(new Function0<Void>() {\n@@ -104,7 +104,7 @@ public Void apply() {\n         pool.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testFailedDueToClosed() throws Exception {\n         TestFuturePool<Void> pool = new TestFuturePool<Void>();\n         pool.wrapper.close();\n@@ -121,7 +121,7 @@ public Void apply() {\n         pool.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testRejectedFailure() throws Exception {\n         TestFuturePool<Void> pool = new TestFuturePool<Void>();\n         final AtomicBoolean result = new AtomicBoolean(false);\n@@ -146,7 +146,7 @@ public Void apply() {\n         pool.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testRejectedBackupFailure() throws Exception {\n         TestFuturePool<Void> pool = new TestFuturePool<Void>();\n         final AtomicBoolean result = new AtomicBoolean(false);"}]}