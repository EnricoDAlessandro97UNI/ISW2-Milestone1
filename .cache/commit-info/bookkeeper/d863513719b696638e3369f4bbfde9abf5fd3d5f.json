{"sha":"d863513719b696638e3369f4bbfde9abf5fd3d5f","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmQ4NjM1MTM3MTliNjk2NjM4ZTMzNjlmNGJiZmRlOWFiZjVmZDNkNWY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-15T19:25:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-05-15T19:25:18Z"},"message":"BOOKKEEPER-1067: Add Prometheus stats provider\n\nPrometheus (https://prometheus.io) is a metrics collection system, similar but much more flexible than graphite.\n\nIt would be good to expose the Bookie and BookKeeper client stats directly so that a Prometheus instance can collect them (and also check the process status and add alerts).\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nCloses #154 from merlimat/prometheus","tree":{"sha":"e5cec77b5d4bb9a76fb9d0dc2d79d9fec34bb57b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/e5cec77b5d4bb9a76fb9d0dc2d79d9fec34bb57b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/d863513719b696638e3369f4bbfde9abf5fd3d5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d863513719b696638e3369f4bbfde9abf5fd3d5f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d863513719b696638e3369f4bbfde9abf5fd3d5f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d863513719b696638e3369f4bbfde9abf5fd3d5f/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"74f795136c1fff3badb29fc982d0cc2d43096b45","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/74f795136c1fff3badb29fc982d0cc2d43096b45","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/74f795136c1fff3badb29fc982d0cc2d43096b45"}],"stats":{"total":385,"additions":373,"deletions":12},"files":[{"sha":"d849fb242f9627a6dbe9b1dd29a48d16bb584432","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-benchmark%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-benchmark%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fpom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -61,12 +61,12 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n-      <version>1.6.4</version>\n+      <version>${slf4j.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-log4j12</artifactId>\n-      <version>1.6.4</version>\n+      <version>${slf4j.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>"},{"sha":"e5de8420ba1941389ba95a6b396b98f236e66904","filename":"bookkeeper-server/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-server%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-server%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fpom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -56,12 +56,12 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n-      <version>1.7.25</version>\n+      <version>${slf4j.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-log4j12</artifactId>\n-      <version>1.7.25</version>\n+      <version>${slf4j.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>"},{"sha":"d6c58b5af5a844cb3d9c6216bc3aeb60fd837a26","filename":"bookkeeper-stats-providers/pom.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fpom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -25,15 +25,14 @@\n     <version>4.5.0-SNAPSHOT</version>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.5.0-SNAPSHOT</version>\n   <artifactId>bookkeeper-stats-providers</artifactId>\n   <packaging>pom</packaging>\n   <name>bookkeeper-stats-providers</name>\n   <modules>\n     <module>twitter-science-provider</module>\n     <module>twitter-ostrich-provider</module>\n     <module>codahale-metrics-provider</module>\n+    <module>prometheus-metrics-provider</module>\n   </modules>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>"},{"sha":"dc13d18482077914c24aec7d6fc3b88fa0d97069","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/pom.xml","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.5.0-SNAPSHOT</version>\n+    <relativePath>../..</relativePath>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>prometheus-metrics-provider</artifactId>\n+  <name>Stats provider for Prometheus</name>\n+\n+  <properties>\n+    <prometheus.version>0.0.21</prometheus.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient</artifactId>\n+      <version>${prometheus.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_hotspot</artifactId>\n+      <version>${prometheus.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.prometheus</groupId>\n+      <artifactId>simpleclient_servlet</artifactId>\n+      <version>${prometheus.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-servlet</artifactId>\n+      <version>9.4.5.v20170502</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>${guava.version}</version>\n+    </dependency>\n+\n+  </dependencies>\n+</project>"},{"sha":"5535a3fa18fcbf88e4187f4cf543a23b21a34b29","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusCounter.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Gauge;\n+\n+public class PrometheusCounter implements Counter {\n+\n+    private final Gauge gauge;\n+\n+    public PrometheusCounter(CollectorRegistry registry, String name) {\n+        this.gauge = Gauge.build().name(Collector.sanitizeMetricName(name)).help(\"-\").create().register(registry);\n+    }\n+\n+    @Override\n+    public void clear() {\n+        gauge.clear();\n+    }\n+\n+    @Override\n+    public void inc() {\n+        gauge.inc();\n+    }\n+\n+    @Override\n+    public void dec() {\n+        gauge.dec();\n+    }\n+\n+    @Override\n+    public void add(long delta) {\n+        gauge.inc(delta);\n+    }\n+\n+    @Override\n+    public Long get() {\n+        return (long) gauge.get();\n+    }\n+\n+}"},{"sha":"37984de414b4b2951dfaba4f167255a0d2409608","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusMetricsProvider.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -0,0 +1,83 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import java.net.InetSocketAddress;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.exporter.MetricsServlet;\n+import io.prometheus.client.hotspot.GarbageCollectorExports;\n+import io.prometheus.client.hotspot.MemoryPoolsExports;\n+import io.prometheus.client.hotspot.StandardExports;\n+import io.prometheus.client.hotspot.ThreadExports;\n+\n+public class PrometheusMetricsProvider implements StatsProvider {\n+\n+    private final CollectorRegistry registry = new CollectorRegistry();\n+    private Server server;\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        int httpPort = conf.getInt(\"prometheusStatsHttpPort\", 8000);\n+        InetSocketAddress httpEndpoint = InetSocketAddress.createUnresolved(\"0.0.0.0\", httpPort);\n+        this.server = new Server(httpEndpoint);\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        server.setHandler(context);\n+\n+        context.addServlet(new ServletHolder(new MetricsServlet(registry)), \"/metrics\");\n+\n+        try {\n+            server.start();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        log.info(\"Started Prometheus stats endpoint at {}\", httpEndpoint);\n+\n+        // Include standard JVM stats\n+        new StandardExports().register(registry);\n+        new MemoryPoolsExports().register(registry);\n+        new GarbageCollectorExports().register(registry);\n+        new ThreadExports().register(registry);\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (server != null) {\n+            try {\n+                server.stop();\n+            } catch (Exception e) {\n+                log.warn(\"Failed to shutdown Jetty server\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String scope) {\n+        return new PrometheusStatsLogger(registry, scope);\n+    }\n+\n+    private static final Logger log = LoggerFactory.getLogger(PrometheusMetricsProvider.class);\n+}"},{"sha":"e10160c80c6d0993d067ecd1fec7576b57a88d9c","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusOpStatsLogger.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import io.prometheus.client.CollectorRegistry;\n+import io.prometheus.client.Summary;\n+\n+public class PrometheusOpStatsLogger implements OpStatsLogger {\n+\n+    private final Summary summary;\n+    private final Summary.Child success;\n+    private final Summary.Child fail;\n+\n+    public PrometheusOpStatsLogger(CollectorRegistry registry, String name) {\n+        this.summary = Summary.build().name(name).help(\"-\") //\n+                .quantile(0.50, 0.01) //\n+                .quantile(0.75, 0.01) //\n+                .quantile(0.95, 0.01) //\n+                .quantile(0.99, 0.01) //\n+                .quantile(0.999, 0.01) //\n+                .quantile(0.9999, 0.01) //\n+                .quantile(1.0, 0.01) //\n+                .maxAgeSeconds(60) //\n+                .labelNames(\"success\") //\n+                .create().register(registry);\n+\n+        this.success = summary.labels(\"true\");\n+        this.fail = summary.labels(\"false\");\n+    }\n+\n+    @Override\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+        // Collect latency in millis, truncating anything below micros\n+        success.observe(unit.toMicros(eventLatency) / 1000.0);\n+    }\n+\n+    @Override\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+        fail.observe(unit.toMicros(eventLatency) / 1000.0);\n+    }\n+\n+    @Override\n+    public void registerSuccessfulValue(long value) {\n+        success.observe(value);\n+    }\n+\n+    @Override\n+    public void registerFailedValue(long value) {\n+        fail.observe(value);\n+    }\n+\n+    @Override\n+    public OpStatsData toOpStatsData() {\n+        // Not relevant as we don't use JMX here\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        summary.clear();\n+    }\n+\n+}"},{"sha":"ab15639f7664e478df9e0347c133c9d6b534068e","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import com.google.common.base.Joiner;\n+\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.CollectorRegistry;\n+\n+public class PrometheusStatsLogger implements StatsLogger {\n+\n+    private final CollectorRegistry registry;\n+    private final String scope;\n+\n+    PrometheusStatsLogger(CollectorRegistry registry, String scope) {\n+        this.registry = registry;\n+        this.scope = scope;\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String name) {\n+        return new PrometheusOpStatsLogger(registry, completeName(name));\n+    }\n+\n+    @Override\n+    public Counter getCounter(String name) {\n+        return new PrometheusCounter(registry, completeName(name));\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(String name, Gauge<T> gauge) {\n+        io.prometheus.client.Gauge.build().name(completeName(name)).help(\"-\").create()\n+                .setChild(new io.prometheus.client.Gauge.Child() {\n+                    @Override\n+                    public double get() {\n+                        Number value = null;\n+                        try {\n+                            value = gauge.getSample();\n+                        } catch (Exception e) {\n+                            // no-op\n+                        }\n+\n+                        if (value == null) {\n+                            value = gauge.getDefaultValue();\n+                        }\n+                        return value.doubleValue();\n+                    }\n+                }).register(registry);\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String name) {\n+        return new PrometheusStatsLogger(registry, completeName(name));\n+    }\n+\n+    private String completeName(String name) {\n+        String completeName = scope.isEmpty() ? name : Joiner.on('_').join(scope, name);\n+        return Collector.sanitizeMetricName(completeName);\n+    }\n+}"},{"sha":"a3389e72e2ebcb0e115640cd541c0c0c29473d84","filename":"bookkeeper-stats/pom.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/bookkeeper-stats%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fpom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -46,12 +46,7 @@\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n-      <version>1.6.4</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-log4j12</artifactId>\n-      <version>1.6.4</version>\n+      <version>${slf4j.version}</version>\n     </dependency>\n   </dependencies>\n </project>"},{"sha":"76b4d24835076a1bf54adfc0c0c68bdd658a37b7","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d863513719b696638e3369f4bbfde9abf5fd3d5f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d863513719b696638e3369f4bbfde9abf5fd3d5f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=d863513719b696638e3369f4bbfde9abf5fd3d5f","patch":"@@ -45,6 +45,7 @@\n     <guava.version>13.0.1</guava.version>\n     <netty.version>4.1.10.Final</netty.version>\n     <zookeeper.version>3.5.1-alpha</zookeeper.version>\n+    <slf4j.version>1.7.25</slf4j.version>\n   </properties>\n   <url>http://zookeeper.apache.org/bookkeeper</url>\n   <build>"}]}