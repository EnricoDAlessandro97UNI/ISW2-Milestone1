{"sha":"9359d682a1598e30364eca6021d976f911e055b2","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjkzNTlkNjgyYTE1OThlMzAzNjRlY2E2MDIxZDk3NmY5MTFlMDU1YjI=","commit":{"author":{"name":"Robin Dhamankar","email":"robindh@Robins-MacBook-Air.local","date":"2016-11-17T23:18:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-11-17T23:18:35Z"},"message":"BOOKKEEPER-965: Long Polling Part I: Changes in the write path\n\nThis is the first in the series of changes for enabling long polling between bookkeeper client and the bookkeeper server. The changes were originally implemented in the Twitter fork and these pull request combine multiple commits from Twitter's bookkeeper fork as they include not only the changes made initially but also bug fixes added since.\n\nThe first change captures the changes on the write path (AddEntry). We track the last add confirmed in the FileInfo so that we can trigger actions when the value is updated\n\nAuthor: Robin Dhamankar <robindh@Robins-MacBook-Air.local>\n\nReviewers: sijie@apache.org <sijie@apache.org>\n\nCloses #73 from robindh/LongPollWritePath","tree":{"sha":"269232dc148c6711faf1c47e18e7875b5864c080","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/269232dc148c6711faf1c47e18e7875b5864c080"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/9359d682a1598e30364eca6021d976f911e055b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9359d682a1598e30364eca6021d976f911e055b2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9359d682a1598e30364eca6021d976f911e055b2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9359d682a1598e30364eca6021d976f911e055b2/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66"}],"stats":{"total":104,"additions":104,"deletions":0},"files":[{"sha":"6200d215107e74e898d0ffb7cfb559efd34013a4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -1305,6 +1305,11 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         }\n     }\n \n+    public long readLastAddConfirmed(long ledgerId) throws IOException {\n+        LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n+        return handle.getLastAddConfirmed();\n+    }\n+\n     // The rest of the code is test stuff\n     static class CounterCallback implements WriteCallback {\n         int count;"},{"sha":"38ff0d982089b463d0ee7b97b8c975972e32b04f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -80,6 +80,9 @@ class FileInfo {\n     private int stateBits;\n     private boolean needFlushHeader = false;\n \n+    // lac\n+    private Long lac = null;\n+\n     // file access mode\n     protected String mode;\n \n@@ -90,6 +93,17 @@ public FileInfo(File lf, byte[] masterKey) throws IOException {\n         mode = \"rw\";\n     }\n \n+    synchronized Long getLastAddConfirmed() {\n+        return lac;\n+    }\n+\n+    synchronized long setLastAddConfirmed(long lac) {\n+        if (null == this.lac || this.lac < lac) {\n+            this.lac = lac;\n+        }\n+        return this.lac;\n+    }\n+\n     public File getLf() {\n         return lf;\n     }"},{"sha":"f1ffcde0f90cb16f301f79a89601f73c918c2699","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -318,6 +318,30 @@ void close() throws IOException {\n         fileInfoCache.clear();\n     }\n \n+    Long getLastAddConfirmed(long ledgerId) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            return fi.getLastAddConfirmed();\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    long updateLastAddConfirmed(long ledgerId, long lac) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            return fi.setLastAddConfirmed(lac);\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n     byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n         FileInfo fi = fileInfoCache.get(ledgerId);\n         if (fi == null) {"},{"sha":"ee6edd59402c530e8effc24bab6b65182fa86eb8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -230,14 +230,34 @@ public boolean ledgerExists(long ledgerId) throws IOException {\n         return ledgerCache.ledgerExists(ledgerId);\n     }\n \n+    @Override\n+    public long getLastAddConfirmed(long ledgerId) throws IOException {\n+        Long lac = ledgerCache.getLastAddConfirmed(ledgerId);\n+        if (lac == null) {\n+            ByteBuffer bb = getEntry(ledgerId, BookieProtocol.LAST_ADD_CONFIRMED);\n+            if (null == bb) {\n+                return BookieProtocol.INVALID_ENTRY_ID;\n+            } else {\n+                bb.getLong(); // ledger id\n+                bb.getLong(); // entry id\n+                lac = bb.getLong();\n+                lac = ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n+            }\n+        }\n+        return lac;\n+    }\n+\n     @Override\n     synchronized public long addEntry(ByteBuffer entry) throws IOException {\n         long ledgerId = entry.getLong();\n         long entryId = entry.getLong();\n+        long lac = entry.getLong();\n         entry.rewind();\n \n         processEntry(ledgerId, entryId, entry);\n \n+        ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n+\n         return entryId;\n     }\n "},{"sha":"4e0fdc1e8592330bd9bd2662e4cf299d5f6c2307","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -44,6 +44,9 @@ interface LedgerCache extends Closeable {\n     void flushLedger(boolean doAll) throws IOException;\n     long getLastEntry(long ledgerId) throws IOException;\n \n+    Long getLastAddConfirmed(long ledgerId) throws IOException;\n+    long updateLastAddConfirmed(long ledgerId, long lac) throws IOException;\n+\n     void deleteLedger(long ledgerId) throws IOException;\n \n     LedgerCacheBean getJMXBean();"},{"sha":"db84268499f7416ddba88fc0e7217887798d8930","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -72,6 +72,16 @@ public int getPageSize() {\n         return pageSize;\n     }\n \n+    @Override\n+    public Long getLastAddConfirmed(long ledgerId) throws IOException {\n+        return indexPersistenceManager.getLastAddConfirmed(ledgerId);\n+    }\n+\n+    @Override\n+    public long updateLastAddConfirmed(long ledgerId, long lac) throws IOException {\n+        return indexPersistenceManager.updateLastAddConfirmed(ledgerId, lac);\n+    }\n+\n     @Override\n     public void putEntryOffset(long ledger, long entry, long offset) throws IOException {\n         indexPageManager.putEntryOffset(ledger, entry, offset);"},{"sha":"c7a8c97df36411b3f028939c36a59a0845d9565e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -59,4 +59,5 @@ static LedgerDescriptor createReadOnly(long ledgerId,\n \n     abstract long addEntry(ByteBuffer entry) throws IOException;\n     abstract ByteBuffer readEntry(long entryId) throws IOException;\n+    abstract long getLastAddConfirmed() throws IOException;\n }"},{"sha":"266236d7391bdf8b19baa5995f24e0395e8e0fb6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -84,4 +84,9 @@ long addEntry(ByteBuffer entry) throws IOException {\n     ByteBuffer readEntry(long entryId) throws IOException {\n         return ledgerStorage.getEntry(ledgerId, entryId);\n     }\n+\n+    @Override\n+    long getLastAddConfirmed() throws IOException {\n+        return ledgerStorage.getLastAddConfirmed(ledgerId);\n+    }\n }"},{"sha":"b0015bd62db6d8588690d246f258984144912e96","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -108,6 +108,16 @@ public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n      */\n     ByteBuffer getEntry(long ledgerId, long entryId) throws IOException;\n \n+    /**\n+     * Get last add confirmed.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @return last add confirmed.\n+     * @throws IOException\n+     */\n+    long getLastAddConfirmed(long ledgerId) throws IOException;\n+\n     /**\n      * Flushes all data in the storage. Once this is called,\n      * add data written to the LedgerStorage up until this point"},{"sha":"8e728528555bbc48d01beb20787c666b35d0a595","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -96,8 +96,10 @@ public boolean ledgerExists(long ledgerId) throws IOException {\n     public long addEntry(ByteBuffer entry) throws IOException {\n         long ledgerId = entry.getLong();\n         long entryId = entry.getLong();\n+        long lac = entry.getLong();\n         entry.rewind();\n         memTable.addEntry(ledgerId, entryId, entry, this);\n+        ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n         return entryId;\n     }\n "},{"sha":"988c2a291a36685c87cb4ef015039aead138be6d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -324,6 +324,11 @@ public ByteBuffer getEntry(long ledgerId, long entryId)\n             return null;\n         }\n \n+        @Override\n+        public long getLastAddConfirmed(long ledgerId) throws IOException {\n+            return 0;\n+        }\n+\n         @Override\n         public void flush() throws IOException {\n         }"},{"sha":"cf7fdcc68ae803b0d589cb18df04af3a88ffa6f2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9359d682a1598e30364eca6021d976f911e055b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java?ref=9359d682a1598e30364eca6021d976f911e055b2","patch":"@@ -160,6 +160,11 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n             return null;\n         }\n \n+        @Override\n+        public long getLastAddConfirmed(long ledgerId) throws IOException {\n+            return 0;\n+        }\n+\n         @Override\n         public void flush() throws IOException {\n         }"}]}