{"sha":"ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmJhNWRhZGNiM2UxZmE5NDJmMmYxYTE3MTc4ZmQzNjhjNGJkMGYwYzQ=","commit":{"author":{"name":"JV","email":"vjujjuri@salesforce.com","date":"2017-01-30T22:25:01Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-30T22:25:01Z"},"message":"BOOKKEEPER-949: Allow entryLog creation for compaction\n\nAllow entryLog creation even when bookie\nis in RO mode for compaction\n\nSigned-off-by: Venkateswararao Jujjuri (JV) <vjujjurisalesforce.com>\nReviewed-by: Andrey Yegorov <ayegorovsalesforce.com>\nReviewed-by: Charan Reddy Guttapalem <cguttapalemsalesforce.com>\n\nAuthor: JV <vjujjuri@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #99 from reddycharan/entrylogcreationforcompaction","tree":{"sha":"70591deca340717c5e403e99c29cb47a7cb302ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/70591deca340717c5e403e99c29cb47a7cb302ac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/comments","author":{"login":"jvrao","id":41390,"node_id":"MDQ6VXNlcjQxMzkw","avatar_url":"https://avatars.githubusercontent.com/u/41390?v=4","gravatar_id":"","url":"https://api.github.com/users/jvrao","html_url":"https://github.com/jvrao","followers_url":"https://api.github.com/users/jvrao/followers","following_url":"https://api.github.com/users/jvrao/following{/other_user}","gists_url":"https://api.github.com/users/jvrao/gists{/gist_id}","starred_url":"https://api.github.com/users/jvrao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jvrao/subscriptions","organizations_url":"https://api.github.com/users/jvrao/orgs","repos_url":"https://api.github.com/users/jvrao/repos","events_url":"https://api.github.com/users/jvrao/events{/privacy}","received_events_url":"https://api.github.com/users/jvrao/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a"}],"stats":{"total":118,"additions":113,"deletions":5},"files":[{"sha":"b4030f125d0603bc7ac4fdd93f2d6107b2be8767","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -23,6 +23,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.Serializable;\n import java.nio.ByteBuffer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -1818,8 +1819,11 @@ private static List<File> listFilesAndSort(File[] folderNames, String... extensi\n         Collections.sort(completeFilesList, new FilesTimeComparator());\n         return completeFilesList;\n     }\n-    \n-    private static class FilesTimeComparator implements Comparator<File> {\n+\n+    private static class FilesTimeComparator implements Comparator<File>, Serializable {\n+\n+        private static final long serialVersionUID = 1L;\n+\n         @Override\n         public int compare(File file1, File file2) {\n             Path file1Path = Paths.get(file1.getAbsolutePath());"},{"sha":"08ad1bece1e2398abce87bf9a440c1b19b382daa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -549,7 +549,7 @@ public BufferedLogChannel call() throws IOException {\n          * Allocate a new log file.\n          */\n         BufferedLogChannel allocateNewLog() throws IOException {\n-            List<File> list = ledgerDirsManager.getWritableLedgerDirs();\n+            List<File> list = ledgerDirsManager.getWritableLedgerDirsForNewLog();\n             Collections.shuffle(list);\n             // It would better not to overwrite existing entry log files\n             File newLogFile = null;"},{"sha":"aa424755f096c325ea3bfc211289c2f67b62ea0f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -504,7 +504,7 @@ protected void compactEntryLog(CompactionScannerFactory scannerFactory,\n         // closed and corrupted.\n         if (!compacting.compareAndSet(false, true)) {\n             // set compacting flag failed, means compacting is true now\n-            // indicates another thread wants to interrupt gc thread to exit\n+            // indicates that compaction is in progress for this EntryLogId.\n             return;\n         }\n "},{"sha":"52836f725224de563c91b9a4995890b1c6465722","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -60,6 +60,8 @@ public class LedgerDirsManager {\n     private final Random rand = new Random();\n     private final ConcurrentMap<File, Float> diskUsages =\n             new ConcurrentHashMap<File, Float>();\n+    private final long entryLogSize;\n+    private boolean forceGCAllowWhenNoSpace;\n \n     public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this(conf, dirs, NullStatsLogger.INSTANCE);\n@@ -78,6 +80,8 @@ public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this.listeners = new ArrayList<LedgerDirsListener>();\n         this.diskChecker = diskChecker;\n         this.monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n+        this.forceGCAllowWhenNoSpace = conf.getIsForceGCAllowWhenNoSpace();\n+        this.entryLogSize = conf.getEntryLogSizeLimit();\n         for (File dir : dirs) {\n             diskUsages.put(dir, 0f);\n             String statName = \"dir_\" + dir.getPath().replace('/', '_') + \"_usage\";\n@@ -129,6 +133,46 @@ public List<File> getWritableLedgerDirs()\n         return writableLedgerDirectories;\n     }\n \n+    public List<File> getWritableLedgerDirsForNewLog()\n+        throws NoWritableLedgerDirException {\n+\n+        if (!writableLedgerDirectories.isEmpty()) {\n+            return writableLedgerDirectories;\n+        }\n+\n+        // If Force GC is not allowed under no space\n+        if (!forceGCAllowWhenNoSpace) {\n+            String errMsg = \"All ledger directories are non writable and force GC is not enabled.\";\n+            NoWritableLedgerDirException e = new NoWritableLedgerDirException(errMsg);\n+            LOG.error(errMsg, e);\n+            throw e;\n+        }\n+\n+        // We don't have writable Ledger Dirs.\n+        // That means we must have turned readonly but the compaction\n+        // must have started running and it needs to allocate\n+        // a new log file to move forward with the compaction.\n+        List<File> fullLedgerDirsToAccomodateNewEntryLog = new ArrayList<File>();\n+        for (File dir: this.ledgerDirectories) {\n+            // Pick dirs which can accommodate little more than an entry log.\n+            if (dir.getUsableSpace() > (this.entryLogSize * 1.2) ) {\n+                fullLedgerDirsToAccomodateNewEntryLog.add(dir);\n+            }\n+        }\n+\n+        if (!fullLedgerDirsToAccomodateNewEntryLog.isEmpty()) {\n+            LOG.info(\"No writable ledger dirs. Trying to go beyond to accomodate compaction.\"\n+                    + \"Dirs that can accomodate new entryLog are: {}\", fullLedgerDirsToAccomodateNewEntryLog);\n+            return fullLedgerDirsToAccomodateNewEntryLog;\n+        }\n+\n+        // We will reach here when we have no option of creating a new log file for compaction\n+        String errMsg = \"All ledger directories are non writable and no reserved space left for creating entry log file.\";\n+        NoWritableLedgerDirException e = new NoWritableLedgerDirException(errMsg);\n+        LOG.error(errMsg, e);\n+        throw e;\n+    }\n+\n     /**\n      * @return full-filled ledger dirs.\n      */"},{"sha":"42167a33eda94dfe369b13a17fa977c502ef2dc2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -19,9 +19,9 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.File;\n+import java.util.List;\n \n import org.junit.Assert;\n-\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.After;\n@@ -99,4 +99,34 @@ public void testCreateNewLog() throws Exception {\n         Assert.assertTrue(\"Wrong log id\", el.getCurrentLogId() > 1);\n     }\n \n+    @Test(timeout=60000)\n+    public void testCreateNewLogWithNoWritableLedgerDirs() throws Exception {\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+\n+        // Creating a new configuration with a number of ledger directories.\n+        conf.setLedgerDirNames(ledgerDirs);\n+        conf.setIsForceGCAllowWhenNoSpace(true);\n+        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n+\n+        // Extracted from createNewLog()\n+        String logFileName = Long.toHexString(1) + \".log\";\n+        File dir = ledgerDirsManager.pickRandomWritableDir();\n+        LOG.info(\"Picked this directory: \" + dir);\n+        File newLogFile = new File(dir, logFileName);\n+        newLogFile.createNewFile();\n+\n+        // Now let us move all dirs to filled dirs\n+        List<File> wDirs = ledgerDirsManager.getWritableLedgerDirs();\n+        for (File tdir: wDirs) {\n+            ledgerDirsManager.addToFilledDirs(tdir);\n+        }\n+\n+        // Calls createNewLog, and with the number of directories we\n+        // are using, if it picks one at random it will fail.\n+        el.createNewLog();\n+        LOG.info(\"This is the current log id: \" + el.getCurrentLogId());\n+        Assert.assertTrue(\"Wrong log id\", el.getCurrentLogId() > 1);\n+    }\n+\n }"},{"sha":"b72cfc7347099651263b2ba1b4b9553a2a5adcce","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java?ref=ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","patch":"@@ -72,6 +72,7 @@ public void setUp() throws Exception {\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         conf.setDiskCheckInterval(diskCheckInterval);\n+        conf.setIsForceGCAllowWhenNoSpace(true);\n \n         mockDiskChecker = new MockDiskChecker(threshold, warnThreshold);\n         dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE, mockDiskChecker);\n@@ -87,6 +88,16 @@ public void tearDown() throws Exception {\n         tempDirs.clear();\n     }\n \n+    @Test(timeout=60000)\n+    public void testGetWritableDir() throws Exception {\n+        try {\n+            List<File> writeDirs = dirsManager.getWritableLedgerDirs();\n+            assertTrue(\"Must have a writable ledgerDir\", writeDirs.size() > 0);\n+        } catch (NoWritableLedgerDirException nwlde) {\n+            fail(\"We should have a writeble ledgerDir\");\n+        }\n+    }\n+\n     @Test(timeout=60000)\n     public void testPickWritableDirExclusive() throws Exception {\n         try {\n@@ -111,6 +122,25 @@ public void testNoWritableDir() throws Exception {\n         }\n     }\n \n+    @Test(timeout=60000)\n+    public void testGetWritableDirForLog() throws Exception {\n+        List<File> writeDirs;\n+        try {\n+            dirsManager.addToFilledDirs(curDir);\n+            writeDirs = dirsManager.getWritableLedgerDirs();\n+            fail(\"Should not reach here due to there is no writable ledger dir.\");\n+        } catch (NoWritableLedgerDirException nwlde) {\n+            // expected to fail with no writable ledger dir\n+            // Now make sure we can get one for log\n+            try {\n+                writeDirs = dirsManager.getWritableLedgerDirsForNewLog();\n+                assertTrue(\"Must have a writable ledgerDir\", writeDirs.size() > 0);\n+            } catch (NoWritableLedgerDirException e) {\n+                fail(\"We should have a writeble ledgerDir\");\n+            }\n+        }\n+    }\n+\n     @Test(timeout=60000)\n     public void testLedgerDirsMonitorDuringTransition() throws Exception {\n "}]}