{"sha":"e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmU0MmVmYTlhODRkNTU0YzhjMGNkYzlmYWYzOWQ1ZWZiODVmZTAxZjA=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-01-22T05:19:02Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-01-22T05:19:02Z"},"message":"BOOKKEEPER-877: Script for generating patch for reviews (sijie)","tree":{"sha":"940ac67d0e4aa5c17dffbef949f3a3c1da914af8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/940ac67d0e4aa5c17dffbef949f3a3c1da914af8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e47fb5703d1a26db238dd20aa58bc580830dd5af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e47fb5703d1a26db238dd20aa58bc580830dd5af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e47fb5703d1a26db238dd20aa58bc580830dd5af"}],"stats":{"total":230,"additions":230,"deletions":0},"files":[{"sha":"23404b1f1137fdb044ee3793f0e0cde84eb3c7f7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","patch":"@@ -99,6 +99,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-866: Fix compile issue when Updating junit to latest release version( 4.12) in the test of  Bookkeeper-server. (Jia Zhai via sijie)\n \n+      BOOKKEEPER-877: Script for generating patch for reviews (sijie)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"0c4b76346495e4832403506d617aec974162bd89","filename":"patch-review.py","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0/patch-review.py","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0/patch-review.py","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/patch-review.py?ref=e42efa9a84d554c8c0cdc9faf39d5efb85fe01f0","patch":"@@ -0,0 +1,228 @@\n+#!/usr/bin/env python\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# copy from {@link https://github.com/apache/kafka/blob/trunk/kafka-patch-review.py}\n+\n+import argparse\n+import sys\n+import os\n+import time\n+import datetime\n+import tempfile\n+import commands\n+import getpass\n+from jira.client import JIRA\n+\n+def get_jira_config():\n+  # read the config file\n+  home=jira_home=os.getenv('HOME')\n+  home=home.rstrip('/')\n+  if not (os.path.isfile(home + '/jira.ini')):\n+    jira_user=raw_input('JIRA user :')\n+    jira_pass=getpass.getpass('JIRA password :')\n+    jira_config = {'user':jira_user, 'password':jira_pass}\n+    return jira_config\n+  else:\n+    jira_config = dict(line.strip().split('=') for line in open(home + '/jira.ini'))\n+    return jira_config\n+\n+def get_jira(jira_config):\n+  options = {\n+    'server': 'https://issues.apache.org/jira'\n+  }\n+  jira = JIRA(options=options,basic_auth=(jira_config['user'], jira_config['password']))\n+  # (Force) verify the auth was really done\n+  jira_session=jira.session()\n+  if (jira_session is None):\n+    raise Exception(\"Failed to login to the JIRA instance\")\n+  return jira\n+\n+def cmd_exists(cmd):\n+  status, result = commands.getstatusoutput(cmd)\n+  return status\n+\n+def main():\n+  ''' main(), shut up, pylint '''\n+  popt = argparse.ArgumentParser(description='BookKeeper patch review tool')\n+  popt.add_argument('-b', '--branch', action='store', dest='branch', required=True, help='Tracking branch to create diff against')\n+  popt.add_argument('-j', '--jira', action='store', dest='jira', required=True, help='JIRA corresponding to the reviewboard')\n+  popt.add_argument('-s', '--summary', action='store', dest='summary', required=False, help='Summary for the reviewboard')\n+  popt.add_argument('-d', '--description', action='store', dest='description', required=False, help='Description for reviewboard')\n+  popt.add_argument('-r', '--rb', action='store', dest='reviewboard', required=False, help='Review board that needs to be updated')\n+  popt.add_argument('-t', '--testing-done', action='store', dest='testing', required=False, help='Text for the Testing Done section of the reviewboard')\n+  popt.add_argument('-db', '--debug', action='store_true', required=False, help='Enable debug mode')\n+  opt = popt.parse_args()\n+\n+  post_review_tool = None\n+  if (cmd_exists(\"post-review\") == 0):\n+    post_review_tool = \"post-review\"\n+  elif (cmd_exists(\"rbt\") == 0):\n+    post_review_tool = \"rbt post\"\n+  else:\n+    print \"please install RBTools. See https://www.reviewboard.org/docs/rbtools/dev/ for details.\"\n+    sys.exit(1)\n+\n+  patch_file=tempfile.gettempdir() + \"/\" + opt.jira + \".patch\"\n+  if opt.reviewboard:\n+    ts = time.time()\n+    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d_%H:%M:%S')\n+    patch_file=tempfile.gettempdir() + \"/\" + opt.jira + '_' + st + '.patch'\n+\n+  # first check if rebase is needed\n+  git_branch_hash=\"git rev-parse \" + opt.branch\n+  p_now=os.popen(git_branch_hash)\n+  branch_now=p_now.read()\n+  p_now.close()\n+\n+  git_common_ancestor=\"git merge-base \" + opt.branch + \" HEAD\"\n+  p_then=os.popen(git_common_ancestor)\n+  branch_then=p_then.read()\n+  p_then.close()\n+\n+  if branch_now != branch_then:\n+    print 'ERROR: Your current working branch is from an older version of ' + opt.branch + '. Please rebase first by using git pull --rebase'\n+    sys.exit(1)\n+\n+  git_configure_reviewboard=\"git config reviewboard.url https://reviews.apache.org\"\n+  print \"Configuring reviewboard url to https://reviews.apache.org\"\n+  p=os.popen(git_configure_reviewboard)\n+  p.close()\n+\n+  git_remote_update=\"git remote update\"\n+  print \"Updating your remote branches to pull the latest changes\"\n+  p=os.popen(git_remote_update)\n+  p.close()\n+\n+  # Get JIRA configuration and login to JIRA to ensure the credentials work, before publishing the patch to the review board\n+  print \"Verifying JIRA connection configurations\"\n+  try:\n+    jira_config=get_jira_config()\n+    jira=get_jira(jira_config)\n+  except:\n+    print \"Failed to login to the JIRA instance\", sys.exc_info()[0], sys.exc_info()[1]\n+    sys.exit(1)\n+\n+  git_command=\"git diff --no-prefix \" + opt.branch + \" > \" + patch_file\n+  if opt.debug:\n+    print git_command\n+  p=os.popen(git_command)\n+  p.close()\n+\n+  print 'Getting latest patch attached to the JIRA'\n+  tmp_dir = tempfile.mkdtemp()\n+  get_latest_patch_command=\"\"\"\n+PATCHFILE={0}/{1}.patch\n+jiraPage={0}/jira.txt\n+curl \"https://issues.apache.org/jira/browse/{1}\" > {0}/jira.txt\n+if [[ `grep -c 'Patch Available' {0}/jira.txt` == 0 ]] ; then\n+    echo \"{1} is not \\\"Patch Available\\\". Exiting.\"\n+    echo\n+    exit 1\n+fi\n+relativePatchURL=`grep -o '\"/jira/secure/attachment/[0-9]*/[^\"]*' {0}/jira.txt \\\n+    | grep -v -e 'htm[l]*$' | sort | tail -1 \\\n+    | grep -o '/jira/secure/attachment/[0-9]*/[^\"]*'`\n+patchURL=\"https://issues.apache.org$relativePatchURL\"\n+curl $patchURL > {0}/{1}.patch\n+\"\"\".format(tmp_dir, opt.jira)\n+  p=os.popen(get_latest_patch_command)\n+  p.close()\n+\n+  previous_patch=tmp_dir + \"/\" + opt.jira + \".patch\"\n+  diff_file=tmp_dir + \"/\" + opt.jira + \".diff\"\n+  if os.path.isfile(previous_patch) and os.stat(previous_patch).st_size > 0:\n+    print 'Creating diff with previous version of patch uploaded to JIRA'\n+    diff_command = \"diff \" + previous_patch+ \" \" + patch_file + \" > \" + diff_file\n+    try:\n+      p=os.popen(diff_command)\n+      sys.stdout.flush()\n+      p.close()\n+    except:\n+      pass\n+    print 'Diff with previous version of patch uploaded to JIRA is saved to ' + diff_file\n+\n+    print 'Checking if the there are changes that need to be pushed'\n+    if os.stat(diff_file).st_size == 0:\n+      print 'No changes found on top of changes uploaded to JIRA'\n+      print 'Aborting'\n+      sys.exit(1)\n+\n+  rb_command= post_review_tool + \" --publish --tracking-branch \" + opt.branch + \" --target-groups=bookkeeper --bugs-closed=\" + opt.jira\n+  if opt.debug:\n+    rb_command=rb_command + \" --debug\"\n+  summary=\"Patch for \" + opt.jira\n+  if opt.summary:\n+    summary=opt.summary\n+  rb_command=rb_command + \" --summary \\\"\" + summary + \"\\\"\"\n+  if opt.description:\n+    rb_command=rb_command + \" --description \\\"\" + opt.description + \"\\\"\"\n+  if opt.reviewboard:\n+    rb_command=rb_command + \" -r \" + opt.reviewboard\n+  if opt.testing:\n+    rb_command=rb_command + \" --testing-done=\" + opt.testing\n+  if opt.debug:\n+    print rb_command\n+  p=os.popen(rb_command)\n+  rb_url=\"\"\n+  for line in p:\n+    print line\n+    if line.startswith('http'):\n+      rb_url = line\n+    elif line.startswith(\"There don't seem to be any diffs\"):\n+      print 'ERROR: Your reviewboard was not created/updated since there was no diff to upload. The reasons that can cause this issue are 1) Your diff is not checked into your local branch. Please check in the diff to the local branch and retry 2) You are not specifying the local branch name as part of the --branch option. Please specify the remote branch name obtained from git branch -r'\n+      p.close()\n+      sys.exit(1)\n+    elif line.startswith(\"Your review request still exists, but the diff is not attached\") and not opt.debug:\n+      print 'ERROR: Your reviewboard was not created/updated. Please run the script with the --debug option to troubleshoot the problem'\n+      p.close()\n+      sys.exit(1)\n+  if p.close() != None:\n+    print 'ERROR: reviewboard update failed. Exiting.'\n+    sys.exit(1)\n+  if opt.debug:\n+    print 'rb url=',rb_url\n+\n+  print 'Creating diff against', opt.branch, 'and uploading patch to JIRA',opt.jira\n+  issue = jira.issue(opt.jira)\n+  attachment=open(patch_file)\n+  jira.add_attachment(issue,attachment)\n+  attachment.close()\n+\n+  comment=\"Created reviewboard \"\n+  if not opt.reviewboard:\n+    print 'Created a new reviewboard',rb_url,\n+  else:\n+    print 'Updated reviewboard',rb_url\n+    comment=\"Updated reviewboard \"\n+\n+  comment = comment + rb_url + ' against branch ' + opt.branch\n+  jira.add_comment(opt.jira, comment)\n+\n+  #update the JIRA status to PATCH AVAILABLE\n+  transitions = jira.transitions(issue)\n+  transitionsMap ={}\n+\n+  for t in transitions:\n+    transitionsMap[t['name']] = t['id']\n+\n+  if('Submit Patch' in transitionsMap):\n+     jira.transition_issue(issue, transitionsMap['Submit Patch'] , assignee={'name': jira_config['user']} )\n+\n+if __name__ == '__main__':\n+  sys.exit(main())"}]}