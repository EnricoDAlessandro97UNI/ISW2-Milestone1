{"sha":"96d82102bef3152934f564db16373b12b1689ead","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojk2ZDgyMTAyYmVmMzE1MjkzNGY1NjRkYjE2MzczYjEyYjE2ODllYWQ=","commit":{"author":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-24T14:03:02Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-24T14:03:02Z"},"message":"Issue#243 - asyncAddEntry fails with NPE with LedgerHandlerAdv\n\nFix asyncAddEntry on LedgerHandleAdv and clean up the asyncAddEntry API, drops BKException which is never thrown in asynch functions\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Sijie Guo\n\nThis closes #244 from eolivelli/asyncadd-adv, closes #243","tree":{"sha":"c339c75d238c8d9879fd5badd3b182188c3f94a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/c339c75d238c8d9879fd5badd3b182188c3f94a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/96d82102bef3152934f564db16373b12b1689ead","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/96d82102bef3152934f564db16373b12b1689ead","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/96d82102bef3152934f564db16373b12b1689ead","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/96d82102bef3152934f564db16373b12b1689ead/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"626ce687e2342b8a75005cf018540fda76ee15d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/626ce687e2342b8a75005cf018540fda76ee15d8","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/626ce687e2342b8a75005cf018540fda76ee15d8"}],"stats":{"total":95,"additions":92,"deletions":3},"files":[{"sha":"e77342b5b359bb57cb8d4e98126be2fa978ef1ff","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=96d82102bef3152934f564db16373b12b1689ead","patch":"@@ -720,8 +720,7 @@ public void asyncAddEntry(final byte[] data, final AddCallback cb,\n      * @param ctx\n      *            some control object\n      */\n-    public void asyncAddEntry(final long entryId, final byte[] data, final AddCallback cb, final Object ctx)\n-            throws BKException {\n+    public void asyncAddEntry(final long entryId, final byte[] data, final AddCallback cb, final Object ctx) {\n         LOG.error(\"To use this feature Ledger must be created with createLedgerAdv() interface.\");\n         cb.addComplete(BKException.Code.IllegalOpException, LedgerHandle.this, entryId, ctx);\n     }"},{"sha":"527d084dc2d8abc0892d0663bb76b981ca598d21","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java?ref=96d82102bef3152934f564db16373b12b1689ead","patch":"@@ -121,7 +121,7 @@ public long addEntry(final long entryId, byte[] data, int offset, int length) th\n      *            some control object\n      */\n     @Override\n-    public void asyncAddEntry(long entryId, byte[] data, AddCallback cb, Object ctx) throws BKException {\n+    public void asyncAddEntry(long entryId, byte[] data, AddCallback cb, Object ctx) {\n         asyncAddEntry(entryId, data, 0, data.length, cb, ctx);\n     }\n \n@@ -225,4 +225,21 @@ public void safeRun() {\n         }\n     }\n \n+    /**\n+     * LedgerHandleAdv will not allow addEntry without providing an entryId\n+     */\n+    @Override\n+    public void asyncAddEntry(ByteBuf data, AddCallback cb, Object ctx) {\n+        cb.addComplete(BKException.Code.IllegalOpException, this, LedgerHandle.INVALID_ENTRY_ID, ctx);\n+    }\n+\n+    /**\n+     * LedgerHandleAdv will not allow addEntry without providing an entryId\n+     */\n+    @Override\n+    public void asyncAddEntry(final byte[] data, final int offset, final int length,\n+                              final AddCallback cb, final Object ctx) {\n+        cb.addComplete(BKException.Code.IllegalOpException, this, LedgerHandle.INVALID_ENTRY_ID, ctx);\n+    }\n+\n }"},{"sha":"e226bb04bca50d6d4f26981c1a302f70bd6b98be","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96d82102bef3152934f564db16373b12b1689ead/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java?ref=96d82102bef3152934f564db16373b12b1689ead","patch":"@@ -20,6 +20,7 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import io.netty.buffer.Unpooled;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n@@ -31,6 +32,8 @@\n import java.util.Map;\n import java.util.UUID;\n import java.util.HashMap;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -178,6 +181,76 @@ public void testLedgerCreateAdv() throws Exception {\n         lh.close();\n     }\n \n+    /**\n+     * Verify that LedgerHandleAdv cannnot handle addEntry without the entryId\n+     *\n+     * @throws Exception\n+     */\n+    @Test(timeout = 60000)\n+    public void testNoAddEntryLedgerCreateAdv() throws Exception {\n+\n+        ByteBuffer entry = ByteBuffer.allocate(4);\n+        entry.putInt(rng.nextInt(maxInt));\n+        entry.position(0);\n+\n+        lh = bkc.createLedgerAdv(5, 3, 2, digestType, ledgerPassword);\n+        assertTrue(lh instanceof LedgerHandleAdv);\n+\n+        try {\n+            lh.addEntry(entry.array());\n+            fail(\"using LedgerHandleAdv addEntry without entryId is forbidden\");\n+        } catch (BKException e) {\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            lh.addEntry(entry.array(), 0, 4);\n+            fail(\"using LedgerHandleAdv addEntry without entryId is forbidden\");\n+        } catch (BKException e) {\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(Unpooled.wrappedBuffer(entry.array()),\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(entry.array(),\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+\n+        try {\n+            CompletableFuture<Object> done = new CompletableFuture<>();\n+            lh.asyncAddEntry(entry.array(),0, 4,\n+                (int rc, LedgerHandle lh1, long entryId, Object ctx) -> {\n+                SynchCallbackUtils.finish(rc, null, done);\n+            }, null);\n+            done.get();\n+        } catch (ExecutionException ee) {\n+            assertTrue(ee.getCause() instanceof BKException);\n+            BKException e = (BKException) ee.getCause();\n+            assertEquals(e.getCode(), BKException.Code.IllegalOpException);\n+        }\n+        lh.close();\n+    }\n+\n     /**\n      * Verify the functionality of Advanced Ledger which accepts ledgerId as input and returns\n      * LedgerHandleAdv. LedgerHandleAdv takes entryId for addEntry, and let"}]}