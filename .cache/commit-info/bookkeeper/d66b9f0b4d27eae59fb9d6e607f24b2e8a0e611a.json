{"sha":"d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmQ2NmI5ZjBiNGQyN2VhZTU5ZmI5ZDZlNjA3ZjI0YjJlOGEwZTYxMWE=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-27T07:07:08Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-04-27T07:07:08Z"},"message":"BOOKKEEPER-920: Extend bk-merge-pr.py to add more info to Jira ticket…\n\n… when merging\n\nAuthor: user.email <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #36 from merlimat/bk-920","tree":{"sha":"3dfc6be96739d39254b6c858afc41060fe4e1eb8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/3dfc6be96739d39254b6c858afc41060fe4e1eb8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"91595fc04ac6168b5a652e803e55caadae757f74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/91595fc04ac6168b5a652e803e55caadae757f74","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/91595fc04ac6168b5a652e803e55caadae757f74"}],"stats":{"total":66,"additions":52,"deletions":14},"files":[{"sha":"c3cda405e3fc928fa28060f86b0387be38e0d43b","filename":"dev/bk-merge-pr.py","status":"modified","additions":52,"deletions":14,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a/dev%2Fbk-merge-pr.py","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a/dev%2Fbk-merge-pr.py","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/dev%2Fbk-merge-pr.py?ref=d66b9f0b4d27eae59fb9d6e607f24b2e8a0e611a","patch":"@@ -62,7 +62,8 @@\n \n GITHUB_USER = os.environ.get(\"GITHUB_USER\", \"apache\")\n GITHUB_BASE = \"https://github.com/%s/%s/pull\" % (GITHUB_USER, PROJECT_NAME)\n-GITHUB_API_BASE = \"https://api.github.com/repos/%s/%s\" % (GITHUB_USER, PROJECT_NAME)\n+GITHUB_API_URL  = \"https://api.github.com\"\n+GITHUB_API_BASE = \"%s/repos/%s/%s\" % (GITHUB_API_URL, GITHUB_USER, PROJECT_NAME)\n JIRA_BASE = \"https://issues.apache.org/jira/browse\"\n JIRA_API_BASE = \"https://issues.apache.org/jira\"\n # Prefix added to temporary branches\n@@ -123,7 +124,7 @@ def get_current_branch():\n     return run_cmd(\"git rev-parse --abbrev-ref HEAD\").replace(\"\\n\", \"\")\n \n # merge the requested PR and return the merge hash\n-def merge_pr(pr_num, target_ref, title, body, pr_repo_desc):\n+def merge_pr(pr_num, target_ref, title, body, default_pr_reviewers, pr_repo_desc):\n     pr_branch_name = \"%s_MERGE_PR_%s\" % (TEMP_BRANCH_PREFIX, pr_num)\n     target_branch_name = \"%s_MERGE_PR_%s_%s\" % (TEMP_BRANCH_PREFIX, pr_num, target_ref.upper())\n     run_cmd(\"git fetch %s pull/%s/head:%s\" % (PR_REMOTE_NAME, pr_num, pr_branch_name))\n@@ -140,6 +141,15 @@ def merge_pr(pr_num, target_ref, title, body, pr_repo_desc):\n         continue_maybe(msg)\n         had_conflicts = True\n \n+    # Offer to run unit tests before committing\n+    result = raw_input('Do you want to validate unit tests after the merge? (y/n): ')\n+    if result.lower() == 'y':\n+        test_res = subprocess.call('mvn clean install'.split())\n+        if test_res == 0:\n+            print('Unit tests execution succeeded')\n+        else:\n+            continue_maybe(\"Unit tests execution FAILED. Do you want to continue with the merge anyway?\")\n+\n     commit_authors = run_cmd(['git', 'log', 'HEAD..%s' % pr_branch_name,\n                              '--pretty=format:%an <%ae>']).split(\"\\n\")\n     distinct_authors = sorted(set(commit_authors),\n@@ -150,8 +160,9 @@ def merge_pr(pr_num, target_ref, title, body, pr_repo_desc):\n     if primary_author == \"\":\n         primary_author = distinct_authors[0]\n \n-    reviewers = raw_input(\n-        \"Enter reviewers in the format of \\\"name1 <email1>, name2 <email2>\\\": \").strip()\n+    reviewers = raw_input(\"Enter reviewers [%s]: \" % default_pr_reviewers).strip()\n+    if reviewers == '':\n+        reviewers = default_pr_reviewers\n \n     commits = run_cmd(['git', 'log', 'HEAD..%s' % pr_branch_name,\n                       '--pretty=format:%h [%an] %s']).split(\"\\n\")\n@@ -208,10 +219,11 @@ def merge_pr(pr_num, target_ref, title, body, pr_repo_desc):\n         fail(\"Exception while pushing: %s\" % e)\n \n     merge_hash = run_cmd(\"git rev-parse %s\" % target_branch_name)[:8]\n+    merge_log = run_cmd(\"git show --format=fuller -q %s\" % target_branch_name)\n     clean_up()\n     print(\"Pull request #%s merged!\" % pr_num)\n     print(\"Merge hash: %s\" % merge_hash)\n-    return merge_hash\n+    return merge_hash, merge_log\n \n \n def cherry_pick(pr_num, merge_hash, default_branch):\n@@ -265,13 +277,13 @@ def fix_version_from_branch(branch, versions):\n             return None\n \n \n-def resolve_jira_issue(merge_branches, comment, default_jira_id=\"\"):\n+def resolve_jira_issue(merge_branches, comment, jira_id):\n     asf_jira = jira.client.JIRA({'server': JIRA_API_BASE},\n                                 basic_auth=(JIRA_USERNAME, JIRA_PASSWORD))\n \n-    jira_id = raw_input(\"Enter a JIRA id [%s]: \" % default_jira_id)\n-    if jira_id == \"\":\n-        jira_id = default_jira_id\n+    result = raw_input(\"Resolve JIRA %s ? (y/n): \" % jira_id)\n+    if result.lower() != \"y\":\n+        return\n \n     try:\n         issue = asf_jira.issue(jira_id)\n@@ -321,10 +333,10 @@ def get_version_json(version_str):\n \n \n def resolve_jira_issues(title, merge_branches, comment):\n-    jira_ids = re.findall(\"%s-[0-9]{4,5}\" % CAPITALIZED_PROJECT_NAME, title)\n+    jira_ids = re.findall(\"%s-[0-9]{3,6}\" % CAPITALIZED_PROJECT_NAME, title)\n \n     if len(jira_ids) == 0:\n-        resolve_jira_issue(merge_branches, comment)\n+        pritnf (\"No JIRA issue found to update\")\n     for jira_id in jira_ids:\n         resolve_jira_issue(merge_branches, comment, jira_id)\n \n@@ -369,6 +381,26 @@ def standardize_jira_ref(text):\n \n     return clean_text\n \n+def get_reviewers(pr_num):\n+    \"\"\"\n+    Get a candidate list of reviewers that have commented on the PR with '+1' or 'LGTM'\n+    \"\"\"\n+    approval_msgs = ['+1', 'lgtm']\n+\n+    pr_comments = get_json(\"%s/issues/%s/comments\" % (GITHUB_API_BASE, pr_num))\n+\n+    reviewers_ids = set()\n+    for comment in pr_comments:\n+        for approval_msg in approval_msgs:\n+            if approval_msg in comment['body'].lower():\n+                reviewers_ids.add(comment['user']['login'])\n+\n+    reviewers_emails = []\n+    for reviewer_id in reviewers_ids:\n+        user = get_json(\"%s/users/%s\" % (GITHUB_API_URL, reviewer_id))\n+        reviewers_emails += ['%s <%s>' % (user['name'].strip(), user['email'].strip())]\n+    return ', '.join(reviewers_emails)\n+\n def main():\n     global original_head\n \n@@ -382,6 +414,7 @@ def main():\n     pr_num = raw_input(\"Which pull request would you like to merge? (e.g. 34): \")\n     pr = get_json(\"%s/pulls/%s\" % (GITHUB_API_BASE, pr_num))\n     pr_events = get_json(\"%s/issues/%s/events\" % (GITHUB_API_BASE, pr_num))\n+    pr_reviewers = get_reviewers(pr_num)\n \n     url = pr[\"url\"]\n \n@@ -441,16 +474,21 @@ def main():\n \n     merged_refs = [target_ref]\n \n-    merge_hash = merge_pr(pr_num, target_ref, commit_title, body, pr_repo_desc)\n+    merge_hash, merge_commit_log = merge_pr(pr_num, target_ref, commit_title, body, pr_reviewers, pr_repo_desc)\n \n     pick_prompt = \"Would you like to pick %s into another branch?\" % merge_hash\n     while raw_input(\"\\n%s (y/n): \" % pick_prompt).lower() == \"y\":\n         merged_refs = merged_refs + [cherry_pick(pr_num, merge_hash, latest_branch)]\n \n     if JIRA_IMPORTED:\n         if JIRA_USERNAME and JIRA_PASSWORD:\n-            continue_maybe(\"Would you like to update an associated JIRA?\")\n-            jira_comment = \"Issue resolved by pull request %s\\n[%s/%s]\" % (pr_num, GITHUB_BASE, pr_num)\n+            jira_comment = '''Issue resolved by merging pull request %s\n+            [%s/%s]\n+\n+            {noformat}\n+            %s\n+            {noformat}\n+            ''' % (pr_num, GITHUB_BASE, pr_num, merge_commit_log)\n             resolve_jira_issues(commit_title, merged_refs, jira_comment)\n         else:\n             print \"JIRA_USERNAME and JIRA_PASSWORD not set\""}]}