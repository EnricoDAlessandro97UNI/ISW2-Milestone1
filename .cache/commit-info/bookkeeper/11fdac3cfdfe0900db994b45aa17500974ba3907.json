{"sha":"11fdac3cfdfe0900db994b45aa17500974ba3907","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjExZmRhYzNjZmRmZTA5MDBkYjk5NGI0NWFhMTc1MDA5NzRiYTM5MDc=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-19T07:31:04Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-19T07:31:04Z"},"message":"ISSUE #258: BookieInitializationTest.testRegNodeExistsAfterSessionTimeOut failed\n\nDescriptions of the changes in this PR:\n\nConstruct new zookeeper client to ensure the tests get new zookeeper session.\n\n(this change is based on 77c7721 )\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nThis closes #259 from sijie/issue_258, closes #258","tree":{"sha":"60c9eedc26436aa164327d91fb6f603094e28062","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/60c9eedc26436aa164327d91fb6f603094e28062"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/11fdac3cfdfe0900db994b45aa17500974ba3907","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/11fdac3cfdfe0900db994b45aa17500974ba3907","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/11fdac3cfdfe0900db994b45aa17500974ba3907","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/11fdac3cfdfe0900db994b45aa17500974ba3907/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7e9350cff67f0cb72ab757d500d98044cbdd4264","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7e9350cff67f0cb72ab757d500d98044cbdd4264","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7e9350cff67f0cb72ab757d500d98044cbdd4264"}],"stats":{"total":66,"additions":29,"deletions":37},"files":[{"sha":"34681fa59d64bbf4de07975bc0e8b02f95d32e0e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":29,"deletions":37,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/11fdac3cfdfe0900db994b45aa17500974ba3907/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/11fdac3cfdfe0900db994b45aa17500974ba3907/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=11fdac3cfdfe0900db994b45aa17500974ba3907","patch":"@@ -47,7 +47,6 @@\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -61,20 +60,10 @@ public class BookieInitializationTest extends BookKeeperClusterTestCase {\n     private static final Logger LOG = LoggerFactory\n             .getLogger(BookieInitializationTest.class);\n \n-    ZooKeeper newzk = null;\n-\n     public BookieInitializationTest() {\n         super(0);\n     }\n \n-    @Override\n-    public void tearDown() throws Exception {\n-        if (null != newzk) {\n-            newzk.close();\n-        }\n-        super.tearDown();\n-    }\n-\n     private static class MockBookie extends Bookie {\n         MockBookie(ServerConfiguration conf) throws IOException,\n                 KeeperException, InterruptedException, BookieException {\n@@ -166,42 +155,43 @@ public void testBookieRegistration() throws Exception {\n \n         // simulating bookie restart, on restart bookie will create new\n         // zkclient and doing the registration.\n-        createNewZKClient();\n-        b.zk = newzk;\n+        ZooKeeperClient newZk = createNewZKClient();\n+        b.zk = newZk;\n \n-        // deleting the znode, so that the bookie registration should\n-        // continue successfully on NodeDeleted event\n-        new Thread() {\n-            @Override\n-            public void run() {\n+        try {\n+            // deleting the znode, so that the bookie registration should\n+            // continue successfully on NodeDeleted event\n+            new Thread(() -> {\n                 try {\n                     Thread.sleep(conf.getZkTimeout() / 3);\n                     zkc.delete(bkRegPath, -1);\n                 } catch (Exception e) {\n                     // Not handling, since the testRegisterBookie will fail\n                     LOG.error(\"Failed to delete the znode :\" + bkRegPath, e);\n                 }\n-            }\n-        }.start();\n-        try {\n-            b.testRegisterBookie(conf);\n-        } catch (IOException e) {\n-            Throwable t = e.getCause();\n-            if (t instanceof KeeperException) {\n-                KeeperException ke = (KeeperException) t;\n-                Assert.assertTrue(\"ErrorCode:\" + ke.code()\n-                        + \", Registration node exists\",\n+            }).start();\n+            try {\n+                b.testRegisterBookie(conf);\n+            } catch (IOException e) {\n+                Throwable t = e.getCause();\n+                if (t instanceof KeeperException) {\n+                    KeeperException ke = (KeeperException) t;\n+                    Assert.assertTrue(\"ErrorCode:\" + ke.code()\n+                            + \", Registration node exists\",\n                         ke.code() != KeeperException.Code.NODEEXISTS);\n+                }\n+                throw e;\n             }\n-            throw e;\n-        }\n \n-        // verify ephemeral owner of the bkReg znode\n-        Stat bkRegNode2 = newzk.exists(bkRegPath, false);\n-        Assert.assertNotNull(\"Bookie registration has been failed\", bkRegNode2);\n-        Assert.assertTrue(\"Bookie is referring to old registration znode:\"\n+            // verify ephemeral owner of the bkReg znode\n+            Stat bkRegNode2 = newZk.exists(bkRegPath, false);\n+            Assert.assertNotNull(\"Bookie registration has been failed\", bkRegNode2);\n+            Assert.assertTrue(\"Bookie is referring to old registration znode:\"\n                 + bkRegNode1 + \", New ZNode:\" + bkRegNode2, bkRegNode1\n                 .getEphemeralOwner() != bkRegNode2.getEphemeralOwner());\n+        } finally {\n+            newZk.close();\n+        }\n     }\n \n     /**\n@@ -230,7 +220,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n \n         // simulating bookie restart, on restart bookie will create new\n         // zkclient and doing the registration.\n-        createNewZKClient();\n+        ZooKeeperClient newzk = createNewZKClient();\n         b.zk = newzk;\n         try {\n             b.testRegisterBookie(conf);\n@@ -255,6 +245,8 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n                 return;\n             }\n             throw e;\n+        } finally {\n+            newzk.close();\n         }\n     }\n \n@@ -633,10 +625,10 @@ public void testAllowDiskPartitionDuplicationAllowed() throws Exception {\n         }\n     }\n     \n-    private void createNewZKClient() throws Exception {\n+    private ZooKeeperClient createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n-        newzk = ZooKeeperClient.newBuilder()\n+        return ZooKeeperClient.newBuilder()\n                 .connectString(zkUtil.getZooKeeperConnectString())\n                 .build();\n     }"}]}