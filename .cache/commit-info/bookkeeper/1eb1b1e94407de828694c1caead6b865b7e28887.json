{"sha":"1eb1b1e94407de828694c1caead6b865b7e28887","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjFlYjFiMWU5NDQwN2RlODI4Njk0YzFjYWVhZDZiODY1YjdlMjg4ODc=","commit":{"author":{"name":"Yiming Zang","email":"yzang@twitter.com","date":"2016-08-10T23:18:53Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-28T00:49:27Z"},"message":"DL-105: Make compression stats available per stream","tree":{"sha":"7c984fc47ad0d90ef0b9fc9fad40aa36104afe57","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/7c984fc47ad0d90ef0b9fc9fad40aa36104afe57"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/1eb1b1e94407de828694c1caead6b865b7e28887","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1eb1b1e94407de828694c1caead6b865b7e28887","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1eb1b1e94407de828694c1caead6b865b7e28887","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1eb1b1e94407de828694c1caead6b865b7e28887/comments","author":null,"committer":null,"parents":[{"sha":"9eabddb64a0b47d7c2c2096e571f5f2586f28d11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9eabddb64a0b47d7c2c2096e571f5f2586f28d11","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9eabddb64a0b47d7c2c2096e571f5f2586f28d11"}],"stats":{"total":29,"additions":21,"deletions":8},"files":[{"sha":"281c6374a0f69a7bd3948c1b73386c89d313a4f5","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogNamespace.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java?ref=1eb1b1e94407de828694c1caead6b865b7e28887","patch":"@@ -512,7 +512,8 @@ public void deleteLog(String logName)\n                 logName,\n                 ClientSharingOption.SharedClients,\n                 Optional.<DistributedLogConfiguration>absent(),\n-                Optional.<DynamicDistributedLogConfiguration>absent());\n+                Optional.<DynamicDistributedLogConfiguration>absent(),\n+                Optional.<StatsLogger>absent());\n         dlm.delete();\n     }\n \n@@ -521,13 +522,15 @@ public DistributedLogManager openLog(String logName)\n             throws InvalidStreamNameException, IOException {\n         return openLog(logName,\n                 Optional.<DistributedLogConfiguration>absent(),\n-                Optional.<DynamicDistributedLogConfiguration>absent());\n+                Optional.<DynamicDistributedLogConfiguration>absent(),\n+                Optional.<StatsLogger>absent());\n     }\n \n     @Override\n     public DistributedLogManager openLog(String logName,\n                                          Optional<DistributedLogConfiguration> logConf,\n-                                         Optional<DynamicDistributedLogConfiguration> dynamicLogConf)\n+                                         Optional<DynamicDistributedLogConfiguration> dynamicLogConf,\n+                                         Optional<StatsLogger> perStreamStatsLogger)\n             throws InvalidStreamNameException, IOException {\n         validateName(logName);\n         Optional<URI> uri = FutureUtils.result(metadataStore.getLogLocation(logName));\n@@ -539,7 +542,8 @@ public DistributedLogManager openLog(String logName,\n                 logName,\n                 ClientSharingOption.SharedClients,\n                 logConf,\n-                dynamicLogConf);\n+                dynamicLogConf,\n+                perStreamStatsLogger);\n     }\n \n     @Override\n@@ -780,7 +784,8 @@ public DistributedLogManager createDistributedLogManager(\n                 nameOfLogStream,\n                 clientSharingOption,\n                 logConfiguration,\n-                dynamicLogConfiguration\n+                dynamicLogConfiguration,\n+                Optional.<StatsLogger>absent()\n         );\n     }\n \n@@ -806,7 +811,8 @@ protected DistributedLogManager createDistributedLogManager(\n             String nameOfLogStream,\n             ClientSharingOption clientSharingOption,\n             Optional<DistributedLogConfiguration> logConfiguration,\n-            Optional<DynamicDistributedLogConfiguration> dynamicLogConfiguration)\n+            Optional<DynamicDistributedLogConfiguration> dynamicLogConfiguration,\n+            Optional<StatsLogger> perStreamStatsLogger)\n         throws InvalidStreamNameException, IOException {\n         // Make sure the name is well formed\n         validateName(nameOfLogStream);\n@@ -872,6 +878,8 @@ protected DistributedLogManager createDistributedLogManager(\n             dlmLedgerAlloctor = this.allocator;\n             dlmLogSegmentRollingPermitManager = this.logSegmentRollingPermitManager;\n         }\n+        // if there's a specified perStreamStatsLogger, user it, otherwise use the default one.\n+        StatsLogger perLogStatsLogger = perStreamStatsLogger.or(this.perLogStatsLogger);\n \n         return new BKDistributedLogManager(\n                 nameOfLogStream,                    /* Log Name */"},{"sha":"b5abe9f71b5dd5ad3946793a91752fefc1ec359c","filename":"src/main/java/com/twitter/distributedlog/namespace/DistributedLogNamespace.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fnamespace%2FDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fnamespace%2FDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fnamespace%2FDistributedLogNamespace.java?ref=1eb1b1e94407de828694c1caead6b865b7e28887","patch":"@@ -30,6 +30,8 @@\n import java.io.IOException;\n import java.util.Iterator;\n \n+import org.apache.bookkeeper.stats.StatsLogger;\n+\n /**\n  * A namespace is the basic unit for managing a set of distributedlogs.\n  *\n@@ -128,7 +130,8 @@ DistributedLogManager openLog(String logName)\n      */\n     DistributedLogManager openLog(String logName,\n                                   Optional<DistributedLogConfiguration> logConf,\n-                                  Optional<DynamicDistributedLogConfiguration> dynamicLogConf)\n+                                  Optional<DynamicDistributedLogConfiguration> dynamicLogConf,\n+                                  Optional<StatsLogger> perStreamStatsLogger)\n             throws InvalidStreamNameException, IOException;\n \n     /**"},{"sha":"e5063cc7a51516db73dcc012005f13dd8f963478","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderWriter.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1eb1b1e94407de828694c1caead6b865b7e28887/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java?ref=1eb1b1e94407de828694c1caead6b865b7e28887","patch":"@@ -45,6 +45,7 @@\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.feature.FixedValueFeature;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -1979,7 +1980,8 @@ public void testCreateLogStreamWithDifferentReplicationFactor() throws Exception\n         dlm = namespace.openLog(\n                 name + \"-custom\",\n                 Optional.<DistributedLogConfiguration>absent(),\n-                Optional.of(dynConf));\n+                Optional.of(dynConf),\n+                Optional.<StatsLogger>absent());\n         writer = dlm.startAsyncLogSegmentNonPartitioned();\n         FutureUtils.result(writer.write(DLMTestUtil.getLogRecordInstance(1L)));\n         segments = dlm.getLogSegments();"}]}