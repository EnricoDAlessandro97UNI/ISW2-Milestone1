{"sha":"15d6f600e7158e2eecb0ae7231455305e5d1ceaa","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjE1ZDZmNjAwZTcxNThlMmVlY2IwYWU3MjMxNDU1MzA1ZTVkMWNlYWE=","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2017-01-11T06:34:59Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-11T06:34:59Z"},"message":"BOOKKEEPER-992: ReadLog Command Enhancement\n\n- Take arguments lid and eid and prints just that entry\n- Take arguments of position range and print entries\nwhich are located in that position range\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #102 from reddycharan/readlogcommand","tree":{"sha":"f02293edf56761b6808ec4dbb3f0b2650d77f265","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f02293edf56761b6808ec4dbb3f0b2650d77f265"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/15d6f600e7158e2eecb0ae7231455305e5d1ceaa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/15d6f600e7158e2eecb0ae7231455305e5d1ceaa","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/15d6f600e7158e2eecb0ae7231455305e5d1ceaa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/15d6f600e7158e2eecb0ae7231455305e5d1ceaa/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f53cbf82758af7f620ecd1506c76801bd0e75c86","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/f53cbf82758af7f620ecd1506c76801bd0e75c86","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/f53cbf82758af7f620ecd1506c76801bd0e75c86"}],"stats":{"total":127,"additions":125,"deletions":2},"files":[{"sha":"9165c80ea164e87c19f11281e776a8e9742c06e3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":125,"deletions":2,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/15d6f600e7158e2eecb0ae7231455305e5d1ceaa/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/15d6f600e7158e2eecb0ae7231455305e5d1ceaa/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=15d6f600e7158e2eecb0ae7231455305e5d1ceaa","patch":"@@ -76,6 +76,7 @@\n import org.apache.commons.io.HexDump;\n import org.apache.commons.io.output.ByteArrayOutputStream;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.mutable.MutableBoolean;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n@@ -870,6 +871,10 @@ class ReadLogCmd extends MyCommand {\n         ReadLogCmd() {\n             super(CMD_READLOG);\n             rlOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n+            rlOpts.addOption(\"l\", \"ledgerid\", true, \"Ledger ID\");\n+            rlOpts.addOption(\"e\", \"entryid\", true, \"EntryID\");\n+            rlOpts.addOption(\"sp\", \"startpos\", true, \"Start Position\");\n+            rlOpts.addOption(\"ep\", \"endpos\", true, \"End Position\");\n         }\n \n         @Override\n@@ -901,8 +906,26 @@ public int runCmd(CommandLine cmdLine) throws Exception {\n                 String idString = name.split(\"\\\\.\")[0];\n                 logId = Long.parseLong(idString, 16);\n             }\n+\n+            final long lId = getOptionLongValue(cmdLine, \"ledgerid\", -1);\n+            final long eId = getOptionLongValue(cmdLine, \"entryid\", -1);\n+            final long startpos = getOptionLongValue(cmdLine, \"startpos\", -1);\n+            final long endpos = getOptionLongValue(cmdLine, \"endpos\", -1);\n+\n             // scan entry log\n-            scanEntryLog(logId, printMsg);\n+            if (startpos != -1) {\n+                if ((endpos != -1) && (endpos < startpos)) {\n+                    System.err\n+                            .println(\"ERROR: StartPosition of the range should be lesser than or equal to EndPosition\");\n+                    return -1;\n+                }\n+                scanEntryLogForPositionRange(logId, startpos, endpos, printMsg);\n+            } else if (lId != -1) {\n+                scanEntryLogForSpecificEntry(logId, lId, eId, printMsg);\n+            } else {\n+                scanEntryLog(logId, printMsg);\n+            }\n+\n             return 0;\n         }\n \n@@ -913,7 +936,8 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readlog      [-msg] <entry_log_id | entry_log_file_name>\";\n+            return \"readlog      [-msg] <entry_log_id | entry_log_file_name> [-ledgerid <ledgerid> [-entryid <entryid>]] \"\n+                    + \"[-startpos <startEntryLogBytePos> [-endpos <endEntryLogBytePos>]]\";\n         }\n \n         @Override\n@@ -1912,6 +1936,105 @@ public void process(long ledgerId, long startPos, ByteBuffer entry) {\n         });\n     }\n \n+    /**\n+     * Scan over an entry log file for a particular entry\n+     * \n+     * @param logId\n+     *          Entry Log File id.\n+     * @param ledgerId\n+     *          id of the ledger\n+     * @param entryId\n+     *          entryId of the ledger we are looking for (-1 for all of the entries of the ledger)\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     * @throws Exception\n+     */\n+    protected void scanEntryLogForSpecificEntry(long logId, final long lId, final long eId, final boolean printMsg)\n+            throws Exception {\n+        System.out.println(\"Scan entry log \" + logId + \" (\" + Long.toHexString(logId) + \".log)\" + \" for LedgerId \" + lId\n+                + ((eId == -1) ? \"\" : \" for EntryId \" + eId));\n+        final MutableBoolean entryFound = new MutableBoolean(false);\n+        scanEntryLog(logId, new EntryLogScanner() {\n+            @Override\n+            public boolean accept(long ledgerId) {\n+                return ((lId == ledgerId) && ((!entryFound.booleanValue()) || (eId == -1)));\n+            }\n+\n+            @Override\n+            public void process(long ledgerId, long startPos, ByteBuffer entry) {\n+                long entrysLedgerId = entry.getLong();\n+                long entrysEntryId = entry.getLong();\n+                entry.rewind();\n+                if ((ledgerId == entrysLedgerId) && (ledgerId == lId) && ((entrysEntryId == eId)) || (eId == -1)) {\n+                    entryFound.setValue(true);\n+                    formatEntry(startPos, entry, printMsg);\n+                }\n+            }\n+        });\n+        if (!entryFound.booleanValue()) {\n+            System.out.println(\"LedgerId \" + lId + ((eId == -1) ? \"\" : \" EntryId \" + eId)\n+                    + \" is not available in the entry log \" + logId + \" (\" + Long.toHexString(logId) + \".log)\");\n+        }\n+    }\n+\n+    /**\n+     * Scan over an entry log file for entries in the given position range\n+     * \n+     * @param logId\n+     *          Entry Log File id.\n+     * @param rangeStartPos\n+     *          Start position of the entry we are looking for\n+     * @param rangeEndPos\n+     *          End position of the entry we are looking for (-1 for till the end of the entrylog)\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     * @throws Exception\n+     */\n+    protected void scanEntryLogForPositionRange(long logId, final long rangeStartPos, final long rangeEndPos, final boolean printMsg)\n+ throws Exception {\n+        System.out.println(\"Scan entry log \" + logId + \" (\" + Long.toHexString(logId) + \".log)\" + \" for PositionRange: \"\n+                + rangeStartPos + \" - \" + rangeEndPos);\n+        final MutableBoolean entryFound = new MutableBoolean(false);\n+        scanEntryLog(logId, new EntryLogScanner() {\n+            private MutableBoolean stopScanning = new MutableBoolean(false);\n+\n+            @Override\n+            public boolean accept(long ledgerId) {\n+                return !stopScanning.booleanValue();\n+            }\n+\n+            @Override\n+            public void process(long ledgerId, long entryStartPos, ByteBuffer entry) {\n+                if (!stopScanning.booleanValue()) {\n+                    if ((rangeEndPos != -1) && (entryStartPos > rangeEndPos)) {\n+                        stopScanning.setValue(true);\n+                    } else {\n+                        int entrySize = entry.limit();\n+                        /**\n+                         * entrySize of an entry (inclusive of payload and\n+                         * header) value is stored as int value in log file, but\n+                         * it is not counted in the entrySize, hence for calculating\n+                         * the end position of the entry we need to add additional\n+                         * 4 (intsize of entrySize). Please check\n+                         * EntryLogger.scanEntryLog.\n+                         */\n+                        long entryEndPos = entryStartPos + entrySize + 4 - 1;\n+                        if (((rangeEndPos == -1) || (entryStartPos <= rangeEndPos)) && (rangeStartPos <= entryEndPos)) {\n+                            formatEntry(entryStartPos, entry, printMsg);\n+                            entryFound.setValue(true);\n+                        }\n+                    }\n+                }\n+            }\n+        });\n+        if (!entryFound.booleanValue()) {\n+            System.out.println(\"Entry log \" + logId + \" (\" + Long.toHexString(logId)\n+                    + \".log) doesn't has any entry in the range \" + rangeStartPos + \" - \" + rangeEndPos\n+                    + \". Probably the position range, you have provided is lesser than the LOGFILE_HEADER_SIZE (1024) \"\n+                    + \"or greater than the current log filesize.\");\n+        }\n+    }\n+    \n     /**\n      * Scan a journal file\n      *"}]}