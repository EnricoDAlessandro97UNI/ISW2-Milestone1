{"sha":"c43858b5095318b50f4c7f86fc33b0a9e454bee5","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmM0Mzg1OGI1MDk1MzE4YjUwZjRjN2Y4NmZjMzNiMGE5ZTQ1NGJlZTU=","commit":{"author":{"name":"Robin Dhamankar","email":"robindh@Robins-MacBook-Air.local","date":"2016-07-31T05:56:28Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-07-31T05:56:28Z"},"message":"BOOKKEEPER-941: Feature Switches for controling client and server behavior\n\n- Introduce Features that are dynamic configuration options\n- Allow specifying Features as configuration parameters\n\nThis is a port of the feature switches following changes\nhttps://github.com/twitter/bookkeeper/commit/c2a092ab9b585f1d30d9e9b9dead0533efa49855\nhttps://github.com/twitter/bookkeeper/commit/f9762d126e311a6b129e6e169dc62c2a0bdb7b4a\n\nAuthor: Robin Dhamankar <robindh@Robins-MacBook-Air.local>\n\nReviewers: Matteo Merli <mmerli@apache.org>, Sijie Guo <sijie@apache.org>\n\nCloses #54 from robindh/FeatureSwitches","tree":{"sha":"126946e4d21a5ee1aed142f4632375528a62d764","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/126946e4d21a5ee1aed142f4632375528a62d764"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/c43858b5095318b50f4c7f86fc33b0a9e454bee5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c43858b5095318b50f4c7f86fc33b0a9e454bee5","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/c43858b5095318b50f4c7f86fc33b0a9e454bee5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c43858b5095318b50f4c7f86fc33b0a9e454bee5/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8324632b2983beba1528ab53a999340756c7f563","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/8324632b2983beba1528ab53a999340756c7f563","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/8324632b2983beba1528ab53a999340756c7f563"}],"stats":{"total":334,"additions":334,"deletions":0},"files":[{"sha":"adf08ff48bd05d9494085b8df3b35a9bb86f3c17","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.configuration.SystemConfiguration;\n \n+import org.apache.bookkeeper.feature.Feature;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.util.ReflectionUtils;\n \n@@ -243,4 +244,16 @@ public int getMetastoreMaxEntriesPerScan() {\n     public void setMetastoreMaxEntriesPerScan(int maxEntries) {\n         setProperty(METASTORE_MAX_ENTRIES_PER_SCAN, maxEntries);\n     }\n+\n+    public void setFeature(String configProperty, Feature feature) {\n+        setProperty(configProperty, feature);\n+    }\n+\n+    public Feature getFeature(String configProperty, Feature defaultValue) {\n+        if (null == getProperty(configProperty)) {\n+            return defaultValue;\n+        } else {\n+            return (Feature)getProperty(configProperty);\n+        }\n+    }\n }"},{"sha":"95c9981db231fe67bbca579b3838f2a8d2df751f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/CacheableFeatureProvider.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FCacheableFeatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FCacheableFeatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FCacheableFeatureProvider.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,85 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * Cacheable Feature Provider\n+ */\n+public abstract class CacheableFeatureProvider<T extends Feature> implements FeatureProvider {\n+\n+    protected final String scope;\n+    protected final ConcurrentMap<String, FeatureProvider> scopes =\n+            new ConcurrentHashMap<String, FeatureProvider>();\n+    protected final ConcurrentMap<String, T> features =\n+            new ConcurrentHashMap<String, T>();\n+\n+    protected CacheableFeatureProvider(String scope) {\n+        this.scope = scope;\n+    }\n+\n+    protected String makeName(String name) {\n+        if (StringUtils.isBlank(scope)) {\n+            return name;\n+        } else {\n+            return scope + \".\" + name;\n+        }\n+    }\n+\n+    @Override\n+    public T getFeature(String name) {\n+        T feature = features.get(name);\n+        if (null == feature) {\n+            T newFeature = makeFeature(makeName(name));\n+            T oldFeature = features.putIfAbsent(name, newFeature);\n+            if (null == oldFeature) {\n+                feature = newFeature;\n+            } else {\n+                feature = oldFeature;\n+            }\n+        }\n+        return feature;\n+    }\n+\n+    protected abstract T makeFeature(String featureName);\n+\n+    @Override\n+    public FeatureProvider scope(String name) {\n+        FeatureProvider provider = scopes.get(name);\n+        if (null == provider) {\n+            FeatureProvider newProvider = makeProvider(makeName(name));\n+            FeatureProvider oldProvider = scopes.putIfAbsent(name, newProvider);\n+            if (null == oldProvider) {\n+                provider = newProvider;\n+            } else {\n+                provider = oldProvider;\n+            }\n+        }\n+        return provider;\n+    }\n+\n+    protected abstract FeatureProvider makeProvider(String fullScopeName);\n+}"},{"sha":"ab9fae97b7a959d835da3a7b73d121ef031daa38","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/Feature.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeature.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,51 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+/**\n+ * This interface represents a feature.\n+ */\n+public interface Feature {\n+    public static int FEATURE_AVAILABILITY_MAX_VALUE = 100;\n+\n+    /**\n+     * Returns a textual representation of the feature.\n+     *\n+     * @return name of the feature.\n+     */\n+    String name();\n+\n+    /**\n+     * Returns the availability of this feature, an integer between 0 and 100.\n+     *\n+     * @return the availability of this feature.\n+     */\n+    int availability();\n+\n+    /**\n+     * Whether this feature is available or not.\n+     *\n+     * @return true if this feature is available, otherwise false.\n+     */\n+    boolean isAvailable();\n+}\n+"},{"sha":"04686b7f8a5d7a028cb2c355d56e6224657b8753","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/FeatureProvider.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFeatureProvider.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,44 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+/**\n+ * Provider to provide features.\n+ */\n+public interface FeatureProvider {\n+    /**\n+     * Return the feature with given name.\n+     *\n+     * @param name feature name\n+     * @return feature instance\n+     */\n+    Feature getFeature(String name);\n+\n+    /**\n+     * Provide the feature provider under scope <i>name</i>.\n+     *\n+     * @param name\n+     *          scope name.\n+     * @return feature provider under scope <i>name</i>\n+     */\n+    FeatureProvider scope(String name);\n+}"},{"sha":"825276bd3a8d462ba30fd296b841459f18b47158","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/FixedValueFeature.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFixedValueFeature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFixedValueFeature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FFixedValueFeature.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,52 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+public class FixedValueFeature implements Feature {\n+    protected final String name;\n+    protected int availability;\n+\n+    public FixedValueFeature(String name, int availability) {\n+        this.name = name;\n+        this.availability = availability;\n+    }\n+\n+    public FixedValueFeature(String name, boolean available) {\n+        this.name = name;\n+        this.availability = available ? FEATURE_AVAILABILITY_MAX_VALUE : 0;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return null;\n+    }\n+\n+    @Override\n+    public int availability() {\n+        return availability;\n+    }\n+\n+    @Override\n+    public boolean isAvailable() {\n+        return availability() > 0;\n+    }\n+}"},{"sha":"f175bf01c19aa14a1f3ff6bffeba68111ac365b7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/SettableFeature.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeature.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeature.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeature.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,41 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+public class SettableFeature extends FixedValueFeature {\n+    public SettableFeature(String name, int initialAvailability) {\n+        super(name, initialAvailability);\n+    }\n+\n+    public SettableFeature(String name, boolean isAvailabile) {\n+        super(name, isAvailabile);\n+    }\n+\n+    public void set(int availability) {\n+        this.availability = availability;\n+    }\n+\n+    public void set(boolean isAvailabile) {\n+        this.availability = isAvailabile ? FEATURE_AVAILABILITY_MAX_VALUE : 0;\n+    }\n+\n+}"},{"sha":"e21ad9db8e61b22e88a8af27711e7266de9f24d0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/feature/SettableFeatureProvider.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c43858b5095318b50f4c7f86fc33b0a9e454bee5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ffeature%2FSettableFeatureProvider.java?ref=c43858b5095318b50f4c7f86fc33b0a9e454bee5","patch":"@@ -0,0 +1,48 @@\n+package org.apache.bookkeeper.feature;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+/**\n+ * A provider will provide settable features.\n+ */\n+public class SettableFeatureProvider extends CacheableFeatureProvider<SettableFeature> {\n+\n+    public final static FeatureProvider DISABLE_ALL = new SettableFeatureProvider(\"\", 0);\n+\n+    protected final int availability;\n+\n+    public SettableFeatureProvider(String scope, int availability) {\n+        super(scope);\n+        this.availability = availability;\n+    }\n+\n+    @Override\n+    protected SettableFeature makeFeature(String featureName) {\n+        return new SettableFeature(featureName, availability);\n+    }\n+\n+    @Override\n+    protected FeatureProvider makeProvider(String fullScopeName) {\n+        return new SettableFeatureProvider(fullScopeName, availability);\n+    }\n+\n+}"}]}