{"sha":"123eccd435a4a96a9147ed4a24efbe9025fe79ba","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjEyM2VjY2Q0MzVhNGE5NmE5MTQ3ZWQ0YTI0ZWZiZTkwMjVmZTc5YmE=","commit":{"author":{"name":"Govind Menon","email":"govindappumenon@gmail.com","date":"2017-03-22T21:54:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-22T21:54:46Z"},"message":"BOOKKEEPER-1009: Use multiple journals in bookie\n\nMostly https://github.com/apache/bookkeeper/pull/71 with comments addressed\n\nWill shortly add tests.\n\nmerlimat  Would it be ok to close 71?\n\nAuthor: Govind Menon <govindappumenon@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nCloses #115 from govind-menon/BOOKKEEPER-1009_B","tree":{"sha":"b46bb727e85f81e419601c34543565257135dae8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/b46bb727e85f81e419601c34543565257135dae8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/123eccd435a4a96a9147ed4a24efbe9025fe79ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/123eccd435a4a96a9147ed4a24efbe9025fe79ba","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/123eccd435a4a96a9147ed4a24efbe9025fe79ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/123eccd435a4a96a9147ed4a24efbe9025fe79ba/comments","author":{"login":"govind-menon","id":2053016,"node_id":"MDQ6VXNlcjIwNTMwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2053016?v=4","gravatar_id":"","url":"https://api.github.com/users/govind-menon","html_url":"https://github.com/govind-menon","followers_url":"https://api.github.com/users/govind-menon/followers","following_url":"https://api.github.com/users/govind-menon/following{/other_user}","gists_url":"https://api.github.com/users/govind-menon/gists{/gist_id}","starred_url":"https://api.github.com/users/govind-menon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/govind-menon/subscriptions","organizations_url":"https://api.github.com/users/govind-menon/orgs","repos_url":"https://api.github.com/users/govind-menon/repos","events_url":"https://api.github.com/users/govind-menon/events{/privacy}","received_events_url":"https://api.github.com/users/govind-menon/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"91db1254c1118c4efa1c520f61850a3382f41fff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/91db1254c1118c4efa1c520f61850a3382f41fff","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/91db1254c1118c4efa1c520f61850a3382f41fff"}],"stats":{"total":595,"additions":433,"deletions":162},"files":[{"sha":"b3e0ed3b46f29049d44c83f49ed63214d0d31ba3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":187,"deletions":102,"changes":289,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -30,10 +30,7 @@\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import java.util.*;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n@@ -44,7 +41,9 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n \n+import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n@@ -107,14 +106,14 @@ public class Bookie extends BookieCriticalThread {\n \n     private final static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n-    final File journalDirectory;\n+    final List<File> journalDirectories;\n     final ServerConfiguration conf;\n \n     final SyncThread syncThread;\n     final LedgerManagerFactory ledgerManagerFactory;\n     final LedgerManager ledgerManager;\n     final LedgerStorage ledgerStorage;\n-    final Journal journal;\n+    final List<Journal> journals;\n \n     final HandleFactory handles;\n \n@@ -323,51 +322,70 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             allLedgerDirs.addAll(indexDirsManager.getAllLedgerDirs());\n         }\n         if (zk == null) { // exists only for testing, just make sure directories are correct\n-            checkDirectoryStructure(journalDirectory);\n+\n+            for (File journalDirectory : journalDirectories) {\n+                checkDirectoryStructure(journalDirectory);\n+            }\n+\n             for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n             }\n             return;\n         }\n+\n         if (conf.getAllowStorageExpansion()) {\n-            checkEnvironmentWithStorageExpansion(conf, zk, journalDirectory, allLedgerDirs);\n+            checkEnvironmentWithStorageExpansion(conf, zk, journalDirectories, allLedgerDirs);\n             return;\n         }\n+\n         try {\n             boolean newEnv = false;\n             List<File> missedCookieDirs = new ArrayList<File>();\n-            Cookie journalCookie = null;\n+            List<Cookie> journalCookies = Lists.newArrayList();\n             // try to read cookie from journal directory.\n-            try {\n-                journalCookie = Cookie.readFromDirectory(journalDirectory);\n-                if (journalCookie.isBookieHostCreatedFromIp()) {\n-                    conf.setUseHostNameAsBookieID(false);\n-                } else {\n-                    conf.setUseHostNameAsBookieID(true);\n+            for (File journalDirectory : journalDirectories) {\n+                try {\n+                    Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                    journalCookies.add(journalCookie);\n+                    if (journalCookie.isBookieHostCreatedFromIp()) {\n+                        conf.setUseHostNameAsBookieID(false);\n+                    } else {\n+                        conf.setUseHostNameAsBookieID(true);\n+                    }\n+                } catch (FileNotFoundException fnf) {\n+                    newEnv = true;\n+                    missedCookieDirs.add(journalDirectory);\n                 }\n-            } catch (FileNotFoundException fnf) {\n-                newEnv = true;\n-                missedCookieDirs.add(journalDirectory);\n             }\n+\n             String instanceId = getInstanceId(conf, zk);\n             Cookie.Builder builder = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n                 builder.setInstanceId(instanceId);\n             }\n             Cookie masterCookie = builder.build();\n+            Versioned<Cookie> zkCookie = null;\n             try {\n-                Versioned<Cookie> zkCookie = Cookie.readFromZooKeeper(zk, conf);\n-                masterCookie.verify(zkCookie.getValue());\n+                zkCookie = Cookie.readFromZooKeeper(zk, conf);\n+                // If allowStorageExpansion option is set, we should\n+                // make sure that the new set of ledger/index dirs\n+                // is a super set of the old; else, we fail the cookie check\n+                masterCookie.verifyIsSuperSet(zkCookie.getValue());\n             } catch (KeeperException.NoNodeException nne) {\n                 // can occur in cases:\n                 // 1) new environment or\n                 // 2) done only metadata format and started bookie server.\n             }\n-            checkDirectoryStructure(journalDirectory);\n-\n+            for (File journalDirectory : journalDirectories) {\n+                checkDirectoryStructure(journalDirectory);\n+            }\n             if(!newEnv){\n-                masterCookie.verify(journalCookie);\n+                for(Cookie journalCookie: journalCookies) {\n+                    masterCookie.verify(journalCookie);\n+                }\n             }\n+\n+\n             for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n                 try {\n@@ -379,20 +397,46 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             }\n \n             if (!newEnv && missedCookieDirs.size() > 0) {\n-                LOG.error(\"Cookie exists in zookeeper, but not in all local directories. \"\n-                          + \" Directories missing cookie file are \" + missedCookieDirs);\n-                throw new BookieException.InvalidCookieException();\n+                // If we find that any of the dirs in missedCookieDirs, existed\n+                // previously, we stop because we could be missing data\n+                // Also, if a new ledger dir is being added, we make sure that\n+                // that dir is empty. Else, we reject the request\n+                Set<String> existingLedgerDirs = Sets.newHashSet();\n+                for(Cookie journalCookie : journalCookies) {\n+                    Collections.addAll(existingLedgerDirs, journalCookie.getLedgerDirPathsFromCookie());\n+                }\n+                List<File> dirsMissingData = new ArrayList<File>();\n+                List<File> nonEmptyDirs = new ArrayList<File>();\n+                for (File dir : missedCookieDirs) {\n+                    if (existingLedgerDirs.contains(dir.getParent())) {\n+                        // if one of the existing ledger dirs doesn't have cookie,\n+                        // let us not proceed further\n+                        dirsMissingData.add(dir);\n+                        continue;\n+                    }\n+                    String[] content = dir.list();\n+                    if (content != null && content.length != 0) {\n+                        nonEmptyDirs.add(dir);\n+                    }\n+                }\n+                if (dirsMissingData.size() > 0 || nonEmptyDirs.size() > 0) {\n+                    LOG.error(\"Either not all local directories have cookies or directories being added \"\n+                            + \" newly are not empty. \"\n+                            + \"Directories missing cookie file are: \" + dirsMissingData\n+                            + \" New directories that are not empty are: \" + nonEmptyDirs);\n+                    throw new BookieException.InvalidCookieException();\n+                }\n             }\n \n-            if (newEnv) {\n-                if (missedCookieDirs.size() > 0) {\n-                    LOG.info(\"Directories missing cookie file are {}\", missedCookieDirs);\n+            if (missedCookieDirs.size() > 0) {\n+                LOG.info(\"Stamping new cookies on all dirs {}\", missedCookieDirs);\n+                for (File journalDirectory : journalDirectories) {\n                     masterCookie.writeToDirectory(journalDirectory);\n-                    for (File dir : allLedgerDirs) {\n-                        masterCookie.writeToDirectory(dir);\n-                    }\n                 }\n-                masterCookie.writeToZooKeeper(zk, conf, Version.NEW);\n+                for (File dir : allLedgerDirs) {\n+                    masterCookie.writeToDirectory(dir);\n+                }\n+                masterCookie.writeToZooKeeper(zk, conf, zkCookie != null ? zkCookie.getVersion() : Version.NEW);\n             }\n         } catch (KeeperException ke) {\n             LOG.error(\"Couldn't access cookie in zookeeper\", ke);\n@@ -410,23 +454,27 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n     }\n \n     public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf,\n-            ZooKeeper zk, File journalDirectory, List<File> allLedgerDirs) throws BookieException, IOException {\n+            ZooKeeper zk, List<File> journalDirectories, List<File> allLedgerDirs) throws BookieException, IOException {\n         try {\n             boolean newEnv = false;\n             List<File> missedCookieDirs = new ArrayList<File>();\n-            Cookie journalCookie = null;\n+            List<Cookie> journalCookies = Lists.newArrayList();\n             // try to read cookie from journal directory.\n-            try {\n-                journalCookie = Cookie.readFromDirectory(journalDirectory);\n-                if (journalCookie.isBookieHostCreatedFromIp()) {\n-                    conf.setUseHostNameAsBookieID(false);\n-                } else {\n-                    conf.setUseHostNameAsBookieID(true);\n+            for (File journalDirectory : journalDirectories) {\n+                try {\n+                    Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                    journalCookies.add(journalCookie);\n+                    if (journalCookie.isBookieHostCreatedFromIp()) {\n+                        conf.setUseHostNameAsBookieID(false);\n+                    } else {\n+                        conf.setUseHostNameAsBookieID(true);\n+                    }\n+                } catch (FileNotFoundException fnf) {\n+                    newEnv = true;\n+                    missedCookieDirs.add(journalDirectory);\n                 }\n-            } catch (FileNotFoundException fnf) {\n-                newEnv = true;\n-                missedCookieDirs.add(journalDirectory);\n             }\n+\n             String instanceId = getInstanceId(conf, zk);\n             Cookie.Builder builder = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n@@ -445,12 +493,16 @@ public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf\n                 // 1) new environment or\n                 // 2) done only metadata format and started bookie server.\n             }\n-            checkDirectoryStructure(journalDirectory);\n-\n+            for (File journalDirectory : journalDirectories) {\n+                checkDirectoryStructure(journalDirectory);\n+            }\n             if(!newEnv){\n-                masterCookie.verifyIsSuperSet(journalCookie);\n+                for(Cookie journalCookie: journalCookies) {\n+                    masterCookie.verifyIsSuperSet(journalCookie);\n+                }\n             }\n \n+\n             for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n                 try {\n@@ -466,7 +518,10 @@ public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf\n                 // previously, we stop because we could be missing data\n                 // Also, if a new ledger dir is being added, we make sure that\n                 // that dir is empty. Else, we reject the request\n-                Set<String> existingLedgerDirs = Sets.newHashSet(journalCookie.getLedgerDirPathsFromCookie());\n+                Set<String> existingLedgerDirs = Sets.newHashSet();\n+                for(Cookie journalCookie : journalCookies) {\n+                    Collections.addAll(existingLedgerDirs, journalCookie.getLedgerDirPathsFromCookie());\n+                }\n                 List<File> dirsMissingData = new ArrayList<File>();\n                 List<File> nonEmptyDirs = new ArrayList<File>();\n                 for (File dir : missedCookieDirs) {\n@@ -492,7 +547,9 @@ public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf\n \n             if (missedCookieDirs.size() > 0) {\n                 LOG.info(\"Stamping new cookies on all dirs {}\", missedCookieDirs);\n-                masterCookie.writeToDirectory(journalDirectory);\n+                for (File journalDirectory : journalDirectories) {\n+                    masterCookie.writeToDirectory(journalDirectory);\n+                }\n                 for (File dir : allLedgerDirs) {\n                     masterCookie.writeToDirectory(dir);\n                 }\n@@ -589,7 +646,11 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         this.bookieReadonlyRegistrationPath =\n             this.bookieRegistrationPath + BookKeeperConstants.READONLY;\n         this.conf = conf;\n-        this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n+        this.journalDirectories = Lists.newArrayList();\n+        for (File journalDirectory : conf.getJournalDirs()) {\n+            this.journalDirectories.add(getCurrentDirectory(journalDirectory));\n+        }\n+\n         this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n                 statsLogger.scope(LD_LEDGER_SCOPE));\n         File[] idxDirs = conf.getIndexDirs();\n@@ -611,16 +672,22 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // configured directories. When disk errors or all the ledger\n         // directories are full, would throws exception and fail bookie startup.\n         this.ledgerDirsManager.init();\n-        // instantiate the journal\n-        journal = new Journal(conf, ledgerDirsManager, statsLogger.scope(JOURNAL_SCOPE));\n+        // instantiate the journals\n+        journals = Lists.newArrayList();\n+        for(int i=0 ;i<journalDirectories.size();i++) {\n+            journals.add(new Journal(journalDirectories.get(i),\n+                         conf, ledgerDirsManager, statsLogger.scope(JOURNAL_SCOPE + \"_\" + i)));\n+        }\n+\n+        CheckpointSource checkpointSource = new CheckpointSourceList(journals);\n \n         // Instantiate the ledger storage implementation\n         String ledgerStorageClass = conf.getLedgerStorageClass();\n         LOG.info(\"Using ledger storage: {}\", ledgerStorageClass);\n         ledgerStorage = LedgerStorageFactory.createLedgerStorage(ledgerStorageClass);\n-        ledgerStorage.initialize(conf, ledgerManager, ledgerDirsManager, indexDirsManager, journal, statsLogger);\n+        ledgerStorage.initialize(conf, ledgerManager, ledgerDirsManager, indexDirsManager, checkpointSource, statsLogger);\n         syncThread = new SyncThread(conf, getLedgerDirsListener(),\n-                                    ledgerStorage, journal);\n+                                    ledgerStorage, checkpointSource);\n \n         handles = new HandleFactoryImpl(ledgerStorage);\n \n@@ -657,7 +724,7 @@ private String getMyId() throws UnknownHostException {\n \n     void readJournal() throws IOException, BookieException {\n         long startTs = MathUtils.now();\n-        journal.replay(new JournalScanner() {\n+        JournalScanner scanner = new JournalScanner() {\n             @Override\n             public void process(int journalVersion, long offset, ByteBuffer recBuff) throws IOException {\n                 long ledgerId = recBuff.getLong();\n@@ -705,15 +772,20 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                     throw new IOException(be);\n                 }\n             }\n-        });\n+        };\n+\n+        for (Journal journal : journals) {\n+            journal.replay(scanner);\n+        }\n         long elapsedTs = MathUtils.now() - startTs;\n         LOG.info(\"Finished replaying journal in {} ms.\", elapsedTs);\n     }\n \n     @Override\n     synchronized public void start() {\n         setDaemon(true);\n-        LOG.debug(\"I'm starting a bookie with journal directory {}\", journalDirectory.getName());\n+        LOG.debug(\"I'm starting a bookie with journal directories {}\",\n+                  journalDirectories.stream().map(File::getName).collect(Collectors.joining(\", \")));\n         //Start DiskChecker thread\n         ledgerDirsManager.start();\n         if (indexDirsManager != ledgerDirsManager) {\n@@ -1155,11 +1227,17 @@ public boolean isRunning() {\n     public void run() {\n         // bookie thread wait for journal thread\n         try {\n-            // start journal\n-            journal.start();\n+            // start journals\n+            for (Journal journal: journals) {\n+                journal.start();\n+            }\n+\n             // wait until journal quits\n-            journal.join();\n-            LOG.info(\"Journal thread quits.\");\n+            for (Journal journal: journals) {\n+\n+                journal.join();\n+            }\n+            LOG.info(\"Journal thread(s) quit.\");\n         } catch (InterruptedException ie) {\n             LOG.warn(\"Interrupted on running journal thread : \", ie);\n         }\n@@ -1215,8 +1293,10 @@ synchronized int shutdown(int exitCode) {\n                 // Shutdown the state service\n                 stateService.shutdown();\n \n-                // Shutdown journal\n-                journal.shutdown();\n+                // Shutdown journals\n+                for (Journal journal : journals) {\n+                    journal.shutdown();\n+                }\n                 this.join();\n                 syncThread.shutdown();\n \n@@ -1271,12 +1351,16 @@ private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey)\n             bb.flip();\n \n             if (null == masterKeyCache.putIfAbsent(ledgerId, masterKey)) {\n-                journal.logAddEntry(bb, new NopWriteCallback(), null);\n+                getJournal(ledgerId).logAddEntry(bb, new NopWriteCallback(), null);\n             }\n         }\n         return l;\n     }\n \n+    private Journal getJournal(long ledgerId) {\n+        return journals.get(MathUtils.signSafeMod(ledgerId, journals.size()));\n+    }\n+\n     /**\n      * Add an entry to a ledger as specified by handle.\n      */\n@@ -1290,7 +1374,7 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n         writeBytes.add(entry.remaining());\n \n         LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n-        journal.logAddEntry(entry, cb, ctx);\n+        getJournal(ledgerId).logAddEntry(entry, cb, ctx);\n     }\n \n     /**\n@@ -1407,7 +1491,7 @@ public Future<Boolean> fenceLedger(long ledgerId, byte[] masterKey) throws IOExc\n \n             FutureWriteCallback fwc = new FutureWriteCallback();\n             LOG.debug(\"record fenced state for ledger {} in journal.\", ledgerId);\n-            journal.logAddEntry(bb, fwc, null);\n+            getJournal(ledgerId).logAddEntry(bb, fwc, null);\n             return fwc.getResult();\n         } else {\n             // already fenced\n@@ -1483,56 +1567,57 @@ synchronized public void waitZero() throws InterruptedException {\n      */\n     public static boolean format(ServerConfiguration conf,\n             boolean isInteractive, boolean force) {\n-        File journalDir = conf.getJournalDir();\n-        String[] journalDirFiles =\n-                journalDir.exists() && journalDir.isDirectory() ? journalDir.list() : null;\n-        if (journalDirFiles != null && journalDirFiles.length != 0) {\n-            try {\n-                boolean confirm = false;\n-                if (!isInteractive) {\n-                    // If non interactive and force is set, then delete old\n-                    // data.\n-                    if (force) {\n-                        confirm = true;\n+        for (File journalDir : conf.getJournalDirs()) {\n+            String[] journalDirFiles =\n+                    journalDir.exists() && journalDir.isDirectory() ? journalDir.list() : null;\n+            if (journalDirFiles != null && journalDirFiles.length != 0) {\n+                try {\n+                    boolean confirm = false;\n+                    if (!isInteractive) {\n+                        // If non interactive and force is set, then delete old\n+                        // data.\n+                        if (force) {\n+                            confirm = true;\n+                        } else {\n+                            confirm = false;\n+                        }\n                     } else {\n-                        confirm = false;\n+                        confirm = IOUtils\n+                                .confirmPrompt(\"Are you sure to format Bookie data..?\");\n                     }\n-                } else {\n-                    confirm = IOUtils\n-                            .confirmPrompt(\"Are you sure to format Bookie data..?\");\n-                }\n \n-                if (!confirm) {\n-                    LOG.error(\"Bookie format aborted!!\");\n+                    if (!confirm) {\n+                        LOG.error(\"Bookie format aborted!!\");\n+                        return false;\n+                    }\n+                } catch (IOException e) {\n+                    LOG.error(\"Error during bookie format\", e);\n                     return false;\n                 }\n-            } catch (IOException e) {\n-                LOG.error(\"Error during bookie format\", e);\n-                return false;\n             }\n-        }\n-        if (!cleanDir(journalDir)) {\n-            LOG.error(\"Formatting journal directory failed\");\n-            return false;\n-        }\n-\n-        File[] ledgerDirs = conf.getLedgerDirs();\n-        for (File dir : ledgerDirs) {\n-            if (!cleanDir(dir)) {\n-                LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+            if (!cleanDir(journalDir)) {\n+                LOG.error(\"Formatting journal directory failed\");\n                 return false;\n             }\n-        }\n \n-        // Clean up index directories if they are separate from the ledger dirs\n-        File[] indexDirs = conf.getIndexDirs();\n-        if (null != indexDirs) {\n-            for (File dir : indexDirs) {\n+            File[] ledgerDirs = conf.getLedgerDirs();\n+            for (File dir : ledgerDirs) {\n                 if (!cleanDir(dir)) {\n                     LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n                     return false;\n                 }\n             }\n+\n+            // Clean up index directories if they are separate from the ledger dirs\n+            File[] indexDirs = conf.getIndexDirs();\n+            if (null != indexDirs) {\n+                for (File dir : indexDirs) {\n+                    if (!cleanDir(dir)) {\n+                        LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+                        return false;\n+                    }\n+                }\n+            }\n         }\n \n         LOG.info(\"Bookie format completed successfully\");"},{"sha":"67d0129baa65857f6e5720d719304b3c1b90ad3f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieBean.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieBean.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -45,7 +45,12 @@ public boolean isHidden() {\n \n     @Override\n     public int getQueueLength() {\n-        return bk.journal.getJournalQueueLength();\n+\n+        int totalLength = 0;\n+        for (Journal journal : bk.journals) {\n+            totalLength += journal.getJournalQueueLength();\n+        }\n+        return totalLength;\n     }\n \n }"},{"sha":"9afc5d7073dd7291b040697545a7e174afc5a50c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":60,"deletions":23,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -46,6 +46,7 @@\n import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n+import org.apache.bookkeeper.bookie.Journal;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -93,6 +94,8 @@\n import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AbstractFuture;\n \n+import javax.sql.rowset.serial.SerialRef;\n+\n /**\n  * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster.\n  */\n@@ -128,10 +131,10 @@ public class BookieShell implements Tool {\n     final ServerConfiguration bkConf = new ServerConfiguration();\n     File[] indexDirectories;\n     File[] ledgerDirectories;\n-    File journalDirectory;\n+    File[] journalDirectories;\n \n     EntryLogger entryLogger = null;\n-    Journal journal = null;\n+    List<Journal> journals = null;\n     EntryFormatter formatter;\n \n     int pageSize;\n@@ -958,6 +961,7 @@ class ReadJournalCmd extends MyCommand {\n \n         ReadJournalCmd() {\n             super(CMD_READJOURNAL);\n+            rjOpts.addOption(\"dir\", false, \"Journal directory (needed if more than one journal configured)\");\n             rjOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n         }\n \n@@ -974,6 +978,32 @@ public int runCmd(CommandLine cmdLine) throws Exception {\n             if (cmdLine.hasOption(\"m\")) {\n                 printMsg = true;\n             }\n+\n+            Journal journal = null;\n+            if (getJournals().size() > 1) {\n+                if (!cmdLine.hasOption(\"dir\")) {\n+                    System.err.println(\"ERROR: invalid or missing journal directory\");\n+                    printUsage();\n+                    return -1;\n+                }\n+\n+                File journalDirectory = new File(cmdLine.getOptionValue(\"dir\"));\n+                for (Journal j : getJournals()) {\n+                    if (j.getJournalDirectory().equals(journalDirectory)) {\n+                        journal = j;\n+                        break;\n+                    }\n+                }\n+\n+                if (journal == null) {\n+                    System.err.println(\"ERROR: journal directory not found\");\n+                    printUsage();\n+                    return -1;\n+                }\n+            } else {\n+                journal = getJournals().get(0);\n+            }\n+\n             long journalId;\n             try {\n                 journalId = Long.parseLong(leftArgs[0]);\n@@ -991,7 +1021,7 @@ public int runCmd(CommandLine cmdLine) throws Exception {\n                 journalId = Long.parseLong(idString, 16);\n             }\n             // scan journal\n-            scanJournal(journalId, printMsg);\n+            scanJournal(journal, journalId, printMsg);\n             return 0;\n         }\n \n@@ -1002,7 +1032,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readjournal  [-msg] <journal_id | journal_file_name>\";\n+            return \"readjournal [-dir] [-msg] <journal_id | journal_file_name>\";\n         }\n \n         @Override\n@@ -1134,8 +1164,8 @@ public int runCmd(CommandLine cmdLine) throws Exception {\n             }\n \n             if (all || journal) {\n-                File journalDir = bkConf.getJournalDir();\n-                List<File> journalFiles = listFilesAndSort(new File[] { journalDir }, \"txn\");\n+                File[] journalDirs = bkConf.getJournalDirs();\n+                List<File> journalFiles = listFilesAndSort(journalDirs, \"txn\");\n                 System.out.println(\"--------- Printing the list of Journal Files ---------\");\n                 for (File journalFile : journalFiles) {\n                     System.out.println(journalFile.getName());\n@@ -1418,7 +1448,7 @@ private int updateBookieIdInCookie(final String bookieId, final boolean useHostn\n                     return -1;\n                 }\n                 Cookie newCookie = Cookie.newBuilder(oldCookie.getValue()).setBookieHost(newBookieId).build();\n-                boolean hasCookieUpdatedInDirs = verifyCookie(newCookie, journalDirectory);\n+                boolean hasCookieUpdatedInDirs = verifyCookie(newCookie, journalDirectories[0]);\n                 for (File dir : ledgerDirectories) {\n                     hasCookieUpdatedInDirs &= verifyCookie(newCookie, dir);\n                 }\n@@ -1441,8 +1471,10 @@ private int updateBookieIdInCookie(final String bookieId, final boolean useHostn\n                     }\n                 } else {\n                     // writes newcookie to local dirs\n-                    newCookie.writeToDirectory(journalDirectory);\n-                    LOG.info(\"Updated cookie file present in journalDirectory {}\", journalDirectory);\n+                    for (File journalDirectory : journalDirectories) {\n+                        newCookie.writeToDirectory(journalDirectory);\n+                        LOG.info(\"Updated cookie file present in journalDirectory {}\", journalDirectory);\n+                    }\n                     for (File dir : ledgerDirectories) {\n                         newCookie.writeToDirectory(dir);\n                     }\n@@ -1533,7 +1565,7 @@ int runCmd(CommandLine cmdLine) {\n \n             try {\n                 Bookie.checkEnvironmentWithStorageExpansion(conf, zk,\n-                        journalDirectory, allLedgerDirs);\n+                        Lists.newArrayList(journalDirectories), allLedgerDirs);\n             } catch (BookieException | IOException e) {\n                 LOG.error(\n                         \"Exception while updating cookie for storage expansion\", e);\n@@ -1756,7 +1788,7 @@ public interface UpdateLedgerNotifier {\n     @Override\n     public void setConf(Configuration conf) throws Exception {\n         bkConf.loadConf(conf);\n-        journalDirectory = Bookie.getCurrentDirectory(bkConf.getJournalDir());\n+        journalDirectories = Bookie.getCurrentDirectories(bkConf.getJournalDirs());\n         ledgerDirectories = Bookie.getCurrentDirectories(bkConf.getLedgerDirs());\n         if (null == bkConf.getIndexDirs()) {\n             indexDirectories = ledgerDirectories;\n@@ -1942,11 +1974,14 @@ protected void scanEntryLog(long logId, EntryLogScanner scanner) throws IOExcept\n         entryLogger.scanEntryLog(logId, scanner);\n     }\n \n-    private synchronized Journal getJournal() throws IOException {\n-        if (null == journal) {\n-            journal = new Journal(bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs()));\n+    private synchronized List<Journal> getJournals() throws IOException {\n+        if (null == journals) {\n+            journals = Lists.newArrayListWithCapacity(bkConf.getJournalDirs().length);\n+            for (File journalDir : bkConf.getJournalDirs()) {\n+                journals.add(new Journal(journalDir, bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs())));\n+            }\n         }\n-        return journal;\n+        return journals;\n     }\n \n     /**\n@@ -1957,8 +1992,8 @@ private synchronized Journal getJournal() throws IOException {\n      * @param scanner\n      *          Journal File Scanner\n      */\n-    protected void scanJournal(long journalId, JournalScanner scanner) throws IOException {\n-        getJournal().scanJournal(journalId, 0L, scanner);\n+    protected void scanJournal(Journal journal, long journalId, JournalScanner scanner) throws IOException {\n+        journal.scanJournal(journalId, 0L, scanner);\n     }\n \n     ///\n@@ -2166,9 +2201,9 @@ public void process(long ledgerId, long entryStartPos, ByteBuffer entry) {\n      * @param printMsg\n      *          Whether printing the entry data.\n      */\n-    protected void scanJournal(long journalId, final boolean printMsg) throws Exception {\n+    protected void scanJournal(Journal journal, long journalId, final boolean printMsg) throws Exception {\n         System.out.println(\"Scan journal \" + journalId + \" (\" + Long.toHexString(journalId) + \".txn)\");\n-        scanJournal(journalId, new JournalScanner() {\n+        scanJournal(journal, journalId, new JournalScanner() {\n             boolean printJournalVersion = false;\n             @Override\n             public void process(int journalVersion, long offset, ByteBuffer entry) throws IOException {\n@@ -2185,10 +2220,12 @@ public void process(int journalVersion, long offset, ByteBuffer entry) throws IO\n      * Print last log mark\n      */\n     protected void printLastLogMark() throws IOException {\n-        LogMark lastLogMark = getJournal().getLastLogMark().getCurMark();\n-        System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n-                + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"\n-                + lastLogMark.getLogFileOffset());\n+        for (Journal journal : journals) {\n+            LogMark lastLogMark = journal.getLastLogMark().getCurMark();\n+            System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getLogFileId() + \"(\"\n+                    + Long.toHexString(lastLogMark.getLogFileId()) + \".txn), Pos - \"\n+                    + lastLogMark.getLogFileOffset());\n+        }\n     }\n \n     /**"},{"sha":"3715ed28b5e7c63807254150f6618d9a0e1254ea","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CheckpointSourceList.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCheckpointSourceList.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import com.google.common.collect.Lists;\n+\n+public class CheckpointSourceList implements CheckpointSource {\n+\n+    private final List<? extends CheckpointSource> checkpointSourcesList;\n+\n+    public CheckpointSourceList(List<? extends CheckpointSource> checkpointSourcesList) {\n+        this.checkpointSourcesList = checkpointSourcesList;\n+    }\n+\n+    @Override\n+    public Checkpoint newCheckpoint() {\n+        return new CheckpointList(this);\n+    }\n+\n+    @Override\n+    public void checkpointComplete(Checkpoint checkpoint, boolean compact) throws IOException {\n+        if (checkpoint == Checkpoint.MAX || checkpoint == Checkpoint.MIN) {\n+            return;\n+        }\n+\n+        checkArgument(checkpoint instanceof CheckpointList);\n+        CheckpointList checkpointList = (CheckpointList) checkpoint;\n+\n+        checkArgument(checkpointList.source == this);\n+        checkpointList.checkpointComplete(compact);\n+    }\n+\n+    private static class CheckpointList implements Checkpoint {\n+        private final CheckpointSourceList source;\n+        private final List<Checkpoint> checkpoints;\n+\n+        public CheckpointList(CheckpointSourceList source) {\n+            this.source = source;\n+            this.checkpoints = Lists.newArrayListWithCapacity(source.checkpointSourcesList.size());\n+            for (CheckpointSource checkpointSource : source.checkpointSourcesList) {\n+                checkpoints.add(checkpointSource.newCheckpoint());\n+            }\n+        }\n+\n+        private void checkpointComplete(boolean compact) throws IOException {\n+            for (int i = 0; i < source.checkpointSourcesList.size(); i++) {\n+                source.checkpointSourcesList.get(i).checkpointComplete(checkpoints.get(i), compact);\n+            }\n+        }\n+\n+        @Override\n+        public int compareTo(Checkpoint o) {\n+            if (o == Checkpoint.MAX) {\n+                return -1;\n+            } else if (o == Checkpoint.MIN) {\n+                return 1;\n+            }\n+\n+            checkArgument(o instanceof CheckpointList);\n+            CheckpointList other = (CheckpointList) o;\n+            if (checkpoints.size() != other.checkpoints.size()) {\n+                return Integer.compare(checkpoints.size(), other.checkpoints.size());\n+            }\n+\n+            for (int i = 0; i < checkpoints.size(); i++) {\n+                int res = checkpoints.get(i).compareTo(other.checkpoints.get(i));\n+                if (res != 0) {\n+                    return res;\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"691dc1d3716b41d8e899d880dd349aaf2a29bd5c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -36,6 +36,7 @@\n import java.net.UnknownHostException;\n import java.util.Set;\n \n+import com.google.common.base.Joiner;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.ZkVersion;\n@@ -74,15 +75,15 @@ class Cookie {\n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n     private final int layoutVersion;\n     private final String bookieHost;\n-    private final String journalDir;\n+    private final String journalDirs;\n     private final String ledgerDirs;\n     private final String instanceId;\n     private static final String SEPARATOR = \"\\t\";\n \n-    private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n+    private Cookie(int layoutVersion, String bookieHost, String journalDirs, String ledgerDirs, String instanceId) {\n         this.layoutVersion = layoutVersion;\n         this.bookieHost = bookieHost;\n-        this.journalDir = journalDir;\n+        this.journalDirs = journalDirs;\n         this.ledgerDirs = ledgerDirs;\n         this.instanceId = instanceId;\n     }\n@@ -136,7 +137,7 @@ private void verifyInternal(Cookie c, boolean checkIfSuperSet) throws BookieExce\n             LOG.error(errMsg);\n             throw new BookieException.InvalidCookieException(errMsg);\n         } else if (!(c.layoutVersion >= 3 && c.bookieHost.equals(bookieHost)\n-            && c.journalDir.equals(journalDir) && verifyLedgerDirs(c, checkIfSuperSet))) {\n+            && c.journalDirs.equals(journalDirs) && verifyLedgerDirs(c, checkIfSuperSet))) {\n             errMsg = \"Cookie [\" + this + \"] is not matching with [\" + c + \"]\";\n             throw new BookieException.InvalidCookieException(errMsg);\n         } else if ((instanceId == null && c.instanceId != null)\n@@ -162,7 +163,7 @@ public String toString() {\n         }\n         CookieFormat.Builder builder = CookieFormat.newBuilder();\n         builder.setBookieHost(bookieHost);\n-        builder.setJournalDir(journalDir);\n+        builder.setJournalDir(journalDirs);\n         builder.setLedgerDirs(ledgerDirs);\n         if (null != instanceId) {\n             builder.setInstanceId(instanceId);\n@@ -177,7 +178,7 @@ private String toStringVersion3() {\n         StringBuilder b = new StringBuilder();\n         b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\")\n             .append(bookieHost).append(\"\\n\")\n-            .append(journalDir).append(\"\\n\")\n+            .append(journalDirs).append(\"\\n\")\n             .append(ledgerDirs).append(\"\\n\");\n         return b.toString();\n     }\n@@ -198,14 +199,14 @@ private static Builder parse(BufferedReader reader) throws IOException {\n         }\n         if (layoutVersion == 3) {\n             cBuilder.setBookieHost(reader.readLine());\n-            cBuilder.setJournalDir(reader.readLine());\n+            cBuilder.setJournalDirs(reader.readLine());\n             cBuilder.setLedgerDirs(reader.readLine());\n         } else if (layoutVersion >= 4) {\n             CookieFormat.Builder cfBuilder = CookieFormat.newBuilder();\n             TextFormat.merge(reader, cfBuilder);\n             CookieFormat data = cfBuilder.build();\n             cBuilder.setBookieHost(data.getBookieHost());\n-            cBuilder.setJournalDir(data.getJournalDir());\n+            cBuilder.setJournalDirs(data.getJournalDir());\n             cBuilder.setLedgerDirs(data.getLedgerDirs());\n             // Since InstanceId is optional\n             if (null != data.getInstanceId() && !data.getInstanceId().isEmpty()) {\n@@ -330,7 +331,7 @@ static Builder generateCookie(ServerConfiguration conf)\n         Builder builder = Cookie.newBuilder();\n         builder.setLayoutVersion(CURRENT_COOKIE_LAYOUT_VERSION);\n         builder.setBookieHost(Bookie.getBookieAddress(conf).toString());\n-        builder.setJournalDir(conf.getJournalDirName());\n+        builder.setJournalDirs(Joiner.on(',').join(conf.getJournalDirNames()));\n         builder.setLedgerDirs(encodeDirPaths(conf.getLedgerDirNames()));\n         return builder;\n     }\n@@ -466,17 +467,17 @@ public boolean isBookieHostCreatedFromIp() throws IOException {\n     public static class Builder {\n         private int layoutVersion = 0;\n         private String bookieHost = null;\n-        private String journalDir = null;\n+        private String journalDirs = null;\n         private String ledgerDirs = null;\n         private String instanceId = null;\n \n         private Builder() {\n         }\n \n-        private Builder(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n+        private Builder(int layoutVersion, String bookieHost, String journalDirs, String ledgerDirs, String instanceId) {\n             this.layoutVersion = layoutVersion;\n             this.bookieHost = bookieHost;\n-            this.journalDir = journalDir;\n+            this.journalDirs = journalDirs;\n             this.ledgerDirs = ledgerDirs;\n             this.instanceId = instanceId;\n         }\n@@ -491,8 +492,8 @@ public Builder setBookieHost(String bookieHost) {\n             return this;\n         }\n \n-        public Builder setJournalDir(String journalDir) {\n-            this.journalDir = journalDir;\n+        public Builder setJournalDirs(String journalDirs) {\n+            this.journalDirs = journalDirs;\n             return this;\n         }\n \n@@ -507,7 +508,7 @@ public Builder setInstanceId(String instanceId) {\n         }\n \n         public Cookie build() {\n-            return new Cookie(layoutVersion, bookieHost, journalDir, ledgerDirs, instanceId);\n+            return new Cookie(layoutVersion, bookieHost, journalDirs, ledgerDirs, instanceId);\n         }\n     }\n \n@@ -528,7 +529,7 @@ static Builder newBuilder() {\n      * @return cookie builder\n      */\n     static Builder newBuilder(Cookie oldCookie) {\n-        return new Builder(oldCookie.layoutVersion, oldCookie.bookieHost, oldCookie.journalDir, oldCookie.ledgerDirs,\n+        return new Builder(oldCookie.layoutVersion, oldCookie.bookieHost, oldCookie.journalDirs, oldCookie.ledgerDirs,\n                 oldCookie.instanceId);\n     }\n }"},{"sha":"2b8d32581efe3768634631a24e36df53cf599cdf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -21,6 +21,7 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import com.google.common.collect.Lists;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n@@ -98,7 +99,7 @@ public boolean accept(File dir, String name) {\n \n     private static List<File> getAllDirectories(ServerConfiguration conf) {\n         List<File> dirs = new ArrayList<File>();\n-        dirs.add(conf.getJournalDir());\n+        dirs.addAll(Lists.newArrayList(conf.getJournalDirs()));\n         for (File d: conf.getLedgerDirs()) {\n             dirs.add(d);\n         }"},{"sha":"1483e368a8481764ae3db0e22f2b048a81b7aa69","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -535,15 +535,15 @@ static void writePaddingBytes(JournalChannel jc, ByteBuffer paddingBuffer, int j\n     private final Counter flushEmptyQueueCounter;\n     private final Counter journalWriteBytes;\n \n-    public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n-        this(conf, ledgerDirsManager, NullStatsLogger.INSTANCE);\n+    public Journal(File journalDirectory, ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n+        this(journalDirectory, conf, ledgerDirsManager, NullStatsLogger.INSTANCE);\n     }\n \n-    public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager, StatsLogger statsLogger) {\n+    public Journal(File journalDirectory, ServerConfiguration conf, LedgerDirsManager ledgerDirsManager, StatsLogger statsLogger) {\n         super(\"BookieJournal-\" + conf.getBookiePort());\n         this.ledgerDirsManager = ledgerDirsManager;\n         this.conf = conf;\n-        this.journalDirectory = Bookie.getCurrentDirectory(conf.getJournalDir());\n+        this.journalDirectory = journalDirectory;\n         this.maxJournalSize = conf.getMaxJournalSizeMB() * MB;\n         this.journalPreAllocSize = conf.getJournalPreAllocSizeMB() * MB;\n         this.journalWriteBufferSize = conf.getJournalWriteBufferSizeKB() * KB;\n@@ -582,6 +582,10 @@ public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager, St\n         journalWriteBytes = statsLogger.getCounter(JOURNAL_WRITE_BYTES);\n     }\n \n+    public File getJournalDirectory() {\n+        return journalDirectory;\n+    }\n+\n     LastLogMark getLastLogMark() {\n         return lastLogMark;\n     }\n@@ -783,6 +787,7 @@ public int getJournalQueueLength() {\n      */\n     @Override\n     public void run() {\n+        LOG.info(\"Starting journal on {}\", journalDirectory);\n         LinkedList<QueueEntry> toFlush = new LinkedList<QueueEntry>();\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n         ByteBuffer paddingBuff = ByteBuffer.allocate(2 * conf.getJournalAlignmentSize());"},{"sha":"b590e38cb17866063f52ee63aa2029c964d199c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":39,"deletions":7,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -23,6 +23,7 @@\n \n import com.google.common.annotations.Beta;\n \n+import com.google.common.collect.Lists;\n import org.apache.bookkeeper.stats.NullStatsProvider;\n import org.apache.bookkeeper.stats.StatsProvider;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -83,6 +84,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String ALLOW_LOOPBACK = \"allowLoopback\";\n \n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n+    protected final static String JOURNAL_DIRS = \"journalDirectories\";\n     protected final static String LEDGER_DIRS = \"ledgerDirectories\";\n     protected final static String INDEX_DIRS = \"indexDirectories\";\n     protected final static String ALLOW_STORAGE_EXPANSION = \"allowStorageExpansion\";\n@@ -571,11 +573,25 @@ public ServerConfiguration setAllowStorageExpansion(boolean val) {\n         return this;\n     }\n \n+    /**\n+     * Get dir names to store journal files\n+     *\n+     * @return journal dir name\n+     */\n+    public String[] getJournalDirNames() {\n+        String[] journalDirs = this.getStringArray(JOURNAL_DIRS);\n+        if (journalDirs == null || journalDirs.length == 0) {\n+            return new String[] {getJournalDirName()};\n+        }\n+        return journalDirs;\n+    }\n+\n     /**\n      * Get dir name to store journal files\n      *\n      * @return journal dir name\n      */\n+    @Deprecated\n     public String getJournalDirName() {\n         return this.getString(JOURNAL_DIR, \"/tmp/bk-txn\");\n     }\n@@ -588,21 +604,37 @@ public String getJournalDirName() {\n      * @return server configuration\n      */\n     public ServerConfiguration setJournalDirName(String journalDir) {\n-        this.setProperty(JOURNAL_DIR, journalDir);\n+        this.setProperty(JOURNAL_DIRS, new String[] {journalDir});\n         return this;\n     }\n \n     /**\n-     * Get dir to store journal files\n+     * Set dir names to store journal files\n      *\n-     * @return journal dir, if no journal dir provided return null\n+     * @param journalDirs\n+     *          Dir to store journal files\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setJournalDirsName(String[] journalDirs) {\n+        this.setProperty(JOURNAL_DIRS, journalDirs);\n+        return this;\n+    }\n+\n+    /**\n+     * Get dirs to store journal files\n+     *\n+     * @return journal dirs, if no journal dir provided return null\n      */\n-    public File getJournalDir() {\n-        String journalDirName = getJournalDirName();\n-        if (null == journalDirName) {\n+    public File[] getJournalDirs() {\n+        String[] journalDirNames = getJournalDirNames();\n+        if (null == journalDirNames) {\n             return null;\n         }\n-        return new File(journalDirName);\n+        File[] journalDirs = new File[journalDirNames.length];\n+        for(int i=0 ;i<journalDirNames.length; i++) {\n+            journalDirs[i] = new File(journalDirNames[i]);\n+        }\n+        return journalDirs;\n     }\n \n     /**"},{"sha":"b38c22a592f8f0b41f43069a4660d2898be2db51","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -420,7 +420,7 @@ public static void main(String[] args) {\n         String hello = String.format(\n                            \"Hello, I'm your bookie, listening on port %1$s. ZKServers are on %2$s. Journals are in %3$s. Ledgers are stored in %4$s.\",\n                            conf.getBookiePort(), conf.getZkServers(),\n-                           conf.getJournalDirName(), sb);\n+                           conf.getJournalDirNames(), sb);\n         LOG.info(hello);\n         try {\n             // Initialize Stats Provider"},{"sha":"f49f8aefa3c323f0253cf8ce987f418c2b3978db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -32,8 +32,9 @@ public class BookieAccessor {\n      * Force a bookie to flush its ledger storage\n      */\n     public static void forceFlush(Bookie b) throws IOException {\n-        Checkpoint cp = b.journal.newCheckpoint();\n+        CheckpointSourceList source = new CheckpointSourceList(b.journals);\n+        Checkpoint cp = source.newCheckpoint();\n         b.ledgerStorage.flush();\n-        b.journal.checkpointComplete(cp, true);\n+        source.checkpointComplete(cp, true);\n     }\n }"},{"sha":"ed881f117bdce2f78dc5dbc4d88af66c2c3c4b53","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -219,7 +219,10 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n                 // Do nothing.\n             }\n         };\n-        Bookie.checkDirectoryStructure(conf.getJournalDir());\n+\n+        for (File journalDir : conf.getJournalDirs()) {\n+            Bookie.checkDirectoryStructure(journalDir);\n+        }\n         for (File dir : dirManager.getAllLedgerDirs()) {\n             Bookie.checkDirectoryStructure(dir);\n         }\n@@ -602,7 +605,9 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n                 // Do nothing.\n             }\n         };\n-        Bookie.checkDirectoryStructure(conf.getJournalDir());\n+        for (File journalDir : conf.getJournalDirs()) {\n+            Bookie.checkDirectoryStructure(journalDir);\n+        }\n         for (File dir : dirManager.getAllLedgerDirs()) {\n             Bookie.checkDirectoryStructure(dir);\n         }"},{"sha":"f5b646e7bd43fc84248ba799d39f43b4414b4dda","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FUpdateCookieCmdTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/123eccd435a4a96a9147ed4a24efbe9025fe79ba/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FUpdateCookieCmdTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FUpdateCookieCmdTest.java?ref=123eccd435a4a96a9147ed4a24efbe9025fe79ba","patch":"@@ -192,9 +192,11 @@ private void updateCookie(String option, String optionVal, boolean useHostNameAs\n         Assert.assertEquals(\"Wrongly updated cookie!\", useHostNameAsBookieID, !cookie.isBookieHostCreatedFromIp());\n         verifyCookieInZooKeeper(newconf, 1);\n \n-        File journalDir = Bookie.getCurrentDirectory(conf.getJournalDir());\n-        Cookie jCookie = Cookie.readFromDirectory(journalDir);\n-        jCookie.verify(cookie);\n+        for (File journalDir : conf.getJournalDirs()) {\n+            journalDir = Bookie.getCurrentDirectory(journalDir);\n+            Cookie jCookie = Cookie.readFromDirectory(journalDir);\n+            jCookie.verify(cookie);\n+        }\n         File[] ledgerDir = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n         for (File dir : ledgerDir) {\n             Cookie lCookie = Cookie.readFromDirectory(dir);"}]}