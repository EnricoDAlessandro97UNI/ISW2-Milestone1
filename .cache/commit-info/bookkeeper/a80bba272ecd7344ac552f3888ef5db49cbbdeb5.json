{"sha":"a80bba272ecd7344ac552f3888ef5db49cbbdeb5","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmE4MGJiYTI3MmVjZDczNDRhYzU1MmYzODg4ZWY1ZGI0OWNiYmRlYjU=","commit":{"author":{"name":"fpj","email":"fpj@apache.org","date":"2015-07-10T20:48:59Z"},"committer":{"name":"fpj","email":"fpj@apache.org","date":"2015-07-10T20:48:59Z"},"message":"BOOKKEEPER-796: Make bookkeeper client use reconnectable zookeeper wrapper (sijie via fpj)","tree":{"sha":"fe95145eecf70b9c147bf0b16471011f0aeed9a0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/fe95145eecf70b9c147bf0b16471011f0aeed9a0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/a80bba272ecd7344ac552f3888ef5db49cbbdeb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a80bba272ecd7344ac552f3888ef5db49cbbdeb5","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a80bba272ecd7344ac552f3888ef5db49cbbdeb5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"8df7e0fb18547e9805238f4bb15d3d0d67978422","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/8df7e0fb18547e9805238f4bb15d3d0d67978422","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/8df7e0fb18547e9805238f4bb15d3d0d67978422"}],"stats":{"total":1207,"additions":772,"deletions":435},"files":[{"sha":"2cbc9705ebea46eb91e2cd09240e53c74ab8c025","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -83,6 +83,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-858: Fix broken links and typos in bookkeeper documents (Youngjoon Kim via sijie)\n \n+      BOOKKEEPER-796: Make bookkeeper client use reconnectable zookeeper wrapper (sijie via fpj)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"07b3d307ef3cb831f2a20ca30a32d799ad41dda6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -31,7 +31,9 @@\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n@@ -62,6 +64,8 @@\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.CreateMode;\n@@ -70,6 +74,7 @@\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n@@ -739,7 +744,7 @@ private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf)\n             return null;\n         }\n         // Create the ZooKeeper client instance\n-        return newZookeeper(conf.getZkServers(), conf.getZkTimeout());\n+        return newZookeeper(conf);\n     }\n \n     /**\n@@ -939,27 +944,30 @@ public boolean isReadOnly() {\n      * are processed and quit. It is done by calling <b>shutdown</b>.\n      * </p>\n      *\n-     * @param zkServers the quorum list of zk servers\n-     * @param sessionTimeout session timeout of zk connection\n+     * @param conf server configuration\n      *\n      * @return zk client instance\n      */\n-    private ZooKeeper newZookeeper(final String zkServers,\n-            final int sessionTimeout) throws IOException, InterruptedException,\n+    private ZooKeeper newZookeeper(ServerConfiguration conf) throws IOException, InterruptedException,\n             KeeperException {\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n+        Set<Watcher> watchers = new HashSet<Watcher>();\n+        watchers.add(new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n                 // Check for expired connection.\n                 if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n                     LOG.error(\"ZK client connection to the ZK server has expired!\");\n                     shutdown(ExitCode.ZK_EXPIRED);\n-                } else {\n-                    super.process(event);\n                 }\n             }\n-        };\n-        return ZkUtils.createConnectedZookeeperClient(zkServers, w);\n+        });\n+        return ZooKeeperClient.newBuilder()\n+                .connectString(conf.getZkServers())\n+                .sessionTimeoutMs(conf.getZkTimeout())\n+                .watchers(watchers)\n+                .operationRetryPolicy(new BoundExponentialBackoffRetryPolicy(conf.getZkTimeout(),\n+                        conf.getZkTimeout(), Integer.MAX_VALUE))\n+                .build();\n     }\n \n     public boolean isRunning() {"},{"sha":"c7a65a107be86e78050548c28b21a588abfbe0bb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -239,7 +239,10 @@ int runCmd(CommandLine cmdLine) throws Exception {\n             // delete cookie\n             if (cmdLine.hasOption(\"d\")) {\n                 ZooKeeperClient zkc =\n-                        ZooKeeperClient.createConnectedZooKeeperClient(conf.getZkServers(), conf.getZkTimeout());\n+                        ZooKeeperClient.newBuilder()\n+                                .connectString(conf.getZkServers())\n+                                .sessionTimeoutMs(conf.getZkTimeout())\n+                                .build();\n                 try {\n                     Versioned<Cookie> cookie = Cookie.readFromZooKeeper(zkc, conf);\n                     cookie.getValue().deleteFromZooKeeper(zkc, conf, cookie.getVersion());\n@@ -418,8 +421,10 @@ String getUsage() {\n         int runCmd(CommandLine cmdLine) throws Exception {\n             ZooKeeper zk = null;\n             try {\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n                 LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n                 Iterator<Long> iter = underreplicationManager.listLedgersToRereplicate();\n@@ -453,8 +458,10 @@ class ListLedgersCmd extends MyCommand {\n         public int runCmd(CommandLine cmdLine) throws Exception {\n             ZooKeeper zk = null;\n             try {\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n                 LedgerManager m = mFactory.newLedgerManager();\n                 LedgerRangeIterator iter = m.getLedgerRanges();\n@@ -560,8 +567,10 @@ public int runCmd(CommandLine cmdLine) throws Exception {\n \n             ZooKeeper zk = null;\n             try {\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n                 LedgerManager m = mFactory.newLedgerManager();\n                 ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n@@ -960,8 +969,10 @@ int runCmd(CommandLine cmdLine) throws Exception {\n             }\n             ZooKeeper zk = null;\n             try {\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n                 LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n                 if (enable) {\n@@ -1018,8 +1029,10 @@ String getUsage() {\n         int runCmd(CommandLine cmdLine) throws Exception {\n             ZooKeeper zk = null;\n             try {\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 BookieSocketAddress bookieId = AuditorElector.getCurrentAuditor(bkConf, zk);\n                 if (bookieId == null) {\n                     LOG.info(\"No auditor elected\");\n@@ -1093,9 +1106,11 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         private int updateBookieIdInCookie(final String bookieId, final boolean useHostname) throws IOException,\n                 InterruptedException {\n             ZooKeeper zk = null;\n-            ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n             try {\n-                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout())\n+                        .build();\n                 ServerConfiguration conf = new ServerConfiguration(bkConf);\n                 String newBookieId = Bookie.getBookieAddress(conf).toString();\n                 // read oldcookie"},{"sha":"4ec3add25f118c34d8341251840bb630a4d27b71","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":16,"deletions":31,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileSystemUpgrade.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -21,43 +21,35 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n-\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n+import java.net.MalformedURLException;\n import java.io.File;\n import java.io.FilenameFilter;\n import java.io.IOException;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n import java.util.ArrayList;\n import java.util.Scanner;\n import java.util.NoSuchElementException;\n \n-import java.net.MalformedURLException;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.commons.configuration.ConfigurationException;\n-\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.KeeperException;\n-\n import static com.google.common.base.Charsets.UTF_8;\n \n /**\n@@ -139,26 +131,19 @@ private static int detectPreviousVersion(File directory) throws IOException {\n     private static ZooKeeper newZookeeper(final ServerConfiguration conf)\n             throws BookieException.UpgradeException {\n         try {\n-            final CountDownLatch latch = new CountDownLatch(1);\n-            ZooKeeper zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n-                    new Watcher() {\n-                        @Override\n-                        public void process(WatchedEvent event) {\n-                            // handle session disconnects and expires\n-                            if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n-                                latch.countDown();\n-                            }\n-                        }\n-                    });\n-            if (!latch.await(conf.getZkTimeout()*2, TimeUnit.MILLISECONDS)) {\n-                zk.close();\n-                throw new BookieException.UpgradeException(\"Couldn't connect to zookeeper\");\n-            }\n-            return zk;\n+            int zkTimeout = conf.getZkTimeout();\n+            return ZooKeeperClient.newBuilder()\n+                    .connectString(conf.getZkServers())\n+                    .sessionTimeoutMs(zkTimeout)\n+                    .operationRetryPolicy(\n+                            new BoundExponentialBackoffRetryPolicy(zkTimeout, zkTimeout, Integer.MAX_VALUE))\n+                    .build();\n         } catch (InterruptedException ie) {\n             throw new BookieException.UpgradeException(ie);\n         } catch (IOException ioe) {\n             throw new BookieException.UpgradeException(ioe);\n+        } catch (KeeperException ke) {\n+            throw new BookieException.UpgradeException(ke);\n         }\n     }\n "},{"sha":"f74639b5eca3b88ac3642e95520b10ab9604eee6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":68,"deletions":70,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -27,6 +27,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+import com.google.common.base.Preconditions;\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -42,11 +43,12 @@\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.ReflectionUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n+import org.jboss.netty.channel.ChannelFactory;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import org.slf4j.Logger;\n@@ -135,29 +137,8 @@ public Builder setStatsLogger(StatsLogger statsLogger) {\n         }\n \n         public BookKeeper build() throws IOException, InterruptedException, KeeperException {\n-            boolean ownZK = false;\n-            boolean ownChannelFactory = false;\n-            if (zk == null) {\n-                ownZK = true;\n-                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n-                zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n-                w.waitForConnection();\n-            }\n-            if (channelFactory == null) {\n-                ownChannelFactory = true;\n-                ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n-                channelFactory = new NioClientSocketChannelFactory(\n-                        Executors.newCachedThreadPool(tfb.setNameFormat(\n-                                                              \"BookKeeper-NIOBoss-%d\").build()),\n-                        Executors.newCachedThreadPool(tfb.setNameFormat(\n-                                                              \"BookKeeper-NIOWorker-%d\").build()));\n-            }\n-\n-            BookKeeper bk = new BookKeeper(conf, zk, channelFactory, statsLogger);\n-            bk.ownZKHandle = ownZK;\n-            bk.ownChannelFactory = ownChannelFactory;\n-\n-            return bk;\n+            Preconditions.checkNotNull(statsLogger, \"No stats logger provided\");\n+            return new BookKeeper(conf, zk, channelFactory, statsLogger);\n         }\n     }\n \n@@ -196,34 +177,18 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n      */\n     public BookKeeper(final ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n-        this.conf = conf;\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n-        this.zk = ZkUtils\n-                .createConnectedZookeeperClient(conf.getZkServers(), w);\n-        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n-        this.channelFactory = new NioClientSocketChannelFactory(\n-                Executors.newCachedThreadPool(tfb.setNameFormat(\n-                        \"BookKeeper-NIOBoss-%d\").build()),\n-                Executors.newCachedThreadPool(tfb.setNameFormat(\n-                        \"BookKeeper-NIOWorker-%d\").build()));\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n-                .setNameFormat(\"BookKeeperClientScheduler-%d\").build());\n-        this.statsLogger = NullStatsLogger.INSTANCE;\n-        initOpLoggers(this.statsLogger);\n-        // initialize the ensemble placement\n-        this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n-\n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n-                \"BookKeeperClientWorker\");\n-        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n-        bookieWatcher.readBookiesBlocking();\n+        this(conf, null, null, NullStatsLogger.INSTANCE);\n+    }\n \n-        ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n-        ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n+    private static ZooKeeper validateZooKeeper(ZooKeeper zk) throws NullPointerException {\n+        Preconditions.checkNotNull(zk, \"No zookeeper instance provided\");\n+        return zk;\n+    }\n \n-        ownChannelFactory = true;\n-        ownZKHandle = true;\n+    private static ClientSocketChannelFactory validateChannelFactory(ClientSocketChannelFactory factory)\n+            throws NullPointerException {\n+        Preconditions.checkNotNull(factory, \"No Channel Factory provided\");\n+        return factory;\n     }\n \n     /**\n@@ -243,12 +208,11 @@ public BookKeeper(final ClientConfiguration conf)\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n             throws IOException, InterruptedException, KeeperException {\n \n-        this(conf, zk, new NioClientSocketChannelFactory(\n+        this(conf, validateZooKeeper(zk), new NioClientSocketChannelFactory(\n                 Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n                         .setNameFormat(\"BookKeeper-NIOBoss-%d\").build()),\n                 Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n                         .setNameFormat(\"BookKeeper-NIOWorker-%d\").build())));\n-        ownChannelFactory = true;\n     }\n \n     /**\n@@ -270,43 +234,77 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws IOException, InterruptedException, KeeperException {\n-        this(conf, zk, channelFactory, NullStatsLogger.INSTANCE);\n+        this(conf, validateZooKeeper(zk), validateChannelFactory(channelFactory), NullStatsLogger.INSTANCE);\n     }\n \n     /**\n      * Contructor for use with the builder. Other constructors also use it.\n      */\n-    private BookKeeper(ClientConfiguration conf, ZooKeeper zk,\n-                       ClientSocketChannelFactory channelFactory, StatsLogger statsLogger)\n+    private BookKeeper(ClientConfiguration conf,\n+                       ZooKeeper zkc,\n+                       ClientSocketChannelFactory channelFactory,\n+                       StatsLogger statsLogger)\n             throws IOException, InterruptedException, KeeperException {\n-        if (zk == null || channelFactory == null) {\n-            throw new NullPointerException();\n+        this.conf = conf;\n+\n+        // initialize zookeeper client\n+        if (zkc == null) {\n+            this.zk = ZooKeeperClient.newBuilder()\n+                    .connectString(conf.getZkServers())\n+                    .sessionTimeoutMs(conf.getZkTimeout())\n+                    .operationRetryPolicy(new BoundExponentialBackoffRetryPolicy(conf.getZkTimeout(),\n+                            conf.getZkTimeout(), 0))\n+                    .statsLogger(statsLogger)\n+                    .build();\n+            this.ownZKHandle = true;\n+        } else {\n+            if (!zkc.getState().isConnected()) {\n+                LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n+                throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+            }\n+            this.zk = zkc;\n+            this.ownZKHandle = false;\n         }\n-        if (!zk.getState().isConnected()) {\n-            LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n-            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+\n+        // initialize channel factory\n+        if (null == channelFactory) {\n+            ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+            this.channelFactory = new NioClientSocketChannelFactory(\n+                    Executors.newCachedThreadPool(tfb.setNameFormat(\n+                            \"BookKeeper-NIOBoss-%d\").build()),\n+                    Executors.newCachedThreadPool(tfb.setNameFormat(\n+                            \"BookKeeper-NIOWorker-%d\").build()));\n+            this.ownChannelFactory = true;\n+        } else {\n+            this.channelFactory = channelFactory;\n+            this.ownChannelFactory = false;\n         }\n-        this.conf = conf;\n-        this.zk = zk;\n-        this.channelFactory = channelFactory;\n+\n+        // initialize scheduler\n         ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n                 \"BookKeeperClientScheduler-%d\");\n         this.scheduler = Executors\n                 .newSingleThreadScheduledExecutor(tfb.build());\n+\n+        // initialize stats logger\n         this.statsLogger = statsLogger.scope(BookKeeperClientStats.CLIENT_SCOPE);\n         initOpLoggers(this.statsLogger);\n \n         // initialize the ensemble placement\n         this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n \n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n+        // initialize main worker pool\n+        this.mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n                 \"BookKeeperClientWorker\");\n-        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool, statsLogger);\n-        bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n-        bookieWatcher.readBookiesBlocking();\n \n-        ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n-        ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n+        // initialize bookie client\n+        this.bookieClient = new BookieClient(conf, this.channelFactory, this.mainWorkerPool, statsLogger);\n+        this.bookieWatcher = new BookieWatcher(conf, this.scheduler, this.placementPolicy, this);\n+        this.bookieWatcher.readBookiesBlocking();\n+\n+        // initialize ledger manager\n+        this.ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, this.zk);\n+        this.ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n     }\n \n     private EnsemblePlacementPolicy initializeEnsemblePlacementPolicy(ClientConfiguration conf)"},{"sha":"38b21e2b24ee643f06ce2c7f8a460084ea45a974","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -31,8 +31,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -126,8 +125,10 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n-        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n+        zk = ZooKeeperClient.newBuilder()\n+                .connectString(conf.getZkServers())\n+                .sessionTimeoutMs(conf.getZkTimeout())\n+                .build();\n         ownsZK = true;\n \n         // Create the bookie path\n@@ -762,9 +763,10 @@ public void processResult(int rc, String s, Object obj) {\n      */\n     public static boolean format(ClientConfiguration conf,\n             boolean isInteractive, boolean force) throws Exception {\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n-        ZooKeeper zkc = ZkUtils.createConnectedZookeeperClient(\n-                conf.getZkServers(), w);\n+        ZooKeeper zkc = ZooKeeperClient.newBuilder()\n+                .connectString(conf.getZkServers())\n+                .sessionTimeoutMs(conf.getZkTimeout())\n+                .build();\n         BookKeeper bkc = null;\n         try {\n             boolean ledgerRootExists = null != zkc.exists("},{"sha":"924e620915d0cb41f66cf89eb38446a264641282","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -40,6 +40,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.zookeeper.AsyncCallback;\n@@ -407,8 +408,10 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n      */\n     void checkAllLedgers() throws BKAuditException, BKException,\n             IOException, InterruptedException, KeeperException {\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n-        ZooKeeper newzk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n+        ZooKeeper newzk = ZooKeeperClient.newBuilder()\n+                .connectString(conf.getZkServers())\n+                .sessionTimeoutMs(conf.getZkTimeout())\n+                .build();\n \n         final BookKeeper client = new BookKeeper(new ClientConfiguration(conf),\n                                                  newzk);"},{"sha":"4a84b3c1d2ad874410c2d55b053f3495d0331adf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAutoRecoveryMain.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -23,6 +23,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.MalformedURLException;\n+import java.util.HashSet;\n+import java.util.Set;\n \n import com.google.common.annotations.VisibleForTesting;\n \n@@ -35,6 +37,7 @@\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n@@ -78,20 +81,27 @@ public AutoRecoveryMain(ServerConfiguration conf, StatsLogger statsLogger)\n             throws IOException, InterruptedException, KeeperException, UnavailableException,\n             CompatibilityException {\n         this.conf = conf;\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n+        Set<Watcher> watchers = new HashSet<Watcher>();\n+        // TODO: better session handling for auto recovery daemon  https://issues.apache.org/jira/browse/BOOKKEEPER-594\n+        //       since {@link org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager}\n+        //       use Watcher, need to ensure the logic works correctly after recreating\n+        //       a new zookeeper client when session expired.\n+        //       for now just shutdown it.\n+        watchers.add(new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n                 // Check for expired connection.\n                 if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n-                    LOG.error(\"ZK client connection to the\"\n-                            + \" ZK server has expired!\");\n+                    LOG.error(\"ZK client connection to the ZK server has expired!\");\n                     shutdown(ExitCode.ZK_EXPIRED);\n-                } else {\n-                    super.process(event);\n                 }\n             }\n-        };\n-        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n+        });\n+        zk = ZooKeeperClient.newBuilder()\n+                .connectString(conf.getZkServers())\n+                .sessionTimeoutMs(conf.getZkTimeout())\n+                .watchers(watchers)\n+                .build();\n         auditorElector = new AuditorElector(Bookie.getBookieAddress(conf).toString(), conf,\n                 zk, statsLogger.scope(AUDITOR_SCOPE));\n         replicationWorker = new ReplicationWorker(zk, conf,"},{"sha":"fb0064a23083e181602efc5fc1457e03eb01cf19","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":7,"deletions":37,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -25,11 +25,10 @@\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.Socket;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.io.FileUtils;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -40,13 +39,10 @@\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.server.NIOServerCnxnFactory;\n import org.apache.zookeeper.server.ZooKeeperServer;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.ZooDefs.Ids;\n \n import static com.google.common.base.Charsets.UTF_8;\n \n@@ -109,10 +105,10 @@ private void initializeZookeper() throws IOException {\n         LOG.info(\"Instantiate ZK Client\");\n         //initialize the zk client with values\n         try {\n-            ZKConnectionWatcher zkConnectionWatcher = new ZKConnectionWatcher();\n-            zkc = new ZooKeeper(HOSTPORT, zkSessionTimeOut,\n-                    zkConnectionWatcher);\n-            zkConnectionWatcher.waitForConnection();\n+            zkc = ZooKeeperClient.newBuilder()\n+                    .connectString(HOSTPORT)\n+                    .sessionTimeoutMs(zkSessionTimeOut)\n+                    .build();\n             zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             // No need to create an entry for each requested bookie anymore as the\n@@ -228,32 +224,6 @@ private static void usage() {\n         System.err.println(\"Usage: LocalBookKeeper number-of-bookies\");\n     }\n \n-    /* Watching SyncConnected event from ZooKeeper */\n-    static class ZKConnectionWatcher implements Watcher {\n-        private CountDownLatch clientConnectLatch = new CountDownLatch(1);\n-\n-        @Override\n-        public void process(WatchedEvent event) {\n-            if (event.getState() == KeeperState.SyncConnected) {\n-                clientConnectLatch.countDown();\n-            }\n-        }\n-\n-        // Waiting for the SyncConnected event from the ZooKeeper server\n-        public void waitForConnection() throws IOException {\n-            try {\n-                if (!clientConnectLatch.await(zkSessionTimeOut,\n-                        TimeUnit.MILLISECONDS)) {\n-                    throw new IOException(\n-                            \"Couldn't connect to zookeeper server\");\n-                }\n-            } catch (InterruptedException e) {\n-                throw new IOException(\n-                        \"Interrupted when connecting to zookeeper server\", e);\n-            }\n-        }\n-    }\n-\n     public static boolean waitForServerUp(String hp, long timeout) {\n         long start = MathUtils.now();\n         String split[] = hp.split(\":\");"},{"sha":"6aa9073213255bdd2eaadacb3c4d4b87a5cf535e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FMathUtils.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -17,6 +17,8 @@\n  */\n package org.apache.bookkeeper.util;\n \n+import java.util.concurrent.TimeUnit;\n+\n /**\n  * Provides misc math functions that don't come standard\n  */\n@@ -74,6 +76,17 @@ public static long elapsedMSec (long startNanoTime) {\n        return (System.nanoTime() - startNanoTime)/ NANOSECONDS_PER_MILLISECOND;\n     }\n \n+    /**\n+     * Microseconds elapsed since the time specified, the input is nanoTime\n+     * the only conversion happens when computing the elapsed time\n+     *\n+     * @param startNanoTime the start of the interval that we are measuring\n+     * @return elapsed time in milliseconds.\n+     */\n+    public static long elapsedMicroSec(long startNanoTime) {\n+        return TimeUnit.NANOSECONDS.toMicros(System.nanoTime() - startNanoTime);\n+    }\n+\n     /**\n      * Nanoseconds elapsed since the time specified, the input is nanoTime\n      * the only conversion happens when computing the elapsed time"},{"sha":"f237988571a8f80bb46342398769d6da9d7b6f3c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":2,"deletions":25,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -24,11 +24,12 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n-\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.AsyncCallback;\n@@ -230,28 +231,4 @@ public void processResult(int rc, String path, Object ctx, List<String> nodes) {\n         }, null);\n     }\n \n-    /**\n-     * Get new ZooKeeper client. Waits till the connection is complete. If\n-     * connection is not successful within timeout, then throws back exception.\n-     *\n-     * @param servers\n-     *            ZK servers connection string.\n-     * @param timeout\n-     *            Session timeout.\n-     */\n-    public static ZooKeeper createConnectedZookeeperClient(String servers,\n-            ZooKeeperWatcherBase w) throws IOException, InterruptedException,\n-            KeeperException {\n-        if (servers == null || servers.isEmpty()) {\n-            throw new IllegalArgumentException(\"servers cannot be empty\");\n-        }\n-        final ZooKeeper newZk = new ZooKeeper(servers, w.getZkSessionTimeOut(),\n-                w);\n-        w.waitForConnection();\n-        // Re-checking zookeeper connection status\n-        if (!newZk.getState().isConnected()) {\n-            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n-        }\n-        return newZk;\n-    }\n }"},{"sha":"23d86f48a85a71767b70bbd7aba0e9ca6db05187","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ExponentialBackoffRetryPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FExponentialBackoffRetryPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FExponentialBackoffRetryPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FExponentialBackoffRetryPolicy.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -41,7 +41,7 @@ public boolean allowRetry(int retryCount, long elapsedRetryTime) {\n \n     @Override\n     public long nextRetryWaitTime(int retryCount, long elapsedRetryTime) {\n-        return baseBackoffTime * Math.max(1, random.nextInt(1 << (retryCount + 1)));\n+        return baseBackoffTime * Math.max(1, random.nextInt(Math.max(1, 1 << (retryCount + 1))));\n     }\n \n }"},{"sha":"80a853b0caac59072e6846d6cab1e7610a9b209a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperClient.java","status":"modified","additions":363,"deletions":130,"changes":493,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperClient.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -31,6 +31,14 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.util.concurrent.RateLimiter;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.zookeeper.ZooWorker.ZooCallable;\n import org.apache.zookeeper.AsyncCallback.ACLCallback;\n import org.apache.zookeeper.AsyncCallback.Children2Callback;\n@@ -61,6 +69,8 @@ public class ZooKeeperClient extends ZooKeeper implements Watcher {\n \n     final static Logger logger = LoggerFactory.getLogger(ZooKeeperClient.class);\n \n+    private static final int DEFAULT_RETRY_EXECUTOR_THREAD_COUNT = 1;\n+\n     // ZooKeeper client connection variables\n     private final String connectString;\n     private final int sessionTimeoutMs;\n@@ -72,10 +82,26 @@ public class ZooKeeperClient extends ZooKeeper implements Watcher {\n     private final ScheduledExecutorService retryExecutor;\n     private final ExecutorService connectExecutor;\n \n+    // rate limiter\n+    private final RateLimiter rateLimiter;\n+\n     // retry polices\n     private final RetryPolicy connectRetryPolicy;\n     private final RetryPolicy operationRetryPolicy;\n \n+    // Stats Logger\n+    private final OpStatsLogger createStats;\n+    private final OpStatsLogger getStats;\n+    private final OpStatsLogger setStats;\n+    private final OpStatsLogger deleteStats;\n+    private final OpStatsLogger getChildrenStats;\n+    private final OpStatsLogger existsStats;\n+    private final OpStatsLogger multiStats;\n+    private final OpStatsLogger getACLStats;\n+    private final OpStatsLogger setACLStats;\n+    private final OpStatsLogger syncStats;\n+    private final OpStatsLogger createClientStats;\n+\n     private final Callable<ZooKeeper> clientCreator = new Callable<ZooKeeper>() {\n \n         @Override\n@@ -86,20 +112,19 @@ public ZooKeeper call() throws Exception {\n                     @Override\n                     public ZooKeeper call() throws KeeperException, InterruptedException {\n                         logger.info(\"Reconnecting zookeeper {}.\", connectString);\n+                        // close the previous one\n+                        closeZkHandle();\n                         ZooKeeper newZk;\n                         try {\n                             newZk = createZooKeeper();\n                         } catch (IOException ie) {\n                             logger.error(\"Failed to create zookeeper instance to \" + connectString, ie);\n                             throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n                         }\n-                        // close the previous one\n-                        closeZkHandle();\n+                        waitForConnection();\n                         zk.set(newZk);\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"ZooKeeper session {} is created to {}.\",\n-                                    Long.toHexString(newZk.getSessionId()), connectString);\n-                        }\n+                        logger.info(\"ZooKeeper session {} is created to {}.\",\n+                                Long.toHexString(newZk.getSessionId()), connectString);\n                         return newZk;\n                     }\n \n@@ -108,7 +133,7 @@ public String toString() {\n                         return String.format(\"ZooKeeper Client Creator (%s)\", connectString);\n                     }\n \n-                }, connectRetryPolicy);\n+                }, connectRetryPolicy, rateLimiter, createClientStats);\n             } catch (Exception e) {\n                 logger.error(\"Gave up reconnecting to ZooKeeper : \", e);\n                 Runtime.getRuntime().exit(-1);\n@@ -118,99 +143,156 @@ public String toString() {\n \n     };\n \n-    public static ZooKeeper createConnectedZooKeeper(String connectString, int sessionTimeoutMs)\n+    @VisibleForTesting\n+    static ZooKeeperClient createConnectedZooKeeperClient(\n+            String connectString, int sessionTimeoutMs, Set<Watcher> childWatchers,\n+            RetryPolicy operationRetryPolicy)\n                     throws KeeperException, InterruptedException, IOException {\n-        ZooKeeperWatcherBase watcher = new ZooKeeperWatcherBase(sessionTimeoutMs);\n-        ZooKeeper zk = new ZooKeeper(connectString, sessionTimeoutMs, watcher);\n-        try {\n-            watcher.waitForConnection();\n-        } catch (KeeperException ke) {\n-            zk.close();\n-            throw ke;\n-        } catch (InterruptedException ie) {\n-            zk.close();\n-            throw ie;\n-        }\n-        return zk;\n+        return ZooKeeperClient.newBuilder()\n+                .connectString(connectString)\n+                .sessionTimeoutMs(sessionTimeoutMs)\n+                .watchers(childWatchers)\n+                .operationRetryPolicy(operationRetryPolicy)\n+                .build();\n     }\n \n-    public static ZooKeeperClient createConnectedZooKeeperClient(String connectString, int sessionTimeoutMs)\n-                    throws KeeperException, InterruptedException, IOException {\n-        ZooKeeperWatcherBase watcherManager = new ZooKeeperWatcherBase(sessionTimeoutMs);\n-        ZooKeeperClient client = new ZooKeeperClient(connectString, sessionTimeoutMs, watcherManager,\n-                new BoundExponentialBackoffRetryPolicy(sessionTimeoutMs, sessionTimeoutMs, 0));\n-        try {\n-            watcherManager.waitForConnection();\n-        } catch (KeeperException ke) {\n-            client.close();\n-            throw ke;\n-        } catch (InterruptedException ie) {\n-            client.close();\n-            throw ie;\n+    public static class Builder {\n+        String connectString = null;\n+        int sessionTimeoutMs = 10000;\n+        Set<Watcher> watchers = null;\n+        RetryPolicy connectRetryPolicy = null;\n+        RetryPolicy operationRetryPolicy = null;\n+        StatsLogger statsLogger = NullStatsLogger.INSTANCE;\n+        int retryExecThreadCount = DEFAULT_RETRY_EXECUTOR_THREAD_COUNT;\n+        double requestRateLimit = 0;\n+\n+        private Builder() {}\n+\n+        public Builder connectString(String connectString) {\n+            this.connectString = connectString;\n+            return this;\n         }\n-        return client;\n-    }\n \n-    public static ZooKeeperClient createConnectedZooKeeperClient(\n-            String connectString, int sessionTimeoutMs, RetryPolicy operationRetryPolicy)\n-                    throws KeeperException, InterruptedException, IOException {\n-        ZooKeeperWatcherBase watcherManager = new ZooKeeperWatcherBase(sessionTimeoutMs); \n-        ZooKeeperClient client = new ZooKeeperClient(connectString, sessionTimeoutMs, watcherManager,\n-                operationRetryPolicy);\n-        try {\n-            watcherManager.waitForConnection();\n-        } catch (KeeperException ke) {\n-            client.close();\n-            throw ke;\n-        } catch (InterruptedException ie) {\n-            client.close();\n-            throw ie;\n+        public Builder sessionTimeoutMs(int sessionTimeoutMs) {\n+            this.sessionTimeoutMs = sessionTimeoutMs;\n+            return this;\n         }\n-        return client;\n-    }\n \n-    public static ZooKeeperClient createConnectedZooKeeperClient(\n-            String connectString, int sessionTimeoutMs, Set<Watcher> childWatchers,\n-            RetryPolicy operationRetryPolicy)\n-                    throws KeeperException, InterruptedException, IOException {\n-        ZooKeeperWatcherBase watcherManager =\n-                new ZooKeeperWatcherBase(sessionTimeoutMs, childWatchers);\n-        ZooKeeperClient client = new ZooKeeperClient(connectString, sessionTimeoutMs, watcherManager,\n-                operationRetryPolicy);\n-        try {\n-            watcherManager.waitForConnection();\n-        } catch (KeeperException ke) {\n-            client.close();\n-            throw ke;\n-        } catch (InterruptedException ie) {\n-            client.close();\n-            throw ie;\n+        public Builder watchers(Set<Watcher> watchers) {\n+            this.watchers = watchers;\n+            return this;\n+        }\n+\n+        public Builder connectRetryPolicy(RetryPolicy retryPolicy) {\n+            this.connectRetryPolicy = retryPolicy;\n+            return this;\n+        }\n+\n+        public Builder operationRetryPolicy(RetryPolicy retryPolicy) {\n+            this.operationRetryPolicy = retryPolicy;\n+            return this;\n+        }\n+\n+        public Builder statsLogger(StatsLogger statsLogger) {\n+            this.statsLogger = statsLogger;\n+            return this;\n+        }\n+\n+        public Builder requestRateLimit(double requestRateLimit) {\n+            this.requestRateLimit = requestRateLimit;\n+            return this;\n+        }\n+\n+        public Builder retryThreadCount(int numThreads) {\n+            this.retryExecThreadCount = numThreads;\n+            return this;\n+        }\n+\n+        public ZooKeeperClient build() throws IOException, KeeperException, InterruptedException {\n+            Preconditions.checkNotNull(connectString);\n+            Preconditions.checkArgument(sessionTimeoutMs > 0);\n+            Preconditions.checkNotNull(statsLogger);\n+            Preconditions.checkArgument(retryExecThreadCount > 0);\n+\n+            if (null == connectRetryPolicy) {\n+                connectRetryPolicy =\n+                        new BoundExponentialBackoffRetryPolicy(sessionTimeoutMs, sessionTimeoutMs, Integer.MAX_VALUE);\n+            }\n+            if (null == operationRetryPolicy) {\n+                operationRetryPolicy =\n+                        new BoundExponentialBackoffRetryPolicy(sessionTimeoutMs, sessionTimeoutMs, 0);\n+            }\n+\n+            // Create a watcher manager\n+            StatsLogger watcherStatsLogger = statsLogger.scope(\"watcher\");\n+            ZooKeeperWatcherBase watcherManager =\n+                    null == watchers ? new ZooKeeperWatcherBase(sessionTimeoutMs, watcherStatsLogger) :\n+                            new ZooKeeperWatcherBase(sessionTimeoutMs, watchers, watcherStatsLogger);\n+            ZooKeeperClient client = new ZooKeeperClient(\n+                    connectString,\n+                    sessionTimeoutMs,\n+                    watcherManager,\n+                    connectRetryPolicy,\n+                    operationRetryPolicy,\n+                    statsLogger,\n+                    retryExecThreadCount,\n+                    requestRateLimit\n+            );\n+            // Wait for connection to be established.\n+            try {\n+                watcherManager.waitForConnection();\n+            } catch (KeeperException ke) {\n+                client.close();\n+                throw ke;\n+            } catch (InterruptedException ie) {\n+                client.close();\n+                throw ie;\n+            }\n+            return client;\n         }\n-        return client;\n     }\n \n-    ZooKeeperClient(String connectString, int sessionTimeoutMs, ZooKeeperWatcherBase watcherManager,\n-            RetryPolicy operationRetryPolicy) throws IOException {\n-        this(connectString, sessionTimeoutMs, watcherManager,\n-                new BoundExponentialBackoffRetryPolicy(6000, 60000, Integer.MAX_VALUE),\n-                operationRetryPolicy);\n+    public static Builder newBuilder() {\n+        return new Builder();\n     }\n \n-    private ZooKeeperClient(String connectString, int sessionTimeoutMs,\n-            ZooKeeperWatcherBase watcherManager,\n-            RetryPolicy connectRetryPolicy, RetryPolicy operationRetryPolicy) throws IOException {\n+    ZooKeeperClient(String connectString,\n+                    int sessionTimeoutMs,\n+                    ZooKeeperWatcherBase watcherManager,\n+                    RetryPolicy connectRetryPolicy,\n+                    RetryPolicy operationRetryPolicy,\n+                    StatsLogger statsLogger,\n+                    int retryExecThreadCount,\n+                    double rate) throws IOException {\n         super(connectString, sessionTimeoutMs, watcherManager);\n         this.connectString = connectString;\n         this.sessionTimeoutMs = sessionTimeoutMs;\n         this.watcherManager = watcherManager;\n         this.connectRetryPolicy = connectRetryPolicy;\n         this.operationRetryPolicy = operationRetryPolicy;\n+        this.rateLimiter = rate > 0 ? RateLimiter.create(rate) : null;\n         this.retryExecutor =\n-                Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors());\n+                Executors.newScheduledThreadPool(retryExecThreadCount,\n+                    new ThreadFactoryBuilder().setNameFormat(\"ZKC-retry-executor-%d\").build());\n         this.connectExecutor =\n-                Executors.newSingleThreadExecutor();\n+                Executors.newSingleThreadExecutor(\n+                    new ThreadFactoryBuilder().setNameFormat(\"ZKC-connect-executor-%d\").build());\n         // added itself to the watcher\n         watcherManager.addChildWatcher(this);\n+\n+        // Stats\n+        StatsLogger scopedStatsLogger = statsLogger.scope(\"zk\");\n+        createClientStats = scopedStatsLogger.getOpStatsLogger(\"create_client\");\n+        createStats = scopedStatsLogger.getOpStatsLogger(\"create\");\n+        getStats = scopedStatsLogger.getOpStatsLogger(\"get_data\");\n+        setStats = scopedStatsLogger.getOpStatsLogger(\"set_data\");\n+        deleteStats = scopedStatsLogger.getOpStatsLogger(\"delete\");\n+        getChildrenStats = scopedStatsLogger.getOpStatsLogger(\"get_children\");\n+        existsStats = scopedStatsLogger.getOpStatsLogger(\"exists\");\n+        multiStats = scopedStatsLogger.getOpStatsLogger(\"multi\");\n+        getACLStats = scopedStatsLogger.getOpStatsLogger(\"get_acl\");\n+        setACLStats = scopedStatsLogger.getOpStatsLogger(\"set_acl\");\n+        syncStats = scopedStatsLogger.getOpStatsLogger(\"sync\");\n     }\n \n     @Override\n@@ -219,7 +301,7 @@ public void close() throws InterruptedException {\n         retryExecutor.shutdown();\n         closeZkHandle();\n     }\n-    \n+\n     private void closeZkHandle() throws InterruptedException {\n         ZooKeeper zkHandle = zk.get();\n         if (null == zkHandle) {\n@@ -246,28 +328,40 @@ public void process(WatchedEvent event) {\n     }\n \n     private void onExpired() {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"ZooKeeper session {} is expired from {}.\",\n-                    Long.toHexString(getSessionId()), connectString);\n-        }\n+        logger.info(\"ZooKeeper session {} is expired from {}.\",\n+                Long.toHexString(getSessionId()), connectString);\n         try {\n             connectExecutor.submit(clientCreator);\n         } catch (RejectedExecutionException ree) {\n             logger.error(\"ZooKeeper reconnect task is rejected : \", ree);\n+        } catch (Exception t) {\n+            logger.error(\"Failed to submit zookeeper reconnect task due to runtime exception : \", t);\n         }\n     }\n \n-\n-    static abstract class RetryRunnable implements Runnable {\n+    static abstract class ZkRetryRunnable implements Runnable {\n \n         final ZooWorker worker;\n+        final RateLimiter rateLimiter;\n         final Runnable that;\n \n-        RetryRunnable(RetryPolicy retryPolicy) {\n-            worker = new ZooWorker(retryPolicy);\n+        ZkRetryRunnable(RetryPolicy retryPolicy,\n+                        RateLimiter rateLimiter,\n+                        OpStatsLogger statsLogger) {\n+            this.worker = new ZooWorker(retryPolicy, statsLogger);\n+            this.rateLimiter = rateLimiter;\n             that = this;\n         }\n \n+        @Override\n+        public void run() {\n+            if (null != rateLimiter) {\n+                rateLimiter.acquire();\n+            }\n+            zkRun();\n+        }\n+\n+        abstract void zkRun();\n     }\n \n     // inherits from ZooKeeper client for all operations\n@@ -318,6 +412,11 @@ public synchronized void register(Watcher watcher) {\n     public List<OpResult> multi(final Iterable<Op> ops) throws InterruptedException, KeeperException {\n         return ZooWorker.syncCallWithRetries(this, new ZooCallable<List<OpResult>>() {\n \n+            @Override\n+            public String toString() {\n+                return \"multi\";\n+            }\n+\n             @Override\n             public List<OpResult> call() throws KeeperException, InterruptedException {\n                 ZooKeeper zkHandle = zk.get();\n@@ -327,11 +426,10 @@ public List<OpResult> call() throws KeeperException, InterruptedException {\n                 return zkHandle.multi(ops);\n             }\n \n-        }, operationRetryPolicy);\n+        }, operationRetryPolicy, rateLimiter, multiStats);\n     }\n \n     @Override\n-    @Deprecated\n     public Transaction transaction() {\n         // since there is no reference about which client that the transaction could use\n         // so just use ZooKeeper instance directly.\n@@ -347,6 +445,11 @@ public Transaction transaction() {\n     public List<ACL> getACL(final String path, final Stat stat) throws KeeperException, InterruptedException {\n         return ZooWorker.syncCallWithRetries(this, new ZooCallable<List<ACL>>() {\n \n+            @Override\n+            public String toString() {\n+                return String.format(\"getACL (%s, stat = %s)\", path, stat);\n+            }\n+\n             @Override\n             public List<ACL> call() throws KeeperException, InterruptedException {\n                 ZooKeeper zkHandle = zk.get();\n@@ -356,12 +459,12 @@ public List<ACL> call() throws KeeperException, InterruptedException {\n                 return zkHandle.getACL(path, stat);\n             }\n \n-        }, operationRetryPolicy);\n+        }, operationRetryPolicy, rateLimiter, getACLStats);\n     }\n \n     @Override\n     public void getACL(final String path, final Stat stat, final ACLCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getACLStats) {\n \n             final ACLCallback aclCb = new ACLCallback() {\n \n@@ -378,7 +481,12 @@ public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat s\n             };\n \n             @Override\n-            public void run() {\n+            public String toString() {\n+                return String.format(\"getACL (%s, stat = %s)\", path, stat);\n+            }\n+\n+            @Override\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getACL(path, stat, aclCb, worker);\n@@ -396,6 +504,11 @@ public Stat setACL(final String path, final List<ACL> acl, final int version)\n             throws KeeperException, InterruptedException {\n         return ZooWorker.syncCallWithRetries(this, new ZooCallable<Stat>() {\n \n+            @Override\n+            public String toString() {\n+                return String.format(\"setACL (%s, acl = %s, version = %d)\", path, acl, version);\n+            }\n+\n             @Override\n             public Stat call() throws KeeperException, InterruptedException {\n                 ZooKeeper zkHandle = zk.get();\n@@ -405,13 +518,13 @@ public Stat call() throws KeeperException, InterruptedException {\n                 return zkHandle.setACL(path, acl, version);\n             }\n \n-        }, operationRetryPolicy);\n+        }, operationRetryPolicy, rateLimiter, setACLStats);\n     }\n \n     @Override\n     public void setACL(final String path, final List<ACL> acl, final int version,\n             final StatCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, setACLStats) {\n \n             final StatCallback stCb = new StatCallback() {\n \n@@ -428,7 +541,12 @@ public void processResult(int rc, String path, Object ctx, Stat stat) {\n             };\n \n             @Override\n-            public void run() {\n+            public String toString() {\n+                return String.format(\"setACL (%s, acl = %s, version = %d)\", path, acl, version);\n+            }\n+\n+            @Override\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.setACL(path, acl, version, stCb, worker);\n@@ -443,7 +561,7 @@ public void run() {\n \n     @Override\n     public void sync(final String path, final VoidCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, syncStats) {\n \n             final VoidCallback vCb = new VoidCallback() {\n \n@@ -460,7 +578,12 @@ public void processResult(int rc, String path, Object ctx) {\n             };\n \n             @Override\n-            public void run() {\n+            public String toString() {\n+                return String.format(\"sync (%s)\", path);\n+            }\n+\n+            @Override\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.sync(path, vCb, worker);\n@@ -508,13 +631,18 @@ public String call() throws KeeperException, InterruptedException {\n                 return zkHandle.create(path, data, acl, createMode);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"create (%s, acl = %s, mode = %s)\", path, acl, createMode);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, createStats);\n     }\n \n     @Override\n     public void create(final String path, final byte[] data, final List<ACL> acl,\n             final CreateMode createMode, final StringCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, createStats) {\n \n             final StringCallback createCb = new StringCallback() {\n \n@@ -531,14 +659,19 @@ public void processResult(int rc, String path, Object ctx, String name) {\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.create(path, data, acl, createMode, createCb, worker);\n                 } else {\n                     zkHandle.create(path, data, acl, createMode, createCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"create (%s, acl = %s, mode = %s)\", path, acl, createMode);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -559,12 +692,17 @@ public Void call() throws KeeperException, InterruptedException {\n                 return null;\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"delete (%s, version = %d)\", path, version);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, deleteStats);\n     }\n \n     @Override\n     public void delete(final String path, final int version, final VoidCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, deleteStats) {\n \n             final VoidCallback deleteCb = new VoidCallback() {\n \n@@ -581,14 +719,19 @@ public void processResult(int rc, String path, Object ctx) {\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.delete(path, version, deleteCb, worker);\n                 } else {\n                     zkHandle.delete(path, version, deleteCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"delete (%s, version = %d)\", path, version);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -607,7 +750,12 @@ public Stat call() throws KeeperException, InterruptedException {\n                 return zkHandle.exists(path, watcher);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"exists (%s, watcher = %s)\", path, watcher);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, existsStats);\n     }\n \n     @Override\n@@ -623,12 +771,17 @@ public Stat call() throws KeeperException, InterruptedException {\n                 return zkHandle.exists(path, watch);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"exists (%s, watcher = %s)\", path, watch);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, existsStats);\n     }\n \n     @Override\n     public void exists(final String path, final Watcher watcher, final StatCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, existsStats) {\n \n             final StatCallback stCb = new StatCallback() {\n \n@@ -645,22 +798,27 @@ public void processResult(int rc, String path, Object ctx, Stat stat) {\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.exists(path, watcher, stCb, worker);\n                 } else {\n                     zkHandle.exists(path, watcher, stCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"exists (%s, watcher = %s)\", path, watcher);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n     }\n \n     @Override\n     public void exists(final String path, final boolean watch, final StatCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, existsStats) {\n \n             final StatCallback stCb = new StatCallback() {\n \n@@ -677,14 +835,19 @@ public void processResult(int rc, String path, Object ctx, Stat stat) {\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.exists(path, watch, stCb, worker);\n                 } else {\n                     zkHandle.exists(path, watch, stCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"exists (%s, watcher = %s)\", path, watch);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -704,7 +867,12 @@ public byte[] call() throws KeeperException, InterruptedException {\n                 return zkHandle.getData(path, watcher, stat);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getData (%s, watcher = %s)\", path, watcher);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getStats);\n     }\n \n     @Override\n@@ -721,12 +889,17 @@ public byte[] call() throws KeeperException, InterruptedException {\n                 return zkHandle.getData(path, watch, stat);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getData (%s, watcher = %s)\", path, watch);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getStats);\n     }\n \n     @Override\n     public void getData(final String path, final Watcher watcher, final DataCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getStats) {\n \n             final DataCallback dataCb = new DataCallback() {\n \n@@ -743,22 +916,27 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getData(path, watcher, dataCb, worker);\n                 } else {\n                     zkHandle.getData(path, watcher, dataCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getData (%s, watcher = %s)\", path, watcher);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n     }\n \n     @Override\n     public void getData(final String path, final boolean watch, final DataCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getStats) {\n \n             final DataCallback dataCb = new DataCallback() {\n \n@@ -775,14 +953,19 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getData(path, watch, dataCb, worker);\n                 } else {\n                     zkHandle.getData(path, watch, dataCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getData (%s, watcher = %s)\", path, watch);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -802,13 +985,18 @@ public Stat call() throws KeeperException, InterruptedException {\n                 return zkHandle.setData(path, data, version);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"setData (%s, version = %d)\", path, version);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, setStats);\n     }\n \n     @Override\n     public void setData(final String path, final byte[] data, final int version,\n             final StatCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, setStats) {\n \n             final StatCallback stCb = new StatCallback() {\n \n@@ -825,14 +1013,19 @@ public void processResult(int rc, String path, Object ctx, Stat stat) {\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.setData(path, data, version, stCb, worker);\n                 } else {\n                     zkHandle.setData(path, data, version, stCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"setData (%s, version = %d)\", path, version);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -852,7 +1045,12 @@ public List<String> call() throws KeeperException, InterruptedException {\n                 return zkHandle.getChildren(path, watcher, stat);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watcher);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getChildrenStats);\n     }\n \n     @Override\n@@ -869,13 +1067,18 @@ public List<String> call() throws KeeperException, InterruptedException {\n                 return zkHandle.getChildren(path, watch, stat);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watch);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getChildrenStats);\n     }\n \n     @Override\n     public void getChildren(final String path, final Watcher watcher,\n             final Children2Callback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getChildrenStats) {\n \n             final Children2Callback childCb = new Children2Callback() {\n \n@@ -893,14 +1096,19 @@ public void processResult(int rc, String path, Object ctx,\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getChildren(path, watcher, childCb, worker);\n                 } else {\n                     zkHandle.getChildren(path, watcher, childCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watcher);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -909,7 +1117,7 @@ public void run() {\n     @Override\n     public void getChildren(final String path, final boolean watch, final Children2Callback cb,\n             final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getChildrenStats) {\n \n             final Children2Callback childCb = new Children2Callback() {\n \n@@ -927,14 +1135,19 @@ public void processResult(int rc, String path, Object ctx,\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getChildren(path, watch, childCb, worker);\n                 } else {\n                     zkHandle.getChildren(path, watch, childCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watch);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -955,7 +1168,12 @@ public List<String> call() throws KeeperException, InterruptedException {\n                 return zkHandle.getChildren(path, watcher);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watcher);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getChildrenStats);\n     }\n \n     @Override\n@@ -972,13 +1190,18 @@ public List<String> call() throws KeeperException, InterruptedException {\n                 return zkHandle.getChildren(path, watch);\n             }\n \n-        }, operationRetryPolicy);\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watch);\n+            }\n+\n+        }, operationRetryPolicy, rateLimiter, getChildrenStats);\n     }\n \n     @Override\n     public void getChildren(final String path, final Watcher watcher,\n             final ChildrenCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getChildrenStats) {\n \n             final ChildrenCallback childCb = new ChildrenCallback() {\n \n@@ -996,14 +1219,19 @@ public void processResult(int rc, String path, Object ctx,\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getChildren(path, watcher, childCb, worker);\n                 } else {\n                     zkHandle.getChildren(path, watcher, childCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watcher);\n+            }\n         };\n         // execute it immediately\n         proc.run();\n@@ -1012,7 +1240,7 @@ public void run() {\n     @Override\n     public void getChildren(final String path, final boolean watch,\n             final ChildrenCallback cb, final Object context) {\n-        final Runnable proc = new RetryRunnable(operationRetryPolicy) {\n+        final Runnable proc = new ZkRetryRunnable(operationRetryPolicy, rateLimiter, getChildrenStats) {\n \n             final ChildrenCallback childCb = new ChildrenCallback() {\n \n@@ -1030,14 +1258,19 @@ public void processResult(int rc, String path, Object ctx,\n             };\n \n             @Override\n-            public void run() {\n+            void zkRun() {\n                 ZooKeeper zkHandle = zk.get();\n                 if (null == zkHandle) {\n                     ZooKeeperClient.super.getChildren(path, watch, childCb, worker);\n                 } else {\n                     zkHandle.getChildren(path, watch, childCb, worker);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"getChildren (%s, watcher = %s)\", path, watch);\n+            }\n         };\n         // execute it immediately\n         proc.run();"},{"sha":"ce5de4a69c42e8b50c233b74731ea8e4ef335669","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"modified","additions":61,"deletions":11,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -20,11 +20,16 @@\n  */\n package org.apache.bookkeeper.zookeeper;\n \n+import java.util.HashSet;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -40,17 +45,29 @@ public class ZooKeeperWatcherBase implements Watcher {\n             .getLogger(ZooKeeperWatcherBase.class);\n \n     private final int zkSessionTimeOut;\n-    private CountDownLatch clientConnectLatch = new CountDownLatch(1);\n+    private volatile CountDownLatch clientConnectLatch = new CountDownLatch(1);\n     private final CopyOnWriteArraySet<Watcher> childWatchers =\n             new CopyOnWriteArraySet<Watcher>();\n+    private final StatsLogger statsLogger;\n+    private final ConcurrentHashMap<Event.KeeperState, Counter> stateCounters =\n+            new ConcurrentHashMap<Event.KeeperState, Counter>();\n+    private final ConcurrentHashMap<EventType, Counter> eventCounters =\n+            new ConcurrentHashMap<EventType, Counter>();\n \n     public ZooKeeperWatcherBase(int zkSessionTimeOut) {\n-        this.zkSessionTimeOut = zkSessionTimeOut;\n+        this(zkSessionTimeOut, NullStatsLogger.INSTANCE);\n+    }\n+\n+    public ZooKeeperWatcherBase(int zkSessionTimeOut, StatsLogger statsLogger) {\n+        this(zkSessionTimeOut, new HashSet<Watcher>(), statsLogger);\n     }\n \n-    public ZooKeeperWatcherBase(int zkSessionTimeOut, Set<Watcher> childWatchers) {\n+    public ZooKeeperWatcherBase(int zkSessionTimeOut,\n+                                Set<Watcher> childWatchers,\n+                                StatsLogger statsLogger) {\n         this.zkSessionTimeOut = zkSessionTimeOut;\n         this.childWatchers.addAll(childWatchers);\n+        this.statsLogger = statsLogger;\n     }\n \n     public ZooKeeperWatcherBase addChildWatcher(Watcher watcher) {\n@@ -63,26 +80,55 @@ public ZooKeeperWatcherBase removeChildWatcher(Watcher watcher) {\n         return this;\n     }\n \n+    private Counter getEventCounter(EventType type) {\n+        Counter c = eventCounters.get(type);\n+        if (null == c) {\n+            Counter newCounter = statsLogger.scope(\"events\").getCounter(type.name());\n+            Counter oldCounter = eventCounters.putIfAbsent(type, newCounter);\n+            if (null != oldCounter) {\n+                c = oldCounter;\n+            } else {\n+                c = newCounter;\n+            }\n+        }\n+        return c;\n+    }\n+\n+    public Counter getStateCounter(Event.KeeperState state) {\n+        Counter c = stateCounters.get(state);\n+        if (null == c) {\n+            Counter newCounter = statsLogger.scope(\"state\").getCounter(state.name());\n+            Counter oldCounter = stateCounters.putIfAbsent(state, newCounter);\n+            if (null != oldCounter) {\n+                c = oldCounter;\n+            } else {\n+                c = newCounter;\n+            }\n+        }\n+        return c;\n+    }\n+\n     @Override\n     public void process(WatchedEvent event) {\n         // If event type is NONE, this is a connection status change\n         if (event.getType() != EventType.None) {\n-            LOG.debug(\"Recieved event: {}, path: {} from ZooKeeper server\",\n+            LOG.debug(\"Received event: {}, path: {} from ZooKeeper server\",\n                     event.getType(), event.getPath());\n+            getEventCounter(event.getType()).inc();\n             // notify the child watchers\n             notifyEvent(event);\n             return;\n         }\n-\n-        LOG.debug(\"Recieved {} from ZooKeeper server\", event.getState());\n+        getStateCounter(event.getState()).inc();\n+        LOG.debug(\"Received {} from ZooKeeper server\", event.getState());\n         // TODO: Needs to handle AuthFailed, SaslAuthenticated events\n         switch (event.getState()) {\n         case SyncConnected:\n+            LOG.info(\"ZooKeeper client is connected now.\");\n             clientConnectLatch.countDown();\n             break;\n         case Disconnected:\n-            clientConnectLatch = new CountDownLatch(1);\n-            LOG.debug(\"Ignoring Disconnected event from ZooKeeper server\");\n+            LOG.info(\"ZooKeeper client is disconnected from zookeeper now, but it is OK unless we received EXPIRED event.\");\n             break;\n         case Expired:\n             clientConnectLatch = new CountDownLatch(1);\n@@ -98,7 +144,7 @@ public void process(WatchedEvent event) {\n \n     /**\n      * Waiting for the SyncConnected event from the ZooKeeper server\n-     * \n+     *\n      * @throws KeeperException\n      *             when there is no connection\n      * @throws InterruptedException\n@@ -119,14 +165,18 @@ public int getZkSessionTimeOut() {\n \n     /**\n      * Notify Event to child watchers.\n-     * \n+     *\n      * @param event\n      *          Watched event received from ZooKeeper.\n      */\n     private void notifyEvent(WatchedEvent event) {\n         // notify child watchers\n         for (Watcher w : childWatchers) {\n-            w.process(event);\n+            try {\n+                w.process(event);\n+            } catch (Exception t) {\n+                LOG.warn(\"Encountered unexpected exception from watcher {} : \", w, t);\n+            }\n         }\n     }\n "},{"sha":"117ba8edc4de7bd4250a35a9e38941e9e6241561","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooWorker.java","status":"modified","additions":33,"deletions":17,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooWorker.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -23,6 +23,8 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.util.concurrent.RateLimiter;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n@@ -37,21 +39,28 @@ class ZooWorker {\n     static final Logger logger = LoggerFactory.getLogger(ZooWorker.class);\n \n     int attempts = 0;\n-    long startTimeMs;\n+    long startTimeNanos;\n     long elapsedTimeMs = 0L;\n     final RetryPolicy retryPolicy;\n+    final OpStatsLogger statsLogger;\n \n-    ZooWorker(RetryPolicy retryPolicy) {\n+    ZooWorker(RetryPolicy retryPolicy, OpStatsLogger statsLogger) {\n         this.retryPolicy = retryPolicy;\n-        this.startTimeMs = MathUtils.now();\n+        this.statsLogger = statsLogger;\n+        this.startTimeNanos = MathUtils.nowInNano();\n     }\n \n     public boolean allowRetry(int rc) {\n+        elapsedTimeMs = MathUtils.elapsedMSec(startTimeNanos);\n         if (!ZooWorker.isRecoverableException(rc)) {\n+            if (KeeperException.Code.OK.intValue() == rc) {\n+                statsLogger.registerSuccessfulEvent(MathUtils.elapsedMicroSec(startTimeNanos), TimeUnit.MICROSECONDS);\n+            } else {\n+                statsLogger.registerFailedEvent(MathUtils.elapsedMicroSec(startTimeNanos), TimeUnit.MICROSECONDS);\n+            }\n             return false;\n         }\n         ++attempts;\n-        elapsedTimeMs = MathUtils.now() - startTimeMs;\n         return retryPolicy.allowRetry(attempts, elapsedTimeMs);\n     }\n \n@@ -61,7 +70,7 @@ public long nextRetryWaitTime() {\n \n     /**\n      * Check whether the given result code is recoverable by retry.\n-     * \n+     *\n      * @param rc result code\n      * @return true if given result code is recoverable.\n      */\n@@ -74,14 +83,14 @@ public static boolean isRecoverableException(int rc) {\n \n     /**\n      * Check whether the given exception is recoverable by retry.\n-     * \n+     *\n      * @param exception given exception\n      * @return true if given exception is recoverable.\n      */\n     public static boolean isRecoverableException(KeeperException exception) {\n         return isRecoverableException(exception.code().intValue());\n     }\n-    \n+\n     static interface ZooCallable<T> {\n         /**\n          * Be compatible with ZooKeeper interface.\n@@ -95,41 +104,53 @@ public static boolean isRecoverableException(KeeperException exception) {\n \n     /**\n      * Execute a sync zookeeper operation with a given retry policy.\n-     * \n+     *\n      * @param client\n      *          ZooKeeper client.\n      * @param proc\n      *          Synchronous zookeeper operation wrapped in a {@link Callable}.\n      * @param retryPolicy\n      *          Retry policy to execute the synchronous operation.\n+     * @param rateLimiter\n+     *          Rate limiter for zookeeper calls\n+     * @param statsLogger\n+     *          Stats Logger for zookeeper client.\n      * @return result of the zookeeper operation\n      * @throws KeeperException any non-recoverable exception or recoverable exception exhausted all retires.\n      * @throws InterruptedException the operation is interrupted.\n      */\n-    public static<T> T syncCallWithRetries(\n-            ZooKeeperClient client, ZooCallable<T> proc, RetryPolicy retryPolicy)\n+    public static<T> T syncCallWithRetries(ZooKeeperClient client,\n+                                           ZooCallable<T> proc,\n+                                           RetryPolicy retryPolicy,\n+                                           RateLimiter rateLimiter,\n+                                           OpStatsLogger statsLogger)\n     throws KeeperException, InterruptedException {\n         T result = null;\n         boolean isDone = false;\n         int attempts = 0;\n-        long startTimeMs = MathUtils.now();\n+        long startTimeNanos = MathUtils.nowInNano();\n         while (!isDone) {\n             try {\n                 if (null != client) {\n                     client.waitForConnection();\n                 }\n                 logger.debug(\"Execute {} at {} retry attempt.\", proc, attempts);\n+                if (null != rateLimiter) {\n+                    rateLimiter.acquire();\n+                }\n                 result = proc.call();\n                 isDone = true;\n+                statsLogger.registerSuccessfulEvent(MathUtils.elapsedMicroSec(startTimeNanos), TimeUnit.MICROSECONDS);\n             } catch (KeeperException e) {\n                 ++attempts;\n                 boolean rethrow = true;\n-                long elapsedTime = MathUtils.now() - startTimeMs;\n+                long elapsedTime = MathUtils.elapsedMSec(startTimeNanos);\n                 if (((null != client && isRecoverableException(e)) || null == client) &&\n                         retryPolicy.allowRetry(attempts, elapsedTime)) {\n                     rethrow = false;\n                 }\n                 if (rethrow) {\n+                    statsLogger.registerFailedEvent(MathUtils.elapsedMicroSec(startTimeNanos), TimeUnit.MICROSECONDS);\n                     logger.debug(\"Stopped executing {} after {} attempts.\", proc, attempts);\n                     throw e;\n                 }\n@@ -139,9 +160,4 @@ public static<T> T syncCallWithRetries(\n         return result;\n     }\n \n-    static<T> T syncCallWithRetries(\n-            ZooCallable<T> proc, RetryPolicy retryPolicy) throws KeeperException, InterruptedException {\n-        return syncCallWithRetries(null, proc, retryPolicy);\n-    }\n-\n }"},{"sha":"5b70d3f6d86b1594abc33c6619dbe316cbd1b622","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":5,"deletions":27,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -26,28 +26,19 @@\n import java.io.IOException;\n import java.net.BindException;\n import java.net.InetAddress;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.jboss.netty.channel.ChannelException;\n import junit.framework.Assert;\n \n-import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n-import org.apache.bookkeeper.util.IOUtils;\n-import org.apache.commons.io.FileUtils;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.KeeperException;\n+import org.jboss.netty.channel.ChannelException;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -381,21 +372,8 @@ public void testWithDiskError() throws Exception {\n     private void createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        newzk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n-                new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        // handle session disconnects and expires\n-                        if (event.getState().equals(\n-                                Watcher.Event.KeeperState.SyncConnected)) {\n-                            latch.countDown();\n-                        }\n-                    }\n-                });\n-        if (!latch.await(10000, TimeUnit.MILLISECONDS)) {\n-            newzk.close();\n-            fail(\"Could not connect to zookeeper server\");\n-        }\n+        newzk = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .build();\n     }\n }"},{"sha":"978daff7610eb5a2d954c03390f45ffcc20b46b4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperClientZKSessionExpiry.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientZKSessionExpiry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientZKSessionExpiry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientZKSessionExpiry.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -0,0 +1,79 @@\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.test.TestCallbacks.AddCallbackFuture;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BookKeeperClientZKSessionExpiry extends BookKeeperClusterTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(BookKeeperClientZKSessionExpiry.class);\n+\n+    public BookKeeperClientZKSessionExpiry() {\n+        super(4);\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testSessionLossWhileWriting() throws Exception {\n+\n+        Thread expiryThread = new Thread() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        while (true) {\n+                            Thread.sleep(5000);\n+                            long sessionId = bkc.getZkHandle().getSessionId();\n+                            byte[] sessionPasswd = bkc.getZkHandle().getSessionPasswd();\n+\n+                            try {\n+                                ZooKeeperWatcherBase watcher = new ZooKeeperWatcherBase(10000);\n+                                ZooKeeper zk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n+                                                             watcher, sessionId, sessionPasswd);\n+                                zk.close();\n+                            } catch (Exception e) {\n+                                LOG.info(\"Error killing session\", e);\n+                            }\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        return;\n+                    }\n+                }\n+            };\n+        expiryThread.start();\n+\n+        for (int i = 0; i < 3; i++) {\n+            LedgerHandle lh = bkc.createLedger(3, 3, 2, BookKeeper.DigestType.MAC, \"foobar\".getBytes());\n+            for (int j = 0; j < 100; j++) {\n+                lh.asyncAddEntry(\"foobar\".getBytes(), new AddCallbackFuture(j), null);\n+            }\n+            startNewBookie();\n+            killBookie(0);\n+\n+            lh.addEntry(\"lastEntry\".getBytes());\n+\n+            lh.close();\n+        }\n+    }\n+}"},{"sha":"bc2fd93d168a897c061955c64649c16214a9fe9c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -21,20 +21,17 @@\n package org.apache.bookkeeper.meta;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n import java.util.concurrent.CyclicBarrier;\n-import java.util.concurrent.CountDownLatch;\n import java.util.List;\n import java.util.ArrayList;\n import java.lang.reflect.Field;\n \n-import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -204,13 +201,9 @@ private static class CreateLMThread extends Thread {\n             this.factoryCls = factoryCls;\n             this.barrier = barrier;\n             this.root = root;\n-            final CountDownLatch latch = new CountDownLatch(1);\n-            zkc = new ZooKeeper(zkConnectString, 10000, new Watcher() {\n-                    public void process(WatchedEvent event) {\n-                        latch.countDown();\n-                    }\n-                });\n-            latch.await();\n+            zkc = ZooKeeperClient.newBuilder()\n+                    .connectString(zkConnectString)\n+                    .build();\n         }\n \n         public void run() {"},{"sha":"b52cc8dd37a6ce7b04057bf4948a0a6dce99e09d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorBookieTest.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -29,8 +29,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -205,9 +204,10 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n     }\n \n     private void startAuditorElector(String addr) throws Exception {\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        ZooKeeper zk = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n+        ZooKeeper zk = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n         zkClients.add(zk);\n \n         AuditorElector auditorElector = new AuditorElector(addr,"},{"sha":"ba19277b5afd167c053830dcd0415b22d0c4734a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicBookieCheckTest.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -25,7 +25,7 @@\n \n import java.util.List;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerHandleAdapter;\n@@ -35,9 +35,6 @@\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n-\n-import org.apache.bookkeeper.util.ZkUtils;\n-\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Before;\n import org.junit.After;\n@@ -74,9 +71,10 @@ public void setUp() throws Exception {\n         conf.setAuditorPeriodicBookieCheckInterval(CHECK_INTERVAL);\n         String addr = bs.get(0).getLocalAddress().toString();\n \n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        auditorZookeeper = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n+        auditorZookeeper = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n \n         auditorElector = new AuditorElector(addr, conf,\n                 auditorZookeeper);"},{"sha":"353edfa3c6e271c3e86ec54b406ca25f491b5db9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -31,8 +31,7 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n import org.junit.Before;\n@@ -84,9 +83,10 @@ public void setUp() throws Exception {\n \n             String addr = bs.get(i).getLocalAddress().toString();\n \n-            ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-            ZooKeeper zk = ZkUtils.createConnectedZookeeperClient(\n-                    zkUtil.getZooKeeperConnectString(), w);\n+            ZooKeeper zk = ZooKeeperClient.newBuilder()\n+                    .connectString(zkUtil.getZooKeeperConnectString())\n+                    .sessionTimeoutMs(10000)\n+                    .build();\n             zkClients.add(zk);\n \n             AuditorElector auditorElector = new AuditorElector(addr,"},{"sha":"d7a622bb1f4f7667288109a5f100dda2847f3d96","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestLedgerUnderreplicationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestLedgerUnderreplicationManager.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -53,8 +53,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -97,12 +96,14 @@ public void setupZooKeeper() throws Exception {\n \n         executor = Executors.newCachedThreadPool();\n \n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        zkc1 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n-        w = new ZooKeeperWatcherBase(10000);\n-        zkc2 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n+        zkc1 = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n+        zkc2 = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n         basePath = conf.getZkLedgersRootPath() + '/'"},{"sha":"0490debe1c096de5ead754295d4565040921aee0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -33,6 +33,7 @@\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n@@ -229,9 +230,10 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n         BookieSocketAddress newBkAddr2 = new BookieSocketAddress(InetAddress\n                 .getLocalHost().getHostAddress(), startNewBookie2);\n         LOG.info(\"New Bookie addr :\" + newBkAddr2);\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        ZooKeeper zkc1 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n+        ZooKeeper zkc1 = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n         ReplicationWorker rw2 = new ReplicationWorker(zkc1, baseConf,\n                 newBkAddr2);\n         rw1.start();\n@@ -544,9 +546,10 @@ public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n      */\n     @Test(timeout=30000)\n     public void testRWZKSessionLost() throws Exception {\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        ZooKeeper zk = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), w);\n+        ZooKeeper zk = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n \n         try {\n             ReplicationWorker rw = new ReplicationWorker(zk, baseConf, getBookie(0));"},{"sha":"930e42a0c231fe395eff7c31409fbce4debb3ad9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n \n@@ -100,9 +101,10 @@ public void restartServer() throws Exception {\n \n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        zkc = ZkUtils.createConnectedZookeeperClient(\n-                getZooKeeperConnectString(), w);\n+        zkc = ZooKeeperClient.newBuilder()\n+                .connectString(getZooKeeperConnectString())\n+                .sessionTimeoutMs(10000)\n+                .build();\n     }\n \n     public void sleepServer(final int seconds, final CountDownLatch l)"},{"sha":"f8c9871887dea5ccfdf4134cc2ba284dd91a3a74","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a80bba272ecd7344ac552f3888ef5db49cbbdeb5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java?ref=a80bba272ecd7344ac552f3888ef5db49cbbdeb5","patch":"@@ -28,6 +28,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.zookeeper.AsyncCallback.Children2Callback;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n@@ -106,7 +107,7 @@ class ShutdownZkServerClient extends ZooKeeperClient {\n \n         ShutdownZkServerClient(String connectString, int sessionTimeoutMs,\n                 ZooKeeperWatcherBase watcher, RetryPolicy operationRetryPolicy)throws IOException {\n-            super(connectString, sessionTimeoutMs, watcher, operationRetryPolicy);\n+            super(connectString, sessionTimeoutMs, watcher, operationRetryPolicy, null, NullStatsLogger.INSTANCE, 1, 0);\n         }\n \n         @Override"}]}