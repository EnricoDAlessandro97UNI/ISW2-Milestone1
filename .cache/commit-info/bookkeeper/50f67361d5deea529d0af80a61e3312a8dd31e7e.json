{"sha":"50f67361d5deea529d0af80a61e3312a8dd31e7e","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjUwZjY3MzYxZDVkZWVhNTI5ZDBhZjgwYTYxZTMzMTJhOGRkMzFlN2U=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-31T21:45:57Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-31T21:45:57Z"},"message":"ISSUE #323: [WEBSITE] ci job to automatically publish website to apache once the pull request is merged\n\nDescriptions of the changes in this PR:\n\n- add a Dockerfile to use ruby:2.4.1 to build website\n- add scripts to run docker file interactively (run.sh) and in ci (ci.sh)\n- also remove a few scripts that were not used by jenkins anymore.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Matteo Merli <mmerli@apache.org>\n\nThis closes #332 from sijie/sijie/jenkin_jobs, closes #323","tree":{"sha":"2ce825ce1813bfb0676561a3021a0aeb09212b60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/2ce825ce1813bfb0676561a3021a0aeb09212b60"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/50f67361d5deea529d0af80a61e3312a8dd31e7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/50f67361d5deea529d0af80a61e3312a8dd31e7e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/50f67361d5deea529d0af80a61e3312a8dd31e7e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/50f67361d5deea529d0af80a61e3312a8dd31e7e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe"}],"stats":{"total":2070,"additions":160,"deletions":1910},"files":[{"sha":"1515495912bf8ed4769de164e3769e14cc69adb2","filename":"bin/find-new-patch-available-jiras","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ffind-new-patch-available-jiras","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ffind-new-patch-available-jiras","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ffind-new-patch-available-jiras?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,129 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TEMPDIR=${BASEDIR}/tmp\n-\n-JIRAAVAILPATCHQUERY=\"https://issues.apache.org/jira/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+in+%28BOOKKEEPER%29+AND+status+%3D+%22Patch+Available%22+ORDER+BY+updated+DESC&tempMax=1000\"\n-TESTPATCHJOBURL=\"https://builds.apache.org/job/bookkeeper-trunk-precommit-build\"\n-TOKEN=\"\"\n-SUBMIT=\"false\"\n-DELETEHISTORYFILE=\"false\"\n-\n-RUNTESTSFILE=${BASEDIR}/TESTED_PATCHES.txt\n-\n-printUsage() {\n-    echo \"Usage: $0 <OPTIONS>\"\n-    echo \"          --submit --token=<BOOKKEEPER PRECOMMIT JOB TOKEN>\"\n-    echo \"          [--delete-history-file]\"\n-    echo \"          [--script-debug]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --submit)\n-            SUBMIT=\"true\"\n-            ;;\n-        --token=*)\n-            TOKEN=${i#*=}\n-            ;;\n-        --script-debug)\n-            DEBUG=\"-x\"\n-            ;;\n-        --delete-history-file)\n-            DELETEHISTORYFILE=\"true\"\n-            ;;\n-        *)\n-            echo \"Invalid option\"\n-            echo\n-            printUsage\n-            exit 1\n-            ;;\n-        esac\n-    done\n-    if [[ \"$SUBMIT\" == \"true\" && \"${TOKEN}\" == \"\" ]] ; then\n-        echo \"Token has not been specified\"\n-        echo\n-        printUsage\n-        exit 1\n-    fi\n-}\n-\n-###############################################################################\n-findAndSubmitAvailablePatches() {\n-    ## Grab all the key (issue numbers) and largest attachment id for each item in the XML\n-    curl --fail --location --retry 3 \"${JIRAAVAILPATCHQUERY}\" > ${TEMPDIR}/patch-availables.xml\n-    if [ \"$?\" != \"0\" ] ; then\n-        echo \"Could not retrieve available patches from JIRA\"\n-        exit 1\n-    fi\n-    xpath -e \"//item/key/text() | //item/attachments/attachment[not(../attachment/@id > @id)]/@id\" \\\n-        ${TEMPDIR}/patch-availables.xml > ${TEMPDIR}/patch-attachments.element\n-\n-    ### Replace newlines with nothing, then replace id=\" with =, then replace \" with newline\n-    ### to yield lines with pairs (issueNumber,largestAttachmentId). Example: BOOKKEEPER-123,456984\n-    cat ${TEMPDIR}/patch-attachments.element \\\n-        | awk '{ if ( $1 ~ /^BOOKKEEPER\\-/) {JIRA=$1 }; if ($1 ~ /id=/) { print JIRA\",\"$1} }' \\\n-        | sed 's/id\\=\"//' | sed 's/\"//' > ${TEMPDIR}/patch-availables.pair\n-\n-    ### Iterate through issue list and find the (issueNumber,largestAttachmentId) pairs that have\n-    ### not been tested (ie don't already exist in the patch_tested.txt file\n-    touch ${RUNTESTSFILE}\n-    cat ${TEMPDIR}/patch-availables.pair | while read PAIR ; do\n-        set +e\n-        COUNT=`grep -c \"$PAIR\" ${RUNTESTSFILE}`\n-        set -e\n-        if [ \"$COUNT\" -lt \"1\" ] ; then\n-        ### Parse $PAIR into project, issue number, and attachment id\n-            ISSUE=`echo $PAIR | sed -e \"s/,.*$//\"`\n-            echo \"Found new patch for issue $ISSUE\"\n-            if [ \"$SUBMIT\" == \"true\" ]; then\n-            ### Kick off job\n-                echo \"Submitting job for issue $ISSUE\"\n-                curl --fail --location --retry 3 \\\n-                    \"${TESTPATCHJOBURL}/buildWithParameters?token=${TOKEN}&JIRA_NUMBER=${ISSUE}\" > /dev/null\n-                if [ \"$?\" != \"0\" ] ; then\n-                    echo \"Could not submit precommit job for $ISSUE\"\n-                    exit 1\n-                fi\n-            fi\n-            ### Mark this pair as tested by appending to file\n-            echo \"$PAIR\" >> ${RUNTESTSFILE}\n-        fi\n-    done\n-}\n-###############################################################################\n-\n-mkdir -p ${TEMPDIR} 2>&1 $STDOUT\n-\n-parseArgs \"$@\"\n-\n-if [ -n \"${DEBUG}\" ] ; then\n-    set -x\n-fi\n-\n-if [ \"${DELETEHISTORYFILE}\" == \"true\" ] ; then\n-    rm ${RUNTESTSFILE}\n-fi\n-\n-findAndSubmitAvailablePatches\n-\n-exit 0"},{"sha":"b3bfd01af87e735b2aa6abdfe5c490160f4ea8be","filename":"bin/raw-check-patch","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Fraw-check-patch","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Fraw-check-patch","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Fraw-check-patch?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,47 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-printTrailingSpaces() {\n-    PATCH=$1\n-    cat $PATCH | awk '/^+/ { if (/ $/) { print \"\\tL\" NR \":\" $0} }'\n-}\n-\n-printTabs() {\n-    PATCH=$1\n-    cat $PATCH | awk '/^+/ { if (/\\t/) { print \"\\tL\" NR \":\" $0 } }'\n-}\n-\n-printAuthors() {\n-    PATCH=$1\n-    cat $PATCH | awk '/^+/ { L=tolower($0); if (L ~ /.*\\*.* @author/) { print \"\\tL\" NR \":\" $0 } }'\n-}\n-\n-printLongLines() {\n-    PATCH=$1\n-    cat $PATCH | awk '/^+/ { if ( length > 121 ) { print \"\\tL\" NR \":\" $0 } }'\n-}\n-\n-if [[ \"X$(basename -- \"$0\")\" = \"Xraw-check-patch\" ]]; then\n-    echo Trailing spaces\n-    printTrailingSpaces $1\n-    echo\n-    echo Tabs\n-    printTabs $1\n-    echo\n-    echo Authors\n-    printAuthors $1\n-    echo\n-    echo Long lines\n-    printLongLines $1\n-fi"},{"sha":"e81d653d53fffdc0cefc9c9633e26993e68f8afb","filename":"bin/test-patch","status":"removed","additions":0,"deletions":416,"changes":416,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,416 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TESTPATCHDIRNAME=test-patch\n-TESTPATCHDIR=${BASEDIR}/${TESTPATCHDIRNAME}\n-TOOLSDIR=${TESTPATCHDIR}/tools\n-TEMPDIR=${TESTPATCHDIR}/tmp\n-REPORTDIR=${TESTPATCHDIR}/reports\n-SUMMARYFILE=${REPORTDIR}/TEST-SUMMARY.jira\n-SUMMARYFILETXT=${REPORTDIR}/TEST-SUMMARY.txt\n-\n-JIRAHOST=\"https://issues.apache.org\"\n-JIRAURL=\"${JIRAHOST}/jira\"\n-JIRAURLISSUEPREFIX=\"${JIRAURL}/browse/\"\n-\n-JIRAUPDATE=\"false\"\n-JIRAUSER=\"\"\n-JIRAPASSWORD=\"\"\n-\n-\n-VERBOSEOPTION=\"\"\n-JIRAISSUE=\"\"\n-PATCHFILE=\"\"\n-TASKSTORUN=\"\"\n-TASKSTOSKIP=\"\"\n-RESETSCM=\"false\"\n-DIRTYSCM=\"false\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-gitOrSvn() {\n-    SCM=\"NONE\"\n-    which git &> /dev/null\n-    if [[ $? == 0 ]] ; then\n-        git status &> /dev/null\n-        if [[ $? == 0 ]] ; then\n-            SCM=\"git\"\n-        fi\n-    fi\n-    if [ \"${SCM}\" == \"NONE\" ] ; then\n-        which svn &> /dev/null\n-        if [[ $? == 0 ]] ; then\n-            svnOutput=`svn status 2>&1`\n-            if [[  \"$svnOutput\" != *\"is not a working copy\" ]] ; then\n-                SCM=\"svn\"\n-            fi\n-        fi\n-    fi\n-    if [ \"${SCM}\" == \"NONE\" ] ; then\n-        echo \"The current workspace is not under Source Control (GIT or SVN)\"\n-        exit 1\n-    fi\n-}\n-###############################################################################\n-prepareSCM() {\n-    gitOrSvn\n-    if [ \"${DIRTYSCM}\" != \"true\" ] ; then\n-        if [ \"${RESETSCM}\" == \"true\" ] ; then\n-            if [ \"${SCM}\" == \"git\" ] ; then\n-                git reset --hard HEAD > /dev/null\n-                git clean -f -d -e $TESTPATCHDIRNAME > /dev/null\n-            fi\n-            if [ \"${SCM}\" == \"svn\" ] ; then\n-                svn revert -R . > /dev/null\n-                svn status | grep \"\\?\" | awk '{print $2}' | xargs rm -rf\n-            fi\n-        else\n-            echo \"It should not happen DIRTYSCM=false & RESETSCM=false\"\n-            exit 1\n-        fi\n-        echo \"Cleaning local ${SCM} workspace\" >> ${SUMMARYFILE}\n-    else\n-        echo \"WARNING: Running test-patch on a dirty local ${SCM} workspace\" >> ${SUMMARYFILE}\n-    fi\n-}\n-###############################################################################\n-prepareTestPatchDirs() {\n-    mkdir -p ${TESTPATCHDIR} 2> /dev/null\n-    rm -rf ${REPORTDIR} 2> /dev/null\n-    rm -rf ${TEMPDIR} 2> /dev/null\n-    mkdir -p ${TOOLSDIR} 2> /dev/null\n-    mkdir -p ${TEMPDIR} 2> /dev/null\n-    mkdir -p ${REPORTDIR} 2> /dev/null\n-    if [ ! -e \"${TESTPATCHDIR}\" ] ; then\n-        echo \"Could not create test-patch/ dir\"\n-        exit 1\n-    fi\n-}\n-###############################################################################\n-updateJira() {\n-    if [[ \"${JIRAUPDATE}\" != \"\" && \"${JIRAISSUE}\" != \"\" ]] ; then\n-        if [[ \"$JIRAPASSWORD\" != \"\" ]] ; then\n-            JIRACLI=${TOOLSDIR}/jira-cli/jira.sh\n-            if [ ! -e \"${JIRACLI}\" ] ; then\n-                curl https://bobswift.atlassian.net/wiki/download/attachments/16285777/jira-cli-2.6.0-distribution.zip > ${TEMPDIR}/jira-cli.zip\n-                if [ $? != 0 ] ; then\n-                    echo\n-                    echo \"Could not download jira-cli tool, thus no JIRA updating\"\n-                    echo\n-                    exit 1\n-                fi\n-                mkdir ${TEMPDIR}/jira-cli-tmp\n-                (cd ${TEMPDIR}/jira-cli-tmp;jar xf ${TEMPDIR}/jira-cli.zip; mv jira-cli-2.6.0 ${TOOLSDIR}/jira-cli)\n-                chmod u+x ${JIRACLI}\n-            fi\n-            echo \"Adding comment to JIRA\"\n-            comment=`cat ${SUMMARYFILE}`\n-            $JIRACLI -s $JIRAURL -a addcomment -u $JIRAUSER -p \"$JIRAPASSWORD\" --comment \"$comment\" --issue $JIRAISSUE\n-            echo\n-        else\n-            echo \"Skipping JIRA update\"\n-            echo\n-        fi\n-    fi\n-}\n-###############################################################################\n-cleanupAndExit() {\n-    updateJira\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 <OPTIONS>\"\n-    echo \"          (--jira=<JIRA ISSUE> | --patch=<PATCH PATH>)\"\n-    echo \"          (--reset-scm | --dirty-scm)\"\n-    echo \"          [--tasks=<TASK,...>]\"\n-    echo \"          [--skip-tasks=<TASK,...>]\"\n-    echo \"          [--jira-cli=<JIRA CLIENT>]\"\n-    echo \"          [--jira-user=<JIRA USER>]\"\n-    echo \"          [--jira-password=<JIRA PASSWORD>]\"\n-    echo \"          [-D<MVN PROPERTY>...]\"\n-    echo \"          [-P<MVN PROFILE>...]\"\n-    echo \"          [--list-tasks]\"\n-    echo \"          [--verbose]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --jira=*)\n-            JIRAISSUE=${i#*=}\n-            ;;\n-        --patch=*)\n-            PATCHFILE=${i#*=}\n-            ;;\n-        --tasks=*)\n-            TASKSTORUN=${i#*=}\n-            ;;\n-        --skip-tasks=*)\n-            TASKSTOSKIP=${i#*=}\n-            ;;\n-        --list-tasks)\n-            listTasks\n-            cleanupAndExit 0\n-            ;;\n-        --jira-cli=*)\n-            JIRACLI=${i#*=}\n-            ;;\n-        --jira-user=*)\n-            JIRAUSER=${i#*=}\n-            ;;\n-        --jira-password=*)\n-            JIRAPASSWORD=${i#*=}\n-            JIRAUPDATE=\"true\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        --reset-scm)\n-            RESETSCM=\"true\"\n-            ;;\n-        --dirty-scm)\n-            DIRTYSCM=\"true\"\n-            ;;\n-        --verbose)\n-            VERBOSEOPTION=\"--verbose\"\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        *)\n-            echo \"Invalid option\"\n-            echo\n-            printUsage\n-            exit 1\n-            ;;\n-        esac\n-    done\n-\n-    if [[ \"${JIRAISSUE}\" == \"\" && \"${PATCHFILE}\" == \"\" ]] ; then\n-        echo \"Either --jira or --patch option must be specified\"\n-        echo\n-        printUsage\n-        exit 1\n-    fi\n-    if [[ \"${JIRAISSUE}\" != \"\" && \"${PATCHFILE}\" != \"\" ]] ; then\n-        echo \"Cannot specify --jira or --patch options together\"\n-        echo\n-        printUsage\n-        exit 1\n-    fi\n-    if [[ \"${RESETSCM}\" == \"false\" && \"${DIRTYSCM}\" == \"false\" ]] ; then\n-        echo \"Either --reset-scm or --dirty-scm option must be specified\"\n-        echo\n-        printUsage\n-        exit 1\n-    fi\n-    if [[ \"${RESETSCM}\" == \"true\" && \"${DIRTYSCM}\" == \"true\" ]] ; then\n-        echo \"Cannot specify --reset-scm and --dirty-scm options together\"\n-        echo\n-        printUsage\n-        exit 1\n-    fi\n-}\n-\n-###############################################################################\n-listTasks() {\n-    echo \"Available Tasks:\"\n-    echo \"\"\n-    getAllTasks\n-    for taskFile in ${TASKFILES} ; do\n-        taskName=`bash $taskFile --taskname`\n-        echo \"  $taskName\"\n-    done\n-    echo\n-}\n-###############################################################################\n-downloadPatch () {\n-    PATCHFILE=${TEMPDIR}/test.patch\n-    jiraPage=${TEMPDIR}/jira.txt\n-    curl \"${JIRAURLISSUEPREFIX}${JIRAISSUE}\" > ${jiraPage}\n-    if [[ `grep -c 'Patch Available' ${jiraPage}` == 0 ]] ; then\n-        echo \"$JIRAISSUE is not \\\"Patch Available\\\".  Exiting.\"\n-        echo\n-        exit 1\n-    fi\n-    relativePatchURL=`grep -o '\"/jira/secure/attachment/[0-9]*/[^\"]*' ${jiraPage} \\\n-        | grep -v -e 'htm[l]*$' | sort | tail -1 \\\n-        | grep -o '/jira/secure/attachment/[0-9]*/[^\"]*'`\n-    patchURL=\"${JIRAHOST}${relativePatchURL}\"\n-    patchNum=`echo $patchURL | grep -o '[0-9]*/' | grep -o '[0-9]*'`\n-    curl ${patchURL} > ${PATCHFILE}\n-    if [[ $? != 0 ]] ; then\n-        echo \"Could not download patch for ${JIRAISSUE} from ${patchURL}\"\n-        echo\n-        cleanupAndExit 1\n-    fi\n-    PATCHNAME=$(echo $patchURL | sed 's/.*\\///g')\n-    echo \"JIRA ${JIRAISSUE}, patch downloaded at `date` from ${patchURL}\" \n-    echo\n-    echo \"Patch [$PATCHNAME|$patchURL] downloaded at $(date)\" >> ${SUMMARYFILE}\n-    echo \"\" >> ${SUMMARYFILE}\n-}\n-###############################################################################\n-applyPatch() {\n-    echo \"Applying patch\" >> $STDOUT\n-    echo \"\" >> $STDOUT\n-    patch -f -E --dry-run -p0 < ${PATCHFILE} | tee ${REPORTDIR}/APPLY-PATCH.txt \\\n-        >> $STDOUT\n-    if [[  ${PIPESTATUS[0]} != 0 ]] ; then\n-        echo \"Patch failed to apply to head of branch\"\n-        echo \"{color:red}-1{color} Patch failed to apply to head of branch\" >> ${SUMMARYFILE}\n-        echo \"\" >> ${SUMMARYFILE}\n-        echo \"----------------------------\" >> ${SUMMARYFILE}\n-        echo\n-        cleanupAndExit 1\n-    fi\n-    patch -f -E -p0 < ${PATCHFILE} > ${REPORTDIR}/APPLY-PATCH.txt\n-    if [[ $? != 0 ]] ; then\n-        echo \"ODD!, dry run passed, but patch failed to apply to head of branch\"\n-        echo\n-        cleanupAndExit 1\n-    fi\n-    echo \"\" >> $STDOUT\n-    echo \"Patch applied\"\n-    echo \"{color:green}+1 PATCH_APPLIES{color}\" >> $SUMMARYFILE\n-    echo\n-}\n-###############################################################################\n-run() {\n-    task=`bash $1 --taskname`\n-    if [[ \"${TASKSTORUN}\" == \"\" || \"${TASKSTORUN}\" =~ \"${task}\" ]] ; then\n-        if [[ ! \"${TASKSTOSKIP}\" =~ \"${task}\" ]] ; then\n-            echo \"  Running test-patch task ${task}\"\n-            outputFile=\"`basename $1`-$2.out\"\n-            $1 --op=$2 --tempdir=${TEMPDIR} --reportdir=${REPORTDIR} \\\n-                --summaryfile=${SUMMARYFILE} --patchfile=${PATCHFILE} ${MVNPASSTHRU} \\\n-                ${VERBOSEOPTION} | tee ${TEMPDIR}/${outputFile} >> $STDOUT\n-            if [[ $? != 0 ]] ; then\n-                echo \"  Failure, check for details ${TEMPDIR}/${outputFile}\"\n-                echo\n-                cleanupAndExit 1\n-            fi\n-        fi\n-    fi\n-}\n-###############################################################################\n-getAllTasks() {\n-    TASKFILES=`ls -a bin/test\\-patch\\-[0-9][0-9]\\-*`\n-}\n-###############################################################################\n-prePatchRun() {\n-    echo \"Pre patch\"\n-    for taskFile in ${TASKFILES} ; do\n-        run $taskFile pre\n-    done\n-    echo\n-}\n-###############################################################################\n-postPatchRun() {\n-    echo \"Post patch\"\n-    for taskFile in ${TASKFILES} ; do\n-        run $taskFile post\n-    done\n-    echo\n-}\n-###############################################################################\n-createReports() {\n-    echo \"Reports\"\n-    for taskFile in ${TASKFILES} ; do\n-        run $taskFile report\n-    done\n-    echo\n-}\n-###############################################################################\n-\n-echo\n-\n-parseArgs \"$@\"\n-\n-prepareSCM\n-\n-prepareTestPatchDirs\n-\n-echo \"\" > ${SUMMARYFILE}\n-\n-if [ \"${PATCHFILE}\" == \"\" ] ; then\n-    echo \"Testing JIRA ${JIRAISSUE}\"\n-    echo\n-    echo \"Testing JIRA ${JIRAISSUE}\" >> ${SUMMARYFILE}\n-    echo \"\" >> ${SUMMARYFILE}\n-else\n-    if [ ! -e ${PATCHFILE} ] ; then\n-        echo \"Patch file does not exist\"\n-        cleanupAndExit 1\n-    fi\n-    echo \"Testing patch ${PATCHFILE}\"\n-    echo\n-    echo \"Testing patch ${PATCHFILE}\" >> ${SUMMARYFILE}\n-    echo \"\" >> ${SUMMARYFILE}\n-fi\n-\n-echo \"\" >> ${SUMMARYFILE}\n-\n-if [ \"${PATCHFILE}\" == \"\" ] ; then\n-    downloadPatch ${JIRAISSUE}\n-fi\n-\n-echo \"----------------------------\" >> ${SUMMARYFILE}\n-echo \"\" >> ${SUMMARYFILE}\n-getAllTasks\n-prePatchRun\n-applyPatch\n-postPatchRun\n-createReports\n-echo \"\" >> ${SUMMARYFILE}\n-echo \"----------------------------\" >> ${SUMMARYFILE}\n-MINUSONES=`grep -c \"\\}\\-1\" ${SUMMARYFILE}`\n-if [[ $MINUSONES == 0 ]]; then\n-    echo \"{color:green}*+1 Overall result, good!, no -1s*{color}\" >> ${SUMMARYFILE}\n-else\n-    echo \"{color:red}*-1 Overall result, please check the reported -1(s)*{color}\" >> ${SUMMARYFILE}\n-fi\n-echo \"\" >> ${SUMMARYFILE}\n-WARNINGS=`grep -c \"\\}WARNING\" ${SUMMARYFILE}`\n-if [[ $WARNINGS != 0 ]]; then\n-    echo \"{color:red}.   There is at least one warning, please check{color}\" >> ${SUMMARYFILE}\n-fi\n-echo \"\" >> ${SUMMARYFILE}\n-\n-if [ ! -z \"${JIRAISSUE}\" ]; then\n-    echo \"The full output of the test-patch run is available at\"  >> ${SUMMARYFILE}\n-    echo \"\"  >> ${SUMMARYFILE}\n-    echo \".   ${BUILD_URL}\"  >> ${SUMMARYFILE}\n-    echo \"\"  >> ${SUMMARYFILE}\n-else\n-    echo\n-    echo \"Refer to ${REPORTDIR} for detailed test-patch reports\"\n-    echo\n-fi\n-\n-cat ${SUMMARYFILE} | sed -e 's/{color}//' -e 's/{color:green}//' -e 's/{color:red}//' -e 's/^\\.//' -e 's/^\\*//' -e 's/\\*$//' > ${SUMMARYFILETXT}\n-\n-cat ${SUMMARYFILETXT}\n-\n-cleanupAndExit `expr $MINUSONES != 0`"},{"sha":"d266bbeb2b880a94cbf99271992784d9469746f7","filename":"bin/test-patch-00-clean","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-00-clean","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-00-clean","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-00-clean?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,100 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"CLEAN\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR>) [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    mvn clean ${MVNPASSTHRU} > ${TEMPDIR}/${TASKNAME}.txt\n-    EXITCODE=$?\n-    # removing files created by dependency:copy-dependencies\n-    rm -f */lib/*\n-    exit $EXITCODE\n-    ;;\n-post)\n-    mvn clean ${MVNPASSTHRU} >> ${TEMPDIR}/${TASKNAME}.txt\n-    EXITCODE=$?\n-    ;;\n-report)\n-    echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"52c0b2f50006fb0e016172502ad84fd668d9c16b","filename":"bin/test-patch-05-patch-raw-analysis","status":"removed","additions":0,"deletions":165,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-05-patch-raw-analysis","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-05-patch-raw-analysis","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-05-patch-raw-analysis?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,165 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-source $(dirname \"$0\")/raw-check-patch\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"RAW_PATCH_ANALYSIS\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-PATCHFILE=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>)\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --patchfile=*)\n-            PATCHFILE=${i#*=}\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" || \"${PATCHFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-checkNoAuthors() {\n-    TMPFILE=$TEMPDIR/$TASKNAME-authors.txt\n-    printAuthors $PATCHFILE > $TMPFILE\n-    authorTags=$(wc -l $TMPFILE | awk '{print $1}')\n-    if [[ ${authorTags} != 0 ]] ; then\n-        REPORT+=(\"{color:red}-1{color} the patch seems to contain ${authorTags} line(s) with @author tags\")\n-        REPORT+=(\"$(cat $TMPFILE)\")\n-    else\n-        REPORT+=(\"{color:green}+1{color} the patch does not introduce any @author tags\")\n-    fi\n-}\n-###############################################################################\n-checkNoTabs() {\n-    TMPFILE=$TEMPDIR/$TASKNAME-tabs.txt\n-    printTabs $PATCHFILE > $TMPFILE\n-    tabs=$(wc -l $TMPFILE | awk '{print $1}')\n-    if [[ ${tabs} != 0 ]] ; then\n-        REPORT+=(\"{color:red}-1{color} the patch contains ${tabs} line(s) with tabs\")\n-        REPORT+=(\"$(cat $TMPFILE)\")\n-    else\n-        REPORT+=(\"{color:green}+1{color} the patch does not introduce any tabs\")\n-    fi\n-}\n-###############################################################################\n-checkNoTrailingSpaces() {\n-    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n-    printTrailingSpaces $PATCHFILE > $TMPFILE\n-    trailingSpaces=$(wc -l $TMPFILE | awk '{print $1}')\n-    if [[ ${trailingSpaces} != 0 ]] ; then\n-        REPORT+=(\"{color:red}-1{color} the patch contains ${trailingSpaces} line(s) with trailing spaces\")\n-        REPORT+=(\"$(cat $TMPFILE)\")\n-    else\n-        REPORT+=(\"{color:green}+1{color} the patch does not introduce any trailing spaces\")\n-    fi\n-}\n-###############################################################################\n-checkLinesLength() {\n-    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n-    printLongLines $PATCHFILE > $TMPFILE\n-    longLines=$(wc -l $TMPFILE | awk '{print $1}')\n-    if [[ ${longLines} != 0 ]] ; then\n-        REPORT+=(\"{color:red}-1{color} the patch contains ${longLines} line(s) longer than 120 characters\")\n-        REPORT+=(\"$(cat $TMPFILE)\")\n-    else\n-        REPORT+=(\"{color:green}+1{color} the patch does not introduce any line longer than 120\")\n-    fi\n-}\n-###############################################################################\n-checkForTestcases() {\n-    testcases=`grep -c -i -e '^+++.*/test' ${PATCHFILE}`\n-    if [[ ${testcases} == 0 ]] ; then\n-        REPORT+=(\"{color:red}-1{color} the patch does not add/modify any testcase\")\n-    #reverting for summary +1 calculation\n-        testcases=1\n-    else\n-        REPORT+=(\"{color:green}+1{color} the patch does adds/modifies ${testcases} testcase(s)\")\n-    #reverting for summary +1 calculation\n-        testcases=0\n-    fi\n-}\n-###############################################################################\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    ;;\n-post)\n-    ;;\n-report)\n-    REPORT=()\n-    checkNoAuthors\n-    checkNoTabs\n-    checkNoTrailingSpaces\n-    checkLinesLength\n-    checkForTestcases\n-    total=`expr $authorTags + $tabs + $trailingSpaces + $longLines + $testcases`\n-    if [[ $total == 0 ]] ; then\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    fi\n-    for line in \"${REPORT[@]}\" ; do\n-        echo \".    ${line}\" >> $SUMMARYFILE\n-    done\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"f403301428cba7054a2d40fe630dd322c1f6fe6a","filename":"bin/test-patch-08-rat","status":"removed","additions":0,"deletions":132,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-08-rat","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-08-rat","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-08-rat?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,132 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"RAT\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --verbose)\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-checkForWarnings() {\n-    cleanWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-clean.txt`\n-    patchWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-patch.txt`\n-    newWarns=`expr $patchWarns - $cleanWarns`\n-    if [[ $newWarns -le 0 ]] ; then\n-        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new RAT warnings\")\n-        newWarns=0\n-    else\n-        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new RAT warning(s)\")\n-        newWarns=1\n-    fi\n-    if [[ $cleanWarns != 0 ]] ; then\n-        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns RAT warning(s), they should be addressed ASAP{color}\")\n-    fi\n-}\n-###############################################################################\n-copyRatFiles() {\n-    TAG=$1\n-    rm -f ${REPORTDIR}/${TASKNAME}-$TAG.txt\n-    for f in $(find . -name rat.txt); do\n-        cat $f >> ${REPORTDIR}/${TASKNAME}-$TAG.txt\n-    done\n-}\n-###############################################################################\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n-    copyRatFiles clean\n-    ;;\n-post)\n-    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n-    copyRatFiles patch\n-    ;;\n-report)\n-    checkForWarnings\n-    if [[ $newWarns == 0 ]] ; then\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    fi\n-    for line in \"${REPORT[@]}\" ; do\n-        echo \".    ${line}\" >> $SUMMARYFILE\n-    done\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"54bbf93419e2604a1f2d01fe8a20528db94d7b1a","filename":"bin/test-patch-09-javadoc","status":"removed","additions":0,"deletions":118,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-09-javadoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-09-javadoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-09-javadoc?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,118 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"JAVADOC\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-checkForWarnings() {\n-    cleanWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n-    patchWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n-    newWarns=`expr $patchWarns - $cleanWarns`\n-    if [[ $newWarns -le 0 ]] ; then\n-        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc warnings\")\n-        newWarns=0\n-    else\n-        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new Javadoc warning(s)\")\n-        newWarns=1\n-    fi\n-    if [[ $cleanWarns != 0 ]] ; then\n-        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns Javadoc warning(s)\")\n-    fi\n-}\n-###############################################################################\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-clean.txt\n-    ;;\n-post)\n-    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-patch.txt\n-    ;;\n-report)\n-    checkForWarnings\n-    if [[ $newWarns == 0 ]] ; then\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    fi\n-    for line in \"${REPORT[@]}\" ; do\n-        echo \".    ${line}\" >> $SUMMARYFILE\n-    done\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"5714b22342ecbc7bff9dcc3291916ba4534a7ae6","filename":"bin/test-patch-10-compile","status":"removed","additions":0,"deletions":144,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-10-compile","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-10-compile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-10-compile?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,144 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"COMPILE\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --verbose)\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-checkForWarnings() {\n-    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt\n-    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt\n-    cleanWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n-    patchWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n-    newWarns=`expr $patchWarns - $cleanWarns`\n-    if [[ $newWarns -le 0 ]] ; then\n-        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new javac warnings\")\n-        newWarns=0\n-    else\n-        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new javac warning(s)\")\n-        newWarns=1\n-    fi\n-    if [[ $cleanWarns != 0 ]] ; then\n-        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns javac warning(s)\")\n-    fi\n-}\n-###############################################################################\n-\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    mvn clean install -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-clean.txt >> $STDOUT\n-    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n-        echo \"{color:green}+1{color} HEAD compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n-    else\n-        echo \"{color:red}-1{color} HEAD does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n-    fi\n-    ;;\n-post)\n-    mvn clean install -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-patch.txt >> $STDOUT\n-    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n-        echo \"{color:green}+1{color} patch compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n-    else\n-        echo \"{color:red}-1{color} patch does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n-    fi\n-    ;;\n-report)\n-    REPORT=()\n-    compileErrors=0\n-    while read line; do\n-        REPORT+=(\"$line\")\n-        if [[ \"$line\" =~ \"-1\" ]] ; then\n-            compileErrors=1\n-        fi\n-    done < ${TEMPDIR}/${TASKNAME}-compile.txt\n-    checkForWarnings\n-    total=`expr $compileErrors + $newWarns`\n-    if [[ $total == 0 ]] ; then\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    fi\n-    for line in \"${REPORT[@]}\" ; do\n-        echo \".    ${line}\" >> $SUMMARYFILE\n-    done\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"c91daffd03156963ff01b363aa5034a6a1194efb","filename":"bin/test-patch-11-findbugs","status":"removed","additions":0,"deletions":156,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-11-findbugs","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-11-findbugs","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-11-findbugs?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,156 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"FINDBUGS\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --verbose)\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-checkForWarnings() {\n-    cleanBugs=0\n-    patchBugs=0\n-    for m in $(getModules); do\n-        MODNAME=$(echo $m | sed 's/\\///')\n-\n-        m_cleanBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-clean.xml \\\n-            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n-        m_patchBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-patch.xml \\\n-            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n-        m_newBugs=`expr $m_patchBugs - $m_cleanBugs`\n-        if [[ $m_newBugs != 0 ]] ; then\n-            BUGMODULES=\"$MODNAME $BUGMODULES\"\n-        fi\n-\n-        cleanBugs=$(($cleanBugs+$m_cleanBugs))\n-        patchBugs=$(($patchBugs+$m_patchBugs))\n-    done\n-\n-    BUGMODULES=$(echo $BUGMODULES | sed 's/^ *//' | sed 's/ *$//')\n-    newBugs=`expr $patchBugs - $cleanBugs`\n-    if [[ $newBugs -le 0 ]] ; then\n-        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Findbugs warnings\")\n-        newBugs=0\n-    else\n-        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $patchBugs new Findbugs warning(s) in module(s) [$BUGMODULES]\")\n-        newBugs=1\n-    fi\n-    if [[ $cleanBugs != 0 ]] ; then\n-        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns Findbugs warning(s), they should be addressed ASAP{color}\")\n-    fi\n-}\n-\n-###############################################################################\n-\n-getModules() {\n-    find . -name pom.xml | sed 's/^.\\///' | sed 's/pom.xml$//' | grep -v compat\n-}\n-###############################################################################\n-\n-copyFindbugsXml() {\n-    TAG=$1\n-    for m in $(getModules); do\n-        MODNAME=$(echo $m | sed 's/\\///')\n-        cp ${m}target/findbugsXml.xml ${REPORTDIR}/${TASKNAME}-${MODNAME}-$TAG.xml\n-    done\n-}\n-\n-parseArgs \"$@\"\n-\n-\n-case $OP in\n-pre)\n-    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n-    copyFindbugsXml clean\n-    ;;\n-post)\n-    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n-    copyFindbugsXml patch\n-    ;;\n-report)\n-    checkForWarnings\n-    if [[ $newBugs == 0 ]] ; then\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-    fi\n-    for line in \"${REPORT[@]}\" ; do\n-        echo \".    ${line}\" >> $SUMMARYFILE\n-    done\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"ab77bcdcea2a4711f964f887829f1b42464b85c7","filename":"bin/test-patch-20-tests","status":"removed","additions":0,"deletions":125,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-20-tests","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-20-tests","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-20-tests?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,125 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"TESTS\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --verbose)\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    ;;\n-post)\n-    # must use package instead of test so that compat-deps shaded jars are correct\n-    mvn package ${MVNPASSTHRU} -Dmaven.test.failure.ignore=true \\\n-        -Dmaven.test.error.ignore=true -fae \\\n-        -Dtest.timeout=7200 | tee ${TEMPDIR}/${TASKNAME}.out >> $STDOUT\n-    exitCode=${PIPESTATUS[0]}\n-    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n-    ;;\n-report)\n-    failedTests=` find . -name '*\\.txt' | grep target/surefire-reports | xargs grep  \"<<< FAILURE\" | grep -v \"Tests run:\" | sed 's/.*\\.txt\\://' | sed 's/ .*//'`\n-    testsRun=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $3}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n-    testsFailed=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $5}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n-    testsErrors=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $7}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n-    hasFailures=`expr $testsFailed + $testsErrors`\n-    testsExitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n-    if [[ $hasFailures != 0 ]] ; then\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-        echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n-        echo \".    Tests failed: $testsFailed\" >> $SUMMARYFILE\n-        echo \".    Tests errors: $testsErrors\" >> $SUMMARYFILE\n-        echo \"\" >> ${SUMMARYFILE}\n-        echo \".    The patch failed the following testcases:\" >> $SUMMARYFILE\n-        echo \"\" >> ${SUMMARYFILE}\n-        echo \"${failedTests}\" | sed 's/^/.      /' >> $SUMMARYFILE\n-        echo \"\" >> ${SUMMARYFILE}\n-    else\n-        if [[ \"$testsExitCode\" != \"0\" ]] ; then\n-            echo \"{color:red}-1 ${TASKNAME}{color} - patch does not compile, cannot run testcases\" >> $SUMMARYFILE\n-        else\n-            echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-            echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n-        fi\n-    fi\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"33d4d6c0789320383e46b464b964f8babb9c493b","filename":"bin/test-patch-30-dist","status":"removed","additions":0,"deletions":106,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-30-dist","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Ftest-patch-30-dist","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Ftest-patch-30-dist?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,106 +0,0 @@\n-#!/bin/bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n-    set -x\n-fi\n-\n-BASEDIR=$(pwd)\n-TASKNAME=\"DISTRO\"\n-OP=\"\"\n-TEMPDIR=\"\"\n-REPORTDIR=\"\"\n-SUMMARYFILE=\"\"\n-STDOUT=\"/dev/null\"\n-MVNPASSTHRU=\"\"\n-\n-###############################################################################\n-cleanupAndExit() {\n-    exit $1\n-}\n-###############################################################################\n-printUsage() {\n-    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n-    echo\n-}\n-###############################################################################\n-parseArgs() {\n-    for i in $*\n-    do\n-        case $i in\n-        --taskname)\n-            echo ${TASKNAME}\n-            exit 0\n-            ;;\n-        --op=*)\n-            OP=${i#*=}\n-            ;;\n-        --tempdir=*)\n-            TEMPDIR=${i#*=}\n-            ;;\n-        --reportdir=*)\n-            REPORTDIR=${i#*=}\n-            ;;\n-        --summaryfile=*)\n-            SUMMARYFILE=${i#*=}\n-            ;;\n-        --verbose)\n-            STDOUT=\"/dev/stdout\"\n-            ;;\n-        -D*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        -P*)\n-            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n-            ;;\n-        esac\n-    done\n-    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n-        echo \"Missing options\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n-        echo \"Invalid operation\"\n-        echo\n-        printUsage\n-        cleanupAndExit 1\n-    fi\n-}\n-###############################################################################\n-\n-parseArgs \"$@\"\n-\n-case $OP in\n-pre)\n-    ;;\n-post)\n-    mvn package assembly:single -DskipTests | tee ${REPORTDIR}/${TASKNAME}.out >> $STDOUT\n-    exitCode=${PIPESTATUS[0]}\n-    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n-    ;;\n-report)\n-    exitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n-    if [[ \"$exitCode\" != \"0\" ]] ; then\n-        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-        echo \".    {color:red}-1{color} distro tarball fails with the patch\" >> $SUMMARYFILE\n-    else\n-        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n-        echo \".    {color:green}+1{color} distro tarball builds with the patch \" >> $SUMMARYFILE\n-    fi\n-    ;;\n-esac\n-\n-exit 0"},{"sha":"96319d8c3d58207a39ab5f8ac3862fe54c8bee12","filename":"bin/update-master-docs","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Fupdate-master-docs","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/bin%2Fupdate-master-docs","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bin%2Fupdate-master-docs?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,44 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-#   Licensed under the Apache License, Version 2.0 (the \"License\");\n-#   you may not use this file except in compliance with the License.\n-#   You may obtain a copy of the License at\n-#\n-#       http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#   Unless required by applicable law or agreed to in writing, software\n-#   distributed under the License is distributed on an \"AS IS\" BASIS,\n-#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#   See the License for the specific language governing permissions and\n-#   limitations under the License.\n-\n-set +x\n-\n-BASEDIR=/tmp/update-master-docs\n-mkdir -p $BASEDIR\n-\n-SVNDIR=$BASEDIR/svn\n-\n-GITDIR=$BASEDIR/git\n-\n-rm -rf $SVNDIR\n-rm -rf $GITDIR\n-\n-svn checkout https://svn.apache.org/repos/asf/bookkeeper/site/trunk/content/docs/master $SVNDIR\n-svn checkout https://github.com/apache/bookkeeper/trunk $GITDIR\n-\n-mvn -f $GITDIR/pom.xml -Dnotimestamp javadoc:aggregate\n-\n-rsync -avP --exclude=.svn $GITDIR/doc/ $SVNDIR/\n-rsync -avP --exclude=.svn $GITDIR/target/site/apidocs/ $SVNDIR/apidocs/\n-svn add --force $SVNDIR/*\n-\n-CHANGES=$(svn status $SVNDIR| awk 'BEGIN { COUNT = 0; } /^[A|M]/ { COUNT = COUNT + 1; } END { print COUNT }')\n-if [ $CHANGES -gt 0 ]; then\n-    svn commit -m \"Syncing website with master documentation\" $SVNDIR\n-    echo\n-    echo \"Now go review on http://bookkeeper.staging.apache.org, and publish if it's ok\"\n-    echo\n-else\n-    echo \"No changes, submitting nothing\"\n-fi"},{"sha":"b8648e0702aa3a832df16dc7d7efdd4898c6f2bf","filename":"buildtools/src/main/resources/ide/eclipse/formatter.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/50f67361d5deea529d0af80a61e3312a8dd31e7e/buildtools%2Fsrc%2Fmain%2Fresources%2Fide%2Feclipse%2Fformatter.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/50f67361d5deea529d0af80a61e3312a8dd31e7e/buildtools%2Fsrc%2Fmain%2Fresources%2Fide%2Feclipse%2Fformatter.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/buildtools%2Fsrc%2Fmain%2Fresources%2Fide%2Feclipse%2Fformatter.xml?ref=50f67361d5deea529d0af80a61e3312a8dd31e7e","previous_filename":"formatter.xml"},{"sha":"0c4b76346495e4832403506d617aec974162bd89","filename":"patch-review.py","status":"removed","additions":0,"deletions":228,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/patch-review.py","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/809f2cbf16d9ecb1b04fda23d610deea4c9bfabe/patch-review.py","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/patch-review.py?ref=809f2cbf16d9ecb1b04fda23d610deea4c9bfabe","patch":"@@ -1,228 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-\n-# copy from {@link https://github.com/apache/kafka/blob/trunk/kafka-patch-review.py}\n-\n-import argparse\n-import sys\n-import os\n-import time\n-import datetime\n-import tempfile\n-import commands\n-import getpass\n-from jira.client import JIRA\n-\n-def get_jira_config():\n-  # read the config file\n-  home=jira_home=os.getenv('HOME')\n-  home=home.rstrip('/')\n-  if not (os.path.isfile(home + '/jira.ini')):\n-    jira_user=raw_input('JIRA user :')\n-    jira_pass=getpass.getpass('JIRA password :')\n-    jira_config = {'user':jira_user, 'password':jira_pass}\n-    return jira_config\n-  else:\n-    jira_config = dict(line.strip().split('=') for line in open(home + '/jira.ini'))\n-    return jira_config\n-\n-def get_jira(jira_config):\n-  options = {\n-    'server': 'https://issues.apache.org/jira'\n-  }\n-  jira = JIRA(options=options,basic_auth=(jira_config['user'], jira_config['password']))\n-  # (Force) verify the auth was really done\n-  jira_session=jira.session()\n-  if (jira_session is None):\n-    raise Exception(\"Failed to login to the JIRA instance\")\n-  return jira\n-\n-def cmd_exists(cmd):\n-  status, result = commands.getstatusoutput(cmd)\n-  return status\n-\n-def main():\n-  ''' main(), shut up, pylint '''\n-  popt = argparse.ArgumentParser(description='BookKeeper patch review tool')\n-  popt.add_argument('-b', '--branch', action='store', dest='branch', required=True, help='Tracking branch to create diff against')\n-  popt.add_argument('-j', '--jira', action='store', dest='jira', required=True, help='JIRA corresponding to the reviewboard')\n-  popt.add_argument('-s', '--summary', action='store', dest='summary', required=False, help='Summary for the reviewboard')\n-  popt.add_argument('-d', '--description', action='store', dest='description', required=False, help='Description for reviewboard')\n-  popt.add_argument('-r', '--rb', action='store', dest='reviewboard', required=False, help='Review board that needs to be updated')\n-  popt.add_argument('-t', '--testing-done', action='store', dest='testing', required=False, help='Text for the Testing Done section of the reviewboard')\n-  popt.add_argument('-db', '--debug', action='store_true', required=False, help='Enable debug mode')\n-  opt = popt.parse_args()\n-\n-  post_review_tool = None\n-  if (cmd_exists(\"post-review\") == 0):\n-    post_review_tool = \"post-review\"\n-  elif (cmd_exists(\"rbt\") == 0):\n-    post_review_tool = \"rbt post\"\n-  else:\n-    print \"please install RBTools. See https://www.reviewboard.org/docs/rbtools/dev/ for details.\"\n-    sys.exit(1)\n-\n-  patch_file=tempfile.gettempdir() + \"/\" + opt.jira + \".patch\"\n-  if opt.reviewboard:\n-    ts = time.time()\n-    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d_%H:%M:%S')\n-    patch_file=tempfile.gettempdir() + \"/\" + opt.jira + '_' + st + '.patch'\n-\n-  # first check if rebase is needed\n-  git_branch_hash=\"git rev-parse \" + opt.branch\n-  p_now=os.popen(git_branch_hash)\n-  branch_now=p_now.read()\n-  p_now.close()\n-\n-  git_common_ancestor=\"git merge-base \" + opt.branch + \" HEAD\"\n-  p_then=os.popen(git_common_ancestor)\n-  branch_then=p_then.read()\n-  p_then.close()\n-\n-  if branch_now != branch_then:\n-    print 'ERROR: Your current working branch is from an older version of ' + opt.branch + '. Please rebase first by using git pull --rebase'\n-    sys.exit(1)\n-\n-  git_configure_reviewboard=\"git config reviewboard.url https://reviews.apache.org\"\n-  print \"Configuring reviewboard url to https://reviews.apache.org\"\n-  p=os.popen(git_configure_reviewboard)\n-  p.close()\n-\n-  git_remote_update=\"git remote update\"\n-  print \"Updating your remote branches to pull the latest changes\"\n-  p=os.popen(git_remote_update)\n-  p.close()\n-\n-  # Get JIRA configuration and login to JIRA to ensure the credentials work, before publishing the patch to the review board\n-  print \"Verifying JIRA connection configurations\"\n-  try:\n-    jira_config=get_jira_config()\n-    jira=get_jira(jira_config)\n-  except:\n-    print \"Failed to login to the JIRA instance\", sys.exc_info()[0], sys.exc_info()[1]\n-    sys.exit(1)\n-\n-  git_command=\"git diff --no-prefix \" + opt.branch + \" > \" + patch_file\n-  if opt.debug:\n-    print git_command\n-  p=os.popen(git_command)\n-  p.close()\n-\n-  print 'Getting latest patch attached to the JIRA'\n-  tmp_dir = tempfile.mkdtemp()\n-  get_latest_patch_command=\"\"\"\n-PATCHFILE={0}/{1}.patch\n-jiraPage={0}/jira.txt\n-curl \"https://issues.apache.org/jira/browse/{1}\" > {0}/jira.txt\n-if [[ `grep -c 'Patch Available' {0}/jira.txt` == 0 ]] ; then\n-    echo \"{1} is not \\\"Patch Available\\\". Exiting.\"\n-    echo\n-    exit 1\n-fi\n-relativePatchURL=`grep -o '\"/jira/secure/attachment/[0-9]*/[^\"]*' {0}/jira.txt \\\n-    | grep -v -e 'htm[l]*$' | sort | tail -1 \\\n-    | grep -o '/jira/secure/attachment/[0-9]*/[^\"]*'`\n-patchURL=\"https://issues.apache.org$relativePatchURL\"\n-curl $patchURL > {0}/{1}.patch\n-\"\"\".format(tmp_dir, opt.jira)\n-  p=os.popen(get_latest_patch_command)\n-  p.close()\n-\n-  previous_patch=tmp_dir + \"/\" + opt.jira + \".patch\"\n-  diff_file=tmp_dir + \"/\" + opt.jira + \".diff\"\n-  if os.path.isfile(previous_patch) and os.stat(previous_patch).st_size > 0:\n-    print 'Creating diff with previous version of patch uploaded to JIRA'\n-    diff_command = \"diff \" + previous_patch+ \" \" + patch_file + \" > \" + diff_file\n-    try:\n-      p=os.popen(diff_command)\n-      sys.stdout.flush()\n-      p.close()\n-    except:\n-      pass\n-    print 'Diff with previous version of patch uploaded to JIRA is saved to ' + diff_file\n-\n-    print 'Checking if the there are changes that need to be pushed'\n-    if os.stat(diff_file).st_size == 0:\n-      print 'No changes found on top of changes uploaded to JIRA'\n-      print 'Aborting'\n-      sys.exit(1)\n-\n-  rb_command= post_review_tool + \" --publish --tracking-branch \" + opt.branch + \" --target-groups=bookkeeper --bugs-closed=\" + opt.jira\n-  if opt.debug:\n-    rb_command=rb_command + \" --debug\"\n-  summary=\"Patch for \" + opt.jira\n-  if opt.summary:\n-    summary=opt.summary\n-  rb_command=rb_command + \" --summary \\\"\" + summary + \"\\\"\"\n-  if opt.description:\n-    rb_command=rb_command + \" --description \\\"\" + opt.description + \"\\\"\"\n-  if opt.reviewboard:\n-    rb_command=rb_command + \" -r \" + opt.reviewboard\n-  if opt.testing:\n-    rb_command=rb_command + \" --testing-done=\" + opt.testing\n-  if opt.debug:\n-    print rb_command\n-  p=os.popen(rb_command)\n-  rb_url=\"\"\n-  for line in p:\n-    print line\n-    if line.startswith('http'):\n-      rb_url = line\n-    elif line.startswith(\"There don't seem to be any diffs\"):\n-      print 'ERROR: Your reviewboard was not created/updated since there was no diff to upload. The reasons that can cause this issue are 1) Your diff is not checked into your local branch. Please check in the diff to the local branch and retry 2) You are not specifying the local branch name as part of the --branch option. Please specify the remote branch name obtained from git branch -r'\n-      p.close()\n-      sys.exit(1)\n-    elif line.startswith(\"Your review request still exists, but the diff is not attached\") and not opt.debug:\n-      print 'ERROR: Your reviewboard was not created/updated. Please run the script with the --debug option to troubleshoot the problem'\n-      p.close()\n-      sys.exit(1)\n-  if p.close() != None:\n-    print 'ERROR: reviewboard update failed. Exiting.'\n-    sys.exit(1)\n-  if opt.debug:\n-    print 'rb url=',rb_url\n-\n-  print 'Creating diff against', opt.branch, 'and uploading patch to JIRA',opt.jira\n-  issue = jira.issue(opt.jira)\n-  attachment=open(patch_file)\n-  jira.add_attachment(issue,attachment)\n-  attachment.close()\n-\n-  comment=\"Created reviewboard \"\n-  if not opt.reviewboard:\n-    print 'Created a new reviewboard',rb_url,\n-  else:\n-    print 'Updated reviewboard',rb_url\n-    comment=\"Updated reviewboard \"\n-\n-  comment = comment + rb_url + ' against branch ' + opt.branch\n-  jira.add_comment(opt.jira, comment)\n-\n-  #update the JIRA status to PATCH AVAILABLE\n-  transitions = jira.transitions(issue)\n-  transitionsMap ={}\n-\n-  for t in transitions:\n-    transitionsMap[t['name']] = t['id']\n-\n-  if('Submit Patch' in transitionsMap):\n-     jira.transition_issue(issue, transitionsMap['Submit Patch'] , assignee={'name': jira_config['user']} )\n-\n-if __name__ == '__main__':\n-  sys.exit(main())"},{"sha":"3643bd14e6288432d1d6c3f7058e50caaefe3679","filename":"site/docker/Dockerfile","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2FDockerfile","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2FDockerfile","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocker%2FDockerfile?ref=50f67361d5deea529d0af80a61e3312a8dd31e7e","patch":"@@ -0,0 +1,20 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+FROM ruby:2.4.1"},{"sha":"2e98840c864fc0a3c059d709873bff8793d8c4be","filename":"site/docker/ci.sh","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2Fci.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2Fci.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocker%2Fci.sh?ref=50f67361d5deea529d0af80a61e3312a8dd31e7e","patch":"@@ -0,0 +1,64 @@\n+#!/bin/bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+set -e -x -u\n+\n+SCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\n+\n+export IMAGE_NAME=\"bookkeeper/docs\"\n+\n+pushd ${SCRIPT_DIR}\n+\n+docker build --rm=true -t ${IMAGE_NAME} .\n+\n+popd\n+\n+if [ \"$(uname -s)\" == \"Linux\" ]; then\n+  USER_NAME=${SUDO_USER:=$USER}\n+  USER_ID=$(id -u \"${USER_NAME}\")\n+  GROUP_ID=$(id -g \"${USER_NAME}\")\n+  LOCAL_HOME=\"/home/${USER_NAME}\"\n+else # boot2docker uid and gid\n+  USER_NAME=$USER\n+  USER_ID=1000\n+  GROUP_ID=50\n+  LOCAL_HOME=\"/Users/${USER_NAME}\"\n+fi\n+\n+docker build -t \"${IMAGE_NAME}-${USER_NAME}\" - <<UserSpecificDocker\n+FROM ${IMAGE_NAME}\n+RUN groupadd --non-unique -g ${GROUP_ID} ${USER_NAME} && \\\n+  useradd -g ${GROUP_ID} -u ${USER_ID} -k /root -m ${USER_NAME}\n+ENV  HOME /home/${USER_NAME}\n+UserSpecificDocker\n+\n+BOOKKEEPER_DOC_ROOT=${SCRIPT_DIR}/..\n+\n+pushd ${BOOKKEEPER_DOC_ROOT}\n+\n+docker run \\\n+  --rm=true \\\n+  -w ${BOOKKEEPER_DOC_ROOT} \\\n+  -u \"${USER}\" \\\n+  -v \"${BOOKKEEPER_DOC_ROOT}:${BOOKKEEPER_DOC_ROOT}\" \\\n+  -v \"${LOCAL_HOME}:/home/${USER_NAME}\" \\\n+  -p 4000:4000 \\\n+  ${IMAGE_NAME}-${USER_NAME} \\\n+  bash -c \"make setup && make apache\"\n+\n+popd\n+"},{"sha":"a4228ac784fa9f7aee3badd8ccfa3b186c5c0774","filename":"site/docker/run.sh","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2Frun.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/50f67361d5deea529d0af80a61e3312a8dd31e7e/site%2Fdocker%2Frun.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocker%2Frun.sh?ref=50f67361d5deea529d0af80a61e3312a8dd31e7e","patch":"@@ -0,0 +1,76 @@\n+#!/bin/bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+set -e -x -u\n+\n+SCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\n+\n+export IMAGE_NAME=\"bookkeeper/docs\"\n+\n+pushd ${SCRIPT_DIR}\n+\n+docker build --rm=true -t ${IMAGE_NAME} .\n+\n+popd\n+\n+if [ \"$(uname -s)\" == \"Linux\" ]; then\n+  USER_NAME=${SUDO_USER:=$USER}\n+  USER_ID=$(id -u \"${USER_NAME}\")\n+  GROUP_ID=$(id -g \"${USER_NAME}\")\n+  LOCAL_HOME=\"/home/${USER_NAME}\"\n+else # boot2docker uid and gid\n+  USER_NAME=$USER\n+  USER_ID=1000\n+  GROUP_ID=50\n+  LOCAL_HOME=\"/Users/${USER_NAME}\"\n+fi\n+\n+docker build -t \"${IMAGE_NAME}-${USER_NAME}\" - <<UserSpecificDocker\n+FROM ${IMAGE_NAME}\n+RUN groupadd --non-unique -g ${GROUP_ID} ${USER_NAME} && \\\n+  useradd -g ${GROUP_ID} -u ${USER_ID} -k /root -m ${USER_NAME}\n+ENV  HOME /home/${USER_NAME}\n+UserSpecificDocker\n+\n+BOOKKEEPER_DOC_ROOT=${SCRIPT_DIR}/..\n+\n+CMD=\"\n+echo\n+echo 'Welcome to Apache BookKeeper docs'\n+echo 'To build, execute'\n+echo '  make build'\n+echo 'To watch and regenerate automatically'\n+echo '  make serve'\n+echo 'and access http://localhost:4000'\n+echo\n+bash\n+\"\n+\n+pushd ${BOOKKEEPER_DOC_ROOT}\n+\n+docker run -i -t \\\n+  --rm=true \\\n+  -w ${BOOKKEEPER_DOC_ROOT} \\\n+  -u \"${USER}\" \\\n+  -v \"${BOOKKEEPER_DOC_ROOT}:${BOOKKEEPER_DOC_ROOT}\" \\\n+  -v \"${LOCAL_HOME}:/home/${USER_NAME}\" \\\n+  -p 4000:4000 \\\n+  ${IMAGE_NAME}-${USER_NAME} \\\n+  bash -c \"${CMD}\"\n+\n+popd\n+"}]}