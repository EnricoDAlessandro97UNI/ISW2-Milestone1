{"sha":"77a01dc7e6431092f82a7efb02789beb165b75e2","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojc3YTAxZGM3ZTY0MzEwOTJmODJhN2VmYjAyNzg5YmViMTY1Yjc1ZTI=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2017-06-01T09:42:04Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-06-01T09:42:04Z"},"message":"BOOKKEEPER-1084: Make variables finale if necessary\n\nnot all logger in bookkeeper & hedwig are static. some class like PendnigReadOp and LedgerEntry would have lots of objects, it might be bad. so this task is to make logger as a static variable if it didn't.\n\nwith benefit, cleaning up the imports when touching that file.\n\nRB_ID=141138\n\nAuthor: Sijie Guo <sijieg@twitter.com>\n\nReviewers: Jia Zhai, Enrico Olivelli\n\nCloses #172 from sijie/make_finale","tree":{"sha":"09ac41a3a4286e7601c4b43a33c6f4f07423d1d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/09ac41a3a4286e7601c4b43a33c6f4f07423d1d2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/77a01dc7e6431092f82a7efb02789beb165b75e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/77a01dc7e6431092f82a7efb02789beb165b75e2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/77a01dc7e6431092f82a7efb02789beb165b75e2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/77a01dc7e6431092f82a7efb02789beb165b75e2/comments","author":null,"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0eca5ff57f6e19fe5829d5ef8df228411467401f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0eca5ff57f6e19fe5829d5ef8df228411467401f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0eca5ff57f6e19fe5829d5ef8df228411467401f"}],"stats":{"total":20,"additions":8,"deletions":12},"files":[{"sha":"ed9fb291c4ff271b297c41a3e613a330197cc9a3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufInputStream;\n@@ -31,7 +30,6 @@\n  * the entry content.\n  *\n  */\n-\n public class LedgerEntry {\n     long ledgerId;\n     long entryId;"},{"sha":"fd698497dedf6ed907291b80089ba0296e0eac39","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -54,7 +54,7 @@\n  *\n  */\n class PendingReadOp implements Enumeration<LedgerEntry>, ReadEntryCallback {\n-    private final static Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n \n     final int speculativeReadTimeout;\n     final private ScheduledExecutorService scheduler;"},{"sha":"e8e2cb08a8f978a673ad37c92d61ba0f9b1b595c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -88,7 +88,6 @@\n import org.apache.bookkeeper.proto.BookkeeperProtocol.StatusCode;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.WriteLacRequest;\n import org.apache.bookkeeper.proto.BookkeeperProtocol.WriteLacResponse;\n-\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;"},{"sha":"a56003a78cb5dce428bff958577f6ddd054c3d68","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerInputStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerInputStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerInputStream.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -33,7 +33,7 @@\n \n public class LedgerInputStream extends InputStream {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerInputStream.class);\n-    private LedgerHandle lh;\n+    private final LedgerHandle lh;\n     private ByteBuffer bytebuff;\n     byte[] bbytes;\n     long lastEntry = 0;"},{"sha":"ac7e04fcc812377be344a488ad05ae400d3569ef","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerOutputStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerOutputStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstreaming%2FLedgerOutputStream.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -37,7 +37,7 @@\n  */\n public class LedgerOutputStream extends OutputStream {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerOutputStream.class);\n-    private LedgerHandle lh;\n+    private final LedgerHandle lh;\n     private ByteBuffer bytebuff;\n     byte[] bbytes;\n     int defaultSize = 1024 * 1024; // 1MB default size"},{"sha":"4aca80838bb826761932619be844b8595868c3c8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77a01dc7e6431092f82a7efb02789beb165b75e2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java?ref=77a01dc7e6431092f82a7efb02789beb165b75e2","patch":"@@ -39,13 +39,11 @@\n \n /**\n  * This class tests BookieClient. It just sends the a new entry to itself.\n- *\n- *\n- *\n  */\n-\n class LoopbackClient implements WriteCallback {\n-    private final static Logger LOG = LoggerFactory.getLogger(LoopbackClient.class);\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoopbackClient.class);\n+\n     BookieClient client;\n     static int recvTimeout = 2000;\n     long begin = 0;\n@@ -81,6 +79,7 @@ void write(long ledgerId, long entry, byte[] data, BookieSocketAddress addr, Wri\n         client.addEntry(addr, ledgerId, passwd, entry, Unpooled.wrappedBuffer(data), cb, ctx, BookieProtocol.FLAG_NONE);\n     }\n \n+    @Override\n     public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddress addr, Object ctx) {\n         Counter counter = (Counter) ctx;\n         counter.increment();"}]}