{"sha":"3a512326dc2cec7e4c62e0dc8fe569fdc5305373","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjNhNTEyMzI2ZGMyY2VjN2U0YzYyZTBkYzhmZTU2OWZkYzUzMDUzNzM=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-01T02:17:46Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:09:00Z"},"message":"DL-118: Stream metadata store followup - rename ZKLogMetadata* to LogMetadata*\n\nAs the followup change, this change is to remove 'ZK' from 'ZKLogMetadata*' class","tree":{"sha":"e1b454ce63ac6e683103b19e302d32e861e952cc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/e1b454ce63ac6e683103b19e302d32e861e952cc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/3a512326dc2cec7e4c62e0dc8fe569fdc5305373","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3a512326dc2cec7e4c62e0dc8fe569fdc5305373","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/3a512326dc2cec7e4c62e0dc8fe569fdc5305373","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/comments","author":null,"committer":null,"parents":[{"sha":"de4711ddf87571c4de5686385663aef3f19fcaf7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/de4711ddf87571c4de5686385663aef3f19fcaf7","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/de4711ddf87571c4de5686385663aef3f19fcaf7"}],"stats":{"total":230,"additions":116,"deletions":114},"files":[{"sha":"cd3f359c7a99ef67088e73beb9b76651278f3440","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -34,8 +34,8 @@\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n import com.twitter.distributedlog.function.CloseAsyncCloseableFunction;\n import com.twitter.distributedlog.function.GetVersionedValueFunction;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForReader;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n+import com.twitter.distributedlog.metadata.LogMetadataForReader;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.impl.metadata.ZKLogStreamMetadataStore;\n import com.twitter.distributedlog.io.AsyncCloseable;\n import com.twitter.distributedlog.lock.DistributedLock;\n@@ -501,7 +501,7 @@ synchronized BKLogReadHandler createReadHandler(Optional<String> subscriberId,\n                                                     AsyncNotification notification,\n                                                     boolean deserializeRecordSet,\n                                                     boolean isHandleForReading) {\n-        ZKLogMetadataForReader logMetadata = ZKLogMetadataForReader.of(uri, name, streamIdentifier);\n+        LogMetadataForReader logMetadata = LogMetadataForReader.of(uri, name, streamIdentifier);\n         return new BKLogReadHandler(\n                 logMetadata,\n                 subscriberId,\n@@ -524,7 +524,7 @@ synchronized BKLogReadHandler createReadHandler(Optional<String> subscriberId,\n \n     // Create Ledger Allocator\n \n-    LedgerAllocator createLedgerAllocator(ZKLogMetadataForWriter logMetadata) throws IOException {\n+    LedgerAllocator createLedgerAllocator(LogMetadataForWriter logMetadata) throws IOException {\n         LedgerAllocator ledgerAllocatorDelegator;\n         if (!dynConf.getEnableLedgerAllocatorPool()) {\n             QuorumConfigProvider quorumConfigProvider =\n@@ -558,17 +558,17 @@ Future<BKLogWriteHandler> asyncCreateWriteHandler(final boolean lockHandler) {\n                 name,\n                 ownAllocator,\n                 conf.getCreateStreamIfNotExists() || ownAllocator\n-        ).flatMap(new AbstractFunction1<ZKLogMetadataForWriter, Future<BKLogWriteHandler>>() {\n+        ).flatMap(new AbstractFunction1<LogMetadataForWriter, Future<BKLogWriteHandler>>() {\n             @Override\n-            public Future<BKLogWriteHandler> apply(ZKLogMetadataForWriter logMetadata) {\n+            public Future<BKLogWriteHandler> apply(LogMetadataForWriter logMetadata) {\n                 Promise<BKLogWriteHandler> createPromise = new Promise<BKLogWriteHandler>();\n                 createWriteHandler(logMetadata, lockHandler, createPromise);\n                 return createPromise;\n             }\n         });\n     }\n \n-    private void createWriteHandler(ZKLogMetadataForWriter logMetadata,\n+    private void createWriteHandler(LogMetadataForWriter logMetadata,\n                                     boolean lockHandler,\n                                     final Promise<BKLogWriteHandler> createPromise) {\n         // Build the locks\n@@ -1374,7 +1374,7 @@ public SubscriptionStateStore getSubscriptionStateStore(String subscriberId) {\n      */\n     private SubscriptionStateStore getSubscriptionStateStoreInternal(String streamIdentifier, String subscriberId) {\n         return new ZKSubscriptionStateStore(writerZKC,\n-                ZKLogMetadataForReader.getSubscriberPath(uri, name, streamIdentifier, subscriberId));\n+                LogMetadataForReader.getSubscriberPath(uri, name, streamIdentifier, subscriberId));\n     }\n \n     @Override\n@@ -1390,6 +1390,6 @@ public SubscriptionsStore getSubscriptionsStore() {\n      */\n     private SubscriptionsStore getSubscriptionsStoreInternal(String streamIdentifier) {\n         return new ZKSubscriptionsStore(writerZKC,\n-                ZKLogMetadataForReader.getSubscribersPath(uri, name, streamIdentifier));\n+                LogMetadataForReader.getSubscribersPath(uri, name, streamIdentifier));\n     }\n }"},{"sha":"caee8649523bb68dd729dac6893efb3d69c9d508","filename":"src/main/java/com/twitter/distributedlog/BKLogHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogHandler.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -23,7 +23,7 @@\n import com.twitter.distributedlog.exceptions.LogEmptyException;\n import com.twitter.distributedlog.exceptions.LogSegmentNotFoundException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n import com.twitter.distributedlog.io.AsyncAbortable;\n import com.twitter.distributedlog.io.AsyncCloseable;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataCache;\n@@ -87,7 +87,7 @@\n public abstract class BKLogHandler implements AsyncCloseable, AsyncAbortable {\n     static final Logger LOG = LoggerFactory.getLogger(BKLogHandler.class);\n \n-    protected final ZKLogMetadata logMetadata;\n+    protected final LogMetadata logMetadata;\n     protected final DistributedLogConfiguration conf;\n     protected final BookKeeperClient bookKeeperClient;\n     protected final LogStreamMetadataStore streamMetadataStore;\n@@ -120,7 +120,7 @@ public abstract class BKLogHandler implements AsyncCloseable, AsyncAbortable {\n     /**\n      * Construct a Bookkeeper journal manager.\n      */\n-    BKLogHandler(ZKLogMetadata metadata,\n+    BKLogHandler(LogMetadata metadata,\n                  DistributedLogConfiguration conf,\n                  BookKeeperClientBuilder bkcBuilder,\n                  LogStreamMetadataStore streamMetadataStore,"},{"sha":"9cfe1a64229f1c6be26e9b727cbaf1a1f930abfb","filename":"src/main/java/com/twitter/distributedlog/BKLogReadHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogReadHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogReadHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogReadHandler.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -35,7 +35,7 @@\n import com.twitter.distributedlog.exceptions.LogNotFoundException;\n import com.twitter.distributedlog.exceptions.LogSegmentNotFoundException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForReader;\n+import com.twitter.distributedlog.metadata.LogMetadataForReader;\n import com.twitter.distributedlog.injector.AsyncFailureInjector;\n import com.twitter.distributedlog.lock.DistributedLock;\n import com.twitter.distributedlog.logsegment.LogSegmentFilter;\n@@ -110,7 +110,7 @@\n class BKLogReadHandler extends BKLogHandler implements LogSegmentNamesListener {\n     static final Logger LOG = LoggerFactory.getLogger(BKLogReadHandler.class);\n \n-    protected final ZKLogMetadataForReader logMetadataForReader;\n+    protected final LogMetadataForReader logMetadataForReader;\n     protected final ReadAheadCache readAheadCache;\n     protected final LedgerHandleCache handleCache;\n \n@@ -142,7 +142,7 @@ class BKLogReadHandler extends BKLogHandler implements LogSegmentNamesListener {\n     /**\n      * Construct a Bookkeeper journal manager.\n      */\n-    BKLogReadHandler(ZKLogMetadataForReader logMetadata,\n+    BKLogReadHandler(LogMetadataForReader logMetadata,\n                      Optional<String> subscriberId,\n                      DistributedLogConfiguration conf,\n                      DynamicDistributedLogConfiguration dynConf,"},{"sha":"2e31ac89163bb3b8edb26dcc1cfcfa2ad65d83fd","filename":"src/main/java/com/twitter/distributedlog/BKLogWriteHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -30,7 +30,7 @@\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n import com.twitter.distributedlog.function.GetLastTxIdFunction;\n import com.twitter.distributedlog.impl.BKLogSegmentEntryWriter;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.lock.DistributedLock;\n import com.twitter.distributedlog.logsegment.LogSegmentFilter;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataCache;\n@@ -89,7 +89,7 @@\n class BKLogWriteHandler extends BKLogHandler {\n     static final Logger LOG = LoggerFactory.getLogger(BKLogReadHandler.class);\n \n-    protected final ZKLogMetadataForWriter logMetadataForWriter;\n+    protected final LogMetadataForWriter logMetadataForWriter;\n     protected final DistributedLock lock;\n     protected final LedgerAllocator ledgerAllocator;\n     protected final MaxTxId maxTxId;\n@@ -149,7 +149,7 @@ public Future<Long> apply(List<LogSegmentMetadata> segmentList) {\n     /**\n      * Construct a Bookkeeper journal manager.\n      */\n-    BKLogWriteHandler(ZKLogMetadataForWriter logMetadata,\n+    BKLogWriteHandler(LogMetadataForWriter logMetadata,\n                       DistributedLogConfiguration conf,\n                       BookKeeperClientBuilder bkcBuilder,\n                       LogStreamMetadataStore streamMetadataStore,"},{"sha":"2076dd80465354af739bc75ecafe118dc2312ccd","filename":"src/main/java/com/twitter/distributedlog/impl/ZKLogSegmentMetadataStore.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -25,8 +25,8 @@\n import com.twitter.distributedlog.exceptions.LogNotFoundException;\n import com.twitter.distributedlog.exceptions.LogSegmentNotFoundException;\n import com.twitter.distributedlog.exceptions.ZKException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataStore;\n import com.twitter.distributedlog.util.DLUtils;\n import com.twitter.distributedlog.util.FutureUtils;\n@@ -222,7 +222,7 @@ protected void submitTask(Object key, Runnable r) {\n \n     @Override\n     public void storeMaxLogSegmentSequenceNumber(Transaction<Object> txn,\n-                                                 ZKLogMetadata logMetadata,\n+                                                 LogMetadata logMetadata,\n                                                  Versioned<Long> lssn,\n                                                  Transaction.OpListener<Version> listener) {\n         Version version = lssn.getVersion();\n@@ -236,7 +236,7 @@ public void storeMaxLogSegmentSequenceNumber(Transaction<Object> txn,\n \n     @Override\n     public void storeMaxTxnId(Transaction<Object> txn,\n-                              ZKLogMetadataForWriter logMetadata,\n+                              LogMetadataForWriter logMetadata,\n                               Versioned<Long> transactionId,\n                               Transaction.OpListener<Version> listener) {\n         Version version = transactionId.getVersion();"},{"sha":"c76a5a599da1f0ec42f95e611ee47db65c46f353","filename":"src/main/java/com/twitter/distributedlog/impl/metadata/ZKLogStreamMetadataStore.java","status":"modified","additions":28,"deletions":25,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FZKLogStreamMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FZKLogStreamMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FZKLogStreamMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -38,6 +38,9 @@\n import com.twitter.distributedlog.lock.ZKSessionLockFactory;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataStore;\n import com.twitter.distributedlog.metadata.LogStreamMetadataStore;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadataForReader;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.util.DLUtils;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.SchedulerUtils;\n@@ -75,7 +78,7 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n-import static com.twitter.distributedlog.impl.metadata.ZKLogMetadata.*;\n+import static com.twitter.distributedlog.metadata.LogMetadata.*;\n \n /**\n  * zookeeper based {@link LogStreamMetadataStore}\n@@ -172,7 +175,7 @@ public Transaction<Object> newTransaction() {\n \n     @Override\n     public Future<Void> logExists(URI uri, final String logName) {\n-        final String logSegmentsPath = ZKLogMetadata.getLogSegmentsPath(\n+        final String logSegmentsPath = LogMetadata.getLogSegmentsPath(\n                 uri, logName, conf.getUnpartitionedStreamName());\n         final Promise<Void> promise = new Promise<Void>();\n         try {\n@@ -221,7 +224,7 @@ public void processResult(int rc, String path, Object ctx, Stat stat) {\n     //\n \n     @Override\n-    public DistributedLock createWriteLock(ZKLogMetadataForWriter metadata) {\n+    public DistributedLock createWriteLock(LogMetadataForWriter metadata) {\n         return new ZKDistributedLock(\n                 getLockStateExecutor(true),\n                 getLockFactory(true),\n@@ -234,7 +237,7 @@ public DistributedLock createWriteLock(ZKLogMetadataForWriter metadata) {\n     // Create Read Lock\n     //\n \n-    private Future<Void> ensureReadLockPathExist(final ZKLogMetadata logMetadata,\n+    private Future<Void> ensureReadLockPathExist(final LogMetadata logMetadata,\n                                                  final String readLockPath) {\n         final Promise<Void> promise = new Promise<Void>();\n         promise.setInterruptHandler(new com.twitter.util.Function<Throwable, BoxedUnit>() {\n@@ -274,7 +277,7 @@ public void processResult(final int rc, final String path, Object ctx, String na\n     }\n \n     @Override\n-    public Future<DistributedLock> createReadLock(final ZKLogMetadataForReader metadata,\n+    public Future<DistributedLock> createReadLock(final LogMetadataForReader metadata,\n                                                   Optional<String> readerId) {\n         final String readLockPath = metadata.getReadLockPath(readerId);\n         return ensureReadLockPathExist(metadata, readLockPath).flatMap(\n@@ -492,11 +495,11 @@ public void processResult(int rc, String path, Object ctx, List<OpResult> result\n         }, null);\n     }\n \n-    static ZKLogMetadataForWriter processLogMetadatas(URI uri,\n-                                                      String logName,\n-                                                      String logIdentifier,\n-                                                      List<Versioned<byte[]>> metadatas,\n-                                                      boolean ownAllocator)\n+    static LogMetadataForWriter processLogMetadatas(URI uri,\n+                                                    String logName,\n+                                                    String logIdentifier,\n+                                                    List<Versioned<byte[]>> metadatas,\n+                                                    boolean ownAllocator)\n             throws UnexpectedException {\n         try {\n             // max id\n@@ -526,7 +529,7 @@ static ZKLogMetadataForWriter processLogMetadatas(URI uri,\n             } else {\n                 allocationData = new Versioned<byte[]>(null, null);\n             }\n-            return new ZKLogMetadataForWriter(uri, logName, logIdentifier,\n+            return new LogMetadataForWriter(uri, logName, logIdentifier,\n                     maxLSSNData, maxTxnIdData, allocationData);\n         } catch (IllegalArgumentException iae) {\n             throw new UnexpectedException(\"Invalid log \" + logName, iae);\n@@ -535,13 +538,13 @@ static ZKLogMetadataForWriter processLogMetadatas(URI uri,\n         }\n     }\n \n-    static Future<ZKLogMetadataForWriter> getLog(final URI uri,\n-                                                 final String logName,\n-                                                 final String logIdentifier,\n-                                                 final ZooKeeperClient zooKeeperClient,\n-                                                 final boolean ownAllocator,\n-                                                 final boolean createIfNotExists) {\n-        final String logRootPath = ZKLogMetadata.getLogRootPath(uri, logName, logIdentifier);\n+    static Future<LogMetadataForWriter> getLog(final URI uri,\n+                                               final String logName,\n+                                               final String logIdentifier,\n+                                               final ZooKeeperClient zooKeeperClient,\n+                                               final boolean ownAllocator,\n+                                               final boolean createIfNotExists) {\n+        final String logRootPath = LogMetadata.getLogRootPath(uri, logName, logIdentifier);\n         try {\n             PathUtils.validatePath(logRootPath);\n         } catch (IllegalArgumentException e) {\n@@ -561,9 +564,9 @@ public Future<List<Versioned<byte[]>>> apply(List<Versioned<byte[]>> metadatas)\n                                     ownAllocator, createIfNotExists, promise);\n                             return promise;\n                         }\n-                    }).map(new ExceptionalFunction<List<Versioned<byte[]>>, ZKLogMetadataForWriter>() {\n+                    }).map(new ExceptionalFunction<List<Versioned<byte[]>>, LogMetadataForWriter>() {\n                         @Override\n-                        public ZKLogMetadataForWriter applyE(List<Versioned<byte[]>> metadatas) throws DLException {\n+                        public LogMetadataForWriter applyE(List<Versioned<byte[]>> metadatas) throws DLException {\n                             return processLogMetadatas(\n                                     uri,\n                                     logName,\n@@ -581,10 +584,10 @@ public ZKLogMetadataForWriter applyE(List<Versioned<byte[]>> metadatas) throws D\n     }\n \n     @Override\n-    public Future<ZKLogMetadataForWriter> getLog(final URI uri,\n-                                                 final String logName,\n-                                                 final boolean ownAllocator,\n-                                                 final boolean createIfNotExists) {\n+    public Future<LogMetadataForWriter> getLog(final URI uri,\n+                                               final String logName,\n+                                               final boolean ownAllocator,\n+                                               final boolean createIfNotExists) {\n         return getLog(\n                 uri,\n                 logName,\n@@ -602,7 +605,7 @@ public Future<ZKLogMetadataForWriter> getLog(final URI uri,\n     public Future<Void> deleteLog(URI uri, final String logName) {\n         final Promise<Void> promise = new Promise<Void>();\n         try {\n-            String streamPath = ZKLogMetadata.getLogStreamPath(uri, logName);\n+            String streamPath = LogMetadata.getLogStreamPath(uri, logName);\n             ZKUtil.deleteRecursive(zooKeeperClient.get(), streamPath, new AsyncCallback.VoidCallback() {\n                 @Override\n                 public void processResult(int rc, String path, Object ctx) {"},{"sha":"dda76e5ffe7570ad7392ec26ee822505e7a5a6f7","filename":"src/main/java/com/twitter/distributedlog/logsegment/LogSegmentMetadataStore.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FLogSegmentMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FLogSegmentMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FLogSegmentMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -20,8 +20,8 @@\n import com.google.common.annotations.Beta;\n import com.twitter.distributedlog.LogSegmentMetadata;\n import com.twitter.distributedlog.callback.LogSegmentNamesListener;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.util.Transaction;\n import com.twitter.distributedlog.util.Transaction.OpListener;\n import com.twitter.util.Future;\n@@ -62,7 +62,7 @@ public interface LogSegmentMetadataStore extends Closeable {\n      *          listener on the result to this operation\n      */\n     void storeMaxLogSegmentSequenceNumber(Transaction<Object> txn,\n-                                          ZKLogMetadata logMetadata,\n+                                          LogMetadata logMetadata,\n                                           Versioned<Long> sequenceNumber,\n                                           OpListener<Version> listener);\n \n@@ -79,7 +79,7 @@ void storeMaxLogSegmentSequenceNumber(Transaction<Object> txn,\n      *          listener on the result to this operation\n      */\n     void storeMaxTxnId(Transaction<Object> txn,\n-                       ZKLogMetadataForWriter logMetadata,\n+                       LogMetadataForWriter logMetadata,\n                        Versioned<Long> transactionId,\n                        OpListener<Version> listener);\n "},{"sha":"c878d68540ca090fee763e79deec1f23c89cd5d9","filename":"src/main/java/com/twitter/distributedlog/metadata/LogMetadata.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadata.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -15,14 +15,14 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.twitter.distributedlog.impl.metadata;\n+package com.twitter.distributedlog.metadata;\n \n import java.net.URI;\n \n /**\n  * Class to represent the layout and metadata of the zookeeper-based log metadata\n  */\n-public class ZKLogMetadata {\n+public class LogMetadata {\n \n     protected static String getLogComponentPath(URI uri, String logName, String logIdentifier, String component) {\n         return String.format(\"%s/%s/%s%s\", uri.getPath(), logName, logIdentifier, component);\n@@ -69,7 +69,7 @@ public static String getLogSegmentsPath(URI uri, String logName, String logIdent\n         return getLogComponentPath(uri, logName, logIdentifier, LOGSEGMENTS_PATH);\n     }\n \n-    protected static final int LAYOUT_VERSION = -1;\n+    public static final int LAYOUT_VERSION = -1;\n     public final static String LOGSEGMENTS_PATH = \"/ledgers\";\n     public final static String VERSION_PATH = \"/version\";\n     // writer znodes\n@@ -101,9 +101,9 @@ public static String getLogSegmentsPath(URI uri, String logName, String logIdent\n      * @param logIdentifier\n      *          identifier of the log\n      */\n-    protected ZKLogMetadata(URI uri,\n-                            String logName,\n-                            String logIdentifier) {\n+    protected LogMetadata(URI uri,\n+                          String logName,\n+                          String logIdentifier) {\n         this.uri = uri;\n         this.logName = logName;\n         this.logIdentifier = logIdentifier;","previous_filename":"src/main/java/com/twitter/distributedlog/impl/metadata/ZKLogMetadata.java"},{"sha":"ff6bfca7ce4983b433ca20017d2cf894e33a6b70","filename":"src/main/java/com/twitter/distributedlog/metadata/LogMetadataForReader.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForReader.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -15,7 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.twitter.distributedlog.impl.metadata;\n+package com.twitter.distributedlog.metadata;\n \n import com.google.common.base.Optional;\n \n@@ -24,7 +24,7 @@\n /**\n  * Log Metadata for Reader\n  */\n-public class ZKLogMetadataForReader extends ZKLogMetadata {\n+public class LogMetadataForReader extends LogMetadata {\n \n     /**\n      * Get the root path to store subscription infos of a log.\n@@ -69,8 +69,8 @@ public static String getSubscriberPath(URI uri, String logName, String logIdenti\n      *          identifier of the log\n      * @return metadata representation of a log for reader\n      */\n-    public static ZKLogMetadataForReader of(URI uri, String logName, String logIdentifier) {\n-        return new ZKLogMetadataForReader(uri, logName, logIdentifier);\n+    public static LogMetadataForReader of(URI uri, String logName, String logIdentifier) {\n+        return new LogMetadataForReader(uri, logName, logIdentifier);\n     }\n \n     final static String SUBSCRIBERS_PATH = \"/subscribers\";\n@@ -82,7 +82,7 @@ public static ZKLogMetadataForReader of(URI uri, String logName, String logIdent\n      * @param logName       name of the log\n      * @param logIdentifier identifier of the log\n      */\n-    private ZKLogMetadataForReader(URI uri, String logName, String logIdentifier) {\n+    private LogMetadataForReader(URI uri, String logName, String logIdentifier) {\n         super(uri, logName, logIdentifier);\n     }\n ","previous_filename":"src/main/java/com/twitter/distributedlog/impl/metadata/ZKLogMetadataForReader.java"},{"sha":"2284cbbcaff634300f9fb79e789946d02ff9a30d","filename":"src/main/java/com/twitter/distributedlog/metadata/LogMetadataForWriter.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogMetadataForWriter.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -15,7 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.twitter.distributedlog.impl.metadata;\n+package com.twitter.distributedlog.metadata;\n \n import org.apache.bookkeeper.versioning.Versioned;\n \n@@ -24,7 +24,7 @@\n /**\n  * Log Metadata for writer\n  */\n-public class ZKLogMetadataForWriter extends ZKLogMetadata {\n+public class LogMetadataForWriter extends LogMetadata {\n \n     private final Versioned<byte[]> maxLSSNData;\n     private final Versioned<byte[]> maxTxIdData;\n@@ -37,12 +37,12 @@ public class ZKLogMetadataForWriter extends ZKLogMetadata {\n      * @param logName       name of the log\n      * @param logIdentifier identifier of the log\n      */\n-    public ZKLogMetadataForWriter(URI uri,\n-                                  String logName,\n-                                  String logIdentifier,\n-                                  Versioned<byte[]> maxLSSNData,\n-                                  Versioned<byte[]> maxTxIdData,\n-                                  Versioned<byte[]> allocationData) {\n+    public LogMetadataForWriter(URI uri,\n+                                String logName,\n+                                String logIdentifier,\n+                                Versioned<byte[]> maxLSSNData,\n+                                Versioned<byte[]> maxTxIdData,\n+                                Versioned<byte[]> allocationData) {\n         super(uri, logName, logIdentifier);\n         this.maxLSSNData = maxLSSNData;\n         this.maxTxIdData = maxTxIdData;","previous_filename":"src/main/java/com/twitter/distributedlog/impl/metadata/ZKLogMetadataForWriter.java"},{"sha":"7242a5e0d01393b6d71e28c82393d26733dcf8f6","filename":"src/main/java/com/twitter/distributedlog/metadata/LogStreamMetadataStore.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogStreamMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogStreamMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FLogStreamMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -19,8 +19,6 @@\n \n import com.google.common.annotations.Beta;\n import com.google.common.base.Optional;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForReader;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n import com.twitter.distributedlog.lock.DistributedLock;\n import com.twitter.distributedlog.logsegment.LogSegmentMetadataStore;\n import com.twitter.distributedlog.util.PermitManager;\n@@ -61,7 +59,7 @@ public interface LogStreamMetadataStore extends Closeable {\n      * @param readerId the reader id used for lock\n      * @return the read lock\n      */\n-    Future<DistributedLock> createReadLock(ZKLogMetadataForReader metadata,\n+    Future<DistributedLock> createReadLock(LogMetadataForReader metadata,\n                                            Optional<String> readerId);\n \n     /**\n@@ -70,7 +68,7 @@ Future<DistributedLock> createReadLock(ZKLogMetadataForReader metadata,\n      * @param metadata the metadata for a log stream\n      * @return the write lock\n      */\n-    DistributedLock createWriteLock(ZKLogMetadataForWriter metadata);\n+    DistributedLock createWriteLock(LogMetadataForWriter metadata);\n \n     /**\n      * Create the metadata of a log.\n@@ -81,10 +79,10 @@ Future<DistributedLock> createReadLock(ZKLogMetadataForReader metadata,\n      * @param createIfNotExists flag to create the stream if it doesn't exist\n      * @return the metadata of the log\n      */\n-    Future<ZKLogMetadataForWriter> getLog(URI uri,\n-                                          String streamName,\n-                                          boolean ownAllocator,\n-                                          boolean createIfNotExists);\n+    Future<LogMetadataForWriter> getLog(URI uri,\n+                                        String streamName,\n+                                        boolean ownAllocator,\n+                                        boolean createIfNotExists);\n \n     /**\n      * Delete the metadata of a log."},{"sha":"6c55014ca7ee98f9b487f87a8f214f7ec095603b","filename":"src/main/java/com/twitter/distributedlog/readahead/ReadAheadWorker.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -36,8 +36,7 @@\n import com.twitter.distributedlog.config.DynamicDistributedLogConfiguration;\n import com.twitter.distributedlog.exceptions.DLInterruptedException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n-import com.twitter.distributedlog.exceptions.ZKException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForReader;\n+import com.twitter.distributedlog.metadata.LogMetadataForReader;\n import com.twitter.distributedlog.injector.AsyncFailureInjector;\n import com.twitter.distributedlog.io.AsyncCloseable;\n import com.twitter.distributedlog.logsegment.LogSegmentFilter;\n@@ -108,7 +107,7 @@ public class ReadAheadWorker implements ReadAheadCallback, Runnable, AsyncClosea\n     private final String fullyQualifiedName;\n     private final DistributedLogConfiguration conf;\n     private final DynamicDistributedLogConfiguration dynConf;\n-    private final ZKLogMetadataForReader logMetadata;\n+    private final LogMetadataForReader logMetadata;\n     private final BKLogHandler bkLedgerManager;\n     private final boolean isHandleForReading;\n     // Notification to notify readahead status\n@@ -203,7 +202,7 @@ public class ReadAheadWorker implements ReadAheadCallback, Runnable, AsyncClosea\n \n     public ReadAheadWorker(DistributedLogConfiguration conf,\n                            DynamicDistributedLogConfiguration dynConf,\n-                           ZKLogMetadataForReader logMetadata,\n+                           LogMetadataForReader logMetadata,\n                            BKLogHandler ledgerManager,\n                            OrderedScheduler scheduler,\n                            LedgerHandleCache handleCache,"},{"sha":"96c33e21490a32de20cbb118eb41901d29997635","filename":"src/test/java/com/twitter/distributedlog/TestBKDistributedLogManager.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -50,8 +50,7 @@\n import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n import com.twitter.distributedlog.exceptions.OwnershipAcquireFailedException;\n import com.twitter.distributedlog.exceptions.TransactionIdOutOfOrderException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n-import com.twitter.distributedlog.metadata.BKDLConfig;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n import com.twitter.distributedlog.metadata.MetadataUpdater;\n import com.twitter.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import com.twitter.distributedlog.namespace.DistributedLogNamespace;\n@@ -1107,7 +1106,7 @@ public void testTruncationValidation() throws Exception {\n         }\n \n         Map<Long, LogSegmentMetadata> segmentList = DLMTestUtil.readLogSegments(zookeeperClient,\n-                ZKLogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n+                LogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n \n         LOG.info(\"Read segments before truncating first segment : {}\", segmentList);\n \n@@ -1116,7 +1115,7 @@ public void testTruncationValidation() throws Exception {\n         FutureUtils.result(updater.setLogSegmentTruncated(segmentList.get(1L)));\n \n         segmentList = DLMTestUtil.readLogSegments(zookeeperClient,\n-                ZKLogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n+                LogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n \n         LOG.info(\"Read segments after truncated first segment : {}\", segmentList);\n \n@@ -1139,15 +1138,15 @@ public void testTruncationValidation() throws Exception {\n         FutureUtils.result(updater.setLogSegmentActive(segmentList.get(1L)));\n \n         segmentList = DLMTestUtil.readLogSegments(zookeeperClient,\n-                ZKLogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n+                LogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n \n         LOG.info(\"Read segments after marked first segment as active : {}\", segmentList);\n \n         updater = LogSegmentMetadataStoreUpdater.createMetadataUpdater(confLocal, metadataStore);\n         FutureUtils.result(updater.setLogSegmentTruncated(segmentList.get(2L)));\n \n         segmentList = DLMTestUtil.readLogSegments(zookeeperClient,\n-                ZKLogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n+                LogMetadata.getLogSegmentsPath(uri, name, confLocal.getUnpartitionedStreamName()));\n \n         LOG.info(\"Read segments after truncated second segment : {}\", segmentList);\n \n@@ -1190,7 +1189,7 @@ public void testTruncationValidation() throws Exception {\n         }\n \n         segmentList = DLMTestUtil.readLogSegments(zookeeperClient,\n-                ZKLogMetadata.getLogSegmentsPath(uri, name, conf.getUnpartitionedStreamName()));\n+                LogMetadata.getLogSegmentsPath(uri, name, conf.getUnpartitionedStreamName()));\n \n         Assert.assertTrue(segmentList.get(truncDLSN.getLogSegmentSequenceNo()).getMinActiveDLSN().compareTo(truncDLSN) == 0);\n "},{"sha":"bb67214c18da1e97caca262f2a009c946d2274bb","filename":"src/test/java/com/twitter/distributedlog/TestLogSegmentsZK.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentsZK.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentsZK.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentsZK.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -19,7 +19,7 @@\n \n import com.twitter.distributedlog.exceptions.DLIllegalStateException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n import com.twitter.distributedlog.namespace.DistributedLogNamespace;\n import com.twitter.distributedlog.namespace.DistributedLogNamespaceBuilder;\n import com.twitter.distributedlog.util.DLUtils;\n@@ -46,7 +46,7 @@ public class TestLogSegmentsZK extends TestDistributedLogBase {\n     private static MaxLogSegmentSequenceNo getMaxLogSegmentSequenceNo(ZooKeeperClient zkc, URI uri, String streamName,\n                                                                       DistributedLogConfiguration conf) throws Exception {\n         Stat stat = new Stat();\n-        String logSegmentsPath = ZKLogMetadata.getLogSegmentsPath(\n+        String logSegmentsPath = LogMetadata.getLogSegmentsPath(\n                 uri, streamName, conf.getUnpartitionedStreamName());\n         byte[] data = zkc.get().getData(logSegmentsPath, false, stat);\n         Versioned<byte[]> maxLSSNData = new Versioned<byte[]>(data, new ZkVersion(stat.getVersion()));\n@@ -55,7 +55,7 @@ private static MaxLogSegmentSequenceNo getMaxLogSegmentSequenceNo(ZooKeeperClien\n \n     private static void updateMaxLogSegmentSequenceNo(ZooKeeperClient zkc, URI uri, String streamName,\n                                                       DistributedLogConfiguration conf, byte[] data) throws Exception {\n-        String logSegmentsPath = ZKLogMetadata.getLogSegmentsPath(\n+        String logSegmentsPath = LogMetadata.getLogSegmentsPath(\n                 uri, streamName, conf.getUnpartitionedStreamName());\n         zkc.get().setData(logSegmentsPath, data, -1);\n     }"},{"sha":"46e8af0614af82b86f803a69812978124953fcc4","filename":"src/test/java/com/twitter/distributedlog/impl/TestZKLogSegmentMetadataStore.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -27,8 +27,8 @@\n import com.twitter.distributedlog.ZooKeeperClientUtils;\n import com.twitter.distributedlog.callback.LogSegmentNamesListener;\n import com.twitter.distributedlog.exceptions.ZKException;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadata;\n-import com.twitter.distributedlog.impl.metadata.ZKLogMetadataForWriter;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.util.DLUtils;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.OrderedScheduler;\n@@ -637,7 +637,7 @@ public void testStoreMaxLogSegmentSequenceNumber() throws Exception {\n         Transaction<Object> updateTxn = lsmStore.transaction();\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(0));\n         final Promise<Version> result = new Promise<Version>();\n-        ZKLogMetadata metadata = mock(ZKLogMetadata.class);\n+        LogMetadata metadata = mock(LogMetadata.class);\n         when(metadata.getLogSegmentsPath()).thenReturn(rootZkPath);\n         lsmStore.storeMaxLogSegmentSequenceNumber(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {\n@@ -664,7 +664,7 @@ public void testStoreMaxLogSegmentSequenceNumberBadVersion() throws Exception {\n         Transaction<Object> updateTxn = lsmStore.transaction();\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(10));\n         final Promise<Version> result = new Promise<Version>();\n-        ZKLogMetadata metadata = mock(ZKLogMetadata.class);\n+        LogMetadata metadata = mock(LogMetadata.class);\n         when(metadata.getLogSegmentsPath()).thenReturn(rootZkPath);\n         lsmStore.storeMaxLogSegmentSequenceNumber(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {\n@@ -702,7 +702,7 @@ public void testStoreMaxLogSegmentSequenceNumberOnNonExistentPath() throws Excep\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(10));\n         final Promise<Version> result = new Promise<Version>();\n         String nonExistentPath = rootZkPath + \"/non-existent\";\n-        ZKLogMetadata metadata = mock(ZKLogMetadata.class);\n+        LogMetadata metadata = mock(LogMetadata.class);\n         when(metadata.getLogSegmentsPath()).thenReturn(nonExistentPath);\n         lsmStore.storeMaxLogSegmentSequenceNumber(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {\n@@ -735,7 +735,7 @@ public void testStoreMaxTxnId() throws Exception {\n         Transaction<Object> updateTxn = lsmStore.transaction();\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(0));\n         final Promise<Version> result = new Promise<Version>();\n-        ZKLogMetadataForWriter metadata = mock(ZKLogMetadataForWriter.class);\n+        LogMetadataForWriter metadata = mock(LogMetadataForWriter.class);\n         when(metadata.getMaxTxIdPath()).thenReturn(rootZkPath);\n         lsmStore.storeMaxTxnId(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {\n@@ -762,7 +762,7 @@ public void testStoreMaxTxnIdBadVersion() throws Exception {\n         Transaction<Object> updateTxn = lsmStore.transaction();\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(10));\n         final Promise<Version> result = new Promise<Version>();\n-        ZKLogMetadataForWriter metadata = mock(ZKLogMetadataForWriter.class);\n+        LogMetadataForWriter metadata = mock(LogMetadataForWriter.class);\n         when(metadata.getMaxTxIdPath()).thenReturn(rootZkPath);\n         lsmStore.storeMaxTxnId(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {\n@@ -800,7 +800,7 @@ public void testStoreMaxTxnIdOnNonExistentPath() throws Exception {\n         Versioned<Long> value = new Versioned<Long>(999L, new ZkVersion(10));\n         final Promise<Version> result = new Promise<Version>();\n         String nonExistentPath = rootZkPath + \"/non-existent\";\n-        ZKLogMetadataForWriter metadata = mock(ZKLogMetadataForWriter.class);\n+        LogMetadataForWriter metadata = mock(LogMetadataForWriter.class);\n         when(metadata.getMaxTxIdPath()).thenReturn(nonExistentPath);\n         lsmStore.storeMaxTxnId(updateTxn, metadata, value,\n                 new Transaction.OpListener<Version>() {"},{"sha":"41544d6d597a164a0cb4b8cc5610baa42eb80489","filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogStreamMetadataStore.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStore.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -23,6 +23,7 @@\n import com.google.common.collect.Lists;\n import com.twitter.distributedlog.DLMTestUtil;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.namespace.DistributedLogNamespace;\n import com.twitter.distributedlog.namespace.DistributedLogNamespaceBuilder;\n import com.twitter.distributedlog.DistributedLogManager;\n@@ -51,7 +52,7 @@\n import java.net.URI;\n import java.util.List;\n \n-import static com.twitter.distributedlog.impl.metadata.ZKLogMetadata.*;\n+import static com.twitter.distributedlog.metadata.LogMetadata.*;\n import static com.twitter.distributedlog.impl.metadata.ZKLogStreamMetadataStore.*;\n import static org.junit.Assert.*;\n \n@@ -167,7 +168,7 @@ private void testCreateLogMetadataWithMissingPaths(URI uri,\n             zkc.get().delete(path, -1);\n         }\n \n-        ZKLogMetadataForWriter logMetadata =\n+        LogMetadataForWriter logMetadata =\n                 FutureUtils.result(getLog(uri, logName, logIdentifier, zkc, ownAllocator, true));\n \n         final String logRootPath = getLogRootPath(uri, logName, logIdentifier);"},{"sha":"9f29ebed68293ab811572e493379a3a2512e9cae","filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -20,6 +20,8 @@\n import com.google.common.collect.Lists;\n import com.twitter.distributedlog.DLMTestUtil;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n+import com.twitter.distributedlog.metadata.LogMetadata;\n+import com.twitter.distributedlog.metadata.LogMetadataForWriter;\n import com.twitter.distributedlog.util.DLUtils;\n import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.bookkeeper.versioning.Versioned;\n@@ -88,7 +90,7 @@ public void testProcessLogMetadatasMissingLockPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(DLUtils.serializeTransactionId(1L), new ZkVersion(1)),\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(null, null));\n         processLogMetadatas(uri, logName, logIdentifier, metadatas, false);\n     }\n@@ -104,7 +106,7 @@ public void testProcessLogMetadatasMissingReadLockPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(DLUtils.serializeTransactionId(1L), new ZkVersion(1)),\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(null, null));\n         processLogMetadatas(uri, logName, logIdentifier, metadatas, false);\n@@ -121,7 +123,7 @@ public void testProcessLogMetadatasMissingLogSegmentsPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(DLUtils.serializeTransactionId(1L), new ZkVersion(1)),\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(null, null));\n@@ -139,7 +141,7 @@ public void testProcessLogMetadatasMissingAllocatorPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(DLUtils.serializeTransactionId(1L), new ZkVersion(1)),\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(DLUtils.serializeLogSegmentSequenceNumber(1L), new ZkVersion(1)),\n@@ -162,11 +164,11 @@ public void testProcessLogMetadatasNoAllocatorPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 maxTxnIdData,\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 logSegmentsData);\n-        ZKLogMetadataForWriter metadata =\n+        LogMetadataForWriter metadata =\n                 processLogMetadatas(uri, logName, logIdentifier, metadatas, false);\n         assertTrue(maxTxnIdData == metadata.getMaxTxIdData());\n         assertTrue(logSegmentsData == metadata.getMaxLSSNData());\n@@ -191,12 +193,12 @@ public void testProcessLogMetadatasAllocatorPath() throws Exception {\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),\n                 maxTxnIdData,\n-                new Versioned<byte[]>(intToBytes(ZKLogMetadata.LAYOUT_VERSION), null),\n+                new Versioned<byte[]>(intToBytes(LogMetadata.LAYOUT_VERSION), null),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 new Versioned<byte[]>(new byte[0], new ZkVersion(1)),\n                 logSegmentsData,\n                 allocationData);\n-        ZKLogMetadataForWriter metadata =\n+        LogMetadataForWriter metadata =\n                 processLogMetadatas(uri, logName, logIdentifier, metadatas, true);\n         assertTrue(maxTxnIdData == metadata.getMaxTxIdData());\n         assertTrue(logSegmentsData == metadata.getMaxLSSNData());"},{"sha":"315b983f9e4bd120398bc2874ead3717e955e50e","filename":"src/test/java/com/twitter/distributedlog/metadata/TestLogMetadata.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3a512326dc2cec7e4c62e0dc8fe569fdc5305373/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogMetadata.java?ref=3a512326dc2cec7e4c62e0dc8fe569fdc5305373","patch":"@@ -15,17 +15,17 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.twitter.distributedlog.impl.metadata;\n+package com.twitter.distributedlog.metadata;\n \n import com.twitter.distributedlog.DLMTestUtil;\n import org.junit.Test;\n \n import java.net.URI;\n \n-import static com.twitter.distributedlog.impl.metadata.ZKLogMetadata.*;\n+import static com.twitter.distributedlog.metadata.LogMetadata.*;\n import static org.junit.Assert.*;\n \n-public class TestZKLogMetadata {\n+public class TestLogMetadata {\n \n     @Test(timeout = 60000)\n     public void testGetPaths() throws Exception {\n@@ -36,7 +36,7 @@ public void testGetPaths() throws Exception {\n         String logRootPath = uri.getPath() + \"/\" + logName + \"/\" + logIdentifier;\n         String logSegmentName = \"test-segment\";\n \n-        ZKLogMetadata logMetadata = new ZKLogMetadata(uri, logName, logIdentifier);\n+        LogMetadata logMetadata = new LogMetadata(uri, logName, logIdentifier);\n         assertEquals(\"wrong log name\", logName, logMetadata.getLogName());\n         assertEquals(\"wrong root path\", logRootPath, logMetadata.getLogRootPath());\n         assertEquals(\"wrong log segments path\",","previous_filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogMetadata.java"}]}