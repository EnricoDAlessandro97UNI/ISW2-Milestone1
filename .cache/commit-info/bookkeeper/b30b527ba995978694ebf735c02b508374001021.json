{"sha":"b30b527ba995978694ebf735c02b508374001021","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmIzMGI1MjdiYTk5NTk3ODY5NGViZjczNWMwMmI1MDgzNzQwMDEwMjE=","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2017-03-28T20:40:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-28T20:40:35Z"},"message":"BOOKKEEPER-390: Provide support for ZooKeeper authentication\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #76 from eolivelli/BOOKKEEPER-390","tree":{"sha":"956ac07d30f280bea7e1b3c0ea8e49b7455c3dee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/956ac07d30f280bea7e1b3c0ea8e49b7455c3dee"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/b30b527ba995978694ebf735c02b508374001021","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b30b527ba995978694ebf735c02b508374001021","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b30b527ba995978694ebf735c02b508374001021","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b30b527ba995978694ebf735c02b508374001021/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"825e0e7b4a27730d85afbe823a405ba333de3a65","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/825e0e7b4a27730d85afbe823a405ba333de3a65","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/825e0e7b4a27730d85afbe823a405ba333de3a65"}],"stats":{"total":299,"additions":254,"deletions":45},"files":[{"sha":"c743ef4927456f87d748c6e59124a00b74031762","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -75,7 +75,6 @@\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n@@ -95,6 +94,8 @@\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_STATUS;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.WRITE_BYTES;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.JOURNAL_SCOPE;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Implements a bookie.\n@@ -143,6 +144,7 @@ public class Bookie extends BookieCriticalThread {\n \n     final protected String zkBookieRegPath;\n     final protected String zkBookieReadOnlyPath;\n+    final protected List<ACL> zkAcls;\n \n     final private AtomicBoolean zkRegistered = new AtomicBoolean(false);\n     final protected AtomicBoolean readOnly = new AtomicBoolean(false);\n@@ -648,6 +650,7 @@ public Bookie(ServerConfiguration conf)\n     public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n+        this.zkAcls = ZkUtils.getACLs(conf);\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.bookieReadonlyRegistrationPath =\n             this.bookieRegistrationPath + BookKeeperConstants.READONLY;\n@@ -1033,7 +1036,7 @@ private void doRegisterBookie(final String regPath) throws IOException {\n         try{\n             if (!checkRegNodeAndWaitExpired(regPath)) {\n                 // Create the ZK ephemeral node for this Bookie.\n-                zk.create(regPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                zk.create(regPath, new byte[0], zkAcls,\n                         CreateMode.EPHEMERAL);\n                 LOG.info(\"Registered myself in ZooKeeper at {}.\", regPath);\n             }\n@@ -1141,7 +1144,7 @@ public void doTransitionToReadOnlyMode() {\n             if (null == zk.exists(this.bookieReadonlyRegistrationPath, false)) {\n                 try {\n                     zk.create(this.bookieReadonlyRegistrationPath, new byte[0],\n-                              Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                              zkAcls, CreateMode.PERSISTENT);\n                 } catch (NodeExistsException e) {\n                     // this node is just now created by someone.\n                 }"},{"sha":"b1aa2dc3e524688d4cecda9e2ff47aba6c2a01a8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -47,14 +47,16 @@\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.Sets;\n import com.google.protobuf.TextFormat;\n+import java.util.List;\n+import org.apache.bookkeeper.util.ZkUtils;\n \n /**\n  * When a bookie starts for the first time it generates  a cookie, and stores\n@@ -249,6 +251,7 @@ void writeToDirectory(File directory) throws IOException {\n      */\n     void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version)\n             throws KeeperException, InterruptedException, UnknownHostException {\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n@@ -257,14 +260,14 @@ void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version)\n             if (zk.exists(bookieCookiePath, false) == null) {\n                 try {\n                     zk.create(bookieCookiePath, new byte[0],\n-                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                            zkAcls, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nne) {\n                     LOG.info(\"More than one bookie tried to create {} at once. Safe to ignore\",\n                             bookieCookiePath);\n                 }\n             }\n             zk.create(zkPath, data,\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                    zkAcls, CreateMode.PERSISTENT);\n         } else {\n             if (!(version instanceof ZkVersion)) {\n                 throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");"},{"sha":"ebcb98cb367b0adc309e499a7755f4df7e38c2fc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -46,6 +46,9 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.Sets;\n+import java.util.List;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Garbage collector implementation using scan and compare.\n@@ -165,6 +168,7 @@ public void gc(GarbageCleaner garbageCleaner) {\n \n     private Set<Long> removeOverReplicatedledgers(Set<Long> bkActiveledgers, final GarbageCleaner garbageCleaner)\n             throws InterruptedException, KeeperException {\n+        final List<ACL> zkAcls = ZkUtils.getACLs(conf);\n         final Set<Long> overReplicatedLedgers = Sets.newHashSet();\n         final Semaphore semaphore = new Semaphore(MAX_CONCURRENT_ZK_REQUESTS);\n         final CountDownLatch latch = new CountDownLatch(bkActiveledgers.size());\n@@ -178,7 +182,7 @@ private Set<Long> removeOverReplicatedledgers(Set<Long> bkActiveledgers, final G\n                 // we try to acquire the underreplicated ledger lock to not let the bookie replicate the ledger that is\n                 // already being checked for deletion, since that might change the ledger ensemble to include the\n                 // current bookie again and, in that case, we cannot remove the ledger from local storage\n-                ZkLedgerUnderreplicationManager.acquireUnderreplicatedLedgerLock(zk, zkLedgersRootPath, ledgerId);\n+                ZkLedgerUnderreplicationManager.acquireUnderreplicatedLedgerLock(zk, zkLedgersRootPath, ledgerId, zkAcls);\n                 semaphore.acquire();\n                 ledgerManager.readLedgerMetadata(ledgerId, new GenericCallback<LedgerMetadata>() {\n "},{"sha":"d4d8d1ffaf8084190a5d77e29a149f8a68cd16c7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -37,7 +37,6 @@\n import java.util.Random;\n import java.util.UUID;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n \n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n@@ -58,9 +57,10 @@\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.ZKUtil;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -902,16 +902,16 @@ public static boolean format(ClientConfiguration conf,\n                     conf.getZkLedgersRootPath(), false);\n             boolean availableNodeExists = null != zkc.exists(\n                     conf.getZkAvailableBookiesPath(), false);\n-\n+            List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             // Create ledgers root node if not exists\n             if (!ledgerRootExists) {\n                 zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(UTF_8),\n-                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                        zkAcls, CreateMode.PERSISTENT);\n             }\n             // create available bookies node if not exists\n             if (!availableNodeExists) {\n                 zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(UTF_8),\n-                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                        zkAcls, CreateMode.PERSISTENT);\n             }\n \n             // If old data was there then confirm with admin.\n@@ -977,7 +977,7 @@ public static boolean format(ClientConfiguration conf,\n             String instanceId = UUID.randomUUID().toString();\n             zkc.create(conf.getZkLedgersRootPath() + \"/\"\n                     + BookKeeperConstants.INSTANCEID, instanceId.getBytes(UTF_8),\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                    zkAcls, CreateMode.PERSISTENT);\n \n             LOG.info(\"Successfully formatted BookKeeper metadata\");\n         } finally {"},{"sha":"ae0ac50c8623998c4d7c39ea797d11a4e1db0ee4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWatcher.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -41,15 +41,17 @@\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.cache.Cache;\n import com.google.common.cache.CacheBuilder;\n import com.google.common.cache.RemovalListener;\n import com.google.common.cache.RemovalNotification;\n+\n import java.util.Map;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * This class is responsible for maintaining a consistent view of what bookies\n@@ -336,7 +338,8 @@ public ReadOnlyBookieWatcher(ClientConfiguration conf, BookKeeper bk) throws Kee\n                     + BookKeeperConstants.READONLY;\n             if (null == bk.getZkHandle().exists(readOnlyBookieRegPath, false)) {\n                 try {\n-                    bk.getZkHandle().create(readOnlyBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    List<ACL> zkAcls = ZkUtils.getACLs(conf);\n+                    bk.getZkHandle().create(readOnlyBookieRegPath, new byte[0], zkAcls,\n                             CreateMode.PERSISTENT);\n                 } catch (NodeExistsException e) {\n                     // this node is just now created by someone."},{"sha":"07e5d087cf12fac90a99261326bd831c031ae290","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -73,6 +73,9 @@ public abstract class AbstractConfiguration extends CompositeConfiguration {\n     protected final static String NETTY_MAX_FRAME_SIZE = \"nettyMaxFrameSizeBytes\";\n     protected final static int DEFAULT_NETTY_MAX_FRAME_SIZE = 5 * 1024 * 1024; // 5MB\n \n+    // Zookeeper ACL settings\n+    protected final static String ZK_ENABLE_SECURITY = \"zkEnableSecurity\";\n+\n     protected AbstractConfiguration() {\n         super();\n         if (READ_SYSTEM_PROPERTIES) {\n@@ -187,6 +190,24 @@ public String getZkLedgersRootPath() {\n         return getString(ZK_LEDGERS_ROOT_PATH, \"/ledgers\");\n     }\n \n+    /**\n+     * Are z-node created with strict ACLs\n+     *\n+     * @return usage of secure ZooKeeper ACLs\n+     */\n+    public boolean isZkEnableSecurity() {\n+        return getBoolean(ZK_ENABLE_SECURITY, false);\n+    }\n+\n+    /**\n+     * Set the usage of ACLs of new z-nodes\n+     *\n+     * @param zkEnableSecurity\n+     */\n+    public void setZkEnableSecurity(boolean zkEnableSecurity) {\n+        setProperty(ZK_ENABLE_SECURITY, zkEnableSecurity);\n+    }\n+\n     /**\n      * Get the node under which available bookies are stored\n      *"},{"sha":"6db3375f004b0116c5faa1e001c2d631ad8fcc2a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -57,6 +57,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n@@ -241,7 +242,8 @@ public void processResult(int rc, String path, Object ctx, String name) {\n                 }\n             }\n         };\n-        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(), Ids.OPEN_ACL_UNSAFE,\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(), zkAcls,\n                 CreateMode.PERSISTENT, scb, null);\n     }\n "},{"sha":"7c64fecec49f11639487ec64e21e78cf15030380","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -25,7 +25,9 @@\n import org.apache.zookeeper.ZKUtil;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Flat Ledger Manager Factory\n@@ -65,7 +67,8 @@ public void uninitialize() throws IOException {\n \n     @Override\n     public LedgerIdGenerator newLedgerIdGenerator() {\n-        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), null);\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), null, zkAcls);\n     }\n \n     @Override"},{"sha":"084d73d758573dce5f33eb3194725d9b9adcea2c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -25,7 +25,9 @@\n import org.apache.zookeeper.ZKUtil;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Hierarchical Ledger Manager Factory\n@@ -65,7 +67,8 @@ public void uninitialize() throws IOException {\n \n     @Override\n     public LedgerIdGenerator newLedgerIdGenerator() {\n-        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), HierarchicalLedgerManager.IDGEN_ZNODE);\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), HierarchicalLedgerManager.IDGEN_ZNODE, zkAcls);\n     }\n \n     @Override"},{"sha":"b49817b81765ae8573137ff5452ec9dc1bc3baf8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -19,12 +19,14 @@\n  */\n \n import java.io.IOException;\n+import java.util.List;\n \n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -139,11 +141,11 @@ public int getLayoutFormatVersion() {\n     /**\n      * Store the ledger layout into zookeeper\n      */\n-    public void store(final ZooKeeper zk, String ledgersRoot) \n+    public void store(final ZooKeeper zk, String ledgersRoot, List<ACL> zkAcls)\n             throws IOException, KeeperException, InterruptedException {\n         String ledgersLayout = ledgersRoot + \"/\"\n                 + BookKeeperConstants.LAYOUT_ZNODE;\n-        zk.create(ledgersLayout, serialize(), Ids.OPEN_ACL_UNSAFE,\n+        zk.create(ledgersLayout, serialize(), zkAcls,\n                 CreateMode.PERSISTENT);\n     }\n "},{"sha":"76d157218086443d583a49b7fb24809d9360cd53","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -19,16 +19,19 @@\n  */\n \n import java.io.IOException;\n+import java.util.List;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n \n public abstract class LedgerManagerFactory {\n \n@@ -218,8 +221,9 @@ private static LedgerManagerFactory createNewLMFactory(\n \n         layout = new LedgerLayout(factoryClass.getName(),\n                 lmFactory.getCurrentVersion());\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n         try {\n-            layout.store(zk, ledgerRootPath);\n+            layout.store(zk, ledgerRootPath, zkAcls);\n         } catch (KeeperException.NodeExistsException nee) {\n             LedgerLayout layout2 = LedgerLayout.readLayout(zk, ledgerRootPath);\n             if (!layout2.equals(layout)) {"},{"sha":"890bab7ff44267e7ab08d6917be1d99ef4b182db","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -65,6 +65,9 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.util.List;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * MetaStore Based Ledger Manager Factory\n@@ -179,7 +182,8 @@ public synchronized T getResult() {\n \n     @Override\n     public LedgerIdGenerator newLedgerIdGenerator() {\n-        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), MsLedgerManager.IDGEN_ZNODE);\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), MsLedgerManager.IDGEN_ZNODE, zkAcls);\n     }\n \n     static class MsLedgerManager implements LedgerManager, MetastoreWatcher {"},{"sha":"a2e79af9a7286982f1a39a26d2c1347f50029eca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -18,6 +18,7 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n+import java.util.List;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -29,6 +30,7 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -47,11 +49,14 @@ public class ZkLedgerIdGenerator implements LedgerIdGenerator {\n     final ZooKeeper zk;\n     final String ledgerIdGenPath;\n     final String ledgerPrefix;\n+    final List<ACL> zkAcls;\n \n     public ZkLedgerIdGenerator(ZooKeeper zk,\n                                String ledgersPath,\n-                               String idGenZnodeName) {\n+                               String idGenZnodeName,\n+                               List<ACL> zkAcls) {\n         this.zk = zk;\n+        this.zkAcls = zkAcls;\n         if (StringUtils.isBlank(idGenZnodeName)) {\n             this.ledgerIdGenPath = ledgersPath;\n         } else {\n@@ -62,7 +67,7 @@ public ZkLedgerIdGenerator(ZooKeeper zk,\n \n     @Override\n     public void generateLedgerId(final GenericCallback<Long> cb) {\n-        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, new byte[0], zkAcls,\n                 CreateMode.EPHEMERAL_SEQUENTIAL,\n                 new StringCallback() {\n                     @Override"},{"sha":"8c0d7ed467ddf69ad1516dfc7682284088991be5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -57,6 +57,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n import com.google.protobuf.TextFormat;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * ZooKeeper implementation of underreplication manager.\n@@ -99,11 +100,12 @@ private static class Lock {\n     private final String urLedgerPath;\n     private final String urLockPath;\n     private final String layoutZNode;\n-\n+    private final AbstractConfiguration conf;\n     private final ZooKeeper zkc;\n \n     public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc)\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n+        this.conf = conf;\n         basePath = getBasePath(conf.getZkLedgersRootPath());\n         layoutZNode = basePath + '/' + BookKeeperConstants.LAYOUT_ZNODE;\n         urLedgerPath = basePath\n@@ -137,9 +139,10 @@ public static byte[] getLockData() {\n \n     private void checkLayout()\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n         if (zkc.exists(basePath, false) == null) {\n             try {\n-                zkc.create(basePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                zkc.create(basePath, new byte[0], zkAcls, CreateMode.PERSISTENT);\n             } catch (KeeperException.NodeExistsException nee) {\n                 // do nothing, someone each could have created it\n             }\n@@ -151,7 +154,7 @@ private void checkLayout()\n                 builder.setType(LAYOUT).setVersion(LAYOUT_VERSION);\n                 try {\n                     zkc.create(layoutZNode, TextFormat.printToString(builder.build()).getBytes(UTF_8),\n-                               Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                               zkAcls, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nne) {\n                     // someone else managed to create it\n                     continue;\n@@ -179,14 +182,14 @@ private void checkLayout()\n         }\n         if (zkc.exists(urLedgerPath, false) == null) {\n             try {\n-                zkc.create(urLedgerPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                zkc.create(urLedgerPath, new byte[0], zkAcls, CreateMode.PERSISTENT);\n             } catch (KeeperException.NodeExistsException nee) {\n                 // do nothing, someone each could have created it\n             }\n         }\n         if (zkc.exists(urLockPath, false) == null) {\n             try {\n-                zkc.create(urLockPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                zkc.create(urLockPath, new byte[0], zkAcls, CreateMode.PERSISTENT);\n             } catch (KeeperException.NodeExistsException nee) {\n                 // do nothing, someone each could have created it\n             }\n@@ -239,14 +242,15 @@ public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"markLedgerUnderreplicated(ledgerId={}, missingReplica={})\", ledgerId, missingReplica);\n         try {\n+            List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             String znode = getUrLedgerZnode(ledgerId);\n             while (true) {\n                 UnderreplicatedLedgerFormat.Builder builder = UnderreplicatedLedgerFormat.newBuilder();\n                 try {\n                     builder.addReplica(missingReplica);\n                     ZkUtils.createFullPathOptimistic(zkc, znode, TextFormat\n                             .printToString(builder.build()).getBytes(UTF_8),\n-                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                            zkAcls, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nee) {\n                     Stat s = zkc.exists(znode, false);\n                     if (s == null) {\n@@ -389,7 +393,7 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n             }\n \n             Collections.shuffle(children);\n-\n+            List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             while (children.size() > 0) {\n                 String tryChild = children.get(0);\n                 try {\n@@ -407,7 +411,7 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n                     }\n \n                     long ledgerId = getLedgerId(tryChild);\n-                    zkc.create(lockPath, LOCK_DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+                    zkc.create(lockPath, LOCK_DATA, zkAcls, CreateMode.EPHEMERAL);\n                     heldLocks.put(ledgerId, new Lock(lockPath, stat.getVersion()));\n                     return ledgerId;\n                 } catch (KeeperException.NodeExistsException nee) {\n@@ -542,10 +546,11 @@ public void close() throws ReplicationException.UnavailableException {\n     @Override\n     public void disableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n+        List<ACL> zkAcls = ZkUtils.getACLs(conf);\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n             String znode = basePath + '/' + BookKeeperConstants.DISABLE_NODE;\n-            zkc.create(znode, \"\".getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            zkc.create(znode, \"\".getBytes(UTF_8), zkAcls, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException.NodeExistsException ke) {\n             LOG.warn(\"AutoRecovery is already disabled!\", ke);\n@@ -647,10 +652,11 @@ public static boolean isLedgerBeingReplicated(ZooKeeper zkc, String zkLedgersRoo\n     /**\n      * Acquire the underreplicated ledger lock\n      */\n-    public static void acquireUnderreplicatedLedgerLock(ZooKeeper zkc, String zkLedgersRootPath, long ledgerId)\n+    public static void acquireUnderreplicatedLedgerLock(ZooKeeper zkc, String zkLedgersRootPath,\n+        long ledgerId, List<ACL> zkAcls)\n             throws KeeperException, InterruptedException {\n         ZkUtils.createFullPathOptimistic(zkc, getUrLedgerLockZnode(getUrLockPath(zkLedgersRootPath), ledgerId),\n-                LOCK_DATA, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+                LOCK_DATA, zkAcls, CreateMode.EPHEMERAL);\n     }\n \n     /**"},{"sha":"b396e8909255452e8ded9d78d150dce2329c7714","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -56,6 +56,8 @@\n import org.slf4j.LoggerFactory;\n \n import static org.apache.bookkeeper.replication.ReplicationStats.ELECTION_ATTEMPTS;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.zookeeper.data.ACL;\n \n /**\n  * Performing auditor election using Apache ZooKeeper. Using ZooKeeper as a\n@@ -147,10 +149,11 @@ public Thread newThread(Runnable r) {\n \n     private void createMyVote() throws KeeperException, InterruptedException {\n         if (null == myVote || null == zkc.exists(myVote, false)) {\n+            List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             AuditorVoteFormat.Builder builder = AuditorVoteFormat.newBuilder()\n                 .setBookieId(bookieId);\n             myVote = zkc.create(getVotePath(PATH_SEPARATOR + VOTE_PREFIX),\n-                    TextFormat.printToString(builder.build()).getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE,\n+                    TextFormat.printToString(builder.build()).getBytes(UTF_8), zkAcls,\n                     CreateMode.EPHEMERAL_SEQUENTIAL);\n         }\n     }\n@@ -161,9 +164,10 @@ private String getVotePath(String vote) {\n \n     private void createElectorPath() throws UnavailableException {\n         try {\n+            List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             if (zkc.exists(basePath, false) == null) {\n                 try {\n-                    zkc.create(basePath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    zkc.create(basePath, new byte[0], zkAcls,\n                             CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nee) {\n                     // do nothing, someone else could have created it\n@@ -172,7 +176,7 @@ private void createElectorPath() throws UnavailableException {\n             if (zkc.exists(getVotePath(\"\"), false) == null) {\n                 try {\n                     zkc.create(getVotePath(\"\"), new byte[0],\n-                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                            zkAcls, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nee) {\n                     // do nothing, someone else could have created it\n                 }"},{"sha":"d9a6bcfbb28391d8cce7aed2fdb80b9935e3f6b7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -45,6 +45,7 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n \n import static com.google.common.base.Charsets.UTF_8;\n+import org.apache.zookeeper.data.ACL;\n \n public class LocalBookKeeper {\n     protected static final Logger LOG = LoggerFactory.getLogger(LocalBookKeeper.class);"},{"sha":"24c0a52aac7e8712c971d4bbd5df4858d15ce93a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FZkUtils.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n \n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n@@ -36,6 +37,7 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n@@ -231,4 +233,13 @@ public void processResult(int rc, String path, Object ctx, List<String> nodes) {\n         }, null);\n     }\n \n+    /**\n+     * Compute ZooKeeper ACLs using actual configuration\n+     *\n+     * @param conf Bookie or BookKeeper configuration\n+     */\n+    public static List<ACL> getACLs(AbstractConfiguration conf) {\n+        return conf.isZkEnableSecurity() ? ZooDefs.Ids.CREATOR_ALL_ACL: ZooDefs.Ids.OPEN_ACL_UNSAFE;\n+    }\n+\n }"},{"sha":"277801fdc05b01cd8a68f85d68ae058488dfb7d8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EnableZkSecurityBasicTest.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEnableZkSecurityBasicTest.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2016 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.List;\n+import javax.security.auth.login.Configuration;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n+import org.apache.zookeeper.data.Stat;\n+import org.junit.AfterClass;\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test basic functions using secured ZooKeeper\n+ */\n+public class EnableZkSecurityBasicTest extends BookKeeperClusterTestCase {\n+\n+    public EnableZkSecurityBasicTest() {\n+        super(0);\n+        this.baseClientConf.setZkEnableSecurity(true);\n+        this.baseConf.setZkEnableSecurity(true);\n+    }\n+\n+    @BeforeClass\n+    public static void setupJAAS() throws IOException {\n+        System.setProperty(\"zookeeper.authProvider.1\", \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n+        File tmpJaasDir = new File(\"target\").getAbsoluteFile();\n+        File tmpJaasFile = new File(tmpJaasDir, \"jaas.conf\");\n+        String jassFileContent\n+            = \"Server {\\n\"\n+            + \"       org.apache.zookeeper.server.auth.DigestLoginModule required\\n\"\n+            + \"       user_foo=\\\"bar\\\";\\n\"\n+            + \"};\\n\"\n+            + \"\\n\"\n+            + \"Client {\\n\"\n+            + \"       org.apache.zookeeper.server.auth.DigestLoginModule required\\n\"\n+            + \"       username=\\\"foo\\\"\\n\"\n+            + \"       password=\\\"bar\\\";\\n\"\n+            + \"};\";\n+        Files.write(tmpJaasFile.toPath(), jassFileContent.getBytes(StandardCharsets.UTF_8));\n+        System.setProperty(\"java.security.auth.login.config\", tmpJaasFile.getAbsolutePath());\n+        Configuration.getConfiguration().refresh();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUpJAAS() {\n+        System.clearProperty(\"java.security.auth.login.config\");\n+        Configuration.getConfiguration().refresh();\n+        System.clearProperty(\"zookeeper.authProvider.1\");\n+    }\n+\n+    @Test\n+    public void testCreateLedgerAddEntryOnSecureZooKeepeer() throws Exception {\n+        startNewBookie();\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setZkTimeout(20000);\n+\n+        conf.setZkEnableSecurity(true);\n+\n+        try (BookKeeper bkc = new BookKeeper(conf);) {\n+            try (LedgerHandle lh = bkc.createLedger(1, 1, 1, BookKeeper.DigestType.CRC32, \"testPasswd\".getBytes());) {\n+                lh.addEntry(\"foo\".getBytes(StandardCharsets.UTF_8));\n+            }\n+        }\n+\n+        checkAllAcls();\n+    }\n+\n+    private void checkAllAcls() throws IOException, InterruptedException, KeeperException {\n+        ZooKeeper zk = ZooKeeperClient.newBuilder()\n+            .connectString(zkUtil.getZooKeeperConnectString())\n+            .sessionTimeoutMs(20000)\n+            .build();\n+        checkACls(zk, \"/\");\n+        zk.close();\n+    }\n+\n+    private void checkACls(ZooKeeper zk, String path) throws KeeperException, InterruptedException {\n+        List<String> children = zk.getChildren(path, null);\n+        for (String child : children) {\n+            String fullPath = path.equals(\"/\") ? path + child : path + \"/\" + child;\n+            List<ACL> acls = zk.getACL(fullPath, new Stat());\n+            checkACls(zk, fullPath);\n+\n+            if (!fullPath.startsWith(\"/zookeeper\") // skip zookeeper internal nodes\n+                && !fullPath.equals(\"/ledgers\") // node created by test setup\n+                && !fullPath.equals(\"/ledgers/\" + BookKeeperConstants.AVAILABLE_NODE) // node created by test setup\n+                ) {\n+                assertEquals(1, acls.size());\n+                assertEquals(31, acls.get(0).getPerms());\n+                assertEquals(31, acls.get(0).getPerms());\n+                assertEquals(\"unexpected ACLS on \" + fullPath + \": \" + acls.get(0), \"foo\", acls.get(0).getId().getId());\n+                assertEquals(\"unexpected ACLS on \" + fullPath + \": \" + acls.get(0), \"sasl\", acls.get(0).getId().getScheme());\n+            }\n+        }\n+    }\n+}"},{"sha":"2dae0b0ca71e478b7d3146158e010769947fdfdb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestGcOverreplicatedLedger.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestGcOverreplicatedLedger.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -54,6 +54,7 @@\n import org.junit.runners.Parameterized.Parameters;\n \n import com.google.common.collect.Lists;\n+import org.apache.zookeeper.ZooDefs;\n \n @RunWith(Parameterized.class)\n public class TestGcOverreplicatedLedger extends LedgerManagerTestCase {\n@@ -201,7 +202,7 @@ public void operationComplete(int rc, LedgerMetadata result) {\n         lh.close();\n \n         ZkLedgerUnderreplicationManager.acquireUnderreplicatedLedgerLock(zkc, baseConf.getZkLedgersRootPath(),\n-                lh.getId());\n+                lh.getId(), ZooDefs.Ids.OPEN_ACL_UNSAFE);\n \n         final CompactableLedgerStorage mockLedgerStorage = new MockLedgerStorage();\n         final GarbageCollector garbageCollector = new ScanAndCompareGarbageCollector(ledgerManager, mockLedgerStorage,"},{"sha":"4552e65c6c6a85258cf2465320179bb44333c2e2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayoutTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayoutTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayoutTest.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -29,6 +29,7 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.zookeeper.ZooDefs;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -55,7 +56,7 @@ public void testLedgerLayout() throws Exception {\n         int testVersion = 0xdeadbeef;\n         // use layout defined in configuration also create it in zookeeper\n         LedgerLayout layout2 = new LedgerLayout(testName, testVersion);\n-        layout2.store(zkc, ledgerRootPath);\n+        layout2.store(zkc, ledgerRootPath, ZooDefs.Ids.OPEN_ACL_UNSAFE);\n \n         layout = LedgerLayout.readLayout(zkc, ledgerRootPath);\n         assertEquals(testName, layout.getManagerFactoryClass());\n@@ -73,7 +74,7 @@ private void writeLedgerLayout(\n         f.setAccessible(true);\n         f.set(layout, layoutVersion);\n \n-        layout.store(zkc, ledgersRootPath);\n+        layout.store(zkc, ledgersRootPath, ZooDefs.Ids.OPEN_ACL_UNSAFE);\n     }\n \n     @Test(timeout=60000)"},{"sha":"62ccb016bfbda0ce02d5ff5ccdcd344f6becb6c1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestLedgerManager.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -30,6 +30,7 @@\n import java.util.List;\n import java.util.ArrayList;\n import java.lang.reflect.Field;\n+import org.apache.zookeeper.ZooDefs;\n \n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -54,7 +55,7 @@ private void writeLedgerLayout(String ledgersRootPath,\n         f.setAccessible(true);\n         f.set(layout, layoutVersion);\n \n-        layout.store(zkc, ledgersRootPath);\n+        layout.store(zkc, ledgersRootPath, ZooDefs.Ids.OPEN_ACL_UNSAFE);\n     }\n \n     /**\n@@ -159,7 +160,7 @@ public void testBadZkContents() throws Exception {\n         conf.setZkLedgersRootPath(root0);\n \n         new LedgerLayout(\"DoesNotExist\",\n-                         0xdeadbeef).store(zkc, root0);\n+                         0xdeadbeef).store(zkc, root0, ZooDefs.Ids.OPEN_ACL_UNSAFE);\n \n         try {\n             LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);\n@@ -177,7 +178,7 @@ public void testBadZkContents() throws Exception {\n         conf.setZkLedgersRootPath(root1);\n \n         new LedgerLayout(FlatLedgerManagerFactory.class.getName(),\n-                         0xdeadbeef).store(zkc, root1);\n+                         0xdeadbeef).store(zkc, root1, ZooDefs.Ids.OPEN_ACL_UNSAFE);\n \n         try {\n             LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);"},{"sha":"f9cad2e0366329ca97769bb5e85ab8033a406acd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b30b527ba995978694ebf735c02b508374001021/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java?ref=b30b527ba995978694ebf735c02b508374001021","patch":"@@ -29,6 +29,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n import org.junit.Before;\n@@ -55,7 +56,7 @@ public void setUp() throws Exception {\n         zk = zkutil.getZooKeeperClient();\n \n         ledgerIdGenerator = new ZkLedgerIdGenerator(zk,\n-                \"/test-zk-ledger-id-generator\", \"idgen\");\n+                \"/test-zk-ledger-id-generator\", \"idgen\", ZooDefs.Ids.OPEN_ACL_UNSAFE);\n     }\n \n     @Override"}]}