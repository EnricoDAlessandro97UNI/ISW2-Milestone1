{"sha":"48ab23ef3e16f8edfda2a977f9c0fc99c441db40","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjQ4YWIyM2VmM2UxNmY4ZWRmZGEyYTk3N2Y5YzBmYzk5YzQ0MWRiNDA=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-10-06T08:48:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-10-06T08:48:46Z"},"message":"BOOKKEEPER-868: Add ADD_ENTRY quorum timeout (Leigh Stewart via sijie)","tree":{"sha":"720cd24e9e8c8d960ea1d65170bb592b69b83b98","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/720cd24e9e8c8d960ea1d65170bb592b69b83b98"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/48ab23ef3e16f8edfda2a977f9c0fc99c441db40","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/48ab23ef3e16f8edfda2a977f9c0fc99c441db40","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/48ab23ef3e16f8edfda2a977f9c0fc99c441db40","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2"}],"stats":{"total":240,"additions":233,"deletions":7},"files":[{"sha":"d626197290c4713a3e25878d0d4c950a144fd084","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -104,6 +104,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-438: Move ledger id generation out of LedgerManager (Tong Yu via sijie)\n \n+        BOOKKEEPER-868: Add ADD_ENTRY quorum timeout (Leigh Stewart via sijie)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-695: Some entry logs are not removed from the bookie storage (Matteo Merli via sijie)"},{"sha":"39910851ae941e40e81c6d00e5d9439cee052e1d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -94,6 +94,8 @@ public static BKException create(int code) {\n             return new BKClientClosedException();\n         case Code.IllegalOpException:\n             return new BKIllegalOpException();\n+        case Code.AddEntryQuorumTimeoutException:\n+            return new BKAddEntryQuorumTimeoutException();\n         default:\n             return new BKUnexpectedConditionException();\n         }\n@@ -125,6 +127,7 @@ public interface Code {\n         int MetaStoreException = -18;\n         int ClientClosedException = -19;\n         int LedgerExistException = -20;\n+        int AddEntryQuorumTimeoutException = -21;\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n@@ -203,6 +206,8 @@ public static String getMessage(int code) {\n             return \"BookKeeper client is closed\";\n         case Code.IllegalOpException:\n             return \"Invalid operation\";\n+        case Code.AddEntryQuorumTimeoutException:\n+            return \"Add entry quorum wait timed out\";\n         default:\n             return \"Unexpected condition\";\n         }\n@@ -250,6 +255,12 @@ public BKIllegalOpException() {\n         }\n     }\n \n+    public static class BKAddEntryQuorumTimeoutException extends BKException {\n+        public BKAddEntryQuorumTimeoutException() {\n+            super(Code.AddEntryQuorumTimeoutException);\n+        }\n+    }\n+\n     public static class BKUnexpectedConditionException extends BKException {\n         public BKUnexpectedConditionException() {\n             super(Code.UnexpectedConditionException);"},{"sha":"4034c35f16b855ea008bf8b65180b4b7829302a2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":45,"deletions":6,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -27,9 +27,14 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.SafeRunnable;\n import org.jboss.netty.buffer.ChannelBuffer;\n+import org.jboss.netty.util.Timeout;\n+import org.jboss.netty.util.TimerTask;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * This represents a pending add operation. When it has got success from all\n@@ -40,7 +45,7 @@\n  *\n  *\n  */\n-class PendingAddOp implements WriteCallback {\n+class PendingAddOp implements WriteCallback, TimerTask {\n     private final static Logger LOG = LoggerFactory.getLogger(PendingAddOp.class);\n \n     ChannelBuffer toSend;\n@@ -56,17 +61,20 @@ class PendingAddOp implements WriteCallback {\n     LedgerHandle lh;\n     boolean isRecoveryAdd = false;\n     long requestTimeNanos;\n+\n+    final int timeoutSec;\n+    Timeout timeout = null;\n+\n     OpStatsLogger addOpLogger;\n \n     PendingAddOp(LedgerHandle lh, AddCallback cb, Object ctx) {\n         this.lh = lh;\n         this.cb = cb;\n         this.ctx = ctx;\n         this.entryId = LedgerHandle.INVALID_ENTRY_ID;\n-\n-        ackSet = lh.distributionSchedule.getAckSet();\n-\n-        addOpLogger = lh.bk.getAddOpLogger();\n+        this.ackSet = lh.distributionSchedule.getAckSet();\n+        this.addOpLogger = lh.bk.getAddOpLogger();\n+        this.timeoutSec = lh.bk.getConf().getAddEntryQuorumTimeout();\n     }\n \n     /**\n@@ -90,6 +98,31 @@ void sendWriteRequest(int bookieIndex) {\n                 this, bookieIndex, flags);\n     }\n \n+    @Override\n+    public void run(Timeout timeout) {\n+        timeoutQuorumWait();\n+    }\n+\n+    void timeoutQuorumWait() {\n+        try {\n+            lh.bk.mainWorkerPool.submitOrdered(lh.ledgerId, new SafeRunnable() {\n+                @Override\n+                public void safeRun() {\n+                    if (completed) {\n+                        return;\n+                    }\n+                    lh.handleUnrecoverableErrorDuringAdd(BKException.Code.AddEntryQuorumTimeoutException);\n+                }\n+                @Override\n+                public String toString() {\n+                    return String.format(\"AddEntryQuorumTimeout(lid=%d, eid=%d)\", lh.ledgerId, entryId);\n+                }\n+            });\n+        } catch (RejectedExecutionException e) {\n+            LOG.warn(\"Timeout add entry quorum wait failed {} entry: {}\", lh.ledgerId, entryId);\n+        }\n+    }\n+\n     void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         if (toSend == null) {\n             // this addOp hasn't yet had its mac computed. When the mac is\n@@ -131,7 +164,10 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n     }\n \n     void initiate(ChannelBuffer toSend, int entryLength) {\n-        requestTimeNanos = MathUtils.nowInNano();\n+        if (timeoutSec > -1) {\n+            this.timeout = lh.bk.bookieClient.scheduleTimeout(this, timeoutSec, TimeUnit.SECONDS);\n+        }\n+        this.requestTimeNanos = MathUtils.nowInNano();\n         this.toSend = toSend;\n         this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n@@ -190,6 +226,9 @@ public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddre\n     }\n \n     void submitCallback(final int rc) {\n+        if (null != timeout) {\n+            timeout.cancel();\n+        }\n         long latencyNanos = MathUtils.elapsedNanos(requestTimeNanos);\n         if (rc != BKException.Code.OK) {\n             addOpLogger.registerFailedEvent(latencyNanos, TimeUnit.NANOSECONDS);"},{"sha":"fdbfd53ffeb2599830d93d234e2a8716a8310e47","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -59,6 +59,7 @@ public class ClientConfiguration extends AbstractConfiguration {\n     protected final static String SPECULATIVE_READ_TIMEOUT = \"speculativeReadTimeout\";\n     // Timeout Setting\n     protected final static String ADD_ENTRY_TIMEOUT_SEC = \"addEntryTimeoutSec\";\n+    protected final static String ADD_ENTRY_QUORUM_TIMEOUT_SEC = \"addEntryQuorumTimeoutSec\";\n     protected final static String READ_ENTRY_TIMEOUT_SEC = \"readEntryTimeoutSec\";\n     protected final static String TIMEOUT_TASK_INTERVAL_MILLIS = \"timeoutTaskIntervalMillis\";\n     protected final static String PCBC_TIMEOUT_TIMER_TICK_DURATION_MS = \"pcbcTimeoutTimerTickDurationMs\";\n@@ -433,6 +434,29 @@ public ClientConfiguration setAddEntryTimeout(int timeout) {\n         return this;\n     }\n \n+    /**\n+     * Get the timeout for top-level add request. That is, the amount of time we should spend\n+     * waiting for ack quorum.\n+     *\n+     * @return add entry ack quorum timeout.\n+     */\n+    public int getAddEntryQuorumTimeout() {\n+        return getInt(ADD_ENTRY_QUORUM_TIMEOUT_SEC, -1);\n+    }\n+\n+    /**\n+     * Set timeout for top-level add entry request.\n+     * @see #getAddEntryQuorumTimeout()\n+     *\n+     * @param timeout\n+     *          The new add entry ack quorum timeout in seconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setAddEntryQuorumTimeout(int timeout) {\n+        setProperty(ADD_ENTRY_QUORUM_TIMEOUT_SEC, timeout);\n+        return this;\n+    }\n+\n     /**\n      * Get the timeout for read entry. This is the number of seconds we wait without hearing\n      * a response for read entry request from a bookie before we consider it failed. By default,"},{"sha":"909cdd0aafa5f05a31c385d6d3c01b060773e59f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -47,6 +47,8 @@\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import org.jboss.netty.util.HashedWheelTimer;\n+import org.jboss.netty.util.Timeout;\n+import org.jboss.netty.util.TimerTask;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -248,6 +250,10 @@ public boolean isClosed() {\n         return closed;\n     }\n \n+    public Timeout scheduleTimeout(TimerTask task, long timeoutSec, TimeUnit timeUnit) {\n+        return requestTimer.newTimeout(task, timeoutSec, timeUnit);\n+    }\n+\n     public void close() {\n         closeLock.writeLock().lock();\n         try {"},{"sha":"da62fe07868ea3db3cc1cb66bf52217758f4d7cb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestAddEntryQuorumTimeout.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestAddEntryQuorumTimeout.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -0,0 +1,144 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class TestAddEntryQuorumTimeout extends BookKeeperClusterTestCase implements AddCallback {\n+\n+    final static Logger logger = LoggerFactory.getLogger(TestAddEntryQuorumTimeout.class);\n+\n+    final DigestType digestType;\n+    final byte[] testPasswd = \"\".getBytes();\n+\n+    public TestAddEntryQuorumTimeout() {\n+        super(3);\n+        baseClientConf.setAddEntryTimeout(10);\n+        baseClientConf.setAddEntryQuorumTimeout(1);\n+        this.digestType = DigestType.CRC32;\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        baseConf.setZkServers(zkUtil.getZooKeeperConnectString());\n+    }\n+\n+    private static class SyncObj {\n+        volatile int counter = 0;\n+        volatile int rc = -1;\n+        public SyncObj() {\n+            counter = 0;\n+        }\n+    }\n+\n+    @Override\n+    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+        SyncObj x = (SyncObj) ctx;\n+        synchronized (x) {\n+            x.rc = rc;\n+            x.counter++;\n+            x.notify();\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testBasicTimeout() throws Exception {\n+        BookKeeperTestClient bkc = new BookKeeperTestClient(baseClientConf);\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, testPasswd);\n+        List<BookieSocketAddress> curEns = lh.getLedgerMetadata().currentEnsemble;\n+        byte[] data = \"foobar\".getBytes();\n+        lh.addEntry(data);\n+        sleepBookie(curEns.get(0), 5).await();\n+        try {\n+            lh.addEntry(data);\n+            Assert.fail(\"should have thrown\");\n+        } catch (BKException.BKAddEntryQuorumTimeoutException ex) {\n+        }\n+    }\n+\n+    private void waitForSyncObj(SyncObj syncObj) throws Exception {\n+        synchronized (syncObj) {\n+            while (syncObj.counter < 1) {\n+                logger.debug(\"Entries counter = \" + syncObj.counter);\n+                syncObj.wait();\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testTimeoutWithPendingOps() throws Exception {\n+        BookKeeperTestClient bkc = new BookKeeperTestClient(baseClientConf);\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, testPasswd);\n+        List<BookieSocketAddress> curEns = lh.getLedgerMetadata().currentEnsemble;\n+        byte[] data = \"foobar\".getBytes();\n+\n+        SyncObj syncObj1 = new SyncObj();\n+        SyncObj syncObj2 = new SyncObj();\n+        SyncObj syncObj3 = new SyncObj();\n+\n+        lh.addEntry(data);\n+        sleepBookie(curEns.get(0), 5).await();\n+        lh.asyncAddEntry(data, this, syncObj1);\n+        lh.asyncAddEntry(data, this, syncObj2);\n+        lh.asyncAddEntry(data, this, syncObj3);\n+\n+        waitForSyncObj(syncObj1);\n+        Assert.assertEquals(BKException.Code.AddEntryQuorumTimeoutException, syncObj1.rc);\n+        waitForSyncObj(syncObj2);\n+        Assert.assertEquals(BKException.Code.AddEntryQuorumTimeoutException, syncObj2.rc);\n+        waitForSyncObj(syncObj3);\n+        Assert.assertEquals(BKException.Code.AddEntryQuorumTimeoutException, syncObj3.rc);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerClosedAfterTimeout() throws Exception {\n+        BookKeeperTestClient bkc = new BookKeeperTestClient(baseClientConf);\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, testPasswd);\n+        List<BookieSocketAddress> curEns = lh.getLedgerMetadata().currentEnsemble;\n+        byte[] data = \"foobar\".getBytes();\n+        CountDownLatch b0latch = sleepBookie(curEns.get(0), 5);\n+        try {\n+            lh.addEntry(data);\n+            Assert.fail(\"should have thrown\");\n+        } catch (BKException.BKAddEntryQuorumTimeoutException ex) {\n+        }\n+        b0latch.await();\n+        try {\n+            lh.addEntry(data);\n+            Assert.fail(\"should have thrown\");\n+        } catch (BKException.BKLedgerClosedException ex) {\n+        }\n+    }\n+}"},{"sha":"fce689da7ee4502b9193e78345e2d9dde3ad0906","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/48ab23ef3e16f8edfda2a977f9c0fc99c441db40/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java?ref=48ab23ef3e16f8edfda2a977f9c0fc99c441db40","patch":"@@ -275,7 +275,7 @@ public ServerConfiguration killBookie(int index) throws Exception {\n      *          Socket Address\n      * @param seconds\n      *          Sleep seconds\n-     * @return Count Down latch which will be counted down when sleep finishes\n+     * @return Count Down latch which will be counted down just after sleep begins\n      * @throws InterruptedException\n      * @throws IOException\n      */"}]}