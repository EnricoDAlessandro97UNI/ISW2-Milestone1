{"sha":"49b90a66f830482fc970ba625057c7101c201f62","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjQ5YjkwYTY2ZjgzMDQ4MmZjOTcwYmE2MjUwNTdjNzEwMWMyMDFmNjI=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-08-07T18:46:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-08-07T18:46:19Z"},"message":"ISSUE #349: Documentation for security feature in 4.5.0\n\nDescriptions of the changes in this PR:\n\n- add a section for `security`\n- overview to introduce security feature\n- encryption and authentication using tls\n- sasl authentication\n- zookeeper authentication\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Luc Perkins <lucperkins@gmail.com>, Matteo Merli <mmerli@apache.org>\n\nThis closes #350 from sijie/security_docs, closes #349","tree":{"sha":"ea9eda000a21d3d24d0626a5a0fc3850ff3a660c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/ea9eda000a21d3d24d0626a5a0fc3850ff3a660c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/49b90a66f830482fc970ba625057c7101c201f62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/49b90a66f830482fc970ba625057c7101c201f62","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/49b90a66f830482fc970ba625057c7101c201f62","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/49b90a66f830482fc970ba625057c7101c201f62/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f90fa787522d59114caa3fe8b70345effb627f8e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/f90fa787522d59114caa3fe8b70345effb627f8e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/f90fa787522d59114caa3fe8b70345effb627f8e"}],"stats":{"total":486,"additions":485,"deletions":1},"files":[{"sha":"ce8b1bf8bd131727645c27e3297846f2dd47e519","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -155,7 +155,6 @@ public class ServerConfiguration extends AbstractConfiguration {\n \n     protected final static String ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION = \"allowMultipleDirsUnderSameDiskPartition\";\n \n-    protected final static String TLS_CLIENT_AUTHENTICATION = \"tlsClientAuthentication\";\n     protected final static String TLS_KEYSTORE_TYPE = \"tlsKeyStoreType\";\n     protected final static String TLS_KEYSTORE = \"tlsKeyStore\";\n     protected final static String TLS_KEYSTORE_PASSWORD_PATH = \"tlsKeyStorePasswordPath\";"},{"sha":"1211a486de5ae51568e47feb1ccd775f6014dde7","filename":"site/_data/sidebar.yaml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/site%2F_data%2Fsidebar.yaml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/site%2F_data%2Fsidebar.yaml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2F_data%2Fsidebar.yaml?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -52,6 +52,17 @@ groups:\n     endpoint: protocol\n   #- name: Codebase\n   #  endpoint: codebase\n+- name: Security\n+  dir: security\n+  docs:\n+  - name: Overview\n+    endpoint: index\n+  - name: TLS Authentication\n+    endpoint: tls\n+  - name: SASL Authentication\n+    endpoint: sasl\n+  - name: ZooKeeper Authentication\n+    endpoint: zookeeper\n - name: Reference\n   dir: reference\n   docs:"},{"sha":"059a3097e8e8dfef6a5ccd2c6a1a514ec6ae63e3","filename":"site/docs/security/index.md","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Findex.md","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Findex.md","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocs%2Fsecurity%2Findex.md?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -0,0 +1,21 @@\n+---\n+title: BookKeeper Security\n+next: ./tls.html\n+---\n+\n+In the 4.5.0 release, the BookKeeper community added a number of features that can be used, together or separately, to secure a BookKeeper cluster.\n+The following security measures are currently supported:\n+\n+1. Authentication of connections to bookies from clients, using either [TLS](./tls) or [SASL (Kerberos)](./sasl).\n+2. Authentication of connections from clients, bookies, autorecovery daemons to [ZooKeeper](./zookeeper), when using zookeeper based ledger managers.\n+3. Encryption of data transferred between bookies and clients, between bookies and autorecovery daemons using [TLS](./tls).\n+\n+Itâ€™s worth noting that security is optional - non-secured clusters are supported, as well as a mix of authenticated, unauthenticated, encrypted and non-encrypted clients.\n+\n+NOTE: currently `authorization` is not yet available in `4.5.0`. The Apache BookKeeper community is looking for adding this feature in subsequent releases.\n+\n+## Next Steps\n+\n+- [Encryption and Authentication using TLS](./tls)\n+- [Authentication using SASL](./sasl)\n+- [ZooKeeper Authentication](./zookeeper)"},{"sha":"ffb972a893611f3c86803805063fa042ef3d362c","filename":"site/docs/security/sasl.md","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Fsasl.md","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Fsasl.md","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocs%2Fsecurity%2Fsasl.md?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -0,0 +1,202 @@\n+---\n+title: Authentication using SASL\n+prev: ../tls\n+next: ../zookeeper\n+---\n+\n+Bookies support client authentication via SASL. Currently we only support GSSAPI (Kerberos). We will start\n+with a general description of how to configure `SASL` for bookies, clients and autorecovery daemons, followed\n+by mechanism-specific details and wrap up with some operational details.\n+\n+## SASL configuration for Bookies\n+\n+1. Select the mechanisms to enable in the bookies. `GSSAPI` is the only mechanism currently supported by BookKeeper.\n+2. Add a `JAAS` config file for the selected mechanisms as described in the examples for setting up [GSSAPI (Kerberos)](#kerberos).\n+3. Pass the `JAAS` config file location as JVM parameter to each Bookie. For example:\n+\n+    ```shell\n+    -Djava.security.auth.login.config=/etc/bookkeeper/bookie_jaas.conf \n+    ```\n+\n+4. Enable SASL auth plugin in bookies, by setting `bookieAuthProviderFactoryClass` to `org.apache.bookkeeper.sasl.SASLBookieAuthProviderFactory`.\n+\n+\n+    ```shell\n+    bookieAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLBookieAuthProviderFactory\n+    ```\n+\n+5. If you are running `autorecovery` along with bookies, then you want to enable SASL auth plugin for `autorecovery`, by setting\n+    `clientAuthProviderFactoryClass` to `org.apache.bookkeeper.sasl.SASLClientProviderFactory`.\n+\n+    ```shell\n+    clientAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLClientProviderFactory\n+    ```\n+\n+6. Follow the steps in [GSSAPI (Kerberos)](#kerberos) to configure SASL.\n+\n+#### <a name=\"notes\"></a> Important Notes\n+\n+1. `Bookie` is a section name in the JAAS file used by each bookie. This section tells the bookie which principal to use\n+    and the location of the keytab where the principal is stored. It allows the bookie to login using the keytab specified in this section.\n+2. `Auditor` is a section name in the JASS file used by `autorecovery` daemon (it can be co-run with bookies). This section tells the\n+    `autorecovery` daemon which principal to use and the location of the keytab where the principal is stored. It allows the bookie to\n+    login using the keytab specified in this section.\n+3. The `Client` section is used to authenticate a SASL connection with ZooKeeper. It also allows the bookies to set ACLs on ZooKeeper nodes\n+    which locks these nodes down so that only the bookies can modify it. It is necessary to have the same primary name across all bookies.\n+    If you want to use a section name other than `Client`, set the system property `zookeeper.sasl.client` to the appropriate name\n+    (e.g `-Dzookeeper.sasl.client=ZKClient`).\n+4. ZooKeeper uses `zookeeper` as the service name by default. If you want to change this, set the system property\n+    `zookeeper.sasl.client.username` to the appropriate name (e.g. `-Dzookeeper.sasl.client.username=zk`).\n+\n+## SASL configuration for Clients\n+\n+To configure `SASL` authentication on the clients:\n+\n+1. Select a `SASL` mechanism for authentication and add a `JAAS` config file for the selected mechanism as described in the examples for\n+    setting up [GSSAPI (Kerberos)](#kerberos).\n+2. Pass the `JAAS` config file location as JVM parameter to each client JVM. For example:\n+\n+    ```shell\n+    -Djava.security.auth.login.config=/etc/bookkeeper/bookkeeper_jaas.conf \n+    ```\n+\n+3. Configure the following properties in bookkeeper `ClientConfiguration`:\n+\n+    ```shell\n+    clientAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLClientProviderFactory\n+    ```\n+\n+Follow the steps in [GSSAPI (Kerberos)](#kerberos) to configure SASL for the selected mechanism.\n+\n+## <a name=\"kerberos\"></a> Authentication using SASL/Kerberos\n+\n+### Prerequisites\n+\n+#### Kerberos\n+\n+If your organization is already using a Kerberos server (for example, by using `Active Directory`), there is no need to\n+install a new server just for BookKeeper. Otherwise you will need to install one, your Linux vendor likely has packages\n+for `Kerberos` and a short guide on how to install and configure it ([Ubuntu](https://help.ubuntu.com/community/Kerberos),\n+[Redhat](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Managing_Smart_Cards/installing-kerberos.html)).\n+Note that if you are using Oracle Java, you will need to download JCE policy files for your Java version and copy them to `$JAVA_HOME/jre/lib/security`.\n+\n+#### Kerberos Principals\n+\n+If you are using the organizationâ€™s Kerberos or Active Directory server, ask your Kerberos administrator for a principal\n+for each Bookie in your cluster and for every operating system user that will access BookKeeper with Kerberos authentication\n+(via clients and tools).\n+\n+If you have installed your own Kerberos, you will need to create these principals yourself using the following commands:\n+\n+```shell\n+sudo /usr/sbin/kadmin.local -q 'addprinc -randkey bookkeeper/{hostname}@{REALM}'\n+sudo /usr/sbin/kadmin.local -q \"ktadd -k /etc/security/keytabs/{keytabname}.keytab bookkeeper/{hostname}@{REALM}\"\n+```\n+\n+##### All hosts must be reachable using hostnames\n+\n+It is a *Kerberos* requirement that all your hosts can be resolved with their FQDNs.\n+\n+### Configuring Bookies\n+\n+1. Add a suitably modified JAAS file similar to the one below to each Bookieâ€™s config directory, letâ€™s call it `bookie_jaas.conf`\n+for this example (note that each bookie should have its own keytab):\n+\n+    ```\n+    Bookie {\n+        com.sun.security.auth.module.Krb5LoginModule required\n+        useKeyTab=true\n+        storeKey=true\n+        keyTab=\"/etc/security/keytabs/bookie.keytab\"\n+        principal=\"bookkeeper/bk1.hostname.com@EXAMPLE.COM\";\n+    };\n+    // ZooKeeper client authentication\n+    Client {\n+        com.sun.security.auth.module.Krb5LoginModule required\n+        useKeyTab=true\n+        storeKey=true\n+        keyTab=\"/etc/security/keytabs/bookie.keytab\"\n+        principal=\"bookkeeper/bk1.hostname.com@EXAMPLE.COM\";\n+    };\n+    // If you are running `autorecovery` along with bookies\n+    Auditor {\n+        com.sun.security.auth.module.Krb5LoginModule required\n+        useKeyTab=true\n+        storeKey=true\n+        keyTab=\"/etc/security/keytabs/bookie.keytab\"\n+        principal=\"bookkeeper/bk1.hostname.com@EXAMPLE.COM\";\n+    };\n+    ```\n+\n+    The `Bookie` section in the JAAS file tells the bookie which principal to use and the location of the keytab where this principal is stored.\n+    It allows the bookie to login using the keytab specified in this section. See [notes](#notes) for more details on Zookeeperâ€™s SASL configuration.\n+\n+2. Pass the name of the JAAS file as a JVM parameter to each Bookie:\n+\n+    ```shell\n+    -Djava.security.auth.login.config=/etc/bookkeeper/bookie_jaas.conf\n+    ```\n+\n+    You may also wish to specify the path to the `krb5.conf` file\n+    (see [JDKâ€™s Kerberos Requirements](https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html) for more details):\n+\n+    ```shell\n+    -Djava.security.krb5.conf=/etc/bookkeeper/krb5.conf\n+    ```\n+\n+3. Make sure the keytabs configured in the JAAS file are readable by the operating system user who is starting the Bookies.\n+\n+4. Enable SASL authentication plugin in the bookies by setting following parameters.\n+\n+    ```shell\n+    bookieAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLBookieAuthProviderFactory\n+    # if you run `autorecovery` along with bookies\n+    clientAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLClientProviderFactory\n+    ```\n+\n+### Configuring Clients\n+\n+To configure SASL authentication on the clients:\n+\n+1. Clients will authenticate to the cluster with their own principal (usually with the same name as the user running the client),\n+    so obtain or create these principals as needed. Then create a `JAAS` file for each principal. The `BookKeeper` section describes\n+    how the clients like writers and readers can connect to the Bookies. The following is an example configuration for a client using\n+    a keytab (recommended for long-running processes):\n+\n+    ```\n+    BookKeeper {\n+        com.sun.security.auth.module.Krb5LoginModule required\n+        useKeyTab=true\n+        storeKey=true\n+        keyTab=\"/etc/security/keytabs/bookkeeper.keytab\"\n+        principal=\"bookkeeper-client-1@EXAMPLE.COM\";\n+    };\n+    ```\n+\n+\n+2. Pass the name of the JAAS file as a JVM parameter to the client JVM:\n+\n+    ```shell\n+    -Djava.security.auth.login.config=/etc/bookkeeper/bookkeeper_jaas.conf\n+    ```\n+\n+    You may also wish to specify the path to the `krb5.conf` file (see\n+    [JDKâ€™s Kerberos Requirements](https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html) for more details).\n+\n+    ```shell\n+    -Djava.security.krb5.conf=/etc/bookkeeper/krb5.conf\n+    ```\n+\n+\n+3. Make sure the keytabs configured in the `bookkeeper_jaas.conf` are readable by the operating system user who is starting bookkeeper client.\n+\n+4. Enable SASL authentication plugin in the client by setting following parameters.\n+\n+    ```shell\n+    clientAuthProviderFactoryClass=org.apache.bookkeeper.sasl.SASLClientProviderFactory\n+    ```\n+\n+## Enabling Logging for SASL\n+\n+To enable SASL debug output, you can set `sun.security.krb5.debug` system property to `true`.\n+"},{"sha":"ff5ac2cadda29dc1cf558caab7b335705fb68fd7","filename":"site/docs/security/tls.md","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Ftls.md","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Ftls.md","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocs%2Fsecurity%2Ftls.md?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -0,0 +1,210 @@\n+---\n+title: Encryption and Authentication using TLS\n+prev: ../index.html\n+next: ../sasl\n+---\n+\n+Apache BookKeeper allows clients and autorecovery daemons to communicate over TLS, although this is not enabled by default.\n+\n+## Overview\n+\n+The bookies need their own key and certificate in order to use TLS. Clients can optionally provide a key and a certificate\n+for mutual authentication.  Each bookie or client can also be configured with a truststore, which is used to\n+determine which certificates (bookie or client identities) to trust (authenticate).\n+\n+The truststore can be configured in many ways. To understand the truststore, consider the following two examples:\n+\n+1. the truststore contains one or many certificates;\n+2. it contains a certificate authority (CA).\n+\n+In (1), with a list of certificates, the bookie or client will trust any certificate listed in the truststore.\n+In (2), with a CA, the bookie or client will trust any certificate that was signed by the CA in the truststore.\n+\n+(TBD: benefits)\n+\n+## <a name=\"bookie-keystore\"></a> Generate TLS key and certificate\n+\n+The first step of deploying TLS is to generate the key and the certificate for each machine in the cluster.\n+You can use Javaâ€™s `keytool` utility to accomplish this task. We will generate the key into a temporary keystore\n+initially so that we can export and sign it later with CA.\n+\n+```shell\n+keytool -keystore bookie.keystore.jks -alias localhost -validity {validity} -genkey\n+```\n+\n+You need to specify two parameters in the above command:\n+\n+1. `keystore`: the keystore file that stores the certificate. The *keystore* file contains the private key of\n+    the certificate; hence, it needs to be kept safely.\n+2. `validity`: the valid time of the certificate in days.\n+\n+<div class=\"alert alert-success\">\n+Ensure that common name (CN) matches exactly with the fully qualified domain name (FQDN) of the server.\n+The client compares the CN with the DNS domain name to ensure that it is indeed connecting to the desired server, not a malicious one.\n+</div>\n+\n+## Creating your own CA\n+\n+After the first step, each machine in the cluster has a public-private key pair, and a certificate to identify the machine.\n+The certificate, however, is unsigned, which means that an attacker can create such a certificate to pretend to be any machine.\n+\n+Therefore, it is important to prevent forged certificates by signing them for each machine in the cluster.\n+A `certificate authority (CA)` is responsible for signing certificates. CA works likes a government that issues passports â€”\n+the government stamps (signs) each passport so that the passport becomes difficult to forge. Other governments verify the stamps\n+to ensure the passport is authentic. Similarly, the CA signs the certificates, and the cryptography guarantees that a signed\n+certificate is computationally difficult to forge. Thus, as long as the CA is a genuine and trusted authority, the clients have\n+high assurance that they are connecting to the authentic machines.\n+\n+```shell\n+openssl req -new -x509 -keyout ca-key -out ca-cert -days 365\n+```\n+\n+The generated CA is simply a *public-private* key pair and certificate, and it is intended to sign other certificates.\n+\n+The next step is to add the generated CA to the clients' truststore so that the clients can trust this CA:\n+\n+```shell\n+keytool -keystore bookie.truststore.jks -alias CARoot -import -file ca-cert\n+```\n+\n+NOTE: If you configure the bookies to require client authentication by setting `sslClientAuthentication` to `true` on the\n+[bookie config](../../reference/config), then you must also provide a truststore for the bookies and it should have all the CA\n+certificates that clients keys were signed by.\n+\n+```shell\n+keytool -keystore client.truststore.jks -alias CARoot -import -file ca-cert\n+```\n+\n+In contrast to the keystore, which stores each machineâ€™s own identity, the truststore of a client stores all the certificates\n+that the client should trust. Importing a certificate into oneâ€™s truststore also means trusting all certificates that are signed\n+by that certificate. As the analogy above, trusting the government (CA) also means trusting all passports (certificates) that\n+it has issued. This attribute is called the chain of trust, and it is particularly useful when deploying TLS on a large BookKeeper cluster.\n+You can sign all certificates in the cluster with a single CA, and have all machines share the same truststore that trusts the CA.\n+That way all machines can authenticate all other machines.\n+\n+## Signing the certificate\n+\n+The next step is to sign all certificates in the keystore with the CA we generated. First, you need to export the certificate from the keystore:\n+\n+```shell\n+keytool -keystore bookie.keystore.jks -alias localhost -certreq -file cert-file\n+```\n+\n+Then sign it with the CA:\n+\n+```shell\n+openssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}\n+```\n+\n+Finally, you need to import both the certificate of the CA and the signed certificate into the keystore:\n+\n+```shell\n+keytool -keystore bookie.keystore.jks -alias CARoot -import -file ca-cert\n+keytool -keystore bookie.keystore.jks -alias localhost -import -file cert-signed\n+```\n+\n+The definitions of the parameters are the following:\n+\n+1. `keystore`: the location of the keystore\n+2. `ca-cert`: the certificate of the CA\n+3. `ca-key`: the private key of the CA\n+4. `ca-password`: the passphrase of the CA\n+5. `cert-file`: the exported, unsigned certificate of the bookie\n+6. `cert-signed`: the signed certificate of the bookie\n+\n+(TBD: add a script to automatically generate truststores and keystores.)\n+\n+## Configuring Bookies\n+\n+Bookies support TLS for connections on the same service port. In order to enable TLS, you need to configure `tlsProvider` to be either\n+`JDK` or `OpenSSL`. If `OpenSSL` is configured, it will use `netty-tcnative-boringssl-static`, which loads a corresponding binding according\n+to the platforms to run bookies.\n+\n+> Current `OpenSSL` implementation doesn't depend on the system installed OpenSSL library. If you want to leverage the OpenSSL installed on\n+the system, you can check [this example](http://netty.io/wiki/forked-tomcat-native.html) on how to replaces the JARs on the classpath with\n+netty bindings to leverage installed OpenSSL.\n+\n+The following TLS configs are needed on the bookie side:\n+\n+```shell\n+tlsProvider=OpenSSL\n+# key store\n+tlsKeyStoreType=JKS\n+tlsKeyStore=/var/private/tls/bookie.keystore.jks\n+tlsKeyStorePasswordPath=/var/private/tls/bookie.keystore.passwd\n+# trust store\n+tlsTrustStoreType=JKS\n+tlsTrustStore=/var/private/tls/bookie.truststore.jks\n+tlsTrustStorePasswordPath=/var/private/tls/bookie.truststore.passwd\n+```\n+\n+NOTE: it is important to restrict access to the store files and corresponding password files via filesystem permissions.\n+\n+Optional settings that are worth considering:\n+\n+1. tlsClientAuthentication=false: Enable/Disable using TLS for authentication. This config when enabled will authenticate the other end\n+    of the communication channel. It should be enabled on both bookies and clients for mutual TLS.\n+2. tlsEnabledCipherSuites= A cipher suite is a named combination of authentication, encryption, MAC and key exchange\n+    algorithm used to negotiate the security settings for a network connection using TLS network protocol. By default,\n+    it is null. [OpenSSL Ciphers](https://www.openssl.org/docs/man1.0.2/apps/ciphers.html)\n+    [JDK Ciphers](http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites)\n+3. tlsEnabledProtocols = TLSv1.2,TLSv1.1,TLSv1 (list out the TLS protocols that you are going to accept from clients).\n+    By default, it is not set.\n+\n+To verify the bookie's keystore and truststore are setup correctly you can run the following command:\n+\n+```shell\n+openssl s_client -debug -connect localhost:3181 -tls1\n+```\n+\n+NOTE: TLSv1 should be listed under `tlsEnabledProtocols`.\n+\n+In the output of this command you should see the server's certificate:\n+\n+```shell\n+-----BEGIN CERTIFICATE-----\n+{variable sized random bytes}\n+-----END CERTIFICATE-----\n+```\n+\n+If the certificate does not show up or if there are any other error messages then your keystore is not setup correctly.\n+\n+## Configuring Clients\n+\n+TLS is supported only for the new BookKeeper client (BookKeeper versions 4.5.0 and higher), the older clients are not\n+supported. The configs for TLS will be the same as bookies.\n+\n+If client authentication is not required by the bookies, the following is a minimal configuration example:\n+\n+```shell\n+tlsProvider=OpenSSL\n+clientTrustStore=/var/private/tls/client.truststore.jks\n+clientTrustStorePasswordPath=/var/private/tls/client.truststore.passwd\n+```\n+\n+If client authentication is required, then a keystore must be created for each client, and the bookies' truststores must\n+trust the certificate in the client's keystore. This may be done using commands that are similar to what we used for\n+the [bookie keystore](#bookie-keystore).\n+\n+And the following must also be configured:\n+\n+```shell\n+tlsClientAuthentication=true\n+clientKeyStore=/var/private/tls/client.keystore.jks\n+clientKeyStorePasswordPath=/var/private/tls/client.keystore.passwd\n+```\n+\n+NOTE: it is important to restrict access to the store files and corresponding password files via filesystem permissions.\n+\n+(TBD: add example to use tls in bin/bookkeeper script?)\n+\n+## Enabling TLS Logging\n+\n+You can enable TLS debug logging at the JVM level by starting the bookies and/or clients with `javax.net.debug` system property. For example:\n+\n+```shell\n+-Djavax.net.debug=all\n+```\n+\n+You can find more details on this in [Oracle documentation](http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html) on\n+[debugging SSL/TLS connections](http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/ReadDebug.html)."},{"sha":"e16be69a1d31c3376f05c4b2b56c3eeb0145bab7","filename":"site/docs/security/zookeeper.md","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Fzookeeper.md","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/49b90a66f830482fc970ba625057c7101c201f62/site%2Fdocs%2Fsecurity%2Fzookeeper.md","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2Fdocs%2Fsecurity%2Fzookeeper.md?ref=49b90a66f830482fc970ba625057c7101c201f62","patch":"@@ -0,0 +1,41 @@\n+---\n+title: ZooKeeper Authentication\n+prev: ../sasl\n+---\n+\n+## New Clusters\n+\n+To enable `ZooKeeper` authentication on Bookies or Clients, there are two necessary steps:\n+\n+1. Create a `JAAS` login file and set the appropriate system property to point to it as described in [GSSAPI (Kerberos)](../sasl#notes).\n+2. Set the configuration property `zkEnableSecurity` in each bookie to `true`.\n+\n+The metadata stored in `ZooKeeper` is such that only certain clients will be able to modify and read the corresponding znodes.\n+The rationale behind this decision is that the data stored in ZooKeeper is not sensitive, but inappropriate manipulation of znodes can cause cluster\n+disruption.\n+\n+## Migrating Clusters\n+\n+If you are running a version of BookKeeper that does not support security or simply with security disabled, and you want to make the cluster secure,\n+then you need to execute the following steps to enable ZooKeeper authentication with minimal disruption to your operations.\n+\n+1. Perform a rolling restart setting the `JAAS` login file, which enables bookie or clients to authenticate. At the end of the rolling restart,\n+    bookies (or clients) are able to manipulate znodes with strict ACLs, but they will not create znodes with those ACLs.\n+2. Perform a second rolling restart of bookies, this time setting the configuration parameter `zkEnableSecurity` to true, which enables the use\n+    of secure ACLs when creating znodes.\n+3. Currently we don't have provide a tool to set acls on old znodes. You are recommended to set it manually using ZooKeeper tools.\n+\n+It is also possible to turn off authentication in a secured cluster. To do it, follow these steps:\n+\n+1. Perform a rolling restart of bookies setting the `JAAS` login file, which enable bookies to authenticate, but setting `zkEnableSecurity` to `false`.\n+    At the end of rolling restart, bookies stop creating znodes with secure ACLs, but are still able to authenticate and manipulate all znodes.\n+2. You can use ZooKeeper tools to manually reset all ACLs under the znode set in `zkLedgersRootPath`, which defaults to `/ledgers`.\n+3. Perform a second rolling restart of bookies, this time omitting the system property that sets the `JAAS` login file.\n+\n+## Migrating the ZooKeeper ensemble\n+\n+It is also necessary to enable authentication on the `ZooKeeper` ensemble. To do it, we need to perform a rolling restart of the ensemble and\n+set a few properties. Please refer to the ZooKeeper documentation for more details.\n+\n+1. [Apache ZooKeeper Documentation](http://zookeeper.apache.org/doc/r3.4.6/zookeeperProgrammers.html#sc_ZooKeeperAccessControl)\n+2. [Apache ZooKeeper Wiki](https://cwiki.apache.org/confluence/display/ZOOKEEPER/Zookeeper+and+SASL)"}]}