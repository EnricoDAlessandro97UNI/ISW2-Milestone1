{"sha":"2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjJiYTlhMmM0ZjcxOTJlYzBhYmFjY2RmZDMzNDAyNWI0ZGRiOWRhNjY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-11-12T02:37:35Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-11-12T02:37:35Z"},"message":"BOOKKEEPER-962: Add more journal timing stats\n\nIt is useful to know the sync latency on the journal to identify disk/filesystem\nrelated latency spikes that will cause all the entries to queue up. In the same\nline, it's useful to track the amount of time spent in the journal queue.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #70 from merlimat/bk-journal-latency","tree":{"sha":"a70cbc6e0de43ef9edb25e8f0aff4ce5514bacf4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/a70cbc6e0de43ef9edb25e8f0aff4ce5514bacf4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"7673febb6519fedb96320ec98db71601826a63b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7673febb6519fedb96320ec98db71601826a63b1","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7673febb6519fedb96320ec98db71601826a63b1"}],"stats":{"total":25,"additions":25,"deletions":0},"files":[{"sha":"239f923f9722394fe0b35130173df9b6f916cbce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java?ref=2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","patch":"@@ -46,12 +46,15 @@ public interface BookKeeperServerStats {\n     // Journal Stats\n     public final static String JOURNAL_SCOPE = \"journal\";\n     public final static String JOURNAL_ADD_ENTRY = \"JOURNAL_ADD_ENTRY\";\n+    public final static String JOURNAL_SYNC = \"JOURNAL_SYNC\";\n     public final static String JOURNAL_MEM_ADD_ENTRY = \"JOURNAL_MEM_ADD_ENTRY\";\n     public final static String JOURNAL_PREALLOCATION = \"JOURNAL_PREALLOCATION\";\n     public final static String JOURNAL_FORCE_WRITE_LATENCY = \"JOURNAL_FORCE_WRITE_LATENCY\";\n     public final static String JOURNAL_FORCE_WRITE_BATCH_ENTRIES = \"JOURNAL_FORCE_WRITE_BATCH_ENTRIES\";\n     public final static String JOURNAL_FORCE_WRITE_BATCH_BYTES = \"JOURNAL_FORCE_WRITE_BATCH_BYTES\";\n     public final static String JOURNAL_FLUSH_LATENCY = \"JOURNAL_FLUSH_LATENCY\";\n+    public final static String JOURNAL_QUEUE_LATENCY = \"JOURNAL_QUEUE_LATENCY\";\n+    public final static String JOURNAL_PROCESS_TIME_LATENCY = \"JOURNAL_PROCESS_TIME_LATENCY\";\n     public final static String JOURNAL_CREATION_LATENCY = \"JOURNAL_CREATION_LATENCY\";\n \n     // Ledger Storage Stats"},{"sha":"7be09844e769e494a357a9177b655c0e33d53172","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=2ba9a2c4f7192ec0abaccdfd334025b4ddb9da66","patch":"@@ -330,7 +330,9 @@ public int process(boolean shouldForceWrite) throws IOException {\n \n             try {\n                 if (shouldForceWrite) {\n+                    long startTime = MathUtils.nowInNano();\n                     this.logFile.forceWrite(false);\n+                    journalSyncStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTime), TimeUnit.NANOSECONDS);\n                 }\n                 lastLogMark.setCurLogMark(this.logId, this.lastFlushedPosition);\n \n@@ -518,8 +520,11 @@ static void writePaddingBytes(JournalChannel jc, ByteBuffer paddingBuffer, int j\n \n     // Expose Stats\n     private final OpStatsLogger journalAddEntryStats;\n+    private final OpStatsLogger journalSyncStats;\n     private final OpStatsLogger journalCreationStats;\n     private final OpStatsLogger journalFlushStats;\n+    private final OpStatsLogger journalProcessTimeStats;\n+    private final OpStatsLogger journalQueueStats;\n     private final OpStatsLogger forceWriteGroupingCountStats;\n     private final OpStatsLogger forceWriteBatchEntriesStats;\n     private final OpStatsLogger forceWriteBatchBytesStats;\n@@ -561,8 +566,11 @@ public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager, St\n \n         // Expose Stats\n         journalAddEntryStats = statsLogger.getOpStatsLogger(JOURNAL_ADD_ENTRY);\n+        journalSyncStats = statsLogger.getOpStatsLogger(JOURNAL_SYNC);\n         journalCreationStats = statsLogger.getOpStatsLogger(JOURNAL_CREATION_LATENCY);\n         journalFlushStats = statsLogger.getOpStatsLogger(JOURNAL_FLUSH_LATENCY);\n+        journalQueueStats = statsLogger.getOpStatsLogger(JOURNAL_QUEUE_LATENCY);\n+        journalProcessTimeStats = statsLogger.getOpStatsLogger(JOURNAL_PROCESS_TIME_LATENCY);\n         forceWriteGroupingCountStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_GROUPING_COUNT);\n         forceWriteBatchEntriesStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_BATCH_ENTRIES);\n         forceWriteBatchBytesStats = statsLogger.getOpStatsLogger(JOURNAL_FORCE_WRITE_BATCH_BYTES);\n@@ -794,6 +802,8 @@ public void run() {\n             long lastFlushPosition = 0;\n             boolean groupWhenTimeout = false;\n \n+            long dequeueStartTime = 0L;\n+\n             QueueEntry qe = null;\n             while (true) {\n                 // new journal file to write\n@@ -817,14 +827,26 @@ public void run() {\n                 }\n \n                 if (qe == null) {\n+                    if (dequeueStartTime != 0) {\n+                        journalProcessTimeStats.registerSuccessfulEvent(MathUtils.elapsedNanos(dequeueStartTime), TimeUnit.NANOSECONDS);\n+                    }\n+\n                     if (toFlush.isEmpty()) {\n                         qe = queue.take();\n+                        dequeueStartTime = MathUtils.nowInNano();\n+                        journalQueueStats.registerSuccessfulEvent(MathUtils.elapsedNanos(qe.enqueueTime), TimeUnit.NANOSECONDS);\n                     } else {\n                         long pollWaitTimeNanos = maxGroupWaitInNanos - MathUtils.elapsedNanos(toFlush.get(0).enqueueTime);\n                         if (flushWhenQueueEmpty || pollWaitTimeNanos < 0) {\n                             pollWaitTimeNanos = 0;\n                         }\n                         qe = queue.poll(pollWaitTimeNanos, TimeUnit.NANOSECONDS);\n+                        dequeueStartTime = MathUtils.nowInNano();\n+\n+                        if (qe != null) {\n+                            journalQueueStats.registerSuccessfulEvent(MathUtils.elapsedNanos(qe.enqueueTime), TimeUnit.NANOSECONDS);\n+                        }\n+\n                         boolean shouldFlush = false;\n                         // We should issue a forceWrite if any of the three conditions below holds good\n                         // 1. If the oldest pending entry has been pending for longer than the max wait time"}]}