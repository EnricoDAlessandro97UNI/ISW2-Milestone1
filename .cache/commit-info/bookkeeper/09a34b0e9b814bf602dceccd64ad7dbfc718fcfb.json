{"sha":"09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjA5YTM0YjBlOWI4MTRiZjYwMmRjZWNjZDY0YWQ3ZGJmYzcxOGZjZmI=","commit":{"author":{"name":"Yiming Zang","email":"yzang@twitter.com","date":"2016-12-01T02:21:08Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:09:40Z"},"message":"DL-119: Fix the logging on closing readahead worker","tree":{"sha":"f3a1d436692e42cd1459b1791d7a69094ee29b10","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f3a1d436692e42cd1459b1791d7a69094ee29b10"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb/comments","author":null,"committer":null,"parents":[{"sha":"3a512326dc2cec7e4c62e0dc8fe569fdc5305373","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3a512326dc2cec7e4c62e0dc8fe569fdc5305373","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/3a512326dc2cec7e4c62e0dc8fe569fdc5305373"}],"stats":{"total":25,"additions":19,"deletions":6},"files":[{"sha":"266409eb44039af62514b05d8c1ca0dea31009a9","filename":"src/main/java/com/twitter/distributedlog/util/FutureUtils.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java?ref=09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","patch":"@@ -35,11 +35,13 @@\n import com.twitter.util.Promise;\n import com.twitter.util.Return;\n import com.twitter.util.Throw;\n+import com.twitter.util.Try;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import scala.runtime.AbstractFunction1;\n import scala.runtime.BoxedUnit;\n \n import javax.annotation.Nullable;\n@@ -384,14 +386,25 @@ public static <T> Promise<T> within(final Promise<T> promise,\n         if (timeout < DistributedLogConstants.FUTURE_TIMEOUT_IMMEDIATE || promise.isDefined()) {\n             return promise;\n         }\n-        scheduler.schedule(key, new Runnable() {\n+        // schedule a timeout to raise timeout exception\n+        final java.util.concurrent.ScheduledFuture<?> task = scheduler.schedule(key, new Runnable() {\n             @Override\n             public void run() {\n-                logger.info(\"Raise exception\", cause);\n-                // satisfy the promise\n-                FutureUtils.setException(promise, cause);\n+                if (!promise.isDefined() && FutureUtils.setException(promise, cause)) {\n+                    logger.info(\"Raise exception\", cause);\n+                }\n             }\n         }, timeout, unit);\n+        // when the promise is satisfied, cancel the timeout task\n+        promise.respond(new AbstractFunction1<Try<T>, BoxedUnit>() {\n+            @Override\n+            public BoxedUnit apply(Try<T> value) {\n+                if (!task.cancel(true)) {\n+                    logger.debug(\"Failed to cancel the timeout task\");\n+                }\n+                return BoxedUnit.UNIT;\n+            }\n+        });\n         return promise;\n     }\n "},{"sha":"75223f2e49de6d348731cd31ff050339be12d5a9","filename":"src/main/java/com/twitter/distributedlog/util/MonitoredScheduledThreadPoolExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/09a34b0e9b814bf602dceccd64ad7dbfc718fcfb/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java?ref=09a34b0e9b814bf602dceccd64ad7dbfc718fcfb","patch":"@@ -237,9 +237,9 @@ private Throwable extractThrowable(Runnable runnable) {\n             try {\n                 ((Future<?>) runnable).get();\n             } catch (CancellationException e) {\n-                LOG.info(\"Task {} cancelled\", runnable, e.getCause());\n+                LOG.debug(\"Task {} cancelled\", runnable, e.getCause());\n             } catch (InterruptedException e) {\n-                LOG.info(\"Task {} was interrupted\", runnable, e);\n+                LOG.debug(\"Task {} was interrupted\", runnable, e);\n             } catch (ExecutionException e) {\n                 return e.getCause();\n             }"}]}