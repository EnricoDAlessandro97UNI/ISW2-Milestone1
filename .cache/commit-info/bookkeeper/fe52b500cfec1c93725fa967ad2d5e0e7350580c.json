{"sha":"fe52b500cfec1c93725fa967ad2d5e0e7350580c","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmZlNTJiNTAwY2ZlYzFjOTM3MjVmYTk2N2FkMmQ1ZTBlNzM1MDU4MGM=","commit":{"author":{"name":"Siddharth Boobna","email":"sboobna@yahoo-inc.com","date":"2016-03-08T06:16:03Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-03-08T06:16:03Z"},"message":"read only bookie runs replicator and does not release the under replicated lock after failing\n\nâ€¦ only bookie\n\nAuthor: Siddharth Boobna <sboobna@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #17 from sboobna/BOOKKEEPER-900","tree":{"sha":"1b29da0a65aba170413f0cfd7670a984540c6fd1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/1b29da0a65aba170413f0cfd7670a984540c6fd1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/fe52b500cfec1c93725fa967ad2d5e0e7350580c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/fe52b500cfec1c93725fa967ad2d5e0e7350580c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/fe52b500cfec1c93725fa967ad2d5e0e7350580c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/fe52b500cfec1c93725fa967ad2d5e0e7350580c/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d"}],"stats":{"total":27,"additions":17,"deletions":10},"files":[{"sha":"1a10667e6735528830ba6414736a2891e33c15b5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/fe52b500cfec1c93725fa967ad2d5e0e7350580c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/fe52b500cfec1c93725fa967ad2d5e0e7350580c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java?ref=fe52b500cfec1c93725fa967ad2d5e0e7350580c","patch":"@@ -252,6 +252,7 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n                 LOG.warn(\"BKLedgerRecoveryException \"\n                         + \"while replicating the fragment\", e);\n                 if (admin.getReadOnlyBookies().contains(targetBookie)) {\n+                    underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);\n                     throw new BKException.BKWriteOnReadOnlyBookieException();\n                 }\n             }"},{"sha":"8aebae47ebce6bcd5d8468aa5e6b70a66574897e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/fe52b500cfec1c93725fa967ad2d5e0e7350580c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/fe52b500cfec1c93725fa967ad2d5e0e7350580c/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java?ref=fe52b500cfec1c93725fa967ad2d5e0e7350580c","patch":"@@ -19,6 +19,17 @@\n  */\n package org.apache.bookkeeper.replication;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+\n+import java.net.InetAddress;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.ClientUtil;\n@@ -32,22 +43,12 @@\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.net.InetAddress;\n-import java.util.ArrayList;\n-import java.util.Enumeration;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-\n-import static org.junit.Assert.*;\n-\n /**\n  * Test the ReplicationWroker, where it has to replicate the fragments from\n  * failed Bookies to given target Bookie.\n@@ -58,6 +59,7 @@ public class TestReplicationWorker extends MultiLedgerManagerTestCase {\n     private static final Logger LOG = LoggerFactory\n             .getLogger(TestReplicationWorker.class);\n     private String basePath = \"\";\n+    private String baseLockPath = \"\";\n     private LedgerManagerFactory mFactory;\n     private LedgerUnderreplicationManager underReplicationManager;\n     private static byte[] data = \"TestReplicationWorker\".getBytes();\n@@ -72,6 +74,9 @@ public TestReplicationWorker(String ledgerManagerFactory) {\n         basePath = baseClientConf.getZkLedgersRootPath() + '/'\n                 + BookKeeperConstants.UNDER_REPLICATION_NODE\n                 + BookKeeperConstants.DEFAULT_ZK_LEDGERS_ROOT_PATH;\n+        baseLockPath = baseClientConf.getZkLedgersRootPath() + '/'\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE\n+                + \"/locks\";\n         baseConf.setRereplicationEntryBatchSize(3);\n     }\n \n@@ -535,6 +540,7 @@ public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n             while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()) {\n                 Thread.sleep(100);\n             }\n+            assertNull(zkc.exists(String.format(\"%s/urL%010d\", baseLockPath, lh.getId()), false));\n             assertFalse(\"RW should shutdown if the bookie is readonly\", rw.isRunning());\n         } finally {\n             rw.shutdown();"}]}