{"sha":"46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjQ2ZTZiNzBmZWRhMmU4YWQ2MWJhMTM5MjhkZjkzYjJjOTRkM2RkNGU=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-12T21:12:13Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-12T21:12:13Z"},"message":"DL-204: Bump libthrift to latest version for distributedlog-core\n\nCurrently finagle heavily depends on an out-of-dated version - libthrift 5.0. Proxy modules (client, server) depend on this version, however the core library doesn't really depend on libthrift.\n\nThis change is to change libthrift to 0.9.* in distributedlog-core and shade it to avoid it conflict with the version used by finagle.\n\nThis change is based on #131 . The main change is at gitsha [6e58786](https://github.com/apache/incubator-distributedlog/commit/6e587869f87cdce50ae93ba3d52767719d1ab5a6)\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Jia Zhai <None>, Leigh Stewart <lstewart@apache.org>\n\nCloses #132 from sijie/change_thrift_for_core_module","tree":{"sha":"4c25806bdb02272286e7a1b70b1eb819d5264bf1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/4c25806bdb02272286e7a1b70b1eb819d5264bf1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"83c527c32f9aa7ffd89aac2085e0b798a3ced1af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/83c527c32f9aa7ffd89aac2085e0b798a3ced1af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/83c527c32f9aa7ffd89aac2085e0b798a3ced1af"}],"stats":{"total":2204,"additions":2181,"deletions":23},"files":[{"sha":"a4f7568b4a3189e37a451de93fecef36913ae933","filename":"pom.xml","status":"modified","additions":32,"deletions":23,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","patch":"@@ -87,12 +87,7 @@\n     <dependency>\n       <groupId>org.apache.thrift</groupId>\n       <artifactId>libthrift</artifactId>\n-      <version>${libthrift.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter</groupId>\n-      <artifactId>scrooge-core_2.11</artifactId>\n-      <version>${scrooge.version}</version>\n+      <version>0.9.3</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.bookkeeper</groupId>\n@@ -149,23 +144,6 @@\n   </dependencies>\n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>com.twitter</groupId>\n-        <artifactId>scrooge-maven-plugin</artifactId>\n-        <version>${scrooge-maven-plugin.version}</version>\n-        <configuration>\n-          <language>java</language>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>thrift-sources</id>\n-            <phase>generate-sources</phase>\n-            <goals>\n-              <goal>compile</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n         <version>${maven-compiler-plugin.version}</version>\n@@ -206,6 +184,37 @@\n           <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>${maven-shade-plugin.version}</version>\n+        <configuration>\n+          <!-- put your configurations here -->\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>true</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>org.apache.thrift:libthrift</include>\n+                </includes>\n+              </artifactSet>\n+              <minimizeJar>true</minimizeJar>\n+              <relocations>\n+                <relocation>\n+                  <pattern>org.apache.thrift</pattern>\n+                  <shadedPattern>dl-shade.org.apache.thrift</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n   <profiles>"},{"sha":"35056d9faa7ddfcb81d78c7b30e616d787fa5641","filename":"src/main/java/org/apache/distributedlog/thrift/AccessControlEntry.java","status":"added","additions":793,"deletions":0,"changes":793,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FAccessControlEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FAccessControlEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FAccessControlEntry.java?ref=46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","patch":"@@ -0,0 +1,793 @@\n+/**\n+ * Autogenerated by Thrift Compiler (0.9.3)\n+ *\n+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n+ *  @generated\n+ */\n+package org.apache.distributedlog.thrift;\n+\n+import org.apache.thrift.scheme.IScheme;\n+import org.apache.thrift.scheme.SchemeFactory;\n+import org.apache.thrift.scheme.StandardScheme;\n+\n+import org.apache.thrift.scheme.TupleScheme;\n+import org.apache.thrift.protocol.TTupleProtocol;\n+import org.apache.thrift.protocol.TProtocolException;\n+import org.apache.thrift.EncodingUtils;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.server.AbstractNonblockingServer.*;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.EnumMap;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.EnumSet;\n+import java.util.Collections;\n+import java.util.BitSet;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import javax.annotation.Generated;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\", date = \"2017-05-27\")\n+public class AccessControlEntry implements org.apache.thrift.TBase<AccessControlEntry, AccessControlEntry._Fields>, java.io.Serializable, Cloneable, Comparable<AccessControlEntry> {\n+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"AccessControlEntry\");\n+\n+  private static final org.apache.thrift.protocol.TField DENY_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"denyWrite\", org.apache.thrift.protocol.TType.BOOL, (short)1);\n+  private static final org.apache.thrift.protocol.TField DENY_TRUNCATE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"denyTruncate\", org.apache.thrift.protocol.TType.BOOL, (short)2);\n+  private static final org.apache.thrift.protocol.TField DENY_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"denyDelete\", org.apache.thrift.protocol.TType.BOOL, (short)3);\n+  private static final org.apache.thrift.protocol.TField DENY_ACQUIRE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"denyAcquire\", org.apache.thrift.protocol.TType.BOOL, (short)4);\n+  private static final org.apache.thrift.protocol.TField DENY_RELEASE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"denyRelease\", org.apache.thrift.protocol.TType.BOOL, (short)5);\n+\n+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n+  static {\n+    schemes.put(StandardScheme.class, new AccessControlEntryStandardSchemeFactory());\n+    schemes.put(TupleScheme.class, new AccessControlEntryTupleSchemeFactory());\n+  }\n+\n+  public boolean denyWrite; // optional\n+  public boolean denyTruncate; // optional\n+  public boolean denyDelete; // optional\n+  public boolean denyAcquire; // optional\n+  public boolean denyRelease; // optional\n+\n+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n+    DENY_WRITE((short)1, \"denyWrite\"),\n+    DENY_TRUNCATE((short)2, \"denyTruncate\"),\n+    DENY_DELETE((short)3, \"denyDelete\"),\n+    DENY_ACQUIRE((short)4, \"denyAcquire\"),\n+    DENY_RELEASE((short)5, \"denyRelease\");\n+\n+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n+\n+    static {\n+      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n+        byName.put(field.getFieldName(), field);\n+      }\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches fieldId, or null if its not found.\n+     */\n+    public static _Fields findByThriftId(int fieldId) {\n+      switch(fieldId) {\n+        case 1: // DENY_WRITE\n+          return DENY_WRITE;\n+        case 2: // DENY_TRUNCATE\n+          return DENY_TRUNCATE;\n+        case 3: // DENY_DELETE\n+          return DENY_DELETE;\n+        case 4: // DENY_ACQUIRE\n+          return DENY_ACQUIRE;\n+        case 5: // DENY_RELEASE\n+          return DENY_RELEASE;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches fieldId, throwing an exception\n+     * if it is not found.\n+     */\n+    public static _Fields findByThriftIdOrThrow(int fieldId) {\n+      _Fields fields = findByThriftId(fieldId);\n+      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n+      return fields;\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches name, or null if its not found.\n+     */\n+    public static _Fields findByName(String name) {\n+      return byName.get(name);\n+    }\n+\n+    private final short _thriftId;\n+    private final String _fieldName;\n+\n+    _Fields(short thriftId, String fieldName) {\n+      _thriftId = thriftId;\n+      _fieldName = fieldName;\n+    }\n+\n+    public short getThriftFieldId() {\n+      return _thriftId;\n+    }\n+\n+    public String getFieldName() {\n+      return _fieldName;\n+    }\n+  }\n+\n+  // isset id assignments\n+  private static final int __DENYWRITE_ISSET_ID = 0;\n+  private static final int __DENYTRUNCATE_ISSET_ID = 1;\n+  private static final int __DENYDELETE_ISSET_ID = 2;\n+  private static final int __DENYACQUIRE_ISSET_ID = 3;\n+  private static final int __DENYRELEASE_ISSET_ID = 4;\n+  private byte __isset_bitfield = 0;\n+  private static final _Fields optionals[] = {_Fields.DENY_WRITE,_Fields.DENY_TRUNCATE,_Fields.DENY_DELETE,_Fields.DENY_ACQUIRE,_Fields.DENY_RELEASE};\n+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n+  static {\n+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n+    tmpMap.put(_Fields.DENY_WRITE, new org.apache.thrift.meta_data.FieldMetaData(\"denyWrite\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.DENY_TRUNCATE, new org.apache.thrift.meta_data.FieldMetaData(\"denyTruncate\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.DENY_DELETE, new org.apache.thrift.meta_data.FieldMetaData(\"denyDelete\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.DENY_ACQUIRE, new org.apache.thrift.meta_data.FieldMetaData(\"denyAcquire\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.DENY_RELEASE, new org.apache.thrift.meta_data.FieldMetaData(\"denyRelease\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    metaDataMap = Collections.unmodifiableMap(tmpMap);\n+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccessControlEntry.class, metaDataMap);\n+  }\n+\n+  public AccessControlEntry() {\n+  }\n+\n+  /**\n+   * Performs a deep copy on <i>other</i>.\n+   */\n+  public AccessControlEntry(AccessControlEntry other) {\n+    __isset_bitfield = other.__isset_bitfield;\n+    this.denyWrite = other.denyWrite;\n+    this.denyTruncate = other.denyTruncate;\n+    this.denyDelete = other.denyDelete;\n+    this.denyAcquire = other.denyAcquire;\n+    this.denyRelease = other.denyRelease;\n+  }\n+\n+  public AccessControlEntry deepCopy() {\n+    return new AccessControlEntry(this);\n+  }\n+\n+  @Override\n+  public void clear() {\n+    setDenyWriteIsSet(false);\n+    this.denyWrite = false;\n+    setDenyTruncateIsSet(false);\n+    this.denyTruncate = false;\n+    setDenyDeleteIsSet(false);\n+    this.denyDelete = false;\n+    setDenyAcquireIsSet(false);\n+    this.denyAcquire = false;\n+    setDenyReleaseIsSet(false);\n+    this.denyRelease = false;\n+  }\n+\n+  public boolean isDenyWrite() {\n+    return this.denyWrite;\n+  }\n+\n+  public AccessControlEntry setDenyWrite(boolean denyWrite) {\n+    this.denyWrite = denyWrite;\n+    setDenyWriteIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetDenyWrite() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENYWRITE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field denyWrite is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDenyWrite() {\n+    return EncodingUtils.testBit(__isset_bitfield, __DENYWRITE_ISSET_ID);\n+  }\n+\n+  public void setDenyWriteIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENYWRITE_ISSET_ID, value);\n+  }\n+\n+  public boolean isDenyTruncate() {\n+    return this.denyTruncate;\n+  }\n+\n+  public AccessControlEntry setDenyTruncate(boolean denyTruncate) {\n+    this.denyTruncate = denyTruncate;\n+    setDenyTruncateIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetDenyTruncate() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENYTRUNCATE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field denyTruncate is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDenyTruncate() {\n+    return EncodingUtils.testBit(__isset_bitfield, __DENYTRUNCATE_ISSET_ID);\n+  }\n+\n+  public void setDenyTruncateIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENYTRUNCATE_ISSET_ID, value);\n+  }\n+\n+  public boolean isDenyDelete() {\n+    return this.denyDelete;\n+  }\n+\n+  public AccessControlEntry setDenyDelete(boolean denyDelete) {\n+    this.denyDelete = denyDelete;\n+    setDenyDeleteIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetDenyDelete() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENYDELETE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field denyDelete is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDenyDelete() {\n+    return EncodingUtils.testBit(__isset_bitfield, __DENYDELETE_ISSET_ID);\n+  }\n+\n+  public void setDenyDeleteIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENYDELETE_ISSET_ID, value);\n+  }\n+\n+  public boolean isDenyAcquire() {\n+    return this.denyAcquire;\n+  }\n+\n+  public AccessControlEntry setDenyAcquire(boolean denyAcquire) {\n+    this.denyAcquire = denyAcquire;\n+    setDenyAcquireIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetDenyAcquire() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENYACQUIRE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field denyAcquire is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDenyAcquire() {\n+    return EncodingUtils.testBit(__isset_bitfield, __DENYACQUIRE_ISSET_ID);\n+  }\n+\n+  public void setDenyAcquireIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENYACQUIRE_ISSET_ID, value);\n+  }\n+\n+  public boolean isDenyRelease() {\n+    return this.denyRelease;\n+  }\n+\n+  public AccessControlEntry setDenyRelease(boolean denyRelease) {\n+    this.denyRelease = denyRelease;\n+    setDenyReleaseIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetDenyRelease() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENYRELEASE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field denyRelease is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDenyRelease() {\n+    return EncodingUtils.testBit(__isset_bitfield, __DENYRELEASE_ISSET_ID);\n+  }\n+\n+  public void setDenyReleaseIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENYRELEASE_ISSET_ID, value);\n+  }\n+\n+  public void setFieldValue(_Fields field, Object value) {\n+    switch (field) {\n+    case DENY_WRITE:\n+      if (value == null) {\n+        unsetDenyWrite();\n+      } else {\n+        setDenyWrite((Boolean)value);\n+      }\n+      break;\n+\n+    case DENY_TRUNCATE:\n+      if (value == null) {\n+        unsetDenyTruncate();\n+      } else {\n+        setDenyTruncate((Boolean)value);\n+      }\n+      break;\n+\n+    case DENY_DELETE:\n+      if (value == null) {\n+        unsetDenyDelete();\n+      } else {\n+        setDenyDelete((Boolean)value);\n+      }\n+      break;\n+\n+    case DENY_ACQUIRE:\n+      if (value == null) {\n+        unsetDenyAcquire();\n+      } else {\n+        setDenyAcquire((Boolean)value);\n+      }\n+      break;\n+\n+    case DENY_RELEASE:\n+      if (value == null) {\n+        unsetDenyRelease();\n+      } else {\n+        setDenyRelease((Boolean)value);\n+      }\n+      break;\n+\n+    }\n+  }\n+\n+  public Object getFieldValue(_Fields field) {\n+    switch (field) {\n+    case DENY_WRITE:\n+      return isDenyWrite();\n+\n+    case DENY_TRUNCATE:\n+      return isDenyTruncate();\n+\n+    case DENY_DELETE:\n+      return isDenyDelete();\n+\n+    case DENY_ACQUIRE:\n+      return isDenyAcquire();\n+\n+    case DENY_RELEASE:\n+      return isDenyRelease();\n+\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n+  public boolean isSet(_Fields field) {\n+    if (field == null) {\n+      throw new IllegalArgumentException();\n+    }\n+\n+    switch (field) {\n+    case DENY_WRITE:\n+      return isSetDenyWrite();\n+    case DENY_TRUNCATE:\n+      return isSetDenyTruncate();\n+    case DENY_DELETE:\n+      return isSetDenyDelete();\n+    case DENY_ACQUIRE:\n+      return isSetDenyAcquire();\n+    case DENY_RELEASE:\n+      return isSetDenyRelease();\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override\n+  public boolean equals(Object that) {\n+    if (that == null)\n+      return false;\n+    if (that instanceof AccessControlEntry)\n+      return this.equals((AccessControlEntry)that);\n+    return false;\n+  }\n+\n+  public boolean equals(AccessControlEntry that) {\n+    if (that == null)\n+      return false;\n+\n+    boolean this_present_denyWrite = true && this.isSetDenyWrite();\n+    boolean that_present_denyWrite = true && that.isSetDenyWrite();\n+    if (this_present_denyWrite || that_present_denyWrite) {\n+      if (!(this_present_denyWrite && that_present_denyWrite))\n+        return false;\n+      if (this.denyWrite != that.denyWrite)\n+        return false;\n+    }\n+\n+    boolean this_present_denyTruncate = true && this.isSetDenyTruncate();\n+    boolean that_present_denyTruncate = true && that.isSetDenyTruncate();\n+    if (this_present_denyTruncate || that_present_denyTruncate) {\n+      if (!(this_present_denyTruncate && that_present_denyTruncate))\n+        return false;\n+      if (this.denyTruncate != that.denyTruncate)\n+        return false;\n+    }\n+\n+    boolean this_present_denyDelete = true && this.isSetDenyDelete();\n+    boolean that_present_denyDelete = true && that.isSetDenyDelete();\n+    if (this_present_denyDelete || that_present_denyDelete) {\n+      if (!(this_present_denyDelete && that_present_denyDelete))\n+        return false;\n+      if (this.denyDelete != that.denyDelete)\n+        return false;\n+    }\n+\n+    boolean this_present_denyAcquire = true && this.isSetDenyAcquire();\n+    boolean that_present_denyAcquire = true && that.isSetDenyAcquire();\n+    if (this_present_denyAcquire || that_present_denyAcquire) {\n+      if (!(this_present_denyAcquire && that_present_denyAcquire))\n+        return false;\n+      if (this.denyAcquire != that.denyAcquire)\n+        return false;\n+    }\n+\n+    boolean this_present_denyRelease = true && this.isSetDenyRelease();\n+    boolean that_present_denyRelease = true && that.isSetDenyRelease();\n+    if (this_present_denyRelease || that_present_denyRelease) {\n+      if (!(this_present_denyRelease && that_present_denyRelease))\n+        return false;\n+      if (this.denyRelease != that.denyRelease)\n+        return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    List<Object> list = new ArrayList<Object>();\n+\n+    boolean present_denyWrite = true && (isSetDenyWrite());\n+    list.add(present_denyWrite);\n+    if (present_denyWrite)\n+      list.add(denyWrite);\n+\n+    boolean present_denyTruncate = true && (isSetDenyTruncate());\n+    list.add(present_denyTruncate);\n+    if (present_denyTruncate)\n+      list.add(denyTruncate);\n+\n+    boolean present_denyDelete = true && (isSetDenyDelete());\n+    list.add(present_denyDelete);\n+    if (present_denyDelete)\n+      list.add(denyDelete);\n+\n+    boolean present_denyAcquire = true && (isSetDenyAcquire());\n+    list.add(present_denyAcquire);\n+    if (present_denyAcquire)\n+      list.add(denyAcquire);\n+\n+    boolean present_denyRelease = true && (isSetDenyRelease());\n+    list.add(present_denyRelease);\n+    if (present_denyRelease)\n+      list.add(denyRelease);\n+\n+    return list.hashCode();\n+  }\n+\n+  @Override\n+  public int compareTo(AccessControlEntry other) {\n+    if (!getClass().equals(other.getClass())) {\n+      return getClass().getName().compareTo(other.getClass().getName());\n+    }\n+\n+    int lastComparison = 0;\n+\n+    lastComparison = Boolean.valueOf(isSetDenyWrite()).compareTo(other.isSetDenyWrite());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDenyWrite()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denyWrite, other.denyWrite);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDenyTruncate()).compareTo(other.isSetDenyTruncate());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDenyTruncate()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denyTruncate, other.denyTruncate);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDenyDelete()).compareTo(other.isSetDenyDelete());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDenyDelete()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denyDelete, other.denyDelete);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDenyAcquire()).compareTo(other.isSetDenyAcquire());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDenyAcquire()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denyAcquire, other.denyAcquire);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDenyRelease()).compareTo(other.isSetDenyRelease());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDenyRelease()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denyRelease, other.denyRelease);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    return 0;\n+  }\n+\n+  public _Fields fieldForId(int fieldId) {\n+    return _Fields.findByThriftId(fieldId);\n+  }\n+\n+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n+  }\n+\n+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"AccessControlEntry(\");\n+    boolean first = true;\n+\n+    if (isSetDenyWrite()) {\n+      sb.append(\"denyWrite:\");\n+      sb.append(this.denyWrite);\n+      first = false;\n+    }\n+    if (isSetDenyTruncate()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"denyTruncate:\");\n+      sb.append(this.denyTruncate);\n+      first = false;\n+    }\n+    if (isSetDenyDelete()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"denyDelete:\");\n+      sb.append(this.denyDelete);\n+      first = false;\n+    }\n+    if (isSetDenyAcquire()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"denyAcquire:\");\n+      sb.append(this.denyAcquire);\n+      first = false;\n+    }\n+    if (isSetDenyRelease()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"denyRelease:\");\n+      sb.append(this.denyRelease);\n+      first = false;\n+    }\n+    sb.append(\")\");\n+    return sb.toString();\n+  }\n+\n+  public void validate() throws org.apache.thrift.TException {\n+    // check for required fields\n+    // check for sub-struct validity\n+  }\n+\n+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n+    try {\n+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n+    } catch (org.apache.thrift.TException te) {\n+      throw new java.io.IOException(te);\n+    }\n+  }\n+\n+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n+    try {\n+      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n+      __isset_bitfield = 0;\n+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n+    } catch (org.apache.thrift.TException te) {\n+      throw new java.io.IOException(te);\n+    }\n+  }\n+\n+  private static class AccessControlEntryStandardSchemeFactory implements SchemeFactory {\n+    public AccessControlEntryStandardScheme getScheme() {\n+      return new AccessControlEntryStandardScheme();\n+    }\n+  }\n+\n+  private static class AccessControlEntryStandardScheme extends StandardScheme<AccessControlEntry> {\n+\n+    public void read(org.apache.thrift.protocol.TProtocol iprot, AccessControlEntry struct) throws org.apache.thrift.TException {\n+      org.apache.thrift.protocol.TField schemeField;\n+      iprot.readStructBegin();\n+      while (true)\n+      {\n+        schemeField = iprot.readFieldBegin();\n+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n+          break;\n+        }\n+        switch (schemeField.id) {\n+          case 1: // DENY_WRITE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.denyWrite = iprot.readBool();\n+              struct.setDenyWriteIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 2: // DENY_TRUNCATE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.denyTruncate = iprot.readBool();\n+              struct.setDenyTruncateIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 3: // DENY_DELETE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.denyDelete = iprot.readBool();\n+              struct.setDenyDeleteIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 4: // DENY_ACQUIRE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.denyAcquire = iprot.readBool();\n+              struct.setDenyAcquireIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 5: // DENY_RELEASE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.denyRelease = iprot.readBool();\n+              struct.setDenyReleaseIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          default:\n+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+        }\n+        iprot.readFieldEnd();\n+      }\n+      iprot.readStructEnd();\n+\n+      // check for required fields of primitive type, which can't be checked in the validate method\n+      struct.validate();\n+    }\n+\n+    public void write(org.apache.thrift.protocol.TProtocol oprot, AccessControlEntry struct) throws org.apache.thrift.TException {\n+      struct.validate();\n+\n+      oprot.writeStructBegin(STRUCT_DESC);\n+      if (struct.isSetDenyWrite()) {\n+        oprot.writeFieldBegin(DENY_WRITE_FIELD_DESC);\n+        oprot.writeBool(struct.denyWrite);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetDenyTruncate()) {\n+        oprot.writeFieldBegin(DENY_TRUNCATE_FIELD_DESC);\n+        oprot.writeBool(struct.denyTruncate);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetDenyDelete()) {\n+        oprot.writeFieldBegin(DENY_DELETE_FIELD_DESC);\n+        oprot.writeBool(struct.denyDelete);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetDenyAcquire()) {\n+        oprot.writeFieldBegin(DENY_ACQUIRE_FIELD_DESC);\n+        oprot.writeBool(struct.denyAcquire);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetDenyRelease()) {\n+        oprot.writeFieldBegin(DENY_RELEASE_FIELD_DESC);\n+        oprot.writeBool(struct.denyRelease);\n+        oprot.writeFieldEnd();\n+      }\n+      oprot.writeFieldStop();\n+      oprot.writeStructEnd();\n+    }\n+\n+  }\n+\n+  private static class AccessControlEntryTupleSchemeFactory implements SchemeFactory {\n+    public AccessControlEntryTupleScheme getScheme() {\n+      return new AccessControlEntryTupleScheme();\n+    }\n+  }\n+\n+  private static class AccessControlEntryTupleScheme extends TupleScheme<AccessControlEntry> {\n+\n+    @Override\n+    public void write(org.apache.thrift.protocol.TProtocol prot, AccessControlEntry struct) throws org.apache.thrift.TException {\n+      TTupleProtocol oprot = (TTupleProtocol) prot;\n+      BitSet optionals = new BitSet();\n+      if (struct.isSetDenyWrite()) {\n+        optionals.set(0);\n+      }\n+      if (struct.isSetDenyTruncate()) {\n+        optionals.set(1);\n+      }\n+      if (struct.isSetDenyDelete()) {\n+        optionals.set(2);\n+      }\n+      if (struct.isSetDenyAcquire()) {\n+        optionals.set(3);\n+      }\n+      if (struct.isSetDenyRelease()) {\n+        optionals.set(4);\n+      }\n+      oprot.writeBitSet(optionals, 5);\n+      if (struct.isSetDenyWrite()) {\n+        oprot.writeBool(struct.denyWrite);\n+      }\n+      if (struct.isSetDenyTruncate()) {\n+        oprot.writeBool(struct.denyTruncate);\n+      }\n+      if (struct.isSetDenyDelete()) {\n+        oprot.writeBool(struct.denyDelete);\n+      }\n+      if (struct.isSetDenyAcquire()) {\n+        oprot.writeBool(struct.denyAcquire);\n+      }\n+      if (struct.isSetDenyRelease()) {\n+        oprot.writeBool(struct.denyRelease);\n+      }\n+    }\n+\n+    @Override\n+    public void read(org.apache.thrift.protocol.TProtocol prot, AccessControlEntry struct) throws org.apache.thrift.TException {\n+      TTupleProtocol iprot = (TTupleProtocol) prot;\n+      BitSet incoming = iprot.readBitSet(5);\n+      if (incoming.get(0)) {\n+        struct.denyWrite = iprot.readBool();\n+        struct.setDenyWriteIsSet(true);\n+      }\n+      if (incoming.get(1)) {\n+        struct.denyTruncate = iprot.readBool();\n+        struct.setDenyTruncateIsSet(true);\n+      }\n+      if (incoming.get(2)) {\n+        struct.denyDelete = iprot.readBool();\n+        struct.setDenyDeleteIsSet(true);\n+      }\n+      if (incoming.get(3)) {\n+        struct.denyAcquire = iprot.readBool();\n+        struct.setDenyAcquireIsSet(true);\n+      }\n+      if (incoming.get(4)) {\n+        struct.denyRelease = iprot.readBool();\n+        struct.setDenyReleaseIsSet(true);\n+      }\n+    }\n+  }\n+\n+}\n+"},{"sha":"6fb0dd67221a6b13a1d47b8a39c47aa75909ad22","filename":"src/main/java/org/apache/distributedlog/thrift/BKDLConfigFormat.java","status":"added","additions":1335,"deletions":0,"changes":1335,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FBKDLConfigFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FBKDLConfigFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2FBKDLConfigFormat.java?ref=46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","patch":"@@ -0,0 +1,1335 @@\n+/**\n+ * Autogenerated by Thrift Compiler (0.9.3)\n+ *\n+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n+ *  @generated\n+ */\n+package org.apache.distributedlog.thrift;\n+\n+import org.apache.thrift.scheme.IScheme;\n+import org.apache.thrift.scheme.SchemeFactory;\n+import org.apache.thrift.scheme.StandardScheme;\n+\n+import org.apache.thrift.scheme.TupleScheme;\n+import org.apache.thrift.protocol.TTupleProtocol;\n+import org.apache.thrift.protocol.TProtocolException;\n+import org.apache.thrift.EncodingUtils;\n+import org.apache.thrift.TException;\n+import org.apache.thrift.async.AsyncMethodCallback;\n+import org.apache.thrift.server.AbstractNonblockingServer.*;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.EnumMap;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.EnumSet;\n+import java.util.Collections;\n+import java.util.BitSet;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import javax.annotation.Generated;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\"})\n+@Generated(value = \"Autogenerated by Thrift Compiler (0.9.3)\", date = \"2017-05-27\")\n+public class BKDLConfigFormat implements org.apache.thrift.TBase<BKDLConfigFormat, BKDLConfigFormat._Fields>, java.io.Serializable, Cloneable, Comparable<BKDLConfigFormat> {\n+  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"BKDLConfigFormat\");\n+\n+  private static final org.apache.thrift.protocol.TField BK_ZK_SERVERS_FIELD_DESC = new org.apache.thrift.protocol.TField(\"bkZkServers\", org.apache.thrift.protocol.TType.STRING, (short)1);\n+  private static final org.apache.thrift.protocol.TField BK_LEDGERS_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"bkLedgersPath\", org.apache.thrift.protocol.TType.STRING, (short)2);\n+  private static final org.apache.thrift.protocol.TField SANITY_CHECK_TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"sanityCheckTxnID\", org.apache.thrift.protocol.TType.BOOL, (short)3);\n+  private static final org.apache.thrift.protocol.TField ENCODE_REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(\"encodeRegionID\", org.apache.thrift.protocol.TType.BOOL, (short)4);\n+  private static final org.apache.thrift.protocol.TField BK_ZK_SERVERS_FOR_READER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"bkZkServersForReader\", org.apache.thrift.protocol.TType.STRING, (short)5);\n+  private static final org.apache.thrift.protocol.TField DL_ZK_SERVERS_FOR_WRITER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"dlZkServersForWriter\", org.apache.thrift.protocol.TType.STRING, (short)6);\n+  private static final org.apache.thrift.protocol.TField DL_ZK_SERVERS_FOR_READER_FIELD_DESC = new org.apache.thrift.protocol.TField(\"dlZkServersForReader\", org.apache.thrift.protocol.TType.STRING, (short)7);\n+  private static final org.apache.thrift.protocol.TField ACL_ROOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField(\"aclRootPath\", org.apache.thrift.protocol.TType.STRING, (short)8);\n+  private static final org.apache.thrift.protocol.TField FIRST_LOG_SEGMENT_SEQ_NO_FIELD_DESC = new org.apache.thrift.protocol.TField(\"firstLogSegmentSeqNo\", org.apache.thrift.protocol.TType.I64, (short)9);\n+  private static final org.apache.thrift.protocol.TField FEDERATED_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField(\"federatedNamespace\", org.apache.thrift.protocol.TType.BOOL, (short)10);\n+\n+  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n+  static {\n+    schemes.put(StandardScheme.class, new BKDLConfigFormatStandardSchemeFactory());\n+    schemes.put(TupleScheme.class, new BKDLConfigFormatTupleSchemeFactory());\n+  }\n+\n+  public String bkZkServers; // optional\n+  public String bkLedgersPath; // optional\n+  public boolean sanityCheckTxnID; // optional\n+  public boolean encodeRegionID; // optional\n+  public String bkZkServersForReader; // optional\n+  public String dlZkServersForWriter; // optional\n+  public String dlZkServersForReader; // optional\n+  public String aclRootPath; // optional\n+  public long firstLogSegmentSeqNo; // optional\n+  public boolean federatedNamespace; // optional\n+\n+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n+  public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n+    BK_ZK_SERVERS((short)1, \"bkZkServers\"),\n+    BK_LEDGERS_PATH((short)2, \"bkLedgersPath\"),\n+    SANITY_CHECK_TXN_ID((short)3, \"sanityCheckTxnID\"),\n+    ENCODE_REGION_ID((short)4, \"encodeRegionID\"),\n+    BK_ZK_SERVERS_FOR_READER((short)5, \"bkZkServersForReader\"),\n+    DL_ZK_SERVERS_FOR_WRITER((short)6, \"dlZkServersForWriter\"),\n+    DL_ZK_SERVERS_FOR_READER((short)7, \"dlZkServersForReader\"),\n+    ACL_ROOT_PATH((short)8, \"aclRootPath\"),\n+    FIRST_LOG_SEGMENT_SEQ_NO((short)9, \"firstLogSegmentSeqNo\"),\n+    FEDERATED_NAMESPACE((short)10, \"federatedNamespace\");\n+\n+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n+\n+    static {\n+      for (_Fields field : EnumSet.allOf(_Fields.class)) {\n+        byName.put(field.getFieldName(), field);\n+      }\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches fieldId, or null if its not found.\n+     */\n+    public static _Fields findByThriftId(int fieldId) {\n+      switch(fieldId) {\n+        case 1: // BK_ZK_SERVERS\n+          return BK_ZK_SERVERS;\n+        case 2: // BK_LEDGERS_PATH\n+          return BK_LEDGERS_PATH;\n+        case 3: // SANITY_CHECK_TXN_ID\n+          return SANITY_CHECK_TXN_ID;\n+        case 4: // ENCODE_REGION_ID\n+          return ENCODE_REGION_ID;\n+        case 5: // BK_ZK_SERVERS_FOR_READER\n+          return BK_ZK_SERVERS_FOR_READER;\n+        case 6: // DL_ZK_SERVERS_FOR_WRITER\n+          return DL_ZK_SERVERS_FOR_WRITER;\n+        case 7: // DL_ZK_SERVERS_FOR_READER\n+          return DL_ZK_SERVERS_FOR_READER;\n+        case 8: // ACL_ROOT_PATH\n+          return ACL_ROOT_PATH;\n+        case 9: // FIRST_LOG_SEGMENT_SEQ_NO\n+          return FIRST_LOG_SEGMENT_SEQ_NO;\n+        case 10: // FEDERATED_NAMESPACE\n+          return FEDERATED_NAMESPACE;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches fieldId, throwing an exception\n+     * if it is not found.\n+     */\n+    public static _Fields findByThriftIdOrThrow(int fieldId) {\n+      _Fields fields = findByThriftId(fieldId);\n+      if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n+      return fields;\n+    }\n+\n+    /**\n+     * Find the _Fields constant that matches name, or null if its not found.\n+     */\n+    public static _Fields findByName(String name) {\n+      return byName.get(name);\n+    }\n+\n+    private final short _thriftId;\n+    private final String _fieldName;\n+\n+    _Fields(short thriftId, String fieldName) {\n+      _thriftId = thriftId;\n+      _fieldName = fieldName;\n+    }\n+\n+    public short getThriftFieldId() {\n+      return _thriftId;\n+    }\n+\n+    public String getFieldName() {\n+      return _fieldName;\n+    }\n+  }\n+\n+  // isset id assignments\n+  private static final int __SANITYCHECKTXNID_ISSET_ID = 0;\n+  private static final int __ENCODEREGIONID_ISSET_ID = 1;\n+  private static final int __FIRSTLOGSEGMENTSEQNO_ISSET_ID = 2;\n+  private static final int __FEDERATEDNAMESPACE_ISSET_ID = 3;\n+  private byte __isset_bitfield = 0;\n+  private static final _Fields optionals[] = {_Fields.BK_ZK_SERVERS,_Fields.BK_LEDGERS_PATH,_Fields.SANITY_CHECK_TXN_ID,_Fields.ENCODE_REGION_ID,_Fields.BK_ZK_SERVERS_FOR_READER,_Fields.DL_ZK_SERVERS_FOR_WRITER,_Fields.DL_ZK_SERVERS_FOR_READER,_Fields.ACL_ROOT_PATH,_Fields.FIRST_LOG_SEGMENT_SEQ_NO,_Fields.FEDERATED_NAMESPACE};\n+  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n+  static {\n+    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n+    tmpMap.put(_Fields.BK_ZK_SERVERS, new org.apache.thrift.meta_data.FieldMetaData(\"bkZkServers\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.BK_LEDGERS_PATH, new org.apache.thrift.meta_data.FieldMetaData(\"bkLedgersPath\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.SANITY_CHECK_TXN_ID, new org.apache.thrift.meta_data.FieldMetaData(\"sanityCheckTxnID\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.ENCODE_REGION_ID, new org.apache.thrift.meta_data.FieldMetaData(\"encodeRegionID\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    tmpMap.put(_Fields.BK_ZK_SERVERS_FOR_READER, new org.apache.thrift.meta_data.FieldMetaData(\"bkZkServersForReader\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.DL_ZK_SERVERS_FOR_WRITER, new org.apache.thrift.meta_data.FieldMetaData(\"dlZkServersForWriter\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.DL_ZK_SERVERS_FOR_READER, new org.apache.thrift.meta_data.FieldMetaData(\"dlZkServersForReader\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.ACL_ROOT_PATH, new org.apache.thrift.meta_data.FieldMetaData(\"aclRootPath\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));\n+    tmpMap.put(_Fields.FIRST_LOG_SEGMENT_SEQ_NO, new org.apache.thrift.meta_data.FieldMetaData(\"firstLogSegmentSeqNo\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));\n+    tmpMap.put(_Fields.FEDERATED_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData(\"federatedNamespace\", org.apache.thrift.TFieldRequirementType.OPTIONAL, \n+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));\n+    metaDataMap = Collections.unmodifiableMap(tmpMap);\n+    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BKDLConfigFormat.class, metaDataMap);\n+  }\n+\n+  public BKDLConfigFormat() {\n+  }\n+\n+  /**\n+   * Performs a deep copy on <i>other</i>.\n+   */\n+  public BKDLConfigFormat(BKDLConfigFormat other) {\n+    __isset_bitfield = other.__isset_bitfield;\n+    if (other.isSetBkZkServers()) {\n+      this.bkZkServers = other.bkZkServers;\n+    }\n+    if (other.isSetBkLedgersPath()) {\n+      this.bkLedgersPath = other.bkLedgersPath;\n+    }\n+    this.sanityCheckTxnID = other.sanityCheckTxnID;\n+    this.encodeRegionID = other.encodeRegionID;\n+    if (other.isSetBkZkServersForReader()) {\n+      this.bkZkServersForReader = other.bkZkServersForReader;\n+    }\n+    if (other.isSetDlZkServersForWriter()) {\n+      this.dlZkServersForWriter = other.dlZkServersForWriter;\n+    }\n+    if (other.isSetDlZkServersForReader()) {\n+      this.dlZkServersForReader = other.dlZkServersForReader;\n+    }\n+    if (other.isSetAclRootPath()) {\n+      this.aclRootPath = other.aclRootPath;\n+    }\n+    this.firstLogSegmentSeqNo = other.firstLogSegmentSeqNo;\n+    this.federatedNamespace = other.federatedNamespace;\n+  }\n+\n+  public BKDLConfigFormat deepCopy() {\n+    return new BKDLConfigFormat(this);\n+  }\n+\n+  @Override\n+  public void clear() {\n+    this.bkZkServers = null;\n+    this.bkLedgersPath = null;\n+    setSanityCheckTxnIDIsSet(false);\n+    this.sanityCheckTxnID = false;\n+    setEncodeRegionIDIsSet(false);\n+    this.encodeRegionID = false;\n+    this.bkZkServersForReader = null;\n+    this.dlZkServersForWriter = null;\n+    this.dlZkServersForReader = null;\n+    this.aclRootPath = null;\n+    setFirstLogSegmentSeqNoIsSet(false);\n+    this.firstLogSegmentSeqNo = 0;\n+    setFederatedNamespaceIsSet(false);\n+    this.federatedNamespace = false;\n+  }\n+\n+  public String getBkZkServers() {\n+    return this.bkZkServers;\n+  }\n+\n+  public BKDLConfigFormat setBkZkServers(String bkZkServers) {\n+    this.bkZkServers = bkZkServers;\n+    return this;\n+  }\n+\n+  public void unsetBkZkServers() {\n+    this.bkZkServers = null;\n+  }\n+\n+  /** Returns true if field bkZkServers is set (has been assigned a value) and false otherwise */\n+  public boolean isSetBkZkServers() {\n+    return this.bkZkServers != null;\n+  }\n+\n+  public void setBkZkServersIsSet(boolean value) {\n+    if (!value) {\n+      this.bkZkServers = null;\n+    }\n+  }\n+\n+  public String getBkLedgersPath() {\n+    return this.bkLedgersPath;\n+  }\n+\n+  public BKDLConfigFormat setBkLedgersPath(String bkLedgersPath) {\n+    this.bkLedgersPath = bkLedgersPath;\n+    return this;\n+  }\n+\n+  public void unsetBkLedgersPath() {\n+    this.bkLedgersPath = null;\n+  }\n+\n+  /** Returns true if field bkLedgersPath is set (has been assigned a value) and false otherwise */\n+  public boolean isSetBkLedgersPath() {\n+    return this.bkLedgersPath != null;\n+  }\n+\n+  public void setBkLedgersPathIsSet(boolean value) {\n+    if (!value) {\n+      this.bkLedgersPath = null;\n+    }\n+  }\n+\n+  public boolean isSanityCheckTxnID() {\n+    return this.sanityCheckTxnID;\n+  }\n+\n+  public BKDLConfigFormat setSanityCheckTxnID(boolean sanityCheckTxnID) {\n+    this.sanityCheckTxnID = sanityCheckTxnID;\n+    setSanityCheckTxnIDIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetSanityCheckTxnID() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SANITYCHECKTXNID_ISSET_ID);\n+  }\n+\n+  /** Returns true if field sanityCheckTxnID is set (has been assigned a value) and false otherwise */\n+  public boolean isSetSanityCheckTxnID() {\n+    return EncodingUtils.testBit(__isset_bitfield, __SANITYCHECKTXNID_ISSET_ID);\n+  }\n+\n+  public void setSanityCheckTxnIDIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SANITYCHECKTXNID_ISSET_ID, value);\n+  }\n+\n+  public boolean isEncodeRegionID() {\n+    return this.encodeRegionID;\n+  }\n+\n+  public BKDLConfigFormat setEncodeRegionID(boolean encodeRegionID) {\n+    this.encodeRegionID = encodeRegionID;\n+    setEncodeRegionIDIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetEncodeRegionID() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENCODEREGIONID_ISSET_ID);\n+  }\n+\n+  /** Returns true if field encodeRegionID is set (has been assigned a value) and false otherwise */\n+  public boolean isSetEncodeRegionID() {\n+    return EncodingUtils.testBit(__isset_bitfield, __ENCODEREGIONID_ISSET_ID);\n+  }\n+\n+  public void setEncodeRegionIDIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENCODEREGIONID_ISSET_ID, value);\n+  }\n+\n+  public String getBkZkServersForReader() {\n+    return this.bkZkServersForReader;\n+  }\n+\n+  public BKDLConfigFormat setBkZkServersForReader(String bkZkServersForReader) {\n+    this.bkZkServersForReader = bkZkServersForReader;\n+    return this;\n+  }\n+\n+  public void unsetBkZkServersForReader() {\n+    this.bkZkServersForReader = null;\n+  }\n+\n+  /** Returns true if field bkZkServersForReader is set (has been assigned a value) and false otherwise */\n+  public boolean isSetBkZkServersForReader() {\n+    return this.bkZkServersForReader != null;\n+  }\n+\n+  public void setBkZkServersForReaderIsSet(boolean value) {\n+    if (!value) {\n+      this.bkZkServersForReader = null;\n+    }\n+  }\n+\n+  public String getDlZkServersForWriter() {\n+    return this.dlZkServersForWriter;\n+  }\n+\n+  public BKDLConfigFormat setDlZkServersForWriter(String dlZkServersForWriter) {\n+    this.dlZkServersForWriter = dlZkServersForWriter;\n+    return this;\n+  }\n+\n+  public void unsetDlZkServersForWriter() {\n+    this.dlZkServersForWriter = null;\n+  }\n+\n+  /** Returns true if field dlZkServersForWriter is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDlZkServersForWriter() {\n+    return this.dlZkServersForWriter != null;\n+  }\n+\n+  public void setDlZkServersForWriterIsSet(boolean value) {\n+    if (!value) {\n+      this.dlZkServersForWriter = null;\n+    }\n+  }\n+\n+  public String getDlZkServersForReader() {\n+    return this.dlZkServersForReader;\n+  }\n+\n+  public BKDLConfigFormat setDlZkServersForReader(String dlZkServersForReader) {\n+    this.dlZkServersForReader = dlZkServersForReader;\n+    return this;\n+  }\n+\n+  public void unsetDlZkServersForReader() {\n+    this.dlZkServersForReader = null;\n+  }\n+\n+  /** Returns true if field dlZkServersForReader is set (has been assigned a value) and false otherwise */\n+  public boolean isSetDlZkServersForReader() {\n+    return this.dlZkServersForReader != null;\n+  }\n+\n+  public void setDlZkServersForReaderIsSet(boolean value) {\n+    if (!value) {\n+      this.dlZkServersForReader = null;\n+    }\n+  }\n+\n+  public String getAclRootPath() {\n+    return this.aclRootPath;\n+  }\n+\n+  public BKDLConfigFormat setAclRootPath(String aclRootPath) {\n+    this.aclRootPath = aclRootPath;\n+    return this;\n+  }\n+\n+  public void unsetAclRootPath() {\n+    this.aclRootPath = null;\n+  }\n+\n+  /** Returns true if field aclRootPath is set (has been assigned a value) and false otherwise */\n+  public boolean isSetAclRootPath() {\n+    return this.aclRootPath != null;\n+  }\n+\n+  public void setAclRootPathIsSet(boolean value) {\n+    if (!value) {\n+      this.aclRootPath = null;\n+    }\n+  }\n+\n+  public long getFirstLogSegmentSeqNo() {\n+    return this.firstLogSegmentSeqNo;\n+  }\n+\n+  public BKDLConfigFormat setFirstLogSegmentSeqNo(long firstLogSegmentSeqNo) {\n+    this.firstLogSegmentSeqNo = firstLogSegmentSeqNo;\n+    setFirstLogSegmentSeqNoIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetFirstLogSegmentSeqNo() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTLOGSEGMENTSEQNO_ISSET_ID);\n+  }\n+\n+  /** Returns true if field firstLogSegmentSeqNo is set (has been assigned a value) and false otherwise */\n+  public boolean isSetFirstLogSegmentSeqNo() {\n+    return EncodingUtils.testBit(__isset_bitfield, __FIRSTLOGSEGMENTSEQNO_ISSET_ID);\n+  }\n+\n+  public void setFirstLogSegmentSeqNoIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTLOGSEGMENTSEQNO_ISSET_ID, value);\n+  }\n+\n+  public boolean isFederatedNamespace() {\n+    return this.federatedNamespace;\n+  }\n+\n+  public BKDLConfigFormat setFederatedNamespace(boolean federatedNamespace) {\n+    this.federatedNamespace = federatedNamespace;\n+    setFederatedNamespaceIsSet(true);\n+    return this;\n+  }\n+\n+  public void unsetFederatedNamespace() {\n+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEDERATEDNAMESPACE_ISSET_ID);\n+  }\n+\n+  /** Returns true if field federatedNamespace is set (has been assigned a value) and false otherwise */\n+  public boolean isSetFederatedNamespace() {\n+    return EncodingUtils.testBit(__isset_bitfield, __FEDERATEDNAMESPACE_ISSET_ID);\n+  }\n+\n+  public void setFederatedNamespaceIsSet(boolean value) {\n+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEDERATEDNAMESPACE_ISSET_ID, value);\n+  }\n+\n+  public void setFieldValue(_Fields field, Object value) {\n+    switch (field) {\n+    case BK_ZK_SERVERS:\n+      if (value == null) {\n+        unsetBkZkServers();\n+      } else {\n+        setBkZkServers((String)value);\n+      }\n+      break;\n+\n+    case BK_LEDGERS_PATH:\n+      if (value == null) {\n+        unsetBkLedgersPath();\n+      } else {\n+        setBkLedgersPath((String)value);\n+      }\n+      break;\n+\n+    case SANITY_CHECK_TXN_ID:\n+      if (value == null) {\n+        unsetSanityCheckTxnID();\n+      } else {\n+        setSanityCheckTxnID((Boolean)value);\n+      }\n+      break;\n+\n+    case ENCODE_REGION_ID:\n+      if (value == null) {\n+        unsetEncodeRegionID();\n+      } else {\n+        setEncodeRegionID((Boolean)value);\n+      }\n+      break;\n+\n+    case BK_ZK_SERVERS_FOR_READER:\n+      if (value == null) {\n+        unsetBkZkServersForReader();\n+      } else {\n+        setBkZkServersForReader((String)value);\n+      }\n+      break;\n+\n+    case DL_ZK_SERVERS_FOR_WRITER:\n+      if (value == null) {\n+        unsetDlZkServersForWriter();\n+      } else {\n+        setDlZkServersForWriter((String)value);\n+      }\n+      break;\n+\n+    case DL_ZK_SERVERS_FOR_READER:\n+      if (value == null) {\n+        unsetDlZkServersForReader();\n+      } else {\n+        setDlZkServersForReader((String)value);\n+      }\n+      break;\n+\n+    case ACL_ROOT_PATH:\n+      if (value == null) {\n+        unsetAclRootPath();\n+      } else {\n+        setAclRootPath((String)value);\n+      }\n+      break;\n+\n+    case FIRST_LOG_SEGMENT_SEQ_NO:\n+      if (value == null) {\n+        unsetFirstLogSegmentSeqNo();\n+      } else {\n+        setFirstLogSegmentSeqNo((Long)value);\n+      }\n+      break;\n+\n+    case FEDERATED_NAMESPACE:\n+      if (value == null) {\n+        unsetFederatedNamespace();\n+      } else {\n+        setFederatedNamespace((Boolean)value);\n+      }\n+      break;\n+\n+    }\n+  }\n+\n+  public Object getFieldValue(_Fields field) {\n+    switch (field) {\n+    case BK_ZK_SERVERS:\n+      return getBkZkServers();\n+\n+    case BK_LEDGERS_PATH:\n+      return getBkLedgersPath();\n+\n+    case SANITY_CHECK_TXN_ID:\n+      return isSanityCheckTxnID();\n+\n+    case ENCODE_REGION_ID:\n+      return isEncodeRegionID();\n+\n+    case BK_ZK_SERVERS_FOR_READER:\n+      return getBkZkServersForReader();\n+\n+    case DL_ZK_SERVERS_FOR_WRITER:\n+      return getDlZkServersForWriter();\n+\n+    case DL_ZK_SERVERS_FOR_READER:\n+      return getDlZkServersForReader();\n+\n+    case ACL_ROOT_PATH:\n+      return getAclRootPath();\n+\n+    case FIRST_LOG_SEGMENT_SEQ_NO:\n+      return getFirstLogSegmentSeqNo();\n+\n+    case FEDERATED_NAMESPACE:\n+      return isFederatedNamespace();\n+\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n+  public boolean isSet(_Fields field) {\n+    if (field == null) {\n+      throw new IllegalArgumentException();\n+    }\n+\n+    switch (field) {\n+    case BK_ZK_SERVERS:\n+      return isSetBkZkServers();\n+    case BK_LEDGERS_PATH:\n+      return isSetBkLedgersPath();\n+    case SANITY_CHECK_TXN_ID:\n+      return isSetSanityCheckTxnID();\n+    case ENCODE_REGION_ID:\n+      return isSetEncodeRegionID();\n+    case BK_ZK_SERVERS_FOR_READER:\n+      return isSetBkZkServersForReader();\n+    case DL_ZK_SERVERS_FOR_WRITER:\n+      return isSetDlZkServersForWriter();\n+    case DL_ZK_SERVERS_FOR_READER:\n+      return isSetDlZkServersForReader();\n+    case ACL_ROOT_PATH:\n+      return isSetAclRootPath();\n+    case FIRST_LOG_SEGMENT_SEQ_NO:\n+      return isSetFirstLogSegmentSeqNo();\n+    case FEDERATED_NAMESPACE:\n+      return isSetFederatedNamespace();\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override\n+  public boolean equals(Object that) {\n+    if (that == null)\n+      return false;\n+    if (that instanceof BKDLConfigFormat)\n+      return this.equals((BKDLConfigFormat)that);\n+    return false;\n+  }\n+\n+  public boolean equals(BKDLConfigFormat that) {\n+    if (that == null)\n+      return false;\n+\n+    boolean this_present_bkZkServers = true && this.isSetBkZkServers();\n+    boolean that_present_bkZkServers = true && that.isSetBkZkServers();\n+    if (this_present_bkZkServers || that_present_bkZkServers) {\n+      if (!(this_present_bkZkServers && that_present_bkZkServers))\n+        return false;\n+      if (!this.bkZkServers.equals(that.bkZkServers))\n+        return false;\n+    }\n+\n+    boolean this_present_bkLedgersPath = true && this.isSetBkLedgersPath();\n+    boolean that_present_bkLedgersPath = true && that.isSetBkLedgersPath();\n+    if (this_present_bkLedgersPath || that_present_bkLedgersPath) {\n+      if (!(this_present_bkLedgersPath && that_present_bkLedgersPath))\n+        return false;\n+      if (!this.bkLedgersPath.equals(that.bkLedgersPath))\n+        return false;\n+    }\n+\n+    boolean this_present_sanityCheckTxnID = true && this.isSetSanityCheckTxnID();\n+    boolean that_present_sanityCheckTxnID = true && that.isSetSanityCheckTxnID();\n+    if (this_present_sanityCheckTxnID || that_present_sanityCheckTxnID) {\n+      if (!(this_present_sanityCheckTxnID && that_present_sanityCheckTxnID))\n+        return false;\n+      if (this.sanityCheckTxnID != that.sanityCheckTxnID)\n+        return false;\n+    }\n+\n+    boolean this_present_encodeRegionID = true && this.isSetEncodeRegionID();\n+    boolean that_present_encodeRegionID = true && that.isSetEncodeRegionID();\n+    if (this_present_encodeRegionID || that_present_encodeRegionID) {\n+      if (!(this_present_encodeRegionID && that_present_encodeRegionID))\n+        return false;\n+      if (this.encodeRegionID != that.encodeRegionID)\n+        return false;\n+    }\n+\n+    boolean this_present_bkZkServersForReader = true && this.isSetBkZkServersForReader();\n+    boolean that_present_bkZkServersForReader = true && that.isSetBkZkServersForReader();\n+    if (this_present_bkZkServersForReader || that_present_bkZkServersForReader) {\n+      if (!(this_present_bkZkServersForReader && that_present_bkZkServersForReader))\n+        return false;\n+      if (!this.bkZkServersForReader.equals(that.bkZkServersForReader))\n+        return false;\n+    }\n+\n+    boolean this_present_dlZkServersForWriter = true && this.isSetDlZkServersForWriter();\n+    boolean that_present_dlZkServersForWriter = true && that.isSetDlZkServersForWriter();\n+    if (this_present_dlZkServersForWriter || that_present_dlZkServersForWriter) {\n+      if (!(this_present_dlZkServersForWriter && that_present_dlZkServersForWriter))\n+        return false;\n+      if (!this.dlZkServersForWriter.equals(that.dlZkServersForWriter))\n+        return false;\n+    }\n+\n+    boolean this_present_dlZkServersForReader = true && this.isSetDlZkServersForReader();\n+    boolean that_present_dlZkServersForReader = true && that.isSetDlZkServersForReader();\n+    if (this_present_dlZkServersForReader || that_present_dlZkServersForReader) {\n+      if (!(this_present_dlZkServersForReader && that_present_dlZkServersForReader))\n+        return false;\n+      if (!this.dlZkServersForReader.equals(that.dlZkServersForReader))\n+        return false;\n+    }\n+\n+    boolean this_present_aclRootPath = true && this.isSetAclRootPath();\n+    boolean that_present_aclRootPath = true && that.isSetAclRootPath();\n+    if (this_present_aclRootPath || that_present_aclRootPath) {\n+      if (!(this_present_aclRootPath && that_present_aclRootPath))\n+        return false;\n+      if (!this.aclRootPath.equals(that.aclRootPath))\n+        return false;\n+    }\n+\n+    boolean this_present_firstLogSegmentSeqNo = true && this.isSetFirstLogSegmentSeqNo();\n+    boolean that_present_firstLogSegmentSeqNo = true && that.isSetFirstLogSegmentSeqNo();\n+    if (this_present_firstLogSegmentSeqNo || that_present_firstLogSegmentSeqNo) {\n+      if (!(this_present_firstLogSegmentSeqNo && that_present_firstLogSegmentSeqNo))\n+        return false;\n+      if (this.firstLogSegmentSeqNo != that.firstLogSegmentSeqNo)\n+        return false;\n+    }\n+\n+    boolean this_present_federatedNamespace = true && this.isSetFederatedNamespace();\n+    boolean that_present_federatedNamespace = true && that.isSetFederatedNamespace();\n+    if (this_present_federatedNamespace || that_present_federatedNamespace) {\n+      if (!(this_present_federatedNamespace && that_present_federatedNamespace))\n+        return false;\n+      if (this.federatedNamespace != that.federatedNamespace)\n+        return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    List<Object> list = new ArrayList<Object>();\n+\n+    boolean present_bkZkServers = true && (isSetBkZkServers());\n+    list.add(present_bkZkServers);\n+    if (present_bkZkServers)\n+      list.add(bkZkServers);\n+\n+    boolean present_bkLedgersPath = true && (isSetBkLedgersPath());\n+    list.add(present_bkLedgersPath);\n+    if (present_bkLedgersPath)\n+      list.add(bkLedgersPath);\n+\n+    boolean present_sanityCheckTxnID = true && (isSetSanityCheckTxnID());\n+    list.add(present_sanityCheckTxnID);\n+    if (present_sanityCheckTxnID)\n+      list.add(sanityCheckTxnID);\n+\n+    boolean present_encodeRegionID = true && (isSetEncodeRegionID());\n+    list.add(present_encodeRegionID);\n+    if (present_encodeRegionID)\n+      list.add(encodeRegionID);\n+\n+    boolean present_bkZkServersForReader = true && (isSetBkZkServersForReader());\n+    list.add(present_bkZkServersForReader);\n+    if (present_bkZkServersForReader)\n+      list.add(bkZkServersForReader);\n+\n+    boolean present_dlZkServersForWriter = true && (isSetDlZkServersForWriter());\n+    list.add(present_dlZkServersForWriter);\n+    if (present_dlZkServersForWriter)\n+      list.add(dlZkServersForWriter);\n+\n+    boolean present_dlZkServersForReader = true && (isSetDlZkServersForReader());\n+    list.add(present_dlZkServersForReader);\n+    if (present_dlZkServersForReader)\n+      list.add(dlZkServersForReader);\n+\n+    boolean present_aclRootPath = true && (isSetAclRootPath());\n+    list.add(present_aclRootPath);\n+    if (present_aclRootPath)\n+      list.add(aclRootPath);\n+\n+    boolean present_firstLogSegmentSeqNo = true && (isSetFirstLogSegmentSeqNo());\n+    list.add(present_firstLogSegmentSeqNo);\n+    if (present_firstLogSegmentSeqNo)\n+      list.add(firstLogSegmentSeqNo);\n+\n+    boolean present_federatedNamespace = true && (isSetFederatedNamespace());\n+    list.add(present_federatedNamespace);\n+    if (present_federatedNamespace)\n+      list.add(federatedNamespace);\n+\n+    return list.hashCode();\n+  }\n+\n+  @Override\n+  public int compareTo(BKDLConfigFormat other) {\n+    if (!getClass().equals(other.getClass())) {\n+      return getClass().getName().compareTo(other.getClass().getName());\n+    }\n+\n+    int lastComparison = 0;\n+\n+    lastComparison = Boolean.valueOf(isSetBkZkServers()).compareTo(other.isSetBkZkServers());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetBkZkServers()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bkZkServers, other.bkZkServers);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetBkLedgersPath()).compareTo(other.isSetBkLedgersPath());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetBkLedgersPath()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bkLedgersPath, other.bkLedgersPath);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetSanityCheckTxnID()).compareTo(other.isSetSanityCheckTxnID());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetSanityCheckTxnID()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sanityCheckTxnID, other.sanityCheckTxnID);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetEncodeRegionID()).compareTo(other.isSetEncodeRegionID());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetEncodeRegionID()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encodeRegionID, other.encodeRegionID);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetBkZkServersForReader()).compareTo(other.isSetBkZkServersForReader());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetBkZkServersForReader()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bkZkServersForReader, other.bkZkServersForReader);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDlZkServersForWriter()).compareTo(other.isSetDlZkServersForWriter());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDlZkServersForWriter()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dlZkServersForWriter, other.dlZkServersForWriter);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetDlZkServersForReader()).compareTo(other.isSetDlZkServersForReader());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetDlZkServersForReader()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dlZkServersForReader, other.dlZkServersForReader);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetAclRootPath()).compareTo(other.isSetAclRootPath());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetAclRootPath()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aclRootPath, other.aclRootPath);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetFirstLogSegmentSeqNo()).compareTo(other.isSetFirstLogSegmentSeqNo());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetFirstLogSegmentSeqNo()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLogSegmentSeqNo, other.firstLogSegmentSeqNo);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    lastComparison = Boolean.valueOf(isSetFederatedNamespace()).compareTo(other.isSetFederatedNamespace());\n+    if (lastComparison != 0) {\n+      return lastComparison;\n+    }\n+    if (isSetFederatedNamespace()) {\n+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.federatedNamespace, other.federatedNamespace);\n+      if (lastComparison != 0) {\n+        return lastComparison;\n+      }\n+    }\n+    return 0;\n+  }\n+\n+  public _Fields fieldForId(int fieldId) {\n+    return _Fields.findByThriftId(fieldId);\n+  }\n+\n+  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n+    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n+  }\n+\n+  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n+    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"BKDLConfigFormat(\");\n+    boolean first = true;\n+\n+    if (isSetBkZkServers()) {\n+      sb.append(\"bkZkServers:\");\n+      if (this.bkZkServers == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.bkZkServers);\n+      }\n+      first = false;\n+    }\n+    if (isSetBkLedgersPath()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"bkLedgersPath:\");\n+      if (this.bkLedgersPath == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.bkLedgersPath);\n+      }\n+      first = false;\n+    }\n+    if (isSetSanityCheckTxnID()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"sanityCheckTxnID:\");\n+      sb.append(this.sanityCheckTxnID);\n+      first = false;\n+    }\n+    if (isSetEncodeRegionID()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"encodeRegionID:\");\n+      sb.append(this.encodeRegionID);\n+      first = false;\n+    }\n+    if (isSetBkZkServersForReader()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"bkZkServersForReader:\");\n+      if (this.bkZkServersForReader == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.bkZkServersForReader);\n+      }\n+      first = false;\n+    }\n+    if (isSetDlZkServersForWriter()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"dlZkServersForWriter:\");\n+      if (this.dlZkServersForWriter == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.dlZkServersForWriter);\n+      }\n+      first = false;\n+    }\n+    if (isSetDlZkServersForReader()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"dlZkServersForReader:\");\n+      if (this.dlZkServersForReader == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.dlZkServersForReader);\n+      }\n+      first = false;\n+    }\n+    if (isSetAclRootPath()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"aclRootPath:\");\n+      if (this.aclRootPath == null) {\n+        sb.append(\"null\");\n+      } else {\n+        sb.append(this.aclRootPath);\n+      }\n+      first = false;\n+    }\n+    if (isSetFirstLogSegmentSeqNo()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"firstLogSegmentSeqNo:\");\n+      sb.append(this.firstLogSegmentSeqNo);\n+      first = false;\n+    }\n+    if (isSetFederatedNamespace()) {\n+      if (!first) sb.append(\", \");\n+      sb.append(\"federatedNamespace:\");\n+      sb.append(this.federatedNamespace);\n+      first = false;\n+    }\n+    sb.append(\")\");\n+    return sb.toString();\n+  }\n+\n+  public void validate() throws org.apache.thrift.TException {\n+    // check for required fields\n+    // check for sub-struct validity\n+  }\n+\n+  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n+    try {\n+      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n+    } catch (org.apache.thrift.TException te) {\n+      throw new java.io.IOException(te);\n+    }\n+  }\n+\n+  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n+    try {\n+      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.\n+      __isset_bitfield = 0;\n+      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n+    } catch (org.apache.thrift.TException te) {\n+      throw new java.io.IOException(te);\n+    }\n+  }\n+\n+  private static class BKDLConfigFormatStandardSchemeFactory implements SchemeFactory {\n+    public BKDLConfigFormatStandardScheme getScheme() {\n+      return new BKDLConfigFormatStandardScheme();\n+    }\n+  }\n+\n+  private static class BKDLConfigFormatStandardScheme extends StandardScheme<BKDLConfigFormat> {\n+\n+    public void read(org.apache.thrift.protocol.TProtocol iprot, BKDLConfigFormat struct) throws org.apache.thrift.TException {\n+      org.apache.thrift.protocol.TField schemeField;\n+      iprot.readStructBegin();\n+      while (true)\n+      {\n+        schemeField = iprot.readFieldBegin();\n+        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n+          break;\n+        }\n+        switch (schemeField.id) {\n+          case 1: // BK_ZK_SERVERS\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.bkZkServers = iprot.readString();\n+              struct.setBkZkServersIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 2: // BK_LEDGERS_PATH\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.bkLedgersPath = iprot.readString();\n+              struct.setBkLedgersPathIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 3: // SANITY_CHECK_TXN_ID\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.sanityCheckTxnID = iprot.readBool();\n+              struct.setSanityCheckTxnIDIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 4: // ENCODE_REGION_ID\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.encodeRegionID = iprot.readBool();\n+              struct.setEncodeRegionIDIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 5: // BK_ZK_SERVERS_FOR_READER\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.bkZkServersForReader = iprot.readString();\n+              struct.setBkZkServersForReaderIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 6: // DL_ZK_SERVERS_FOR_WRITER\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.dlZkServersForWriter = iprot.readString();\n+              struct.setDlZkServersForWriterIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 7: // DL_ZK_SERVERS_FOR_READER\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.dlZkServersForReader = iprot.readString();\n+              struct.setDlZkServersForReaderIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 8: // ACL_ROOT_PATH\n+            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {\n+              struct.aclRootPath = iprot.readString();\n+              struct.setAclRootPathIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 9: // FIRST_LOG_SEGMENT_SEQ_NO\n+            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {\n+              struct.firstLogSegmentSeqNo = iprot.readI64();\n+              struct.setFirstLogSegmentSeqNoIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          case 10: // FEDERATED_NAMESPACE\n+            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {\n+              struct.federatedNamespace = iprot.readBool();\n+              struct.setFederatedNamespaceIsSet(true);\n+            } else { \n+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+            }\n+            break;\n+          default:\n+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n+        }\n+        iprot.readFieldEnd();\n+      }\n+      iprot.readStructEnd();\n+\n+      // check for required fields of primitive type, which can't be checked in the validate method\n+      struct.validate();\n+    }\n+\n+    public void write(org.apache.thrift.protocol.TProtocol oprot, BKDLConfigFormat struct) throws org.apache.thrift.TException {\n+      struct.validate();\n+\n+      oprot.writeStructBegin(STRUCT_DESC);\n+      if (struct.bkZkServers != null) {\n+        if (struct.isSetBkZkServers()) {\n+          oprot.writeFieldBegin(BK_ZK_SERVERS_FIELD_DESC);\n+          oprot.writeString(struct.bkZkServers);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.bkLedgersPath != null) {\n+        if (struct.isSetBkLedgersPath()) {\n+          oprot.writeFieldBegin(BK_LEDGERS_PATH_FIELD_DESC);\n+          oprot.writeString(struct.bkLedgersPath);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.isSetSanityCheckTxnID()) {\n+        oprot.writeFieldBegin(SANITY_CHECK_TXN_ID_FIELD_DESC);\n+        oprot.writeBool(struct.sanityCheckTxnID);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetEncodeRegionID()) {\n+        oprot.writeFieldBegin(ENCODE_REGION_ID_FIELD_DESC);\n+        oprot.writeBool(struct.encodeRegionID);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.bkZkServersForReader != null) {\n+        if (struct.isSetBkZkServersForReader()) {\n+          oprot.writeFieldBegin(BK_ZK_SERVERS_FOR_READER_FIELD_DESC);\n+          oprot.writeString(struct.bkZkServersForReader);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.dlZkServersForWriter != null) {\n+        if (struct.isSetDlZkServersForWriter()) {\n+          oprot.writeFieldBegin(DL_ZK_SERVERS_FOR_WRITER_FIELD_DESC);\n+          oprot.writeString(struct.dlZkServersForWriter);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.dlZkServersForReader != null) {\n+        if (struct.isSetDlZkServersForReader()) {\n+          oprot.writeFieldBegin(DL_ZK_SERVERS_FOR_READER_FIELD_DESC);\n+          oprot.writeString(struct.dlZkServersForReader);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.aclRootPath != null) {\n+        if (struct.isSetAclRootPath()) {\n+          oprot.writeFieldBegin(ACL_ROOT_PATH_FIELD_DESC);\n+          oprot.writeString(struct.aclRootPath);\n+          oprot.writeFieldEnd();\n+        }\n+      }\n+      if (struct.isSetFirstLogSegmentSeqNo()) {\n+        oprot.writeFieldBegin(FIRST_LOG_SEGMENT_SEQ_NO_FIELD_DESC);\n+        oprot.writeI64(struct.firstLogSegmentSeqNo);\n+        oprot.writeFieldEnd();\n+      }\n+      if (struct.isSetFederatedNamespace()) {\n+        oprot.writeFieldBegin(FEDERATED_NAMESPACE_FIELD_DESC);\n+        oprot.writeBool(struct.federatedNamespace);\n+        oprot.writeFieldEnd();\n+      }\n+      oprot.writeFieldStop();\n+      oprot.writeStructEnd();\n+    }\n+\n+  }\n+\n+  private static class BKDLConfigFormatTupleSchemeFactory implements SchemeFactory {\n+    public BKDLConfigFormatTupleScheme getScheme() {\n+      return new BKDLConfigFormatTupleScheme();\n+    }\n+  }\n+\n+  private static class BKDLConfigFormatTupleScheme extends TupleScheme<BKDLConfigFormat> {\n+\n+    @Override\n+    public void write(org.apache.thrift.protocol.TProtocol prot, BKDLConfigFormat struct) throws org.apache.thrift.TException {\n+      TTupleProtocol oprot = (TTupleProtocol) prot;\n+      BitSet optionals = new BitSet();\n+      if (struct.isSetBkZkServers()) {\n+        optionals.set(0);\n+      }\n+      if (struct.isSetBkLedgersPath()) {\n+        optionals.set(1);\n+      }\n+      if (struct.isSetSanityCheckTxnID()) {\n+        optionals.set(2);\n+      }\n+      if (struct.isSetEncodeRegionID()) {\n+        optionals.set(3);\n+      }\n+      if (struct.isSetBkZkServersForReader()) {\n+        optionals.set(4);\n+      }\n+      if (struct.isSetDlZkServersForWriter()) {\n+        optionals.set(5);\n+      }\n+      if (struct.isSetDlZkServersForReader()) {\n+        optionals.set(6);\n+      }\n+      if (struct.isSetAclRootPath()) {\n+        optionals.set(7);\n+      }\n+      if (struct.isSetFirstLogSegmentSeqNo()) {\n+        optionals.set(8);\n+      }\n+      if (struct.isSetFederatedNamespace()) {\n+        optionals.set(9);\n+      }\n+      oprot.writeBitSet(optionals, 10);\n+      if (struct.isSetBkZkServers()) {\n+        oprot.writeString(struct.bkZkServers);\n+      }\n+      if (struct.isSetBkLedgersPath()) {\n+        oprot.writeString(struct.bkLedgersPath);\n+      }\n+      if (struct.isSetSanityCheckTxnID()) {\n+        oprot.writeBool(struct.sanityCheckTxnID);\n+      }\n+      if (struct.isSetEncodeRegionID()) {\n+        oprot.writeBool(struct.encodeRegionID);\n+      }\n+      if (struct.isSetBkZkServersForReader()) {\n+        oprot.writeString(struct.bkZkServersForReader);\n+      }\n+      if (struct.isSetDlZkServersForWriter()) {\n+        oprot.writeString(struct.dlZkServersForWriter);\n+      }\n+      if (struct.isSetDlZkServersForReader()) {\n+        oprot.writeString(struct.dlZkServersForReader);\n+      }\n+      if (struct.isSetAclRootPath()) {\n+        oprot.writeString(struct.aclRootPath);\n+      }\n+      if (struct.isSetFirstLogSegmentSeqNo()) {\n+        oprot.writeI64(struct.firstLogSegmentSeqNo);\n+      }\n+      if (struct.isSetFederatedNamespace()) {\n+        oprot.writeBool(struct.federatedNamespace);\n+      }\n+    }\n+\n+    @Override\n+    public void read(org.apache.thrift.protocol.TProtocol prot, BKDLConfigFormat struct) throws org.apache.thrift.TException {\n+      TTupleProtocol iprot = (TTupleProtocol) prot;\n+      BitSet incoming = iprot.readBitSet(10);\n+      if (incoming.get(0)) {\n+        struct.bkZkServers = iprot.readString();\n+        struct.setBkZkServersIsSet(true);\n+      }\n+      if (incoming.get(1)) {\n+        struct.bkLedgersPath = iprot.readString();\n+        struct.setBkLedgersPathIsSet(true);\n+      }\n+      if (incoming.get(2)) {\n+        struct.sanityCheckTxnID = iprot.readBool();\n+        struct.setSanityCheckTxnIDIsSet(true);\n+      }\n+      if (incoming.get(3)) {\n+        struct.encodeRegionID = iprot.readBool();\n+        struct.setEncodeRegionIDIsSet(true);\n+      }\n+      if (incoming.get(4)) {\n+        struct.bkZkServersForReader = iprot.readString();\n+        struct.setBkZkServersForReaderIsSet(true);\n+      }\n+      if (incoming.get(5)) {\n+        struct.dlZkServersForWriter = iprot.readString();\n+        struct.setDlZkServersForWriterIsSet(true);\n+      }\n+      if (incoming.get(6)) {\n+        struct.dlZkServersForReader = iprot.readString();\n+        struct.setDlZkServersForReaderIsSet(true);\n+      }\n+      if (incoming.get(7)) {\n+        struct.aclRootPath = iprot.readString();\n+        struct.setAclRootPathIsSet(true);\n+      }\n+      if (incoming.get(8)) {\n+        struct.firstLogSegmentSeqNo = iprot.readI64();\n+        struct.setFirstLogSegmentSeqNoIsSet(true);\n+      }\n+      if (incoming.get(9)) {\n+        struct.federatedNamespace = iprot.readBool();\n+        struct.setFederatedNamespaceIsSet(true);\n+      }\n+    }\n+  }\n+\n+}\n+"},{"sha":"efee3ca2845c4d4a382e4bd7ce017d2b17a5c849","filename":"src/main/java/org/apache/distributedlog/thrift/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/46e6b70feda2e8ad61ba13928df93b2c94d3dd4e/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fthrift%2Fpackage-info.java?ref=46e6b70feda2e8ad61ba13928df93b2c94d3dd4e","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Generated thrift code.\n+ */\n+package org.apache.distributedlog.thrift;\n\\ No newline at end of file"}]}