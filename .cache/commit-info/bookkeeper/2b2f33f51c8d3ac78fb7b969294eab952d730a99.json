{"sha":"2b2f33f51c8d3ac78fb7b969294eab952d730a99","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjJiMmYzM2Y1MWM4ZDNhYzc4ZmI3Yjk2OTI5NGVhYjk1MmQ3MzBhOTk=","commit":{"author":{"name":"Jon Derrick","email":"jonathan.derrickk@gmail.com","date":"2016-10-13T07:47:11Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-10-13T07:47:11Z"},"message":"DL-32: Fix Findbug warnings\n\n- Bump the version to 3.0.3\n- Fix all the findbug warnings\n- Enable findbugs:check on travis ci\n\nAuthor: Jon Derrick <jonathan.derrickk@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #19 from jderrickk/jd/fix_findbugs_error and squashes the following commits:\n\nc48c89c [Jon Derrick] Merge branch 'master' into jd/fix_findbugs_error\nd9b0425 [Jon Derrick] verify findbugs on travis ci\n985501b [Jon Derrick] Fix findbug errors on all modules\n18e8267 [Jon Derrick] Remove distributedlog-example\nffa8361 [Jon Derrick] Fix findbugs in distributedlog-protocol","tree":{"sha":"038080dfab5cf3c36295d97c53dac1ae6fd61667","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/038080dfab5cf3c36295d97c53dac1ae6fd61667"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/2b2f33f51c8d3ac78fb7b969294eab952d730a99","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2b2f33f51c8d3ac78fb7b969294eab952d730a99","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/2b2f33f51c8d3ac78fb7b969294eab952d730a99","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2b2f33f51c8d3ac78fb7b969294eab952d730a99/comments","author":{"login":"jderrickk","id":19365668,"node_id":"MDQ6VXNlcjE5MzY1NjY4","avatar_url":"https://avatars.githubusercontent.com/u/19365668?v=4","gravatar_id":"","url":"https://api.github.com/users/jderrickk","html_url":"https://github.com/jderrickk","followers_url":"https://api.github.com/users/jderrickk/followers","following_url":"https://api.github.com/users/jderrickk/following{/other_user}","gists_url":"https://api.github.com/users/jderrickk/gists{/gist_id}","starred_url":"https://api.github.com/users/jderrickk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jderrickk/subscriptions","organizations_url":"https://api.github.com/users/jderrickk/orgs","repos_url":"https://api.github.com/users/jderrickk/repos","events_url":"https://api.github.com/users/jderrickk/events{/privacy}","received_events_url":"https://api.github.com/users/jderrickk/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a"}],"stats":{"total":211,"additions":103,"deletions":108},"files":[{"sha":"b0cea24b89dfdb49a070aa605a70f4e56208c1c8","filename":"src/main/java/com/twitter/distributedlog/BKAbstractLogWriter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAbstractLogWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAbstractLogWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAbstractLogWriter.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -356,8 +356,10 @@ private void truncateLogSegmentsIfNecessary(BKLogWriteHandler writeHandler) {\n \n         // skip scheduling if there is task that's already running\n         //\n-        if (truncationEnabled && ((lastTruncationAttempt == null) || lastTruncationAttempt.isDefined())) {\n-            lastTruncationAttempt = writeHandler.purgeLogSegmentsOlderThanTimestamp(minTimestampToKeep);\n+        synchronized (this) {\n+            if (truncationEnabled && ((lastTruncationAttempt == null) || lastTruncationAttempt.isDefined())) {\n+                lastTruncationAttempt = writeHandler.purgeLogSegmentsOlderThanTimestamp(minTimestampToKeep);\n+            }\n         }\n     }\n "},{"sha":"7d3d53d5ef6c2edeff118600ccce22f288d5e9f5","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogReaderDLSN.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReaderDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReaderDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogReaderDLSN.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -90,6 +90,7 @@ public LogRecordWithDLSN apply(List<LogRecordWithDLSN> records) {\n     private final AtomicReference<Throwable> lastException = new AtomicReference<Throwable>();\n     private final ScheduledExecutorService executorService;\n     private final ConcurrentLinkedQueue<PendingReadRequest> pendingRequests = new ConcurrentLinkedQueue<PendingReadRequest>();\n+    private final Object scheduleLock = new Object();\n     private final AtomicLong scheduleCount = new AtomicLong(0);\n     final private Stopwatch scheduleDelayStopwatch;\n     final private Stopwatch readNextDelayStopwatch;\n@@ -112,7 +113,7 @@ public LogRecordWithDLSN apply(List<LogRecordWithDLSN> records) {\n     private final Runnable BACKGROUND_READ_SCHEDULER = new Runnable() {\n         @Override\n         public void run() {\n-            synchronized (scheduleCount) {\n+            synchronized (scheduleLock) {\n                 backgroundScheduleTask = null;\n             }\n             scheduleBackgroundRead();\n@@ -485,7 +486,7 @@ public Future<Void> asyncClose() {\n             LOG.info(\"{}: Failed to cancel the background idle reader timeout task\", bkLedgerManager.getFullyQualifiedName());\n         }\n \n-        synchronized (scheduleCount) {\n+        synchronized (scheduleLock) {\n             if (null != backgroundScheduleTask) {\n                 backgroundScheduleTask.cancel(true);\n             }\n@@ -508,7 +509,7 @@ private void cancelAllPendingReads(Throwable throwExc) {\n \n     @Override\n     public void run() {\n-        synchronized(scheduleCount) {\n+        synchronized(scheduleLock) {\n             if (scheduleDelayStopwatch.isRunning()) {\n                 scheduleLatency.registerSuccessfulEvent(scheduleDelayStopwatch.stop().elapsed(TimeUnit.MICROSECONDS));\n             }\n@@ -533,11 +534,11 @@ public void run() {\n                         backgroundReaderRunTime.registerSuccessfulEvent(runTime.stop().elapsed(TimeUnit.MICROSECONDS));\n                         return;\n                     }\n-                }\n \n-                if (disableProcessingReadRequests) {\n-                    LOG.info(\"Reader of {} is forced to stop processing read requests\", bkLedgerManager.getFullyQualifiedName());\n-                    return;\n+                    if (disableProcessingReadRequests) {\n+                        LOG.info(\"Reader of {} is forced to stop processing read requests\", bkLedgerManager.getFullyQualifiedName());\n+                        return;\n+                    }\n                 }\n \n                 // If the oldest pending promise is interrupted then we must mark"},{"sha":"f1594f994294a1a715883ad785182a1f1dab1c83","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogWriter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -458,7 +458,7 @@ Future<Long> flushAndCommit() {\n             }\n         }\n         if (null == writerFuture) {\n-            return Future.value(lastTxId);\n+            return Future.value(getLastTxId());\n         }\n         return writerFuture.flatMap(new AbstractFunction1<BKLogSegmentWriter, Future<Long>>() {\n             @Override"},{"sha":"6a9d860edb171d432afa0d711c2219dae4b8cee9","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -486,10 +486,11 @@ public synchronized void unregisterListener(LogSegmentListener listener) {\n     }\n \n     public void checkClosedOrInError(String operation) throws AlreadyClosedException {\n-        if (null != closePromise) {\n-            throw new AlreadyClosedException(\"Executing \" + operation + \" on already closed DistributedLogManager\");\n+        synchronized (this) {\n+            if (null != closePromise) {\n+                throw new AlreadyClosedException(\"Executing \" + operation + \" on already closed DistributedLogManager\");\n+            }\n         }\n-\n         if (null != writerBKC) {\n             writerBKC.checkClosedOrInError();\n         }"},{"sha":"573679a9746bd0fdc3c7382e722710b3592dd05f","filename":"src/main/java/com/twitter/distributedlog/BKLogWriteHandler.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -108,7 +108,6 @@ class BKLogWriteHandler extends BKLogHandler {\n     protected final boolean sanityCheckTxnId;\n     protected final boolean validateLogSegmentSequenceNumber;\n     protected final int regionId;\n-    protected volatile boolean closed = false;\n     protected final RollingPolicy rollingPolicy;\n     protected Future<? extends DistributedLock> lockFuture = null;\n     protected final PermitLimiter writeLimiter;\n@@ -225,7 +224,7 @@ public Future<Long> apply(List<LogSegmentMetadata> segmentList) {\n \n         // Rolling Policy\n         if (conf.getLogSegmentRollingIntervalMinutes() > 0) {\n-            rollingPolicy = new TimeBasedRollingPolicy(conf.getLogSegmentRollingIntervalMinutes() * 60 * 1000);\n+            rollingPolicy = new TimeBasedRollingPolicy(conf.getLogSegmentRollingIntervalMinutes() * 60 * 1000L);\n         } else {\n             rollingPolicy = new SizeBasedRollingPolicy(conf.getMaxLogSegmentBytes());\n         }"},{"sha":"cef5ddb0969dacde034b649a0952a10f7f8e3218","filename":"src/main/java/com/twitter/distributedlog/BKSyncLogReaderDLSN.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReaderDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReaderDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKSyncLogReaderDLSN.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -101,7 +101,7 @@ private void setReadAheadCallback(ReadAheadCallback callback) {\n         }\n     }\n \n-    private void setLastSeenDLSN(DLSN dlsn) {\n+    private synchronized void setLastSeenDLSN(DLSN dlsn) {\n         synchronized (sharedLock) {\n             this.lastSeenDLSN = dlsn;\n         }"},{"sha":"5c5028260335b12714ea3e91c30cd93d7d3258f8","filename":"src/main/java/com/twitter/distributedlog/DistributedLogConstants.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDistributedLogConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDistributedLogConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDistributedLogConstants.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -57,7 +57,7 @@ public class DistributedLogConstants {\n     public static final String INPROGRESS_LOGSEGMENT_PREFIX = \"inprogress\";\n     public static final String COMPLETED_LOGSEGMENT_PREFIX = \"logrecs\";\n     public static final String DISALLOW_PLACEMENT_IN_REGION_FEATURE_NAME = \"disallow_bookie_placement\";\n-    public static final byte[] CONTROL_RECORD_CONTENT = \"control\".getBytes(UTF_8);\n+    static final byte[] CONTROL_RECORD_CONTENT = \"control\".getBytes(UTF_8);\n \n     // An ACL that gives all permissions to node creators and read permissions only to everyone else.\n     public static final List<ACL> EVERYONE_READ_CREATOR_ALL ="},{"sha":"994b141d02a01fabd6fefe9be073a8b798cf1c4e","filename":"src/main/java/com/twitter/distributedlog/LogSegmentMetadata.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -622,7 +622,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n \n     static LogSegmentMetadata parseDataV1(String path, byte[] data, String[] parts)\n         throws IOException {\n-        long versionStatusCount = Long.valueOf(parts[0]);\n+        long versionStatusCount = Long.parseLong(parts[0]);\n \n         long version = versionStatusCount & METADATA_VERSION_MASK;\n         assert (version >= Integer.MIN_VALUE && version <= Integer.MAX_VALUE);\n@@ -637,8 +637,8 @@ static LogSegmentMetadata parseDataV1(String path, byte[] data, String[] parts)\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 3) {\n-            long ledgerId = Long.valueOf(parts[1]);\n-            long txId = Long.valueOf(parts[2]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long txId = Long.parseLong(parts[2]);\n             return new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n                     .setRegionId(regionId)\n                     .setStatus(status)\n@@ -647,10 +647,10 @@ static LogSegmentMetadata parseDataV1(String path, byte[] data, String[] parts)\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.valueOf(parts[1]);\n-            long firstTxId = Long.valueOf(parts[2]);\n-            long lastTxId = Long.valueOf(parts[3]);\n-            long completionTime = Long.valueOf(parts[4]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long firstTxId = Long.parseLong(parts[2]);\n+            long lastTxId = Long.parseLong(parts[3]);\n+            long completionTime = Long.parseLong(parts[4]);\n             return new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n@@ -667,7 +667,7 @@ static LogSegmentMetadata parseDataV1(String path, byte[] data, String[] parts)\n \n     static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n         throws IOException {\n-        long versionStatusCount = Long.valueOf(parts[0]);\n+        long versionStatusCount = Long.parseLong(parts[0]);\n \n         long version = versionStatusCount & METADATA_VERSION_MASK;\n         assert (version >= Integer.MIN_VALUE && version <= Integer.MAX_VALUE);\n@@ -682,9 +682,9 @@ static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 4) {\n-            long ledgerId = Long.valueOf(parts[1]);\n-            long txId = Long.valueOf(parts[2]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[3]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long txId = Long.parseLong(parts[2]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n             return new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n                 .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n                 .setRegionId(regionId)\n@@ -694,13 +694,13 @@ static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.valueOf(parts[1]);\n-            long firstTxId = Long.valueOf(parts[2]);\n-            long lastTxId = Long.valueOf(parts[3]);\n-            long completionTime = Long.valueOf(parts[4]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[5]);\n-            long lastEntryId = Long.valueOf(parts[6]);\n-            long lastSlotId = Long.valueOf(parts[7]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long firstTxId = Long.parseLong(parts[2]);\n+            long lastTxId = Long.parseLong(parts[3]);\n+            long completionTime = Long.parseLong(parts[4]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[5]);\n+            long lastEntryId = Long.parseLong(parts[6]);\n+            long lastSlotId = Long.parseLong(parts[7]);\n             return new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n@@ -721,7 +721,7 @@ static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n \n     static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[] data, String[] parts)\n         throws IOException {\n-        long versionStatusCount = Long.valueOf(parts[0]);\n+        long versionStatusCount = Long.parseLong(parts[0]);\n \n         long version = versionStatusCount & METADATA_VERSION_MASK;\n         assert (version >= Integer.MIN_VALUE && version <= Integer.MAX_VALUE);\n@@ -737,11 +737,11 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 6) {\n-            long ledgerId = Long.valueOf(parts[1]);\n-            long txId = Long.valueOf(parts[2]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[3]);\n-            long minActiveEntryId = Long.valueOf(parts[4]);\n-            long minActiveSlotId = Long.valueOf(parts[5]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long txId = Long.parseLong(parts[2]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n+            long minActiveEntryId = Long.parseLong(parts[4]);\n+            long minActiveSlotId = Long.parseLong(parts[5]);\n \n             LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n                 .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n@@ -757,15 +757,15 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.valueOf(parts[1]);\n-            long firstTxId = Long.valueOf(parts[2]);\n-            long lastTxId = Long.valueOf(parts[3]);\n-            long completionTime = Long.valueOf(parts[4]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[5]);\n-            long lastEntryId = Long.valueOf(parts[6]);\n-            long lastSlotId = Long.valueOf(parts[7]);\n-            long minActiveEntryId = Long.valueOf(parts[8]);\n-            long minActiveSlotId = Long.valueOf(parts[9]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long firstTxId = Long.parseLong(parts[2]);\n+            long lastTxId = Long.parseLong(parts[3]);\n+            long completionTime = Long.parseLong(parts[4]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[5]);\n+            long lastEntryId = Long.parseLong(parts[6]);\n+            long lastSlotId = Long.parseLong(parts[7]);\n+            long minActiveEntryId = Long.parseLong(parts[8]);\n+            long minActiveSlotId = Long.parseLong(parts[9]);\n             LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n@@ -791,7 +791,7 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n \n     static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] data, String[] parts)\n         throws IOException {\n-        long versionStatusCount = Long.valueOf(parts[0]);\n+        long versionStatusCount = Long.parseLong(parts[0]);\n \n         long version = versionStatusCount & METADATA_VERSION_MASK;\n         assert (version >= Integer.MIN_VALUE && version <= Integer.MAX_VALUE);\n@@ -807,12 +807,12 @@ static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] da\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 7) {\n-            long ledgerId = Long.valueOf(parts[1]);\n-            long txId = Long.valueOf(parts[2]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[3]);\n-            long minActiveEntryId = Long.valueOf(parts[4]);\n-            long minActiveSlotId = Long.valueOf(parts[5]);\n-            long startSequenceId = Long.valueOf(parts[6]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long txId = Long.parseLong(parts[2]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n+            long minActiveEntryId = Long.parseLong(parts[4]);\n+            long minActiveSlotId = Long.parseLong(parts[5]);\n+            long startSequenceId = Long.parseLong(parts[6]);\n \n             LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n                     .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n@@ -827,16 +827,16 @@ static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] da\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.valueOf(parts[1]);\n-            long firstTxId = Long.valueOf(parts[2]);\n-            long lastTxId = Long.valueOf(parts[3]);\n-            long completionTime = Long.valueOf(parts[4]);\n-            long logSegmentSequenceNumber = Long.valueOf(parts[5]);\n-            long lastEntryId = Long.valueOf(parts[6]);\n-            long lastSlotId = Long.valueOf(parts[7]);\n-            long minActiveEntryId = Long.valueOf(parts[8]);\n-            long minActiveSlotId = Long.valueOf(parts[9]);\n-            long startSequenceId = Long.valueOf(parts[10]);\n+            long ledgerId = Long.parseLong(parts[1]);\n+            long firstTxId = Long.parseLong(parts[2]);\n+            long lastTxId = Long.parseLong(parts[3]);\n+            long completionTime = Long.parseLong(parts[4]);\n+            long logSegmentSequenceNumber = Long.parseLong(parts[5]);\n+            long lastEntryId = Long.parseLong(parts[6]);\n+            long lastSlotId = Long.parseLong(parts[7]);\n+            long minActiveEntryId = Long.parseLong(parts[8]);\n+            long minActiveSlotId = Long.parseLong(parts[9]);\n+            long startSequenceId = Long.parseLong(parts[10]);\n             LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n                     .setInprogress(false)\n                     .setLastTxId(lastTxId)\n@@ -867,7 +867,7 @@ static LogSegmentMetadata parseData(String path, byte[] data, boolean skipMinVer\n         String[] parts = new String(data, UTF_8).split(\";\");\n         long version;\n         try {\n-            version = Long.valueOf(parts[0]) & METADATA_VERSION_MASK;\n+            version = Long.parseLong(parts[0]) & METADATA_VERSION_MASK;\n         } catch (Exception exc) {\n             throw new IOException(\"Invalid ledger entry, \"\n                 + new String(data, UTF_8));"},{"sha":"c446a8bb0fe1b60106f13a408ac8a14fb7fa2a63","filename":"src/main/java/com/twitter/distributedlog/MaxTxId.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FMaxTxId.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FMaxTxId.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FMaxTxId.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -89,7 +89,7 @@ synchronized void store(long maxTxId) throws IOException {\n             }\n             String txidStr = Long.toString(maxTxId);\n             try {\n-                Stat stat = zkc.get().setData(path, txidStr.getBytes(\"UTF-8\"), -1);\n+                zkc.get().setData(path, txidStr.getBytes(\"UTF-8\"), -1);\n                 currentMax = maxTxId;\n             } catch (Exception e) {\n                 LOG.error(\"Error writing new MaxTxId value {}\", maxTxId, e);"},{"sha":"e2604824b558d90238bce6fdef0c6de72120c067","filename":"src/main/java/com/twitter/distributedlog/function/VoidFunctions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffunction%2FVoidFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffunction%2FVoidFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffunction%2FVoidFunctions.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -23,7 +23,7 @@\n \n public class VoidFunctions {\n \n-    public static AbstractFunction1<List<Void>, Void> LIST_TO_VOID_FUNC =\n+    public static final AbstractFunction1<List<Void>, Void> LIST_TO_VOID_FUNC =\n             new AbstractFunction1<List<Void>, Void>() {\n                 @Override\n                 public Void apply(List<Void> list) {"},{"sha":"c0796a11695c9e2c151e29b0f86ead07693c9d2d","filename":"src/main/java/com/twitter/distributedlog/impl/ZKLogSegmentMetadataStore.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FZKLogSegmentMetadataStore.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -326,7 +326,7 @@ public void registerLogSegmentListener(String logSegmentsPath,\n                 listenerSet.add(listener);\n                 if (!listeners.containsKey(logSegmentsPath)) {\n                     // listener set has been removed, add it back\n-                    listeners.putIfAbsent(logSegmentsPath, listenerSet);\n+                    listeners.put(logSegmentsPath, listenerSet);\n                 }\n             }\n             new ReadLogSegmentsTask(logSegmentsPath, this).run();"},{"sha":"0a8f28b0ba992013217d2882b1f712235a980c1a","filename":"src/main/java/com/twitter/distributedlog/impl/federated/FederatedZKLogMetadataStore.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FFederatedZKLogMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FFederatedZKLogMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FFederatedZKLogMetadataStore.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -206,9 +206,10 @@ public FederatedZKLogMetadataStore(\n         Set<URI> uris = FutureUtils.result(fetchSubNamespaces(this));\n         for (URI uri : uris) {\n             SubNamespace subNs = new SubNamespace(uri);\n-            subNamespaces.putIfAbsent(uri, subNs);\n-            subNs.watch();\n-            logger.info(\"Watched sub namespace {}\", uri);\n+            if (null == subNamespaces.putIfAbsent(uri, subNs)) {\n+                subNs.watch();\n+                logger.info(\"Watched sub namespace {}\", uri);\n+            }\n         }\n \n         logger.info(\"Federated ZK LogMetadataStore is initialized for {}\", namespace);\n@@ -598,10 +599,19 @@ void createLogInNamespaceSync(URI uri, String logName)\n     }\n \n     void setZkSubnamespacesVersion(int zkVersion) {\n-        synchronized (zkSubnamespacesVersion) {\n-            Integer oldVersion = zkSubnamespacesVersion.get();\n-            if (null == oldVersion || oldVersion < zkVersion) {\n-                zkSubnamespacesVersion.set(zkVersion);\n+        Integer oldVersion;\n+        boolean done = false;\n+        while (!done) {\n+            oldVersion = zkSubnamespacesVersion.get();\n+            if (null == oldVersion) {\n+                done = zkSubnamespacesVersion.compareAndSet(null, zkVersion);\n+                continue;\n+            }\n+            if (oldVersion < zkVersion) {\n+                done = zkSubnamespacesVersion.compareAndSet(oldVersion, zkVersion);\n+                continue;\n+            } else {\n+                done = true;\n             }\n         }\n     }"},{"sha":"0cb1ebe3823a3ae51c12c6cefdad0396dd9e7823","filename":"src/main/java/com/twitter/distributedlog/limiter/RateLimiter.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FRateLimiter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FRateLimiter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flimiter%2FRateLimiter.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -37,11 +37,6 @@ public boolean acquire(int permits) {\n     };\n \n     public static abstract class Builder {\n-        protected int limit;\n-        public Builder setLimit(int limit) {\n-            this.limit = limit;\n-            return this;\n-        }\n         public abstract RateLimiter build();\n     }\n "},{"sha":"2f9869eb1f7b6daae0a9d3548b679deac101ccbe","filename":"src/main/java/com/twitter/distributedlog/rate/MovingAverageRateFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Frate%2FMovingAverageRateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Frate%2FMovingAverageRateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Frate%2FMovingAverageRateFactory.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -26,10 +26,12 @@\n import scala.runtime.BoxedUnit;\n \n public class MovingAverageRateFactory {\n+\n+    private static final int DEFAULT_INTERVAL_SECS = 1;\n+\n     private final Timer timer;\n     private final TimerTask timerTask;\n     private final CopyOnWriteArrayList<SampledMovingAverageRate> avgs;\n-    private final int DEFAULT_INTERVAL_SECS = 1;\n \n     public MovingAverageRateFactory(Timer timer) {\n         this.avgs = new CopyOnWriteArrayList<SampledMovingAverageRate>();"},{"sha":"a3fd239be6f157d365ef028ac85e233567ce3b19","filename":"src/main/java/com/twitter/distributedlog/readahead/ReadAheadWorker.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -1275,8 +1275,6 @@ public void readComplete(final int rc, final LedgerHandle lh,\n             submit(new Runnable() {\n                 @Override\n                 public void run() {\n-                    long numEntries = endEntryId - startEntryId + 1;\n-\n                     // If readAheadSkipBrokenEntries is enabled and we hit a corrupt entry, log and\n                     // stat the issue and move forward.\n                     if (BKException.Code.DigestMatchException == rc && readAheadSkipBrokenEntries) {"},{"sha":"bcb78532e13c4699e98edd6741ba07e2105c0f0d","filename":"src/main/java/com/twitter/distributedlog/tools/DistributedLogTool.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -395,12 +395,8 @@ public void run() {\n                                                 LedgerAllocatorUtils.createLedgerAllocatorPool(poolPath, 0, getConf(),\n                                                         getZooKeeperClient(), getBookKeeperClient(),\n                                                         allocationExecutor);\n-                                        if (null == allocator) {\n-                                            System.err.println(\"ERROR: use zk34 version to delete allocator pool : \" + poolPath + \" .\");\n-                                        } else {\n-                                            allocator.delete();\n-                                            System.out.println(\"Deleted allocator pool : \" + poolPath + \" .\");\n-                                        }\n+                                        allocator.delete();\n+                                        System.out.println(\"Deleted allocator pool : \" + poolPath + \" .\");\n                                     } catch (IOException ioe) {\n                                         System.err.println(\"Failed to delete allocator pool \" + poolPath + \" : \" + ioe.getMessage());\n                                     }\n@@ -538,9 +534,7 @@ protected int runCmd() throws Exception {\n             }\n             for (Map.Entry<String, List<Pair<LogSegmentMetadata, List<String>>>> entry : corruptedCandidates.entrySet()) {\n                 System.out.println(entry.getKey() + \" : \\n\");\n-                List<LogSegmentMetadata> segments = new ArrayList<LogSegmentMetadata>(entry.getValue().size());\n                 for (Pair<LogSegmentMetadata, List<String>> pair : entry.getValue()) {\n-                    segments.add(pair.getLeft());\n                     System.out.println(\"\\t - \" + pair.getLeft());\n                     if (printInprogressOnly && dumpEntries) {\n                         int i = 0;\n@@ -2592,10 +2586,6 @@ public static class DeserializeDLSNCommand extends SimpleCommand {\n             options.addOption(\"b64\", \"base64\", true, \"Base64 encoded dlsn\");\n         }\n \n-        public void setBase64DLSN(String base64Dlsn) {\n-            base64Dlsn = base64Dlsn;\n-        }\n-\n         protected void parseCommandLine(CommandLine cmdline) throws ParseException {\n             if (cmdline.hasOption(\"b64\")) {\n                 base64Dlsn = cmdline.getOptionValue(\"b64\");\n@@ -2622,10 +2612,6 @@ public static class SerializeDLSNCommand extends SimpleCommand {\n             options.addOption(\"x\", \"hex\", false, \"Emit hex-encoded string DLSN instead of base 64\");\n         }\n \n-        public void setDLSN(DLSN dlsn) {\n-            dlsn = dlsn;\n-        }\n-\n         protected void parseCommandLine(CommandLine cmdline) throws ParseException {\n             if (cmdline.hasOption(\"dlsn\")) {\n                 dlsn = parseDLSN(cmdline.getOptionValue(\"dlsn\"));"},{"sha":"803db901b5c54667ae2e10cd6b82e30e549b1791","filename":"src/main/java/com/twitter/distributedlog/util/DLUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -165,7 +165,7 @@ public static long computeStartSequenceId(List<LogSegmentMetadata> logSegmentDes\n      */\n     public static long deserializeLogSegmentSequenceNumber(byte[] data) {\n         String seqNoStr = new String(data, UTF_8);\n-        return Long.valueOf(seqNoStr);\n+        return Long.parseLong(seqNoStr);\n     }\n \n     /**\n@@ -189,7 +189,7 @@ public static byte[] serializeLogSegmentSequenceNumber(long logSegmentSeqNo) {\n      */\n     public static long deserializeTransactionId(byte[] data) {\n         String seqNoStr = new String(data, UTF_8);\n-        return Long.valueOf(seqNoStr);\n+        return Long.parseLong(seqNoStr);\n     }\n \n     /**\n@@ -222,6 +222,6 @@ public static byte[] ledgerId2Bytes(long ledgerId) {\n      * @return ledger id\n      */\n     public static long bytes2LedgerId(byte[] data) {\n-        return Long.valueOf(new String(data, UTF_8));\n+        return Long.parseLong(new String(data, UTF_8));\n     }\n }"},{"sha":"684b827523176ed6195c458d216fb64cef80097e","filename":"src/main/resources/findbugsExclude.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fresources%2FfindbugsExclude.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/2b2f33f51c8d3ac78fb7b969294eab952d730a99/src%2Fmain%2Fresources%2FfindbugsExclude.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fresources%2FfindbugsExclude.xml?ref=2b2f33f51c8d3ac78fb7b969294eab952d730a99","patch":"@@ -22,13 +22,14 @@\n   </Match>\n   <Match>\n     <!-- it is safe to store external bytes reference here. //-->\n-    <Class name=\"com.twitter.distributedlog.LogRecord\" />\n+    <Class name=\"com.twitter.distributedlog.Entry$Builder\" />\n+    <Method name=\"setData\" />\n     <Bug pattern=\"EI_EXPOSE_REP2\" />\n   </Match>\n   <Match>\n     <!-- it is safe to store external bytes reference here. //-->\n-    <Class name=\"com.twitter.distributedlog.LogRecord\" />\n-    <Method name=\"getPayload\" />\n+    <Class name=\"com.twitter.distributedlog.Entry\" />\n+    <Method name=\"getRawData\" />\n     <Bug pattern=\"EI_EXPOSE_REP\" />\n   </Match>\n   <Match>"}]}