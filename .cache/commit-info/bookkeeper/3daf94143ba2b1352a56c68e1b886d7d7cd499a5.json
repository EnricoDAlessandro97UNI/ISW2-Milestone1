{"sha":"3daf94143ba2b1352a56c68e1b886d7d7cd499a5","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjNkYWY5NDE0M2JhMmIxMzUyYTU2YzY4ZTFiODg2ZDdkN2NkNDk5YTU=","commit":{"author":{"name":"Jia Zhai","email":"zhaijia03@gmail.com","date":"2017-08-01T19:58:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-08-01T19:58:19Z"},"message":"ISSUE #339: Use ephemeral port for bookkeeper tests and variable unit test improvements\n\nDescriptions of the changes in this PR:\n\n- Enable ephemeral port by default for all BookKeeperClusterTestCase based test cases\n- Removed Multi* based classes. A lot of unit tests unnecessarily extended from those base classes. Converted them to extend BookKeeperClusterTestCase directly. Confirmed this with sijie\n- Reduce sleep period for some test cases\n\nLedgerEntry fixes for #317\n- use checkState rather than checkNull to keep the behavior consistent as before\n- fix BookKeeperTest#testReadEntryReleaseByteBufs\n\nTestBackwardCompat:\n- removed testCompact400 (400 has been very long time ago, no one is running 400)\n- BookKeeperNettyServer should shut down netty server when failed to construct a bookie\n\nTestDiskChecker:\n- increased the threshold to 0.99f. be consistent with TestBKConfiguration\n\nBookieInitializationTest\n- make each test method using different ledgers path, so registration won't be conflicting between tests\n\nBookieJournalRollingTest\n- make sure bookie port is used correctly on restarting bookies.\n\nAuthor: Jia Zhai <zhaijia03@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nThis closes #340 from zhaijack/use_ephemral_ports, closes #339","tree":{"sha":"f05ad6492926dbfd45c9b4ea72a4fc329c76d5e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f05ad6492926dbfd45c9b4ea72a4fc329c76d5e3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/3daf94143ba2b1352a56c68e1b886d7d7cd499a5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3daf94143ba2b1352a56c68e1b886d7d7cd499a5","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/3daf94143ba2b1352a56c68e1b886d7d7cd499a5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/comments","author":{"login":"zhaijack","id":26834121,"node_id":"MDQ6VXNlcjI2ODM0MTIx","avatar_url":"https://avatars.githubusercontent.com/u/26834121?v=4","gravatar_id":"","url":"https://api.github.com/users/zhaijack","html_url":"https://github.com/zhaijack","followers_url":"https://api.github.com/users/zhaijack/followers","following_url":"https://api.github.com/users/zhaijack/following{/other_user}","gists_url":"https://api.github.com/users/zhaijack/gists{/gist_id}","starred_url":"https://api.github.com/users/zhaijack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhaijack/subscriptions","organizations_url":"https://api.github.com/users/zhaijack/orgs","repos_url":"https://api.github.com/users/zhaijack/repos","events_url":"https://api.github.com/users/zhaijack/events{/privacy}","received_events_url":"https://api.github.com/users/zhaijack/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b299a699794c1f0aa8447704795361739a8bd055","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b299a699794c1f0aa8447704795361739a8bd055","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b299a699794c1f0aa8447704795361739a8bd055"}],"stats":{"total":903,"additions":250,"deletions":653},"files":[{"sha":"24d2ff4c7547a49400873f500e2d94a5674c09f7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerEntry.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -61,9 +61,10 @@ public long getLength() {\n      * the internal ByteBuf\n      * \n      * @return the content of the entry\n+     * @throws IllegalStateException if this method is called twice\n      */\n     public byte[] getEntry() {\n-        Preconditions.checkNotNull(data, \"entry content can be accessed only once\");\n+        Preconditions.checkState(null != data, \"entry content can be accessed only once\");\n         byte[] entry = new byte[data.readableBytes()];\n         data.readBytes(entry);\n         data.release();\n@@ -78,9 +79,10 @@ public byte[] getEntry() {\n      * method of the returned InputStream\n      *\n      * @return an InputStream which gives access to the content of the entry\n+     * @throws IllegalStateException if this method is called twice\n      */\n     public InputStream getEntryInputStream() {\n-        Preconditions.checkNotNull(data, \"entry content can be accessed only once\");\n+        Preconditions.checkState(null != data, \"entry content can be accessed only once\");\n         ByteBufInputStream res = new ByteBufInputStream(data);\n         data = null;\n         return res;\n@@ -94,8 +96,12 @@ public InputStream getEntryInputStream() {\n      * @return a ByteBuf which contains the data\n      *\n      * @see ClientConfiguration#setNettyUsePooledBuffers(boolean)\n+     * @throws IllegalStateException if the entry has been retrieved by {@link #getEntry()}\n+     * or {@link #getEntryInputStream()}.\n      */\n     public ByteBuf getEntryBuffer() {\n+        Preconditions.checkState(null != data, \"entry content has been retrieved\" +\n+            \" by #getEntry or #getEntryInputStream\");\n         return data;\n     }\n }"},{"sha":"d76412675b147cc61844d4d785a5d8bec9cc8e0a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -20,13 +20,13 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import com.google.common.annotations.VisibleForTesting;\n import java.io.File;\n import java.io.IOException;\n+import java.lang.Integer;\n import java.net.MalformedURLException;\n import java.net.UnknownHostException;\n-import java.lang.Integer;\n import java.util.Arrays;\n-\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.ReadOnlyBookie;\n import org.apache.bookkeeper.bookie.BookieCriticalThread;\n@@ -53,8 +53,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.annotations.VisibleForTesting;\n-\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_SCOPE;\n import static org.apache.bookkeeper.replication.ReplicationStats.REPLICATION_SCOPE;\n@@ -95,7 +93,13 @@ public BookieServer(ServerConfiguration conf, StatsLogger statsLogger)\n         this.conf = conf;\n         this.statsLogger = statsLogger;\n         this.nettyServer = new BookieNettyServer(this.conf, null);\n-        this.bookie = newBookie(conf);\n+        try {\n+            this.bookie = newBookie(conf);\n+        } catch (IOException | KeeperException | InterruptedException | BookieException e) {\n+            // interrupted on constructing a bookie\n+            this.nettyServer.shutdown();\n+            throw e;\n+        }\n         this.requestProcessor = new BookieRequestProcessor(conf, bookie,\n                 statsLogger.scope(SERVER_SCOPE));\n         this.nettyServer.setRequestProcessor(this.requestProcessor);"},{"sha":"a410e3724150b075c3d8a49fecdb7b8a6fa096b1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -29,7 +29,6 @@\n import java.io.IOException;\n import java.net.BindException;\n import java.net.InetAddress;\n-\n import org.apache.bookkeeper.bookie.BookieException.DiskPartitionDuplicationException;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.client.BookKeeper;\n@@ -51,7 +50,9 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.data.Stat;\n import org.junit.Assert;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TestName;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -62,8 +63,20 @@ public class BookieInitializationTest extends BookKeeperClusterTestCase {\n     private static final Logger LOG = LoggerFactory\n             .getLogger(BookieInitializationTest.class);\n \n+    @Rule\n+    public final TestName runtime = new TestName();\n+\n     public BookieInitializationTest() {\n         super(0);\n+        String ledgersPath = \"/\" + runtime.getMethodName();\n+        baseClientConf.setZkLedgersRootPath(ledgersPath);\n+        baseConf.setZkLedgersRootPath(ledgersPath);\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        zkUtil.createBKEnsemble(\"/\" + runtime.getMethodName());\n     }\n \n     private static class MockBookie extends Bookie {"},{"sha":"5f3414495eedcb86b60fc6f65a590d1eef9ecd55","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShutdownTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShutdownTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShutdownTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -24,7 +24,6 @@\n import java.util.Random;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n-\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n@@ -43,6 +42,7 @@ public class BookieShutdownTest extends BookKeeperClusterTestCase {\n \n     public BookieShutdownTest() {\n         super(3);\n+        baseConf.setAllowEphemeralPorts(false);\n     }\n \n     private LedgerHandle lh;\n@@ -61,7 +61,7 @@ class SyncObj {\n      */\n     @Test(timeout = 150000)\n     public void testBookieRestartContinuously() throws Exception {\n-        for (int index = 0; index < 100; index++) {\n+        for (int index = 0; index < 10; index++) {\n             SyncObj sync = new SyncObj();\n             try {\n                 // Create a ledger"},{"sha":"7656b9b1cdc9a76fcbe1d4a21c14980d7e2c5bf1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":41,"deletions":51,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,46 +1,40 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n package org.apache.bookkeeper.client;\n \n import io.netty.util.IllegalReferenceCountException;\n import java.util.Collections;\n import java.util.Enumeration;\n-\n-/*\n-*\n-* Licensed to the Apache Software Foundation (ASF) under one\n-* or more contributor license agreements.  See the NOTICE file\n-* distributed with this work for additional information\n-* regarding copyright ownership.  The ASF licenses this file\n-* to you under the Apache License, Version 2.0 (the\n-* \"License\"); you may not use this file except in compliance\n-* with the License.  You may obtain a copy of the License at\n-*\n-*   http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*\n-*/\n-\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicBoolean;\n-\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BKException.BKBookieHandleNotAvailableException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.KeeperException;\n-\n import org.junit.Assert;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -51,15 +45,14 @@\n /**\n  * Tests of the main BookKeeper client\n  */\n-public class BookKeeperTest extends BaseTestCase {\n+public class BookKeeperTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(BookKeeperTest.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public BookKeeperTest(DigestType digestType) {\n+    public BookKeeperTest() {\n         super(4);\n-\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Test\n@@ -69,7 +62,7 @@ public void testConstructionZkDelay() throws Exception {\n             .setZkTimeout(20000);\n \n         CountDownLatch l = new CountDownLatch(1);\n-        zkUtil.sleepServer(5, l);\n+        zkUtil.sleepServer(200, TimeUnit.MILLISECONDS, l);\n         l.await();\n \n         BookKeeper bkc = new BookKeeper(conf);\n@@ -84,15 +77,13 @@ public void testConstructionNotConnectedExplicitZk() throws Exception {\n             .setZkTimeout(20000);\n \n         CountDownLatch l = new CountDownLatch(1);\n-        zkUtil.sleepServer(5, l);\n+        zkUtil.sleepServer(200, TimeUnit.MILLISECONDS, l);\n         l.await();\n \n-        ZooKeeper zk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n-                            new Watcher() {\n-                                @Override\n-                                public void process(WatchedEvent event) {\n-                                }\n-                            });\n+        ZooKeeper zk = new ZooKeeper(\n+            zkUtil.getZooKeeperConnectString(),\n+            50,\n+            event -> {});\n         assertFalse(\"ZK shouldn't have connected yet\", zk.getState().isConnected());\n         try {\n             BookKeeper bkc = new BookKeeper(conf, zk);\n@@ -728,11 +719,10 @@ public void testReadEntryReleaseByteBufs() throws Exception {\n                     LedgerEntry entry = readEntries.nextElement();\n                     assertTrue(entry.data.getClass().getName(),\n                         entry.data.getClass().getName().contains(\"PooledNonRetainedSlicedByteBuf\"));\n-                    assertTrue(entry.data.release());\n                     try {\n                         entry.data.release();\n-                        fail(\"ByteBuf already released\");\n                     } catch (IllegalReferenceCountException ok) {\n+                        fail(\"ByteBuf already released\");\n                     }\n                 }\n             }\n@@ -749,14 +739,12 @@ public void testReadEntryReleaseByteBufs() throws Exception {\n                 for (Enumeration<LedgerEntry> readEntries = lh.readEntries(0, numEntries - 1);\n                     readEntries.hasMoreElements();) {\n                     LedgerEntry entry = readEntries.nextElement();\n-                    // ButeBufs no reference counter\n-                    assertTrue(entry.data.release());\n                     assertTrue(entry.data.getClass().getName(),\n                         entry.data.getClass().getName().contains(\"UnpooledSlicedByteBuf\"));\n                     try {\n                         entry.data.release();\n+                    } catch (IllegalReferenceCountException e) {\n                         fail(\"ByteBuf already released\");\n-                    } catch (IllegalReferenceCountException ok) {\n                     }\n                 }\n             }\n@@ -773,12 +761,12 @@ public void testReadEntryReleaseByteBufs() throws Exception {\n                 for (Enumeration<LedgerEntry> readEntries = lh.readEntries(0, numEntries - 1);\n                     readEntries.hasMoreElements();) {\n                     LedgerEntry entry = readEntries.nextElement();\n-                    // ButeBufs not reference counter\n                     assertTrue(entry.data.getClass().getName(),\n                         entry.data.getClass().getName().contains(\"UnpooledSlicedByteBuf\"));\n-                    assertTrue(entry.data.release());\n+                    assertTrue(\"Can't release entry \" + entry.getEntryId() + \": ref = \" + entry.data.refCnt(),\n+                        entry.data.release());\n                     try {\n-                        entry.data.release();\n+                        assertFalse(entry.data.release());\n                         fail(\"ByteBuf already released\");\n                     } catch (IllegalReferenceCountException ok) {\n                     }\n@@ -801,12 +789,14 @@ public void testReadEntryReleaseByteBufs() throws Exception {\n                     // ButeBufs not reference counter\n                     assertTrue(entry.data.getClass().getName(),\n                         entry.data.getClass().getName().contains(\"UnpooledSlicedByteBuf\"));\n-                    assertTrue(entry.data.release());\n+                    assertTrue(\"Can't release entry \" + entry.getEntryId() + \": ref = \" + entry.data.refCnt(),\n+                        entry.data.release());\n                     try {\n-                        entry.data.release();\n+                        assertFalse(entry.data.release());\n                         fail(\"ByteBuf already released\");\n                     } catch (IllegalReferenceCountException ok) {\n-                    }                }\n+                    }\n+                }\n             }\n         }\n "},{"sha":"f7bcffd231bfce01b89fdf300abfeef8ddeb2635","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgerTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -20,10 +20,11 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import io.netty.buffer.Unpooled;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n+\n+import io.netty.buffer.Unpooled;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -34,12 +35,11 @@\n import java.util.HashMap;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.meta.LongHierarchicalLedgerManagerFactory;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.test.MultiLedgerManagerMultiDigestTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -49,7 +49,7 @@\n  * Testing ledger write entry cases\n  */\n public class BookieWriteLedgerTest extends\n-        MultiLedgerManagerMultiDigestTestCase implements AddCallback {\n+    BookKeeperClusterTestCase implements AddCallback {\n \n     private final static Logger LOG = LoggerFactory\n             .getLogger(BookieWriteLedgerTest.class);\n@@ -65,7 +65,7 @@ public class BookieWriteLedgerTest extends\n     ArrayList<byte[]> entries1; // generated entries\n     ArrayList<byte[]> entries2; // generated entries\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n     private static class SyncObj {\n         volatile int counter;\n@@ -86,10 +86,10 @@ public void setUp() throws Exception {\n         entries2 = new ArrayList<byte[]>(); // initialize the entries list\n     }\n \n-    public BookieWriteLedgerTest(String ledgerManagerFactory,\n-            DigestType digestType) {\n+    public BookieWriteLedgerTest() {\n         super(5);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n+        String ledgerManagerFactory = \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\";\n         // set ledger manager\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);"},{"sha":"c987cf86944c1e5e11ebe809748b1ec2dee3928e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgersWithDifferentDigestsTest.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgersWithDifferentDigestsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgersWithDifferentDigestsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieWriteLedgersWithDifferentDigestsTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -22,14 +22,17 @@\n \n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Enumeration;\n import java.util.Random;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.test.MultiLedgerManagerMultiDigestTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,8 +43,9 @@\n  * This can happen as result of clients using different settings\n  * yet reading each other data or configuration change roll out.\n  */\n+@RunWith(Parameterized.class)\n public class BookieWriteLedgersWithDifferentDigestsTest extends\n-        MultiLedgerManagerMultiDigestTestCase implements AddCallback {\n+    BookKeeperClusterTestCase implements AddCallback {\n \n     private final static Logger LOG = LoggerFactory\n             .getLogger(BookieWriteLedgersWithDifferentDigestsTest.class);\n@@ -57,7 +61,7 @@ public class BookieWriteLedgersWithDifferentDigestsTest extends\n     ArrayList<byte[]> entries1; // generated entries\n     ArrayList<byte[]> entries2; // generated entries\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n     private static class SyncObj {\n         volatile int counter;\n@@ -68,6 +72,11 @@ public SyncObj() {\n         }\n     }\n \n+    @Parameterized.Parameters\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][] { {DigestType.MAC }, {DigestType.CRC32}});\n+    }\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n@@ -78,10 +87,10 @@ public void setUp() throws Exception {\n         entries2 = new ArrayList<byte[]>(); // initialize the entries list\n     }\n \n-    public BookieWriteLedgersWithDifferentDigestsTest(String ledgerManagerFactory,\n-            DigestType digestType) {\n+    public BookieWriteLedgersWithDifferentDigestsTest(DigestType digestType) {\n         super(3);\n         this.digestType = digestType;\n+        String ledgerManagerFactory = \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\";\n         // set ledger manager\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);"},{"sha":"5674b5da764a4548e25fa687b677220e36214eed","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -21,14 +21,12 @@\n package org.apache.bookkeeper.client;\n \n import io.netty.buffer.ByteBuf;\n-\n import java.io.IOException;\n import java.util.Enumeration;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n@@ -39,7 +37,7 @@\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,14 +47,15 @@\n /**\n  * This unit test tests ledger recovery.\n  */\n-public class LedgerRecoveryTest extends BaseTestCase {\n+public class LedgerRecoveryTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerRecoveryTest.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public LedgerRecoveryTest(DigestType digestType) {\n+    public LedgerRecoveryTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n+        this.baseConf.setAllowEphemeralPorts(false);\n     }\n \n     private void testInternal(int numEntries) throws Exception {"},{"sha":"38f02ce1d086be2f57d2c6ec5337950f6c664335","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FListLedgersTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -14,28 +14,22 @@\n  * License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-\n package org.apache.bookkeeper.client;\n \n import java.util.Iterator;\n-\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.test.BaseTestCase;\n-\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Assert;\n import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-public class ListLedgersTest extends BaseTestCase {\n-    private final static Logger LOG = LoggerFactory.getLogger(ListLedgersTest.class);\n+public class ListLedgersTest extends BookKeeperClusterTestCase {\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public ListLedgersTest (DigestType digestType) {\n+    public ListLedgersTest () {\n         super(4);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Test(timeout=60000)"},{"sha":"42894766cce4b8e04e8df0dcd1ff4d0320548ff7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LocalBookKeeperTest.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLocalBookKeeperTest.java?ref=b299a699794c1f0aa8447704795361739a8bd055","patch":"@@ -1,67 +0,0 @@\n-/*\n-*\n-* Licensed to the Apache Software Foundation (ASF) under one\n-* or more contributor license agreements.  See the NOTICE file\n-* distributed with this work for additional information\n-* regarding copyright ownership.  The ASF licenses this file\n-* to you under the Apache License, Version 2.0 (the\n-* \"License\"); you may not use this file except in compliance\n-* with the License.  You may obtain a copy of the License at\n-*\n-*   http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*\n-*/\n-\n-package org.apache.bookkeeper.client;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.test.BaseTestCase;\n-import org.junit.Test;\n-\n-/**\n- * Tests of the main BookKeeper client using networkless comunication\n- */\n-public class LocalBookKeeperTest extends BaseTestCase {\n-    \n-    protected ServerConfiguration newServerConfiguration() throws Exception {       \n-        return super\n-                .newServerConfiguration()\n-                .setEnableLocalTransport(true);\n-    }\n-        \n-    DigestType digestType;\n-    \n-    public LocalBookKeeperTest(DigestType digestType) {\n-        super(4);            \n-        this.digestType=digestType;\n-    }\n-\n-    @Test\n-    public void testUseLocalBookie() throws Exception {\n-        ClientConfiguration conf = new ClientConfiguration()\n-                .setZkServers(zkUtil.getZooKeeperConnectString())\n-                .setZkTimeout(20000);\n-\n-        CountDownLatch l = new CountDownLatch(1);\n-        zkUtil.sleepServer(5, l);\n-        l.await();\n-                \n-        BookKeeper bkc = new BookKeeper(conf);\n-        LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes());\n-        h.addEntry(\"test\".getBytes());\n-        h.close();\n-        bkc.close();\n-    }\n-\n-}"},{"sha":"18c800c49abe8371b427446b857c9ecf011d2a53","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadLastConfirmedAndEntry.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadLastConfirmedAndEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadLastConfirmedAndEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestReadLastConfirmedAndEntry.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -51,6 +51,7 @@ public class TestReadLastConfirmedAndEntry extends BookKeeperClusterTestCase {\n     public TestReadLastConfirmedAndEntry() {\n         super(3);\n         this.digestType = BookKeeper.DigestType.CRC32;\n+        this.baseConf.setAllowEphemeralPorts(false);\n     }\n \n     static class FakeBookie extends Bookie {"},{"sha":"89a1baa560de315299dcef002d654f59abdd4c68","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestSpeculativeRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestSpeculativeRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestSpeculativeRead.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -25,13 +25,11 @@\n import java.util.Enumeration;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n-\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.test.BaseTestCase;\n-\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,15 +40,15 @@\n  * This unit test tests ledger fencing;\n  *\n  */\n-public class TestSpeculativeRead extends BaseTestCase {\n+public class TestSpeculativeRead extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(TestSpeculativeRead.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n     byte[] passwd = \"specPW\".getBytes();\n \n-    public TestSpeculativeRead(DigestType digestType) {\n+    public TestSpeculativeRead() {\n         super(10);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     long getLedgerToRead(int ensemble, int quorum) throws Exception {"},{"sha":"fe5fb9ae7d51aad5f30090684618ffb25e665995","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -29,6 +29,8 @@ public static ServerConfiguration newServerConfiguration() {\n         // enable journal format version\n         confReturn.setJournalFormatVersionToWrite(5);\n         confReturn.setAllowLoopback(true);\n+        confReturn.setAllowEphemeralPorts(true);\n+        confReturn.setBookiePort(0);\n         confReturn.setGcWaitTime(1000);\n         confReturn.setDiskUsageThreshold(0.999f);\n         confReturn.setDiskUsageWarnThreshold(0.99f);"},{"sha":"c7e95146f758c757e4533105d650a3d554c5e5ab","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/NetworkLessBookieTest.java","status":"modified","additions":9,"deletions":25,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FNetworkLessBookieTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -21,37 +21,25 @@\n \n package org.apache.bookkeeper.proto;\n \n-import java.util.concurrent.CountDownLatch;\n+import io.netty.channel.Channel;\n+import io.netty.channel.local.LocalChannel;\n import org.apache.bookkeeper.client.BookKeeper;\n-\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Assert;\n import org.junit.Test;\n \n-import io.netty.channel.Channel;\n-import io.netty.channel.local.LocalChannel;\n-\n /**\n  * Tests of the main BookKeeper client using networkless comunication\n  */\n-public class NetworkLessBookieTest extends BaseTestCase {\n-    \n-    protected ServerConfiguration newServerConfiguration() throws Exception {       \n-        return super\n-                .newServerConfiguration()\n-                .setDisableServerSocketBind(true)\n-                .setEnableLocalTransport(true);\n-    }\n-        \n-    DigestType digestType;\n+public class NetworkLessBookieTest extends BookKeeperClusterTestCase {\n     \n-    public NetworkLessBookieTest(DigestType digestType) {\n-        super(4);            \n-        this.digestType=digestType;\n+    public NetworkLessBookieTest() {\n+        super(1);\n+        baseConf.setDisableServerSocketBind(true);\n+        baseConf.setEnableLocalTransport(true);\n     }\n \n     @Test\n@@ -60,12 +48,8 @@ public void testUseLocalBookie() throws Exception {\n                 .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setZkTimeout(20000);\n \n-        CountDownLatch l = new CountDownLatch(1);\n-        zkUtil.sleepServer(5, l);\n-        l.await();\n-                \n         try (BookKeeper bkc = new BookKeeper(conf)) {\n-            try (LedgerHandle h = bkc.createLedger(1,1,digestType, \"testPasswd\".getBytes())) {\n+            try (LedgerHandle h = bkc.createLedger(1,1, DigestType.CRC32, \"testPasswd\".getBytes())) {\n                 h.addEntry(\"test\".getBytes());\n             }\n         }"},{"sha":"d62046bcd3ae6e257fcf74f07010fd2516a17d48","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -41,7 +41,6 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -57,7 +56,7 @@\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n-import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.commons.lang.mutable.MutableInt;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -72,7 +71,7 @@\n  * Tests publishing of under replicated ledgers by the Auditor bookie node when\n  * corresponding bookies identifes as not running\n  */\n-public class AuditorLedgerCheckerTest extends MultiLedgerManagerTestCase {\n+public class AuditorLedgerCheckerTest extends BookKeeperClusterTestCase {\n \n     // Depending on the taste, select the amount of logging\n     // by decommenting one of the two lines below\n@@ -95,7 +94,13 @@ public class AuditorLedgerCheckerTest extends MultiLedgerManagerTestCase {\n \n     private List<Long> ledgerList;\n \n-    public AuditorLedgerCheckerTest(String ledgerManagerFactoryClass)\n+    public AuditorLedgerCheckerTest()\n+        throws IOException, KeeperException, InterruptedException,\n+        CompatibilityException {\n+        this(\"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n+    }\n+\n+    AuditorLedgerCheckerTest(String ledgerManagerFactoryClass)\n             throws IOException, KeeperException, InterruptedException,\n             CompatibilityException {\n         super(3);"},{"sha":"26a50e4591504b3abafb920a1659c96efa745425","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FBookieLedgerIndexTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FBookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FBookieLedgerIndexTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -26,15 +26,14 @@\n import java.util.Map;\n import java.util.Random;\n import java.util.Set;\n-\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.MSLedgerManagerFactory;\n import org.apache.bookkeeper.replication.ReplicationException.BKAuditException;\n-import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.KeeperException;\n import org.junit.After;\n@@ -48,7 +47,7 @@\n /**\n  * Tests verifies bookie vs ledger mapping generating by the BookieLedgerIndexer\n  */\n-public class BookieLedgerIndexTest extends MultiLedgerManagerTestCase {\n+public class BookieLedgerIndexTest extends BookKeeperClusterTestCase {\n \n     // Depending on the taste, select the amount of logging\n     // by decommenting one of the two lines below\n@@ -64,7 +63,12 @@ public class BookieLedgerIndexTest extends MultiLedgerManagerTestCase {\n     private LedgerManagerFactory newLedgerManagerFactory;\n     private LedgerManager ledgerManager;\n \n-    public BookieLedgerIndexTest(String ledgerManagerFactory)\n+    public BookieLedgerIndexTest()\n+        throws IOException, KeeperException, InterruptedException {\n+        this(\"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n+    }\n+\n+    BookieLedgerIndexTest(String ledgerManagerFactory)\n             throws IOException, KeeperException, InterruptedException {\n         super(3);\n         LOG.info(\"Running test case using ledger manager : \""},{"sha":"445655d8298924f297c55724a1a9c01f1e1dceea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -29,7 +29,6 @@\n import java.util.Enumeration;\n import java.util.Map.Entry;\n import java.util.Set;\n-\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.ClientUtil;\n@@ -41,7 +40,7 @@\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n@@ -53,7 +52,7 @@\n  * Test the ReplicationWroker, where it has to replicate the fragments from\n  * failed Bookies to given target Bookie.\n  */\n-public class TestReplicationWorker extends MultiLedgerManagerTestCase {\n+public class TestReplicationWorker extends BookKeeperClusterTestCase {\n \n     private static final byte[] TESTPASSWD = \"testpasswd\".getBytes();\n     private static final Logger LOG = LoggerFactory\n@@ -64,7 +63,11 @@ public class TestReplicationWorker extends MultiLedgerManagerTestCase {\n     private LedgerUnderreplicationManager underReplicationManager;\n     private static byte[] data = \"TestReplicationWorker\".getBytes();\n \n-    public TestReplicationWorker(String ledgerManagerFactory) {\n+    public TestReplicationWorker() {\n+        this(\"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n+    }\n+\n+    TestReplicationWorker(String ledgerManagerFactory) {\n         super(3);\n         LOG.info(\"Running test case using ledger manager : \"\n                 + ledgerManagerFactory);"},{"sha":"5f25ce3b3446867c6226dc8213c6347c43aef0c7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FAsyncLedgerOpsTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,14 +18,14 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Random;\n import java.util.Set;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n@@ -50,16 +48,17 @@\n  * and three BookKeepers.\n  *\n  */\n-public class AsyncLedgerOpsTest extends MultiLedgerManagerMultiDigestTestCase\n+public class AsyncLedgerOpsTest extends BookKeeperClusterTestCase\n     implements AddCallback, ReadCallback, CreateCallback,\n     CloseCallback, OpenCallback {\n     private final static Logger LOG = LoggerFactory.getLogger(AsyncLedgerOpsTest.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public AsyncLedgerOpsTest(String ledgerManagerFactory, DigestType digestType) {\n+    public AsyncLedgerOpsTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n+        String ledgerManagerFactory = \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\";\n         // set ledger manager type\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);"},{"sha":"437f0aebeade22edd847840e9544c754447dbc07","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBaseTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBaseTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBaseTestCase.java?ref=b299a699794c1f0aa8447704795361739a8bd055","patch":"@@ -1,49 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.test;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-@RunWith(Parameterized.class)\n-public abstract class BaseTestCase extends BookKeeperClusterTestCase {\n-    static final Logger LOG = LoggerFactory.getLogger(BaseTestCase.class);\n-\n-    public BaseTestCase(int numBookies) {\n-        super(numBookies);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> configs() {\n-        return Arrays.asList(new Object[][] { {DigestType.MAC }, {DigestType.CRC32}});\n-    }\n-\n-}"},{"sha":"83a19f9f6506839e8485675c142cf765a493eb6d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":31,"deletions":16,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -21,6 +21,7 @@\n \n package org.apache.bookkeeper.test;\n \n+import com.google.common.base.Stopwatch;\n import java.io.File;\n import java.io.IOException;\n import java.net.InetAddress;\n@@ -53,6 +54,8 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.TestName;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -63,21 +66,24 @@ public abstract class BookKeeperClusterTestCase {\n \n     static final Logger LOG = LoggerFactory.getLogger(BookKeeperClusterTestCase.class);\n \n+    @Rule\n+    public final TestName runtime = new TestName();\n+\n     // ZooKeeper related variables\n-    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n+    protected final ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n     protected ZooKeeper zkc;\n \n     // BookKeeper related variables\n-    protected List<File> tmpDirs = new LinkedList<File>();\n-    protected List<BookieServer> bs = new LinkedList<BookieServer>();\n-    protected List<ServerConfiguration> bsConfs = new LinkedList<ServerConfiguration>();\n+    protected final List<File> tmpDirs = new LinkedList<File>();\n+    protected final List<BookieServer> bs = new LinkedList<BookieServer>();\n+    protected final List<ServerConfiguration> bsConfs = new LinkedList<ServerConfiguration>();\n     protected int numBookies;\n     protected BookKeeperTestClient bkc;\n \n-    protected ServerConfiguration baseConf = TestBKConfiguration.newServerConfiguration();\n-    protected ClientConfiguration baseClientConf = new ClientConfiguration();\n+    protected final ServerConfiguration baseConf = TestBKConfiguration.newServerConfiguration();\n+    protected final ClientConfiguration baseClientConf = new ClientConfiguration();\n \n-    private Map<BookieServer, AutoRecoveryMain> autoRecoveryProcesses = new HashMap<BookieServer, AutoRecoveryMain>();\n+    private final Map<BookieServer, AutoRecoveryMain> autoRecoveryProcesses = new HashMap<>();\n \n     private boolean isAutoRecoveryEnabled;\n \n@@ -93,11 +99,13 @@ public void setUp() throws Exception {\n         setMetastoreImplClass(baseConf);\n         setMetastoreImplClass(baseClientConf);\n \n+        Stopwatch sw = Stopwatch.createStarted();\n         try {\n             // start zookeeper service\n             startZKCluster();\n             // start bookkeeper service\n             startBKCluster();\n+            LOG.info(\"Setup testcase {} in {} ms.\", runtime.getMethodName(), sw.elapsed(TimeUnit.MILLISECONDS));\n         } catch (Exception e) {\n             LOG.error(\"Error setting up\", e);\n             throw e;\n@@ -106,14 +114,15 @@ public void setUp() throws Exception {\n \n     @After\n     public void tearDown() throws Exception {\n+        Stopwatch sw = Stopwatch.createStarted();\n         LOG.info(\"TearDown\");\n         // stop bookkeeper service\n         stopBKCluster();\n         // stop zookeeper service\n         stopZKCluster();\n         // cleanup temp dirs\n         cleanupTempDirs();\n-        LOG.info(\"Tearing down test {}\", getClass());\n+        LOG.info(\"Tearing down test {} in {} ms.\", runtime.getMethodName(), sw.elapsed(TimeUnit.MILLISECONDS));\n     }\n \n     protected File createTempDir(String prefix, String suffix) throws IOException {\n@@ -191,7 +200,12 @@ protected void cleanupTempDirs() throws Exception {\n     protected ServerConfiguration newServerConfiguration() throws Exception {\n         File f = createTempDir(\"bookie\", \"test\");\n \n-        int port = PortManager.nextFreePort();\n+        int port;\n+        if (baseConf.isEnableLocalTransport() || !baseConf.getAllowEphemeralPorts()) {\n+            port = PortManager.nextFreePort();\n+        } else {\n+            port = 0;\n+        }\n         return newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),\n                                       f, new File[] { f });\n     }\n@@ -492,9 +506,12 @@ public void restartBookies(ServerConfiguration newConf)\n         Thread.sleep(1000);\n         // restart them to ensure we can't\n         for (ServerConfiguration conf : bsConfs) {\n+            // ensure the bookie port is loaded correctly\n+            int port = conf.getBookiePort();\n             if (null != newConf) {\n                 conf.loadConf(newConf);\n             }\n+            conf.setBookiePort(port);\n             bs.add(startBookie(conf));\n         }\n     }\n@@ -539,12 +556,10 @@ protected BookieServer startBookie(ServerConfiguration conf)\n             host = InetAddress.getLocalHost().getCanonicalHostName();\n         }\n         \n-        while ( (!conf.isForceReadOnlyBookie() && (bkc.getZkHandle().exists(\n-                    \"/ledgers/available/\" + host + \":\" + port, false) == null)) ||\n-                ( conf.isForceReadOnlyBookie() && ((bkc.getZkHandle().exists(\n-                    \"/ledgers/available/readonly/\" + host + \":\" + port, false) == null)))\n-              ) {\n-            Thread.sleep(500);\n+        while (conf.isForceReadOnlyBookie()\n+            && bkc.getZkHandle().exists(conf.getZkLedgersRootPath() +\"/available/readonly/\" + host + \":\" + port,\n+            false) == null) {\n+            Thread.sleep(100);\n         }\n \n         bkc.readBookiesBlocking();\n@@ -580,7 +595,7 @@ protected Bookie newBookie(ServerConfiguration conf) {\n             host = InetAddress.getLocalHost().getCanonicalHostName();\n         }\n         while (bkc.getZkHandle().exists(\n-                \"/ledgers/available/\" + host + \":\" + port, false) == null) {\n+                conf.getZkLedgersRootPath() + \"/available/\" + host + \":\" + port, false) == null) {\n             Thread.sleep(500);\n         }\n "},{"sha":"e0d7d1fbc994d31d2b7a5135d3e5d6b59e7a09d0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieFailureTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieFailureTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieFailureTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,13 +18,13 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Random;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n@@ -50,7 +48,7 @@\n  *\n  */\n \n-public class BookieFailureTest extends MultiLedgerManagerMultiDigestTestCase\n+public class BookieFailureTest extends BookKeeperClusterTestCase\n     implements AddCallback, ReadCallback {\n \n     // Depending on the taste, select the amount of logging\n@@ -68,7 +66,7 @@ public class BookieFailureTest extends MultiLedgerManagerMultiDigestTestCase\n     Random rng; // Random Number Generator\n     ArrayList<byte[]> entries; // generated entries\n     ArrayList<Integer> entriesSize;\n-    DigestType digestType;\n+    private final DigestType digestType;\n \n     class SyncObj {\n         int counter;\n@@ -84,9 +82,10 @@ public SyncObj() {\n         }\n     }\n \n-    public BookieFailureTest(String ledgerManagerFactory, DigestType digestType) {\n+    public BookieFailureTest() {\n         super(4);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n+        String ledgerManagerFactory = \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\";\n         // set ledger manager\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);"},{"sha":"e79fa33b6b452a56c96cefd614206fdef578d337","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieJournalRollingTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,8 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n+\n import java.io.File;\n import java.util.Enumeration;\n import java.util.concurrent.CountDownLatch;\n@@ -47,11 +47,12 @@\n public class BookieJournalRollingTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(BookieJournalRollingTest.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n     public BookieJournalRollingTest() {\n         super(1);\n         this.digestType = DigestType.CRC32;\n+        this.baseConf.setAllowEphemeralPorts(false);\n     }\n \n     @Before\n@@ -217,6 +218,7 @@ public void testJournalRollingWithoutSyncup() throws Exception {\n         // set flush interval to a large value\n         ServerConfiguration newConf = TestBKConfiguration.newServerConfiguration();\n         newConf.setFlushInterval(999999999);\n+        newConf.setAllowEphemeralPorts(false);\n         // restart bookies\n         restartBookies(newConf);\n \n@@ -255,6 +257,7 @@ public void testReplayDeletedLedgerJournalEntries() throws Exception {\n         // restart bookies with flush interval set to a large value\n         ServerConfiguration newConf = TestBKConfiguration.newServerConfiguration();\n         newConf.setFlushInterval(999999999);\n+        newConf.setAllowEphemeralPorts(false);\n         // restart bookies\n         restartBookies(newConf);\n "},{"sha":"6658bc38be333bb2648ddbe60d5294b87359ee47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieReadWriteTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n \n import java.io.File;\n import java.io.IOException;\n@@ -31,7 +30,6 @@\n import java.util.Arrays;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n@@ -57,8 +55,7 @@\n  * and three BookKeepers.\n  *\n  */\n-\n-public class BookieReadWriteTest extends MultiLedgerManagerMultiDigestTestCase\n+public class BookieReadWriteTest extends BookKeeperClusterTestCase\n     implements AddCallback, ReadCallback, ReadLastConfirmedCallback {\n \n     // Depending on the taste, select the amount of logging\n@@ -77,11 +74,12 @@ public class BookieReadWriteTest extends MultiLedgerManagerMultiDigestTestCase\n     ArrayList<byte[]> entries; // generated entries\n     ArrayList<Integer> entriesSize;\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public BookieReadWriteTest(String ledgerManagerFactory, DigestType digestType) {\n+    public BookieReadWriteTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n+        String ledgerManagerFactory = \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\";\n         // set ledger manager\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);"},{"sha":"d090c4a2d904209fb869f678f58ab83da293bc7f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FCloseTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FCloseTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FCloseTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,26 +18,24 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n \n import org.junit.*;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * This unit test tests closing ledgers sequentially. It creates 4 ledgers, then\n  * write 1000 entries to each ledger and close it.\n  *\n  */\n+public class CloseTest extends BookKeeperClusterTestCase  {\n \n-public class CloseTest extends BaseTestCase {\n-    private final static Logger LOG = LoggerFactory.getLogger(CloseTest.class);\n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public CloseTest(DigestType digestType) {\n+    public CloseTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Test(timeout=60000)"},{"sha":"4ffaada799e1abbedf6da81100b0ba5a8e978306","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConditionalSetTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -21,7 +21,6 @@\n package org.apache.bookkeeper.test;\n \n import java.io.IOException;\n-\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n@@ -30,7 +29,6 @@\n import org.apache.zookeeper.KeeperException;\n import org.junit.Before;\n import org.junit.Test;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -39,16 +37,16 @@\n /**\n  * Tests conditional set of the ledger metadata znode.\n  */\n-public class ConditionalSetTest extends BaseTestCase {\n+public class ConditionalSetTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(ConditionalSetTest.class);\n \n     byte[] entry;\n-    DigestType digestType;\n+    private final DigestType digestType;\n     BookKeeper bkcReader;\n \n-    public ConditionalSetTest(DigestType digestType) {\n+    public ConditionalSetTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Override"},{"sha":"ed2b1eb030b98fcbd981042c4f864a307cb8eb4c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.test;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,11 +18,11 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.test;\n \n import java.io.File;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.CountDownLatch;\n-\n import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n@@ -42,11 +40,15 @@\n  * This class tests the ledger delete functionality both from the BookKeeper\n  * client and the server side.\n  */\n-public class LedgerDeleteTest extends MultiLedgerManagerTestCase {\n+public class LedgerDeleteTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerDeleteTest.class);\n     DigestType digestType;\n \n-    public LedgerDeleteTest(String ledgerManagerFactory) {\n+    public LedgerDeleteTest() {\n+        this(\"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n+    }\n+\n+    LedgerDeleteTest(String ledgerManagerFactory) {\n         super(1);\n         LOG.info(\"Running test case using ledger manager : \" + ledgerManagerFactory);\n         this.digestType = DigestType.CRC32;"},{"sha":"03d1efe94dbb3b1590753d321219611439c4ca91","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LocalBookiesRegistryTest.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLocalBookiesRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLocalBookiesRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLocalBookiesRegistryTest.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -21,32 +21,22 @@\n \n package org.apache.bookkeeper.test;\n \n-import org.apache.bookkeeper.client.BookKeeper;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.proto.LocalBookiesRegistry;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.proto.LocalBookiesRegistry;\n import org.junit.Test;\n \n /**\n  * Test the correctness and the availability outside of its package of LocalBookiesRegistryTest\n  */\n-public class LocalBookiesRegistryTest extends BaseTestCase {\n-    \n-    @Override\n-    protected ServerConfiguration newServerConfiguration() throws Exception {\n-        return super\n-                .newServerConfiguration()\n-                .setDisableServerSocketBind(true)\n-                .setEnableLocalTransport(true);\n-    }\n-        \n-    BookKeeper.DigestType digestType;\n+public class LocalBookiesRegistryTest extends BookKeeperClusterTestCase {\n     \n-    public LocalBookiesRegistryTest(BookKeeper.DigestType digestType) {\n+    public LocalBookiesRegistryTest() {\n         super(3);\n-        this.digestType = digestType;\n+        baseConf.setDisableServerSocketBind(true);\n+        baseConf.setEnableLocalTransport(true);\n     }\n \n     @Test"},{"sha":"357bd34420f931700ee4b2eb75348725a59d420f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerMultiDigestTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerMultiDigestTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerMultiDigestTestCase.java?ref=b299a699794c1f0aa8447704795361739a8bd055","patch":"@@ -1,66 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.test;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-/**\n- * Running test case using different ledger managers.\n- */\n-@RunWith(Parameterized.class)\n-public abstract class MultiLedgerManagerMultiDigestTestCase extends BookKeeperClusterTestCase {\n-    static final Logger LOG = LoggerFactory.getLogger(MultiLedgerManagerMultiDigestTestCase.class);\n-\n-    public MultiLedgerManagerMultiDigestTestCase(int numBookies) {\n-        super(numBookies);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> configs() {\n-        String[] ledgerManagers = {\n-            \"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.LegacyHierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.LongHierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.MSLedgerManagerFactory\",\n-        };\n-        ArrayList<Object[]> cfgs = new ArrayList<Object[]>(ledgerManagers.length);\n-        DigestType[] digestTypes = new DigestType[] { DigestType.MAC, DigestType.CRC32 };\n-        for (String lm : ledgerManagers) {\n-            for (DigestType type : digestTypes) {\n-                cfgs.add(new Object[] { lm, type });\n-            }\n-        }\n-        return cfgs;\n-    }\n-\n-}"},{"sha":"cb640b1e3ffae07cad4a977edf0b8e20f6734839","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b299a699794c1f0aa8447704795361739a8bd055/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FMultiLedgerManagerTestCase.java?ref=b299a699794c1f0aa8447704795361739a8bd055","patch":"@@ -1,56 +0,0 @@\n-package org.apache.bookkeeper.test;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-/**\n- * Test Case run over different ledger manager.\n- */\n-@RunWith(Parameterized.class)\n-public abstract class MultiLedgerManagerTestCase extends BookKeeperClusterTestCase {\n-\n-    public MultiLedgerManagerTestCase(int numBookies) {\n-        super(numBookies);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> configs() {\n-        String[] ledgerManagers = new String[] {\n-            \"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.LegacyHierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.LongHierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.MSLedgerManagerFactory\",\n-        };\n-        ArrayList<Object[]> cfgs = new ArrayList<Object[]>(ledgerManagers.length);\n-        for (String lm : ledgerManagers) {\n-            cfgs.add(new Object[] { lm });\n-        }\n-        return cfgs;\n-    }\n-}"},{"sha":"951d4d8967ab881f9c59b52a96016aa28fd2e2b8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":2,"deletions":184,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FTestBackwardCompat.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -31,11 +31,9 @@\n import java.util.Enumeration;\n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -83,103 +81,6 @@ public void stopZooKeeperServer() throws Exception {\n         tempDirs.clear();\n     }\n \n-    /**\n-     * Version 4.0.0 classes\n-     */\n-    static class Server400 {\n-        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration conf;\n-        org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer server = null;\n-\n-        Server400(File journalDir, File ledgerDir, int port) throws Exception {\n-            conf = new org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration();\n-            conf.setBookiePort(port);\n-            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            conf.setJournalDirName(journalDir.getPath());\n-            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-        }\n-\n-        void start() throws Exception {\n-            server = new org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer(conf);\n-            server.start();\n-            waitUp(conf.getBookiePort());\n-        }\n-\n-        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration getConf() {\n-            return conf;\n-        }\n-\n-        void stop() throws Exception {\n-            if (server != null) {\n-                server.shutdown();\n-            }\n-        }\n-    }\n-\n-    static class Ledger400 {\n-        org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk;\n-        org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh;\n-\n-        private Ledger400(org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk,\n-                          org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh) {\n-            this.bk = bk;\n-            this.lh = lh;\n-        }\n-\n-        static Ledger400 newLedger() throws Exception {\n-            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.createLedger(1, 1,\n-                                  org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                  \"foobar\".getBytes());\n-            return new Ledger400(newbk, newlh);\n-        }\n-\n-        static Ledger400 openLedger(long id) throws Exception {\n-            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.openLedger(id,\n-                                org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                \"foobar\".getBytes());\n-            return new Ledger400(newbk, newlh);\n-        }\n-\n-        long getId() {\n-            return lh.getId();\n-        }\n-\n-        void write100() throws Exception {\n-            for (int i = 0; i < 100; i++) {\n-                lh.addEntry(ENTRY_DATA);\n-            }\n-        }\n-\n-        long readAll() throws Exception {\n-            long count = 0;\n-            Enumeration<org.apache.bk_v4_0_0.bookkeeper.client.LedgerEntry> entries\n-                = lh.readEntries(0, lh.getLastAddConfirmed());\n-            while (entries.hasMoreElements()) {\n-                assertTrue(\"entry data doesn't match\",\n-                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n-                count++;\n-            }\n-            return count;\n-        }\n-\n-        void close() throws Exception {\n-            try {\n-                if (lh != null) {\n-                    lh.close();\n-                }\n-            } finally {\n-                if (bk != null) {\n-                    bk.close();\n-                }\n-            }\n-        }\n-    }\n-\n     /**\n      * Version 4.1.0 classes\n      */\n@@ -290,6 +191,7 @@ static class Server420 {\n             conf.setZkServers(zkUtil.getZooKeeperConnectString());\n             conf.setJournalDirName(journalDir.getPath());\n             conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+            conf.setDiskUsageThreshold(0.999f);\n         }\n \n         void start() throws Exception {\n@@ -384,6 +286,7 @@ static class ServerCurrent {\n         ServerCurrent(File journalDir, File ledgerDir, int port,\n                 boolean useHostNameAsBookieID) throws Exception {\n             conf = TestBKConfiguration.newServerConfiguration();\n+            conf.setAllowEphemeralPorts(false);\n             conf.setBookiePort(port);\n             conf.setZkServers(zkUtil.getZooKeeperConnectString());\n             conf.setJournalDirName(journalDir.getPath());\n@@ -534,91 +437,6 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n         }\n     }\n \n-    /**\n-     * Test compatability between version 4.0.0 and the current version.\n-     * Incompatabilities are:\n-     *  - Current client will not be able to talk to 4.0.0 server.\n-     *  - 4.0.0 client will not be able to fence ledgers on current server.\n-     *  - Current server won't start with 4.0.0 server directories without upgrade.\n-     */\n-    @Test(timeout=60000)\n-    public void testCompat400() throws Exception {\n-        File journalDir = createTempDir(\"bookie\", \"journal\");\n-        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n-\n-        int port = PortManager.nextFreePort();\n-        // start server, upgrade\n-        Server400 s400 = new Server400(journalDir, ledgerDir, port);\n-        s400.start();\n-\n-        Ledger400 l400 = Ledger400.newLedger();\n-        l400.write100();\n-        long oldLedgerId = l400.getId();\n-        l400.close();\n-\n-        // Check that current client isn't able to write to old server\n-        LedgerCurrent lcur = LedgerCurrent.newLedger();\n-        try {\n-            lcur.write100();\n-            fail(\"Current shouldn't be able to write to 4.0.0 server\");\n-        } catch (Exception e) {\n-        }\n-        lcur.close();\n-\n-        s400.stop();\n-\n-        // Start the current server, will require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port, false);\n-        try {\n-            scur.start();\n-            fail(\"Shouldn't be able to start without directory upgrade\");\n-        } catch (Exception e) {\n-        }\n-        FileSystemUpgrade.upgrade(scur.getConf());\n-\n-        scur.start();\n-\n-        // check that old client can read its old ledgers on new server\n-        l400 = Ledger400.openLedger(oldLedgerId);\n-        assertEquals(100, l400.readAll());\n-        l400.close();\n-\n-        // check that old client can create ledgers on new server\n-        l400 = Ledger400.newLedger();\n-        l400.write100();\n-        l400.close();\n-\n-        // check that current client can read old ledger\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can read current client's ledgers\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can not fence a current client\n-        // due to lack of password\n-        lcur = LedgerCurrent.newLedger();\n-        lcur.write100();\n-        long fenceLedgerId = lcur.getId();\n-        try {\n-            l400 = Ledger400.openLedger(fenceLedgerId);\n-            fail(\"Shouldn't be able to open ledger\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        lcur.write100();\n-        lcur.close();\n-\n-        lcur = LedgerCurrent.openLedger(fenceLedgerId);\n-        assertEquals(200, lcur.readAll());\n-        lcur.close();\n-\n-        scur.stop();\n-    }\n-\n     /**\n      * Test compatability between version 4.1.0 and the current version.\n      *  - A 4.1.0 client is not able to open a ledger created by the current"},{"sha":"a6b9b87288d2f0dcbb46eaf79fa943bd5eb24f35","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FZooKeeperUtil.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -25,25 +25,22 @@\n import java.io.IOException;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n-\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.Transaction;\n import org.apache.zookeeper.ZooDefs.Ids;\n-\n+import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.server.NIOServerCnxnFactory;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.test.ClientBase;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import static org.junit.Assert.*;\n \n public class ZooKeeperUtil {\n@@ -89,9 +86,15 @@ public void startServer() throws Exception {\n         // start the server and client.\n         restartServer();\n \n-        // initialize the zk client with values\n-        zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-        zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        // create default bk ensemble\n+        createBKEnsemble(\"/ledgers\");\n+    }\n+\n+    public void createBKEnsemble(String ledgersPath) throws KeeperException, InterruptedException {\n+        Transaction txn = zkc.transaction();\n+        txn.create(ledgersPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        txn.create(ledgersPath + \"/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        txn.commit();\n     }\n \n     public void restartServer() throws Exception {\n@@ -113,7 +116,9 @@ public void restartServer() throws Exception {\n                 .build();\n     }\n \n-    public void sleepServer(final int seconds, final CountDownLatch l)\n+    public void sleepServer(final int time,\n+                            final TimeUnit timeUnit,\n+                            final CountDownLatch l)\n             throws InterruptedException, IOException {\n         Thread[] allthreads = new Thread[Thread.activeCount()];\n         Thread.enumerate(allthreads);\n@@ -125,7 +130,7 @@ public void run() {\n                         try {\n                             t.suspend();\n                             l.countDown();\n-                            Thread.sleep(seconds*1000);\n+                            timeUnit.sleep(time);\n                             t.resume();\n                         } catch (Exception e) {\n                             LOG.error(\"Error suspending thread\", e);"},{"sha":"b09747c06f7106eb49695a032f695912694350fa","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/3daf94143ba2b1352a56c68e1b886d7d7cd499a5/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java?ref=3daf94143ba2b1352a56c68e1b886d7d7cd499a5","patch":"@@ -24,7 +24,6 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n@@ -42,10 +41,11 @@ public class TestDiskChecker {\n     DiskChecker diskChecker;\n \n     final List<File> tempDirs = new ArrayList<File>();\n+    private static final float THRESHOLD = 0.99f;\n \n     @Before\n     public void setup() throws IOException {\n-        diskChecker = new DiskChecker(0.95f, 0.95f);\n+        diskChecker = new DiskChecker(THRESHOLD, THRESHOLD);\n \n         // Create at least one file so that target disk will never be empty\n         File placeHolderDir = IOUtils.createTempDir(\"DiskCheck\", \"test-placeholder\");\n@@ -78,7 +78,7 @@ public void testCheckDiskFull() throws IOException {\n         File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        float threshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n+        float threshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) - (1.0f - THRESHOLD));\n \n         diskChecker.setDiskSpaceThreshold(threshold, threshold);\n         diskChecker.checkDiskFull(file);"}]}