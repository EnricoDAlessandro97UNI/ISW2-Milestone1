{"sha":"6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjZjZmVjZWE2YzNlMmI2ZTMyN2ZiNTNhYzg1ZjE4OTRkZjgxYTEwYjI=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-10-06T08:05:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-10-06T08:05:18Z"},"message":"BOOKKEEPER-862: Add tracing and stats to OrderedSafeExecutor for debugging slow tasks (Leigh Stewart via sijie)","tree":{"sha":"13f6df0d18334c487c4328494540a876a35a070d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/13f6df0d18334c487c4328494540a876a35a070d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5662416d8ecef535fb089baa0a10e0dae08ae805","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5662416d8ecef535fb089baa0a10e0dae08ae805","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5662416d8ecef535fb089baa0a10e0dae08ae805"}],"stats":{"total":420,"additions":372,"deletions":48},"files":[{"sha":"14a9bedb2ff66450a0df0a03516ff4e3b4c37087","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -91,6 +91,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-802: Bookkeeper protocol documentation (ivank via sijie)\n \n+      BOOKKEEPER-862: Add tracing and stats to OrderedSafeExecutor for debugging slow tasks (Leigh Stewart via sijie)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"89ffb82c431b86f24d6e1e99dca30089a08b789e","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -142,7 +142,10 @@ public static void main(String[] args)\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                                                 .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"BenchBookieClientScheduler\");\n+        OrderedSafeExecutor executor = OrderedSafeExecutor.newBuilder()\n+                .name(\"BenchBookieClientScheduler\")\n+                .numThreads(1)\n+                .build();\n \n         ClientConfiguration conf = new ClientConfiguration();\n         BookieClient bc = new BookieClient(conf, channelFactory, executor);"},{"sha":"6bb71fad22aa13dd9459931239bcc588cd71c975","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -295,8 +295,13 @@ private BookKeeper(ClientConfiguration conf,\n         this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n \n         // initialize main worker pool\n-        this.mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n-                \"BookKeeperClientWorker\");\n+        this.mainWorkerPool = OrderedSafeExecutor.newBuilder()\n+                .name(\"BookKeeperClientWorker\")\n+                .numThreads(conf.getNumWorkerThreads())\n+                .statsLogger(statsLogger)\n+                .traceTaskExecution(conf.getEnableTaskExecutionStats())\n+                .traceTaskWarnTimeMicroSec(conf.getTaskExecutionWarnTimeMicros())\n+                .build();\n \n         // initialize bookie client\n         this.bookieClient = new BookieClient(conf, this.channelFactory, this.mainWorkerPool, statsLogger);"},{"sha":"50fe54a5df6d131e244bb3a1356ed4196dde09c6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerDeleteOp.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -89,4 +89,9 @@ public void safeOperationComplete(int rc, Void result) {\n         }\n         cb.deleteComplete(rc, this.ctx);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"LedgerDeleteOp(%d)\", ledgerId);\n+    }\n }"},{"sha":"b4c8cc862de5a50f63460a243292262d6d608481","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -412,6 +412,10 @@ public void safeOperationComplete(int rc,\n                                             newBookie);\n                                 }\n                             }\n+                            @Override\n+                            public String toString() {\n+                                return String.format(\"ReReadMetadataForUpdateEnsemble(%d)\", lh.getId());\n+                            }\n                         });\n                 return;\n             } else if (rc != BKException.Code.OK) {"},{"sha":"4ed3c03554ef76bd90f1bf2b651c8153d8ed12e0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -377,6 +377,11 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                         }\n                                     }\n                                 }\n+\n+                                @Override\n+                                public String toString() {\n+                                    return String.format(\"ReReadMetadataForClose(%d)\", ledgerId);\n+                                }\n                             });\n                         } else if (rc != BKException.Code.OK) {\n                             LOG.error(\"Error update ledger metadata for ledger \" + ledgerId + \" : \" + rc);\n@@ -385,11 +390,21 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                             cb.closeComplete(BKException.Code.OK, LedgerHandle.this, ctx);\n                         }\n                     }\n+\n+                    @Override\n+                    public String toString() {\n+                        return String.format(\"WriteLedgerConfigForClose(%d)\", ledgerId);\n+                    }\n                 };\n \n                 writeLedgerConfig(new CloseCb());\n \n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"CloseLedgerHandle(%d)\", ledgerId);\n+            }\n         });\n     }\n \n@@ -597,6 +612,10 @@ public void safeRun() {\n                                                entryId, lastAddConfirmed, currentLength, data, offset, length);\n                     op.initiate(toSend, length);\n                 }\n+                @Override\n+                public String toString() {\n+                    return String.format(\"AsyncAddEntry(lid=%d, eid=%d)\", ledgerId, entryId);\n+                }\n             });\n         } catch (RejectedExecutionException e) {\n             cb.addComplete(bk.getReturnRc(BKException.Code.InterruptedException),\n@@ -938,6 +957,11 @@ public void safeOperationComplete(final int rc, Void result) {\n             // the failed bookie has been replaced\n             unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\"ChangeEnsemble(%d)\", ledgerId);\n+        }\n     };\n \n     /**\n@@ -1059,6 +1083,10 @@ private boolean updateMetadataIfPossible(LedgerMetadata newMeta) {\n             return true;\n         }\n \n+        @Override\n+        public String toString() {\n+            return String.format(\"ReReadLedgerMetadata(%d)\", ledgerId);\n+        }\n     };\n \n     void unsetSuccessAndSendWriteRequest(final int bookieIndex) {\n@@ -1119,6 +1147,11 @@ public void safeOperationComplete(int rc, LedgerMetadata newMeta) {\n                                 recover(cb);\n                             }\n                         }\n+\n+                        @Override\n+                        public String toString() {\n+                            return String.format(\"ReReadMetadataForRecover(%d)\", ledgerId);\n+                        }\n                     });\n                 } else if (rc == BKException.Code.OK) {\n                     new LedgerRecoveryOp(LedgerHandle.this, cb).initiate();\n@@ -1127,6 +1160,11 @@ public void safeOperationComplete(int rc, LedgerMetadata newMeta) {\n                     cb.operationComplete(rc, null);\n                 }\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"WriteLedgerConfigForRecover(%d)\", ledgerId);\n+            }\n         });\n     }\n "},{"sha":"cc978664aa8e4a96b2f2dc509056e13375c132c5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerOpenOp.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -176,6 +176,10 @@ public void safeOperationComplete(int rc, Void result) {\n                         openComplete(bk.getReturnRc(BKException.Code.LedgerRecoveryException), null);\n                     }\n                 }\n+                @Override\n+                public String toString() {\n+                    return String.format(\"Recover(%d)\", ledgerId);\n+                }\n             });\n         } else {\n             lh.asyncReadLastConfirmed(new ReadLastConfirmedCallback() {"},{"sha":"711f209006c588a45aa2cca29167a07930cb1e5e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -57,6 +57,11 @@ public void safeRun() {\n                 ReadOnlyLedgerHandle.this.metadata = this.m;\n             }\n         }\n+\n+        @Override\n+        public String toString() {\n+            return String.format(\"MetadataUpdater(%d)\", ledgerId);\n+        }\n     }\n \n     ReadOnlyLedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,"},{"sha":"dde6d3a4d4ade4487ada8652a59f4c570696373b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -70,6 +70,10 @@ public class ClientConfiguration extends AbstractConfiguration {\n     // Ensemble Placement Policy\n     protected final static String ENSEMBLE_PLACEMENT_POLICY = \"ensemblePlacementPolicy\";\n \n+    // Stats\n+    protected final static String ENABLE_TASK_EXECUTION_STATS = \"enableTaskExecutionStats\";\n+    protected final static String TASK_EXECUTION_WARN_TIME_MICROS = \"taskExecutionWarnTimeMicros\";\n+\n     /**\n      * Construct a default client-side configuration\n      */\n@@ -619,4 +623,46 @@ public ClientConfiguration setEnsemblePlacementPolicy(Class<? extends EnsemblePl\n         setProperty(ENSEMBLE_PLACEMENT_POLICY, policyClass.getName());\n         return this;\n     }\n+\n+    /**\n+     * Whether to enable recording task execution stats.\n+     *\n+     * @return flag to enable/disable recording task execution stats.\n+     */\n+    public boolean getEnableTaskExecutionStats() {\n+        return getBoolean(ENABLE_TASK_EXECUTION_STATS, false);\n+    }\n+\n+    /**\n+     * Enable/Disable recording task execution stats.\n+     *\n+     * @param enabled\n+     *          flag to enable/disable recording task execution stats.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setEnableTaskExecutionStats(boolean enabled) {\n+        setProperty(ENABLE_TASK_EXECUTION_STATS, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get task execution duration which triggers a warning.\n+     *\n+     * @return time in microseconds which triggers a warning.\n+     */\n+    public long getTaskExecutionWarnTimeMicros() {\n+        return getLong(TASK_EXECUTION_WARN_TIME_MICROS, TimeUnit.SECONDS.toMicros(1));\n+    }\n+\n+    /**\n+     * Set task execution duration which triggers a warning.\n+     *\n+     * @param warnTime\n+     *          time in microseconds which triggers a warning.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setTaskExecutionWarnTimeMicros(long warnTime) {\n+        setProperty(TASK_EXECUTION_WARN_TIME_MICROS, warnTime);\n+        return this;\n+    }\n }"},{"sha":"87d1865314361275f548a14da94fc732e213bc8a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieClient.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -318,8 +318,10 @@ public void writeComplete(int rc, long ledger, long entry, BookieSocketAddress a\n                         \"BookKeeper-NIOBoss-%d\").build()),\n                 Executors.newCachedThreadPool(tfb.setNameFormat(\n                         \"BookKeeper-NIOWorker-%d\").build()));\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n-                \"BookieClientWorker\");\n+        OrderedSafeExecutor executor = OrderedSafeExecutor.newBuilder()\n+                .name(\"BookieClientWorker\")\n+                .numThreads(1)\n+                .build();\n         BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         BookieSocketAddress addr = new BookieSocketAddress(args[0], Integer.parseInt(args[1]));\n "},{"sha":"9ffca5370b1ff9272f0449950304ebe23fef5a31","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -71,4 +71,8 @@ protected BKPacketHeader getHeader() {\n         return header.build();\n     }\n \n+    @Override\n+    public String toString() {\n+        return request.toString();\n+    }\n }"},{"sha":"6d8058fd10cc940be210609409bf58b9b30c4393","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -550,6 +550,11 @@ public void safeRun() {\n                 readCompletion.cb.readEntryComplete(rc, readCompletion.ledgerId, readCompletion.entryId,\n                                                     null, readCompletion.ctx);\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"ErrorOutReadKey(%s)\", key);\n+            }\n         });\n     }\n \n@@ -577,6 +582,11 @@ public void safeRun() {\n                                                addr, addCompletion.ctx);\n                 LOG.debug(\"Invoked callback method: {}\", addCompletion.entryId);\n             }\n+\n+            @Override\n+            public String toString() {\n+                return String.format(\"ErrorOutAddKey(%s)\", key);\n+            }\n         });\n     }\n \n@@ -724,6 +734,13 @@ public void safeRun() {\n                             break;\n                     }\n                 }\n+\n+                @Override\n+                public String toString() {\n+                    return String.format(\"HandleResponse(Txn=%d, Type=%s, Entry=(%d, %d))\",\n+                                         header.getTxnId(), header.getOperation(),\n+                                         completionValue.ledgerId, completionValue.entryId);\n+                }\n             });\n         }\n     }"},{"sha":"43360fa988726addc372d17fb6fd37a147d8796d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -132,4 +132,9 @@ protected void processPacket() {\n                          requestProcessor.readRequestStats);\n         }\n     }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ReadEntry(%d, %d)\", request.getLedgerId(), request.getEntryId());\n+    }\n }"},{"sha":"b314998f924621eff4e214619bb41bcccac63113","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -100,4 +100,10 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n                      ResponseBuilder.buildAddResponse(request),\n                      requestProcessor.addRequestStats);\n     }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"WriteEntry(%d, %d)\",\n+                             request.getLedgerId(), request.getEntryId());\n+    }\n }"},{"sha":"f1d0e9f925d76ad842a78a6b9dfcd0d7d5de7ce5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":192,"deletions":29,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -17,16 +17,25 @@\n  */\n package org.apache.bookkeeper.util;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import java.util.Random;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -47,50 +56,190 @@\n  *\n  */\n public class OrderedSafeExecutor {\n-    final ExecutorService threads[];\n+    final static long WARN_TIME_MICRO_SEC_DEFAULT = TimeUnit.SECONDS.toMicros(1);\n+    final String name;\n+    final ThreadPoolExecutor threads[];\n     final long threadIds[];\n+    final BlockingQueue<Runnable> queues[];\n     final Random rand = new Random();\n+    final OpStatsLogger taskExecutionStats;\n+    final OpStatsLogger taskPendingStats;\n+    final boolean traceTaskExecution;\n+    final long warnTimeMicroSec;\n+\n+    public static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    public static class Builder {\n+        private String name = \"OrderedSafeExecutor\";\n+        private int numThreads = Runtime.getRuntime().availableProcessors();\n+        private ThreadFactory threadFactory = null;\n+        private StatsLogger statsLogger = NullStatsLogger.INSTANCE;\n+        private boolean traceTaskExecution = false;\n+        private long warnTimeMicroSec = WARN_TIME_MICRO_SEC_DEFAULT;\n+\n+        public Builder name(String name) {\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder numThreads(int num) {\n+            this.numThreads = num;\n+            return this;\n+        }\n+\n+        public Builder threadFactory(ThreadFactory threadFactory) {\n+            this.threadFactory = threadFactory;\n+            return this;\n+        }\n+\n+        public Builder statsLogger(StatsLogger statsLogger) {\n+            this.statsLogger = statsLogger;\n+            return this;\n+        }\n+\n+        public Builder traceTaskExecution(boolean enabled) {\n+            this.traceTaskExecution = enabled;\n+            return this;\n+        }\n+\n+        public Builder traceTaskWarnTimeMicroSec(long warnTimeMicroSec) {\n+            this.warnTimeMicroSec = warnTimeMicroSec;\n+            return this;\n+        }\n+\n+        public OrderedSafeExecutor build() {\n+            if (null == threadFactory) {\n+                threadFactory = Executors.defaultThreadFactory();\n+            }\n+            return new OrderedSafeExecutor(name, numThreads, threadFactory, statsLogger,\n+                                           traceTaskExecution, warnTimeMicroSec);\n+        }\n+\n+    }\n+\n+    private class TimedRunnable extends SafeRunnable {\n+        final SafeRunnable runnable;\n+        final long initNanos;\n+\n+        TimedRunnable(SafeRunnable runnable) {\n+            this.runnable = runnable;\n+            this.initNanos = MathUtils.nowInNano();\n+         }\n+\n+        @Override\n+        public void safeRun() {\n+            taskPendingStats.registerSuccessfulEvent(initNanos, TimeUnit.NANOSECONDS);\n+            long startNanos = MathUtils.nowInNano();\n+            this.runnable.safeRun();\n+            long elapsedMicroSec = MathUtils.elapsedMicroSec(startNanos);\n+            taskExecutionStats.registerSuccessfulEvent(elapsedMicroSec, TimeUnit.MICROSECONDS);\n+            if (elapsedMicroSec >= warnTimeMicroSec) {\n+                logger.warn(\"Runnable {}:{} took too long {} micros to execute.\",\n+                            new Object[] { runnable, runnable.getClass(), elapsedMicroSec });\n+            }\n+        }\n+     }\n+\n+    @Deprecated\n+    public OrderedSafeExecutor(int numThreads, String threadName) {\n+        this(threadName, numThreads, Executors.defaultThreadFactory(), NullStatsLogger.INSTANCE,\n+             false, WARN_TIME_MICRO_SEC_DEFAULT);\n+    }\n \n     /**\n      * Constructs Safe executor\n      *\n      * @param numThreads\n      *            - number of threads\n-     * @param threadName\n-     *            - name of the thread\n+     * @param baseName\n+     *            - base name of executor threads\n+     * @param threadFactory\n+     *            - for constructing threads\n+     * @param statsLogger\n+     *            - for reporting executor stats\n+     * @param traceTaskExecution\n+     *            - should we stat task execution\n+     * @param warnTimeMicroSec\n+     *            - log long task exec warning after this interval\n      */\n-    public OrderedSafeExecutor(int numThreads, String threadName) {\n-        if (numThreads <= 0) {\n-            throw new IllegalArgumentException();\n-        }\n-        if (StringUtils.isBlank(threadName)) {\n-            // sets default name\n-            threadName = \"OrderedSafeExecutor\";\n-        }\n-        threads = new ExecutorService[numThreads];\n+    @SuppressWarnings(\"unchecked\")\n+    private OrderedSafeExecutor(String baseName, int numThreads, ThreadFactory threadFactory,\n+                                StatsLogger statsLogger, boolean traceTaskExecution,\n+                                long warnTimeMicroSec) {\n+        Preconditions.checkArgument(numThreads > 0);\n+        Preconditions.checkArgument(!StringUtils.isBlank(baseName));\n+\n+        this.warnTimeMicroSec = warnTimeMicroSec;\n+        name = baseName;\n+        threads = new ThreadPoolExecutor[numThreads];\n         threadIds = new long[numThreads];\n+        queues = new BlockingQueue[numThreads];\n         for (int i = 0; i < numThreads; i++) {\n-            StringBuilder thName = new StringBuilder(threadName);\n-            thName.append(\"-\");\n-            thName.append(i);\n-            thName.append(\"-%d\");\n-            ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n-                    .setNameFormat(thName.toString());\n-            threads[i] = Executors.newSingleThreadExecutor(tfb.build());\n-            final int tid = i;\n+            queues[i] = new LinkedBlockingQueue<Runnable>();\n+            threads[i] =  new ThreadPoolExecutor(1, 1,\n+                    0L, TimeUnit.MILLISECONDS, queues[i],\n+                    new ThreadFactoryBuilder()\n+                        .setNameFormat(name + \"-orderedsafeexecutor-\" + i + \"-%d\")\n+                        .setThreadFactory(threadFactory)\n+                        .build());\n+\n+            // Save thread ids\n+            final int idx = i;\n             try {\n-                threads[i].submit(new SafeRunnable() {\n+                threads[idx].submit(new SafeRunnable() {\n                     @Override\n                     public void safeRun() {\n-                        threadIds[tid] = Thread.currentThread().getId();\n+                        threadIds[idx] = Thread.currentThread().getId();\n                     }\n                 }).get();\n             } catch (InterruptedException e) {\n                 throw new RuntimeException(\"Couldn't start thread \" + i, e);\n             } catch (ExecutionException e) {\n                 throw new RuntimeException(\"Couldn't start thread \" + i, e);\n             }\n+\n+            // Register gauges\n+            statsLogger.registerGauge(String.format(\"%s-queue-%d\", name, idx), new Gauge<Number>() {\n+                @Override\n+                public Number getDefaultValue() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public Number getSample() {\n+                    return queues[idx].size();\n+                }\n+            });\n+            statsLogger.registerGauge(String.format(\"%s-completed-tasks-%d\", name, idx), new Gauge<Number>() {\n+                @Override\n+                public Number getDefaultValue() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public Number getSample() {\n+                    return threads[idx].getCompletedTaskCount();\n+                }\n+            });\n+            statsLogger.registerGauge(String.format(\"%s-total-tasks-%d\", name, idx), new Gauge<Number>() {\n+                @Override\n+                public Number getDefaultValue() {\n+                    return 0;\n+                }\n+\n+                @Override\n+                public Number getSample() {\n+                    return threads[idx].getTaskCount();\n+                }\n+            });\n         }\n+\n+        // Stats\n+        this.taskExecutionStats = statsLogger.scope(name).getOpStatsLogger(\"task_execution\");\n+        this.taskPendingStats = statsLogger.scope(name).getOpStatsLogger(\"task_queued\");\n+        this.traceTaskExecution = traceTaskExecution;\n     }\n \n     ExecutorService chooseThread() {\n@@ -113,11 +262,19 @@ ExecutorService chooseThread(Object orderingKey) {\n \n     }\n \n+    private SafeRunnable timedRunnable(SafeRunnable r) {\n+        if (traceTaskExecution) {\n+            return new TimedRunnable(r);\n+        } else {\n+            return r;\n+        }\n+    }\n+\n     /**\n      * schedules a one time action to execute\n      */\n     public void submit(SafeRunnable r) {\n-        chooseThread().submit(r);\n+        chooseThread().submit(timedRunnable(r));\n     }\n \n     /**\n@@ -126,7 +283,7 @@ public void submit(SafeRunnable r) {\n      * @param r\n      */\n     public void submitOrdered(Object orderingKey, SafeRunnable r) {\n-        chooseThread(orderingKey).submit(r);\n+        chooseThread(orderingKey).submit(timedRunnable(r));\n     }\n \n     private long getThreadID(Object orderingKey) {\n@@ -184,11 +341,17 @@ public final void operationComplete(final int rc, final T result) {\n             } else {\n                 try {\n                     executor.submitOrdered(orderingKey, new SafeRunnable() {\n-                            @Override\n-                            public void safeRun() {\n-                                safeOperationComplete(rc, result);\n-                            }\n-                        });\n+                        @Override\n+                        public void safeRun() {\n+                            safeOperationComplete(rc, result);\n+                        }\n+                        @Override\n+                        public String toString() {\n+                            return String.format(\"Callback(key=%s, name=%s)\",\n+                                                 orderingKey,\n+                                                 OrderedSafeGenericCallback.this);\n+                        }\n+                    });\n                 } catch (RejectedExecutionException re) {\n                     LOG.warn(\"Failed to submit callback for {} : \", orderingKey, re);\n                 }"},{"sha":"ac6bd8d4df21000f34bc5351ee03585c1ff1ec9b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -70,8 +70,7 @@ public void testConnectCloseRace() throws Exception {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n-                \"BKClientOrderedSafeExecutor\");\n+        OrderedSafeExecutor executor = getOrderedSafeExecutor();\n \n         BookieSocketAddress addr = getBookie(0);\n         for (int i = 0; i < 1000; i++) {\n@@ -89,6 +88,15 @@ public void operationComplete(int rc, PerChannelBookieClient client) {\n         executor.shutdown();\n     }\n \n+    public OrderedSafeExecutor getOrderedSafeExecutor() {\n+        return OrderedSafeExecutor.newBuilder()\n+            .name(\"PCBC\")\n+            .numThreads(1)\n+            .traceTaskExecution(true)\n+            .traceTaskWarnTimeMicroSec(TimeUnit.MILLISECONDS.toMicros(100))\n+            .build();\n+    }\n+\n     /**\n      * Test race scenario found in {@link https://issues.apache.org/jira/browse/BOOKKEEPER-5}\n      * where multiple clients try to connect a channel simultaneously. If not synchronised\n@@ -106,8 +114,7 @@ public void operationComplete(int rc, PerChannelBookieClient pcbc) {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n-                \"BKClientOrderedSafeExecutor\");\n+        OrderedSafeExecutor executor = getOrderedSafeExecutor();\n \n         BookieSocketAddress addr = getBookie(0);\n         for (int i = 0; i < 100; i++) {\n@@ -140,8 +147,7 @@ public void operationComplete(int rc, PerChannelBookieClient client) {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n-                \"BKClientOrderedSafeExecutor\");\n+        OrderedSafeExecutor executor = getOrderedSafeExecutor();\n         BookieSocketAddress addr = getBookie(0);\n \n         final PerChannelBookieClient client = new PerChannelBookieClient(executor, channelFactory, addr);\n@@ -238,8 +244,7 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        final OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n-                \"BKClientOrderedSafeExecutor\");\n+        final OrderedSafeExecutor executor = getOrderedSafeExecutor();\n         BookieSocketAddress addr = getBookie(0);\n \n         final PerChannelBookieClient client = new PerChannelBookieClient(executor, channelFactory, addr);"},{"sha":"a170cee12c24c5a1d69ccc3937282fe4ffc0586e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieClientTest.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -73,7 +73,10 @@ public void setUp() throws Exception {\n         bs.start();\n         channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n-        executor = new OrderedSafeExecutor(2, \"BKClientOrderedSafeExecutor\");\n+        executor = OrderedSafeExecutor.newBuilder()\n+                .name(\"BKClientOrderedSafeExecutor\")\n+                .numThreads(2)\n+                .build();\n     }\n \n     @After"},{"sha":"3a361294b479fbab0823f5fed90d9f59dfd2eece","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLoopbackClient.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -96,7 +96,10 @@ public static void main(String args[]) {\n         LoopbackClient lb;\n         ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(2, \"BookieClientScheduler\");\n+        OrderedSafeExecutor executor = OrderedSafeExecutor.newBuilder()\n+                .name(\"BookieClientScheduler\")\n+                .numThreads(2)\n+                .build();\n         try {\n             BookieSocketAddress addr = new BookieSocketAddress(\"127.0.0.1\", Integer.valueOf(args[2]).intValue());\n             lb = new LoopbackClient(channelFactory, executor, begin, limit.intValue());"},{"sha":"d58883d9ef849c7715280718e312a62ae1acab49","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fbenchmark%2FBookieBenchmark.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fbenchmark%2FBookieBenchmark.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fbenchmark%2FBookieBenchmark.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -41,8 +41,10 @@ public class BookieBenchmark extends AbstractBenchmark {\n     BookieClient bkc;\n     BookieSocketAddress addr;\n     ClientSocketChannelFactory channelFactory;\n-    OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"BookieBenchmarkScheduler\");\n-\n+    OrderedSafeExecutor executor = OrderedSafeExecutor.newBuilder()\n+            .name(\"BookieBenchmarkScheduler\")\n+            .numThreads(1)\n+            .build();\n \n     public BookieBenchmark(String bookieHostPort)  throws Exception {\n         channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());"},{"sha":"48be3e8e1efae23d4ca6b521cdc26a8dfbc38cf6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fpersistence%2FReadAheadCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6cfecea6c3e2b6e327fb53ac85f1894df81a10b2/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fpersistence%2FReadAheadCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/hedwig-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fhedwig%2Fserver%2Fpersistence%2FReadAheadCache.java?ref=6cfecea6c3e2b6e327fb53ac85f1894df81a10b2","patch":"@@ -154,8 +154,10 @@ public ReadAheadCache(PersistenceManagerWithRangeScan realPersistenceManager, Se\n         this.realPersistenceManager = realPersistenceManager;\n         this.cfg = cfg;\n         numCacheWorkers = cfg.getNumReadAheadCacheThreads();\n-        cacheWorkers = new OrderedSafeExecutor(numCacheWorkers,\n-                \"ReadAheadCacheScheduler\");\n+        cacheWorkers = OrderedSafeExecutor.newBuilder()\n+                .name(\"ReadAheadCacheScheduler\")\n+                .numThreads(numCacheWorkers)\n+                .build();\n         reloadConf(cfg);\n     }\n "}]}