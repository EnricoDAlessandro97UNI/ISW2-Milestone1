{"sha":"24591f1514624e09a07ef2f34ba35116ea847266","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjI0NTkxZjE1MTQ2MjRlMDlhMDdlZjJmMzRiYTM1MTE2ZWE4NDcyNjY=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-12-06T07:03:13Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-12-06T07:03:13Z"},"message":"BOOKKEEPER-811: Recovery tool doesn't remove cookie after recovering one bookie (Charles Xie via sijie)","tree":{"sha":"f1666ffb93be1e463a7a33fc47d2e66a84215d90","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f1666ffb93be1e463a7a33fc47d2e66a84215d90"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/24591f1514624e09a07ef2f34ba35116ea847266","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/24591f1514624e09a07ef2f34ba35116ea847266","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/24591f1514624e09a07ef2f34ba35116ea847266","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/24591f1514624e09a07ef2f34ba35116ea847266/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"92e502233d1489290fbcb448b932fdc4b569d431","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/92e502233d1489290fbcb448b932fdc4b569d431","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/92e502233d1489290fbcb448b932fdc4b569d431"}],"stats":{"total":108,"additions":96,"deletions":12},"files":[{"sha":"e99d8299565e637f683ecd6127f832c2f50a862b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/24591f1514624e09a07ef2f34ba35116ea847266/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/24591f1514624e09a07ef2f34ba35116ea847266/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=24591f1514624e09a07ef2f34ba35116ea847266","patch":"@@ -32,6 +32,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-813: BookieShell doesn't find index directory (Charles Xie via sijie)\n \n+      BOOKKEEPER-811: Recovery tool doesn't remove cookie after recovering one bookie (Charles Xie via sijie)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"a1e4639fb035e1ed6bb93dad6812a2dee7f35a5a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":31,"deletions":8,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=24591f1514624e09a07ef2f34ba35116ea847266","patch":"@@ -54,6 +54,7 @@\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n \n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -207,6 +208,7 @@ public BookieFormatCmd() {\n             opts.addOption(\"f\", \"force\", false,\n                     \"If [nonInteractive] is specified, then whether\"\n                             + \" to force delete the old data without prompt..?\");\n+            opts.addOption(\"d\", \"deleteCookie\", false, \"Delete its cookie on zookeeper\");\n         }\n \n         @Override\n@@ -221,7 +223,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"bookieformat [-nonInteractive] [-force]\";\n+            return \"bookieformat [-nonInteractive] [-force] [-deleteCookie]\";\n         }\n \n         @Override\n@@ -231,6 +233,19 @@ int runCmd(CommandLine cmdLine) throws Exception {\n \n             ServerConfiguration conf = new ServerConfiguration(bkConf);\n             boolean result = Bookie.format(conf, interactive, force);\n+            // delete cookie\n+            if (cmdLine.hasOption(\"d\")) {\n+                ZooKeeperClient zkc =\n+                        ZooKeeperClient.createConnectedZooKeeperClient(conf.getZkServers(), conf.getZkTimeout());\n+                try {\n+                    Versioned<Cookie> cookie = Cookie.readFromZooKeeper(zkc, conf);\n+                    cookie.getValue().deleteFromZooKeeper(zkc, conf, cookie.getVersion());\n+                } catch (KeeperException.NoNodeException nne) {\n+                    LOG.warn(\"No cookie to remove : \", nne);\n+                } finally {\n+                    zkc.close();\n+                }\n+            }\n             return (result) ? 0 : 1;\n         }\n     }\n@@ -243,6 +258,7 @@ class RecoverCmd extends MyCommand {\n \n         public RecoverCmd() {\n             super(CMD_RECOVER);\n+            opts.addOption(\"d\", \"deleteCookie\", false, \"Delete cookie node for the bookie.\");\n         }\n \n         @Override\n@@ -257,7 +273,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"recover      <bookieSrc> [bookieDest]\";\n+            return \"recover [-deleteCookie] <bookieSrc> [bookieDest]\";\n         }\n \n         @Override\n@@ -271,16 +287,15 @@ int runCmd(CommandLine cmdLine) throws Exception {\n             ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n             BookKeeperAdmin admin = new BookKeeperAdmin(adminConf);\n             try {\n-                return bkRecovery(admin, args);\n+                return bkRecovery(adminConf, admin, args, cmdLine.hasOption(\"d\"));\n             } finally {\n-                if (null != admin) {\n-                    admin.close();\n-                }\n+                admin.close();\n             }\n         }\n \n-        private int bkRecovery(BookKeeperAdmin bkAdmin, String[] args)\n-                throws InterruptedException, BKException {\n+        private int bkRecovery(ClientConfiguration conf, BookKeeperAdmin bkAdmin,\n+                               String[] args, boolean deleteCookie)\n+                throws InterruptedException, BKException, KeeperException, IOException {\n             final String bookieSrcString[] = args[0].split(\":\");\n             if (bookieSrcString.length != 2) {\n                 System.err.println(\"BookieSrc inputted has invalid format\"\n@@ -302,6 +317,14 @@ private int bkRecovery(BookKeeperAdmin bkAdmin, String[] args)\n             }\n \n             bkAdmin.recoverBookieData(bookieSrc, bookieDest);\n+            if (deleteCookie) {\n+                try {\n+                    Versioned<Cookie> cookie = Cookie.readFromZooKeeper(bkAdmin.getZooKeeper(), conf, bookieSrc);\n+                    cookie.getValue().deleteFromZooKeeper(bkAdmin.getZooKeeper(), conf, bookieSrc, cookie.getVersion());\n+                } catch (KeeperException.NoNodeException nne) {\n+                    LOG.warn(\"No cookie to remove for {} : \", bookieSrc, nne);\n+                }\n+            }\n             return 0;\n         }\n     }"},{"sha":"349eee5df1bf77d2716a8d7b5a1772aa9cd8af4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":54,"deletions":4,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java?ref=24591f1514624e09a07ef2f34ba35116ea847266","patch":"@@ -35,8 +35,10 @@\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n \n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.ZkVersion;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.versioning.Version;\n@@ -232,13 +234,33 @@ void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version)\n      * @throws InterruptedException\n      * @throws UnknownHostException\n      */\n-    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version) throws KeeperException,\n+    public void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version) throws KeeperException,\n             InterruptedException, UnknownHostException {\n+        BookieSocketAddress address = Bookie.getBookieAddress(conf);\n+        deleteFromZooKeeper(zk, conf, address, version);\n+    }\n+\n+    /**\n+     * Delete cookie from zookeeper\n+     *\n+     * @param zk zookeeper client\n+     * @param conf configuration instance\n+     * @param address bookie address\n+     * @param version cookie version\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws UnknownHostException\n+     */\n+    public void deleteFromZooKeeper(ZooKeeper zk, AbstractConfiguration conf,\n+                                    BookieSocketAddress address, Version version)\n+            throws KeeperException, InterruptedException, UnknownHostException {\n         if (!(version instanceof ZkVersion)) {\n             throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");\n         }\n-        String zkPath = getZkPath(conf);\n+\n+        String zkPath = getZkPath(conf, address);\n         zk.delete(zkPath, ((ZkVersion)version).getZnodeVersion());\n+        LOG.info(\"Removed cookie from {} for bookie {}.\", conf.getZkLedgersRootPath(), address);\n     }\n \n     /**\n@@ -284,7 +306,24 @@ static Builder generateCookie(ServerConfiguration conf)\n      */\n     static Versioned<Cookie> readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, IOException, UnknownHostException {\n-        String zkPath = getZkPath(conf);\n+        return readFromZooKeeper(zk, conf, Bookie.getBookieAddress(conf));\n+    }\n+\n+    /**\n+     * Read cookie from zookeeper for a given bookie <i>address</i>\n+     *\n+     * @param zk zookeeper client\n+     * @param conf configuration instance\n+     * @param address bookie address\n+     * @return versioned cookie object\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     * @throws UnknownHostException\n+     */\n+    static Versioned<Cookie> readFromZooKeeper(ZooKeeper zk, AbstractConfiguration conf, BookieSocketAddress address)\n+            throws KeeperException, InterruptedException, IOException, UnknownHostException {\n+        String zkPath = getZkPath(conf, address);\n \n         Stat stat = zk.exists(zkPath, false);\n         byte[] data = zk.getData(zkPath, false, stat);\n@@ -334,9 +373,20 @@ static Cookie readFromDirectory(File directory) throws IOException {\n      */\n     static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n+        return getZkPath(conf, Bookie.getBookieAddress(conf));\n+    }\n+\n+    /**\n+     * Return cookie path for a given bookie <i>address</i>\n+     *\n+     * @param conf configuration\n+     * @param address bookie address\n+     * @return cookie path for bookie\n+     */\n+    static String getZkPath(AbstractConfiguration conf, BookieSocketAddress address) {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n-        return bookieCookiePath + \"/\" + Bookie.getBookieAddress(conf);\n+        return bookieCookiePath + \"/\" + address;\n     }\n \n     /**"},{"sha":"fbca7d262291226ecf3763db4352a876d16c2553","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/24591f1514624e09a07ef2f34ba35116ea847266/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=24591f1514624e09a07ef2f34ba35116ea847266","patch":"@@ -171,6 +171,15 @@ public void close() throws InterruptedException, BKException {\n         }\n     }\n \n+    /**\n+     * Get {@link org.apache.zookeeper.ZooKeeper} used by bookkeeper admin client.\n+     *\n+     * @return zookeeper client used by bookkeeper admin client\n+     */\n+    public ZooKeeper getZooKeeper() {\n+        return zk;\n+    }\n+\n     /**\n      * Get a list of the available bookies.\n      *"}]}