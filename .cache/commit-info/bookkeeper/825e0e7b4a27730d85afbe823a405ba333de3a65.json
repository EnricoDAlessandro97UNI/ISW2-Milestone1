{"sha":"825e0e7b4a27730d85afbe823a405ba333de3a65","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjgyNWUwZTdiNGEyNzczMGQ4NWFmYmU4MjNhNDA1YmEzMzNkZTNhNjU=","commit":{"author":{"name":"Govind Menon","email":"govindappumenon@gmail.com","date":"2017-03-28T20:39:22Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-28T20:39:22Z"},"message":"BOOKKEEPER-1004: Allow bookie garbage collection to be triggered manuâ€¦\n\nRan CompactionTest#testForceGarbageCollection\n\nAuthor: Govind Menon <govindappumenon@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>\n\nCloses #109 from govind-menon/BOOKKEEPER-1004","tree":{"sha":"6dde607e510cc49d3426ed9357c5093f4d1e9947","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/6dde607e510cc49d3426ed9357c5093f4d1e9947"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/825e0e7b4a27730d85afbe823a405ba333de3a65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/825e0e7b4a27730d85afbe823a405ba333de3a65","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/825e0e7b4a27730d85afbe823a405ba333de3a65","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/825e0e7b4a27730d85afbe823a405ba333de3a65/comments","author":{"login":"govind-menon","id":2053016,"node_id":"MDQ6VXNlcjIwNTMwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2053016?v=4","gravatar_id":"","url":"https://api.github.com/users/govind-menon","html_url":"https://github.com/govind-menon","followers_url":"https://api.github.com/users/govind-menon/followers","following_url":"https://api.github.com/users/govind-menon/following{/other_user}","gists_url":"https://api.github.com/users/govind-menon/gists{/gist_id}","starred_url":"https://api.github.com/users/govind-menon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/govind-menon/subscriptions","organizations_url":"https://api.github.com/users/govind-menon/orgs","repos_url":"https://api.github.com/users/govind-menon/repos","events_url":"https://api.github.com/users/govind-menon/events{/privacy}","received_events_url":"https://api.github.com/users/govind-menon/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6"}],"stats":{"total":141,"additions":80,"deletions":61},"files":[{"sha":"f4b35f834ecdbc88fc2f63112563649afd7a7925","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":77,"deletions":59,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=825e0e7b4a27730d85afbe823a405ba333de3a65","patch":"@@ -29,30 +29,39 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.RateLimiter;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.GarbageCollector.GarbageCleaner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.SafeRunnable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * This is the garbage collector thread that runs in the background to\n  * remove any entry log files that no longer contains any active ledger.\n  */\n-public class GarbageCollectorThread extends BookieThread {\n+public class GarbageCollectorThread extends SafeRunnable {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n     private static final int SECOND = 1000;\n \n     // Maps entry log files to the set of ledgers that comprise the file and the size usage per ledger\n     private Map<Long, EntryLogMetadata> entryLogMetaMap = new ConcurrentHashMap<Long, EntryLogMetadata>();\n \n+    ScheduledExecutorService gcExecutor;\n+    Future<?> scheduledFuture = null;\n+\n     // This is how often we want to run the Garbage Collector Thread (in milliseconds).\n     final long gcWaitTime;\n \n@@ -188,7 +197,9 @@ public GarbageCollectorThread(ServerConfiguration conf,\n                                   LedgerManager ledgerManager,\n                                   final CompactableLedgerStorage ledgerStorage)\n         throws IOException {\n-        super(\"GarbageCollectorThread\");\n+        gcExecutor = Executors.newSingleThreadScheduledExecutor(\n+                new ThreadFactoryBuilder().setNameFormat(\"GarbageCollectorThread-%d\").build()\n+        );\n \n         this.entryLogger = ledgerStorage.getEntryLogger();\n         this.ledgerStorage = ledgerStorage;\n@@ -266,10 +277,10 @@ public void clean(long ledgerId) {\n         lastMinorCompactionTime = lastMajorCompactionTime = MathUtils.now();\n     }\n \n-    public synchronized void enableForceGC() {\n+    public void enableForceGC() {\n         if (forceGarbageCollection.compareAndSet(false, true)) {\n             LOG.info(\"Forced garbage collection triggered by thread: {}\", Thread.currentThread().getName());\n-            notify();\n+            triggerGC();\n         }\n     }\n \n@@ -280,6 +291,13 @@ public void disableForceGC() {\n         }\n     }\n \n+    /**\n+     * Manually trigger GC (for testing)\n+     */\n+    Future<?> triggerGC() {\n+        return gcExecutor.submit(this);\n+    }\n+\n     public void suspendMajorGC() {\n         if (suspendMajorCompaction.compareAndSet(false, true)) {\n             LOG.info(\"Suspend Major Compaction triggered by thread: {}\", Thread.currentThread().getName());\n@@ -304,64 +322,60 @@ public void resumeMinorGC() {\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        while (running) {\n-            synchronized (this) {\n-                try {\n-                    wait(gcWaitTime);\n-                } catch (InterruptedException e) {\n-                    Thread.currentThread().interrupt();\n-                    continue;\n-                }\n-            }\n-\n-            boolean force = forceGarbageCollection.get();\n-            if (force) {\n-                LOG.info(\"Garbage collector thread forced to perform GC before expiry of wait time.\");\n-            }\n+    public void start() {\n+        if (scheduledFuture != null) {\n+            scheduledFuture.cancel(false);\n+        }\n+        scheduledFuture = gcExecutor.scheduleAtFixedRate(this, gcWaitTime, gcWaitTime, TimeUnit.MILLISECONDS);\n+    }\n \n-            // Extract all of the ledger ID's that comprise all of the entry logs\n-            // (except for the current new one which is still being written to).\n-            entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);\n+    @Override\n+    public void safeRun() {\n+        boolean force = forceGarbageCollection.get();\n+        if (force) {\n+            LOG.info(\"Garbage collector thread forced to perform GC before expiry of wait time.\");\n+        }\n \n-            // gc inactive/deleted ledgers\n-            doGcLedgers();\n+        // Extract all of the ledger ID's that comprise all of the entry logs\n+        // (except for the current new one which is still being written to).\n+        entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);\n \n-            // gc entry logs\n-            doGcEntryLogs();\n+        // gc inactive/deleted ledgers\n+        doGcLedgers();\n \n-            boolean suspendMajor = suspendMajorCompaction.get();\n-            boolean suspendMinor = suspendMinorCompaction.get();\n-            if (suspendMajor) {\n-                LOG.info(\"Disk almost full, suspend major compaction to slow down filling disk.\");\n-            }\n-            if (suspendMinor) {\n-                LOG.info(\"Disk full, suspend minor compaction to slow down filling disk.\");\n-            }\n+        // gc entry logs\n+        doGcEntryLogs();\n \n-            long curTime = MathUtils.now();\n-            if (enableMajorCompaction && (!suspendMajor) &&\n-                (force || curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n-                // enter major compaction\n-                LOG.info(\"Enter major compaction, suspendMajor {}\", suspendMajor);\n-                doCompactEntryLogs(majorCompactionThreshold);\n-                lastMajorCompactionTime = MathUtils.now();\n-                // also move minor compaction time\n-                lastMinorCompactionTime = lastMajorCompactionTime;\n-                continue;\n-            }\n+        boolean suspendMajor = suspendMajorCompaction.get();\n+        boolean suspendMinor = suspendMinorCompaction.get();\n+        if (suspendMajor) {\n+            LOG.info(\"Disk almost full, suspend major compaction to slow down filling disk.\");\n+        }\n+        if (suspendMinor) {\n+            LOG.info(\"Disk full, suspend minor compaction to slow down filling disk.\");\n+        }\n \n-            if (enableMinorCompaction && (!suspendMinor) &&\n-                (force || curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n-                // enter minor compaction\n-                LOG.info(\"Enter minor compaction, suspendMinor {}\", suspendMinor);\n-                doCompactEntryLogs(minorCompactionThreshold);\n-                lastMinorCompactionTime = MathUtils.now();\n-            }\n+        long curTime = MathUtils.now();\n+        if (enableMajorCompaction && (!suspendMajor) &&\n+            (force || curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n+            // enter major compaction\n+            LOG.info(\"Enter major compaction, suspendMajor {}\", suspendMajor);\n+            doCompactEntryLogs(majorCompactionThreshold);\n+            lastMajorCompactionTime = MathUtils.now();\n+            // and also move minor compaction time\n+            lastMinorCompactionTime = lastMajorCompactionTime;\n             forceGarbageCollection.set(false);\n+            return;\n+        }\n+\n+        if (enableMinorCompaction && (!suspendMinor) &&\n+            (force || curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n+            // enter minor compaction\n+            LOG.info(\"Enter minor compaction, suspendMinor {}\", suspendMinor);\n+            doCompactEntryLogs(minorCompactionThreshold);\n+            lastMinorCompactionTime = MathUtils.now();\n         }\n-        LOG.info(\"GarbageCollectorThread exited loop!\");\n+        forceGarbageCollection.set(false);\n     }\n \n     /**\n@@ -468,12 +482,16 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n     public void shutdown() throws InterruptedException {\n         this.running = false;\n         LOG.info(\"Shutting down GarbageCollectorThread\");\n-        if (compacting.compareAndSet(false, true)) {\n-            // if setting compacting flag succeed, means gcThread is not compacting now\n-            // it is safe to interrupt itself now\n-            this.interrupt();\n+\n+        while (!compacting.compareAndSet(false, true)) {\n+            // Wait till the thread stops compacting\n+            Thread.sleep(100);\n+        }\n+        gcExecutor.shutdown();\n+        if (gcExecutor.awaitTermination(60, TimeUnit.SECONDS)) {\n+            LOG.warn(\"GC executor did not shut down in 60 seconds. Killing\");\n+            gcExecutor.shutdownNow();\n         }\n-        this.join();\n     }\n \n     /**"},{"sha":"07d810ee547b93a55c4891925f02ee0e91a997f1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieAccessor.java?ref=825e0e7b4a27730d85afbe823a405ba333de3a65","patch":"@@ -21,6 +21,7 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.IOException;\n+import java.util.concurrent.Future;\n \n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n "},{"sha":"6ae5e609dc119b89b1bd1344ca68a66d071272fc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/825e0e7b4a27730d85afbe823a405ba333de3a65/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=825e0e7b4a27730d85afbe823a405ba333de3a65","patch":"@@ -232,9 +232,9 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n                 dirManager, dirManager, cp, NullStatsLogger.INSTANCE);\n         storage.start();\n         long startTime = MathUtils.now();\n-        Thread.sleep(2000);\n         storage.gcThread.enableForceGC();\n-        Thread.sleep(1000);\n+        storage.gcThread.triggerGC().get(); //major\n+        storage.gcThread.triggerGC().get(); //minor\n         // Minor and Major compaction times should be larger than when we started\n         // this test.\n         assertTrue(\"Minor or major compaction did not trigger even on forcing.\","}]}