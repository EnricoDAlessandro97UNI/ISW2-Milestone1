{"sha":"26b09abb4202362ca37d6944ce75eb2a3309dc3c","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjI2YjA5YWJiNDIwMjM2MmNhMzdkNjk0NGNlNzVlYjJhMzMwOWRjM2M=","commit":{"author":{"name":"Andrey Yegorov","email":"ayegorov@salesforce.com","date":"2017-01-31T01:11:29Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-31T01:11:29Z"},"message":"BOOKKEEPER-968: Entry log flushes at configurable chunks\n\nWith this patch one can configure interval (in bytes) for entry log to flush writes to the disk.\n\nAuthor: Andrey Yegorov <ayegorov@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #77 from dlg99/task/entry-log-flush","tree":{"sha":"a2667d5d24000cfe901f09408cec9261c221e0df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/a2667d5d24000cfe901f09408cec9261c221e0df"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/26b09abb4202362ca37d6944ce75eb2a3309dc3c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/26b09abb4202362ca37d6944ce75eb2a3309dc3c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/26b09abb4202362ca37d6944ce75eb2a3309dc3c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/26b09abb4202362ca37d6944ce75eb2a3309dc3c/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/ba5dadcb3e1fa942f2f1a17178fd368c4bd0f0c4"}],"stats":{"total":58,"additions":58,"deletions":0},"files":[{"sha":"e2a2be6370b14dec53e5a387e550692a9e31cd7b","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=26b09abb4202362ca37d6944ce75eb2a3309dc3c","patch":"@@ -274,6 +274,13 @@ zkTimeout=10000\n # The interval is specified in seconds.\n #auditorPeriodicBookieCheckInterval=86400\n \n+# Entry log flush interval in bytes.\n+# Default is 0. 0 or less disables this feature and effectively flush\n+# happens on log rotation.\n+# Flushing in smaller chunks but more frequently reduces spikes in disk\n+# I/O. Flushing too frequently may also affect performance negatively.\n+#flushEntrylogBytes=0\n+\n # How long to wait, in seconds, before starting auto recovery of a lost bookie\n #lostBookieRecoveryDelay=0\n "},{"sha":"331490377a57895ddb6b30648a53186a8b4a3ea0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java?ref=26b09abb4202362ca37d6944ce75eb2a3309dc3c","patch":"@@ -171,6 +171,10 @@ private static class Header {\n     final static int MIN_SANE_ENTRY_SIZE = 8 + 8;\n     final static long MB = 1024 * 1024;\n \n+    private final long flushIntervalInBytes;\n+    private final boolean doRegularFlushes;\n+    private long bytesWrittenSinceLastFlush = 0;\n+\n     final ServerConfiguration conf;\n     /**\n      * Scan entries in a entry log file.\n@@ -253,6 +257,9 @@ public EntryLogger(ServerConfiguration conf,\n         this.leastUnflushedLogId = logId + 1;\n         this.entryLoggerAllocator = new EntryLoggerAllocator(logId);\n         this.conf = conf;\n+        flushIntervalInBytes = conf.getFlushIntervalInBytes();\n+        doRegularFlushes = flushIntervalInBytes > 0;\n+\n         initialize();\n     }\n \n@@ -737,6 +744,7 @@ void flush() throws IOException {\n     synchronized void flushCurrentLog() throws IOException {\n         if (logChannel != null) {\n             logChannel.flush(true);\n+            bytesWrittenSinceLastFlush = 0;\n             LOG.debug(\"Flush and sync current entry logger {}.\", logChannel.getLogId());\n         }\n     }\n@@ -752,6 +760,9 @@ synchronized long addEntry(long ledger, ByteBuffer entry, boolean rollLog) throw\n         // Create new log if logSizeLimit reached or current disk is full\n         boolean createNewLog = shouldCreateNewEntryLog.get();\n         if (createNewLog || reachEntryLogLimit) {\n+            if (doRegularFlushes) {\n+                flushCurrentLog();\n+            }\n             createNewLog();\n             // Reset the flag\n             if (createNewLog) {\n@@ -766,10 +777,22 @@ synchronized long addEntry(long ledger, ByteBuffer entry, boolean rollLog) throw\n         long pos = logChannel.position();\n         logChannel.write(entry);\n         logChannel.registerWrittenEntry(ledger, entrySize);\n+        \n+        incrementBytesWrittenAndMaybeFlush(4L + entrySize);\n \n         return (logChannel.getLogId() << 32L) | pos;\n     }\n \n+    private void incrementBytesWrittenAndMaybeFlush(long bytesWritten) throws IOException {\n+        if (!doRegularFlushes) {\n+            return;\n+        }\n+        bytesWrittenSinceLastFlush += bytesWritten;\n+        if (bytesWrittenSinceLastFlush > flushIntervalInBytes) {\n+            flushCurrentLog();\n+        }\n+    }\n+\n     static long logIdForOffset(long offset) {\n         return offset >> 32L;\n     }"},{"sha":"8ce690844a42de440736711e7e48f7691151a545","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=26b09abb4202362ca37d6944ce75eb2a3309dc3c","patch":"@@ -56,6 +56,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String GC_OVERREPLICATED_LEDGER_WAIT_TIME = \"gcOverreplicatedLedgerWaitTime\";\n     // Sync Parameters\n     protected final static String FLUSH_INTERVAL = \"flushInterval\";\n+    protected final static String FLUSH_ENTRYLOG_INTERVAL_BYTES = \"flushEntrylogBytes\";\n     // Bookie death watch interval\n     protected final static String DEATH_WATCH_INTERVAL = \"bookieDeathWatchInterval\";\n     // Ledger Cache Parameters\n@@ -265,6 +266,33 @@ public ServerConfiguration setFlushInterval(int flushInterval) {\n         return this;\n     }\n \n+    /**\n+     * Set entry log flush interval in bytes.\n+     * \n+     * Default is 0. 0 or less disables this feature and effectively flush\n+     * happens on log rotation.\n+     *\n+     * Flushing in smaller chunks but more frequently reduces spikes in disk\n+     * I/O. Flushing too frequently may also affect performance negatively.\n+     * \n+     * @return Entry log flush interval in bytes\n+     */\n+    public long getFlushIntervalInBytes() {\n+        return this.getLong(FLUSH_ENTRYLOG_INTERVAL_BYTES, 0);\n+    }\n+\n+    /**\n+     * Set entry log flush interval in bytes\n+     *\n+     * @param flushInterval in bytes\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setFlushIntervalInBytes(long flushInterval) {\n+        this.setProperty(FLUSH_ENTRYLOG_INTERVAL_BYTES, Long.toString(flushInterval));\n+        return this;\n+    }\n+    \n+    \n     /**\n      * Get bookie death watch interval\n      *"}]}