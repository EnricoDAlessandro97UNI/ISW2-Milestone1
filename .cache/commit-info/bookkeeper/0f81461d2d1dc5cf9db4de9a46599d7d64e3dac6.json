{"sha":"0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjBmODE0NjFkMmQxZGM1Y2Y5ZGI0ZGU5YTQ2NTk5ZDdkNjRlM2RhYzY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-15T22:31:56Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-15T22:31:56Z"},"message":"BOOKKEEPER-1048: Use ByteBuf in LedgerStorage interface\n\nTo pass ref-counted buffer from Netty directly to the storage and the Journal, we need to have LedgerStorage to accept ByteBuf instead of ByteBuffer\n\n#### Note\n\nThis commit is on top of BOOKKEEPER-1048 / #138. Once that gets merged, I will rebase. Posting now to get Jenkins run. Please review last commit f53f772f79d0a334edc0f05e66edb7cc645b1ffa in this PR for now.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Jia Zhai <None>, Sijie Guo <None>\n\nCloses #139 from merlimat/bytebuf-in-ledger-storage","tree":{"sha":"6e967d2e03fc7889d32650d7493c74c8dbe4171a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/6e967d2e03fc7889d32650d7493c74c8dbe4171a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d43260e84c6121df72c0ee4c844651bfb726638","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5d43260e84c6121df72c0ee4c844651bfb726638","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5d43260e84c6121df72c0ee4c844651bfb726638"}],"stats":{"total":530,"additions":292,"deletions":238},"files":[{"sha":"090574c320d3eedaa205a34260524fc78088a815","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":34,"deletions":27,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -22,6 +22,8 @@\n package org.apache.bookkeeper.bookie;\n \n import static com.google.common.base.Charsets.UTF_8;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n \n import java.io.File;\n import java.io.FileNotFoundException;\n@@ -49,8 +51,10 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n+\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNS;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -68,13 +72,15 @@\n import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.io.FileUtils;\n+\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n+\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n@@ -484,7 +490,7 @@ public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf\n             Versioned<Cookie> zkCookie = null;\n             try {\n                 zkCookie = Cookie.readFromZooKeeper(zk, conf);\n-                // If allowStorageExpansion option is set, we should \n+                // If allowStorageExpansion option is set, we should\n                 // make sure that the new set of ledger/index dirs\n                 // is a super set of the old; else, we fail the cookie check\n                 masterCookie.verifyIsSuperSet(zkCookie.getValue());\n@@ -773,7 +779,7 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                         LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n \n                         recBuff.rewind();\n-                        handle.addEntry(recBuff);\n+                        handle.addEntry(Unpooled.wrappedBuffer(recBuff));\n                     }\n                 } catch (NoLedgerException nsle) {\n                     LOG.debug(\"Skip replaying entries of ledger {} since it was deleted.\", ledgerId);\n@@ -1346,9 +1352,10 @@ synchronized int shutdown(int exitCode) {\n      *\n      * @throws BookieException if masterKey does not match the master key of the ledger\n      */\n-    private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, final byte[] masterKey)\n+    private LedgerDescriptor getLedgerForEntry(ByteBuf entry, final byte[] masterKey)\n             throws IOException, BookieException {\n-        final long ledgerId = entry.getLong();\n+        final long ledgerId = entry.getLong(entry.readerIndex());\n+\n         LedgerDescriptor l = handles.getHandle(ledgerId, masterKey);\n         if (masterKeyCache.get(ledgerId) == null) {\n             // Force the load into masterKey cache\n@@ -1376,16 +1383,16 @@ private Journal getJournal(long ledgerId) {\n     /**\n      * Add an entry to a ledger as specified by handle.\n      */\n-    private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCallback cb, Object ctx)\n+    private void addEntryInternal(LedgerDescriptor handle, ByteBuf entry, WriteCallback cb, Object ctx)\n             throws IOException, BookieException {\n         long ledgerId = handle.getLedgerId();\n-        entry.rewind();\n         long entryId = handle.addEntry(entry);\n \n-        entry.rewind();\n-        writeBytes.add(entry.remaining());\n+        writeBytes.add(entry.readableBytes());\n \n-        LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n+        }\n         getJournal(ledgerId).logAddEntry(entry, cb, ctx);\n     }\n \n@@ -1395,15 +1402,15 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n      * so that they exist on a quorum of bookies. The corresponding client side call for this\n      * is not exposed to users.\n      */\n-    public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+    public void recoveryAddEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n         long requestNanos = MathUtils.nowInNano();\n         boolean success = false;\n         int entrySize = 0;\n         try {\n             LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n             synchronized (handle) {\n-                entrySize = entry.remaining();\n+                entrySize = entry.readableBytes();\n                 addEntryInternal(handle, entry, cb, ctx);\n             }\n             success = true;\n@@ -1419,15 +1426,16 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n                 recoveryAddEntryStats.registerFailedEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n                 addBytesStats.registerFailedValue(entrySize);\n             }\n+\n+            entry.release();\n         }\n     }\n \n-    public void setExplicitLac(ByteBuffer entry, Object ctx, byte[] masterKey)\n+    public void setExplicitLac(ByteBuf entry, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n         try {\n-            long ledgerId = entry.getLong();\n+            long ledgerId = entry.getLong(entry.readerIndex());\n             LedgerDescriptor handle = handles.getHandle(ledgerId, masterKey);\n-            entry.rewind();\n             synchronized (handle) {\n                 handle.setExplicitLac(entry);\n             }\n@@ -1437,8 +1445,8 @@ public void setExplicitLac(ByteBuffer entry, Object ctx, byte[] masterKey)\n         }\n     }\n \n-    public ByteBuffer getExplicitLac(long ledgerId) throws IOException, Bookie.NoLedgerException {\n-        ByteBuffer lac;\n+    public ByteBuf getExplicitLac(long ledgerId) throws IOException, Bookie.NoLedgerException {\n+        ByteBuf lac;\n         LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n         synchronized (handle) {\n             lac = handle.getExplicitLac();\n@@ -1450,7 +1458,7 @@ public ByteBuffer getExplicitLac(long ledgerId) throws IOException, Bookie.NoLed\n      * Add entry to a ledger.\n      * @throws BookieException.LedgerFencedException if the ledger is fenced\n      */\n-    public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+    public void addEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n         long requestNanos = MathUtils.nowInNano();\n         boolean success = false;\n@@ -1462,7 +1470,7 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n                     throw BookieException\n                             .create(BookieException.Code.LedgerFencedException);\n                 }\n-                entrySize = entry.remaining();\n+                entrySize = entry.readableBytes();\n                 addEntryInternal(handle, entry, cb, ctx);\n             }\n             success = true;\n@@ -1478,6 +1486,8 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n                 addEntryStats.registerFailedEvent(elapsedNanos, TimeUnit.NANOSECONDS);\n                 addBytesStats.registerFailedValue(entrySize);\n             }\n+\n+            entry.release();\n         }\n     }\n \n@@ -1511,17 +1521,16 @@ public Future<Boolean> fenceLedger(long ledgerId, byte[] masterKey) throws IOExc\n         }\n     }\n \n-    public ByteBuffer readEntry(long ledgerId, long entryId)\n+    public ByteBuf readEntry(long ledgerId, long entryId)\n             throws IOException, NoLedgerException {\n         long requestNanos = MathUtils.nowInNano();\n         boolean success = false;\n         int entrySize = 0;\n         try {\n             LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n             LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n-            ByteBuffer entry = handle.readEntry(entryId);\n-            entrySize = entry.remaining();\n-            readBytes.add(entrySize);\n+            ByteBuf entry = handle.readEntry(entryId);\n+            readBytes.add(entry.readableBytes());\n             success = true;\n             return entry;\n         } finally {\n@@ -1667,11 +1676,9 @@ public static void main(String[] args)\n         CounterCallback cb = new CounterCallback();\n         long start = MathUtils.now();\n         for (int i = 0; i < 100000; i++) {\n-            ByteBuffer buff = ByteBuffer.allocate(1024);\n-            buff.putLong(1);\n-            buff.putLong(i);\n-            buff.limit(1024);\n-            buff.position(0);\n+            ByteBuf buff = Unpooled.buffer(1024);\n+            buff.writeLong(1);\n+            buff.writeLong(i);\n             cb.incCount();\n             b.addEntry(buff, cb, null, new byte[0]);\n         }"},{"sha":"42a1f349c90edb8ed5a4236f296a70cf7c38f5c1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryKeyValue.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKeyValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKeyValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryKeyValue.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -19,6 +19,9 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.nio.ByteBuffer;\n \n /**\n@@ -82,8 +85,8 @@ public EntryKeyValue(long ledgerId, long entryId, final byte [] bytes, int offse\n     *\n     * @return the value\n     */\n-    public ByteBuffer getValueAsByteBuffer() {\n-        return ByteBuffer.wrap(getBuffer(), getOffset(), getLength());\n+    public ByteBuf getValueAsByteBuffer() {\n+        return Unpooled.wrappedBuffer(getBuffer(), getOffset(), getLength());\n     }\n \n     /**"},{"sha":"214b2861eef7e736d3896e8cccfcc36cb03aae1c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryMemTable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryMemTable.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -251,7 +251,7 @@ private long flushSnapshot(final SkipListFlusher flusher, Checkpoint checkpoint)\n                         ledger = kv.getLedgerId();\n                         if (ledgerGC != ledger) {\n                             try {\n-                                flusher.process(ledger, kv.getEntryId(), kv.getValueAsByteBuffer());\n+                                flusher.process(ledger, kv.getEntryId(), kv.getValueAsByteBuffer().nioBuffer());\n                             } catch (NoLedgerException exception) {\n                                 ledgerGC = ledger;\n                             }"},{"sha":"90f731a55bc19aaa1df9377f276b007f952ee282","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -36,6 +36,9 @@\n \n import com.google.common.annotations.VisibleForTesting;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n /**\n  * This is the file handle for a ledger's index file that maps entry ids to location.\n  * It is used by LedgerCache.\n@@ -114,31 +117,31 @@ public long getSizeSinceLastwrite() {\n         return sizeSinceLastwrite;\n     }\n \n-    public ByteBuffer getExplicitLac() {\n-        ByteBuffer retLac = null;\n+    public ByteBuf getExplicitLac() {\n+        ByteBuf retLac = null;\n         synchronized(this) {\n             LOG.debug(\"fileInfo:GetLac: {}\", explicitLac);\n             if (explicitLac != null) {\n-                retLac = ByteBuffer.allocate(explicitLac.capacity());\n+                retLac = Unpooled.buffer(explicitLac.capacity());\n                 explicitLac.rewind();//copy from the beginning\n-                retLac.put(explicitLac);\n+                retLac.writeBytes(explicitLac);\n                 explicitLac.rewind();\n-                retLac.flip();\n+                return retLac;\n             }\n         }\n         return retLac;\n     }\n \n-    public void setExplicitLac(ByteBuffer lac) {\n+    public void setExplicitLac(ByteBuf lac) {\n         synchronized(this) {\n             if (explicitLac == null) {\n                 explicitLac = ByteBuffer.allocate(lac.capacity());\n             }\n-            explicitLac.put(lac);\n+            lac.readBytes(explicitLac);\n             explicitLac.rewind();\n-            \n+\n             // skip the ledger id\n-            explicitLac.getLong();            \n+            explicitLac.getLong();\n             long explicitLacValue = explicitLac.getLong();\n             setLastAddConfirmed(explicitLacValue);\n             explicitLac.rewind();"},{"sha":"708bdb3eeee0980ce781a33463ac5ba04f889cbd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -43,6 +43,8 @@\n \n import com.google.common.annotations.VisibleForTesting;\n \n+import io.netty.buffer.ByteBuf;\n+\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LEDGER_CACHE_NUM_EVICTED_LEDGERS;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.NUM_OPEN_LEDGERS;\n \n@@ -389,7 +391,7 @@ boolean isFenced(long ledgerId) throws IOException {\n         }\n     }\n \n-    void setExplicitLac(long ledgerId, ByteBuffer lac) throws IOException {\n+    void setExplicitLac(long ledgerId, ByteBuf lac) throws IOException {\n         FileInfo fi = null;\n         try {\n             fi = getFileInfo(ledgerId, null);\n@@ -402,7 +404,7 @@ void setExplicitLac(long ledgerId, ByteBuffer lac) throws IOException {\n         }\n     }\n \n-    public ByteBuffer getExplicitLac(long ledgerId) {\n+    public ByteBuf getExplicitLac(long ledgerId) {\n         FileInfo fi = null;\n         try {\n             fi = getFileInfo(ledgerId, null);"},{"sha":"61a81c4e2ce1650a2e4d1306b199b606e98532c5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -219,11 +222,13 @@ public boolean isFenced(long ledgerId) throws IOException {\n         return ledgerCache.isFenced(ledgerId);\n     }\n \n-    public void setExplicitlac(long ledgerId, ByteBuffer lac) throws IOException {\n+    @Override\n+    public void setExplicitlac(long ledgerId, ByteBuf lac) throws IOException {\n         ledgerCache.setExplicitLac(ledgerId, lac);\n     }\n \n-    public ByteBuffer getExplicitLac(long ledgerId) {\n+    @Override\n+    public ByteBuf getExplicitLac(long ledgerId) {\n         return ledgerCache.getExplicitLac(ledgerId);\n     }\n \n@@ -246,35 +251,33 @@ public boolean ledgerExists(long ledgerId) throws IOException {\n     public long getLastAddConfirmed(long ledgerId) throws IOException {\n         Long lac = ledgerCache.getLastAddConfirmed(ledgerId);\n         if (lac == null) {\n-            ByteBuffer bb = getEntry(ledgerId, BookieProtocol.LAST_ADD_CONFIRMED);\n+            ByteBuf bb = getEntry(ledgerId, BookieProtocol.LAST_ADD_CONFIRMED);\n             if (null == bb) {\n                 return BookieProtocol.INVALID_ENTRY_ID;\n             } else {\n-                bb.getLong(); // ledger id\n-                bb.getLong(); // entry id\n-                lac = bb.getLong();\n+                bb.readLong(); // ledger id\n+                bb.readLong(); // entry id\n+                lac = bb.readLong();\n                 lac = ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n             }\n         }\n         return lac;\n     }\n \n     @Override\n-    synchronized public long addEntry(ByteBuffer entry) throws IOException {\n-        long ledgerId = entry.getLong();\n-        long entryId = entry.getLong();\n-        long lac = entry.getLong();\n-        entry.rewind();\n+    synchronized public long addEntry(ByteBuf entry) throws IOException {\n+        long ledgerId = entry.getLong(entry.readerIndex() + 0);\n+        long entryId = entry.getLong(entry.readerIndex() + 8);\n+        long lac = entry.getLong(entry.readerIndex() + 16);\n \n-        processEntry(ledgerId, entryId, entry);\n+        processEntry(ledgerId, entryId, entry.nioBuffer());\n \n         ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n-\n         return entryId;\n     }\n \n     @Override\n-    public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+    public ByteBuf getEntry(long ledgerId, long entryId) throws IOException {\n         long offset;\n         /*\n          * If entryId is BookieProtocol.LAST_ADD_CONFIRMED, then return the last written.\n@@ -305,7 +308,7 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n         try {\n             byte[] retBytes = entryLogger.readEntry(ledgerId, entryId, offset);\n             success = true;\n-            return ByteBuffer.wrap(retBytes);\n+            return Unpooled.wrappedBuffer(retBytes);\n         } finally {\n             if (success) {\n                 getEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos), TimeUnit.NANOSECONDS);"},{"sha":"c679ee994a83b34ca6b6d40a489ab121741c3b23","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":22,"deletions":11,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -36,6 +39,7 @@\n import java.util.concurrent.TimeUnit;\n \n import com.google.common.base.Stopwatch;\n+\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -272,14 +276,14 @@ public static interface JournalScanner {\n      * Journal Entry to Record\n      */\n     private class QueueEntry implements Runnable {\n-        ByteBuffer entry;\n+        ByteBuf entry;\n         long ledgerId;\n         long entryId;\n         WriteCallback cb;\n         Object ctx;\n         long enqueueTime;\n \n-        QueueEntry(ByteBuffer entry, long ledgerId, long entryId,\n+        QueueEntry(ByteBuf entry, long ledgerId, long entryId,\n                    WriteCallback cb, Object ctx, long enqueueTime) {\n             this.entry = entry.duplicate();\n             this.cb = cb;\n@@ -750,14 +754,20 @@ public boolean accept(long journalId) {\n         }\n     }\n \n+    public void logAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx) {\n+        logAddEntry(Unpooled.wrappedBuffer(entry), cb, ctx);\n+    }\n+\n     /**\n      * record an add entry operation in journal\n      */\n-    public void logAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx) {\n-        long ledgerId = entry.getLong();\n-        long entryId = entry.getLong();\n-        entry.rewind();\n+    public void logAddEntry(ByteBuf entry, WriteCallback cb, Object ctx) {\n+        long ledgerId = entry.getLong(entry.readerIndex() + 0);\n+        long entryId = entry.getLong(entry.readerIndex() + 8);\n         journalQueueSize.inc();\n+\n+        //Retain entry until it gets written to journal\n+        entry.retain();\n         queue.add(new QueueEntry(entry, ledgerId, entryId, cb, ctx, MathUtils.nowInNano()));\n     }\n \n@@ -927,24 +937,25 @@ public void run() {\n                     continue;\n                 }\n \n-                journalWriteBytes.add(qe.entry.remaining());\n+                journalWriteBytes.add(qe.entry.readableBytes());\n                 journalQueueSize.dec();\n \n-                batchSize += (4 + qe.entry.remaining());\n+                batchSize += (4 + qe.entry.readableBytes());\n \n                 lenBuff.clear();\n-                lenBuff.putInt(qe.entry.remaining());\n+                lenBuff.putInt(qe.entry.readableBytes());\n                 lenBuff.flip();\n \n                 // preAlloc based on size\n-                logFile.preAllocIfNeeded(4 + qe.entry.remaining());\n+                logFile.preAllocIfNeeded(4 + qe.entry.readableBytes());\n \n                 //\n                 // we should be doing the following, but then we run out of\n                 // direct byte buffers\n                 // logFile.write(new ByteBuffer[] { lenBuff, qe.entry });\n                 bc.write(lenBuff);\n-                bc.write(qe.entry);\n+                bc.write(qe.entry.nioBuffer());\n+                qe.entry.release();\n \n                 toFlush.add(qe);\n                 qe = null;"},{"sha":"efb67dc5ccf39b84062b3db06c4037e53fd42335","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCache.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -25,6 +25,8 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n+import io.netty.buffer.ByteBuf;\n+\n /**\n  * This class maps a ledger entry number into a location (entrylogid, offset) in\n  * an entry log file. It does user level caching to more efficiently manage disk\n@@ -51,6 +53,6 @@ interface LedgerCache extends Closeable {\n     void deleteLedger(long ledgerId) throws IOException;\n \n     LedgerCacheBean getJMXBean();\n-    void setExplicitLac(long ledgerId, ByteBuffer lac) throws IOException;\n-    ByteBuffer getExplicitLac(long ledgerId);\n+    void setExplicitLac(long ledgerId, ByteBuf lac) throws IOException;\n+    ByteBuf getExplicitLac(long ledgerId);\n }"},{"sha":"515b64b29628c2b94bcd85f27ce00bfc4b057bb7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -31,6 +31,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.netty.buffer.ByteBuf;\n+\n /**\n  * Implementation of LedgerCache interface.\n  * This class serves two purposes.\n@@ -137,11 +139,11 @@ public boolean isFenced(long ledgerId) throws IOException {\n         return indexPersistenceManager.isFenced(ledgerId);\n     }\n \n-    public void setExplicitLac(long ledgerId, ByteBuffer lac) throws IOException {\n+    public void setExplicitLac(long ledgerId, ByteBuf lac) throws IOException {\n         indexPersistenceManager.setExplicitLac(ledgerId, lac);\n     }\n \n-    public ByteBuffer getExplicitLac(long ledgerId) {\n+    public ByteBuf getExplicitLac(long ledgerId) {\n         return indexPersistenceManager.getExplicitLac(ledgerId);\n     }\n "},{"sha":"9fe1629ded5b07c212a5cdb4611ed76123cbe4f0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptor.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,12 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.Arrays;\n+import io.netty.buffer.ByteBuf;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.io.IOException;\n \n /**\n  * Implements a ledger inside a bookie. In particular, it implements operations\n@@ -57,12 +54,12 @@ static LedgerDescriptor createReadOnly(long ledgerId,\n     abstract boolean setFenced() throws IOException;\n     abstract boolean isFenced() throws IOException;\n \n-    abstract long addEntry(ByteBuffer entry) throws IOException;\n-    abstract ByteBuffer readEntry(long entryId) throws IOException;\n+    abstract long addEntry(ByteBuf entry) throws IOException;\n+    abstract ByteBuf readEntry(long entryId) throws IOException;\n \n     abstract long getLastAddConfirmed() throws IOException;\n \n-    abstract void setExplicitLac(ByteBuffer entry) throws IOException;\n+    abstract void setExplicitLac(ByteBuf entry) throws IOException;\n \n-    abstract  ByteBuffer getExplicitLac();\n+    abstract  ByteBuf getExplicitLac();\n }"},{"sha":"6602392e3ec1c815c8cc62928e4693c168f5c32d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,8 +21,10 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.Arrays;\n \n import org.slf4j.Logger;\n@@ -69,28 +71,27 @@ boolean isFenced() throws IOException {\n     }\n \n     @Override\n-    void setExplicitLac(ByteBuffer lac) throws IOException {\n+    void setExplicitLac(ByteBuf lac) throws IOException {\n         ledgerStorage.setExplicitlac(ledgerId, lac);\n     }\n \n     @Override\n-    ByteBuffer getExplicitLac() {\n+    ByteBuf getExplicitLac() {\n         return ledgerStorage.getExplicitLac(ledgerId);\n     }\n-    @Override\n-    long addEntry(ByteBuffer entry) throws IOException {\n-        long ledgerId = entry.getLong();\n+\n+    long addEntry(ByteBuf entry) throws IOException {\n+        long ledgerId = entry.getLong(entry.readerIndex());\n \n         if (ledgerId != this.ledgerId) {\n             throw new IOException(\"Entry for ledger \" + ledgerId + \" was sent to \" + this.ledgerId);\n         }\n-        entry.rewind();\n \n         return ledgerStorage.addEntry(entry);\n     }\n \n     @Override\n-    ByteBuffer readEntry(long entryId) throws IOException {\n+    ByteBuf readEntry(long entryId) throws IOException {\n         return ledgerStorage.getEntry(ledgerId, entryId);\n     }\n "},{"sha":"40bf988582bd927e5022eaea3f75d2979fad5dff","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorReadOnlyImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorReadOnlyImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorReadOnlyImpl.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,8 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n /**\n  * Implements a ledger inside a bookie. In particular, it implements operations\n  * to write entries to a ledger and read entries from a ledger.\n@@ -39,7 +40,7 @@ boolean setFenced() throws IOException {\n     }\n \n     @Override\n-    long addEntry(ByteBuffer entry) throws IOException {\n+    long addEntry(ByteBuf entry) throws IOException {\n         assert false;\n         throw new IOException(\"Invalid action on read only descriptor\");\n     }"},{"sha":"4587460b57d4c039ca3fc21457271995e7ea631c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,13 +21,13 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.stats.StatsLogger;\n-\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager;\n \n@@ -101,12 +101,12 @@ public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n      * Add an entry to the storage.\n      * @return the entry id of the entry added\n      */\n-    long addEntry(ByteBuffer entry) throws IOException;\n+    long addEntry(ByteBuf entry) throws IOException;\n \n     /**\n      * Read an entry from storage\n      */\n-    ByteBuffer getEntry(long ledgerId, long entryId) throws IOException;\n+    ByteBuf getEntry(long ledgerId, long entryId) throws IOException;\n \n     /**\n      * Get last add confirmed.\n@@ -162,7 +162,7 @@ public static interface LedgerDeletionListener {\n      */\n     BKMBeanInfo getJMXBean();\n \n-    void setExplicitlac(long ledgerId, ByteBuffer lac) throws IOException;\n+    void setExplicitlac(long ledgerId, ByteBuf lac) throws IOException;\n \n-    ByteBuffer getExplicitLac(long ledgerId);\n+    ByteBuf getExplicitLac(long ledgerId);\n }"},{"sha":"105a8b5049791a23c82f456f3680c2c00eee9e42","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,13 +20,16 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n@@ -93,12 +96,12 @@ public boolean ledgerExists(long ledgerId) throws IOException {\n     }\n \n     @Override\n-    public long addEntry(ByteBuffer entry) throws IOException {\n-        long ledgerId = entry.getLong();\n-        long entryId = entry.getLong();\n-        long lac = entry.getLong();\n-        entry.rewind();\n-        memTable.addEntry(ledgerId, entryId, entry, this);\n+    public long addEntry(ByteBuf entry) throws IOException {\n+        long ledgerId = entry.getLong(entry.readerIndex() + 0);\n+        long entryId = entry.getLong(entry.readerIndex() + 8);\n+        long lac = entry.getLong(entry.readerIndex() + 16);\n+\n+        memTable.addEntry(ledgerId, entryId, entry.nioBuffer(), this);\n         ledgerCache.updateLastAddConfirmed(ledgerId, lac);\n         return entryId;\n     }\n@@ -108,7 +111,7 @@ public long addEntry(ByteBuffer entry) throws IOException {\n      * @param ledgerId\n      * @return\n      */\n-    private ByteBuffer getLastEntryId(long ledgerId) throws IOException {\n+    private ByteBuf getLastEntryId(long ledgerId) throws IOException {\n         EntryKeyValue kv = memTable.getLastEntry(ledgerId);\n         if (null != kv) {\n             return kv.getValueAsByteBuffer();\n@@ -118,11 +121,11 @@ private ByteBuffer getLastEntryId(long ledgerId) throws IOException {\n     }\n \n     @Override\n-    public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+    public ByteBuf getEntry(long ledgerId, long entryId) throws IOException {\n         if (entryId == BookieProtocol.LAST_ADD_CONFIRMED) {\n             return getLastEntryId(ledgerId);\n         }\n-        ByteBuffer buffToRet;\n+        ByteBuf buffToRet;\n         try {\n             buffToRet = super.getEntry(ledgerId, entryId);\n         } catch (Bookie.NoEntryException nee) {"},{"sha":"b1f86ae19fcd37d8121d18b6bed896b50d59216d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","status":"modified","additions":16,"deletions":19,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,17 +20,6 @@\n  */\n package org.apache.bookkeeper.proto;\n \n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.ByteBufAllocator;\n-import io.netty.buffer.ByteBufInputStream;\n-import io.netty.buffer.ByteBufOutputStream;\n-import io.netty.buffer.CompositeByteBuf;\n-import io.netty.buffer.Unpooled;\n-import io.netty.channel.ChannelHandlerContext;\n-import io.netty.channel.ChannelHandler.Sharable;\n-import io.netty.handler.codec.MessageToMessageDecoder;\n-import io.netty.handler.codec.MessageToMessageEncoder;\n-\n import java.io.IOException;\n import java.util.List;\n \n@@ -44,6 +33,17 @@\n import com.google.protobuf.InvalidProtocolBufferException;\n import com.google.protobuf.MessageLite;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.MessageToMessageDecoder;\n+import io.netty.handler.codec.MessageToMessageEncoder;\n+\n public class BookieProtoEncoding {\n     private final static Logger LOG = LoggerFactory.getLogger(BookieProtoEncoding.class);\n \n@@ -146,10 +146,8 @@ public Object decode(ByteBuf packet)\n                 packet.readBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n \n                 // Read ledger and entry id without advancing the reader index\n-                packet.markReaderIndex();\n-                ledgerId = packet.readLong();\n-                entryId = packet.readLong();\n-                packet.resetReaderIndex();\n+                ledgerId = packet.getLong(packet.readerIndex());\n+                entryId = packet.getLong(packet.readerIndex() + 8);\n                 return new BookieProtocol.AddRequest(h.getVersion(), ledgerId, entryId, flags, masterKey, packet.retain());\n             case BookieProtocol.READENTRY:\n                 ledgerId = packet.readLong();\n@@ -169,6 +167,7 @@ public Object decode(ByteBuf packet)\n                 builder.mergeFrom(new ByteBufInputStream(packet), extensionRegistry);\n                 return new BookieProtocol.AuthRequest(h.getVersion(), builder.build());\n             }\n+\n             return packet;\n         }\n     }\n@@ -238,8 +237,9 @@ public Object decode(ByteBuf buffer)\n                 entryId = buffer.readLong();\n \n                 if (rc == BookieProtocol.EOK) {\n+                    ByteBuf content = buffer.slice();\n                     return new BookieProtocol.ReadResponse(header.getVersion(), rc,\n-                                                           ledgerId, entryId, buffer.slice());\n+                                                           ledgerId, entryId, content.retain());\n                 } else {\n                     return new BookieProtocol.ReadResponse(header.getVersion(), rc,\n                                                            ledgerId, entryId);\n@@ -327,9 +327,6 @@ public static class RequestEncoder extends MessageToMessageEncoder<Object> {\n \n         @Override\n         protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out) throws Exception {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Encode request {} to channel {}.\", msg, ctx.channel());\n-            }\n             if (msg instanceof BookkeeperProtocol.Request) {\n                 out.add(REQ_V3.encode(msg, ctx.alloc()));\n             } else if (msg instanceof BookieProtocol.Request) {"},{"sha":"f0cfa58dc997aa9569dd11455ecbf7662ffd7223","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtocol.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtocol.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtocol.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -22,8 +22,7 @@\n  */\n \n import io.netty.buffer.ByteBuf;\n-\n-import java.nio.ByteBuffer;\n+import io.netty.buffer.Unpooled;\n \n import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n \n@@ -262,10 +261,6 @@ ByteBuf getData() {\n             return data;\n         }\n \n-        ByteBuffer getDataAsByteBuffer() {\n-            return data.nioBuffer().slice();\n-        }\n-\n         boolean isRecoveryAdd() {\n             return (flags & FLAG_RECOVERY_ADD) == FLAG_RECOVERY_ADD;\n         }\n@@ -351,7 +346,7 @@ static class ReadResponse extends Response {\n \n         ReadResponse(byte protocolVersion, int errorCode, long ledgerId, long entryId) {\n             super(protocolVersion, READENTRY, errorCode, ledgerId, entryId);\n-            this.data = null;\n+            this.data = Unpooled.EMPTY_BUFFER;\n         }\n \n         ReadResponse(byte protocolVersion, int errorCode, long ledgerId, long entryId, ByteBuf data) {"},{"sha":"02fa1c0f92d5ec38ee856ff379febb2b871f427e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -17,10 +17,11 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n+import io.netty.util.ReferenceCountUtil;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n@@ -49,7 +50,7 @@ protected void processPacket() {\n         LOG.debug(\"Received new read request: {}\", request);\n         int errorCode = BookieProtocol.EIO;\n         long startTimeNanos = MathUtils.nowInNano();\n-        ByteBuffer data = null;\n+        ByteBuf data = null;\n         try {\n             Future<Boolean> fenceResult = null;\n             if (read.isFencingRequest()) {\n@@ -63,7 +64,7 @@ protected void processPacket() {\n                 }\n             }\n             data = requestProcessor.bookie.readEntry(request.getLedgerId(), request.getEntryId());\n-            LOG.debug(\"##### Read entry ##### {}\", data.remaining());\n+            LOG.debug(\"##### Read entry ##### {} -- ref-count: {}\", data.readableBytes(), data.refCnt());\n             if (null != fenceResult) {\n                 // TODO:\n                 // currently we don't have readCallback to run in separated read\n@@ -127,6 +128,8 @@ protected void processPacket() {\n                          requestProcessor.readRequestStats);\n \n         } else {\n+            ReferenceCountUtil.release(data);\n+\n             requestProcessor.readEntryStats.registerFailedEvent(MathUtils.elapsedNanos(startTimeNanos),\n                     TimeUnit.NANOSECONDS);\n             sendResponse(errorCode, ResponseBuilder.buildErrorResponse(errorCode, read),"},{"sha":"b04f6b9ed5ed68388e8003b6d440a4c116d18c02","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -17,10 +17,11 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n+import io.netty.util.ReferenceCountUtil;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n@@ -65,7 +66,7 @@ private ReadResponse getReadResponse() {\n \n         LOG.debug(\"Received new read request: {}\", request);\n         StatusCode status;\n-        ByteBuffer entryBody;\n+        ByteBuf entryBody = null;\n         try {\n             Future<Boolean> fenceResult = null;\n             if (readRequest.hasFlag() && readRequest.getFlag().equals(ReadRequest.Flag.FENCE_LEDGER)) {\n@@ -98,7 +99,7 @@ private ReadResponse getReadResponse() {\n                         status = StatusCode.EIO;\n                     } else {\n                         status = StatusCode.EOK;\n-                        readResponse.setBody(ByteString.copyFrom(entryBody));\n+                        readResponse.setBody(ByteString.copyFrom(entryBody.nioBuffer()));\n                     }\n                 } catch (InterruptedException ie) {\n                     LOG.error(\"Interrupting fence read entry (lid: {}, eid: {})\",\n@@ -114,7 +115,7 @@ private ReadResponse getReadResponse() {\n                     status = StatusCode.EIO;\n                 }\n             } else {\n-                readResponse.setBody(ByteString.copyFrom(entryBody));\n+                readResponse.setBody(ByteString.copyFrom(entryBody.nioBuffer()));\n                 status = StatusCode.EOK;\n             }\n         } catch (Bookie.NoLedgerException e) {\n@@ -142,6 +143,8 @@ private ReadResponse getReadResponse() {\n                     TimeUnit.NANOSECONDS);\n         }\n \n+        ReferenceCountUtil.release(entryBody);\n+\n         // Finally set status and return. The body would have been updated if\n         // a read went through.\n         readResponse.setStatus(status);"},{"sha":"e9cc1cb88dd80508d7f98cea846635004d4b2a00","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadLacProcessorV3.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLacProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLacProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLacProcessorV3.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,7 +21,6 @@\n package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.Bookie;\n@@ -36,7 +35,9 @@\n \n import com.google.protobuf.ByteString;\n \n+import io.netty.buffer.ByteBuf;\n import io.netty.channel.Channel;\n+import io.netty.util.ReferenceCountUtil;\n \n class ReadLacProcessorV3 extends PacketProcessorBaseV3 implements Runnable {\n     private final static Logger logger = LoggerFactory.getLogger(ReadLacProcessorV3.class);\n@@ -61,14 +62,14 @@ private ReadLacResponse getReadLacResponse() {\n \n         logger.debug(\"Received ReadLac request: {}\", request);\n         StatusCode status = StatusCode.EOK;\n-        ByteBuffer lastEntry;\n-        ByteBuffer lac;\n+        ByteBuf lastEntry = null;\n+        ByteBuf lac = null;\n         try {\n             lastEntry = requestProcessor.bookie.readEntry(ledgerId, BookieProtocol.LAST_ADD_CONFIRMED);\n             lac = requestProcessor.bookie.getExplicitLac(ledgerId);\n             if (lac != null) {\n-                readLacResponse.setLacBody(ByteString.copyFrom(lac));\n-                readLacResponse.setLastEntryBody(ByteString.copyFrom(lastEntry));\n+                readLacResponse.setLacBody(ByteString.copyFrom(lac.nioBuffer()));\n+                readLacResponse.setLastEntryBody(ByteString.copyFrom(lastEntry.nioBuffer()));\n             } else {\n                 status = StatusCode.ENOENTRY;\n             }\n@@ -78,7 +79,11 @@ private ReadLacResponse getReadLacResponse() {\n         } catch (IOException e) {\n             status = StatusCode.EIO;\n             logger.error(\"IOException while performing readLac from ledger: {}\", ledgerId);\n+        } finally {\n+            ReferenceCountUtil.release(lastEntry);\n+            ReferenceCountUtil.release(lac);\n         }\n+\n         if (status == StatusCode.EOK) {\n             requestProcessor.readLacStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n                     TimeUnit.NANOSECONDS);"},{"sha":"c0be1624714fd7fe20016a63afdfa6a22a86662f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ResponseBuilder.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FResponseBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FResponseBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FResponseBuilder.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,9 +20,7 @@\n  */\n package org.apache.bookkeeper.proto;\n \n-import io.netty.buffer.Unpooled;\n-\n-import java.nio.ByteBuffer;\n+import io.netty.buffer.ByteBuf;\n \n class ResponseBuilder {\n     static BookieProtocol.Response buildErrorResponse(int errorCode, BookieProtocol.Request r) {\n@@ -41,8 +39,8 @@ static BookieProtocol.Response buildAddResponse(BookieProtocol.Request r) {\n                                               r.getEntryId());\n     }\n \n-    static BookieProtocol.Response buildReadResponse(ByteBuffer data, BookieProtocol.Request r) {\n+    static BookieProtocol.Response buildReadResponse(ByteBuf data, BookieProtocol.Request r) {\n         return new BookieProtocol.ReadResponse(r.getProtocolVersion(), BookieProtocol.EOK,\n-                r.getLedgerId(), r.getEntryId(), Unpooled.wrappedBuffer(data));\n+                r.getLedgerId(), r.getEntryId(), data);\n     }\n }"},{"sha":"827aed9865a3425775989510775917f289a95b6d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessor.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessor.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -62,11 +62,9 @@ protected void processPacket() {\n         int rc = BookieProtocol.EOK;\n         try {\n             if (add.isRecoveryAdd()) {\n-                requestProcessor.bookie.recoveryAddEntry(add.getDataAsByteBuffer(),\n-                                                         this, channel, add.getMasterKey());\n+                requestProcessor.bookie.recoveryAddEntry(add.getData(), this, channel, add.getMasterKey());\n             } else {\n-                requestProcessor.bookie.addEntry(add.getDataAsByteBuffer(),\n-                                                 this, channel, add.getMasterKey());\n+                requestProcessor.bookie.addEntry(add.getData(), this, channel, add.getMasterKey());\n             }\n         } catch (IOException e) {\n             LOG.error(\"Error writing \" + add, e);"},{"sha":"b4e89f8c5c6ebe451d31740ca8ec86d09cc35c54","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,10 +20,11 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n import io.netty.channel.Channel;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.BookieException;\n@@ -102,7 +103,7 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n         };\n         StatusCode status = null;\n         byte[] masterKey = addRequest.getMasterKey().toByteArray();\n-        ByteBuffer entryToAdd = addRequest.getBody().asReadOnlyByteBuffer();\n+        ByteBuf entryToAdd = Unpooled.wrappedBuffer(addRequest.getBody().asReadOnlyByteBuffer());\n         try {\n             if (addRequest.hasFlag() && addRequest.getFlag().equals(AddRequest.Flag.RECOVERY_ADD)) {\n                 requestProcessor.bookie.recoveryAddEntry(entryToAdd, wcb, channel, masterKey);"},{"sha":"e8ffb3446717a5188d55f0b5fa9f0195449fc7b1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteLacProcessorV3.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteLacProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteLacProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteLacProcessorV3.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -34,6 +34,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.netty.buffer.Unpooled;\n import io.netty.channel.Channel;\n \n class WriteLacProcessorV3 extends PacketProcessorBaseV3 implements Runnable {\n@@ -69,7 +70,7 @@ private WriteLacResponse getWriteLacResponse() {\n         byte[] masterKey = writeLacRequest.getMasterKey().toByteArray();\n \n         try {\n-            requestProcessor.bookie.setExplicitLac(lacToAdd, channel, masterKey);\n+            requestProcessor.bookie.setExplicitLac(Unpooled.wrappedBuffer(lacToAdd), channel, masterKey);\n             status = StatusCode.EOK;\n         } catch (IOException e) {\n             logger.error(\"Error saving lac for ledger:{}\","},{"sha":"711d38b3040e7671237a780b5a7d14c3eb7ee05e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieJournalTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -47,6 +47,7 @@\n import org.slf4j.LoggerFactory;\n import org.junit.Test;\n import org.junit.After;\n+\n import static org.junit.Assert.*;\n \n public class BookieJournalTest {\n@@ -620,15 +621,15 @@ public void testTruncatedInEntryJournal() throws Exception {\n         b.readEntry(1, 99);\n \n         // still able to read last entry, but it's junk\n-        ByteBuffer buf = b.readEntry(1, 100);\n-        assertEquals(\"Ledger Id is wrong\", buf.getLong(), 1);\n-        assertEquals(\"Entry Id is wrong\", buf.getLong(), 100);\n-        assertEquals(\"Last confirmed is wrong\", buf.getLong(), 99);\n-        assertEquals(\"Length is wrong\", buf.getLong(), 100*1024);\n-        buf.getLong(); // skip checksum\n+        ByteBuf buf = b.readEntry(1, 100);\n+        assertEquals(\"Ledger Id is wrong\", buf.readLong(), 1);\n+        assertEquals(\"Entry Id is wrong\", buf.readLong(), 100);\n+        assertEquals(\"Last confirmed is wrong\", buf.readLong(), 99);\n+        assertEquals(\"Length is wrong\", buf.readLong(), 100*1024);\n+        buf.readLong(); // skip checksum\n         boolean allX = true;\n         for (int i = 0; i < 1024; i++) {\n-            byte x = buf.get();\n+            byte x = buf.readByte();\n             allX = allX && x == (byte)'X';\n         }\n         assertFalse(\"Some of buffer should have been zeroed\", allX);"},{"sha":"067b4111ed141ea1a1a05362ee06168a86ae7430","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,9 +20,11 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.File;\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -51,6 +53,7 @@\n import org.apache.bookkeeper.util.TestUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.zookeeper.AsyncCallback;\n+\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n@@ -571,14 +574,13 @@ public void checkpointComplete(Checkpoint checkpoint,\n         storage.gcThread.doCompactEntryLogs(threshold);\n     }\n \n-    private ByteBuffer genEntry(long ledger, long entry, int size) {\n-        ByteBuffer bb = ByteBuffer.wrap(new byte[size]);\n-        bb.putLong(ledger);\n-        bb.putLong(entry);\n-        while (bb.hasRemaining()) {\n-            bb.put((byte)0xFF);\n+    private ByteBuf genEntry(long ledger, long entry, int size) {\n+        ByteBuf bb = Unpooled.buffer(size);\n+        bb.writeLong(ledger);\n+        bb.writeLong(entry);\n+        while (bb.isWritable()) {\n+            bb.writeByte((byte)0xFF);\n         }\n-        bb.flip();\n         return bb;\n     }\n "},{"sha":"7eac1a2a7d631728e3f4968bb2752370dd262c80","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,9 +20,12 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.IOException;\n import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n@@ -72,9 +75,9 @@ public void testCorruptEntryLog() throws Exception {\n         Bookie bookie = new Bookie(conf);\n         // create some entries\n         EntryLogger logger = ((InterleavedLedgerStorage)bookie.ledgerStorage).entryLogger;\n-        logger.addEntry(1, generateEntry(1, 1));\n-        logger.addEntry(3, generateEntry(3, 1));\n-        logger.addEntry(2, generateEntry(2, 1));\n+        logger.addEntry(1, generateEntry(1, 1).nioBuffer());\n+        logger.addEntry(3, generateEntry(3, 1).nioBuffer());\n+        logger.addEntry(2, generateEntry(2, 1).nioBuffer());\n         logger.flush();\n         // now lets truncate the file to corrupt the last entry, which simulates a partial write\n         File f = new File(curDir, \"0.log\");\n@@ -91,13 +94,12 @@ public void testCorruptEntryLog() throws Exception {\n         assertNotNull(meta.getLedgersMap().get(3L));\n     }\n \n-    private ByteBuffer generateEntry(long ledger, long entry) {\n+    private ByteBuf generateEntry(long ledger, long entry) {\n         byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n-        ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);\n-        bb.putLong(ledger);\n-        bb.putLong(entry);\n-        bb.put(data);\n-        bb.flip();\n+        ByteBuf bb = Unpooled.buffer(8 + 8 + data.length);\n+        bb.writeLong(ledger);\n+        bb.writeLong(entry);\n+        bb.writeBytes(data);\n         return bb;\n     }\n \n@@ -120,7 +122,7 @@ public void testMissingLogId() throws Exception {\n             EntryLogger logger = new EntryLogger(conf,\n                     bookie.getLedgerDirsManager());\n             for (int j=0; j<numEntries; j++) {\n-                positions[i][j] = logger.addEntry(i, generateEntry(i, j));\n+                positions[i][j] = logger.addEntry(i, generateEntry(i, j).nioBuffer());\n             }\n             logger.flush();\n         }\n@@ -135,7 +137,7 @@ public void testMissingLogId() throws Exception {\n             EntryLogger logger = new EntryLogger(conf,\n                     bookie.getLedgerDirsManager());\n             for (int j=0; j<numEntries; j++) {\n-                positions[i][j] = logger.addEntry(i, generateEntry(i, j));\n+                positions[i][j] = logger.addEntry(i, generateEntry(i, j).nioBuffer());\n             }\n             logger.flush();\n         }\n@@ -231,10 +233,10 @@ public void testRecoverFromLedgersMap() throws Exception {\n \n         // create some entries\n         EntryLogger logger = ((InterleavedLedgerStorage)bookie.ledgerStorage).entryLogger;\n-        logger.addEntry(1, generateEntry(1, 1));\n-        logger.addEntry(3, generateEntry(3, 1));\n-        logger.addEntry(2, generateEntry(2, 1));\n-        logger.addEntry(1, generateEntry(1, 2));\n+        logger.addEntry(1, generateEntry(1, 1).nioBuffer());\n+        logger.addEntry(3, generateEntry(3, 1).nioBuffer());\n+        logger.addEntry(2, generateEntry(2, 1).nioBuffer());\n+        logger.addEntry(1, generateEntry(1, 2).nioBuffer());\n         logger.rollLog();\n         logger.flushRotatedLogs();\n \n@@ -265,10 +267,10 @@ public void testRecoverFromLedgersMapOnV0EntryLog() throws Exception {\n \n         // create some entries\n         EntryLogger logger = ((InterleavedLedgerStorage) bookie.ledgerStorage).entryLogger;\n-        logger.addEntry(1, generateEntry(1, 1));\n-        logger.addEntry(3, generateEntry(3, 1));\n-        logger.addEntry(2, generateEntry(2, 1));\n-        logger.addEntry(1, generateEntry(1, 2));\n+        logger.addEntry(1, generateEntry(1, 1).nioBuffer());\n+        logger.addEntry(3, generateEntry(3, 1).nioBuffer());\n+        logger.addEntry(2, generateEntry(2, 1).nioBuffer());\n+        logger.addEntry(1, generateEntry(1, 2).nioBuffer());\n         logger.rollLog();\n \n         // Rewrite the entry log header to be on V0 format"},{"sha":"41ab89caa62c577f1b79ae37b2fb4cb96fbcd116","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -330,7 +333,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n         Bookie b = new Bookie(conf);\n         b.start();\n         for (int i = 1; i <= numLedgers; i++) {\n-            ByteBuffer packet = generateEntry(i, 1);\n+            ByteBuf packet = generateEntry(i, 1);\n             b.addEntry(packet, new Bookie.NopWriteCallback(), null, \"passwd\".getBytes());\n         }\n \n@@ -511,7 +514,7 @@ public void testEntryMemTableFlushFailure() throws Exception {\n         // this bookie.addEntry call is required. FileInfo for Ledger 1 would be created with this call.\n         // without the fileinfo, 'flushTestSortedLedgerStorage.addEntry' calls will fail because of BOOKKEEPER-965 change.\n         bookie.addEntry(generateEntry(1, 1), new Bookie.NopWriteCallback(), null, \"passwd\".getBytes());\n-        \n+\n         flushTestSortedLedgerStorage.addEntry(generateEntry(1, 2));\n         assertFalse(\"Bookie is expected to be in ReadWrite mode\", bookie.isReadOnly());\n         assertTrue(\"EntryMemTable SnapShot is expected to be empty\", memTable.snapshot.isEmpty());\n@@ -535,14 +538,13 @@ public void testEntryMemTableFlushFailure() throws Exception {\n         assertTrue(\"EntryMemTable SnapShot is expected to be empty, because of successful flush\",\n                 memTable.snapshot.isEmpty());\n     }\n-    \n-    private ByteBuffer generateEntry(long ledger, long entry) {\n+\n+    private ByteBuf generateEntry(long ledger, long entry) {\n         byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n-        ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);\n-        bb.putLong(ledger);\n-        bb.putLong(entry);\n-        bb.put(data);\n-        bb.flip();\n+        ByteBuf bb = Unpooled.buffer(8 + 8 + data.length);\n+        bb.writeLong(ledger);\n+        bb.writeLong(entry);\n+        bb.writeBytes(data);\n         return bb;\n     }\n }"},{"sha":"9352db3a68ada8b997b4a7312d1383151be67f59","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -20,10 +20,10 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.File;\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n-\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Callable;\n@@ -35,17 +35,14 @@\n \n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n-\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n-\n+import org.apache.bookkeeper.meta.LedgerManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import org.junit.Test;\n import org.junit.Before;\n import org.junit.After;\n@@ -314,12 +311,12 @@ public byte[] readMasterKey(long ledgerId)\n         }\n \n         @Override\n-        public long addEntry(ByteBuffer entry) throws IOException {\n+        public long addEntry(ByteBuf entry) throws IOException {\n             return 1L;\n         }\n \n         @Override\n-        public ByteBuffer getEntry(long ledgerId, long entryId)\n+        public ByteBuf getEntry(long ledgerId, long entryId)\n                 throws IOException {\n             return null;\n         }\n@@ -334,11 +331,11 @@ public void flush() throws IOException {\n         }\n \n         @Override\n-        public void setExplicitlac(long ledgerId, ByteBuffer lac) {\n+        public void setExplicitlac(long ledgerId, ByteBuf lac) {\n         }\n \n         @Override\n-        public ByteBuffer getExplicitLac(long ledgerId) {\n+        public ByteBuf getExplicitLac(long ledgerId) {\n             return null;\n         }\n "},{"sha":"41a8ecd68c218f8f33753bc316a2855538d4ef8a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperCloseTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -39,6 +39,9 @@\n \n import com.google.common.util.concurrent.SettableFuture;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Enumeration;\n@@ -72,7 +75,7 @@ private void restartBookieSlow() throws Exception{\n \n         Bookie delayBookie = new Bookie(conf) {\n                 @Override\n-                public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb,\n+                public void recoveryAddEntry(ByteBuf entry, WriteCallback cb,\n                                              Object ctx, byte[] masterKey)\n                         throws IOException, BookieException {\n                     try {\n@@ -86,7 +89,7 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb,\n                 }\n \n                 @Override\n-                public void addEntry(ByteBuffer entry, WriteCallback cb,\n+                public void addEntry(ByteBuf entry, WriteCallback cb,\n                                      Object ctx, byte[] masterKey)\n                         throws IOException, BookieException {\n                     try {\n@@ -100,7 +103,7 @@ public void addEntry(ByteBuffer entry, WriteCallback cb,\n                 }\n \n                 @Override\n-                public ByteBuffer readEntry(long ledgerId, long entryId)\n+                public ByteBuf readEntry(long ledgerId, long entryId)\n                         throws IOException, NoLedgerException {\n                     try {\n                         Thread.sleep(5000);"},{"sha":"0c470a20636cad15e53fb37316ad034a350b0a71","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCloseTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -17,6 +17,8 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n@@ -194,7 +196,7 @@ private void startUnauthorizedBookie(ServerConfiguration conf, final CountDownLa\n             throws Exception {\n         Bookie sBookie = new Bookie(conf) {\n             @Override\n-            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void addEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 try {\n                     latch.await();\n@@ -204,7 +206,7 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n             }\n \n             @Override\n-            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void recoveryAddEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 throw new IOException(\"Dead bookie for recovery adds.\");\n             }\n@@ -218,7 +220,7 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n     private void startDeadBookie(ServerConfiguration conf, final CountDownLatch latch) throws Exception {\n         Bookie dBookie = new Bookie(conf) {\n             @Override\n-            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void addEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 try {\n                     latch.await();"},{"sha":"5f7c56f2f40ccb1a30c969d357d03539a2bbbd17","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,6 +21,8 @@\n  *\n  */\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.concurrent.CountDownLatch;\n@@ -186,7 +188,7 @@ private void ledgerRecoveryWithSlowBookie(int ensembleSize, int writeQuorumSize,\n \n         Bookie fakeBookie = new Bookie(conf) {\n             @Override\n-            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void addEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 // drop request to simulate a slow and failed bookie\n             }\n@@ -245,7 +247,7 @@ public void testLedgerRecoveryWithRollingRestart() throws Exception {\n         ServerConfiguration conf = newServerConfiguration();\n         Bookie deadBookie1 = new Bookie(conf) {\n             @Override\n-            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void recoveryAddEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 // drop request to simulate a slow and failed bookie\n                 throw new IOException(\"Couldn't write for some reason\");\n@@ -326,7 +328,7 @@ public void testBookieFailureDuringRecovery() throws Exception {\n         ServerConfiguration conf = newServerConfiguration();\n         Bookie deadBookie1 = new Bookie(conf) {\n             @Override\n-            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void recoveryAddEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 // drop request to simulate a slow and failed bookie\n                 throw new IOException(\"Couldn't write for some reason\");\n@@ -410,7 +412,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n     private void startDeadBookie(ServerConfiguration conf) throws Exception {\n         Bookie rBookie = new Bookie(conf) {\n             @Override\n-            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+            public void recoveryAddEntry(ByteBuf entry, WriteCallback cb, Object ctx, byte[] masterKey)\n                     throws IOException, BookieException {\n                 // drop request to simulate a dead bookie\n                 throw new IOException(\"Couldn't write entries for some reason\");"},{"sha":"0db938b404773617d4e9ee7f1bcb8257128f79df","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,14 +21,16 @@\n \n package org.apache.bookkeeper.meta;\n \n+\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -336,11 +338,11 @@ public long getLastAddConfirmed(long ledgerId) throws IOException {\n         }\n \n         @Override\n-        public void setExplicitlac(long ledgerId, ByteBuffer lac) throws IOException {\n+        public void setExplicitlac(long ledgerId, ByteBuf lac) throws IOException {\n         }\n \n         @Override\n-        public ByteBuffer getExplicitLac(long ledgerId) {\n+        public ByteBuf getExplicitLac(long ledgerId) {\n             return null;\n         }\n \n@@ -369,12 +371,12 @@ public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n         }\n \n         @Override\n-        public long addEntry(ByteBuffer entry) throws IOException {\n+        public long addEntry(ByteBuf entry) throws IOException {\n             return 0;\n         }\n \n         @Override\n-        public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+        public ByteBuf getEntry(long ledgerId, long entryId) throws IOException {\n             return null;\n         }\n "},{"sha":"ac9fe59f1d0a93f04f2cd41efc54f03470c1c31b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -22,7 +22,6 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Map;\n@@ -35,7 +34,6 @@\n import org.apache.bookkeeper.bookie.EntryLocation;\n import org.apache.bookkeeper.bookie.EntryLogger;\n import org.apache.bookkeeper.bookie.LedgerDirsManager;\n-import org.apache.bookkeeper.bookie.LedgerStorage.LedgerDeletionListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.stats.StatsLogger;\n@@ -49,6 +47,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.netty.buffer.ByteBuf;\n+\n /**\n  * Test case to run over serveral ledger managers\n  */\n@@ -153,12 +153,12 @@ public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n         }\n \n         @Override\n-        public long addEntry(ByteBuffer entry) throws IOException {\n+        public long addEntry(ByteBuf entry) throws IOException {\n             return 0;\n         }\n \n         @Override\n-        public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+        public ByteBuf getEntry(long ledgerId, long entryId) throws IOException {\n             return null;\n         }\n \n@@ -213,13 +213,13 @@ public void flushEntriesLocationsIndex() throws IOException {\n         }\n \n         @Override\n-        public void setExplicitlac(long ledgerId, ByteBuffer lac) throws IOException {\n+        public void setExplicitlac(long ledgerId, ByteBuf lac) throws IOException {\n             // TODO Auto-generated method stub\n \n         }\n \n         @Override\n-        public ByteBuffer getExplicitLac(long ledgerId) {\n+        public ByteBuf getExplicitLac(long ledgerId) {\n             // TODO Auto-generated method stub\n             return null;\n         }"},{"sha":"e2a4f327b3f135a0a4a2e20d8176e4d04eabf802","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FTestPerChannelBookieClient.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -235,7 +235,7 @@ public void testRequestCompletesAfterDisconnectRace() throws Exception {\n \n         Bookie delayBookie = new Bookie(conf) {\n             @Override\n-            public ByteBuffer readEntry(long ledgerId, long entryId)\n+            public ByteBuf readEntry(long ledgerId, long entryId)\n                     throws IOException, NoLedgerException {\n                 try {\n                     Thread.sleep(3000);"},{"sha":"159b8595d020f72ce3c4493a98b956a2f4fe89cd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -40,6 +40,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.netty.buffer.ByteBuf;\n+\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.FilenameFilter;\n@@ -251,7 +253,7 @@ public void addComplete(int rc2, LedgerHandle lh, long entryId, Object ctx) {\n \n         Bookie deadBookie = new Bookie(conf) {\n             @Override\n-            public ByteBuffer readEntry(long ledgerId, long entryId)\n+            public ByteBuf readEntry(long ledgerId, long entryId)\n                     throws IOException, NoLedgerException {\n                 // we want to disable during checking\n                 numReads.incrementAndGet();"},{"sha":"7a65388610913bf051314b6ad5c3a21e321f377e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConcurrentLedgerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FConcurrentLedgerTest.java?ref=0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.test;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -148,12 +151,12 @@ private long doReads(int ledgers, int size, int totalwrites)\n         long start = System.currentTimeMillis();\n         for(int i = 1; i <= totalwrites/ledgers; i++) {\n             for(int j = 1; j <= ledgers; j++) {\n-                ByteBuffer entry = bookie.readEntry(j, i);\n+                ByteBuf entry = bookie.readEntry(j, i);\n                 // skip the ledger id and the entry id\n-                entry.getLong();\n-                entry.getLong();\n-                assertEquals(j + \"@\" + i, j+2, entry.getLong());\n-                assertEquals(j + \"@\" + i, i+3, entry.getLong());\n+                entry.readLong();\n+                entry.readLong();\n+                assertEquals(j + \"@\" + i, j+2, entry.readLong());\n+                assertEquals(j + \"@\" + i, i+3, entry.readLong());\n             }\n         }\n         long finish = System.currentTimeMillis();\n@@ -184,7 +187,7 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n                 bytes.position(0);\n                 bytes.limit(bytes.capacity());\n                 throttle.acquire();\n-                bookie.addEntry(bytes, cb, counter, zeros);\n+                bookie.addEntry(Unpooled.wrappedBuffer(bytes), cb, counter, zeros);\n             }\n         }\n         long finish = System.currentTimeMillis();"}]}