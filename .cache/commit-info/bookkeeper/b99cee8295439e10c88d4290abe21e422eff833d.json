{"sha":"b99cee8295439e10c88d4290abe21e422eff833d","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmI5OWNlZTgyOTU0MzllMTBjODhkNDI5MGFiZTIxZTQyMmVmZjgzM2Q=","commit":{"author":{"name":"Yiming Zang","email":"yzang@twitter.com","date":"2016-08-16T19:02:06Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-08-16T19:02:06Z"},"message":"DL-21: Fix DL flaky test cases\n\nDL-21: Fixed a few DL flaky test cases.\n\nAuthor: Yiming Zang <yzang@twitter.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #5 from yzang/yzang/fix_flaky_test","tree":{"sha":"27ae6e65ffae9f6fc068ebcb2214054eb59ffb92","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/27ae6e65ffae9f6fc068ebcb2214054eb59ffb92"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/b99cee8295439e10c88d4290abe21e422eff833d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b99cee8295439e10c88d4290abe21e422eff833d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b99cee8295439e10c88d4290abe21e422eff833d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b99cee8295439e10c88d4290abe21e422eff833d/comments","author":null,"committer":null,"parents":[{"sha":"bf0f60c84034c7d3a1b4f51ef686db5de2bf9f2c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bf0f60c84034c7d3a1b4f51ef686db5de2bf9f2c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/bf0f60c84034c7d3a1b4f51ef686db5de2bf9f2c"}],"stats":{"total":77,"additions":65,"deletions":12},"files":[{"sha":"9c193813c3d49e74cafb0609c3f5cfa0546c0b25","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogManager.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b99cee8295439e10c88d4290abe21e422eff833d/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b99cee8295439e10c88d4290abe21e422eff833d/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogManager.java?ref=b99cee8295439e10c88d4290abe21e422eff833d","patch":"@@ -969,6 +969,7 @@ public Future<AsyncLogReader> openAsyncLogReader(DLSN fromDLSN) {\n                 false,\n                 dynConf.getDeserializeRecordSetOnReads(),\n                 statsLogger);\n+        pendingReaders.add(reader);\n         return Future.value(reader);\n     }\n \n@@ -1095,6 +1096,7 @@ LogReader getInputStreamInternal(DLSN fromDLSN, Optional<Long> fromTxnId)\n                 true,\n                 dynConf.getDeserializeRecordSetOnReads(),\n                 statsLogger);\n+        pendingReaders.add(asyncReader);\n         return new BKSyncLogReaderDLSN(conf, asyncReader, scheduler, fromTxnId);\n     }\n "},{"sha":"06cf07926d59738c569182c47981681992b4924a","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderWriter.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java?ref=b99cee8295439e10c88d4290abe21e422eff833d","patch":"@@ -885,8 +885,11 @@ public void testSimpleAsyncReadWriteStartEmptyFactory() throws Exception {\n         }\n     }\n \n+    /**\n+     * Flaky test fixed: readers need to be added to the pendingReaders\n+     * @throws Exception\n+     */\n     @Test(timeout = 300000)\n-    @DistributedLogAnnotations.FlakyTest\n     public void testSimpleAsyncReadWriteSimulateErrors() throws Exception {\n         String name = runtime.getMethodName();\n         DistributedLogConfiguration confLocal = new DistributedLogConfiguration();"},{"sha":"58863c487ecb4ee1a5cfc6ff453f86e2c4fdf2b1","filename":"src/test/java/com/twitter/distributedlog/TestNonBlockingReads.java","status":"modified","additions":28,"deletions":10,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java?ref=b99cee8295439e10c88d4290abe21e422eff833d","patch":"@@ -17,6 +17,7 @@\n  */\n package com.twitter.distributedlog;\n \n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.ScheduledThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n \n@@ -33,13 +34,12 @@\n public class TestNonBlockingReads extends TestDistributedLogBase {\n     static final Logger LOG = LoggerFactory.getLogger(TestNonBlockingReads.class);\n \n-    // TODO: investigate why long poll read makes test flaky\n     static {\n         conf.setOutputBufferSize(0);\n         conf.setImmediateFlushEnabled(true);\n     }\n \n-    @Test(timeout = 60000)\n+    @Test(timeout = 100000)\n     public void testNonBlockingRead() throws Exception {\n         String name = \"distrlog-non-blocking-reader\";\n         final DistributedLogConfiguration confLocal = new DistributedLogConfiguration();\n@@ -49,9 +49,10 @@ public void testNonBlockingRead() throws Exception {\n         confLocal.setReaderIdleWarnThresholdMillis(100);\n         final DistributedLogManager dlm = createNewDLM(confLocal, name);\n         ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);\n+        ScheduledFuture writerClosedFuture = null;\n         try {\n             final Thread currentThread = Thread.currentThread();\n-            executor.schedule(\n+            writerClosedFuture = executor.schedule(\n                     new Runnable() {\n                         @Override\n                         public void run() {\n@@ -67,12 +68,16 @@ public void run() {\n             readNonBlocking(dlm, false);\n             assertFalse(currentThread.isInterrupted());\n         } finally {\n+            if (writerClosedFuture != null){\n+                // ensure writer.closeAndComplete is done before we close dlm\n+                writerClosedFuture.get();\n+            }\n             executor.shutdown();\n             dlm.close();\n         }\n     }\n \n-    @Test(timeout = 60000)\n+    @Test(timeout = 100000)\n     public void testNonBlockingReadRecovery() throws Exception {\n         String name = \"distrlog-non-blocking-reader-recovery\";\n         final DistributedLogConfiguration confLocal = new DistributedLogConfiguration();\n@@ -81,9 +86,10 @@ public void testNonBlockingReadRecovery() throws Exception {\n         confLocal.setReadAheadMaxRecords(10);\n         final DistributedLogManager dlm = createNewDLM(confLocal, name);\n         ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);\n+        ScheduledFuture writerClosedFuture = null;\n         try {\n             final Thread currentThread = Thread.currentThread();\n-            executor.schedule(\n+            writerClosedFuture = executor.schedule(\n                     new Runnable() {\n                         @Override\n                         public void run() {\n@@ -100,12 +106,16 @@ public void run() {\n             readNonBlocking(dlm, false);\n             assertFalse(currentThread.isInterrupted());\n         } finally {\n+            if (writerClosedFuture != null){\n+                // ensure writer.closeAndComplete is done before we close dlm\n+                writerClosedFuture.get();\n+            }\n             executor.shutdown();\n             dlm.close();\n         }\n     }\n \n-    @Test(timeout = 60000)\n+    @Test(timeout = 100000)\n     public void testNonBlockingReadIdleError() throws Exception {\n         String name = \"distrlog-non-blocking-reader-error\";\n         final DistributedLogConfiguration confLocal = new DistributedLogConfiguration();\n@@ -116,10 +126,10 @@ public void testNonBlockingReadIdleError() throws Exception {\n         confLocal.setReaderIdleErrorThresholdMillis(100);\n         final DistributedLogManager dlm = createNewDLM(confLocal, name);\n         ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);\n-\n+        ScheduledFuture writerClosedFuture = null;\n         try {\n             final Thread currentThread = Thread.currentThread();\n-            executor.schedule(\n+            writerClosedFuture = executor.schedule(\n                     new Runnable() {\n                         @Override\n                         public void run() {\n@@ -141,6 +151,10 @@ public void run() {\n             assertTrue(exceptionEncountered);\n             assertFalse(currentThread.isInterrupted());\n         } finally {\n+            if (writerClosedFuture != null){\n+                // ensure writer.closeAndComplete is done before we close dlm\n+                writerClosedFuture.get();\n+            }\n             executor.shutdown();\n             dlm.close();\n         }\n@@ -157,10 +171,10 @@ public void testNonBlockingReadAheadStall() throws Exception {\n         confLocal.setReaderIdleErrorThresholdMillis(30000);\n         final DistributedLogManager dlm = createNewDLM(confLocal, name);\n         ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);\n-\n+        ScheduledFuture writerClosedFuture = null;\n         try {\n             final Thread currentThread = Thread.currentThread();\n-            executor.schedule(\n+            writerClosedFuture = executor.schedule(\n                     new Runnable() {\n                         @Override\n                         public void run() {\n@@ -183,6 +197,10 @@ public void run() {\n             assertFalse(exceptionEncountered);\n             assertFalse(currentThread.isInterrupted());\n         } finally {\n+            if (writerClosedFuture != null){\n+                // ensure writer.closeAndComplete is done before we close dlm\n+                writerClosedFuture.get();\n+            }\n             executor.shutdown();\n             dlm.close();\n         }"},{"sha":"24733a45700b4a9d3957e8995121f601d3f5ced7","filename":"src/test/java/com/twitter/distributedlog/config/TestConfigurationSubscription.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fconfig%2FTestConfigurationSubscription.java?ref=b99cee8295439e10c88d4290abe21e422eff833d","patch":"@@ -42,6 +42,17 @@\n public class TestConfigurationSubscription {\n     static final Logger LOG = LoggerFactory.getLogger(TestConfigurationSubscription.class);\n \n+    /**\n+     * Give FileChangedReloadingStrategy some time to start reloading\n+     * Make sure now!=lastChecked\n+     * {@link org.apache.commons.configuration.reloading.FileChangedReloadingStrategy#reloadingRequired()}\n+     */\n+    private void ensureConfigReloaded() throws InterruptedException {\n+        // sleep 1 ms so that System.currentTimeMillis() !=\n+        // lastChecked (the time we construct FileChangedReloadingStrategy\n+        Thread.sleep(1);\n+    }\n+\n     @Test(timeout = 60000)\n     public void testReloadConfiguration() throws Exception {\n         PropertiesWriter writer = new PropertiesWriter();\n@@ -63,7 +74,8 @@ public void onReload(ConcurrentBaseConfiguration conf) {\n         // add\n         writer.setProperty(\"prop1\", \"1\");\n         writer.save();\n-\n+        // ensure the file change reloading event can be triggered\n+        ensureConfigReloaded();\n         // reload the config\n         confSub.reload();\n         assertNotNull(confHolder.get());\n@@ -85,6 +97,8 @@ public void testAddReloadBasicsConfig() throws Exception {\n         // add\n         writer.setProperty(\"prop1\", \"1\");\n         writer.save();\n+        // ensure the file change reloading event can be triggered\n+        ensureConfigReloaded();\n         mockScheduler.tick(100, TimeUnit.MILLISECONDS);\n         assertEquals(\"1\", conf.getProperty(\"prop1\"));\n "},{"sha":"46c1880308e49a3efee6db501ecceff566ddaef5","filename":"src/test/java/com/twitter/distributedlog/feature/TestDynamicConfigurationFeatureProvider.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffeature%2FTestDynamicConfigurationFeatureProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b99cee8295439e10c88d4290abe21e422eff833d/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffeature%2FTestDynamicConfigurationFeatureProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ffeature%2FTestDynamicConfigurationFeatureProvider.java?ref=b99cee8295439e10c88d4290abe21e422eff833d","patch":"@@ -30,6 +30,19 @@\n  */\n public class TestDynamicConfigurationFeatureProvider {\n \n+    /**\n+     * Make sure config is reloaded\n+     *\n+     * Give FileChangedReloadingStrategy some time to allow reloading\n+     * Make sure now!=lastChecked\n+     * {@link org.apache.commons.configuration.reloading.FileChangedReloadingStrategy#reloadingRequired()}\n+     */\n+    private void ensureConfigReloaded() throws InterruptedException {\n+        // sleep 1 ms so that System.currentTimeMillis() !=\n+        // lastChecked (the time we construct FileChangedReloadingStrategy\n+        Thread.sleep(1);\n+    }\n+\n     @Test(timeout = 60000)\n     public void testLoadFeaturesFromBase() throws Exception {\n         PropertiesWriter writer = new PropertiesWriter();\n@@ -43,6 +56,7 @@ public void testLoadFeaturesFromBase() throws Exception {\n         DynamicConfigurationFeatureProvider provider =\n                 new DynamicConfigurationFeatureProvider(\"\", conf, NullStatsLogger.INSTANCE);\n         provider.start();\n+        ensureConfigReloaded();\n \n         Feature feature1 = provider.getFeature(\"feature_1\");\n         assertTrue(feature1.isAvailable());\n@@ -79,6 +93,7 @@ public void testLoadFeaturesFromOverlay() throws Exception {\n         DynamicConfigurationFeatureProvider provider =\n                 new DynamicConfigurationFeatureProvider(\"\", conf, NullStatsLogger.INSTANCE);\n         provider.start();\n+        ensureConfigReloaded();\n \n         Feature feature1 = provider.getFeature(\"feature_1\");\n         assertTrue(feature1.isAvailable());\n@@ -118,6 +133,7 @@ public void testReloadFeaturesFromOverlay() throws Exception {\n         DynamicConfigurationFeatureProvider provider =\n                 new DynamicConfigurationFeatureProvider(\"\", conf, NullStatsLogger.INSTANCE);\n         provider.start();\n+        ensureConfigReloaded();\n \n         Feature feature1 = provider.getFeature(\"feature_1\");\n         assertTrue(feature1.isAvailable());"}]}