{"sha":"cf2936548aa7f91e99bb53a8d53cbca567649535","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmNmMjkzNjU0OGFhN2Y5MWU5OWJiNTNhOGQ1M2NiY2E1Njc2NDk1MzU=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-28T18:12:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-28T18:12:37Z"},"message":"BOOKKEEPER-935: Javadoc improvements and publish sources and javadocs to Maven Central\n\nDescriptions of the changes in this PR:\n\n- sources: attached source jar for each module\n- javadocs: attached javdocs jar for bookkeeper-server, bookkeeper-stats (they are client-facing modules)\n\nfor javadocs:\n- improve javadoc:aggregate to generate new client-facing api doc. it is comprised with 3 sections now : bookkeeper client, bookkeeper stats api, bookkeeper stats providers\n- auditing the client package to make changes to avoid expose internal classes to public.\n- introduce interface audience and stability for documenting public interfaces\n- improve javadoc for publish api\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Matteo Merli <mmerli@apache.org>\n\nThis patch had conflicts when merged, resolved by\nCommitter: Sijie Guo <sijie@apache.org>\n\nThis closes #311 from sijie/attach_sources_jar","tree":{"sha":"5d3a304293cf65684b558038d750d32e9115b86f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/5d3a304293cf65684b558038d750d32e9115b86f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/cf2936548aa7f91e99bb53a8d53cbca567649535","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/cf2936548aa7f91e99bb53a8d53cbca567649535","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/cf2936548aa7f91e99bb53a8d53cbca567649535","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/cf2936548aa7f91e99bb53a8d53cbca567649535/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b63eb86da3757a3740f922093128868d5a53394c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b63eb86da3757a3740f922093128868d5a53394c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b63eb86da3757a3740f922093128868d5a53394c"}],"stats":{"total":1059,"additions":904,"deletions":155},"files":[{"sha":"8647d5e651847a16223f70ec85e0fb20630726c6","filename":"bookkeeper-server/pom.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fpom.xml?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -374,6 +374,30 @@\n           </filesets>\n \t</configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <version>${maven-javadoc-plugin.version}</version>\n+        <configuration>\n+          <!-- Avoid for missing javadoc comments to be marked as errors -->\n+          <additionalparam>-Xdoclint:none</additionalparam>\n+          <subpackages>org.apache.bookkeeper.client:org.apache.bookkeeper.common.annotation:org.apache.bookkeeper.conf:org.apache.bookkeeper.feature:org.apache.bookkeeper.stats</subpackages>\n+          <groups>\n+            <group>\n+              <title>Bookkeeper</title>\n+              <packages>org.apache.bookkeeper*</packages>\n+            </group>\n+          </groups>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>attach-javadocs</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n   <profiles>"},{"sha":"4aff5b33aaa5f58b9c35a6bf00dd52472f77d6a1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FAuthProviderFactoryFactory.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -26,8 +26,8 @@\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.ReflectionUtils;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.BookieConnectionPeer;\n \n /**\n  * A factory to manage the authentication provider factories."},{"sha":"4132fb6afdb24a52c17617b1b065911982d90302","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FBookieAuthProvider.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -23,8 +23,7 @@\n import java.io.IOException;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n+import org.apache.bookkeeper.proto.BookieConnectionPeer;\n \n /**\n  * Bookie authentication provider interface."},{"sha":"9f60cacf12fde286b66aaf49e9864daf80fb6ac5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FClientAuthProvider.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -23,7 +23,7 @@\n import java.io.IOException;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n \n /**\n  * Client authentication provider interface."},{"sha":"18057f0155b405fa7fcfac93542fd1700ffe5267","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LocalBookieEnsemblePlacementPolicy.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -17,14 +17,15 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import io.netty.util.HashedWheelTimer;\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n-\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.apache.bookkeeper.client.EnsemblePlacementPolicy;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n@@ -35,15 +36,13 @@\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.stats.StatsLogger;\n import com.google.common.collect.Lists;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.netty.util.HashedWheelTimer;\n-import java.util.Optional;\n-\n /**\n  * Special ensemble placement policy that always return local bookie. Only works with ledgers with ensemble=1.\n+ *\n+ * @see EnsemblePlacementPolicy\n  */\n public class LocalBookieEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n "},{"sha":"200bb4778344d0977feac1a14a75d6f559c32c4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":100,"deletions":19,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FAsyncCallback.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FAsyncCallback.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FAsyncCallback.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -1,7 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n-import java.util.Enumeration;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements. See the NOTICE file distributed with this\n@@ -18,9 +14,27 @@\n  * License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+package org.apache.bookkeeper.client;\n+\n+import java.util.Enumeration;\n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n \n+/**\n+ * Defines all the callback interfaces for the async operations in bookkeeper client.\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Stable\n public interface AsyncCallback {\n-    public interface AddCallback {\n+\n+    /**\n+     * Async Callback for adding entries to ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface AddCallback {\n         /**\n          * Callback declaration\n          *\n@@ -36,7 +50,14 @@ public interface AddCallback {\n         void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx);\n     }\n \n-    public interface AddLacCallback {\n+    /**\n+     * Async Callback for updating LAC for ledgers.\n+     *\n+     * @since 4.5\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface AddLacCallback {\n         /**\n          * Callback declaration\n          *\n@@ -50,7 +71,14 @@ public interface AddLacCallback {\n         void addLacComplete(int rc, LedgerHandle lh, Object ctx);\n     }\n \n-    public interface CloseCallback {\n+    /**\n+     * Async Callback for closing ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface CloseCallback {\n         /**\n          * Callback definition\n          *\n@@ -64,7 +92,14 @@ public interface CloseCallback {\n         void closeComplete(int rc, LedgerHandle lh, Object ctx);\n     }\n \n-    public interface CreateCallback {\n+    /**\n+     * Async Callback for creating ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface CreateCallback {\n         /**\n          * Declaration of callback method\n          *\n@@ -75,11 +110,17 @@ public interface CreateCallback {\n          * @param ctx\n          *          context object\n          */\n-\n         void createComplete(int rc, LedgerHandle lh, Object ctx);\n     }\n \n-    public interface OpenCallback {\n+    /**\n+     * Async Callback for opening ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface OpenCallback {\n         /**\n          * Callback for asynchronous call to open ledger\n          *\n@@ -90,12 +131,18 @@ public interface OpenCallback {\n          * @param ctx\n          *          context object\n          */\n-\n-        public void openComplete(int rc, LedgerHandle lh, Object ctx);\n+        void openComplete(int rc, LedgerHandle lh, Object ctx);\n \n     }\n \n-    public interface ReadCallback {\n+    /**\n+     * Async Callback for reading entries from ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface ReadCallback {\n         /**\n          * Callback declaration\n          *\n@@ -108,12 +155,18 @@ public interface ReadCallback {\n          * @param ctx\n          *          context object\n          */\n-\n         void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n                           Object ctx);\n     }\n \n-    public interface DeleteCallback {\n+    /**\n+     * Async Callback for deleting ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface DeleteCallback {\n         /**\n          * Callback definition for delete operations\n          *\n@@ -125,7 +178,14 @@ public interface DeleteCallback {\n         void deleteComplete(int rc, Object ctx);\n     }\n \n-    public interface ReadLastConfirmedCallback {\n+    /**\n+     * Async Callback for reading LAC for ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface ReadLastConfirmedCallback {\n         /**\n          * Callback definition for bookie recover operations\n          *\n@@ -139,7 +199,14 @@ public interface ReadLastConfirmedCallback {\n         void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx);\n     }\n \n-    public interface ReadLastConfirmedAndEntryCallback {\n+    /**\n+     * Async Callback for long polling read request.\n+     *\n+     * @since 4.5\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface ReadLastConfirmedAndEntryCallback {\n         /**\n          * Callback definition for bookie operation that allows reading the last add confirmed\n          * along with an entry within the last add confirmed range\n@@ -155,7 +222,14 @@ public interface ReadLastConfirmedAndEntryCallback {\n         void readLastConfirmedAndEntryComplete(int rc, long lastConfirmed, LedgerEntry entry, Object ctx);\n     }\n \n-    public interface RecoverCallback {\n+    /**\n+     * Async Callback for recovering ledgers.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface RecoverCallback {\n         /**\n          * Callback definition for bookie recover operations\n          *\n@@ -167,7 +241,14 @@ public interface RecoverCallback {\n         void recoverComplete(int rc, Object ctx);\n     }\n     \n-    public interface IsClosedCallback {\n+    /**\n+     * Async Callback for checking if a ledger is closed.\n+     *\n+     * @since 4.0\n+     */\n+    @InterfaceAudience.Public\n+    @InterfaceStability.Stable\n+    interface IsClosedCallback {\n         /**\n          * Callback definition for isClosed operation\n          *"},{"sha":"1c4cec857702e40072558868f9dd7d03fc5a69fe","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":65,"deletions":6,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.lang.Exception;\n \n@@ -110,48 +109,108 @@ public static BKException create(int code) {\n     }\n \n     /**\n-     * List of return codes\n-     *\n+     * Codes which represent the various {@link BKException} types.\n      */\n     public interface Code {\n+        /** A placer holder (unused) */\n         int UNINITIALIZED = 1;\n+        /** Everything is OK */\n         int OK = 0;\n+        /** Read operations failed (bookie error) */\n         int ReadException = -1;\n+        /** Unused */\n         int QuorumException = -2;\n+        /** Unused */\n         int NoBookieAvailableException = -3;\n+        /** Digest Manager is not initialized (client error) */\n         int DigestNotInitializedException = -4;\n+        /** Digest doesn't match on returned entries */\n         int DigestMatchException = -5;\n+        /** Not enough bookies available to form an ensemble */\n         int NotEnoughBookiesException = -6;\n+        /** No such ledger exists */\n         int NoSuchLedgerExistsException = -7;\n+        /** Bookies are not available */\n         int BookieHandleNotAvailableException = -8;\n+        /** ZooKeeper operations failed */\n         int ZKException = -9;\n+        /** Ledger recovery operations failed */\n         int LedgerRecoveryException = -10;\n+        /** Executing operations on a closed ledger handle */\n         int LedgerClosedException = -11;\n+        /** Write operations failed (bookie error) */\n         int WriteException = -12;\n+        /** No such entry exists */\n         int NoSuchEntryException = -13;\n+        /** Incorrect parameters (operations are absolutely not executed) */\n         int IncorrectParameterException = -14;\n+        /** Synchronous operations are interrupted */\n         int InterruptedException = -15;\n+        /** Protocol version is wrong (operations are absolutely not executed) */\n         int ProtocolVersionException = -16;\n+        /** Bad version on executing metadata operations */\n         int MetadataVersionException = -17;\n+        /** Meta store operations failed */\n         int MetaStoreException = -18;\n+        /** Executing operations on a closed client */\n         int ClientClosedException = -19;\n+        /** Ledger already exists */\n         int LedgerExistException = -20;\n+        /**\n+         * Add entry operation timeouts on waiting quorum responses.\n+         *\n+         * @since 4.5\n+         */\n         int AddEntryQuorumTimeoutException = -21;\n+        /**\n+         * Duplicated entry id is found when {@link LedgerHandleAdv#addEntry(long, byte[])}.\n+         *\n+         * @since 4.5\n+         */\n         int DuplicateEntryIdException = -22;\n+        /**\n+         * Operations timeouts.\n+         *\n+         * @since 4.5\n+         */\n         int TimeoutException = -23;\n \n+        /**\n+         * Operation is illegal.\n+         */\n         int IllegalOpException = -100;\n+        /**\n+         * Operations failed due to ledgers are fenced.\n+         */\n         int LedgerFencedException = -101;\n+        /**\n+         * Operations failed due to unauthorized.\n+         */\n         int UnauthorizedAccessException = -102;\n+        /**\n+         * Replication failed due to unclosed fragments.\n+         */\n         int UnclosedFragmentException = -103;\n+        /**\n+         * Write operations failed due to bookies are readonly\n+         */\n         int WriteOnReadOnlyBookieException = -104;\n         //-105 reserved for TooManyRequestsException\n+        /**\n+         * Ledger id overflow happens on ledger manager.\n+         *\n+         * @since 4.5\n+         */\n         int LedgerIdOverflowException = -106;\n \n-        // generic exception code used to propagate in replication pipeline\n+        /**\n+         * generic exception code used to propagate in replication pipeline\n+         */\n         int ReplicationException = -200;\n \n-        // For all unexpected error conditions\n+        /**\n+         * Unexpected condition.\n+         */\n         int UnexpectedConditionException = -999;\n     }\n "},{"sha":"e5ccba301caaa2b80da2bb41f39a0f2c92d504b0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":92,"deletions":8,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -28,7 +28,6 @@\n import io.netty.channel.epoll.EpollEventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n import io.netty.util.HashedWheelTimer;\n-\n import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n@@ -39,7 +38,6 @@\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n-\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -74,16 +72,15 @@\n \n \n /**\n- * BookKeeper client. We assume there is one single writer to a ledger at any\n- * time.\n+ * BookKeeper client.\n+ *\n+ * <p>We assume there is one single writer to a ledger at any time.\n  *\n- * There are four possible operations: start a new ledger, write to a ledger,\n+ * <p>There are four possible operations: start a new ledger, write to a ledger,\n  * read from a ledger and delete a ledger.\n  *\n- * The exceptions resulting from synchronous calls and error code resulting from\n+ * <p>The exceptions resulting from synchronous calls and error code resulting from\n  * asynchronous calls can be found in the class {@link BKException}.\n- *\n- *\n  */\n public class BookKeeper implements AutoCloseable {\n \n@@ -148,6 +145,9 @@ public class BookKeeper implements AutoCloseable {\n     boolean closed = false;\n     final ReentrantReadWriteLock closeLock = new ReentrantReadWriteLock();\n \n+    /**\n+     * BookKeeper Client Builder to build client instances.\n+     */\n     public static class Builder {\n         final ClientConfiguration conf;\n \n@@ -162,32 +162,116 @@ public static class Builder {\n             this.conf = conf;\n         }\n \n+        /**\n+         * Configure the bookkeeper client with a provided {@link EventLoopGroup}.\n+         *\n+         * @param f an external {@link EventLoopGroup} to use by the bookkeeper client.\n+         * @return client builder.\n+         * @deprecated since 4.5, use {@link #eventLoopGroup(EventLoopGroup)}\n+         * @see #eventLoopGroup(EventLoopGroup)\n+         */\n+        @Deprecated\n         public Builder setEventLoopGroup(EventLoopGroup f) {\n             eventLoopGroup = f;\n             return this;\n         }\n \n+        /**\n+         * Configure the bookkeeper client with a provided {@link ZooKeeper} client.\n+         *\n+         * @param zk an external {@link ZooKeeper} client to use by the bookkeeper client.\n+         * @return client builder.\n+         * @deprecated since 4.5, use {@link #zk(ZooKeeper)}\n+         * @see #zk(ZooKeeper)\n+         */\n+        @Deprecated\n         public Builder setZookeeper(ZooKeeper zk) {\n             this.zk = zk;\n             return this;\n         }\n \n+        /**\n+         * Configure the bookkeeper client with a provided {@link StatsLogger}.\n+         *\n+         * @param statsLogger an {@link StatsLogger} to use by the bookkeeper client to collect stats generated\n+         *                    by the client.\n+         * @return client builder.\n+         * @deprecated since 4.5, use {@link #statsLogger(StatsLogger)}\n+         * @see #statsLogger(StatsLogger)\n+         */\n+        @Deprecated\n         public Builder setStatsLogger(StatsLogger statsLogger) {\n             this.statsLogger = statsLogger;\n             return this;\n         }\n \n+        /**\n+         * Configure the bookkeeper client with a provided {@link EventLoopGroup}.\n+         *\n+         * @param f an external {@link EventLoopGroup} to use by the bookkeeper client.\n+         * @return client builder.\n+         * @since 4.5\n+         */\n+        public Builder eventLoopGroup(EventLoopGroup f) {\n+            eventLoopGroup = f;\n+            return this;\n+        }\n \n+        /**\n+         * Configure the bookkeeper client with a provided {@link ZooKeeper} client.\n+         *\n+         * @param zk an external {@link ZooKeeper} client to use by the bookkeeper client.\n+         * @return client builder.\n+         * @since 4.5\n+         */\n+        public Builder zk(ZooKeeper zk) {\n+            this.zk = zk;\n+            return this;\n+        }\n+\n+        /**\n+         * Configure the bookkeeper client with a provided {@link StatsLogger}.\n+         *\n+         * @param statsLogger an {@link StatsLogger} to use by the bookkeeper client to collect stats generated\n+         *                    by the client.\n+         * @return client builder.\n+         * @since 4.5\n+         */\n+        public Builder statsLogger(StatsLogger statsLogger) {\n+            this.statsLogger = statsLogger;\n+            return this;\n+        }\n+\n+        /**\n+         * Configure the bookkeeper client to use the provided dns resolver {@link DNSToSwitchMapping}.\n+         *\n+         * @param dnsResolver dns resolver for placement policy to use for resolving network locations.\n+         * @return client builder\n+         * @since 4.5\n+         */\n         public Builder dnsResolver(DNSToSwitchMapping dnsResolver) {\n             this.dnsResolver = dnsResolver;\n             return this;\n         }\n \n+        /**\n+         * Configure the bookkeeper client to use a provided {@link HashedWheelTimer}.\n+         *\n+         * @param requestTimer request timer for client to manage timer related tasks.\n+         * @return client builder\n+         * @since 4.5\n+         */\n         public Builder requestTimer(HashedWheelTimer requestTimer) {\n             this.requestTimer = requestTimer;\n             return this;\n         }\n \n+        /**\n+         * Feature Provider\n+         *\n+         * @param featureProvider\n+         * @return\n+         */\n         public Builder featureProvider(FeatureProvider featureProvider) {\n             this.featureProvider = featureProvider;\n             return this;"},{"sha":"40d9bbc783d184ea319c404bb1c20794fd318849","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperClientStats.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.client;\n \n+/**\n+ * List of constants for defining client stats names.\n+ */\n public interface BookKeeperClientStats {\n     public final static String CLIENT_SCOPE = \"bookkeeper_client\";\n "},{"sha":"484e54bb4bfd9bae4a743baabd0148a760ff1fe7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieInfoReader.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -28,6 +28,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.bookkeeper.client.WeightedRandomSelection.WeightedObject;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -38,6 +39,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * A utility class to read {@link BookieInfo} from bookies.\n+ *\n+ * <p>NOTE: This class is tended to be used by this project only. External users should not rely on it directly.\n+ */\n public class BookieInfoReader {\n     private static final Logger LOG = LoggerFactory.getLogger(BookieInfoReader.class);\n     private static final long GET_BOOKIE_INFO_REQUEST_FLAGS\n@@ -55,6 +61,11 @@ public class BookieInfoReader {\n     private final AtomicBoolean isQueued = new AtomicBoolean();\n     private final AtomicBoolean refreshBookieList = new AtomicBoolean();\n \n+    /**\n+     * A class represents the information (e.g. disk usage, load) of a bookie.\n+     *\n+     * <p>NOTE: This class is tended to be used by this project only. External users should not rely on it directly.\n+     */\n     public static class BookieInfo implements WeightedObject {\n         private final long freeDiskSpace;\n         private final long totalDiskSpace;"},{"sha":"0a1a884524db543f0f48a50bf2d40814202bcde6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookiesListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookiesListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookiesListener.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,11 +15,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n \n /**\n  * Listener for the the available bookies changes.\n  */\n+\n+@InterfaceAudience.Private\n+@InterfaceStability.Evolving\n public interface BookiesListener {\n+\n+    /**\n+     * Callback method triggered when the list of available bookies are changed.\n+     */\n     void availableBookiesChanged();\n }"},{"sha":"d4012331972f3030191ff8c1f53d78a1ab0163ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultEnsemblePlacementPolicy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -40,7 +40,9 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Default Ensemble Placement Policy, which picks bookies randomly\n+ * Default Ensemble Placement Policy, which picks bookies randomly.\n+ *\n+ * @see EnsemblePlacementPolicy\n  */\n public class DefaultEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n     static final Logger LOG = LoggerFactory.getLogger(DefaultEnsemblePlacementPolicy.class);"},{"sha":"3c3dabab02940aeffbe45e1d3043699851aad977","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultSpeculativeRequestExecutionPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultSpeculativeRequestExecutionPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FDefaultSpeculativeRequestExecutionPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -31,6 +31,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * A default implementation of {@link SpeculativeRequestExecutionPolicy}.\n+ *\n+ * <p>The policy issues speculative requests in a backoff way. The time between two speculative requests\n+ * are between {@code firstSpeculativeRequestTimeout} and {@code maxSpeculativeRequestTimeout}.\n+ */\n public class DefaultSpeculativeRequestExecutionPolicy implements SpeculativeRequestExecutionPolicy {\n     private static final Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n     final int firstSpeculativeRequestTimeout;"},{"sha":"8a9b86a36534df90c4db410f13965fea3b653ac8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/EnsemblePlacementPolicy.java","status":"modified","additions":200,"deletions":15,"changes":215,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -17,28 +17,182 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import io.netty.util.HashedWheelTimer;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-\n-\n-import io.netty.util.HashedWheelTimer;\n import java.util.Optional;\n-\n+import java.util.Set;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.feature.FeatureProvider;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.stats.StatsLogger;\n \n /**\n- * Encapsulation of the algorithm that selects a number of bookies from the cluster as an ensemble for storing\n- * data, based on the data input as well as the node properties.\n+ * {@link EnsemblePlacementPolicy} encapsulates the algorithm that bookkeeper client uses to select a number of bookies\n+ * from the cluster as an ensemble for storing entries.\n+ *\n+ * <p>The algorithm is typically implemented based on the data input as well as the network topology properties.\n+ *\n+ * <h2>How does it work?</h2>\n+ *\n+ * This interface basically covers three parts:\n+ * <p><ul>\n+ * <li>Initialization and uninitialization</li>\n+ * <li>How to choose bookies to place data</li>\n+ * <li>How to choose bookies to do speculative reads</li>\n+ * </ul></p>\n+ *\n+ * <h3>Initialization and uninitialization</h3>\n+ *\n+ * <p>The ensemble placement policy is constructed by jvm reflection during constructing bookkeeper client.\n+ * After the {@code EnsemblePlacementPolicy} is constructed, bookkeeper client will call\n+ * {@link #initialize(ClientConfiguration, Optional, HashedWheelTimer, FeatureProvider, StatsLogger)} to initialize\n+ * the placement policy.\n+ *\n+ * <p>The {@link #initialize(ClientConfiguration, Optional, HashedWheelTimer, FeatureProvider, StatsLogger)}\n+ * method takes a few resources from bookkeeper for instantiating itself. These resources include:\n+ *\n+ * <p><ul>\n+ * <li>`ClientConfiguration` : The client configuration that used for constructing the bookkeeper client.\n+ *                             The implementation of the placement policy could obtain its settings from this\n+ *                             configuration.\n+ * <li>`DNSToSwitchMapping`: The DNS resolver for the ensemble policy to build the network topology of the bookies\n+ *                           cluster. It is optional.\n+ * <li>`HashedWheelTimer`: A hashed wheel timer that could be used for timing related work.\n+ *                         For example, a stabilize network topology could use it to delay network topology changes to\n+ *                         reduce impacts of flapping bookie registrations due to zk session expires.\n+ * <li>`FeatureProvider`: A {@link FeatureProvider} that the policy could use for enabling or disabling its offered\n+ *                        features. For example, a {@link RegionAwareEnsemblePlacementPolicy} could offer features\n+ *                        to disable placing data to a specific region at runtime.\n+ * <li>`StatsLogger`: A {@link StatsLogger} for exposing stats.\n+ * </ul></p>\n+ *\n+ * <p>The ensemble placement policy is a single instance per bookkeeper client. The instance will\n+ * be {@link #uninitalize()} when closing the bookkeeper client. The implementation of a placement policy should be\n+ * responsible for releasing all the resources that allocated during\n+ * {@link #initialize(ClientConfiguration, Optional, HashedWheelTimer, FeatureProvider, StatsLogger)}.\n+ *\n+ * <h3>How to choose bookies to place data</h3>\n+ *\n+ * <p>The bookkeeper client discovers list of bookies from zookeeper via {@code BookieWatcher} - whenever there are\n+ * bookie changes, the ensemble placement policy will be notified with new list of bookies via\n+ * {@link #onClusterChanged(Set, Set)}. The implementation of the ensemble placement policy will react on those\n+ * changes to build new network topology. Subsequent operations like {@link #newEnsemble(int, int, int, Map, Set)} or\n+ * {@link #replaceBookie(int, int, int, Map, Collection, BookieSocketAddress, Set)} hence can operate on the new\n+ * network topology.\n+ *\n+ * <p>Both {@link RackawareEnsemblePlacementPolicy} and {@link RegionAwareEnsemblePlacementPolicy} are\n+ * {@link TopologyAwareEnsemblePlacementPolicy}s. They build a {@link org.apache.bookkeeper.net.NetworkTopology} on\n+ * bookie changes, use it for ensemble placement and ensure {@code rack/region} coverage for write quorums.\n+ *\n+ * <h4>Network Topology</h4>\n+ *\n+ * <p>The network topology is presenting a cluster of bookies in a tree hierarchical structure. For example,\n+ * a bookie cluster may be consists of many data centers (aka regions) filled with racks of machines.\n+ * In this tree structure, leaves represent bookies and inner nodes represent switches/routes that manage\n+ * traffic in/out of regions or racks.\n+ *\n+ * <p>For example, there are 3 bookies in region `A`. They are `bk1`, `bk2` and `bk3`. And their network locations are\n+ * {@code /region-a/rack-1/bk1}, {@code /region-a/rack-1/bk2} and {@code /region-a/rack-2/bk3}. So the network topology\n+ * will look like below:\n+ *\n+ * <pre>\n+ *      root\n+ *        |\n+ *     region-a\n+ *       /  \\\n+ * rack-1  rack-2\n+ *   /  \\       \\\n+ * bk1  bk2     bk3\n+ * </pre>\n+ *\n+ * <p>Another example, there are 4 bookies spanning in two regions `A` and `B`. They are `bk1`, `bk2`, `bk3` and `bk4`.\n+ * And their network locations are {@code /region-a/rack-1/bk1}, {@code /region-a/rack-1/bk2},\n+ * {@code /region-b/rack-2/bk3} and {@code /region-b/rack-2/bk4}. The network topology will look like below:\n+ *\n+ * <pre>\n+ *         root\n+ *         /  \\\n+ * region-a  region-b\n+ *     |         |\n+ *   rack-1    rack-2\n+ *     / \\       / \\\n+ *   bk1  bk2  bk3  bk4\n+ * </pre>\n+ *\n+ * <p> The network location of each bookie is resolved by a {@link DNSToSwitchMapping}. The {@link DNSToSwitchMapping}\n+ * resolves a list of DNS-names or IP-addresses into a list of network locations. The network location that is returned\n+ * must be a network path of the form `/region/rack`, where `/` is the root, and `region` is the region id representing\n+ * the data center where `rack` is located. The network topology of the bookie cluster would determine the number of\n+ *\n+ * <h4>RackAware and RegionAware</h4>\n+ *\n+ * <p>{@link RackawareEnsemblePlacementPolicy} basically just chooses bookies from different racks in the built\n+ * network topology. It guarantees that a write quorum will cover at least two racks. It expects the network locations\n+ * resolved by {@link DNSToSwitchMapping} have at least 2 levels. For example, network location paths like\n+ * {@code /dc1/rack0} and {@code /dc1/row1/rack0} are okay, but {@link /rack0} is not acceptable.\n+ *\n+ * <p>{@link RegionAwareEnsemblePlacementPolicy} is a hierarchical placement policy, which it chooses\n+ * equal-sized bookies from regions, and within each region it uses {@link RackawareEnsemblePlacementPolicy} to choose\n+ * bookies from racks. For example, if there is 3 regions - {@code region-a}, {@code region-b} and {@code region-c},\n+ * an application want to allocate a {@code 15-bookies} ensemble. First, it would figure out there are 3 regions and\n+ * it should allocate 5 bookies from each region. Second, for each region, it would use\n+ * {@link RackawareEnsemblePlacementPolicy} to choose <i>5</i> bookies.\n+ *\n+ * <p>Since {@link RegionAwareEnsemblePlacementPolicy} is based on {@link RackawareEnsemblePlacementPolicy}, it expects\n+ * the network locations resolved by {@link DNSToSwitchMapping} have at least <b>3</b> levels.\n+ *\n+ * <h3>How to choose bookies to do speculative reads?</h3>\n+ *\n+ * <p>{@link #reorderReadSequence(ArrayList, List, Map)} and {@link #reorderReadLACSequence(ArrayList, List, Map)} are\n+ * two methods exposed by the placement policy, to help client determine a better read sequence according to the\n+ * network topology and the bookie failure history.\n+ *\n+ * <p>For example, in {@link RackawareEnsemblePlacementPolicy}, the reads will be attempted in following sequence:\n+ *\n+ * <p><ul>\n+ * <li>bookies are writable and didn't experience failures before\n+ * <li>bookies are writable and experienced failures before\n+ * <li>bookies are readonly\n+ * <li>bookies already disappeared from network topology\n+ * </ul></p>\n+ *\n+ * <p>In {@link RegionAwareEnsemblePlacementPolicy}, the reads will be tried in similar following sequence\n+ * as `RackAware` placement policy. There is a slight different on trying writable bookies: after trying every 2\n+ * bookies from local region, it would try a bookie from remote region. Hence it would achieve low latency even\n+ * there is network issues within local region.\n+ *\n+ * <h2>How to configure the placement policy?</h2>\n+ *\n+ * <p>Currently there are 3 implementations available by default. They are:\n+ * <ul>\n+ *     <li>{@link DefaultEnsemblePlacementPolicy}</li>\n+ *     <li>{@link RackawareEnsemblePlacementPolicy}</li>\n+ *     <li>{@link RegionAwareEnsemblePlacementPolicy}</li>\n+ * </ul>\n+ *\n+ * <p>You can configure the ensemble policy by specifying the placement policy class in\n+ * {@link ClientConfiguration#setEnsemblePlacementPolicy(Class)}.\n+ *\n+ * <p>{@link DefaultEnsemblePlacementPolicy} randomly pickups bookies from the cluster, while both\n+ * {@link RackawareEnsemblePlacementPolicy} and {@link RegionAwareEnsemblePlacementPolicy} choose bookies based on\n+ * network locations. So you might also consider configuring a proper {@link DNSToSwitchMapping} in\n+ * {@link BookKeeper.Builder} to resolve the correct network locations for your cluster.\n+ *\n+ * @see TopologyAwareEnsemblePlacementPolicy\n+ * @see DefaultEnsemblePlacementPolicy\n+ * @see RackawareEnsemblePlacementPolicy\n+ * @see RegionAwareEnsemblePlacementPolicy\n  */\n+@InterfaceAudience.Public\n+@InterfaceStability.Evolving\n public interface EnsemblePlacementPolicy {\n \n     /**\n@@ -49,6 +203,8 @@ public interface EnsemblePlacementPolicy {\n      * @param hashedWheelTimer timer\n      * @param featureProvider feature provider\n      * @param statsLogger stats logger\n+     *\n+     * @since 4.5\n      */\n     public EnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                                               Optional<DNSToSwitchMapping> optionalDnsResolver,\n@@ -65,6 +221,10 @@ public EnsemblePlacementPolicy initialize(ClientConfiguration conf,\n      * A consistent view of the cluster (what bookies are available as writable, what bookies are available as\n      * readonly) is updated when any changes happen in the cluster.\n      *\n+     * <p>The implementation should take actions when the cluster view is changed. So subsequent\n+     * {@link #newEnsemble(int, int, int, Map, Set)} and\n+     * {@link #replaceBookie(int, int, int, Map, Collection, BookieSocketAddress, Set)} can choose proper bookies.\n+     *\n      * @param writableBookies\n      *          All the bookies in the cluster available for write/read.\n      * @param readOnlyBookies\n@@ -78,18 +238,30 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n      * Choose <i>numBookies</i> bookies for ensemble. If the count is more than the number of available\n      * nodes, {@link BKNotEnoughBookiesException} is thrown.\n      *\n+     * <p>The implementation should respect to the replace settings. The size of the returned bookie list\n+     * should be equal to the provide {@code ensembleSize}.\n+     *\n+     * <p>{@code customMetadata} is the same user defined data that user provides\n+     * when {@link BookKeeper#createLedger(int, int, int, BookKeeper.DigestType, byte[], Map)}.\n+     *\n      * @param ensembleSize\n      *          Ensemble Size\n      * @param writeQuorumSize\n      *          Write Quorum Size\n      * @param ackQuorumSize\n-     *          the value of ackQuorumSize\n-     * @param customMetadata the value of customMetadata\n+     *          the value of ackQuorumSize (added since 4.5)\n+     * @param customMetadata the value of customMetadata. it is the same user defined metadata that user\n+     *                       provides in {@link BookKeeper#createLedger(int, int, int, BookKeeper.DigestType, byte[])}\n      * @param excludeBookies Bookies that should not be considered as targets.\n      * @throws BKNotEnoughBookiesException if not enough bookies available.\n      * @return the java.util.ArrayList<org.apache.bookkeeper.net.BookieSocketAddress>\n      */\n-    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize, int ackQuorumSize, Map<String, byte[]> customMetadata, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize,\n+                                                      int writeQuorumSize,\n+                                                      int ackQuorumSize,\n+                                                      Map<String, byte[]> customMetadata,\n+                                                      Set<BookieSocketAddress> excludeBookies)\n+        throws BKNotEnoughBookiesException;\n \n     /**\n      * Choose a new bookie to replace <i>bookieToReplace</i>. If no bookie available in the cluster,\n@@ -99,15 +271,23 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n      *          the value of ensembleSize\n      * @param writeQuorumSize\n      *          the value of writeQuorumSize\n-     * @param ackQuorumSize the value of ackQuorumSize\n-     * @param customMetadata the value of customMetadata\n+     * @param ackQuorumSize the value of ackQuorumSize (added since 4.5)\n+     * @param customMetadata the value of customMetadata. it is the same user defined metadata that user\n+     *                       provides in {@link BookKeeper#createLedger(int, int, int, BookKeeper.DigestType, byte[])}\n      * @param currentEnsemble the value of currentEnsemble\n      * @param bookieToReplace bookie to replace\n      * @param excludeBookies bookies that should not be considered as candidate.\n      * @throws BKNotEnoughBookiesException\n      * @return the org.apache.bookkeeper.net.BookieSocketAddress\n      */\n-    public BookieSocketAddress replaceBookie(int ensembleSize, int writeQuorumSize, int ackQuorumSize, java.util.Map<String, byte[]> customMetadata, Collection<BookieSocketAddress> currentEnsemble, BookieSocketAddress bookieToReplace, Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException;\n+    public BookieSocketAddress replaceBookie(int ensembleSize,\n+                                             int writeQuorumSize,\n+                                             int ackQuorumSize,\n+                                             Map<String, byte[]> customMetadata,\n+                                             Collection<BookieSocketAddress> currentEnsemble,\n+                                             BookieSocketAddress bookieToReplace,\n+                                             Set<BookieSocketAddress> excludeBookies)\n+        throws BKNotEnoughBookiesException;\n \n     /**\n      * Reorder the read sequence of a given write quorum <i>writeSet</i>.\n@@ -119,9 +299,11 @@ public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writab\n      * @param bookieFailureHistory\n      *          Observed failures on the bookies\n      * @return read sequence of bookies\n+     * @since 4.5\n      */\n     public List<Integer> reorderReadSequence(ArrayList<BookieSocketAddress> ensemble,\n-                                             List<Integer> writeSet, Map<BookieSocketAddress, Long> bookieFailureHistory);\n+                                             List<Integer> writeSet,\n+                                             Map<BookieSocketAddress, Long> bookieFailureHistory);\n \n \n     /**\n@@ -134,15 +316,18 @@ public List<Integer> reorderReadSequence(ArrayList<BookieSocketAddress> ensemble\n      * @param bookieFailureHistory\n      *          Observed failures on the bookies\n      * @return read sequence of bookies\n+     * @since 4.5\n      */\n     public List<Integer> reorderReadLACSequence(ArrayList<BookieSocketAddress> ensemble,\n-                                                List<Integer> writeSet, Map<BookieSocketAddress, Long> bookieFailureHistory);\n+                                                List<Integer> writeSet,\n+                                                Map<BookieSocketAddress, Long> bookieFailureHistory);\n \n     /**\n      * Send the bookie info details.\n      * \n      * @param bookieInfoMap\n      *          A map that has the bookie to BookieInfo\n+     * @since 4.5\n      */\n     default public void updateBookieInfo(Map<BookieSocketAddress, BookieInfo> bookieInfoMap) {\n     }"},{"sha":"2828f0b91e09ecd6d740cab5bc2dbfe5af7f1b79","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ITopologyAwareEnsemblePlacementPolicy.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FITopologyAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FITopologyAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FITopologyAwareEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -17,6 +17,8 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import org.apache.bookkeeper.common.annotation.InterfaceAudience;\n+import org.apache.bookkeeper.common.annotation.InterfaceStability;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.Node;\n \n@@ -25,19 +27,26 @@\n \n /**\n  * Interface for topology aware ensemble placement policy.\n+ *\n+ * <p>All the implementations of this interface are using {@link org.apache.bookkeeper.net.NetworkTopology}\n+ *    for placing ensembles.\n+ *\n+ * @see EnsemblePlacementPolicy\n  */\n+@InterfaceAudience.Private\n+@InterfaceStability.Evolving\n public interface ITopologyAwareEnsemblePlacementPolicy<T extends Node> extends EnsemblePlacementPolicy {\n     /**\n      * Predicate used when choosing an ensemble.\n      */\n-    public static interface Predicate<T extends Node> {\n+    static interface Predicate<T extends Node> {\n         boolean apply(T candidate, Ensemble<T> chosenBookies);\n     }\n \n     /**\n      * Ensemble used to hold the result of an ensemble selected for placement.\n      */\n-    public static interface Ensemble<T extends Node> {\n+    static interface Ensemble<T extends Node> {\n \n         /**\n          * Append the new bookie node to the ensemble only if the ensemble doesnt"},{"sha":"c9481bdaa989c35ed3e58db815b47535be54ff74","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerChecker.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -37,7 +37,9 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- *Checks the complete ledger and finds the UnderReplicated fragments if any\n+ * A utility class to check the complete ledger and finds the UnderReplicated fragments if any.\n+ *\n+ * <p>NOTE: This class is tended to be used by this project only. External users should not rely on it directly.\n  */\n public class LedgerChecker {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerChecker.class);"},{"sha":"55e3987b8cb6f2a7106702e4a25998f0478c159a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -46,8 +46,9 @@\n \n /**\n  * This class encapsulates all the ledger metadata that is persistently stored\n- * in zookeeper. It provides parsing and serialization methods of such metadata.\n+ * in metadata store.\n  *\n+ * <p>It provides parsing and serialization methods of such metadata.\n  */\n public class LedgerMetadata {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerMetadata.class);"},{"sha":"62faf82c8d3d620154c81a259019478f370b8c58","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -21,18 +21,20 @@\n import static com.google.common.base.Charsets.UTF_8;\n \n import io.netty.buffer.ByteBuf;\n-\n import java.security.GeneralSecurityException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n-\n import javax.crypto.Mac;\n import javax.crypto.spec.SecretKeySpec;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * A {@code SHA-1} based digest manager.\n+ *\n+ * <p>NOTE: This class is tended to be used by this project only. External users should not rely on it directly.\n+ */\n public class MacDigestManager extends DigestManager {\n     private final static Logger LOG = LoggerFactory.getLogger(MacDigestManager.class);\n "},{"sha":"0eb8b921cd0840283d8ed7ae038ed35bd537b753","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRackawareEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -29,6 +29,11 @@\n \n import io.netty.util.HashedWheelTimer;\n \n+/**\n+ * A placement policy implementation use rack information for placing ensembles.\n+ *\n+ * @see EnsemblePlacementPolicy\n+ */\n public class RackawareEnsemblePlacementPolicy extends RackawareEnsemblePlacementPolicyImpl\n         implements ITopologyAwareEnsemblePlacementPolicy<TopologyAwareEnsemblePlacementPolicy.BookieNode> {\n     RackawareEnsemblePlacementPolicyImpl slave = null;"},{"sha":"ca067d4cae173a7efb5c15a123dc83035c80b2c0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedAndEntryOp.java","status":"modified","additions":16,"deletions":45,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedAndEntryOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedAndEntryOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedAndEntryOp.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -20,6 +20,7 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import com.google.common.util.concurrent.ListenableFuture;\n import io.netty.buffer.ByteBuf;\n import java.util.ArrayList;\n import java.util.BitSet;\n@@ -28,18 +29,20 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import com.google.common.base.Optional;\n-import com.google.common.util.concurrent.ListenableFuture;\n-\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n+import org.apache.bookkeeper.proto.ReadLastConfirmedAndEntryContext;\n import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ReadLastConfirmedAndEntryOp implements BookkeeperInternalCallbacks.ReadEntryCallback, SpeculativeRequestExecutor {\n+/**\n+ * Long poll read operation.\n+ */\n+class ReadLastConfirmedAndEntryOp implements BookkeeperInternalCallbacks.ReadEntryCallback,\n+                                             SpeculativeRequestExecutor {\n+\n     static final Logger LOG = LoggerFactory.getLogger(ReadLastConfirmedAndEntryOp.class);\n \n     final private ScheduledExecutorService scheduler;\n@@ -485,38 +488,6 @@ interface LastConfirmedAndEntryCallback {\n         public void readLastConfirmedAndEntryComplete(int rc, long lastAddConfirmed, LedgerEntry entry);\n     }\n \n-    public static class ReadLastConfirmedAndEntryContext implements BookkeeperInternalCallbacks.ReadEntryCallbackCtx {\n-        final int bookieIndex;\n-        final BookieSocketAddress bookie;\n-        long lac = LedgerHandle.INVALID_ENTRY_ID;\n-        Optional<Long> lacUpdateTimestamp = Optional.absent();\n-\n-        ReadLastConfirmedAndEntryContext(int bookieIndex, BookieSocketAddress bookie) {\n-            this.bookieIndex = bookieIndex;\n-            this.bookie = bookie;\n-        }\n-\n-        @Override\n-        public void setLastAddConfirmed(long lac) {\n-            this.lac = lac;\n-        }\n-\n-        @Override\n-        public long getLastAddConfirmed() {\n-            return lac;\n-        }\n-\n-        public Optional<Long> getLacUpdateTimestamp() {\n-            return lacUpdateTimestamp;\n-        }\n-\n-        public void setLacUpdateTimestamp(long lacUpdateTimestamp) {\n-            this.lacUpdateTimestamp = Optional.of(lacUpdateTimestamp);\n-        }\n-\n-\n-    }\n-\n     private void submitCallback(int rc, long lastAddConfirmed, LedgerEntry entry) {\n         long latencyMicros = MathUtils.elapsedMicroSec(requestTimeNano);\n         if (BKException.Code.OK != rc) {\n@@ -536,7 +507,7 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ByteBuf buffe\n                 new Object[] { getClass().getName(), ledgerId, entryId, rc });\n         }\n         ReadLastConfirmedAndEntryContext rCtx = (ReadLastConfirmedAndEntryContext) ctx;\n-        BookieSocketAddress bookie = rCtx.bookie;\n+        BookieSocketAddress bookie = rCtx.getBookieAddress();\n         numResponsesPending--;\n         if (BKException.Code.OK == rc) {\n             if (LOG.isTraceEnabled()) {\n@@ -552,7 +523,7 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ByteBuf buffe\n             hasValidResponse = true;\n \n             if (entryId != BookieProtocol.LAST_ADD_CONFIRMED) {\n-                if (request.complete(rCtx.bookieIndex, bookie, buffer, entryId)) {\n+                if (request.complete(rCtx.getBookieIndex(), bookie, buffer, entryId)) {\n                     // callback immediately\n                     if (rCtx.getLacUpdateTimestamp().isPresent()) {\n                         long elapsedMicros = TimeUnit.MILLISECONDS.toMicros(System.currentTimeMillis() - rCtx.getLacUpdateTimestamp().get());\n@@ -563,10 +534,10 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ByteBuf buffe\n \n                     submitCallback(BKException.Code.OK, lastAddConfirmed, request);\n                     requestComplete.set(true);\n-                    heardFromHostsBitSet.set(rCtx.bookieIndex, true);\n+                    heardFromHostsBitSet.set(rCtx.getBookieIndex(), true);\n                 }\n             } else {\n-                emptyResponsesFromHostsBitSet.set(rCtx.bookieIndex, true);\n+                emptyResponsesFromHostsBitSet.set(rCtx.getBookieIndex(), true);\n                 if (lastAddConfirmed > prevEntryId) {\n                     // received advanced lac\n                     completeRequest();\n@@ -580,18 +551,18 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ByteBuf buffe\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Received empty response for readLACAndEntry(lid = {}, previousEntryId = {}) from\" +\n                                         \" bookie {} @ {}, reattempting reading next bookie : lac = {}\",\n-                                new Object[]{ledgerId, prevEntryId, rCtx.bookieIndex,\n-                                        rCtx.bookie, lastAddConfirmed});\n+                                new Object[]{ledgerId, prevEntryId, rCtx.getBookieAddress(),\n+                                        rCtx.getBookieAddress(), lastAddConfirmed});\n                     }\n-                    request.logErrorAndReattemptRead(rCtx.bookieIndex, bookie, \"Empty Response\", rc);\n+                    request.logErrorAndReattemptRead(rCtx.getBookieIndex(), bookie, \"Empty Response\", rc);\n                 }\n                 return;\n             }\n         } else if (BKException.Code.UnauthorizedAccessException == rc && !requestComplete.get()) {\n             submitCallback(rc, lastAddConfirmed, null);\n             requestComplete.set(true);\n         } else {\n-            request.logErrorAndReattemptRead(rCtx.bookieIndex, bookie, \"Error: \" + BKException.getMessage(rc), rc);\n+            request.logErrorAndReattemptRead(rCtx.getBookieIndex(), bookie, \"Error: \" + BKException.getMessage(rc), rc);\n             return;\n         }\n "},{"sha":"89415a16d2464f3442da6c03c5a7b0bf16472a98","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FRegionAwareEnsemblePlacementPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -43,6 +43,11 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * A placement policy use region information in the network topology for placing ensembles.\n+ *\n+ * @see EnsemblePlacementPolicy\n+ */\n public class RegionAwareEnsemblePlacementPolicy extends RackawareEnsemblePlacementPolicy {\n     static final Logger LOG = LoggerFactory.getLogger(RegionAwareEnsemblePlacementPolicy.class);\n "},{"sha":"787f2a0ad3cfa240e7cab77fc9fe765aa585cc23","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/SpeculativeRequestExecutionPolicy.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutionPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutionPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutionPolicy.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -22,6 +22,14 @@\n \n import java.util.concurrent.ScheduledExecutorService;\n \n+/**\n+ * Define a policy for speculative request execution. \n+ *\n+ * <p>The implementation can define its execution policy. For example, when to issue speculative requests\n+ * and how many speculative requests to issue.\n+ *\n+ * @since 4.5\n+ */\n public interface SpeculativeRequestExecutionPolicy {\n \n     /**"},{"sha":"0d7039b02933ce19d57f5d4718cb05ab16b47dc5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/SpeculativeRequestExecutor.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSpeculativeRequestExecutor.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -22,6 +22,14 @@\n \n import com.google.common.util.concurrent.ListenableFuture;\n \n+/**\n+ * Define an executor for issuing speculative requests.\n+ *\n+ * <p>If the implementation can issue a speculative read, it should return true\n+ * to indicate a speculative request should be issued. Otherwise, return false.\n+ *\n+ * @since 4.5\n+ */\n public interface SpeculativeRequestExecutor {\n \n     /**"},{"sha":"656c6d98ec143d6c08d916de7d2cf648040adc8a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/SynchCallbackUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSynchCallbackUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSynchCallbackUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FSynchCallbackUtils.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -24,7 +24,7 @@\n  * Utility for callbacks\n  * \n  */\n-public class SynchCallbackUtils {\n+class SynchCallbackUtils {\n \n     /**\n      * Wait for a result. This is convenience method to implement callbacks"},{"sha":"38a03b02e04c7fa5f9152d3aec0f27acda5f7896","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/WeightedRandomSelection.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -31,7 +31,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class WeightedRandomSelection<T> {\n+class WeightedRandomSelection<T> {\n     static final Logger LOG = LoggerFactory.getLogger(WeightedRandomSelection.class);\n \n     interface WeightedObject {"},{"sha":"e52a7d170e9402c1ffc71caa61171df1e3d6e6b1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/package-info.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2Fpackage-info.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,24 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+/**\n+ * BookKeeper Client.\n+ */\n+package org.apache.bookkeeper.client;\n\\ No newline at end of file"},{"sha":"40fcef66865b49f65e17ed78a95b12bc9f8d486b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/common/annotation/InterfaceAudience.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceAudience.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceAudience.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceAudience.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.common.annotation;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+\n+/**\n+ * Annotation to inform users of a package, class or method's intended audience.\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Stable\n+public class InterfaceAudience {\n+\n+    /**\n+     * Intended for use by any project or application.\n+     */\n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface Public {};\n+\n+    /**\n+     * Intended for use only within the project(s) specified in the annotation.\n+     * For example, \"distributedlog\", \"pulsar\".\n+     */\n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface LimitedPrivate {};\n+\n+    /**\n+     * Intended for use only within bookkeeper itself.\n+     */\n+    @Documented\n+    @Retention(RetentionPolicy.RUNTIME)\n+    public @interface Private {};\n+\n+    private InterfaceAudience() {} // Audience can't exist on its own\n+\n+}"},{"sha":"174afd530a4d55fec78f92bb6c42003397d87422","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/common/annotation/InterfaceStability.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceStability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceStability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2FInterfaceStability.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.common.annotation;\n+\n+import java.lang.annotation.Documented;\n+\n+/**\n+ * Annotation to inform users of how much to rely on a particular package,\n+ * class or method not changing over time.\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Stable\n+public class InterfaceStability {\n+  /**\n+   * Can evolve while retaining compatibility for minor release boundaries.;\n+   * can break compatibility only at major release (ie. at m.0).\n+   */\n+  @Documented\n+  public @interface Stable {};\n+\n+  /**\n+   * Evolving, but can break compatibility at minor release (i.e. m.x)\n+   */\n+  @Documented\n+  public @interface Evolving {};\n+\n+  /**\n+   * No guarantee is provided as to reliability or stability across any\n+   * level of release granularity.\n+   */\n+  @Documented\n+  public @interface Unstable {};\n+\n+  private InterfaceStability() {}\n+}"},{"sha":"b0fe5374245f80b61b3bcf885294801d889842b0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/common/annotation/package-info.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fannotation%2Fpackage-info.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Annotations used across the whole project.\n+ */\n+package org.apache.bookkeeper.common.annotation;"},{"sha":"23e9ae6630c6bbcd11c98d1bab23c42c2068f6b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/common/package-info.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fcommon%2Fpackage-info.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Common functions and utils used across the project.\n+ *\n+ * <p>NOTE: refactor this package to bookkeeper-common module after 4.5</p>\n+ */\n+package org.apache.bookkeeper.common;\n\\ No newline at end of file"},{"sha":"6a4dff718cad38a4138ba8b54680a52e48ca3565","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -43,8 +43,6 @@\n import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n class AuthHandler {\n     static final Logger LOG = LoggerFactory.getLogger(AuthHandler.class);"},{"sha":"b28c847b0f06f657a86317421988ec1fe8b7793f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieConnectionPeer.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieConnectionPeer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieConnectionPeer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieConnectionPeer.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -18,9 +18,7 @@\n  * under the License.\n  *\n  */\n-package org.apache.bookkeeper.bookie;\n-\n-import org.apache.bookkeeper.proto.ConnectionPeer;\n+package org.apache.bookkeeper.proto;\n \n /**\n  * Represents the connection to a BookKeeper client, from the Bookie side.","previous_filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java"},{"sha":"7dd8f6e482b8c8e91dfaa5bc4be2a61d493c806d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -68,7 +68,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n "},{"sha":"ad556f58ea64af0fc9126bdc986d3941f27cb212","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ClientConnectionPeer.java","status":"renamed","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FClientConnectionPeer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FClientConnectionPeer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FClientConnectionPeer.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -18,9 +18,7 @@\n  * under the License.\n  *\n  */\n-package org.apache.bookkeeper.client;\n-\n-import org.apache.bookkeeper.proto.ConnectionPeer;\n+package org.apache.bookkeeper.proto;\n \n /**\n  * Represents the connection to a Bookie, from the client side","previous_filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java"},{"sha":"b3dc9984212e75b25f9ae3e53d22fdc888ca34e0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":10,"deletions":18,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -19,10 +19,15 @@\n \n import static org.apache.bookkeeper.client.LedgerHandle.INVALID_ENTRY_ID;\n \n+import com.google.common.collect.Sets;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.ExtensionRegistry;\n import io.netty.bootstrap.Bootstrap;\n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.buffer.Unpooled;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n import io.netty.channel.Channel;\n import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelFutureListener;\n@@ -46,27 +51,24 @@\n import io.netty.util.HashedWheelTimer;\n import io.netty.util.Timeout;\n import io.netty.util.TimerTask;\n-\n-\n import java.io.IOException;\n+import java.net.SocketAddress;\n import java.nio.channels.ClosedChannelException;\n import java.util.ArrayDeque;\n import java.util.Collections;\n import java.util.Collection;\n+import java.util.Objects;\n import java.util.Queue;\n import java.util.Set;\n-import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n-\n+import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n-import com.google.protobuf.ByteString;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperClientStats;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n-import org.apache.bookkeeper.client.ReadLastConfirmedAndEntryOp;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -101,19 +103,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Sets;\n-import com.google.protobuf.ExtensionRegistry;\n-import io.netty.buffer.ByteBufAllocator;\n-import io.netty.buffer.UnpooledByteBufAllocator;\n-import java.net.SocketAddress;\n-\n-import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n-\n /**\n  * This class manages all details of connection to a particular bookie. It also\n  * has reconnect logic if a connection to a bookie fails.\n- *\n  */\n @Sharable\n public class PerChannelBookieClient extends ChannelInboundHandlerAdapter {\n@@ -1508,8 +1500,8 @@ void handleReadResponse(long ledgerId,\n         if (maxLAC > INVALID_ENTRY_ID && (rc.ctx instanceof ReadEntryCallbackCtx)) {\n             ((ReadEntryCallbackCtx) rc.ctx).setLastAddConfirmed(maxLAC);\n         }\n-        if (lacUpdateTimestamp > -1L && (rc.ctx instanceof ReadLastConfirmedAndEntryOp.ReadLastConfirmedAndEntryContext)) {\n-            ((ReadLastConfirmedAndEntryOp.ReadLastConfirmedAndEntryContext) rc.ctx).setLacUpdateTimestamp(lacUpdateTimestamp);\n+        if (lacUpdateTimestamp > -1L && (rc.ctx instanceof ReadLastConfirmedAndEntryContext)) {\n+            ((ReadLastConfirmedAndEntryContext) rc.ctx).setLacUpdateTimestamp(lacUpdateTimestamp);\n         }\n         rc.cb.readEntryComplete(rcToRet, ledgerId, entryId, buffer, rc.ctx);\n     }"},{"sha":"1bf3685b6c1d5b35c580e53f940de66d93f66fe6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadLastConfirmedAndEntryContext.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLastConfirmedAndEntryContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLastConfirmedAndEntryContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadLastConfirmedAndEntryContext.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import com.google.common.base.Optional;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallbackCtx;\n+\n+/**\n+ * A {@link ReadEntryCallbackCtx} for long poll read requests.\n+ */\n+public class ReadLastConfirmedAndEntryContext implements ReadEntryCallbackCtx {\n+\n+    final int bookieIndex;\n+    final BookieSocketAddress bookie;\n+    long lac = LedgerHandle.INVALID_ENTRY_ID;\n+    Optional<Long> lacUpdateTimestamp = Optional.absent();\n+\n+    public ReadLastConfirmedAndEntryContext(int bookieIndex, BookieSocketAddress bookie) {\n+        this.bookieIndex = bookieIndex;\n+        this.bookie = bookie;\n+    }\n+\n+    public int getBookieIndex() {\n+        return bookieIndex;\n+    }\n+\n+    public BookieSocketAddress getBookieAddress() {\n+        return bookie;\n+    }\n+\n+    @Override\n+    public void setLastAddConfirmed(long lac) {\n+        this.lac = lac;\n+    }\n+\n+    @Override\n+    public long getLastAddConfirmed() {\n+        return lac;\n+    }\n+\n+    public Optional<Long> getLacUpdateTimestamp() {\n+        return lacUpdateTimestamp;\n+    }\n+\n+    public void setLacUpdateTimestamp(long lacUpdateTimestamp) {\n+        this.lacUpdateTimestamp = Optional.of(lacUpdateTimestamp);\n+    }\n+\n+}"},{"sha":"d3a141542f685adf0817621480e653e0080675f6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -133,8 +133,8 @@ public ReplicationWorker(final ZooKeeper zkc,\n         this.underreplicationManager = mFactory\n                 .newLedgerUnderreplicationManager();\n         this.bkc = BookKeeper.forConfig(new ClientConfiguration(conf))\n-                .setZookeeper(zkc)\n-                .setStatsLogger(statsLogger.scope(BK_CLIENT_SCOPE))\n+                .zk(zkc)\n+                .statsLogger(statsLogger.scope(BK_CLIENT_SCOPE))\n                 .build();\n         this.admin = new BookKeeperAdmin(bkc, statsLogger);\n         this.ledgerChecker = new LedgerChecker(bkc);"},{"sha":"cb0ca23d5a19f351f501a5594eda92519227710a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLBookieAuthProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -28,7 +28,7 @@\n import org.apache.bookkeeper.auth.AuthCallbacks;\n import org.apache.bookkeeper.auth.AuthToken;\n import org.apache.bookkeeper.auth.BookieAuthProvider;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n+import org.apache.bookkeeper.proto.BookieConnectionPeer;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.slf4j.Logger;"},{"sha":"c2e9ae3f306870c58a2e5a2fd109556b842976e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLBookieAuthProviderFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -38,7 +38,7 @@\n import javax.security.sasl.RealmCallback;\n import javax.security.sasl.SaslException;\n import org.apache.bookkeeper.auth.AuthCallbacks;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n+import org.apache.bookkeeper.proto.BookieConnectionPeer;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.slf4j.Logger;"},{"sha":"69b94f33ab88b4658d121afa254344714efd1b57","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLClientAuthProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -30,7 +30,7 @@\n import org.apache.bookkeeper.auth.AuthToken;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n import org.slf4j.LoggerFactory;\n \n public class SASLClientAuthProvider implements ClientAuthProvider {"},{"sha":"c7b0f964990b9ff2e734790c328177b11f43982f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLClientProviderFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -30,7 +30,7 @@\n import javax.security.sasl.SaslException;\n import org.apache.bookkeeper.auth.AuthCallbacks;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.slf4j.LoggerFactory;"},{"sha":"62a07da8c3bebd1ca03b285d746202ca5bedc085","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fauth%2FTestAuth.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -42,8 +42,8 @@\n \n import org.junit.Test;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n-import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.BookieConnectionPeer;\n \n \n public class TestAuth extends BookKeeperClusterTestCase {"},{"sha":"75ea9c823739ce93f0f36229289d3b162c36e1d6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuthAutoRecoveryTest.java?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -34,7 +34,7 @@\n import org.slf4j.LoggerFactory;\n \n import static org.junit.Assert.*;\n-import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.proto.ClientConnectionPeer;\n \n /**\n  * This test verifies the auditor bookie scenarios from the auth point-of-view"},{"sha":"45348349d5cc99ec8e09c7333a0f84c1980f1719","filename":"bookkeeper-stats/pom.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-stats%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/bookkeeper-stats%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fpom.xml?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -66,6 +66,30 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <version>${maven-javadoc-plugin.version}</version>\n+        <configuration>\n+          <!-- Avoid for missing javadoc comments to be marked as errors -->\n+          <additionalparam>-Xdoclint:none</additionalparam>\n+          <subpackages>org.apache.bookkeeper.stats</subpackages>\n+          <groups>\n+            <group>\n+              <title>Bookkeeper Stats API</title>\n+              <packages>org.apache.bookkeeper.stats</packages>\n+            </group>\n+          </groups>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>attach-javadocs</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n   <dependencies>"},{"sha":"df266df4805b964e4ea9d6a807e2bc21d76b3e1f","filename":"pom.xml","status":"modified","additions":29,"deletions":4,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/cf2936548aa7f91e99bb53a8d53cbca567649535/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/cf2936548aa7f91e99bb53a8d53cbca567649535/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=cf2936548aa7f91e99bb53a8d53cbca567649535","patch":"@@ -104,6 +104,8 @@\n     <findbugs-maven-plugin.version>3.0.3</findbugs-maven-plugin.version>\n     <puppycrawl.checkstyle.version>6.19</puppycrawl.checkstyle.version>\n     <maven-checkstyle-plugin.version>2.17</maven-checkstyle-plugin.version>\n+    <maven-javadoc-plugin.version>2.10.4</maven-javadoc-plugin.version>\n+    <maven-source-plugin.version>2.2.1</maven-source-plugin.version>\n   </properties>\n   <build>\n     <plugins>\n@@ -158,15 +160,25 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-javadoc-plugin</artifactId>\n-        <version>2.10.3</version>\n+        <version>${maven-javadoc-plugin.version}</version>\n         <configuration>\n           <!-- Avoid for missing javadoc comments to be marked as errors -->\n           <additionalparam>-Xdoclint:none</additionalparam>\n-          <subpackages>org.apache.bookkeeper.client:org.apache.bookkeeper.conf</subpackages>\n+          <subpackages>org.apache.bookkeeper.client:org.apache.bookkeeper.common.annotation:org.apache.bookkeeper.conf:org.apache.bookkeeper.feature:org.apache.bookkeeper.stats</subpackages>\n           <groups>\n             <group>\n-              <title>Bookkeeper</title>\n-              <packages>org.apache.bookkeeper*</packages>\n+              <title>Bookkeeper Client</title>\n+              <packages>org.apache.bookkeeper.client:org.apache.bookkeeper.common.annotation:org.apache.bookkeeper.conf:org.apache.bookkeeper.feature</packages>\n+            </group>\n+            <group>\n+              <title>Bookkeeper Stats API</title>\n+              <!-- currently codahale and prometheus are placed under `stats` package unfortunately.\n+                   we might consider rename them to their own packages in future. -->\n+              <packages>org.apache.bookkeeper.stats</packages>\n+            </group>\n+            <group>\n+              <title>Bookkeeper Stats Providers</title>\n+              <packages>org.apache.bookkeeper.stats.twitter.finagle:org.apache.bookkeeper.stats.twitter.ostrich:org.apache.bookkeeper.stats.twitter.science</packages>\n             </group>\n           </groups>\n         </configuration>\n@@ -180,6 +192,19 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-source-plugin</artifactId>\n+        <version>${maven-source-plugin.version}</version>\n+        <executions>\n+          <execution>\n+            <id>attach-sources</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n         <version>2.2.1</version>"}]}