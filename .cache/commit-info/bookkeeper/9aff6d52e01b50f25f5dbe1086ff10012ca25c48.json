{"sha":"9aff6d52e01b50f25f5dbe1086ff10012ca25c48","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjlhZmY2ZDUyZTAxYjUwZjI1ZjVkYmUxMDg2ZmYxMDAxMmNhMjVjNDg=","commit":{"author":{"name":"cguttapalem","email":"cguttapalem@salesforce.com","date":"2017-07-07T06:19:57Z"},"committer":{"name":"cguttapalem","email":"cguttapalem@salesforce.com","date":"2017-07-07T06:19:57Z"},"message":"BOOKKEEPER-1033: Handle DirsPartitionDuplication\n\n- Provide configuration for allowDirsPartitionDuplication\n- while calculating total disk metrics account Partition Duplication\n\nAuthor: cguttapalem <cguttapalem@salesforce.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <guosijie@gmail.com>\n\nThis closes #189 from reddycharan/dirspartitionduplication and squashes the following commits:\n\n99fc6fc1 [cguttapalem] BOOKKEEPER-1033: Handle DirsPartitionDuplication\n1d453975 [cguttapalem] BOOKKEEPER-1033: Handle DirsPartitionDuplication","tree":{"sha":"b6d9b09654591fb6a01efbc87a376dedbc0f4d57","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/b6d9b09654591fb6a01efbc87a376dedbc0f4d57"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/9aff6d52e01b50f25f5dbe1086ff10012ca25c48","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9aff6d52e01b50f25f5dbe1086ff10012ca25c48","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9aff6d52e01b50f25f5dbe1086ff10012ca25c48","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"parents":[{"sha":"29eb420f1cca07c1a3a7748ed7fbb8a5bc54f2fa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/29eb420f1cca07c1a3a7748ed7fbb8a5bc54f2fa","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/29eb420f1cca07c1a3a7748ed7fbb8a5bc54f2fa"}],"stats":{"total":467,"additions":375,"deletions":92},"files":[{"sha":"6068ff3aef30c57e8525628dd525f5a15ba01b83","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -321,3 +321,6 @@ zkTimeout=10000\n # Minimum safe Usable size to be available in index directory for Bookie to create Index File while replaying \n # journal at the time of Bookie Start in Readonly Mode (in bytes)\n # minUsableSizeForIndexFileCreation=1073741824\n+\n+# Configure the Bookie to allow/disallow multiple ledger/index/journal directories in the same filesystem diskpartition\n+# allowMultipleDirsUnderSameDiskPartition=false"},{"sha":"769bda1a39e6a6cf014edbfcfb9cd62bd2f1de0c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":67,"deletions":13,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -41,10 +41,14 @@\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n+import java.nio.file.FileStore;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Observable;\n import java.util.Observer;\n import java.util.Set;\n@@ -57,6 +61,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.stream.Collectors;\n \n+import org.apache.bookkeeper.bookie.BookieException.DiskPartitionDuplicationException;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n@@ -82,6 +87,7 @@\n import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.mutable.MutableBoolean;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n@@ -372,6 +378,12 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 }\n                 masterCookie.writeToZooKeeper(zk, conf, zkCookie != null ? zkCookie.getVersion() : Version.NEW);\n             }\n+            \n+            List<File> ledgerDirs = ledgerDirsManager.getAllLedgerDirs();\n+            checkIfDirsOnSameDiskPartition(ledgerDirs);\n+            List<File> indexDirs = indexDirsManager.getAllLedgerDirs();\n+            checkIfDirsOnSameDiskPartition(indexDirs);\n+            checkIfDirsOnSameDiskPartition(journalDirectories);\n         } catch (KeeperException ke) {\n             LOG.error(\"Couldn't access cookie in zookeeper\", ke);\n             throw new BookieException.InvalidCookieException(ke);\n@@ -387,6 +399,52 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         }\n     }\n \n+    /**\n+     * Checks if multiple directories are in same diskpartition/filesystem/device.\n+     * If ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION config parameter is not enabled, and\n+     * if it is found that there are multiple directories in the same DiskPartition then\n+     * it will throw DiskPartitionDuplicationException.\n+     * \n+     * @param dirs dirs to validate\n+     * \n+     * @throws IOException\n+     */\n+    private void checkIfDirsOnSameDiskPartition(List<File> dirs) throws DiskPartitionDuplicationException {\n+        boolean allowDiskPartitionDuplication = conf.isAllowMultipleDirsUnderSameDiskPartition();\n+        final MutableBoolean isDuplicationFoundAndNotAllowed = new MutableBoolean(false);\n+        Map<FileStore, List<File>> fileStoreDirsMap = new HashMap<FileStore, List<File>>();\n+        for (File dir : dirs) {\n+            FileStore fileStore;\n+            try {\n+                fileStore = Files.getFileStore(dir.toPath());\n+            } catch (IOException e) {\n+                LOG.error(\"Got IOException while trying to FileStore of {}\", dir);\n+                throw new BookieException.DiskPartitionDuplicationException(e);\n+            }\n+            if (fileStoreDirsMap.containsKey(fileStore)) {\n+                fileStoreDirsMap.get(fileStore).add(dir);\n+            } else {\n+                List<File> dirsList = new ArrayList<File>();\n+                dirsList.add(dir);\n+                fileStoreDirsMap.put(fileStore, dirsList);\n+            }\n+        }\n+\n+        fileStoreDirsMap.forEach((fileStore, dirsList) -> {\n+            if (dirsList.size() > 1) {\n+                if (allowDiskPartitionDuplication) {\n+                    LOG.warn(\"Dirs: {} are in same DiskPartition/FileSystem: {}\", dirsList, fileStore);\n+                } else {\n+                    LOG.error(\"Dirs: {} are in same DiskPartition/FileSystem: {}\", dirsList, fileStore);\n+                    isDuplicationFoundAndNotAllowed.setValue(true);\n+                }\n+            }\n+        });\n+        if (isDuplicationFoundAndNotAllowed.getValue()) {\n+            throw new BookieException.DiskPartitionDuplicationException();\n+        }\n+    }\n+    \n     public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf,\n             ZooKeeper zk, List<File> journalDirectories, List<File> allLedgerDirs) throws BookieException, IOException {\n         try {\n@@ -556,12 +614,12 @@ LedgerDirsManager getIndexDirsManager() {\n         return indexDirsManager;\n     }\n \n-    public long getTotalDiskSpace() {\n-        return getLedgerDirsManager().getTotalDiskSpace();\n+    public long getTotalDiskSpace() throws IOException {\n+        return getLedgerDirsManager().getTotalDiskSpace(ledgerDirsManager.getAllLedgerDirs());\n     }\n \n-    public long getTotalFreeSpace() {\n-        return getLedgerDirsManager().getTotalFreeSpace();\n+    public long getTotalFreeSpace() throws IOException {\n+        return getLedgerDirsManager().getTotalFreeSpace(ledgerDirsManager.getAllLedgerDirs());\n     }\n \n     public static File getCurrentDirectory(File dir) {\n@@ -593,15 +651,15 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         for (File journalDirectory : conf.getJournalDirs()) {\n             this.journalDirectories.add(getCurrentDirectory(journalDirectory));\n         }\n-\n-        this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+        DiskChecker diskChecker = new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold());\n+        this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), diskChecker,\n                 statsLogger.scope(LD_LEDGER_SCOPE));\n \n         File[] idxDirs = conf.getIndexDirs();\n         if (null == idxDirs) {\n             this.indexDirsManager = this.ledgerDirsManager;\n         } else {\n-            this.indexDirsManager = new LedgerDirsManager(conf, idxDirs,\n+            this.indexDirsManager = new LedgerDirsManager(conf, idxDirs, diskChecker,\n                     statsLogger.scope(LD_INDEX_SCOPE));\n         }\n \n@@ -615,9 +673,7 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // Initialise ledgerDirMonitor. This would look through all the\n         // configured directories. When disk errors or all the ledger\n         // directories are full, would throws exception and fail bookie startup.\n-        this.ledgerMonitor = new LedgerDirsMonitor(conf, \n-                                    new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n-                                    ledgerDirsManager);\n+        this.ledgerMonitor = new LedgerDirsMonitor(conf, diskChecker, ledgerDirsManager);\n         try {\n             this.ledgerMonitor.init();\n         } catch (NoWritableLedgerDirException nle) {\n@@ -632,9 +688,7 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         if (null == idxDirs) {\n             this.idxMonitor = this.ledgerMonitor;\n         } else {\n-            this.idxMonitor = new LedgerDirsMonitor(conf, \n-                                        new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n-                                        indexDirsManager);\n+            this.idxMonitor = new LedgerDirsMonitor(conf, diskChecker, indexDirsManager);\n             try {\n                 this.idxMonitor.init();\n             } catch (NoWritableLedgerDirException nle) {"},{"sha":"a7793a3fde16e73b1cae2b46a30de4c854ab5487","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieException.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -50,6 +50,8 @@ public static BookieException create(int code) {\n             return new InvalidCookieException();\n         case Code.UpgradeException:\n             return new UpgradeException();\n+        case Code.DiskPartitionDuplicationException:\n+            return new DiskPartitionDuplicationException();\n         default:\n             return new BookieIllegalOpException();\n         }\n@@ -64,6 +66,7 @@ public interface Code {\n \n         int InvalidCookieException = -102;\n         int UpgradeException = -103;\n+        int DiskPartitionDuplicationException = -104;\n     }\n \n     public void setCode(int code) {\n@@ -92,6 +95,9 @@ public String getMessage(int code) {\n         case Code.UpgradeException:\n             err = \"Error performing an upgrade operation \";\n             break;\n+        case Code.DiskPartitionDuplicationException:\n+            err = \"Disk Partition Duplication is not allowed\";\n+            break;\n         default:\n             err = \"Invalid operation\";\n             break;\n@@ -154,4 +160,18 @@ public UpgradeException(String reason) {\n             super(Code.UpgradeException, reason);\n         }\n     }\n+    \n+    public static class DiskPartitionDuplicationException extends BookieException {\n+        public DiskPartitionDuplicationException() {\n+            super(Code.DiskPartitionDuplicationException);\n+        }\n+\n+        public DiskPartitionDuplicationException(Throwable cause) {\n+            super(Code.DiskPartitionDuplicationException, cause);\n+        }\n+\n+        public DiskPartitionDuplicationException(String reason) {\n+            super(Code.DiskPartitionDuplicationException, reason);\n+        }\n+    }\n }"},{"sha":"3469593957948728b99bded5d1ba8eb86b33b02c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -68,6 +68,10 @@\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.AuditorElector;\n+import org.apache.bookkeeper.replication.BookieLedgerIndexer;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n@@ -2219,7 +2223,8 @@ private synchronized List<Journal> getJournals() throws IOException {\n         if (null == journals) {\n             journals = Lists.newArrayListWithCapacity(bkConf.getJournalDirs().length);\n             for (File journalDir : bkConf.getJournalDirs()) {\n-                journals.add(new Journal(journalDir, bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs())));\n+                journals.add(new Journal(journalDir, bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs(),\n+                    new DiskChecker(bkConf.getDiskUsageThreshold(), bkConf.getDiskUsageWarnThreshold()))));\n             }\n         }\n         return journals;"},{"sha":"23726ca20c545f3f1d926deda0eb567ee43acc94","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.stats.Gauge;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -58,12 +59,14 @@ public class LedgerDirsManager {\n     private boolean forceGCAllowWhenNoSpace;\n     private long minUsableSizeForIndexFileCreation;\n \n-    public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n-        this(conf, dirs, NullStatsLogger.INSTANCE);\n+    private final DiskChecker diskChecker;\n+\n+    public LedgerDirsManager(ServerConfiguration conf, File[] dirs, DiskChecker diskChecker) {\n+        this(conf, dirs, diskChecker, NullStatsLogger.INSTANCE);\n     }\n \n     @VisibleForTesting\n-    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger) {\n+    LedgerDirsManager(ServerConfiguration conf, File[] dirs, DiskChecker diskChecker, StatsLogger statsLogger) {\n         this.ledgerDirectories = Arrays.asList(Bookie\n                 .getCurrentDirectories(dirs));\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n@@ -88,7 +91,10 @@ public Number getSample() {\n                 }\n             });\n         }\n+\n+        this.diskChecker = diskChecker;\n         statsLogger.registerGauge(LD_WRITABLE_DIRS, new Gauge<Number>() {\n+\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -121,29 +127,23 @@ public List<LedgerDirsListener> getListeners() {\n      * in all of the ledger directories put together.\n      *\n      * @return totalDiskSpace in bytes\n+     * @throws IOException \n      */\n-    public long getTotalFreeSpace() {\n-        long totalFreeSpace = 0;\n-        for (File dir: this.ledgerDirectories) {\n-            totalFreeSpace += dir.getFreeSpace();\n-        }\n-        return totalFreeSpace;\n+    public long getTotalFreeSpace(List<File> dirs) throws IOException {\n+        return diskChecker.getTotalFreeSpace(dirs);\n     }\n \n     /**\n      * Calculate the total amount of free space available\n      * in all of the ledger directories put together.\n      *\n      * @return freeDiskSpace in bytes\n+     * @throws IOException \n      */\n-    public long getTotalDiskSpace() {\n-        long totalDiskSpace = 0;\n-        for (File dir: this.ledgerDirectories) {\n-            totalDiskSpace += dir.getTotalSpace();\n-        }\n-        return totalDiskSpace;\n+    public long getTotalDiskSpace(List<File> dirs) throws IOException {\n+        return diskChecker.getTotalDiskSpace(dirs);\n     }\n-\n+    \n     /**\n      * Get disk usages map\n      * @return ConcurrentMap<File, Float> diskUsages"},{"sha":"81f0f64baf39e2e97470192781103890077d42ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsMonitor.java","status":"modified","additions":33,"deletions":23,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -22,6 +22,7 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.File;\n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.ConcurrentMap;\n@@ -106,32 +107,41 @@ public void run() {\n             // - Check if the total disk usage is below DiskLowWaterMarkUsageThreshold.\n             // - If So, walk through the entire list of fullfilledDirs and add them back to writableLedgerDirs list if\n             // their usage is < conf.getDiskUsageThreshold.\n-            if (hasWritableLedgerDirs || (totalDiskUsage = diskChecker.getTotalDiskUsage(ldm.getAllLedgerDirs())) < conf\n-                    .getDiskLowWaterMarkUsageThreshold()) {\n-                // Check all full-filled disk space usage\n-                for (File dir : fullfilledDirs) {\n-                    try {\n-                        diskUsages.put(dir, diskChecker.checkDir(dir));\n-                        ldm.addToWritableDirs(dir, true);\n-                    } catch (DiskErrorException e) {\n-                        // Notify disk failure to all the listeners\n-                        for (LedgerDirsListener listener : ldm.getListeners()) {\n-                            listener.diskFailed(dir);\n+            try {\n+                if (hasWritableLedgerDirs\n+                        || (totalDiskUsage = diskChecker.getTotalDiskUsage(ldm.getAllLedgerDirs())) < conf\n+                                .getDiskLowWaterMarkUsageThreshold()) {\n+                    // Check all full-filled disk space usage\n+                    for (File dir : fullfilledDirs) {\n+                        try {\n+                            diskUsages.put(dir, diskChecker.checkDir(dir));\n+                            ldm.addToWritableDirs(dir, true);\n+                        } catch (DiskErrorException e) {\n+                            // Notify disk failure to all the listeners\n+                            for (LedgerDirsListener listener : ldm.getListeners()) {\n+                                listener.diskFailed(dir);\n+                            }\n+                        } catch (DiskWarnThresholdException e) {\n+                            diskUsages.put(dir, e.getUsage());\n+                            // the full-filled dir become writable but still\n+                            // above\n+                            // warn threshold\n+                            ldm.addToWritableDirs(dir, false);\n+                        } catch (DiskOutOfSpaceException e) {\n+                            // the full-filled dir is still full-filled\n+                            diskUsages.put(dir, e.getUsage());\n                         }\n-                    } catch (DiskWarnThresholdException e) {\n-                        diskUsages.put(dir, e.getUsage());\n-                        // the full-filled dir become writable but still above\n-                        // warn threshold\n-                        ldm.addToWritableDirs(dir, false);\n-                    } catch (DiskOutOfSpaceException e) {\n-                        // the full-filled dir is still full-filled\n-                        diskUsages.put(dir, e.getUsage());\n                     }\n+                } else {\n+                    LOG.debug(\n+                            \"Current TotalDiskUsage: {} is greater than LWMThreshold: {}. So not adding any filledDir to WritableDirsList\",\n+                            totalDiskUsage, conf.getDiskLowWaterMarkUsageThreshold());\n+                }\n+            } catch (IOException ioe) {\n+                LOG.error(\"Got IOException while monitoring Dirs\", ioe);\n+                for (LedgerDirsListener listener : ldm.getListeners()) {\n+                    listener.fatalError();\n                 }\n-            } else {\n-                LOG.debug(\n-                        \"Current TotalDiskUsage: {} is greater than LWMThreshold: {}. So not adding any filledDir to WritableDirsList\",\n-                        totalDiskUsage, conf.getDiskLowWaterMarkUsageThreshold());\n             }\n             try {\n                 Thread.sleep(interval);"},{"sha":"14f656244ddb04b6b5f58946588b4bb6e94621c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -25,14 +25,16 @@\n import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.DiskChecker;\n \n /**\n  * Read Only Entry Logger\n  */\n public class ReadOnlyEntryLogger extends EntryLogger {\n \n     public ReadOnlyEntryLogger(ServerConfiguration conf) throws IOException {\n-        super(conf, new LedgerDirsManager(conf, conf.getLedgerDirs()));\n+        super(conf, new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold())));\n     }\n \n     @Override"},{"sha":"e08fab08cfd19293af2cc41b316f237721fae4dc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":31,"deletions":5,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -21,17 +21,18 @@\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n-import com.google.common.annotations.Beta;\n-\n+import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n+import org.apache.bookkeeper.bookie.LedgerStorage;\n+import org.apache.bookkeeper.bookie.SortedLedgerStorage;\n import org.apache.bookkeeper.stats.NullStatsProvider;\n import org.apache.bookkeeper.stats.StatsProvider;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n-import org.apache.bookkeeper.bookie.SortedLedgerStorage;\n import org.apache.commons.lang.StringUtils;\n \n+import com.google.common.annotations.Beta;\n+\n /**\n  * Configuration manages server-side settings\n  */\n@@ -150,6 +151,8 @@ public class ServerConfiguration extends AbstractConfiguration {\n     \n     protected final static String MIN_USABLESIZE_FOR_INDEXFILE_CREATION = \"minUsableSizeForIndexFileCreation\";\n \n+    protected final static String ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION = \"allowMultipleDirsUnderSameDiskPartition\";\n+\n     /**\n      * Construct a default configuration object\n      */\n@@ -2006,7 +2009,7 @@ public ServerConfiguration setNettyMaxFrameSizeBytes(int maxSize) {\n         super.setNettyMaxFrameSizeBytes(maxSize);\n         return this;\n     }\n-    \n+\n     /**\n      * Gets the minimum safe Usable size to be available in index directory for Bookie to create Index File while replaying \n      * journal at the time of Bookie Start in Readonly Mode (in bytes)\n@@ -2028,4 +2031,27 @@ public ServerConfiguration setMinUsableSizeForIndexFileCreation(long minUsableSi\n         this.setProperty(MIN_USABLESIZE_FOR_INDEXFILE_CREATION, Long.toString(minUsableSizeForIndexFileCreation));\n         return this;\n     }\n+\n+    /**\n+     * returns whether it is allowed to have multiple ledger/index/journal\n+     * Directories in the same filesystem diskpartition\n+     *\n+     * @return\n+     */\n+    public boolean isAllowMultipleDirsUnderSameDiskPartition() {\n+        return this.getBoolean(ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION, true);\n+    }\n+\n+    /**\n+     * Configure the Bookie to allow/disallow multiple ledger/index/journal\n+     * directories in the same filesystem diskpartition\n+     *\n+     * @param allow\n+     * \n+     * @return server configuration object.\n+     */\n+    public ServerConfiguration setAllowMultipleDirsUnderSameDiskPartition(boolean allow) {\n+        this.setProperty(ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION, allow);\n+        return this;\n+    }\n }"},{"sha":"21a780c16be5be6a5c0812568506add4f5042142","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/GetBookieInfoProcessorV3.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -20,6 +20,7 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import java.io.IOException;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.proto.BookkeeperProtocol.GetBookieInfoRequest;\n@@ -60,18 +61,21 @@ private GetBookieInfoResponse getGetBookieInfoResponse() {\n         }\n         StatusCode status = StatusCode.EOK;\n         long freeDiskSpace = 0L, totalDiskSpace = 0L;\n-        if ((requested & GetBookieInfoRequest.Flags.FREE_DISK_SPACE_VALUE) != 0) {\n-            freeDiskSpace = requestProcessor.bookie.getTotalFreeSpace();\n-            getBookieInfoResponse.setFreeDiskSpace(freeDiskSpace);\n-        }\n-        if ((requested & GetBookieInfoRequest.Flags.TOTAL_DISK_CAPACITY_VALUE) != 0) {\n-            totalDiskSpace = requestProcessor.bookie.getTotalDiskSpace();\n-            getBookieInfoResponse.setTotalDiskCapacity(totalDiskSpace);\n-        }\n-\n-        if (LOG.isDebugEnabled()) {\n+        try {\n+            if ((requested & GetBookieInfoRequest.Flags.FREE_DISK_SPACE_VALUE) != 0) {\n+                freeDiskSpace = requestProcessor.bookie.getTotalFreeSpace();\n+                getBookieInfoResponse.setFreeDiskSpace(freeDiskSpace);\n+            }\n+            if ((requested & GetBookieInfoRequest.Flags.TOTAL_DISK_CAPACITY_VALUE) != 0) {\n+                totalDiskSpace = requestProcessor.bookie.getTotalDiskSpace();\n+                getBookieInfoResponse.setTotalDiskCapacity(totalDiskSpace);\n+            }\n             LOG.debug(\"FreeDiskSpace info is \" + freeDiskSpace + \" totalDiskSpace is: \" + totalDiskSpace);\n+        } catch (IOException e) {\n+            status = StatusCode.EIO;\n+            LOG.error(\"IOException while getting  freespace/totalspace\", e);\n         }\n+\n         getBookieInfoResponse.setStatus(status);\n         requestProcessor.getBookieInfoStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n                 TimeUnit.NANOSECONDS);"},{"sha":"26610fdb5845aba59f1eaa8de92bee62c6e5beaa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":46,"deletions":8,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -20,7 +20,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.FileStore;\n+import java.nio.file.Files;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import com.google.common.annotations.VisibleForTesting;\n import org.slf4j.Logger;\n@@ -155,25 +159,59 @@ float checkDiskFull(File dir) throws DiskOutOfSpaceException, DiskWarnThresholdE\n         }\n     }\n \n+\n+    /**\n+     * Calculate the total amount of free space available\n+     * in all of the ledger directories put together.\n+     *\n+     * @return totalDiskSpace in bytes\n+     * @throws IOException \n+     */\n+    public long getTotalFreeSpace(List<File> dirs) throws IOException {\n+        long totalFreeSpace = 0;\n+        Set<FileStore> dirsFileStore = new HashSet<FileStore>();\n+        for (File dir : dirs) {\n+            FileStore fileStore = Files.getFileStore(dir.toPath());\n+            if (dirsFileStore.add(fileStore)) {\n+                totalFreeSpace += fileStore.getUsableSpace();\n+            }\n+        }\n+        return totalFreeSpace;\n+    }\n+\n+    /**\n+     * Calculate the total amount of free space available\n+     * in all of the ledger directories put together.\n+     *\n+     * @return freeDiskSpace in bytes\n+     * @throws IOException \n+     */\n+    public long getTotalDiskSpace(List<File> dirs) throws IOException {\n+        long totalDiskSpace = 0;\n+        Set<FileStore> dirsFileStore = new HashSet<FileStore>();\n+        for (File dir : dirs) {\n+            FileStore fileStore = Files.getFileStore(dir.toPath());\n+            if (dirsFileStore.add(fileStore)) {\n+                totalDiskSpace += fileStore.getTotalSpace();\n+            }\n+        }\n+        return totalDiskSpace;\n+    }\n+    \n     /**\n      * calculates and returns the disk usage factor in the provided list of dirs\n      * \n      * @param dirs\n      *            list of directories\n      * @return disk usage factor in the provided list of dirs\n+     * @throws IOException \n      */\n-    public float getTotalDiskUsage(List<File> dirs) {\n+    public float getTotalDiskUsage(List<File> dirs) throws IOException {\n         if (dirs == null || dirs.isEmpty()) {\n             throw new IllegalArgumentException(\n                     \"list argument of getTotalDiskUsage is not supposed to be null or empty\");\n         }\n-        long totalUsableSpace = 0;\n-        long totalSpace = 0;\n-        for (File dir : dirs) {\n-            totalUsableSpace += dir.getUsableSpace();\n-            totalSpace += dir.getTotalSpace();\n-        }\n-        float free = (float) totalUsableSpace / (float) totalSpace;\n+        float free = (float) getTotalFreeSpace(dirs) / (float) getTotalDiskSpace(dirs);\n         float used = 1f - free;\n         return used;\n     }"},{"sha":"41e58abcb9c25b028d88daab27119af96aef7fbb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":110,"deletions":2,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -28,6 +28,7 @@\n import java.net.BindException;\n import java.net.InetAddress;\n \n+import org.apache.bookkeeper.bookie.BookieException.DiskPartitionDuplicationException;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -42,6 +43,7 @@\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.PortManager;\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.KeeperException;\n@@ -265,7 +267,7 @@ public void testDuplicateBookieServerStartup() throws Exception {\n         File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n-        int port = 12555;\n+        int port = PortManager.nextFreePort();\n         conf.setZkServers(null).setBookiePort(port).setJournalDirName(\n                 tmpDir.getPath()).setLedgerDirNames(\n                 new String[] { tmpDir.getPath() });\n@@ -515,7 +517,8 @@ public void testWithDiskError() throws Exception {\n         try {\n             // LedgerDirsManager#init() is used in Bookie instantiation.\n             // Simulating disk errors by directly calling #init\n-            LedgerDirsManager ldm = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+            LedgerDirsManager ldm = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                    new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n             LedgerDirsMonitor ledgerMonitor = new LedgerDirsMonitor(conf, \n                     new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), ldm);\n             ledgerMonitor.init();\n@@ -525,6 +528,111 @@ public void testWithDiskError() throws Exception {\n         }\n     }\n \n+    /**\n+     * if ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION is disabled then Bookie initialization\n+     * will fail if there are multiple ledger/index/journal dirs are in same partition/filesystem.\n+     */\n+    @Test(timeout = 2000000)\n+    public void testAllowDiskPartitionDuplicationDisabled() throws Exception {\n+        File tmpDir1 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir2 = createTempDir(\"bookie\", \"test\");\n+\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        int port = PortManager.nextFreePort();\n+        // multiple ledgerdirs in same diskpartition\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setZkTimeout(5000).setBookiePort(port)\n+        .setJournalDirName(tmpDir1.getPath())\n+        .setLedgerDirNames(new String[] { tmpDir1.getPath(), tmpDir2.getPath() })\n+        .setIndexDirName(new String[] { tmpDir1.getPath()});;\n+        conf.setAllowMultipleDirsUnderSameDiskPartition(false);\n+        BookieServer bs1 = null;\n+        try {\n+            bs1 = new BookieServer(conf);\n+            Assert.fail(\"Bookkeeper should not have started since AllowMultipleDirsUnderSameDiskPartition is not enabled\");\n+        } catch (DiskPartitionDuplicationException dpde) {\n+            // Expected\n+        } finally {\n+            if (bs1 != null) {\n+                bs1.shutdown();\n+            }\n+        }\n+\n+        tmpDir1 = createTempDir(\"bookie\", \"test\");\n+        tmpDir2 = createTempDir(\"bookie\", \"test\");\n+        port = PortManager.nextFreePort();\n+        // multiple indexdirs in same diskpartition\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setZkTimeout(5000).setBookiePort(port)\n+        .setJournalDirName(tmpDir1.getPath())\n+        .setLedgerDirNames(new String[] { tmpDir1.getPath() })\n+        .setIndexDirName(new String[] { tmpDir1.getPath(), tmpDir2.getPath() });\n+        conf.setAllowMultipleDirsUnderSameDiskPartition(false);\n+        bs1 = null;\n+        try {\n+            bs1 = new BookieServer(conf);\n+            Assert.fail(\"Bookkeeper should not have started since AllowMultipleDirsUnderSameDiskPartition is not enabled\");\n+        } catch (DiskPartitionDuplicationException dpde) {\n+            // Expected\n+        } finally {\n+            if (bs1 != null) {\n+                bs1.shutdown();\n+            }\n+        }\n+\n+        tmpDir1 = createTempDir(\"bookie\", \"test\");\n+        tmpDir2 = createTempDir(\"bookie\", \"test\");\n+        port = PortManager.nextFreePort();\n+        // multiple journaldirs in same diskpartition\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setZkTimeout(5000).setBookiePort(port)\n+        .setJournalDirsName(new String[] { tmpDir1.getPath(), tmpDir2.getPath() })\n+        .setLedgerDirNames(new String[] { tmpDir1.getPath() })\n+        .setIndexDirName(new String[] { tmpDir1.getPath()});\n+        conf.setAllowMultipleDirsUnderSameDiskPartition(false);\n+        bs1 = null;\n+        try {\n+            bs1 = new BookieServer(conf);\n+            Assert.fail(\n+                    \"Bookkeeper should not have started since AllowMultipleDirsUnderSameDiskPartition is not enabled\");\n+        } catch (DiskPartitionDuplicationException dpde) {\n+            // Expected\n+        } finally {\n+            if (bs1 != null) {\n+                bs1.shutdown();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * if ALLOW_MULTIPLEDIRS_UNDER_SAME_DISKPARTITION is enabled then Bookie initialization\n+     * should succeed even if there are multiple ledger/index/journal dirs in the same diskpartition/filesystem.\n+     */\n+    @Test(timeout = 2000000)\n+    public void testAllowDiskPartitionDuplicationAllowed() throws Exception {\n+        File tmpDir1 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir2 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir3 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir4 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir5 = createTempDir(\"bookie\", \"test\");\n+        File tmpDir6 = createTempDir(\"bookie\", \"test\");\n+\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        int port = 12555;\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setZkTimeout(5000).setBookiePort(port)\n+                .setJournalDirsName(new String[] { tmpDir1.getPath(), tmpDir2.getPath() })\n+                .setLedgerDirNames(new String[] { tmpDir3.getPath(), tmpDir4.getPath() })\n+                .setIndexDirName(new String[] { tmpDir5.getPath(), tmpDir6.getPath() });\n+        conf.setAllowMultipleDirsUnderSameDiskPartition(true);\n+        BookieServer bs1 = null;\n+        try {\n+            bs1 = new BookieServer(conf);          \n+        } catch (DiskPartitionDuplicationException dpde) {\n+            Assert.fail(\"Bookkeeper should have started since AllowMultipleDirsUnderSameDiskPartition is enabled\");\n+        } finally {\n+            if (bs1 != null) {\n+                bs1.shutdown();\n+            }\n+        }\n+    }\n+    \n     private void createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");"},{"sha":"602764b4be356e7e8a1ef407e41079d81e5c2f1f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -50,6 +50,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.TestUtils;\n import org.apache.bookkeeper.versioning.Version;\n@@ -200,7 +201,8 @@ public void testForceGarbageCollection() throws Exception {\n         conf.setGcWaitTime(60000);\n         conf.setMinorCompactionInterval(120000);\n         conf.setMajorCompactionInterval(240000);\n-        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         CheckpointSource cp = new CheckpointSource() {\n             @Override\n             public Checkpoint newCheckpoint() {\n@@ -530,7 +532,8 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n             };\n         final byte[] KEY = \"foobar\".getBytes();\n         File log0 = new File(curDir, \"0.log\");\n-        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         assertFalse(\"Log shouldnt exist\", log0.exists());\n         InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n         storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n@@ -647,7 +650,8 @@ public void testWhenNoLogsToCompact() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n \n-        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         final Set<Long> ledgers = Collections\n                 .newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n         LedgerManager manager = getLedgerManager(ledgers);\n@@ -690,7 +694,8 @@ public void testSuspendGarbageCollection() throws Exception {\n         conf.setGcWaitTime(500);\n         conf.setMinorCompactionInterval(1);\n         conf.setMajorCompactionInterval(2);\n-        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         CheckpointSource cp = new CheckpointSource() {\n             @Override\n             public Checkpoint newCheckpoint() {"},{"sha":"0f8dc8653d65d134cffdccfbf2c24252b512c9a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCreateNewLogTest.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -24,6 +24,7 @@\n import org.junit.Assert;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -82,7 +83,8 @@ public void testCreateNewLog() throws Exception {\n         // Creating a new configuration with a number of \n         // ledger directories.\n         conf.setLedgerDirNames(ledgerDirs);\n-        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n         \n         // Extracted from createNewLog()\n@@ -106,7 +108,8 @@ public void testCreateNewLogWithNoWritableLedgerDirs() throws Exception {\n         // Creating a new configuration with a number of ledger directories.\n         conf.setLedgerDirNames(ledgerDirs);\n         conf.setIsForceGCAllowWhenNoSpace(true);\n-        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n \n         // Extracted from createNewLog()"},{"sha":"a8c0596f4971bc3dc00bfc4608b03feaed87a2f0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogTest.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -33,6 +33,7 @@\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n@@ -173,7 +174,8 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         EntryLogger entryLogger = null;\n         try {\n-            entryLogger = new EntryLogger(conf, new LedgerDirsManager(conf, conf.getLedgerDirs()));\n+            entryLogger = new EntryLogger(conf, new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                    new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold())));\n             fail(\"Expecting FileNotFoundException\");\n         } catch (FileNotFoundException e) {\n             assertEquals(\"Entry log directory does not exist\", e"},{"sha":"15a13ee99a523cb75cda7facea47eda436c3d0e7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -65,7 +65,8 @@ public void setUp() throws Exception {\n         conf.setJournalDirName(journalDir.getPath());\n         conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n-        ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         ledgerMonitor = new LedgerDirsMonitor(conf, \n                 new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), ledgerDirsManager);\n         ledgerMonitor.init();"},{"sha":"09869a1f32273c4125db38edf7bda1c6cf16090c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9aff6d52e01b50f25f5dbe1086ff10012ca25c48/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java?ref=9aff6d52e01b50f25f5dbe1086ff10012ca25c48","patch":"@@ -79,7 +79,8 @@ public void setUp() throws Exception {\n         conf.setIsForceGCAllowWhenNoSpace(true);\n \n         mockDiskChecker = new MockDiskChecker(threshold, warnThreshold);\n-        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         ledgerMonitor = new LedgerDirsMonitor(conf, \n                 mockDiskChecker, dirsManager);\n         ledgerMonitor.init();\n@@ -184,7 +185,8 @@ public void testLedgerDirsMonitorHandlingLowWaterMark() throws Exception {\n         conf.setDiskUsageWarnThreshold(warn);\n \n         mockDiskChecker = new MockDiskChecker(nospace, warnThreshold);\n-        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         ledgerMonitor = new LedgerDirsMonitor(conf, mockDiskChecker, dirsManager);\n         ledgerMonitor.init();\n         final MockLedgerDirsListener mockLedgerDirsListener = new MockLedgerDirsListener();\n@@ -230,7 +232,6 @@ public void testLedgerDirsMonitorHandlingWithMultipleLedgerDirectories() throws\n \n         final float nospace = 0.90f;\n         final float lwm = 0.80f;\n-        final float warn = 0.99f;\n         HashMap<File, Float> usageMap;\n \n         File tmpDir1 = createTempDir(\"bkTest\", \".dir\");\n@@ -243,11 +244,12 @@ public void testLedgerDirsMonitorHandlingWithMultipleLedgerDirectories() throws\n \n         conf.setDiskUsageThreshold(nospace);\n         conf.setDiskLowWaterMarkUsageThreshold(lwm);\n-        conf.setDiskUsageWarnThreshold(warn);\n+        conf.setDiskUsageWarnThreshold(nospace);\n         conf.setLedgerDirNames(new String[] { tmpDir1.toString(), tmpDir2.toString() });\n \n         mockDiskChecker = new MockDiskChecker(nospace, warnThreshold);\n-        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n         ledgerMonitor = new LedgerDirsMonitor(conf, mockDiskChecker, dirsManager);\n         usageMap = new HashMap<File, Float>();\n         usageMap.put(curDir1, 0.1f);"}]}