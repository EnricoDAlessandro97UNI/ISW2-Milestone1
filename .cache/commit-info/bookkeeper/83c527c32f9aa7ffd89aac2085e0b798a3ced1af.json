{"sha":"83c527c32f9aa7ffd89aac2085e0b798a3ced1af","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjgzYzUyN2MzMmY5YWE3ZmZkODlhYWMyMDg1ZTBiNzk4YTNjZWQxYWY=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-12T19:55:41Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-12T19:55:41Z"},"message":"DL-199: Be able to support filesystem-path like name\n\nIn order to support hierarchical namespace, we need to be able to support filesystem path like log name.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Jia Zhai <None>, Leigh Stewart <lstewart@apache.org>\n\nCloses #130 from sijie/DL_199","tree":{"sha":"11d2baa27bbe2c053ea1a0195fa56291465c50f9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/11d2baa27bbe2c053ea1a0195fa56291465c50f9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/83c527c32f9aa7ffd89aac2085e0b798a3ced1af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/83c527c32f9aa7ffd89aac2085e0b798a3ced1af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/83c527c32f9aa7ffd89aac2085e0b798a3ced1af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8618b21a2395834ac2a6ede41635832b9d26d03f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/8618b21a2395834ac2a6ede41635832b9d26d03f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/8618b21a2395834ac2a6ede41635832b9d26d03f"}],"stats":{"total":192,"additions":152,"deletions":40},"files":[{"sha":"adb591ff088e37993722d5a3a54d1666bcde5ba6","filename":"src/main/java/org/apache/distributedlog/BKDistributedLogNamespace.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKDistributedLogNamespace.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -49,7 +49,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static org.apache.distributedlog.namespace.NamespaceDriver.Role.WRITER;\n-import static org.apache.distributedlog.util.DLUtils.validateName;\n+import static org.apache.distributedlog.util.DLUtils.validateAndNormalizeName;\n \n /**\n  * BKDistributedLogNamespace is the default implementation of {@link DistributedLogNamespace}. It uses\n@@ -148,7 +148,7 @@ public NamespaceDriver getNamespaceDriver() {\n     public void createLog(String logName)\n             throws InvalidStreamNameException, IOException {\n         checkState();\n-        validateName(logName);\n+        logName = validateAndNormalizeName(logName);\n         URI uri = FutureUtils.result(driver.getLogMetadataStore().createLog(logName));\n         FutureUtils.result(driver.getLogStreamMetadataStore(WRITER).getLog(uri, logName, true, true));\n     }\n@@ -157,7 +157,7 @@ public void createLog(String logName)\n     public void deleteLog(String logName)\n             throws InvalidStreamNameException, LogNotFoundException, IOException {\n         checkState();\n-        validateName(logName);\n+        logName = validateAndNormalizeName(logName);\n         Optional<URI> uri = FutureUtils.result(driver.getLogMetadataStore().getLogLocation(logName));\n         if (!uri.isPresent()) {\n             throw new LogNotFoundException(\"Log \" + logName + \" isn't found.\");\n@@ -186,7 +186,7 @@ public DistributedLogManager openLog(String logName,\n                                          Optional<StatsLogger> perStreamStatsLogger)\n             throws InvalidStreamNameException, IOException {\n         checkState();\n-        validateName(logName);\n+        logName = validateAndNormalizeName(logName);\n         Optional<URI> uri = FutureUtils.result(driver.getLogMetadataStore().getLogLocation(logName));\n         if (!uri.isPresent()) {\n             throw new LogNotFoundException(\"Log \" + logName + \" isn't found.\");\n@@ -256,7 +256,7 @@ protected DistributedLogManager openLogInternal(\n         throws InvalidStreamNameException, IOException {\n         // Make sure the name is well formed\n         checkState();\n-        validateName(nameOfLogStream);\n+        nameOfLogStream = validateAndNormalizeName(nameOfLogStream);\n \n         DistributedLogConfiguration mergedConfiguration = new DistributedLogConfiguration();\n         mergedConfiguration.addConfiguration(conf);"},{"sha":"dbe5400b97545821919a93a5c43dde3291868861","filename":"src/main/java/org/apache/distributedlog/impl/BKNamespaceDriver.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fimpl%2FBKNamespaceDriver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fimpl%2FBKNamespaceDriver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fimpl%2FBKNamespaceDriver.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -74,7 +74,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static org.apache.distributedlog.util.DLUtils.isReservedStreamName;\n-import static org.apache.distributedlog.util.DLUtils.validateName;\n+import static org.apache.distributedlog.util.DLUtils.validateAndNormalizeName;\n \n /**\n  * Manager for ZooKeeper/BookKeeper based namespace\n@@ -504,7 +504,7 @@ public MetadataAccessor getMetadataAccessor(String streamName)\n             throw new UnsupportedOperationException();\n         }\n         checkState();\n-        validateName(streamName);\n+        streamName = validateAndNormalizeName(streamName);\n         return new ZKMetadataAccessor(\n                 streamName,\n                 conf,"},{"sha":"723110503dd329935c079cbd1a94936647b0f3fe","filename":"src/main/java/org/apache/distributedlog/util/DLUtils.java","status":"modified","additions":77,"deletions":29,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FDLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FDLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FDLUtils.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -281,41 +281,89 @@ public static boolean isReservedStreamName(String name) {\n     }\n \n     /**\n-     * Validate the stream name.\n+     * Validate the log name.\n      *\n-     * @param nameOfStream\n-     *          name of stream\n+     * @param logName\n+     *          name of log\n      * @throws InvalidStreamNameException\n      */\n-    public static void validateName(String nameOfStream)\n+    public static String validateAndNormalizeName(String logName)\n             throws InvalidStreamNameException {\n-        String reason = null;\n-        char chars[] = nameOfStream.toCharArray();\n-        char c;\n-        // validate the stream to see if meet zookeeper path's requirement\n-        for (int i = 0; i < chars.length; i++) {\n-            c = chars[i];\n-\n-            if (c == 0) {\n-                reason = \"null character not allowed @\" + i;\n-                break;\n-            } else if (c == '/') {\n-                reason = \"'/' not allowed @\" + i;\n-                break;\n-            } else if (c > '\\u0000' && c < '\\u001f'\n-                    || c > '\\u007f' && c < '\\u009F'\n-                    || c > '\\ud800' && c < '\\uf8ff'\n-                    || c > '\\ufff0' && c < '\\uffff') {\n-                reason = \"invalid charater @\" + i;\n-                break;\n-            }\n+        if (isReservedStreamName(logName)) {\n+            throw new InvalidStreamNameException(logName, \"Log Name is reserved\");\n         }\n-        if (null != reason) {\n-            throw new InvalidStreamNameException(nameOfStream, reason);\n+\n+        if (logName.charAt(0) == '/') {\n+            validatePathName(logName);\n+            return logName.substring(1);\n+        } else {\n+            validatePathName(\"/\" + logName);\n+            return logName;\n         }\n-        if (isReservedStreamName(nameOfStream)) {\n-            throw new InvalidStreamNameException(nameOfStream,\n-                    \"Stream Name is reserved\");\n+    }\n+\n+    private static void validatePathName(String logName) throws InvalidStreamNameException {\n+        if (logName == null) {\n+            throw new InvalidStreamNameException(\"Log name cannot be null\");\n+        } else if (logName.length() == 0) {\n+            throw new InvalidStreamNameException(\"Log name length must be > 0\");\n+        } else if (logName.charAt(0) != '/') {\n+            throw new InvalidStreamNameException(\"Log name must start with / character\");\n+        } else if (logName.length() != 1) {\n+            if (logName.charAt(logName.length() - 1) == '/') {\n+                throw new InvalidStreamNameException(\"Log name must not end with / character\");\n+            } else {\n+                String reason = null;\n+                char lastc = '/';\n+                char[] chars = logName.toCharArray();\n+\n+                for (int i = 1; i < chars.length; ++i) {\n+                    char c = chars[i];\n+                    if (c == 0) {\n+                        reason = \"null character not allowed @\" + i;\n+                        break;\n+                    }\n+\n+                    if (c == '<' || c == '>') {\n+                        reason = \"< or > specified @\" + i;\n+                        break;\n+                    }\n+\n+                    if (c == ' ') {\n+                        reason = \"empty space specified @\" + i;\n+                        break;\n+                    }\n+\n+                    if (c == '/' && lastc == '/') {\n+                        reason = \"empty node name specified @\" + i;\n+                        break;\n+                    }\n+\n+                    if (c == '.' && lastc == '.') {\n+                        if (chars[i - 2] == '/' && (i + 1 == chars.length || chars[i + 1] == '/')) {\n+                            reason = \"relative paths not allowed @\" + i;\n+                            break;\n+                        }\n+                    } else if (c == '.') {\n+                        if (chars[i - 1] == '/' && (i + 1 == chars.length || chars[i + 1] == '/')) {\n+                            reason = \"relative paths not allowed @\" + i;\n+                            break;\n+                        }\n+                    } else if (c > '\\u0000' && c < '\\u001f'\n+                        || c > '\\u007f' && c < '\\u009F'\n+                        || c > '\\ud800' && c < '\\uf8ff'\n+                        || c > '\\ufff0' && c < '\\uffff') {\n+                        reason = \"invalid character @\" + i;\n+                        break;\n+                    }\n+                    lastc = chars[i];\n+                }\n+\n+                if (reason != null) {\n+                    throw new InvalidStreamNameException(\"Invalid log name \\\"\" + logName + \"\\\" caused by \" + reason);\n+                }\n+            }\n         }\n+\n     }\n }"},{"sha":"347f041aff60a8863b2a61f4eeb91b235847b16e","filename":"src/main/java/org/apache/distributedlog/util/Utils.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FUtils.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -32,6 +32,7 @@\n import org.apache.distributedlog.DistributedLogConstants;\n import org.apache.distributedlog.ZooKeeperClient;\n import org.apache.distributedlog.exceptions.DLInterruptedException;\n+import org.apache.distributedlog.exceptions.InvalidStreamNameException;\n import org.apache.distributedlog.exceptions.ZKException;\n import org.apache.distributedlog.function.VoidFunctions;\n import org.apache.distributedlog.io.AsyncCloseable;"},{"sha":"e0f2babfee9264f039a75cc8134db6579afabc34","filename":"src/test/java/org/apache/distributedlog/TestBKDistributedLogNamespace.java","status":"modified","additions":33,"deletions":4,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestBKDistributedLogNamespace.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -52,7 +51,6 @@\n import org.slf4j.LoggerFactory;\n \n \n-import static org.hamcrest.core.IsNot.not;\n import static org.junit.Assert.*;\n \n public class TestBKDistributedLogNamespace extends TestDistributedLogBase {\n@@ -81,6 +79,37 @@ public void teardown() throws Exception {\n         zooKeeperClient.close();\n     }\n \n+    @Test(timeout = 60000)\n+    public void testCreateLogPath0() throws Exception {\n+        createLogPathTest(\"/create/log/path/\" + runtime.getMethodName());\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testCreateLogPath1() throws Exception {\n+        createLogPathTest(\"create/log/path/\" + runtime.getMethodName());\n+    }\n+\n+    private void createLogPathTest(String logName) throws Exception {\n+        URI uri = createDLMURI(\"/\" + runtime.getMethodName());\n+        ensureURICreated(zooKeeperClient.get(), uri);\n+        DistributedLogConfiguration newConf = new DistributedLogConfiguration();\n+        newConf.addConfiguration(conf);\n+        newConf.setCreateStreamIfNotExists(false);\n+        DistributedLogNamespace namespace = DistributedLogNamespaceBuilder.newBuilder()\n+                .conf(newConf).uri(uri).build();\n+        DistributedLogManager dlm = namespace.openLog(logName);\n+        LogWriter writer;\n+        try {\n+            writer = dlm.startLogSegmentNonPartitioned();\n+            writer.write(DLMTestUtil.getLogRecordInstance(1L));\n+            writer.flushAndSync();\n+            fail(\"Should fail to write data if stream doesn't exist.\");\n+        } catch (IOException ioe) {\n+            // expected\n+        }\n+        dlm.close();\n+    }\n+\n     @Test(timeout = 60000)\n     public void testCreateIfNotExists() throws Exception {\n         URI uri = createDLMURI(\"/\" + runtime.getMethodName());\n@@ -143,8 +172,8 @@ public void testInvalidStreamName() throws Exception {\n         }\n \n         try {\n-            namespace.openLog(\"/test2\");\n-            fail(\"should fail to create invalid stream /test2\");\n+            namespace.openLog(\"/ test2\");\n+            fail(\"should fail to create invalid stream / test2\");\n         } catch (InvalidStreamNameException isne) {\n             // expected\n         }"},{"sha":"92bb6f902e1be4a425dde7d1d4b517575e7c39bc","filename":"src/test/java/org/apache/distributedlog/util/TestDLUtils.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FTestDLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/83c527c32f9aa7ffd89aac2085e0b798a3ced1af/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FTestDLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FTestDLUtils.java?ref=83c527c32f9aa7ffd89aac2085e0b798a3ced1af","patch":"@@ -21,12 +21,14 @@\n import org.apache.distributedlog.DLMTestUtil;\n import org.apache.distributedlog.LogSegmentMetadata;\n import org.apache.distributedlog.LogSegmentMetadata.LogSegmentMetadataVersion;\n+import org.apache.distributedlog.exceptions.InvalidStreamNameException;\n import org.apache.distributedlog.exceptions.UnexpectedException;\n import org.junit.Test;\n \n import java.util.List;\n \n import static com.google.common.base.Charsets.UTF_8;\n+import static org.apache.distributedlog.util.DLUtils.validateAndNormalizeName;\n import static org.junit.Assert.*;\n \n /**\n@@ -270,4 +272,36 @@ public void testDeserializeInvalidLedgerId() throws Exception {\n         DLUtils.bytes2LogSegmentId(corruptedData);\n     }\n \n+    @Test(timeout = 10000)\n+    public void testValidateLogName() throws Exception {\n+        String logName = \"test-validate-log-name\";\n+        validateAndNormalizeName(logName);\n+    }\n+\n+    @Test(timeout = 10000, expected = InvalidStreamNameException.class)\n+    public void testValidateBadLogName0() throws Exception {\n+        String logName = \"  test-bad-log-name\";\n+        validateAndNormalizeName(logName);\n+    }\n+\n+    @Test(timeout = 10000, expected = InvalidStreamNameException.class)\n+    public void testValidateBadLogName1() throws Exception {\n+        String logName = \"test-bad-log-name/\";\n+        validateAndNormalizeName(logName);\n+    }\n+\n+    @Test(timeout = 10000, expected = InvalidStreamNameException.class)\n+    public void testValidateBadLogName2() throws Exception {\n+        String logName = \"../test-bad-log-name/\";\n+        validateAndNormalizeName(logName);\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void testValidateSameStreamPath() throws Exception {\n+        String logName1 = \"/test-resolve-log\";\n+        String logName2 = \"test-resolve-log\";\n+        validateAndNormalizeName(logName1);\n+        validateAndNormalizeName(logName2);\n+    }\n+\n }"}]}