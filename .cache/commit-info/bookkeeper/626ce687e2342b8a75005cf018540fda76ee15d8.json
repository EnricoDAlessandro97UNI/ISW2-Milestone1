{"sha":"626ce687e2342b8a75005cf018540fda76ee15d8","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjYyNmNlNjg3ZTIzNDJiOGE3NTAwNWNmMDE4NTQwZmRhNzZlZTE1ZDg=","commit":{"author":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-24T11:08:02Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-07-24T11:08:02Z"},"message":"Provide a minimal test case using v2wireprotocol option\n\nAdd testcases on addEntry/readEntries and basic fencing\n\nAuthor: Enrico Olivelli <eolivelli@apache.org>\n\nReviewers: Sijie Guo\n\nThis closes #273 from eolivelli/issue-272-testv2","tree":{"sha":"f975f697cc2aaf16d0ffd289784d32a733dd6c3c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f975f697cc2aaf16d0ffd289784d32a733dd6c3c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/626ce687e2342b8a75005cf018540fda76ee15d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/626ce687e2342b8a75005cf018540fda76ee15d8","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/626ce687e2342b8a75005cf018540fda76ee15d8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/626ce687e2342b8a75005cf018540fda76ee15d8/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"1c567f88d5827d6728f05adc1d478648859d3ff0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1c567f88d5827d6728f05adc1d478648859d3ff0","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1c567f88d5827d6728f05adc1d478648859d3ff0"}],"stats":{"total":46,"additions":46,"deletions":0},"files":[{"sha":"a0d64a4623cf44ec3430df8fc7268bb1cbfaa17a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/626ce687e2342b8a75005cf018540fda76ee15d8/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/626ce687e2342b8a75005cf018540fda76ee15d8/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperTest.java?ref=626ce687e2342b8a75005cf018540fda76ee15d8","patch":"@@ -651,4 +651,50 @@ public void testReadAfterLastAddConfirmed() throws Exception {\n \n         }\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testReadWriteWithV2WireProtocol() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setUseV2WireProtocol(true);\n+        int numEntries = 100;\n+        byte[] data = \"foobar\".getBytes();\n+        try (BookKeeper bkc = new BookKeeper(conf)) {\n+\n+            // basic read/write\n+            {\n+                long ledgerId;\n+                try (LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes())) {\n+                    ledgerId = lh.getId();\n+                    for (int i = 0; i < numEntries; i++) {\n+                        lh.addEntry(data);\n+                    }\n+                }\n+                try (LedgerHandle lh = bkc.openLedger(ledgerId, digestType, \"testPasswd\".getBytes())) {\n+                    assertEquals(numEntries - 1, lh.readLastConfirmed());\n+                    for (Enumeration<LedgerEntry> readEntries = lh.readEntries(0, numEntries - 1);\n+                        readEntries.hasMoreElements();) {\n+                        LedgerEntry entry = readEntries.nextElement();\n+                        assertArrayEquals(data, entry.getEntry());\n+                    }\n+                }\n+            }\n+\n+            // basic fencing\n+            {\n+                long ledgerId;\n+                try (LedgerHandle lh2 = bkc.createLedger(digestType, \"testPasswd\".getBytes())) {\n+                    ledgerId = lh2.getId();\n+                    lh2.addEntry(data);\n+                    try (LedgerHandle lh2_fence = bkc.openLedger(ledgerId, digestType, \"testPasswd\".getBytes())) {\n+                    }\n+                    try {\n+                        lh2.addEntry(data);\n+                        fail(\"ledger should be fenced\");\n+                    } catch (BKException.BKLedgerFencedException ex){\n+                    }\n+                }\n+            }\n+        }\n+    }\n }"}]}