{"sha":"9ddd9e6f9e48b03a57a2c78ec2630303abd49782","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjlkZGQ5ZTZmOWU0OGIwM2E1N2EyYzc4ZWMyNjMwMzAzYWJkNDk3ODI=","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2017-06-28T21:24:05Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-28T21:24:05Z"},"message":"BOOKKEEPER-1034: Bookie start in RO when diskfull\n\nWhen the disk is above threshold, Bookie goes to RO. If we have to restart the\nbookie, on the way back, bookie tries to create new entrylog and other files,\nwhich will fail because disk usage is above threshold,\nhence bookie refuses to come up. So with this fix we will try to start in RO\nmode if RO is enabled.\n\nAlso, if bookie has died abruptly then it may missed flushing EntryMemtable and\nIndexInMemoryPageManager. So next time when it starts when disc is full\nit is failing to create index file and it is shutting down, though we expect it\nto start in readonlymode. So Bookie should be able to create index file\nthough it has reached the diskusagethreshold, while starting the Bookie in\nReadonly Mode. But ofcourse there should be some config to safeguard when\ndisk usable space is so low.\n\nMinor fixes in shutdown logic of Bookie and Bookieserver.\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Jia Zhai <None>, Sijie Guo <sijie@apache.org>\n\nThis closes #190 from reddycharan/bookiestartinreadonlywhendiskfull","tree":{"sha":"22733b7e6ec8bf40046a47f246b8a45d022609ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/22733b7e6ec8bf40046a47f246b8a45d022609ba"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/9ddd9e6f9e48b03a57a2c78ec2630303abd49782","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9ddd9e6f9e48b03a57a2c78ec2630303abd49782","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9ddd9e6f9e48b03a57a2c78ec2630303abd49782","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"fe8ded50ed8f008457665138ec0e6a88bba67f73","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/fe8ded50ed8f008457665138ec0e6a88bba67f73","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/fe8ded50ed8f008457665138ec0e6a88bba67f73"}],"stats":{"total":351,"additions":293,"deletions":58},"files":[{"sha":"65883da0ed821c5d0a481481d2be19978e08829e","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -317,3 +317,7 @@ zkTimeout=10000\n \n # Stats Provider Class\n #statsProviderClass=org.apache.bookkeeper.stats.CodahaleMetricsProvider\n+\n+# Minimum safe Usable size to be available in index directory for Bookie to create Index File while replaying \n+# journal at the time of Bookie Start in Readonly Mode (in bytes)\n+# minUsableSizeForIndexFileCreation=1073741824"},{"sha":"789cf3325fc1a58b4cf9c0ea70ba9ee168d9b510","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":51,"deletions":29,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -22,10 +22,17 @@\n package org.apache.bookkeeper.bookie;\n \n import static com.google.common.base.Charsets.UTF_8;\n-\n-import com.google.common.util.concurrent.SettableFuture;\n-import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.Unpooled;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_RECOVERY_ADD_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.JOURNAL_SCOPE;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_INDEX_SCOPE;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_LEDGER_SCOPE;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.READ_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_STATUS;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.WRITE_BYTES;\n \n import java.io.File;\n import java.io.FileNotFoundException;\n@@ -34,21 +41,20 @@\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.stream.Collectors;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n@@ -67,6 +73,7 @@\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.util.collections.ConcurrentLongHashMap;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n@@ -81,23 +88,19 @@\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY_BYTES;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY_BYTES;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_RECOVERY_ADD_ENTRY;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_LEDGER_SCOPE;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_INDEX_SCOPE;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.READ_BYTES;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_STATUS;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.WRITE_BYTES;\n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.JOURNAL_SCOPE;\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.zookeeper.data.ACL;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.common.util.concurrent.SettableFuture;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n \n /**\n  * Implements a bookie.\n@@ -613,15 +616,33 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         this.ledgerMonitor = new LedgerDirsMonitor(conf, \n                                     new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n                                     ledgerDirsManager);\n-        this.ledgerMonitor.init();\n-        \n+        try {\n+            this.ledgerMonitor.init();\n+        } catch (NoWritableLedgerDirException nle) {\n+            // start in read-only mode if no writable dirs and read-only allowed\n+            if(!conf.isReadOnlyModeEnabled()) {\n+                throw nle;\n+            } else {\n+                this.transitionToReadOnlyMode();\n+            }\n+        }\n+\n         if (null == idxDirs) {\n             this.idxMonitor = this.ledgerMonitor;\n         } else {\n             this.idxMonitor = new LedgerDirsMonitor(conf, \n                                         new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n                                         indexDirsManager);\n-            this.idxMonitor.init();\n+            try {\n+                this.idxMonitor.init();\n+            } catch (NoWritableLedgerDirException nle) {\n+                // start in read-only mode if no writable dirs and read-only allowed\n+                if(!conf.isReadOnlyModeEnabled()) {\n+                    throw nle;\n+                } else {\n+                    this.transitionToReadOnlyMode();\n+                }\n+            }\n         }\n \n         // ZK ephemeral node for this Bookie.\n@@ -1225,9 +1246,10 @@ synchronized int shutdown(int exitCode) {\n                 if (indexDirsManager != ledgerDirsManager) {\n                     idxMonitor.shutdown();\n                 }\n-\n-                // Shutdown the ZK client\n-                if(zk != null) zk.close();\n+            }\n+            // Shutdown the ZK client\n+            if (zk != null) {\n+                zk.close();\n             }\n         } catch (InterruptedException ie) {\n             LOG.error(\"Interrupted during shutting down bookie : \", ie);"},{"sha":"81c37fde31462de864c342d7e655e23bd28060ae","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -177,7 +177,7 @@ private FileInfo putFileInfo(Long ledger, byte masterKey[], File lf, boolean cre\n      */\n     private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n                     throws NoWritableLedgerDirException {\n-        File dir = ledgerDirsManager.pickRandomWritableDir(excludedDir);\n+        File dir = ledgerDirsManager.pickRandomWritableDirForNewIndexFile(excludedDir);\n         String ledgerName = getLedgerName(ledger);\n         return new File(dir, ledgerName);\n     }"},{"sha":"66782ac924d6c826df96a18e1d3d9c93a69b56b3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":51,"deletions":19,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -56,6 +56,7 @@ public class LedgerDirsManager {\n             new ConcurrentHashMap<File, Float>();\n     private final long entryLogSize;\n     private boolean forceGCAllowWhenNoSpace;\n+    private long minUsableSizeForIndexFileCreation;\n \n     public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this(conf, dirs, NullStatsLogger.INSTANCE);\n@@ -70,6 +71,7 @@ public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this.listeners = new ArrayList<LedgerDirsListener>();\n         this.forceGCAllowWhenNoSpace = conf.getIsForceGCAllowWhenNoSpace();\n         this.entryLogSize = conf.getEntryLogSizeLimit();\n+        this.minUsableSizeForIndexFileCreation = conf.getMinUsableSizeForIndexFileCreation();\n         for (File dir : dirs) {\n             diskUsages.put(dir, 0f);\n             String statName = \"dir_\" + dir.getPath().replace('/', '_') + \"_usage\";\n@@ -172,9 +174,7 @@ public boolean hasWritableLedgerDirs() {\n         return !writableLedgerDirectories.isEmpty();\n     }\n \n-    public List<File> getWritableLedgerDirsForNewLog()\n-        throws NoWritableLedgerDirException {\n-\n+    public List<File> getWritableLedgerDirsForNewLog() throws NoWritableLedgerDirException {\n         if (!writableLedgerDirectories.isEmpty()) {\n             return writableLedgerDirectories;\n         }\n@@ -191,27 +191,32 @@ public List<File> getWritableLedgerDirsForNewLog()\n         // That means we must have turned readonly but the compaction\n         // must have started running and it needs to allocate\n         // a new log file to move forward with the compaction.\n-        List<File> fullLedgerDirsToAccomodateNewEntryLog = new ArrayList<File>();\n+        return getDirsAboveUsableThresholdSize((long) (this.entryLogSize * 1.2));\n+    }\n+\n+    List<File> getDirsAboveUsableThresholdSize(long thresholdSize) throws NoWritableLedgerDirException {\n+        List<File> fullLedgerDirsToAccomodate = new ArrayList<File>();\n         for (File dir: this.ledgerDirectories) {\n-            // Pick dirs which can accommodate little more than an entry log.\n-            if (dir.getUsableSpace() > (this.entryLogSize * 1.2) ) {\n-                fullLedgerDirsToAccomodateNewEntryLog.add(dir);\n+            // Pick dirs which can accommodate little more than thresholdSize\n+            if (dir.getUsableSpace() > (thresholdSize) ) {\n+                fullLedgerDirsToAccomodate.add(dir);\n             }\n         }\n \n-        if (!fullLedgerDirsToAccomodateNewEntryLog.isEmpty()) {\n-            LOG.info(\"No writable ledger dirs. Trying to go beyond to accomodate compaction.\"\n-                    + \"Dirs that can accomodate new entryLog are: {}\", fullLedgerDirsToAccomodateNewEntryLog);\n-            return fullLedgerDirsToAccomodateNewEntryLog;\n+        if (!fullLedgerDirsToAccomodate.isEmpty()) {\n+            LOG.info(\"No writable ledger dirs below diskUsageThreshold. \"\n+                    + \"But Dirs that can accomodate {} are: {}\", thresholdSize, fullLedgerDirsToAccomodate);\n+            return fullLedgerDirsToAccomodate;\n         }\n \n-        // We will reach here when we have no option of creating a new log file for compaction\n-        String errMsg = \"All ledger directories are non writable and no reserved space left for creating entry log file.\";\n+        // We will reach here when we find no ledgerDir which has atleast\n+        // thresholdSize usable space\n+        String errMsg = \"All ledger directories are non writable and no reserved space (\" + thresholdSize + \") left.\";\n         NoWritableLedgerDirException e = new NoWritableLedgerDirException(errMsg);\n         LOG.error(errMsg, e);\n         throw e;\n     }\n-\n+    \n     /**\n      * @return full-filled ledger dirs.\n      */\n@@ -294,20 +299,47 @@ File pickRandomWritableDir() throws NoWritableLedgerDirException {\n      */\n     File pickRandomWritableDir(File excludedDir) throws NoWritableLedgerDirException {\n         List<File> writableDirs = getWritableLedgerDirs();\n+        return pickRandomDir(writableDirs, excludedDir);\n+    }\n \n-        final int start = rand.nextInt(writableDirs.size());\n+    /**\n+     * Pick up a dir randomly from writableLedgerDirectories. If writableLedgerDirectories is empty\n+     * then pick up a dir randomly from the ledger/indexdirs which have usable space more than\n+     * minUsableSizeForIndexFileCreation.\n+     * \n+     * @param excludedDir\n+     *          The directory to exclude during pickup.\n+     * @return\n+     * @throws NoWritableLedgerDirException if there is no dir available.\n+     */\n+    File pickRandomWritableDirForNewIndexFile(File excludedDir) throws NoWritableLedgerDirException {\n+        final List<File> writableDirsForNewIndexFile;\n+        if (!writableLedgerDirectories.isEmpty()) {\n+            writableDirsForNewIndexFile = writableLedgerDirectories;\n+        } else {\n+            // We don't have writable Index Dirs.\n+            // That means we must have turned readonly. But \n+            // during the Bookie restart, while replaying the journal there might be a need \n+            // to create new Index file and it should proceed.\n+            writableDirsForNewIndexFile = getDirsAboveUsableThresholdSize(minUsableSizeForIndexFileCreation);\n+        }\n+        return pickRandomDir(writableDirsForNewIndexFile, excludedDir);\n+    }\n+    \n+    File pickRandomDir(List<File> dirs, File excludedDir) throws NoWritableLedgerDirException{\n+        final int start = rand.nextInt(dirs.size());\n         int idx = start;\n-        File candidate = writableDirs.get(idx);\n+        File candidate = dirs.get(idx);\n         while (null != excludedDir && excludedDir.equals(candidate)) {\n-            idx = (idx + 1) % writableDirs.size();\n+            idx = (idx + 1) % dirs.size();\n             if (idx == start) {\n                 // after searching all available dirs,\n                 // no writable dir is found\n                 throw new NoWritableLedgerDirException(\"No writable directories found from \"\n-                        + \" available writable dirs (\" + writableDirs + \") : exclude dir \"\n+                        + \" available writable dirs (\" + dirs + \") : exclude dir \"\n                         + excludedDir);\n             }\n-            candidate = writableDirs.get(idx);\n+            candidate = dirs.get(idx);\n         }\n         return candidate;\n     }"},{"sha":"28952f2d6c507bf9d30a73bda5a795d7a7f7e32d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -142,6 +142,8 @@ public class ServerConfiguration extends AbstractConfiguration {\n \n     // Bookie auth provider factory class name\n     protected final static String BOOKIE_AUTH_PROVIDER_FACTORY_CLASS = \"bookieAuthProviderFactoryClass\";\n+    \n+    protected final static String MIN_USABLESIZE_FOR_INDEXFILE_CREATION = \"minUsableSizeForIndexFileCreation\";\n \n     /**\n      * Construct a default configuration object\n@@ -1939,4 +1941,26 @@ public ServerConfiguration setNettyMaxFrameSizeBytes(int maxSize) {\n         super.setNettyMaxFrameSizeBytes(maxSize);\n         return this;\n     }\n+    \n+    /**\n+     * Gets the minimum safe Usable size to be available in index directory for Bookie to create Index File while replaying \n+     * journal at the time of Bookie Start in Readonly Mode (in bytes)\n+     * \n+     * @return\n+     */\n+    public long getMinUsableSizeForIndexFileCreation() {\n+        return this.getLong(MIN_USABLESIZE_FOR_INDEXFILE_CREATION, 100 * 1024 * 1024L);\n+    }\n+\n+    /**\n+     * Sets the minimum safe Usable size to be available in index directory for Bookie to create Index File while replaying \n+     * journal at the time of Bookie Start in Readonly Mode (in bytes)\n+     * \n+     * @param minUsableSizeForIndexFileCreation\n+     * @return\n+     */\n+    public ServerConfiguration setMinUsableSizeForIndexFileCreation(long minUsableSizeForIndexFileCreation) {\n+        this.setProperty(MIN_USABLESIZE_FOR_INDEXFILE_CREATION, Long.toString(minUsableSizeForIndexFileCreation));\n+        return this;\n+    }\n }"},{"sha":"42a2bb16445f5abdd6b831a846824ca66b92dd52","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -161,11 +161,11 @@ public void resumeProcessing() {\n     }\n \n     public synchronized void shutdown() {\n+        LOG.info(\"Shutting down BookieServer\");\n+        this.nettyServer.shutdown();\n         if (!running) {\n             return;\n         }\n-        LOG.info(\"Shutting down BookieServer\");\n-        this.nettyServer.shutdown();\n         exitCode = bookie.shutdown();\n         if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n             this.autoRecoveryMain.shutdown();"},{"sha":"b3e6ca9e18be9eb448efde09f7efddf0daf3718c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":160,"deletions":7,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9ddd9e6f9e48b03a57a2c78ec2630303abd49782/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=9ddd9e6f9e48b03a57a2c78ec2630303abd49782","patch":"@@ -20,18 +20,27 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.IOException;\n import java.net.BindException;\n import java.net.InetAddress;\n \n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n@@ -327,25 +336,169 @@ public void testStartBookieWithoutZKInitialized() throws Exception {\n     }\n \n     /**\n-     * Check disk full. Expected to throw NoWritableLedgerDirException\n-     * during bookie initialisation.\n+     * Check disk full. Expected to fail on start.\n      */\n     @Test(timeout = 30000)\n-    public void testWithDiskFull() throws Exception {\n+    public void testWithDiskFullReadOnlyDisabledOrForceGCAllowDisabled() throws Exception {\n         File tmpDir = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = tmpDir.getUsableSpace();\n         long totalSpace = tmpDir.getTotalSpace();\n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n-                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n-        conf.setDiskUsageThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n-        conf.setDiskUsageWarnThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.25f);\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() })\n+                .setDiskCheckInterval(1000)\n+                .setDiskUsageThreshold((1.0f - ((float) usableSpace / (float) totalSpace)) * 0.999f)\n+                .setDiskUsageWarnThreshold(0.0f);\n+        \n+        // if isForceGCAllowWhenNoSpace or readOnlyModeEnabled is not set and Bookie is \n+        // started when Disk is full, then it will fail to start with NoWritableLedgerDirException\n+        \n+        conf.setIsForceGCAllowWhenNoSpace(false)\n+            .setReadOnlyModeEnabled(false);\n         try {\n             new Bookie(conf);\n-        } catch (Exception e) {\n+            fail(\"NoWritableLedgerDirException expected\");\n+        } catch(NoWritableLedgerDirException e) {\n+            // expected\n+        }\n+        \n+        conf.setIsForceGCAllowWhenNoSpace(true)\n+            .setReadOnlyModeEnabled(false);\n+        try {\n+            new Bookie(conf);\n+            fail(\"NoWritableLedgerDirException expected\");\n+        } catch(NoWritableLedgerDirException e) {\n             // expected\n         }\n+        \n+        conf.setIsForceGCAllowWhenNoSpace(false)\n+            .setReadOnlyModeEnabled(true);\n+        try {\n+            new Bookie(conf);\n+            fail(\"NoWritableLedgerDirException expected\");\n+        } catch(NoWritableLedgerDirException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Check disk full. Expected to start as read-only.\n+     */\n+    @Test(timeout = 30000)\n+    public void testWithDiskFullReadOnlyEnabledAndForceGCAllowAllowed() throws Exception {\n+        File tmpDir = createTempDir(\"DiskCheck\", \"test\");\n+        long usableSpace = tmpDir.getUsableSpace();\n+        long totalSpace = tmpDir.getTotalSpace();\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() })\n+                .setDiskCheckInterval(1000)\n+                .setDiskUsageThreshold((1.0f - ((float) usableSpace / (float) totalSpace)) * 0.999f)\n+                .setDiskUsageWarnThreshold(0.0f);\n+        \n+        // if isForceGCAllowWhenNoSpace and readOnlyModeEnabled are set, then Bookie should\n+        // start with readonlymode when Disk is full (assuming there is no need for creation of index file\n+        // while replaying the journal)\n+        conf.setReadOnlyModeEnabled(true)\n+            .setIsForceGCAllowWhenNoSpace(true);\n+        final Bookie bk = new Bookie(conf);\n+        bk.start();\n+        Thread.sleep((conf.getDiskCheckInterval() * 2) + 100);\n+        \n+        assertTrue(bk.isReadOnly());\n+        bk.shutdown();\n+    }\n+\n+    class MockBookieServer extends BookieServer {\n+        ServerConfiguration conf;\n+\n+        public MockBookieServer(ServerConfiguration conf) throws IOException, KeeperException, InterruptedException,\n+                BookieException, UnavailableException, CompatibilityException {\n+            super(conf);\n+            this.conf = conf;\n+        }\n+\n+        @Override\n+        protected Bookie newBookie(ServerConfiguration conf)\n+                throws IOException, KeeperException, InterruptedException, BookieException {\n+            return new MockBookieWithNoopShutdown(conf, NullStatsLogger.INSTANCE);\n+        }\n+    }\n+\n+    class MockBookieWithNoopShutdown extends Bookie {\n+        public MockBookieWithNoopShutdown(ServerConfiguration conf, StatsLogger statsLogger)\n+                throws IOException, KeeperException, InterruptedException, BookieException {\n+            super(conf, statsLogger);\n+        }\n+\n+        // making Bookie Shutdown no-op. Ideally for this testcase we need to\n+        // kill bookie abruptly to simulate the scenario where bookie is killed\n+        // without execution of shutdownhook (and corresponding shutdown logic).\n+        // Since there is no easy way to simulate abrupt kill of Bookie we are\n+        // injecting noop Bookie Shutdown\n+        @Override\n+        synchronized int shutdown(int exitCode) {\n+            return exitCode;\n+        }\n+    }\n+    \n+    @Test(timeout = 30000)\n+    public void testWithDiskFullAndAbilityToCreateNewIndexFile() throws Exception {\n+        File tmpDir = createTempDir(\"DiskCheck\", \"test\");\n+\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString()).setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() }).setDiskCheckInterval(1000)\n+                .setLedgerStorageClass(SortedLedgerStorage.class.getName()).setAutoRecoveryDaemonEnabled(false);\n+\n+        BookieServer server = new MockBookieServer(conf);\n+        server.start();\n+        ClientConfiguration clientConf = new ClientConfiguration();\n+        clientConf.setZkServers(zkUtil.getZooKeeperConnectString());\n+        BookKeeper bkClient = new BookKeeper(clientConf);\n+        LedgerHandle lh = bkClient.createLedger(1, 1, 1, DigestType.CRC32, \"passwd\".getBytes());\n+        long entryId = -1;\n+        long numOfEntries = 5;\n+        for (int i = 0; i < numOfEntries; i++) {\n+            entryId = lh.addEntry(\"data\".getBytes());\n+        }\n+        Assert.assertTrue(\"EntryId of the recently added entry should be 0\", entryId == (numOfEntries - 1));\n+        // We want to simulate the scenario where Bookie is killed abruptly, so\n+        // SortedLedgerStorage's EntryMemTable and IndexInMemoryPageManager are\n+        // not flushed and hence when bookie is restarted it will replay the\n+        // journal. Since there is no easy way to kill the Bookie abruptly, we\n+        // are injecting no-op shutdown.\n+        server.shutdown();\n+\n+        long usableSpace = tmpDir.getUsableSpace();\n+        long totalSpace = tmpDir.getTotalSpace();\n+        conf.setDiskUsageThreshold((1.0f - ((float) usableSpace / (float) totalSpace)) * 0.999f)\n+                .setDiskUsageWarnThreshold(0.0f).setReadOnlyModeEnabled(true).setIsForceGCAllowWhenNoSpace(true)\n+                .setMinUsableSizeForIndexFileCreation(Long.MAX_VALUE);\n+        server = new BookieServer(conf);\n+        // Now we are trying to start the Bookie, which tries to replay the\n+        // Journal. While replaying the Journal it tries to create the IndexFile\n+        // for the ledger (whose entries are not flushed). but since we set\n+        // minUsableSizeForIndexFileCreation to very high value, it wouldn't. be\n+        // able to find any index dir when all discs are full\n+        server.start();\n+        Assert.assertFalse(\"Bookie should be Shutdown\", server.getBookie().isRunning());\n+        server.shutdown();\n+\n+        // Here we are setting MinUsableSizeForIndexFileCreation to very low\n+        // value. So if index dirs are full then it will consider the dirs which\n+        // have atleast MinUsableSizeForIndexFileCreation usable space for the\n+        // creation of new Index file.\n+        conf.setMinUsableSizeForIndexFileCreation(5 * 1024);\n+        server = new BookieServer(conf);\n+        server.start();\n+        Thread.sleep((conf.getDiskCheckInterval() * 2) + 100);\n+        Assert.assertTrue(\"Bookie should be up and running\", server.getBookie().isRunning());\n+        assertTrue(server.getBookie().isReadOnly());\n+        server.shutdown();\n+        bkClient.close();\n     }\n \n     /**"}]}