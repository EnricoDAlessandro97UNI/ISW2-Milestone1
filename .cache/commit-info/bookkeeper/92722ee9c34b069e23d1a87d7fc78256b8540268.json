{"sha":"92722ee9c34b069e23d1a87d7fc78256b8540268","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjkyNzIyZWU5YzM0YjA2OWUyM2QxYTg3ZDdmYzc4MjU2Yjg1NDAyNjg=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-01-26T21:11:04Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-01-26T21:11:04Z"},"message":"BOOKKEEPER-855: handle session expire event in bookie (sijie)\n\nThis change is to retry bookie registration when zookeeper session expired.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Ivan Kelly <ivank@apache.org>, Matteo Merli <mmerli@apache.org>\n\nCloses #1 from sijie/sijie/BOOKKEEPER-855","tree":{"sha":"326589376eb95680d026897e16fe52e812808f11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/326589376eb95680d026897e16fe52e812808f11"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/92722ee9c34b069e23d1a87d7fc78256b8540268","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/92722ee9c34b069e23d1a87d7fc78256b8540268","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/92722ee9c34b069e23d1a87d7fc78256b8540268","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/92722ee9c34b069e23d1a87d7fc78256b8540268/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"19160e44d3d6814127e35f9a2c1062bcae57213f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/19160e44d3d6814127e35f9a2c1062bcae57213f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/19160e44d3d6814127e35f9a2c1062bcae57213f"}],"stats":{"total":421,"additions":312,"deletions":109},"files":[{"sha":"74876ff109f2d49f92c242afff8c3c317e2a9c10","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":106,"deletions":32,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -34,14 +34,18 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n@@ -61,12 +65,10 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -119,6 +121,7 @@ public class Bookie extends BookieCriticalThread {\n \n     // ZK registration path for this bookie\n     protected final String bookieRegistrationPath;\n+    protected final String bookieReadonlyRegistrationPath;\n \n     private final LedgerDirsManager ledgerDirsManager;\n     private LedgerDirsManager indexDirsManager;\n@@ -142,7 +145,11 @@ public class Bookie extends BookieCriticalThread {\n     final protected String zkBookieRegPath;\n     final protected String zkBookieReadOnlyPath;\n \n+    final private AtomicBoolean zkRegistered = new AtomicBoolean(false);\n     final protected AtomicBoolean readOnly = new AtomicBoolean(false);\n+    // executor to manage the state changes for a bookie.\n+    final ExecutorService stateService = Executors.newSingleThreadExecutor(\n+            new ThreadFactoryBuilder().setNameFormat(\"BookieStateService-%d\").build());\n \n     // Expose Stats\n     private final Counter writeBytes;\n@@ -468,6 +475,8 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n+        this.bookieReadonlyRegistrationPath =\n+            this.bookieRegistrationPath + BookKeeperConstants.READONLY;\n         this.conf = conf;\n         this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n         this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n@@ -512,7 +521,7 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // ZK ephemeral node for this Bookie.\n         String myID = getMyId();\n         zkBookieRegPath = this.bookieRegistrationPath + myID;\n-        zkBookieReadOnlyPath = this.bookieRegistrationPath + BookKeeperConstants.READONLY + \"/\" + myID;\n+        zkBookieReadOnlyPath = this.bookieReadonlyRegistrationPath + \"/\" + myID;\n \n         // Expose Stats\n         writeBytes = statsLogger.getCounter(WRITE_BYTES);\n@@ -522,7 +531,7 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         readEntryStats = statsLogger.getOpStatsLogger(BOOKIE_READ_ENTRY);\n         addBytesStats = statsLogger.getOpStatsLogger(BOOKIE_ADD_ENTRY_BYTES);\n         readBytesStats = statsLogger.getOpStatsLogger(BOOKIE_READ_ENTRY_BYTES);\n-        // 1 : up, 0 : readonly\n+        // 1 : up, 0 : readonly, -1 : unregistered\n         statsLogger.registerGauge(SERVER_STATUS, new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n@@ -531,7 +540,7 @@ public Number getDefaultValue() {\n \n             @Override\n             public Number getSample() {\n-                return readOnly.get() ? 0 : 1;\n+                return zkRegistered.get() ? (readOnly.get() ? 0 : 1) : -1;\n             }\n         });\n     }\n@@ -541,6 +550,7 @@ private String getMyId() throws UnknownHostException {\n     }\n \n     void readJournal() throws IOException, BookieException {\n+        long startTs = MathUtils.now();\n         journal.replay(new JournalScanner() {\n             @Override\n             public void process(int journalVersion, long offset, ByteBuffer recBuff) throws IOException {\n@@ -590,6 +600,8 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                 }\n             }\n         });\n+        long elapsedTs = MathUtils.now() - startTs;\n+        LOG.info(\"Finished replaying journal in {} ms.\", elapsedTs);\n     }\n \n     @Override\n@@ -632,9 +644,9 @@ synchronized public void start() {\n         // if setting it in bookie thread, the watcher might run before bookie thread.\n         running = true;\n         try {\n-            registerBookie(conf);\n-        } catch (IOException e) {\n-            LOG.error(\"Couldn't register bookie with zookeeper, shutting down\", e);\n+            registerBookie(true).get();\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't register bookie with zookeeper, shutting down : \", e);\n             shutdown(ExitCode.ZK_REG_FAIL);\n         }\n     }\n@@ -800,19 +812,46 @@ public void process(WatchedEvent event) {\n     /**\n      * Register as an available bookie\n      */\n-    protected void registerBookie(ServerConfiguration conf) throws IOException {\n+    protected Future<Void> registerBookie(final boolean throwException) {\n+        return stateService.submit(new Callable<Void>() {\n+            @Override\n+            public Void call() throws IOException {\n+                try {\n+                    doRegisterBookie();\n+                } catch (IOException ioe) {\n+                    if (throwException) {\n+                        throw ioe;\n+                    } else {\n+                        LOG.error(\"Couldn't register bookie with zookeeper, shutting down : \", ioe);\n+                        triggerBookieShutdown(ExitCode.ZK_REG_FAIL);\n+                    }\n+                }\n+                return (Void)null;\n+            }\n+        });\n+    }\n+\n+    protected void doRegisterBookie() throws IOException {\n+        doRegisterBookie(readOnly.get() ? zkBookieReadOnlyPath : zkBookieRegPath);\n+    }\n+\n+    private void doRegisterBookie(final String regPath) throws IOException {\n         if (null == zk) {\n             // zookeeper instance is null, means not register itself to zk\n             return;\n         }\n \n+        zkRegistered.set(false);\n+\n         // ZK ephemeral node for this Bookie.\n         try{\n-            if (!checkRegNodeAndWaitExpired(zkBookieRegPath)) {\n+            if (!checkRegNodeAndWaitExpired(regPath)) {\n                 // Create the ZK ephemeral node for this Bookie.\n-                zk.create(zkBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                zk.create(regPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                         CreateMode.EPHEMERAL);\n+                LOG.info(\"Registered myself in ZooKeeper at {}.\", regPath);\n             }\n+            zkRegistered.set(true);\n         } catch (KeeperException ke) {\n             LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", ke);\n             // Throw an IOException back up. This will cause the Bookie\n@@ -832,14 +871,31 @@ protected void registerBookie(ServerConfiguration conf) throws IOException {\n     /**\n      * Transition the bookie from readOnly mode to writable\n      */\n+    private Future<Void> transitionToWritableMode() {\n+        return stateService.submit(new Callable<Void>() {\n+            @Override\n+            public Void call() throws Exception {\n+                doTransitionToWritableMode();\n+                return null;\n+            }\n+        });\n+    }\n+\n     @VisibleForTesting\n-    public void transitionToWritableMode() {\n+    public void doTransitionToWritableMode() {\n+        if (shuttingdown) {\n+            return;\n+        }\n         if (!readOnly.compareAndSet(true, false)) {\n             return;\n         }\n         LOG.info(\"Transitioning Bookie to Writable mode and will serve read/write requests.\");\n+        // change zookeeper state only when using zookeeper\n+        if (null == zk) {\n+            return;\n+        }\n         try {\n-            this.registerBookie(conf);\n+            doRegisterBookie(zkBookieRegPath);\n         } catch (IOException e) {\n             LOG.warn(\"Error in transitioning back to writable mode : \", e);\n             transitionToReadOnlyMode();\n@@ -863,12 +919,21 @@ public void transitionToWritableMode() {\n     /**\n      * Transition the bookie to readOnly mode\n      */\n+    private Future<Void> transitionToReadOnlyMode() {\n+        return stateService.submit(new Callable<Void>() {\n+            @Override\n+            public Void call() {\n+                doTransitionToReadOnlyMode();\n+                return (Void)null;\n+            }\n+        });\n+    }\n+\n     @VisibleForTesting\n-    public void transitionToReadOnlyMode() {\n+    public void doTransitionToReadOnlyMode() {\n         if (shuttingdown) {\n             return;\n         }\n-\n         if (!readOnly.compareAndSet(false, true)) {\n             return;\n         }\n@@ -882,22 +947,20 @@ public void transitionToReadOnlyMode() {\n         }\n         LOG.info(\"Transitioning Bookie to ReadOnly mode,\"\n                 + \" and will serve only read requests from clients!\");\n+        // change zookeeper state only when using zookeeper\n+        if (null == zk) {\n+            return;\n+        }\n         try {\n-            if (null == zk.exists(this.bookieRegistrationPath\n-                    + BookKeeperConstants.READONLY, false)) {\n+            if (null == zk.exists(this.bookieReadonlyRegistrationPath, false)) {\n                 try {\n-                    zk.create(this.bookieRegistrationPath\n-                            + BookKeeperConstants.READONLY, new byte[0],\n-                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                    zk.create(this.bookieReadonlyRegistrationPath, new byte[0],\n+                              Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                 } catch (NodeExistsException e) {\n                     // this node is just now created by someone.\n                 }\n             }\n-            if (!checkRegNodeAndWaitExpired(zkBookieReadOnlyPath)) {\n-                // Create the readonly node\n-                zk.create(zkBookieReadOnlyPath,\n-                        new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-            }\n+            doRegisterBookie(zkBookieReadOnlyPath);\n             try {\n                 // Clear the current registered node\n                 zk.delete(zkBookieRegPath, -1);\n@@ -948,25 +1011,31 @@ public boolean isReadOnly() {\n      *\n      * @return zk client instance\n      */\n-    private ZooKeeper newZookeeper(ServerConfiguration conf) throws IOException, InterruptedException,\n-            KeeperException {\n+    private ZooKeeper newZookeeper(final ServerConfiguration conf)\n+            throws IOException, InterruptedException, KeeperException {\n         Set<Watcher> watchers = new HashSet<Watcher>();\n         watchers.add(new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n+                if (!running) {\n+                    // do nothing until first registration\n+                    return;\n+                }\n                 // Check for expired connection.\n-                if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n-                    LOG.error(\"ZK client connection to the ZK server has expired!\");\n-                    shutdown(ExitCode.ZK_EXPIRED);\n+                if (event.getType().equals(EventType.None) &&\n+                    event.getState().equals(KeeperState.Expired)) {\n+                    zkRegistered.set(false);\n+                    // schedule a re-register operation\n+                    registerBookie(false);\n                 }\n             }\n         });\n         return ZooKeeperClient.newBuilder()\n                 .connectString(conf.getZkServers())\n                 .sessionTimeoutMs(conf.getZkTimeout())\n                 .watchers(watchers)\n-                .operationRetryPolicy(new BoundExponentialBackoffRetryPolicy(conf.getZkTimeout(),\n-                        conf.getZkTimeout(), Integer.MAX_VALUE))\n+                .operationRetryPolicy(new BoundExponentialBackoffRetryPolicy(conf.getZkRetryBackoffStartMs(),\n+                        conf.getZkRetryBackoffMaxMs(), Integer.MAX_VALUE))\n                 .build();\n     }\n \n@@ -982,7 +1051,9 @@ public void run() {\n             journal.start();\n             // wait until journal quits\n             journal.join();\n+            LOG.info(\"Journal thread quits.\");\n         } catch (InterruptedException ie) {\n+            LOG.warn(\"Interrupted on running journal thread : \", ie);\n         }\n         // if the journal thread quits due to shutting down, it is ok\n         if (!shuttingdown) {\n@@ -1033,6 +1104,9 @@ synchronized int shutdown(int exitCode) {\n                 // mark bookie as in shutting down progress\n                 shuttingdown = true;\n \n+                // Shutdown the state service\n+                stateService.shutdown();\n+\n                 // Shutdown journal\n                 journal.shutdown();\n                 this.join();"},{"sha":"8b42029116418bca357d2cda753f6862e72c9d25","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyBookie.java","status":"modified","additions":6,"deletions":60,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -25,16 +25,10 @@\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.KeeperException.NodeExistsException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.annotations.VisibleForTesting;\n-\n /**\n  * Implements a read only bookie.\n  * \n@@ -55,66 +49,18 @@ public ReadOnlyBookie(ServerConfiguration conf, StatsLogger statsLogger)\n             LOG.error(err);\n             throw new IOException(err);\n         }\n-        LOG.info(\"successed call ReadOnlyBookie constructor\");\n-    }\n-\n-    /**\n-     * Register as a read only bookie\n-     */\n-    @Override\n-    protected void registerBookie(ServerConfiguration conf) throws IOException {\n-        if (null == zk) {\n-            // zookeeper instance is null, means not register itself to zk\n-            return;\n-        }\n-\n-        // ZK node for this ReadOnly Bookie.\n-        try{\n-            if (null == zk.exists(this.bookieRegistrationPath\n-                        + BookKeeperConstants.READONLY, false)) {\n-                try {\n-                    zk.create(this.bookieRegistrationPath\n-                            + BookKeeperConstants.READONLY + \"/\", new byte[0],\n-                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-                    LOG.debug(\"successed create ReadOnlyBookie parent zk node\");\n-                } catch (NodeExistsException e) {\n-                    // this node is just now created by someone.\n-                }\n-            }\n-\n-            if (!checkRegNodeAndWaitExpired(zkBookieReadOnlyPath)) {\n-                // Create the ZK node for this RO Bookie.\n-                zk.create(zkBookieReadOnlyPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n-                        CreateMode.EPHEMERAL);\n-                LOG.debug(\"successed create ReadOnlyBookie zk node\");\n-            }\n-        } catch (KeeperException ke) {\n-            LOG.error(\"ZK exception registering Znode for ReadOnly Bookie!\", ke);\n-            // Throw an IOException back up. This will cause the Bookie\n-            // constructor to error out. Alternatively, we could do a System\n-            // exit here as this is a fatal error.\n-            throw new IOException(ke);\n-        } catch (InterruptedException ie) {\n-            LOG.error(\"Interruptted exception registering Znode for ReadOnly Bookie!\",\n-                    ie);\n-            // Throw an IOException back up. This will cause the Bookie\n-            // constructor to error out. Alternatively, we could do a System\n-            // exit here as this is a fatal error.\n-            throw new IOException(ie);\n-        }\n+        LOG.info(\"Running bookie in readonly mode.\");\n     }\n \n-    @VisibleForTesting\n     @Override\n-    public void transitionToWritableMode() {\n+    public void doTransitionToWritableMode() {\n+        // no-op\n         LOG.info(\"Skip transition to writable mode for readonly bookie\");\n     }\n \n-\n-    @VisibleForTesting\n     @Override\n-    public void transitionToReadOnlyMode() {\n-        LOG.warn(\"Skip transition to readonly mode for readonly bookie\");\n+    public void doTransitionToReadOnlyMode() {\n+        // no-op\n+        LOG.info(\"Skip transition to readonly mode for readonly bookie\");\n     }\n-\n }"},{"sha":"d4305cade6d4268b094a1fdd303096dd411328b7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -84,6 +84,8 @@ public class ServerConfiguration extends AbstractConfiguration {\n     // Zookeeper Parameters\n     protected final static String ZK_TIMEOUT = \"zkTimeout\";\n     protected final static String ZK_SERVERS = \"zkServers\";\n+    protected final static String ZK_RETRY_BACKOFF_START_MS = \"zkRetryBackoffStartMs\";\n+    protected final static String ZK_RETRY_BACKOFF_MAX_MS = \"zkRetryBackoffMaxMs\";\n     protected final static String OPEN_LEDGER_REREPLICATION_GRACE_PERIOD = \"openLedgerRereplicationGracePeriod\";\n     //ReadOnly mode support on all disk full\n     protected final static String READ_ONLY_MODE_ENABLED = \"readOnlyModeEnabled\";\n@@ -657,6 +659,48 @@ public ServerConfiguration setZkTimeout(int zkTimeout) {\n         return this;\n     }\n \n+    /**\n+     * Get zookeeper client backoff retry start time in millis.\n+     *\n+     * @return zk backoff retry start time in millis.\n+     */\n+    public int getZkRetryBackoffStartMs() {\n+        return getInt(ZK_RETRY_BACKOFF_START_MS, getZkTimeout());\n+    }\n+\n+    /**\n+     * Set zookeeper client backoff retry start time in millis.\n+     *\n+     * @param retryMs\n+     *          backoff retry start time in millis.\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setZkRetryBackoffStartMs(int retryMs) {\n+        setProperty(ZK_RETRY_BACKOFF_START_MS, retryMs);\n+        return this;\n+    }\n+\n+    /**\n+     * Get zookeeper client backoff retry max time in millis.\n+     *\n+     * @return zk backoff retry max time in millis.\n+     */\n+    public int getZkRetryBackoffMaxMs() {\n+        return getInt(ZK_RETRY_BACKOFF_MAX_MS, getZkTimeout());\n+    }\n+\n+    /**\n+     * Set zookeeper client backoff retry max time in millis.\n+     *\n+     * @param retryMs\n+     *          backoff retry max time in millis.\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setZkRetryBackoffMaxMs(int retryMs) {\n+        setProperty(ZK_RETRY_BACKOFF_MAX_MS, retryMs);\n+        return this;\n+    }\n+\n     /**\n      * Is statistics enabled\n      *"},{"sha":"39dfac6d077cea1767f6e80a77329f96e2668119","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -51,7 +51,7 @@ public class BookieInitializationTest extends BookKeeperClusterTestCase {\n             .getLogger(BookieInitializationTest.class);\n \n     ZooKeeper newzk = null;\n-    \n+\n     public BookieInitializationTest() {\n         super(0);\n     }\n@@ -71,7 +71,7 @@ private static class MockBookie extends Bookie {\n         }\n \n         void testRegisterBookie(ServerConfiguration conf) throws IOException {\n-            super.registerBookie(conf);\n+            super.doRegisterBookie();\n         }\n     }\n "},{"sha":"9558ddcc1e477050d47b1d8c54dd87cd3e011f5a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestBookieWatcher.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestBookieWatcher.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+public class TestBookieWatcher extends BookKeeperClusterTestCase {\n+\n+    public TestBookieWatcher() {\n+        super(2);\n+    }\n+\n+    private void expireZooKeeperSession(ZooKeeper zk, int timeout)\n+            throws IOException, InterruptedException, KeeperException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ZooKeeper newZk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), timeout,\n+                new Watcher() {\n+\n+            @Override\n+            public void process(WatchedEvent event) {\n+                if (event.getType() == EventType.None &&\n+                        event.getState() == KeeperState.SyncConnected) {\n+                    latch.countDown();\n+                }\n+            }\n+\n+        }, zk.getSessionId(), zk.getSessionPasswd());\n+        if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+        newZk.close();\n+    }\n+\n+    @Test(timeout=10000)\n+    public void testBookieWatcherSurviveWhenSessionExpired() throws Exception {\n+        final int timeout = 2000;\n+        ZooKeeper zk = ZooKeeperClient.newBuilder()\n+                .connectString(zkUtil.getZooKeeperConnectString())\n+                .sessionTimeoutMs(timeout)\n+                .build();\n+        try {\n+            runBookieWatcherWhenSessionExpired(zk, timeout, true);\n+        } finally {\n+            zk.close();\n+        }\n+    }\n+\n+    @Test(timeout=10000)\n+    public void testBookieWatcherDieWhenSessionExpired() throws Exception {\n+        final int timeout = 2000;\n+        final CountDownLatch connectLatch = new CountDownLatch(1);\n+        ZooKeeper zk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), timeout, new Watcher() {\n+            @Override\n+            public void process(WatchedEvent watchedEvent) {\n+                if (EventType.None == watchedEvent.getType() &&\n+                        KeeperState.SyncConnected == watchedEvent.getState()) {\n+                    connectLatch.countDown();\n+                }\n+            }\n+        });\n+        connectLatch.await();\n+        try {\n+            runBookieWatcherWhenSessionExpired(zk, timeout, false);\n+        } finally {\n+            zk.close();\n+        }\n+    }\n+\n+    private void runBookieWatcherWhenSessionExpired(ZooKeeper zk, int timeout, boolean reconnectable)\n+            throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration();\n+        BookKeeper bkc = new BookKeeper(conf, zk);\n+\n+        LedgerHandle lh;\n+        try {\n+            lh = bkc.createLedger(3, 2, 2, BookKeeper.DigestType.CRC32, new byte[] {});\n+            fail(\"Should fail to create ledger due to not enough bookies.\");\n+        } catch (BKException bke) {\n+            // expected\n+        }\n+\n+        // make zookeeper session expired\n+        expireZooKeeperSession(bkc.zk, timeout);\n+        TimeUnit.MILLISECONDS.sleep(3 * timeout);\n+\n+        // start four new bookies\n+        for (int i=0; i<2; i++) {\n+            startNewBookie();\n+        }\n+\n+        // wait for bookie watcher backoff time.\n+        TimeUnit.SECONDS.sleep(1);\n+\n+        // should success to detect newly added bookies\n+        try {\n+            lh = bkc.createLedger(3, 2, 2, BookKeeper.DigestType.CRC32, new byte[] {});\n+            lh.close();\n+            if (!reconnectable) {\n+                fail(\"Should fail to create ledger due to bookie watcher could not survive after session expire.\");\n+            }\n+        } catch (BKException bke) {\n+            if (reconnectable) {\n+                fail(\"Should not fail to create ledger due to bookie watcher could survive after session expire.\");\n+            }\n+        }\n+    }\n+}"},{"sha":"692ddce5f4066f23df71d7a096b6085a631dd3aa","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorLedgerCheckerTest.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -272,7 +272,7 @@ public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n         ServerConfiguration bookieConf = bsConfs.get(2);\n         BookieServer bk = bs.get(2);\n         bookieConf.setReadOnlyModeEnabled(true);\n-        bk.getBookie().transitionToReadOnlyMode();\n+        bk.getBookie().doTransitionToReadOnlyMode();\n \n         // grace period for publishing the bk-ledger\n         LOG.debug(\"Waiting for Auditor to finish ledger check.\");"},{"sha":"9591ef86b10cf4b40b67f421f7f94e7d48721170","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FTestReplicationWorker.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -530,7 +530,7 @@ public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n         try {\n             BookieServer newBk = bs.get(bs.size() - 1);\n             bsConfs.get(bsConfs.size() - 1).setReadOnlyModeEnabled(true);\n-            newBk.getBookie().transitionToReadOnlyMode();\n+            newBk.getBookie().doTransitionToReadOnlyMode();\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(), replicaToKill.toString());\n             while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()) {\n                 Thread.sleep(100);"},{"sha":"573bc1527af02a2511144210b2b7091052f171a2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookieZKExpireTest.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -28,6 +28,8 @@\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import java.net.InetAddress;\n import java.util.HashSet;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.bookie.Bookie;\n@@ -89,16 +91,9 @@ public void testBookieServerZKExpireBehaviour() throws Exception {\n             sendthread.resume();\n \n             // allow watcher thread to run\n-            secondsToWait = 20;\n-            while (server.isBookieRunning()\n-                   || server.isRunning()) {\n-                Thread.sleep(1000);\n-                if (secondsToWait-- <= 0) {\n-                    break;\n-                }\n-            }\n-            assertFalse(\"Bookie should have shutdown on losing zk session\", server.isBookieRunning());\n-            assertFalse(\"Bookie Server should have shutdown on losing zk session\", server.isRunning());\n+            Thread.sleep(3000);\n+            assertTrue(\"Bookie should not shutdown on losing zk session\", server.isBookieRunning());\n+            assertTrue(\"Bookie Server should not shutdown on losing zk session\", server.isRunning());\n         } finally {\n             server.shutdown();\n         }"},{"sha":"124a420c3ee82f1ab765b50681780f7709397f91","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -248,7 +248,7 @@ public void testLedgerCreationShouldFailWithReadonlyBookie() throws Exception {\n         killBookie(1);\n         baseConf.setReadOnlyModeEnabled(true);\n         startNewBookie();\n-        bs.get(1).getBookie().transitionToReadOnlyMode();\n+        bs.get(1).getBookie().doTransitionToReadOnlyMode();\n         try {\n             bkc.readBookiesBlocking();\n             bkc.createLedger(2, 2, DigestType.CRC32, \"\".getBytes());"},{"sha":"d829db5e9979a28d13f34782dd9229366dd2d8bc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/92722ee9c34b069e23d1a87d7fc78256b8540268/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FTestZooKeeperClient.java?ref=92722ee9c34b069e23d1a87d7fc78256b8540268","patch":"@@ -106,8 +106,12 @@ public void process(WatchedEvent event) {\n     class ShutdownZkServerClient extends ZooKeeperClient {\n \n         ShutdownZkServerClient(String connectString, int sessionTimeoutMs,\n-                ZooKeeperWatcherBase watcher, RetryPolicy operationRetryPolicy)throws IOException {\n-            super(connectString, sessionTimeoutMs, watcher, operationRetryPolicy, null, NullStatsLogger.INSTANCE, 1, 0);\n+                ZooKeeperWatcherBase watcher, RetryPolicy operationRetryPolicy)\n+                throws IOException {\n+            super(connectString, sessionTimeoutMs, watcher,\n+                    new BoundExponentialBackoffRetryPolicy(sessionTimeoutMs, sessionTimeoutMs, Integer.MAX_VALUE),\n+                    operationRetryPolicy,\n+                    NullStatsLogger.INSTANCE, 1, 0);\n         }\n \n         @Override"}]}