{"sha":"4050e79654704ebc0224cc024980e297fdc56473","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjQwNTBlNzk2NTQ3MDRlYmMwMjI0Y2MwMjQ5ODBlMjk3ZmRjNTY0NzM=","commit":{"author":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2015-01-12T14:18:55Z"},"committer":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2015-01-12T14:18:55Z"},"message":"BOOKKEEPER-832: Allow starting bookie in ReadOnly mode (zhaijia via ivank)","tree":{"sha":"5877ad37bff714d3578b57d35508949483f2800a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/5877ad37bff714d3578b57d35508949483f2800a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/4050e79654704ebc0224cc024980e297fdc56473","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4050e79654704ebc0224cc024980e297fdc56473","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/4050e79654704ebc0224cc024980e297fdc56473","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4050e79654704ebc0224cc024980e297fdc56473/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"264995cf2fc97ae527a8c24b369790a424d88d87","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/264995cf2fc97ae527a8c24b369790a424d88d87","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/264995cf2fc97ae527a8c24b369790a424d88d87"}],"stats":{"total":271,"additions":263,"deletions":8},"files":[{"sha":"ed31203991f15577f7d7ca2b729ce578aa5c4d80","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -42,6 +42,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-803: Guide for making a replicated log out of ledgers (ivank)\n \n+      BOOKKEEPER-832: Allow starting bookie in ReadOnly mode (zhaijia via ivank)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"24dd46626a5dd37288cba8dfe9e85449dcc9bd3a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -106,7 +106,7 @@ public class Bookie extends BookieCriticalThread {\n     static final long METAENTRY_ID_FENCE_KEY  = -0x2000;\n \n     // ZK registration path for this bookie\n-    private final String bookieRegistrationPath;\n+    protected final String bookieRegistrationPath;\n \n     private final LedgerDirsManager ledgerDirsManager;\n     private LedgerDirsManager indexDirsManager;\n@@ -127,10 +127,10 @@ public class Bookie extends BookieCriticalThread {\n \n     final ConcurrentMap<Long, byte[]> masterKeyCache = new ConcurrentHashMap<Long, byte[]>();\n \n-    final private String zkBookieRegPath;\n-    final private String zkBookieReadOnlyPath;\n+    final protected String zkBookieRegPath;\n+    final protected String zkBookieReadOnlyPath;\n \n-    final private AtomicBoolean readOnly = new AtomicBoolean(false);\n+    final protected AtomicBoolean readOnly = new AtomicBoolean(false);\n \n     // Expose Stats\n     private final Counter writeBytes;\n@@ -795,7 +795,7 @@ protected void registerBookie(ServerConfiguration conf) throws IOException {\n             // exit here as this is a fatal error.\n             throw new IOException(ke);\n         } catch (InterruptedException ie) {\n-            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n+            LOG.error(\"Interrupted exception registering ephemeral Znode for Bookie!\",\n                     ie);\n             // Throw an IOException back up. This will cause the Bookie\n             // constructor to error out. Alternatively, we could do a System"},{"sha":"d354fb38604efb7bac2d7a92b4c2c4f620840e6a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyBookie.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyBookie.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -0,0 +1,120 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * Implements a read only bookie.\n+ * \n+ * ReadOnlyBookie is force started as readonly, and will not change to writable.\n+ *\n+ */\n+public class ReadOnlyBookie extends Bookie {\n+\n+    private final static Logger LOG = LoggerFactory.getLogger(ReadOnlyBookie.class);\n+\n+    public ReadOnlyBookie(ServerConfiguration conf, StatsLogger statsLogger)\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n+        super(conf, statsLogger);\n+        if (conf.isReadOnlyModeEnabled()) {\n+            readOnly.set(true);\n+        } else {\n+            String err = \"Try to init ReadOnly Bookie, while ReadOnly mode is not enabled\";\n+            LOG.error(err);\n+            throw new IOException(err);\n+        }\n+        LOG.info(\"successed call ReadOnlyBookie constructor\");\n+    }\n+\n+    /**\n+     * Register as a read only bookie\n+     */\n+    @Override\n+    protected void registerBookie(ServerConfiguration conf) throws IOException {\n+        if (null == zk) {\n+            // zookeeper instance is null, means not register itself to zk\n+            return;\n+        }\n+\n+        // ZK node for this ReadOnly Bookie.\n+        try{\n+            if (null == zk.exists(this.bookieRegistrationPath\n+                        + BookKeeperConstants.READONLY, false)) {\n+                try {\n+                    zk.create(this.bookieRegistrationPath\n+                            + BookKeeperConstants.READONLY + \"/\", new byte[0],\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                    LOG.debug(\"successed create ReadOnlyBookie parent zk node\");\n+                } catch (NodeExistsException e) {\n+                    // this node is just now created by someone.\n+                }\n+            }\n+\n+            if (!checkRegNodeAndWaitExpired(zkBookieReadOnlyPath)) {\n+                // Create the ZK node for this RO Bookie.\n+                zk.create(zkBookieReadOnlyPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                        CreateMode.EPHEMERAL);\n+                LOG.debug(\"successed create ReadOnlyBookie zk node\");\n+            }\n+        } catch (KeeperException ke) {\n+            LOG.error(\"ZK exception registering Znode for ReadOnly Bookie!\", ke);\n+            // Throw an IOException back up. This will cause the Bookie\n+            // constructor to error out. Alternatively, we could do a System\n+            // exit here as this is a fatal error.\n+            throw new IOException(ke);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Interruptted exception registering Znode for ReadOnly Bookie!\",\n+                    ie);\n+            // Throw an IOException back up. This will cause the Bookie\n+            // constructor to error out. Alternatively, we could do a System\n+            // exit here as this is a fatal error.\n+            throw new IOException(ie);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    @Override\n+    public void transitionToWritableMode() {\n+        LOG.info(\"Skip transition to writable mode for readonly bookie\");\n+    }\n+\n+\n+    @VisibleForTesting\n+    @Override\n+    public void transitionToReadOnlyMode() {\n+        LOG.warn(\"Skip transition to readonly mode for readonly bookie\");\n+    }\n+\n+}"},{"sha":"a06e77061ab537b2e1966e97eb5d1e39c576db16","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -82,6 +82,8 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String OPEN_LEDGER_REREPLICATION_GRACE_PERIOD = \"openLedgerRereplicationGracePeriod\";\n     //ReadOnly mode support on all disk full\n     protected final static String READ_ONLY_MODE_ENABLED = \"readOnlyModeEnabled\";\n+    //Whether the bookie is force started in ReadOnly mode\n+    protected final static String FORCE_READ_ONLY_BOOKIE = \"forceReadOnlyBookie\";\n     //Disk utilization\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n     protected final static String DISK_USAGE_WARN_THRESHOLD = \"diskUsageWarnThreshold\";\n@@ -1217,6 +1219,29 @@ public boolean isAutoRecoveryDaemonEnabled() {\n         return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n     }\n \n+    /**\n+     * Sets that whether force start a bookie in readonly mode\n+     *\n+     * @param enabled\n+     *            - true if need to start a bookie in read only mode. Otherwise\n+     *            false.\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setForceReadOnlyBookie(boolean enabled) {\n+        setProperty(FORCE_READ_ONLY_BOOKIE, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get whether the Bookie is force started in read only mode or not\n+     *\n+     * @return true - if need to start a bookie in read only mode. Otherwise\n+     *         false.\n+     */\n+    public boolean isForceReadOnlyBookie() {\n+        return getBoolean(FORCE_READ_ONLY_BOOKIE, false);\n+    }\n+\n     /**\n      * Get the maximum number of entries which can be compacted without flushing.\n      * Default is 100,000."},{"sha":"8e8349a2529e7d8e8334a96c313b4a19e345842f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -26,6 +26,7 @@\n import java.net.UnknownHostException;\n \n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.ReadOnlyBookie;\n import org.apache.bookkeeper.bookie.BookieCriticalThread;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.ExitCode;\n@@ -104,7 +105,9 @@ public BookieServer(ServerConfiguration conf, StatsLogger statsLogger)\n \n     protected Bookie newBookie(ServerConfiguration conf)\n         throws IOException, KeeperException, InterruptedException, BookieException {\n-        return new Bookie(conf, statsLogger.scope(BOOKIE_SCOPE));\n+        return conf.isForceReadOnlyBookie() ? \n+                new ReadOnlyBookie(conf, statsLogger.scope(BOOKIE_SCOPE)) :\n+                new Bookie(conf, statsLogger.scope(BOOKIE_SCOPE));\n     }\n \n     public void start() throws IOException, UnavailableException {\n@@ -265,6 +268,8 @@ public void run() {\n         bkOpts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie Server\");\n         bkOpts.addOption(\"withAutoRecovery\", false,\n                 \"Start Autorecovery service Bookie server\");\n+        bkOpts.addOption(\"readOnly\", false,\n+                \"Force Start a ReadOnly Bookie server\");\n         bkOpts.addOption(\"h\", \"help\", false, \"Print help message\");\n     }\n \n@@ -318,6 +323,10 @@ private static ServerConfiguration parseArgs(String[] args)\n                 conf.setAutoRecoveryDaemonEnabled(true);\n             }\n \n+            if (cmdLine.hasOption(\"readOnly\")) {\n+                conf.setForceReadOnlyBookie(true);\n+            }\n+\n             if (leftArgs.length < 4) {\n                 throw new IllegalArgumentException();\n             }"},{"sha":"0223a661ee89f6b53c98ed4ff210297a333ac574","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FBookKeeperClusterTestCase.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -413,8 +413,12 @@ protected BookieServer startBookie(ServerConfiguration conf)\n         if (conf.getUseHostNameAsBookieID()) {\n             host = InetAddress.getLocalHost().getCanonicalHostName();\n         }\n-        while (bkc.getZkHandle().exists(\n-                \"/ledgers/available/\" + host + \":\" + port, false) == null) {\n+        \n+        while ( (!conf.isForceReadOnlyBookie() && (bkc.getZkHandle().exists(\n+                    \"/ledgers/available/\" + host + \":\" + port, false) == null)) ||\n+                ( conf.isForceReadOnlyBookie() && ((bkc.getZkHandle().exists(\n+                    \"/ledgers/available/readonly/\" + host + \":\" + port, false) == null)))\n+              ) {\n             Thread.sleep(500);\n         }\n "},{"sha":"914c7e2c0cda33a96775522add4ae10db8c45fcc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ForceReadOnlyBookieTest.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4050e79654704ebc0224cc024980e297fdc56473/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java?ref=4050e79654704ebc0224cc024980e297fdc56473","patch":"@@ -0,0 +1,95 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+import java.util.Enumeration;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.junit.Test;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test to verify force start readonly bookie\n+ */\n+public class ForceReadOnlyBookieTest extends BookKeeperClusterTestCase {\n+\n+    private final static Logger LOG = LoggerFactory.getLogger(ForceReadOnlyBookieTest.class);\n+    public ForceReadOnlyBookieTest() {\n+        super(2);\n+        baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setEntryLogFilePreAllocationEnabled(false);\n+    }\n+\n+    /**\n+     * Check force start readonly bookie\n+     */\n+    @Test(timeout = 60000)\n+    public void testBookieForceStartAsReadOnly() throws Exception {\n+        // create ledger, add entries\n+        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC,\n+                \"\".getBytes());\n+        for (int i = 0; i < 10; i++) {\n+            ledger.addEntry(\"data\".getBytes());\n+        }\n+        ledger.close();\n+        LOG.info(\"successed prepare\");\n+\n+        // start bookie 1 as readonly\n+        bsConfs.get(1).setReadOnlyModeEnabled(true);\n+        bsConfs.get(1).setForceReadOnlyBookie(true);\n+        restartBookies();\n+        Bookie bookie = bs.get(1).getBookie();\n+        \n+        assertTrue(\"Bookie should be running and in readonly mode\",\n+                bookie.isRunning() && bookie.isReadOnly());\n+        LOG.info(\"successed force start ReadOnlyBookie\");\n+ \n+        // Check new bookie with readonly mode enabled.\n+        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n+        assertEquals(\"Only one ledger dir should be present\", 1, ledgerDirs.length);\n+\n+        // kill the writable bookie\n+        killBookie(0);\n+        // read entry from read only bookie\n+        Enumeration<LedgerEntry> readEntries = ledger.readEntries(0, 9);\n+        while (readEntries.hasMoreElements()) {\n+            LedgerEntry entry = readEntries.nextElement();\n+            assertEquals(\"Entry should contain correct data\", \"data\",\n+                    new String(entry.getEntry()));\n+        }\n+        LOG.info(\"successed read entry from ReadOnlyBookie\");\n+\n+        // test will not transfer to Writable mode.\n+        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n+        ledgerDirsManager.addToWritableDirs(new File(ledgerDirs[0], \"current\"), true);\n+        assertTrue(\"Bookie should be running and in readonly mode\",\n+                bookie.isRunning() && bookie.isReadOnly());\n+        LOG.info(\"successed: bookie still readonly\");\n+    }\n+}"}]}