{"sha":"28c264c8655f74e09ceee5ad499942cfb0dc65dc","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjI4YzI2NGM4NjU1Zjc0ZTA5Y2VlZTVhZDQ5OTk0MmNmYjBkYzY1ZGM=","commit":{"author":{"name":"Robert (Bobby) Evans","email":"evans@yahoo-inc.com","date":"2017-03-22T23:48:06Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-22T23:48:06Z"},"message":"BOOKKEEPER-998: Increased the max entry size to 5MB\n\nFull disclosure, most of these changes were actually done by merlimat For this I am mostly just putting them back into open source.\n\nAuthor: Robert (Bobby) Evans <evans@yahoo-inc.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Venkateswararao Jujjuri (JV) <None>\n\nCloses #104 from revans2/BOOKKEEPER-998","tree":{"sha":"549c20fa3d6e4f01839232573f720d1c6f8d2056","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/549c20fa3d6e4f01839232573f720d1c6f8d2056"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/28c264c8655f74e09ceee5ad499942cfb0dc65dc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/28c264c8655f74e09ceee5ad499942cfb0dc65dc","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/28c264c8655f74e09ceee5ad499942cfb0dc65dc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/28c264c8655f74e09ceee5ad499942cfb0dc65dc/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"123eccd435a4a96a9147ed4a24efbe9025fe79ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/123eccd435a4a96a9147ed4a24efbe9025fe79ba","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/123eccd435a4a96a9147ed4a24efbe9025fe79ba"}],"stats":{"total":66,"additions":59,"deletions":7},"files":[{"sha":"69b7d24df1e77415ef78ac8c5039c85deb0a3b54","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -174,6 +174,7 @@ private static class Header {\n     private final long flushIntervalInBytes;\n     private final boolean doRegularFlushes;\n     private long bytesWrittenSinceLastFlush = 0;\n+    private final int maxSaneEntrySize;\n \n     final ServerConfiguration conf;\n     /**\n@@ -226,6 +227,9 @@ public EntryLogger(ServerConfiguration conf,\n     public EntryLogger(ServerConfiguration conf,\n             LedgerDirsManager ledgerDirsManager, EntryLogListener listener)\n                     throws IOException {\n+        //We reserve 500 bytes as overhead for the protocol.  This is not 100% accurate\n+        // but the protocol varies so an exact value is difficult to determine\n+        this.maxSaneEntrySize = conf.getNettyMaxFrameSizeBytes() - 500;\n         this.ledgerDirsManager = ledgerDirsManager;\n         if (listener != null) {\n             addListener(listener);\n@@ -826,8 +830,8 @@ byte[] readEntry(long ledgerId, long entryId, long location) throws IOException,\n         sizeBuff.flip();\n         int entrySize = sizeBuff.getInt();\n         // entrySize does not include the ledgerId\n-        if (entrySize > MB) {\n-            LOG.error(\"Sanity check failed for entry size of \" + entrySize + \" at location \" + pos + \" in \" + entryLogId);\n+        if (entrySize > maxSaneEntrySize) {\n+            LOG.warn(\"Sanity check failed for entry size of \" + entrySize + \" at location \" + pos + \" in \" + entryLogId);\n \n         }\n         if (entrySize < MIN_SANE_ENTRY_SIZE) {"},{"sha":"1497c7a55de724e922b6dac98d11b2e8f5b55bb9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -18,7 +18,6 @@\n package org.apache.bookkeeper.conf;\n \n import java.net.URL;\n-import static org.apache.bookkeeper.conf.ClientConfiguration.CLIENT_AUTH_PROVIDER_FACTORY_CLASS;\n \n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.Configuration;\n@@ -70,6 +69,10 @@ public abstract class AbstractConfiguration extends CompositeConfiguration {\n     // Client auth provider factory class name. It must be configured on Bookies to for the Auditor\n     protected final static String CLIENT_AUTH_PROVIDER_FACTORY_CLASS = \"clientAuthProviderFactoryClass\";\n \n+    //Netty configuration\n+    protected final static String NETTY_MAX_FRAME_SIZE = \"nettyMaxFrameSizeBytes\";\n+    protected final static int DEFAULT_NETTY_MAX_FRAME_SIZE = 5 * 1024 * 1024; // 5MB\n+\n     protected AbstractConfiguration() {\n         super();\n         if (READ_SYSTEM_PROPERTIES) {\n@@ -284,4 +287,27 @@ public AbstractConfiguration setClientAuthProviderFactoryClass(\n     public String getClientAuthProviderFactoryClass() {\n         return getString(CLIENT_AUTH_PROVIDER_FACTORY_CLASS, null);\n     }\n+\n+    /**\n+     * Get the maximum netty frame size in bytes.  Any message received larger\n+     * that this will be rejected.\n+     *\n+     * @return the maximum netty frame size in bytes.\n+     */\n+    public int getNettyMaxFrameSizeBytes() {\n+        return getInt(NETTY_MAX_FRAME_SIZE, DEFAULT_NETTY_MAX_FRAME_SIZE);\n+    }\n+\n+    /**\n+     * Set the max number of bytes a single message can be that is read by the bookie.\n+     * Any message larger than that size will be rejected.\n+     *\n+     * @param maxSize\n+     *          the max size in bytes\n+     * @return server configuration\n+     */\n+    public AbstractConfiguration setNettyMaxFrameSizeBytes(int maxSize) {\n+        setProperty(NETTY_MAX_FRAME_SIZE, String.valueOf(maxSize));\n+        return this;\n+    }\n }"},{"sha":"b73d2e2e12f49aed9b98ce7dcfd5973e4dfc8da8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FClientConfiguration.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -57,6 +57,7 @@ public class ClientConfiguration extends AbstractConfiguration {\n     protected final static String CLIENT_WRITEBUFFER_HIGH_WATER_MARK = \"clientWriteBufferHighWaterMark\";\n     protected final static String CLIENT_CONNECT_TIMEOUT_MILLIS = \"clientConnectTimeoutMillis\";\n     protected final static String NUM_CHANNELS_PER_BOOKIE = \"numChannelsPerBookie\";\n+\n     // Read Parameters\n     protected final static String READ_TIMEOUT = \"readTimeout\";\n     protected final static String SPECULATIVE_READ_TIMEOUT = \"speculativeReadTimeout\";\n@@ -930,6 +931,15 @@ public ClientConfiguration setBookieQuarantineTime(int quarantineTime, TimeUnit\n         return this;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public ClientConfiguration setNettyMaxFrameSizeBytes(int maxSize) {\n+        super.setNettyMaxFrameSizeBytes(maxSize);\n+        return this;\n+    }\n+\n     /**\n      * Set the client role\n      *"},{"sha":"986f9edf199fb6568aff14f060833e361f166295","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -90,6 +90,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String ALLOW_STORAGE_EXPANSION = \"allowStorageExpansion\";\n     // NIO Parameters\n     protected final static String SERVER_TCP_NODELAY = \"serverTcpNoDelay\";\n+\n     // Zookeeper Parameters\n     protected final static String ZK_TIMEOUT = \"zkTimeout\";\n     protected final static String ZK_SERVERS = \"zkServers\";\n@@ -1772,4 +1773,13 @@ public void setBookieAuthProviderFactoryClass(String factoryClass) {\n     public String getBookieAuthProviderFactoryClass() {\n         return getString(BOOKIE_AUTH_PROVIDER_FACTORY_CLASS, null);\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public ServerConfiguration setNettyMaxFrameSizeBytes(int maxSize) {\n+        super.setNettyMaxFrameSizeBytes(maxSize);\n+        return this;\n+    }\n }"},{"sha":"2c6dd3a8f26547e275fc88874b28655033c1641e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieNettyServer.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -59,7 +59,7 @@ class BookieNettyServer {\n \n     private final static Logger LOG = LoggerFactory.getLogger(BookieNettyServer.class);\n \n-    final static int maxMessageSize = 0xfffff;\n+    final int maxFrameSize;\n     final ServerConfiguration conf;\n     final List<ChannelManager> channels = new ArrayList<>();\n     final RequestProcessor requestProcessor;\n@@ -74,6 +74,7 @@ class BookieNettyServer {\n \n     BookieNettyServer(ServerConfiguration conf, RequestProcessor processor)\n         throws IOException, KeeperException, InterruptedException, BookieException {\n+        this.maxFrameSize = conf.getNettyMaxFrameSizeBytes();\n         this.conf = conf;\n         this.requestProcessor = processor;\n \n@@ -207,7 +208,7 @@ public ChannelPipeline getPipeline() throws Exception {\n             BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();\n             ChannelPipeline pipeline = Channels.pipeline();\n             pipeline.addLast(\"lengthbaseddecoder\",\n-                new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));\n+                new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));\n             pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n \n             pipeline.addLast(\"bookieProtoDecoder\", requestDecoder);"},{"sha":"9d32ff89922ad065efc6f014566929fdb10d7d29","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/28c264c8655f74e09ceee5ad499942cfb0dc65dc/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=28c264c8655f74e09ceee5ad499942cfb0dc65dc","patch":"@@ -118,7 +118,6 @@ public class PerChannelBookieClient extends SimpleChannelHandler implements Chan\n                         BKException.Code.DuplicateEntryIdException,\n                         BKException.Code.WriteOnReadOnlyBookieException));\n \n-    public static final int MAX_FRAME_LENGTH = 2 * 1024 * 1024; // 2M\n     public static final AtomicLong txnIdGenerator = new AtomicLong(0);\n \n     final BookieSocketAddress addr;\n@@ -127,6 +126,7 @@ public class PerChannelBookieClient extends SimpleChannelHandler implements Chan\n     final HashedWheelTimer requestTimer;\n     final int addEntryTimeout;\n     final int readEntryTimeout;\n+    final int maxFrameSize;\n \n     private final ConcurrentHashMap<CompletionKey, CompletionValue> completionObjects = new ConcurrentHashMap<CompletionKey, CompletionValue>();\n \n@@ -181,6 +181,7 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n                                   ClientAuthProvider.Factory authProviderFactory,\n                                   ExtensionRegistry extRegistry,\n                                   PerChannelBookieClientPool pcbcPool) {\n+        this.maxFrameSize = conf.getNettyMaxFrameSizeBytes();\n         this.conf = conf;\n         this.addr = addr;\n         this.executor = executor;\n@@ -893,7 +894,7 @@ void recordError() {\n     public ChannelPipeline getPipeline() throws Exception {\n         ChannelPipeline pipeline = Channels.pipeline();\n \n-        pipeline.addLast(\"lengthbasedframedecoder\", new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, 0, 4, 0, 4));\n+        pipeline.addLast(\"lengthbasedframedecoder\", new LengthFieldBasedFrameDecoder(maxFrameSize, 0, 4, 0, 4));\n         pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n         pipeline.addLast(\"bookieProtoEncoder\", new BookieProtoEncoding.RequestEncoder(extRegistry));\n         pipeline.addLast(\"bookieProtoDecoder\", new BookieProtoEncoding.ResponseDecoder(extRegistry));"}]}