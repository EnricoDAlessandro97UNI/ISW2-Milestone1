{"sha":"96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojk2YWRiZjFkNjEzYTYzNjAyYzhiMWI0YWFkMWIwYTdkMTdlNmVlZTM=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-03-08T05:49:52Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-03-08T05:49:52Z"},"message":"BOOKKEEPER-851: Configurable LedgerStorage implementation\n\nsijie Addressed almost all comments from https://reviews.apache.org/r/33096\n\nOnly point still open is how to treat the `SortedLedgerStorage` and the flag `sortedLedgerStorageEnabled=true` in the config file\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #6 from merlimat/bk-851-configurable-ledger-storage","tree":{"sha":"721240859601a5665403af908739d162e57aeec2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/721240859601a5665403af908739d162e57aeec2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"2c567d008c644df5db8c441fb9aaf135ed36db95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/2c567d008c644df5db8c441fb9aaf135ed36db95","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/2c567d008c644df5db8c441fb9aaf135ed36db95"}],"stats":{"total":652,"additions":502,"deletions":150},"files":[{"sha":"f73e6334996048c57837d0cc5bb82f7c7e089e4b","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -67,6 +67,9 @@ ledgerDirectories=/tmp/bk-data\n # store all ledgers.\n # zkLedgersRootPath=/ledgers\n \n+# Ledger storage implementation class\n+# ledgerStorageClass=org.apache.bookkeeper.bookie.SortedLedgerStorage\n+\n # Enable/Disable entry logger preallocation\n # entryLogFilePreallocationEnabled=true\n "},{"sha":"627220072a7887ced4f27590dab8b24c9cc8426d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -503,16 +503,11 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager, statsLogger.scope(JOURNAL_SCOPE));\n \n-        // Check the type of storage.\n-        if (conf.getSortedLedgerStorageEnabled()) {\n-            ledgerStorage = new SortedLedgerStorage(conf, ledgerManager,\n-                                                    ledgerDirsManager, indexDirsManager,\n-                                                    journal, statsLogger);\n-        } else {\n-            ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n-                                                         ledgerDirsManager, indexDirsManager,\n-                                                         journal, statsLogger);\n-        }\n+        // Instantiate the ledger storage implementation\n+        String ledgerStorageClass = conf.getLedgerStorageClass();\n+        LOG.info(\"Using ledger storage: {}\", ledgerStorageClass);\n+        ledgerStorage = LedgerStorageFactory.createLedgerStorage(ledgerStorageClass);\n+        ledgerStorage.initialize(conf, ledgerManager, ledgerDirsManager, indexDirsManager, journal, statsLogger);\n         syncThread = new SyncThread(conf, getLedgerDirsListener(),\n                                     ledgerStorage, journal);\n \n@@ -712,7 +707,9 @@ public void registerJMX(BKMBeanInfo parent) {\n \n             try {\n                 jmxLedgerStorageBean = this.ledgerStorage.getJMXBean();\n-                BKMBeanRegistry.getInstance().register(jmxLedgerStorageBean, jmxBookieBean);\n+                if (jmxLedgerStorageBean != null) {\n+                    BKMBeanRegistry.getInstance().register(jmxLedgerStorageBean, jmxBookieBean);\n+                }\n             } catch (Exception e) {\n                 LOG.warn(\"Failed to register with JMX for ledger cache\", e);\n                 jmxLedgerStorageBean = null;"},{"sha":"c76a485aa357e99f1e98c7940ae8f4558e59d97e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/CompactableLedgerStorage.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactableLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactableLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactableLedgerStorage.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -0,0 +1,61 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface that identifies LedgerStorage implementations using EntryLogger and running periodic entries compaction\n+ */\n+public interface CompactableLedgerStorage extends LedgerStorage {\n+\n+    /**\n+     * @return the EntryLogger used by the ledger storage\n+     */\n+    EntryLogger getEntryLogger();\n+\n+    /**\n+     * Get an iterator over a range of ledger ids stored in the bookie.\n+     *\n+     * @param firstLedgerId first ledger id in the sequence (included)\n+     * @param lastLedgerId last ledger id in the sequence (not included)\n+     * @return\n+     */\n+    Iterable<Long> getActiveLedgersInRange(long firstLedgerId, long lastLedgerId)\n+            throws IOException;\n+\n+    /**\n+     * Update the location of several entries\n+     *\n+     * @param locations\n+     *            the list of locations to update\n+     * @throws IOException\n+     */\n+    void updateEntriesLocations(Iterable<EntryLocation> locations) throws IOException;\n+\n+    /**\n+     * Flush the entries locations index for the compacted entries\n+     *\n+     * @throws IOException\n+     */\n+    void flushEntriesLocationsIndex() throws IOException;\n+}\n\\ No newline at end of file"},{"sha":"dbb85a174927b891c6042881643f813fafbd6f06","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLocation.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLocation.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -0,0 +1,34 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+public class EntryLocation {\n+    public final long ledger;\n+    public final long entry;\n+    public final long location;\n+\n+    public EntryLocation(long ledger, long entry, long location) {\n+        this.ledger = ledger;\n+        this.entry = entry;\n+        this.location = location;\n+    }\n+}\n\\ No newline at end of file"},{"sha":"3b7c8dc7482d0f1103cc23389f16a57d4e686078","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -265,6 +265,7 @@ synchronized public void close(boolean force) throws IOException {\n         }\n         if (useCount.get() == 0 && fc != null) {\n             fc.close();\n+            fc = null;\n         }\n     }\n "},{"sha":"4d7da258f1f23cdaede876fe8323f56c95c455a1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":31,"deletions":46,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -39,7 +39,6 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.util.MathUtils;\n-import org.apache.bookkeeper.util.SnapshotMap;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -80,9 +79,7 @@ public class GarbageCollectorThread extends BookieThread {\n     // Entry Logger Handle\n     final EntryLogger entryLogger;\n \n-    // Ledger Cache Handle\n-    final LedgerCache ledgerCache;\n-    final SnapshotMap<Long, Boolean> activeLedgers;\n+    final CompactableLedgerStorage ledgerStorage;\n \n     // flag to ensure gc thread will not be interrupted during compaction\n     // to reduce the risk getting entry log corrupted\n@@ -103,35 +100,23 @@ public class GarbageCollectorThread extends BookieThread {\n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n \n-    private static class Offset {\n-        final long ledger;\n-        final long entry;\n-        final long offset;\n-\n-        Offset(long ledger, long entry, long offset) {\n-            this.ledger = ledger;\n-            this.entry = entry;\n-            this.offset = offset;\n-        }\n-    }\n- \n     private static class Throttler {\n         final RateLimiter rateLimiter;\n         final boolean isThrottleByBytes;\n         final int compactionRateByBytes;\n         final int compactionRateByEntries;\n \n-        Throttler(boolean isThrottleByBytes, \n-                  int compactionRateByBytes, \n+        Throttler(boolean isThrottleByBytes,\n+                  int compactionRateByBytes,\n                   int compactionRateByEntries) {\n             this.isThrottleByBytes  = isThrottleByBytes;\n             this.compactionRateByBytes = compactionRateByBytes;\n             this.compactionRateByEntries = compactionRateByEntries;\n-            this.rateLimiter = RateLimiter.create(this.isThrottleByBytes ? \n-                                                  this.compactionRateByBytes : \n+            this.rateLimiter = RateLimiter.create(this.isThrottleByBytes ?\n+                                                  this.compactionRateByBytes :\n                                                   this.compactionRateByEntries);\n         }\n-        \n+\n         // acquire. if bybytes: bytes of this entry; if byentries: 1.\n         void acquire(int permits) {\n             rateLimiter.acquire(this.isThrottleByBytes ? permits : 1);\n@@ -142,11 +127,11 @@ void acquire(int permits) {\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n      */\n     class CompactionScannerFactory implements EntryLogger.EntryLogListener {\n-        List<Offset> offsets = new ArrayList<Offset>();\n+        List<EntryLocation> offsets = new ArrayList<EntryLocation>();\n \n         EntryLogScanner newScanner(final EntryLogMetadata meta) {\n             final Throttler throttler = new Throttler (isThrottleByBytes,\n-                                                       compactionRateByBytes, \n+                                                       compactionRateByBytes,\n                                                        compactionRateByEntries);\n \n             return new EntryLogScanner() {\n@@ -168,7 +153,7 @@ public void process(final long ledgerId, long offset, ByteBuffer entry)\n                         entry.rewind();\n \n                         long newoffset = entryLogger.addEntry(ledgerId, entry);\n-                        offsets.add(new Offset(ledgerId, entryId, newoffset));\n+                        offsets.add(new EntryLocation(ledgerId, entryId, newoffset));\n                     }\n                 }\n             };\n@@ -190,15 +175,15 @@ synchronized private void waitEntrylogFlushed() throws IOException {\n                     return;\n                 }\n \n-                Offset lastOffset = offsets.get(offsets.size()-1);\n-                long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                EntryLocation lastOffset = offsets.get(offsets.size()-1);\n+                long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.location);\n                 while (lastOffsetLogId < entryLogger.getLeastUnflushedLogId() && running) {\n                     synchronized (flushLock) {\n                         flushLock.wait(1000);\n                     }\n \n                     lastOffset = offsets.get(offsets.size()-1);\n-                    lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                    lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.location);\n                 }\n                 if (lastOffsetLogId >= entryLogger.getLeastUnflushedLogId() && !running) {\n                     throw new IOException(\"Shutdown before flushed\");\n@@ -208,16 +193,14 @@ synchronized private void waitEntrylogFlushed() throws IOException {\n                 throw new IOException(\"Interrupted waiting for flush\", ie);\n             }\n \n-            for (Offset o : offsets) {\n-                ledgerCache.putEntryOffset(o.ledger, o.entry, o.offset);\n-            }\n+            ledgerStorage.updateEntriesLocations(offsets);\n             offsets.clear();\n         }\n \n         synchronized void flush() throws IOException {\n             waitEntrylogFlushed();\n \n-            ledgerCache.flushLedger(true);\n+            ledgerStorage.flushEntriesLocationsIndex();\n         }\n     }\n \n@@ -230,16 +213,13 @@ synchronized void flush() throws IOException {\n      * @throws IOException\n      */\n     public GarbageCollectorThread(ServerConfiguration conf,\n-                                  final LedgerCache ledgerCache,\n-                                  EntryLogger entryLogger,\n-                                  SnapshotMap<Long, Boolean> activeLedgers,\n-                                  LedgerManager ledgerManager)\n+                                  LedgerManager ledgerManager,\n+                                  final CompactableLedgerStorage ledgerStorage)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n-        this.ledgerCache = ledgerCache;\n-        this.entryLogger = entryLogger;\n-        this.activeLedgers = activeLedgers;\n+        this.entryLogger = ledgerStorage.getEntryLogger();\n+        this.ledgerStorage = ledgerStorage;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n         this.isThrottleByBytes = conf.getIsThrottleByBytes();\n@@ -256,14 +236,15 @@ public void clean(long ledgerId) {\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"delete ledger : \" + ledgerId);\n                     }\n-                    ledgerCache.deleteLedger(ledgerId);\n+\n+                    ledgerStorage.deleteLedger(ledgerId);\n                 } catch (IOException e) {\n                     LOG.error(\"Exception when deleting the ledger index file on the Bookie: \", e);\n                 }\n             }\n         };\n \n-        this.garbageCollector = new ScanAndCompareGarbageCollector(ledgerManager, activeLedgers);\n+        this.garbageCollector = new ScanAndCompareGarbageCollector(ledgerManager, ledgerStorage);\n \n         // compaction parameters\n         minorCompactionThreshold = conf.getMinorCompactionThreshold();\n@@ -333,7 +314,7 @@ public void suspendMajorGC() {\n             LOG.info(\"Suspend Major Compaction triggered by thread: {}\", Thread.currentThread().getName());\n         }\n     }\n-    \n+\n     public void resumeMajorGC() {\n         if (suspendMajorCompaction.compareAndSet(true, false)) {\n             LOG.info(\"{} Major Compaction back to normal since bookie has enough space now.\", Thread.currentThread().getName());\n@@ -345,7 +326,7 @@ public void suspendMinorGC() {\n             LOG.info(\"Suspend Minor Compaction triggered by thread: {}\", Thread.currentThread().getName());\n         }\n     }\n-    \n+\n     public void resumeMinorGC() {\n         if (suspendMinorCompaction.compareAndSet(true, false)) {\n             LOG.info(\"{} Minor Compaction back to normal since bookie has enough space now.\", Thread.currentThread().getName());\n@@ -389,7 +370,7 @@ public void run() {\n             }\n \n             long curTime = MathUtils.now();\n-            if (enableMajorCompaction && (!suspendMajor) && \n+            if (enableMajorCompaction && (!suspendMajor) &&\n                 (force || curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n                 // enter major compaction\n                 LOG.info(\"Enter major compaction, suspendMajor {}\", suspendMajor);\n@@ -400,7 +381,7 @@ public void run() {\n                 continue;\n             }\n \n-            if (enableMinorCompaction && (!suspendMinor) && \n+            if (enableMinorCompaction && (!suspendMinor) &&\n                 (force || curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n                 // enter minor compaction\n                 LOG.info(\"Enter minor compaction, suspendMinor {}\", suspendMinor);\n@@ -428,8 +409,12 @@ private void doGcEntryLogs() {\n             EntryLogMetadata meta = entryLogMetaMap.get(entryLogId);\n             for (Long entryLogLedger : meta.getLedgersMap().keySet()) {\n                 // Remove the entry log ledger from the set if it isn't active.\n-                if (!activeLedgers.containsKey(entryLogLedger)) {\n-                    meta.removeLedger(entryLogLedger);\n+                try {\n+                    if (!ledgerStorage.ledgerExists(entryLogLedger)) {\n+                        meta.removeLedger(entryLogLedger);\n+                    }\n+                } catch (IOException e) {\n+                    LOG.error(\"Error reading from ledger storage\", e);\n                 }\n             }\n             if (meta.isEmpty()) {"},{"sha":"573ad4533dd45e7fa45172e8e5d29bb6eb18f9ae","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -267,14 +267,7 @@ private File findIndexFile(long ledgerId) throws IOException {\n     }\n \n     boolean ledgerExists(long ledgerId) throws IOException {\n-        FileInfo fi = fileInfoCache.get(ledgerId);\n-        if (fi == null) {\n-            File lf = findIndexFile(ledgerId);\n-            if (lf == null) {\n-                return false;\n-            }\n-        }\n-        return true;\n+        return activeLedgers.containsKey(ledgerId);\n     }\n \n     int getNumOpenLedgers() {"},{"sha":"e85c8dbd0fa266313f09159ef4abe642609cb1f4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":56,"deletions":16,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FInterleavedLedgerStorage.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -25,17 +25,20 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n+import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n \n import java.util.concurrent.TimeUnit;\n \n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n@@ -51,7 +54,7 @@\n  * This ledger storage implementation stores all entries in a single\n  * file and maintains an index file for each ledger.\n  */\n-class InterleavedLedgerStorage implements LedgerStorage, EntryLogListener {\n+public class InterleavedLedgerStorage implements CompactableLedgerStorage, EntryLogListener {\n     private final static Logger LOG = LoggerFactory.getLogger(InterleavedLedgerStorage.class);\n \n     // Hold the last checkpoint\n@@ -77,7 +80,7 @@ protected synchronized Checkpoint getLastCheckpoint() {\n \n     EntryLogger entryLogger;\n     LedgerCache ledgerCache;\n-    private final CheckpointSource checkpointSource;\n+    private CheckpointSource checkpointSource;\n     protected final CheckpointHolder checkpointHolder = new CheckpointHolder();\n \n     // A sorted map to stored all active ledger ids\n@@ -86,32 +89,30 @@ protected synchronized Checkpoint getLastCheckpoint() {\n     // This is the thread that garbage collects the entry logs that do not\n     // contain any active ledgers in them; and compacts the entry logs that\n     // has lower remaining percentage to reclaim disk space.\n-    final GarbageCollectorThread gcThread;\n+    GarbageCollectorThread gcThread;\n \n     // this indicates that a write has happened since the last flush\n     private volatile boolean somethingWritten = false;\n \n     // Expose Stats\n-    private final OpStatsLogger getOffsetStats;\n-    private final OpStatsLogger getEntryStats;\n+    private OpStatsLogger getOffsetStats;\n+    private OpStatsLogger getEntryStats;\n \n-    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n-                             LedgerDirsManager ledgerDirsManager, CheckpointSource checkpointSource)\n-            throws IOException {\n-        this(conf, ledgerManager, ledgerDirsManager, ledgerDirsManager, checkpointSource, NullStatsLogger.INSTANCE);\n+    InterleavedLedgerStorage() {\n+        activeLedgers = new SnapshotMap<Long, Boolean>();\n     }\n \n-    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n-                             LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n-                             CheckpointSource checkpointSource, StatsLogger statsLogger)\n+    @Override\n+    public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                           LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                           CheckpointSource checkpointSource, StatsLogger statsLogger)\n             throws IOException {\n-        activeLedgers = new SnapshotMap<Long, Boolean>();\n+\n         this.checkpointSource = checkpointSource;\n         entryLogger = new EntryLogger(conf, ledgerDirsManager, this);\n         ledgerCache = new LedgerCacheImpl(conf, activeLedgers,\n                 null == indexDirsManager ? ledgerDirsManager : indexDirsManager, statsLogger);\n-        gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n-                activeLedgers, ledgerManager);\n+        gcThread = new GarbageCollectorThread(conf, ledgerManager, this);\n         ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n         // Expose Stats\n         getOffsetStats = statsLogger.getOpStatsLogger(STORAGE_GET_OFFSET);\n@@ -341,6 +342,45 @@ synchronized public void flush() throws IOException {\n         flushOrCheckpoint(false);\n     }\n \n+    @Override\n+    public void deleteLedger(long ledgerId) throws IOException {\n+        activeLedgers.remove(ledgerId);\n+        ledgerCache.deleteLedger(ledgerId);\n+    }\n+\n+    @Override\n+    public Iterable<Long> getActiveLedgersInRange(long firstLedgerId, long lastLedgerId) {\n+        NavigableMap<Long, Boolean> bkActiveLedgersSnapshot = activeLedgers.snapshot();\n+        Map<Long, Boolean> subBkActiveLedgers = bkActiveLedgersSnapshot\n+                .subMap(firstLedgerId, true, lastLedgerId, false);\n+\n+        return subBkActiveLedgers.keySet();\n+    }\n+\n+    @Override\n+    public void updateEntriesLocations(Iterable<EntryLocation> locations) throws IOException {\n+        for (EntryLocation l : locations) {\n+            try {\n+                ledgerCache.putEntryOffset(l.ledger, l.entry, l.location);\n+            } catch (NoLedgerException e) {\n+                // Ledger was already deleted, we can skip it in the compaction\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Compaction failed for deleted ledger ledger: {} entry: {}\", l.ledger, l.entry);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void flushEntriesLocationsIndex() throws IOException {\n+        ledgerCache.flushLedger(true);\n+    }\n+\n+    @Override\n+    public EntryLogger getEntryLogger() {\n+        return entryLogger;\n+    }\n+\n     @Override\n     public BKMBeanInfo getJMXBean() {\n         return ledgerCache.getJMXBean();"},{"sha":"f2f00c4f1722185d7dda2a882ccb9e8b1ba671cc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorage.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -25,13 +25,30 @@\n import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n+import org.apache.bookkeeper.meta.LedgerManager;\n \n /**\n  * Interface for storing ledger data\n  * on persistant storage.\n  */\n-interface LedgerStorage {\n+public interface LedgerStorage {\n+\n+    /**\n+     * Initialize the LedgerStorage implementation\n+     *\n+     * @param conf\n+     * @param ledgerManager\n+     * @param ledgerDirsManager\n+     */\n+    public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                           LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                           CheckpointSource checkpointSource, StatsLogger statsLogger)\n+            throws IOException;\n+\n     /**\n      * Start any background threads\n      * belonging to the storage system. For example,\n@@ -111,6 +128,13 @@ interface LedgerStorage {\n      */\n     Checkpoint checkpoint(Checkpoint checkpoint) throws IOException;\n \n+    /*\n+     *\n+     * @param ledgerId\n+     * @throws IOException\n+     */\n+    void deleteLedger(long ledgerId) throws IOException;\n+\n     /**\n      * Get the JMX management bean for this LedgerStorage\n      */"},{"sha":"d2bac641dedb93fd552eb63920abd03177b2184f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorageFactory.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerStorageFactory.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+\n+public class LedgerStorageFactory {\n+    public static LedgerStorage createLedgerStorage(String name) throws IOException {\n+        try {\n+            return ReflectionUtils.newInstance(name, LedgerStorage.class);\n+        } catch (Throwable t) {\n+            throw new IOException(\"Failed to instantiate ledger storage : \" + name, t);\n+        }\n+    }\n+}"},{"sha":"c0af6c3ded7dcdd90647228df4dd2de154a4082f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FReadOnlyEntryLogger.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -52,7 +52,7 @@ protected boolean removeEntryLog(long entryLogId) {\n     }\n \n     @Override\n-    synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n+    public synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         throw new IOException(\"Can't add entry to a readonly entry logger.\");\n     }\n }"},{"sha":"2b4e3c0cee8b7597c277cd6cfbf9215fece1ce09","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"modified","additions":23,"deletions":24,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FScanAndCompareGarbageCollector.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -21,17 +21,17 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import java.util.Map;\n-import java.util.NavigableMap;\n+import java.util.NavigableSet;\n import java.util.Set;\n \n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n-import org.apache.bookkeeper.util.SnapshotMap;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Sets;\n+\n /**\n  * Garbage collector implementation using scan and compare.\n  *\n@@ -49,50 +49,49 @@\n public class ScanAndCompareGarbageCollector implements GarbageCollector{\n \n     static final Logger LOG = LoggerFactory.getLogger(ScanAndCompareGarbageCollector.class);\n-    private SnapshotMap<Long, Boolean> activeLedgers;\n-    private LedgerManager ledgerManager;\n+    private final LedgerManager ledgerManager;\n+    private final CompactableLedgerStorage ledgerStorage;\n \n-    public ScanAndCompareGarbageCollector(LedgerManager ledgerManager, SnapshotMap<Long, Boolean> activeLedgers) {\n+    public ScanAndCompareGarbageCollector(LedgerManager ledgerManager, CompactableLedgerStorage ledgerStorage) {\n         this.ledgerManager = ledgerManager;\n-        this.activeLedgers = activeLedgers;\n+        this.ledgerStorage = ledgerStorage;\n     }\n \n     @Override\n     public void gc(GarbageCleaner garbageCleaner) {\n-        // create a snapshot first\n-        NavigableMap<Long, Boolean> bkActiveLedgersSnapshot =\n-                this.activeLedgers.snapshot();\n-        LedgerRangeIterator ledgerRangeIterator = ledgerManager.getLedgerRanges();\n         try {\n-            // Empty global active ledgers, need to remove all local active ledgers.\n+            // Get a set of all ledgers on the bookie\n+            NavigableSet<Long> bkActiveLedgers = Sets.newTreeSet(ledgerStorage.getActiveLedgersInRange(0, Long.MAX_VALUE));\n+\n+            // Iterate over all the ledger on the metadata store\n+            LedgerRangeIterator ledgerRangeIterator = ledgerManager.getLedgerRanges();\n+\n             if (!ledgerRangeIterator.hasNext()) {\n-                for (Long bkLid : bkActiveLedgersSnapshot.keySet()) {\n-                    // remove it from current active ledger\n-                    bkActiveLedgersSnapshot.remove(bkLid);\n-                    garbageCleaner.clean(bkLid);\n+                // Empty global active ledgers, need to remove all local active ledgers.\n+                for (long ledgerId : bkActiveLedgers) {\n+                    garbageCleaner.clean(ledgerId);\n                 }\n             }\n+\n             long lastEnd = -1;\n \n             while(ledgerRangeIterator.hasNext()) {\n                 LedgerRange lRange = ledgerRangeIterator.next();\n-                Map<Long, Boolean> subBkActiveLedgers = null;\n \n                 Long start = lastEnd + 1;\n                 Long end = lRange.end();\n                 if (!ledgerRangeIterator.hasNext()) {\n                     end = Long.MAX_VALUE;\n                 }\n-                subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(\n-                        start, true, end, true);\n+\n+                Iterable<Long> subBkActiveLedgers = bkActiveLedgers.subSet(start, true, end, true);\n \n                 Set<Long> ledgersInMetadata = lRange.getLedgers();\n-                LOG.debug(\"Active in metadata {}, Active in bookie {}\",\n-                          ledgersInMetadata, subBkActiveLedgers.keySet());\n-                for (Long bkLid : subBkActiveLedgers.keySet()) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Active in metadata {}, Active in bookie {}\", ledgersInMetadata, subBkActiveLedgers);\n+                }\n+                for (Long bkLid : subBkActiveLedgers) {\n                     if (!ledgersInMetadata.contains(bkLid)) {\n-                        // remove it from current active ledger\n-                        subBkActiveLedgers.remove(bkLid);\n                         garbageCleaner.clean(bkLid);\n                     }\n                 }"},{"sha":"b67e01eaf9af192f147210ca13b3350a71b25fbd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SortedLedgerStorage.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSortedLedgerStorage.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -39,14 +39,19 @@ public class SortedLedgerStorage extends InterleavedLedgerStorage\n         implements LedgerStorage, CacheCallback, SkipListFlusher {\n     private final static Logger LOG = LoggerFactory.getLogger(SortedLedgerStorage.class);\n \n-    private final EntryMemTable memTable;\n-    private final ScheduledExecutorService scheduler;\n-\n-    public SortedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n-                               LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n-                               final CheckpointSource checkpointSource, StatsLogger statsLogger)\n-                                       throws IOException {\n-        super(conf, ledgerManager, ledgerDirsManager, indexDirsManager, checkpointSource, statsLogger);\n+    private EntryMemTable memTable;\n+    private ScheduledExecutorService scheduler;\n+\n+    public SortedLedgerStorage() {\n+        super();\n+    }\n+\n+    @Override\n+    public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                           LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                           final CheckpointSource checkpointSource, StatsLogger statsLogger)\n+            throws IOException {\n+        super.initialize(conf, ledgerManager, ledgerDirsManager, indexDirsManager, null, statsLogger);\n         this.memTable = new EntryMemTable(conf, checkpointSource, statsLogger);\n         this.scheduler = Executors.newSingleThreadScheduledExecutor(\n                 new ThreadFactoryBuilder()"},{"sha":"76e5037a852438f2cfc8be1aa92838e119ac8ad2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":43,"deletions":5,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -26,6 +26,8 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n+import org.apache.bookkeeper.bookie.SortedLedgerStorage;\n import org.apache.commons.lang.StringUtils;\n \n /**\n@@ -118,6 +120,8 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String ENABLE_STATISTICS = \"enableStatistics\";\n     protected final static String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n \n+    protected final static String LEDGER_STORAGE_CLASS = \"ledgerStorageClass\";\n+\n     /**\n      * Construct a default configuration object\n      */\n@@ -833,9 +837,9 @@ public ServerConfiguration setMajorCompactionInterval(long interval) {\n      *\n      * Force GC may get some space back, but may also fill up disk space more\n      * quickly. This is because new log files are created before GC, while old\n-     * garbage log files deleted after GC. \n+     * garbage log files deleted after GC.\n      *\n-     * @return true  - do force GC when disk full, \n+     * @return true  - do force GC when disk full,\n      *         false - suspend GC when disk full.\n      */\n     public boolean getIsForceGCAllowWhenNoSpace() {\n@@ -844,7 +848,7 @@ public boolean getIsForceGCAllowWhenNoSpace() {\n \n     /**\n      * Set whether force GC is allowed when disk full or almost full.\n-     * \n+     *\n      * @param force true to allow force GC; false to suspend GC\n      *\n      * @return ServerConfiguration\n@@ -993,6 +997,7 @@ public int getNumJournalCallbackThreads() {\n     /**\n      * Set sorted-ledger storage enabled or not\n      *\n+     * @deprecated Use {@link #setLedgerStorageClass(String)} to configure the implementation class\n      * @param enabled\n      */\n     public ServerConfiguration setSortedLedgerStorageEnabled(boolean enabled) {\n@@ -1320,7 +1325,7 @@ public boolean isForceReadOnlyBookie() {\n     /**\n      * Get whether use bytes to throttle garbage collector compaction or not\n      *\n-     * @return true  - use Bytes, \n+     * @return true  - use Bytes,\n      *         false - use Entries.\n      */\n     public boolean getIsThrottleByBytes() {\n@@ -1369,7 +1374,7 @@ public ServerConfiguration setCompactionMaxOutstandingRequests(int maxOutstandin\n         setProperty(COMPACTION_MAX_OUTSTANDING_REQUESTS, maxOutstandingRequests);\n         return this;\n     }\n-    \n+\n     /**\n      * Get the rate of compaction adds. Default is 1,000.\n      *\n@@ -1457,6 +1462,39 @@ public ServerConfiguration setJournalRemovePagesFromCache(boolean enabled) {\n         return this;\n     }\n \n+    /*\n+     * Get the {@link LedgerStorage} implementation class name\n+     *\n+     * @return the class name\n+     */\n+    public String getLedgerStorageClass() {\n+        String ledgerStorageClass = getString(LEDGER_STORAGE_CLASS, SortedLedgerStorage.class.getName());\n+        if (ledgerStorageClass.equals(SortedLedgerStorage.class.getName())\n+                && getSortedLedgerStorageEnabled() == false) {\n+            // This is to retain compatibility with BK-4.3 configuration\n+            // In BK-4.3, the ledger storage is configured through the \"sortedLedgerStorageEnabled\" flag :\n+            // sortedLedgerStorageEnabled == true (default) ---> use SortedLedgerStorage\n+            // sortedLedgerStorageEnabled == false ---> use InterleavedLedgerStorage\n+            //\n+            // Since BK-4.4, one can specify the implementation class, but if it was using InterleavedLedgerStorage it\n+            // should continue to use that with the same configuration\n+            ledgerStorageClass = InterleavedLedgerStorage.class.getName();\n+        }\n+\n+        return ledgerStorageClass;\n+    }\n+\n+    /**\n+     * Set the {@link LedgerStorage} implementation class name\n+     *\n+     * @param ledgerStorageClass the class name\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setLedgerStorageClass(String ledgerStorageClass) {\n+        setProperty(LEDGER_STORAGE_CLASS, ledgerStorageClass);\n+        return this;\n+    }\n+\n     /**\n      * Get whether bookie is using hostname for registration and in ledger\n      * metadata. Defaults to false."},{"sha":"4f3bb870dfab541d941eecea6ee1ba2d429e312e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":22,"deletions":17,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -40,6 +40,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n@@ -68,8 +69,8 @@ public static Collection<Object[]> data() {\n         return Arrays.asList(new Object[][] {{true}, {false}});\n     }\n \n-    private boolean isThrottleByBytes; \n-   \n+    private boolean isThrottleByBytes;\n+\n     private final static Logger LOG = LoggerFactory.getLogger(CompactionTest.class);\n     DigestType digestType;\n \n@@ -118,7 +119,7 @@ public void setUp() throws Exception {\n         baseConf.setMinorCompactionInterval(minorCompactionInterval);\n         baseConf.setMajorCompactionInterval(majorCompactionInterval);\n         baseConf.setEntryLogFilePreAllocationEnabled(false);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setLedgerStorageClass(InterleavedLedgerStorage.class.getName());\n         baseConf.setIsThrottleByBytes(this.isThrottleByBytes);\n \n         super.setUp();\n@@ -219,9 +220,10 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n         for (File dir : dirManager.getAllLedgerDirs()) {\n             Bookie.checkDirectoryStructure(dir);\n         }\n-        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf,\n-                        LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n-                        dirManager, cp);\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf,\n+                LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n+                dirManager, dirManager, cp, NullStatsLogger.INSTANCE);\n         storage.start();\n         long startTime = MathUtils.now();\n         Thread.sleep(2000);\n@@ -424,8 +426,8 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         File log0 = new File(curDir, \"0.log\");\n         LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs());\n         assertFalse(\"Log shouldnt exist\", log0.exists());\n-        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf, manager,\n-                                                                        dirs, checkpointSource);\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n         ledgers.add(1l);\n         ledgers.add(2l);\n         ledgers.add(3l);\n@@ -443,7 +445,8 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         ledgers.remove(2l);\n         ledgers.remove(3l);\n \n-        storage = new InterleavedLedgerStorage(conf, manager, dirs, checkpointSource);\n+        storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n         storage.start();\n         for (int i = 0; i < 10; i++) {\n             if (!log0.exists()) {\n@@ -458,7 +461,8 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n         storage.setMasterKey(4, KEY);\n         storage.addEntry(genEntry(4, 1, ENTRY_SIZE)); // force ledger 1 page to flush\n \n-        storage = new InterleavedLedgerStorage(conf, manager, dirs, checkpointSource);\n+        storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n         storage.getEntry(1, 1); // entry should exist\n     }\n \n@@ -553,8 +557,8 @@ public void checkpointComplete(Checkpoint checkpoint,\n                     boolean compact) throws IOException {\n             }\n         };\n-        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf,\n-                manager, dirs, checkpointSource);\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf, manager, dirs, dirs, checkpointSource, NullStatsLogger.INSTANCE);\n \n         double threshold = 0.1;\n         // shouldn't throw exception\n@@ -599,11 +603,12 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n         for (File dir : dirManager.getAllLedgerDirs()) {\n             Bookie.checkDirectoryStructure(dir);\n         }\n-        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf,\n-                        LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n-                        dirManager, cp);\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage();\n+        storage.initialize(conf,\n+                LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n+                dirManager, dirManager, cp, NullStatsLogger.INSTANCE);\n         storage.start();\n-        \n+\n         // test suspend Major GC.\n         Thread.sleep(conf.getMajorCompactionInterval() * 1000\n                    + conf.getGcWaitTime());\n@@ -613,7 +618,7 @@ public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n         Thread.sleep(conf.getMajorCompactionInterval() * 1000\n                    + conf.getGcWaitTime());\n         assertTrue(\"major compaction triggered while set suspend\",\n-                storage.gcThread.lastMajorCompactionTime < startTime); \n+                storage.gcThread.lastMajorCompactionTime < startTime);\n \n         // test suspend Minor GC.\n         storage.gcThread.suspendMinorGC();"},{"sha":"8812c90d28b9d99277cd7f1242816c32ae9da0b7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -321,7 +321,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n             .setFlushInterval(1000)\n             .setPageLimit(1)\n-            .setSortedLedgerStorageEnabled(false);\n+            .setLedgerStorageClass(InterleavedLedgerStorage.class.getName());\n \n         Bookie b = new Bookie(conf);\n         b.start();"},{"sha":"49c7e421a9c2f29eb6dcb8c3138490d68ee6b390","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -35,6 +35,8 @@\n \n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n@@ -260,7 +262,19 @@ public void checkpointComplete(Checkpoint checkpoint, boolean compact)\n                 throws IOException {\n         }\n     }\n+\n     private static class DummyLedgerStorage implements LedgerStorage {\n+        @Override\n+        public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                CheckpointSource checkpointSource, StatsLogger statsLogger)\n+                throws IOException {\n+        }\n+\n+        @Override\n+        public void deleteLedger(long ledgerId) throws IOException {\n+        }\n+\n         @Override\n         public void start() {\n         }"},{"sha":"3875ec46dc95dc66d04aad6fe1550920fe10c7ba","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":121,"deletions":6,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -22,11 +22,14 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n import java.util.Queue;\n import java.util.Random;\n import java.util.Set;\n@@ -36,11 +39,21 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+import org.apache.bookkeeper.bookie.CompactableLedgerStorage;\n+import org.apache.bookkeeper.bookie.EntryLocation;\n+import org.apache.bookkeeper.bookie.CheckpointSource;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.EntryLogger;\n import org.apache.bookkeeper.bookie.GarbageCollector;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager;\n import org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -160,15 +173,24 @@ public void operationComplete(int rc, Void result) {\n         final CountDownLatch inGcProgress = new CountDownLatch(1);\n         final CountDownLatch createLatch = new CountDownLatch(1);\n         final CountDownLatch endLatch = new CountDownLatch(2);\n-        final GarbageCollector garbageCollector =\n-                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        final CompactableLedgerStorage mockLedgerStorage = new MockLedgerStorage();\n+        final GarbageCollector garbageCollector = new ScanAndCompareGarbageCollector(getLedgerManager(),\n+                mockLedgerStorage);\n         Thread gcThread = new Thread() {\n             @Override\n             public void run() {\n                 garbageCollector.gc(new GarbageCollector.GarbageCleaner() {\n                     boolean paused = false;\n+\n                     @Override\n                     public void clean(long ledgerId) {\n+                        try {\n+                            mockLedgerStorage.deleteLedger(ledgerId);\n+                        } catch (IOException e) {\n+                            e.printStackTrace();\n+                            return;\n+                        }\n+\n                         if (!paused) {\n                             inGcProgress.countDown();\n                             try {\n@@ -223,8 +245,8 @@ public void testGcLedgersOutsideRange() throws Exception {\n \n         createLedgers(numLedgers, createdLedgers);\n \n-        final GarbageCollector garbageCollector =\n-                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        final GarbageCollector garbageCollector = new ScanAndCompareGarbageCollector(getLedgerManager(),\n+                new MockLedgerStorage());\n         GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n                 @Override\n                 public void clean(long ledgerId) {\n@@ -259,8 +281,8 @@ public void testGcLedgersNotLast() throws Exception {\n \n         createLedgers(numLedgers, createdLedgers);\n \n-        final GarbageCollector garbageCollector =\n-                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        final GarbageCollector garbageCollector = new ScanAndCompareGarbageCollector(getLedgerManager(),\n+                new MockLedgerStorage());\n         GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n                 @Override\n                 public void clean(long ledgerId) {\n@@ -287,4 +309,97 @@ public void clean(long ledgerId) {\n         assertEquals(\"Should have cleaned something\", 1, cleaned.size());\n         assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.get(0));\n     }\n+\n+    class MockLedgerStorage implements CompactableLedgerStorage {\n+\n+        @Override\n+        public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                               LedgerDirsManager ledgerDirsManager,\n+                               LedgerDirsManager indexDirsManager,\n+                               CheckpointSource checkpointSource, StatsLogger statsLogger)\n+                throws IOException {}\n+\n+        @Override\n+        public void start() {\n+        }\n+\n+        @Override\n+        public void shutdown() throws InterruptedException {\n+        }\n+\n+        @Override\n+        public boolean ledgerExists(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean setFenced(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isFenced(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n+        }\n+\n+        @Override\n+        public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n+            return null;\n+        }\n+\n+        @Override\n+        public long addEntry(ByteBuffer entry) throws IOException {\n+            return 0;\n+        }\n+\n+        @Override\n+        public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+        }\n+\n+        @Override\n+        public Checkpoint checkpoint(Checkpoint checkpoint) throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void deleteLedger(long ledgerId) throws IOException {\n+            activeLedgers.remove(ledgerId);\n+        }\n+\n+        @Override\n+        public Iterable<Long> getActiveLedgersInRange(long firstLedgerId, long lastLedgerId) {\n+            NavigableMap<Long, Boolean> bkActiveLedgersSnapshot = activeLedgers.snapshot();\n+            Map<Long, Boolean> subBkActiveLedgers = bkActiveLedgersSnapshot\n+                    .subMap(firstLedgerId, true, lastLedgerId, false);\n+\n+            return subBkActiveLedgers.keySet();\n+        }\n+\n+        @Override\n+        public BKMBeanInfo getJMXBean() {\n+            return null;\n+        }\n+\n+        @Override\n+        public EntryLogger getEntryLogger() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void updateEntriesLocations(Iterable<EntryLocation> locations) throws IOException {\n+        }\n+\n+        @Override\n+        public void flushEntriesLocationsIndex() throws IOException {\n+        }\n+    }\n }"},{"sha":"161802f2d44225c323f787771da5408635121852","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ForceReadOnlyBookieTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FForceReadOnlyBookieTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -24,6 +24,7 @@\n import java.util.Enumeration;\n \n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n import org.apache.bookkeeper.bookie.LedgerDirsManager;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerEntry;\n@@ -42,7 +43,7 @@ public class ForceReadOnlyBookieTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(ForceReadOnlyBookieTest.class);\n     public ForceReadOnlyBookieTest() {\n         super(2);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setLedgerStorageClass(InterleavedLedgerStorage.class.getName());\n         baseConf.setEntryLogFilePreAllocationEnabled(false);\n     }\n \n@@ -65,11 +66,11 @@ public void testBookieForceStartAsReadOnly() throws Exception {\n         bsConfs.get(1).setForceReadOnlyBookie(true);\n         restartBookies();\n         Bookie bookie = bs.get(1).getBookie();\n-        \n+\n         assertTrue(\"Bookie should be running and in readonly mode\",\n                 bookie.isRunning() && bookie.isReadOnly());\n         LOG.info(\"successed force start ReadOnlyBookie\");\n- \n+\n         // Check new bookie with readonly mode enabled.\n         File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n         assertEquals(\"Only one ledger dir should be present\", 1, ledgerDirs.length);"},{"sha":"0c1a1873940def7f3ec149d4b1975dc4c9810c15","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FLedgerDeleteTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -24,6 +24,8 @@\n import java.io.File;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n@@ -60,7 +62,7 @@ public void setUp() throws Exception {\n         baseConf.setEntryLogSizeLimit(2 * 1024 * 1024L);\n         baseConf.setGcWaitTime(1000);\n         baseConf.setEntryLogFilePreAllocationEnabled(false);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setLedgerStorageClass(InterleavedLedgerStorage.class.getName());\n         super.setUp();\n     }\n "},{"sha":"8cf5618c188f917ff514208ac8557488441fb387","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java?ref=96adbf1d613a63602c8b1b4aad1b0a7d17e6eee3","patch":"@@ -24,13 +24,13 @@\n import java.util.Enumeration;\n \n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.InterleavedLedgerStorage;\n import org.apache.bookkeeper.bookie.LedgerDirsManager;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.util.IOUtils;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -42,7 +42,7 @@ public class ReadOnlyBookieTest extends BookKeeperClusterTestCase {\n \n     public ReadOnlyBookieTest() {\n         super(2);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setLedgerStorageClass(InterleavedLedgerStorage.class.getName());\n         baseConf.setEntryLogFilePreAllocationEnabled(false);\n     }\n "}]}