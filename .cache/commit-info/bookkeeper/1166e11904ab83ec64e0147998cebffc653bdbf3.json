{"sha":"1166e11904ab83ec64e0147998cebffc653bdbf3","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjExNjZlMTE5MDRhYjgzZWM2NGUwMTQ3OTk4Y2ViZmZjNjUzYmRiZjM=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T00:48:47Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-29T10:12:25Z"},"message":"DL-161: Rename ledger id to log segment id\n\nAlong with providing log segment store related interfaces, clean up the naming from 'ledger id' to 'log segment id'. So it would become clear when we can plugin different log segment store.","tree":{"sha":"f2d0ecd295027820444329c4857447d28ff869b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f2d0ecd295027820444329c4857447d28ff869b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/1166e11904ab83ec64e0147998cebffc653bdbf3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1166e11904ab83ec64e0147998cebffc653bdbf3","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1166e11904ab83ec64e0147998cebffc653bdbf3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1166e11904ab83ec64e0147998cebffc653bdbf3/comments","author":null,"committer":null,"parents":[{"sha":"590805a487fbfcc3c85c9baf5988106a9037dc2f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/590805a487fbfcc3c85c9baf5988106a9037dc2f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/590805a487fbfcc3c85c9baf5988106a9037dc2f"}],"stats":{"total":224,"additions":109,"deletions":115},"files":[{"sha":"3f067005f5fea182da4d3620650436c71721a270","filename":"src/main/java/com/twitter/distributedlog/BKLogWriteHandler.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKLogWriteHandler.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -707,13 +707,13 @@ public void onFailure(Throwable cause) {\n \n     @VisibleForTesting\n     LogSegmentMetadata completeAndCloseLogSegment(long logSegmentSeqNo,\n-                                                  long ledgerId,\n+                                                  long logSegmentId,\n                                                   long firstTxId,\n                                                   long lastTxId,\n                                                   int recordCount)\n         throws IOException {\n-        return completeAndCloseLogSegment(inprogressZNodeName(ledgerId, firstTxId, logSegmentSeqNo), logSegmentSeqNo,\n-            ledgerId, firstTxId, lastTxId, recordCount, -1, -1);\n+        return completeAndCloseLogSegment(inprogressZNodeName(logSegmentId, firstTxId, logSegmentSeqNo), logSegmentSeqNo,\n+            logSegmentId, firstTxId, lastTxId, recordCount, -1, -1);\n     }\n \n     /**\n@@ -726,15 +726,15 @@ LogSegmentMetadata completeAndCloseLogSegment(long logSegmentSeqNo,\n      * trying to finalize.\n      */\n     LogSegmentMetadata completeAndCloseLogSegment(String inprogressZnodeName, long logSegmentSeqNo,\n-                                                  long ledgerId, long firstTxId, long lastTxId,\n+                                                  long logSegmentId, long firstTxId, long lastTxId,\n                                                   int recordCount, long lastEntryId, long lastSlotId)\n             throws IOException {\n         Stopwatch stopwatch = Stopwatch.createStarted();\n         boolean success = false;\n         try {\n             LogSegmentMetadata completedLogSegment =\n                     doCompleteAndCloseLogSegment(inprogressZnodeName, logSegmentSeqNo,\n-                            ledgerId, firstTxId, lastTxId, recordCount,\n+                            logSegmentId, firstTxId, lastTxId, recordCount,\n                             lastEntryId, lastSlotId);\n             success = true;\n             return completedLogSegment;\n@@ -770,7 +770,7 @@ protected long computeStartSequenceId(LogSegmentMetadata segment) throws IOExcep\n      *\n      * @param inprogressZnodeName\n      * @param logSegmentSeqNo\n-     * @param ledgerId\n+     * @param logSegmentId\n      * @param firstTxId\n      * @param lastTxId\n      * @param recordCount\n@@ -781,7 +781,7 @@ protected long computeStartSequenceId(LogSegmentMetadata segment) throws IOExcep\n     protected LogSegmentMetadata doCompleteAndCloseLogSegment(\n             String inprogressZnodeName,\n             long logSegmentSeqNo,\n-            long ledgerId,\n+            long logSegmentId,\n             long firstTxId,\n             long lastTxId,\n             int recordCount,\n@@ -791,7 +791,7 @@ protected LogSegmentMetadata doCompleteAndCloseLogSegment(\n         doCompleteAndCloseLogSegment(\n                 inprogressZnodeName,\n                 logSegmentSeqNo,\n-                ledgerId,\n+                logSegmentId,\n                 firstTxId,\n                 lastTxId,\n                 recordCount,\n@@ -803,7 +803,7 @@ protected LogSegmentMetadata doCompleteAndCloseLogSegment(\n \n     protected void doCompleteAndCloseLogSegment(final String inprogressZnodeName,\n                                                 final long logSegmentSeqNo,\n-                                                final long ledgerId,\n+                                                final long logSegmentId,\n                                                 final long firstTxId,\n                                                 final long lastTxId,\n                                                 final int recordCount,\n@@ -821,7 +821,7 @@ public void onSuccess(Versioned<List<LogSegmentMetadata>> segments) {\n                 doCompleteAndCloseLogSegmentAfterLogSegmentListFetched(\n                         inprogressZnodeName,\n                         logSegmentSeqNo,\n-                        ledgerId,\n+                        logSegmentId,\n                         firstTxId,\n                         lastTxId,\n                         recordCount,\n@@ -835,7 +835,7 @@ public void onSuccess(Versioned<List<LogSegmentMetadata>> segments) {\n     private void doCompleteAndCloseLogSegmentAfterLogSegmentListFetched(\n             final String inprogressZnodeName,\n             long logSegmentSeqNo,\n-            long ledgerId,\n+            long logSegmentId,\n             long firstTxId,\n             long lastTxId,\n             int recordCount,\n@@ -853,11 +853,11 @@ private void doCompleteAndCloseLogSegmentAfterLogSegmentListFetched(\n         LogSegmentMetadata inprogressLogSegment = readLogSegmentFromCache(inprogressZnodeName);\n \n         // validate log segment\n-        if (inprogressLogSegment.getLedgerId() != ledgerId) {\n+        if (inprogressLogSegment.getLogSegmentId() != logSegmentId) {\n             FutureUtils.setException(promise, new IOException(\n                 \"Active ledger has different ID to inprogress. \"\n-                    + inprogressLogSegment.getLedgerId() + \" found, \"\n-                    + ledgerId + \" expected\"));\n+                    + inprogressLogSegment.getLogSegmentId() + \" found, \"\n+                    + logSegmentId + \" expected\"));\n             return;\n         }\n         // validate the transaction id\n@@ -1016,7 +1016,7 @@ private Future<LogSegmentMetadata> completeLogSegment(LogSegmentMetadata l,\n             doCompleteAndCloseLogSegment(\n                     l.getZNodeName(),\n                     l.getLogSegmentSequenceNumber(),\n-                    l.getLedgerId(),\n+                    l.getLogSegmentId(),\n                     l.getFirstTxId(),\n                     endTxId,\n                     recordCount,\n@@ -1223,17 +1223,17 @@ public void onFailure(Throwable cause) {\n             }\n         });\n         try {\n-            bookKeeperClient.get().asyncDeleteLedger(ledgerMetadata.getLedgerId(), new AsyncCallback.DeleteCallback() {\n+            bookKeeperClient.get().asyncDeleteLedger(ledgerMetadata.getLogSegmentId(), new AsyncCallback.DeleteCallback() {\n                 @Override\n                 public void deleteComplete(int rc, Object ctx) {\n                     if (BKException.Code.NoSuchLedgerExistsException == rc) {\n                         LOG.warn(\"No ledger {} found to delete for {} : {}.\",\n-                                new Object[]{ledgerMetadata.getLedgerId(), getFullyQualifiedName(),\n+                                new Object[]{ledgerMetadata.getLogSegmentId(), getFullyQualifiedName(),\n                                         ledgerMetadata});\n                     } else if (BKException.Code.OK != rc) {\n                         BKException bke = BKException.create(rc);\n                         LOG.error(\"Couldn't delete ledger {} from bookkeeper for {} : \",\n-                                new Object[]{ledgerMetadata.getLedgerId(), getFullyQualifiedName(), bke});\n+                                new Object[]{ledgerMetadata.getLogSegmentId(), getFullyQualifiedName(), bke});\n                         promise.setException(bke);\n                         return;\n                     }\n@@ -1315,7 +1315,7 @@ String completedLedgerZNode(long firstTxId, long lastTxId, long logSegmentSeqNo)\n      *\n      * @return name of the inprogress znode.\n      */\n-    String inprogressZNodeName(long ledgerId, long firstTxId, long logSegmentSeqNo) {\n+    String inprogressZNodeName(long logSegmentId, long firstTxId, long logSegmentSeqNo) {\n         if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {\n             // Lots of the problems are introduced due to different inprogress names with same ledger sequence number.\n             return String.format(\"%s_%018d\", DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX, logSegmentSeqNo);\n@@ -1327,8 +1327,8 @@ String inprogressZNodeName(long ledgerId, long firstTxId, long logSegmentSeqNo)\n     /**\n      * Get the znode path for the inprogressZNode\n      */\n-    String inprogressZNode(long ledgerId, long firstTxId, long logSegmentSeqNo) {\n-        return logMetadata.getLogSegmentsPath() + \"/\" + inprogressZNodeName(ledgerId, firstTxId, logSegmentSeqNo);\n+    String inprogressZNode(long logSegmentId, long firstTxId, long logSegmentSeqNo) {\n+        return logMetadata.getLogSegmentsPath() + \"/\" + inprogressZNodeName(logSegmentId, firstTxId, logSegmentSeqNo);\n     }\n \n     String inprogressZNode(String inprogressZNodeName) {"},{"sha":"49896fd349da757dbe16d9913c3a79fbb03cc788","filename":"src/main/java/com/twitter/distributedlog/LedgerHandleCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLedgerHandleCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLedgerHandleCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLedgerHandleCache.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -141,7 +141,7 @@ public Future<LedgerDescriptor> asyncOpenLedger(LogSegmentMetadata metadata, boo\n         final Stopwatch stopwatch = Stopwatch.createStarted();\n         final OpStatsLogger openStatsLogger = fence ? openStats : openNoRecoveryStats;\n         final Promise<LedgerDescriptor> promise = new Promise<LedgerDescriptor>();\n-        final LedgerDescriptor ledgerDesc = new LedgerDescriptor(metadata.getLedgerId(), metadata.getLogSegmentSequenceNumber(), fence);\n+        final LedgerDescriptor ledgerDesc = new LedgerDescriptor(metadata.getLogSegmentId(), metadata.getLogSegmentSequenceNumber(), fence);\n         RefCountedLedgerHandle refhandle = handlesMap.get(ledgerDesc);\n         if (null == refhandle) {\n             asyncOpenLedger(ledgerDesc, new AsyncCallback.OpenCallback() {"},{"sha":"a8d9e6d2b162d57a4896a7fc4af46c956f44eccc","filename":"src/main/java/com/twitter/distributedlog/LogSegmentMetadata.java","status":"modified","additions":42,"deletions":43,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogSegmentMetadata.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -23,7 +23,9 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Objects;\n+import com.twitter.distributedlog.exceptions.DLInterruptedException;\n import com.twitter.distributedlog.exceptions.LogSegmentNotFoundException;\n+import com.twitter.distributedlog.exceptions.UnsupportedMetadataVersionException;\n import com.twitter.distributedlog.exceptions.ZKException;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.Utils;\n@@ -36,9 +38,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.twitter.distributedlog.exceptions.DLInterruptedException;\n-import com.twitter.distributedlog.exceptions.UnsupportedMetadataVersionException;\n-\n import static com.google.common.base.Charsets.UTF_8;\n \n /**\n@@ -93,7 +92,7 @@ private TruncationStatus(int value) {\n \n     public static class LogSegmentMetadataBuilder {\n         protected String zkPath;\n-        protected long ledgerId;\n+        protected long logSegmentId;\n         protected LogSegmentMetadataVersion version;\n         protected long firstTxId;\n         protected int regionId;\n@@ -118,20 +117,20 @@ public static class LogSegmentMetadataBuilder {\n \n         LogSegmentMetadataBuilder(String zkPath,\n                                   LogSegmentMetadataVersion version,\n-                                  long ledgerId,\n+                                  long logSegmentId,\n                                   long firstTxId) {\n             initialize();\n             this.zkPath = zkPath;\n             this.version = version;\n-            this.ledgerId = ledgerId;\n+            this.logSegmentId = logSegmentId;\n             this.firstTxId = firstTxId;\n         }\n \n         LogSegmentMetadataBuilder(String zkPath,\n                                   int version,\n-                                  long ledgerId,\n+                                  long logSegmentId,\n                                   long firstTxId) {\n-            this(zkPath, LogSegmentMetadataVersion.values()[version], ledgerId, firstTxId);\n+            this(zkPath, LogSegmentMetadataVersion.values()[version], logSegmentId, firstTxId);\n         }\n \n         private void initialize() {\n@@ -222,7 +221,7 @@ public LogSegmentMetadata build() {\n             return new LogSegmentMetadata(\n                 zkPath,\n                 version,\n-                ledgerId,\n+                    logSegmentId,\n                 firstTxId,\n                 lastTxId,\n                 completionTime,\n@@ -249,7 +248,7 @@ public LogSegmentMetadata build() {\n     public static class Mutator extends LogSegmentMetadataBuilder {\n \n         Mutator(LogSegmentMetadata original) {\n-            super(original.getZkPath(), original.getVersion(), original.getLedgerId(), original.getFirstTxId());\n+            super(original.getZkPath(), original.getVersion(), original.getLogSegmentId(), original.getFirstTxId());\n             this.inprogress = original.isInProgress();\n             this.logSegmentSequenceNo = original.getLogSegmentSequenceNumber();\n             this.lastEntryId = original.getLastEntryId();\n@@ -310,7 +309,7 @@ public Mutator setStartSequenceId(long startSequenceId) {\n     }\n \n     private final String zkPath;\n-    private final long ledgerId;\n+    private final long logSegmentId;\n     private final LogSegmentMetadataVersion version;\n     private final long firstTxId;\n     private final int regionId;\n@@ -418,7 +417,7 @@ public int compare(LogSegmentMetadata o1,\n \n     private LogSegmentMetadata(String zkPath,\n                                LogSegmentMetadataVersion version,\n-                               long ledgerId,\n+                               long logSegmentId,\n                                long firstTxId,\n                                long lastTxId,\n                                long completionTime,\n@@ -434,7 +433,7 @@ private LogSegmentMetadata(String zkPath,\n                                long startSequenceId,\n                                boolean envelopeEntries) {\n         this.zkPath = zkPath;\n-        this.ledgerId = ledgerId;\n+        this.logSegmentId = logSegmentId;\n         this.version = version;\n         this.firstTxId = firstTxId;\n         this.lastTxId = lastTxId;\n@@ -469,8 +468,8 @@ public long getCompletionTime() {\n         return completionTime;\n     }\n \n-    public long getLedgerId() {\n-        return ledgerId;\n+    public long getLogSegmentId() {\n+        return logSegmentId;\n     }\n \n     public long getLogSegmentSequenceNumber() {\n@@ -645,21 +644,21 @@ static LogSegmentMetadata parseDataV1(String path, byte[] data, String[] parts)\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 3) {\n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long txId = Long.parseLong(parts[2]);\n-            return new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n+            return new LogSegmentMetadataBuilder(path, llmv, logSegmentId, txId)\n                     .setRegionId(regionId)\n                     .setStatus(status)\n                     .build();\n         } else if (parts.length == 5) {\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long firstTxId = Long.parseLong(parts[2]);\n             long lastTxId = Long.parseLong(parts[3]);\n             long completionTime = Long.parseLong(parts[4]);\n-            return new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n+            return new LogSegmentMetadataBuilder(path, llmv, logSegmentId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n                 .setCompletionTime(completionTime)\n@@ -690,10 +689,10 @@ static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 4) {\n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long txId = Long.parseLong(parts[2]);\n             long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n-            return new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n+            return new LogSegmentMetadataBuilder(path, llmv, logSegmentId, txId)\n                 .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n                 .setRegionId(regionId)\n                 .setStatus(status)\n@@ -702,14 +701,14 @@ static LogSegmentMetadata parseDataV2(String path, byte[] data, String[] parts)\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long firstTxId = Long.parseLong(parts[2]);\n             long lastTxId = Long.parseLong(parts[3]);\n             long completionTime = Long.parseLong(parts[4]);\n             long logSegmentSequenceNumber = Long.parseLong(parts[5]);\n             long lastEntryId = Long.parseLong(parts[6]);\n             long lastSlotId = Long.parseLong(parts[7]);\n-            return new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n+            return new LogSegmentMetadataBuilder(path, llmv, logSegmentId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n                 .setCompletionTime(completionTime)\n@@ -745,13 +744,13 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 6) {\n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long txId = Long.parseLong(parts[2]);\n             long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n             long minActiveEntryId = Long.parseLong(parts[4]);\n             long minActiveSlotId = Long.parseLong(parts[5]);\n \n-            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n+            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, logSegmentId, txId)\n                 .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n                 .setMinActiveEntryId(minActiveEntryId)\n                 .setMinActiveSlotId(minActiveSlotId)\n@@ -765,7 +764,7 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long firstTxId = Long.parseLong(parts[2]);\n             long lastTxId = Long.parseLong(parts[3]);\n             long completionTime = Long.parseLong(parts[4]);\n@@ -774,7 +773,7 @@ static LogSegmentMetadata parseDataVersionsWithMinActiveDLSN(String path, byte[]\n             long lastSlotId = Long.parseLong(parts[7]);\n             long minActiveEntryId = Long.parseLong(parts[8]);\n             long minActiveSlotId = Long.parseLong(parts[9]);\n-            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n+            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, logSegmentId, firstTxId)\n                 .setInprogress(false)\n                 .setLastTxId(lastTxId)\n                 .setCompletionTime(completionTime)\n@@ -815,14 +814,14 @@ static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] da\n         assert (status >= 0 && status <= METADATA_STATUS_BIT_MAX);\n \n         if (parts.length == 7) {\n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long txId = Long.parseLong(parts[2]);\n             long logSegmentSequenceNumber = Long.parseLong(parts[3]);\n             long minActiveEntryId = Long.parseLong(parts[4]);\n             long minActiveSlotId = Long.parseLong(parts[5]);\n             long startSequenceId = Long.parseLong(parts[6]);\n \n-            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, txId)\n+            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, logSegmentId, txId)\n                     .setLogSegmentSequenceNo(logSegmentSequenceNumber)\n                     .setMinActiveEntryId(minActiveEntryId)\n                     .setMinActiveSlotId(minActiveSlotId)\n@@ -835,7 +834,7 @@ static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] da\n             long recordCount = (versionStatusCount & LOGRECORD_COUNT_MASK) >> LOGRECORD_COUNT_SHIFT;\n             assert (recordCount >= Integer.MIN_VALUE && recordCount <= Integer.MAX_VALUE);\n \n-            long ledgerId = Long.parseLong(parts[1]);\n+            long logSegmentId = Long.parseLong(parts[1]);\n             long firstTxId = Long.parseLong(parts[2]);\n             long lastTxId = Long.parseLong(parts[3]);\n             long completionTime = Long.parseLong(parts[4]);\n@@ -845,7 +844,7 @@ static LogSegmentMetadata parseDataVersionsWithSequenceId(String path, byte[] da\n             long minActiveEntryId = Long.parseLong(parts[8]);\n             long minActiveSlotId = Long.parseLong(parts[9]);\n             long startSequenceId = Long.parseLong(parts[10]);\n-            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, ledgerId, firstTxId)\n+            LogSegmentMetadataBuilder builder = new LogSegmentMetadataBuilder(path, llmv, logSegmentId, firstTxId)\n                     .setInprogress(false)\n                     .setLastTxId(lastTxId)\n                     .setCompletionTime(completionTime)\n@@ -919,11 +918,11 @@ public String getFinalisedData(LogSegmentMetadataVersion version) {\n         if (LogSegmentMetadataVersion.VERSION_V1_ORIGINAL == version) {\n             if (inprogress) {\n                 finalisedData = String.format(\"%d;%d;%d\",\n-                    version.value, ledgerId, firstTxId);\n+                    version.value, logSegmentId, firstTxId);\n             } else {\n                 long versionAndCount = ((long) version.value) | ((long)recordCount << LOGRECORD_COUNT_SHIFT);\n                 finalisedData = String.format(\"%d;%d;%d;%d;%d\",\n-                    versionAndCount, ledgerId, firstTxId, lastTxId, completionTime);\n+                    versionAndCount, logSegmentId, firstTxId, lastTxId, completionTime);\n             }\n         } else {\n             long versionStatusCount = ((long) version.value);\n@@ -935,30 +934,30 @@ public String getFinalisedData(LogSegmentMetadataVersion version) {\n             if (LogSegmentMetadataVersion.VERSION_V2_LEDGER_SEQNO == version) {\n                 if (inprogress) {\n                     finalisedData = String.format(\"%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, logSegmentSeqNo);\n+                        versionStatusCount, logSegmentId, firstTxId, logSegmentSeqNo);\n                 } else {\n                     finalisedData = String.format(\"%d;%d;%d;%d;%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, lastTxId, completionTime,\n+                        versionStatusCount, logSegmentId, firstTxId, lastTxId, completionTime,\n                         logSegmentSeqNo, lastEntryId, lastSlotId);\n                 }\n             } else if (LogSegmentMetadataVersion.VERSION_V4_ENVELOPED_ENTRIES.value >= version.value &&\n                         LogSegmentMetadataVersion.VERSION_V3_MIN_ACTIVE_DLSN.value <= version.value) {\n                 if (inprogress) {\n                     finalisedData = String.format(\"%d;%d;%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, logSegmentSeqNo, minActiveEntryId, minActiveSlotId);\n+                        versionStatusCount, logSegmentId, firstTxId, logSegmentSeqNo, minActiveEntryId, minActiveSlotId);\n                 } else {\n                     finalisedData = String.format(\"%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, lastTxId, completionTime,\n+                        versionStatusCount, logSegmentId, firstTxId, lastTxId, completionTime,\n                         logSegmentSeqNo, lastEntryId, lastSlotId, minActiveEntryId, minActiveSlotId);\n                 }\n             } else if (LogSegmentMetadataVersion.VERSION_V5_SEQUENCE_ID.value <= version.value &&\n                         LogSegmentMetadata.LEDGER_METADATA_CURRENT_LAYOUT_VERSION >= version.value) {\n                 if (inprogress) {\n                     finalisedData = String.format(\"%d;%d;%d;%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, logSegmentSeqNo, minActiveEntryId, minActiveSlotId, startSequenceId);\n+                        versionStatusCount, logSegmentId, firstTxId, logSegmentSeqNo, minActiveEntryId, minActiveSlotId, startSequenceId);\n                 } else {\n                     finalisedData = String.format(\"%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\",\n-                        versionStatusCount, ledgerId, firstTxId, lastTxId, completionTime,\n+                        versionStatusCount, logSegmentId, firstTxId, lastTxId, completionTime,\n                         logSegmentSeqNo, lastEntryId, lastSlotId, minActiveEntryId, minActiveSlotId, startSequenceId);\n                 }\n             } else {\n@@ -1007,7 +1006,7 @@ boolean checkEquivalence(ZooKeeperClient zkc, String path) {\n             // cannot be compared\n             // if the node is inprogress, don't compare the lastTxId either\n             if (this.getLogSegmentSequenceNumber() != other.getLogSegmentSequenceNumber() ||\n-                this.ledgerId != other.ledgerId ||\n+                this.logSegmentId != other.logSegmentId ||\n                 this.firstTxId != other.firstTxId) {\n                 retVal = false;\n             } else if (this.inprogress) {\n@@ -1033,7 +1032,7 @@ public boolean equals(Object o) {\n         }\n         LogSegmentMetadata ol = (LogSegmentMetadata) o;\n         return getLogSegmentSequenceNumber() == ol.getLogSegmentSequenceNumber()\n-            && ledgerId == ol.ledgerId\n+            && logSegmentId == ol.logSegmentId\n             && firstTxId == ol.firstTxId\n             && lastTxId == ol.lastTxId\n             && version == ol.version\n@@ -1046,7 +1045,7 @@ public boolean equals(Object o) {\n \n     public int hashCode() {\n         int hash = 1;\n-        hash = hash * 31 + (int) ledgerId;\n+        hash = hash * 31 + (int) logSegmentId;\n         hash = hash * 31 + (int) firstTxId;\n         hash = hash * 31 + (int) lastTxId;\n         hash = hash * 31 + version.value;\n@@ -1056,7 +1055,7 @@ public int hashCode() {\n     }\n \n     public String toString() {\n-        return \"[LedgerId:\" + ledgerId +\n+        return \"[LogSegmentId:\" + logSegmentId +\n             \", firstTxId:\" + firstTxId +\n             \", lastTxId:\" + lastTxId +\n             \", version:\" + version +"},{"sha":"e551c2225d07db27047e74207f76ed8679299168","filename":"src/main/java/com/twitter/distributedlog/auditor/DLAuditor.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fauditor%2FDLAuditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fauditor%2FDLAuditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fauditor%2FDLAuditor.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -325,7 +325,7 @@ private void collectLedgersFromPool(String poolPath)\n                     byte[] data = getZooKeeperClient(factory).get().getData(allocatorPath, false, new Stat());\n                     if (null != data && data.length > 0) {\n                         try {\n-                            long ledgerId = DLUtils.bytes2LedgerId(data);\n+                            long ledgerId = DLUtils.bytes2LogSegmentId(data);\n                             synchronized (ledgers) {\n                                 ledgers.add(ledgerId);\n                             }\n@@ -370,9 +370,9 @@ private List<Long> collectLedgersFromStream(com.twitter.distributedlog.Distribut\n             List<Long> sLedgers = new ArrayList<Long>();\n             for (LogSegmentMetadata segment : segments) {\n                 synchronized (ledgers) {\n-                    ledgers.add(segment.getLedgerId());\n+                    ledgers.add(segment.getLogSegmentId());\n                 }\n-                sLedgers.add(segment.getLedgerId());\n+                sLedgers.add(segment.getLogSegmentId());\n             }\n             return sLedgers;\n         } finally {\n@@ -431,17 +431,17 @@ private long calculateStreamSpaceUsage(final com.twitter.distributedlog.Distribu\n             List<LogSegmentMetadata> segments = dlm.getLogSegments();\n             for (LogSegmentMetadata segment : segments) {\n                 try {\n-                    LedgerHandle lh = getBookKeeperClient(factory).get().openLedgerNoRecovery(segment.getLedgerId(),\n+                    LedgerHandle lh = getBookKeeperClient(factory).get().openLedgerNoRecovery(segment.getLogSegmentId(),\n                             BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n                     totalBytes += lh.getLength();\n                     lh.close();\n                 } catch (BKException e) {\n-                    logger.error(\"Failed to open ledger {} : \", segment.getLedgerId(), e);\n-                    throw new IOException(\"Failed to open ledger \" + segment.getLedgerId(), e);\n+                    logger.error(\"Failed to open ledger {} : \", segment.getLogSegmentId(), e);\n+                    throw new IOException(\"Failed to open ledger \" + segment.getLogSegmentId(), e);\n                 } catch (InterruptedException e) {\n-                    logger.warn(\"Interrupted on opening ledger {} : \", segment.getLedgerId(), e);\n+                    logger.warn(\"Interrupted on opening ledger {} : \", segment.getLogSegmentId(), e);\n                     Thread.currentThread().interrupt();\n-                    throw new DLInterruptedException(\"Interrupted on opening ledger \" + segment.getLedgerId(), e);\n+                    throw new DLInterruptedException(\"Interrupted on opening ledger \" + segment.getLogSegmentId(), e);\n                 }\n             }\n         } finally {"},{"sha":"ab5976e79f8cc81577319a145491f5ee35f82365","filename":"src/main/java/com/twitter/distributedlog/bk/SimpleLedgerAllocator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FSimpleLedgerAllocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FSimpleLedgerAllocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FSimpleLedgerAllocator.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -212,7 +212,7 @@ private void initialize(Versioned<byte[]> allocationData) {\n         if (null != data && data.length > 0) {\n             // delete the allocated ledger since this is left by last allocation.\n             try {\n-                ledgerIdLeftFromPrevAllocation = DLUtils.bytes2LedgerId(data);\n+                ledgerIdLeftFromPrevAllocation = DLUtils.bytes2LogSegmentId(data);\n             } catch (NumberFormatException nfe) {\n                 LOG.warn(\"Invalid data found in allocator path {} : \", allocatePath, nfe);\n             }\n@@ -384,7 +384,7 @@ private synchronized void setVersion(ZkVersion newVersion) {\n     }\n \n     private void markAsAllocated(final LedgerHandle lh) {\n-        byte[] data = DLUtils.ledgerId2Bytes(lh.getId());\n+        byte[] data = DLUtils.logSegmentId2Bytes(lh.getId());\n         Utils.zkSetData(zkc, allocatePath, data, getVersion())\n             .addEventListener(new FutureEventListener<ZkVersion>() {\n                 @Override"},{"sha":"dc382d20635027ebbcb46f9f4245c83913c9d28b","filename":"src/main/java/com/twitter/distributedlog/impl/logsegment/BKLogSegmentEntryReader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryReader.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -387,7 +387,7 @@ public synchronized void onLogSegmentMetadataUpdated(LogSegmentMetadata segment)\n         }\n         // segment is closed from inprogress, then re-open the log segment\n         bk.asyncOpenLedger(\n-                segment.getLedgerId(),\n+                segment.getLogSegmentId(),\n                 BookKeeper.DigestType.CRC32,\n                 conf.getBKDigestPW().getBytes(UTF_8),\n                 this,"},{"sha":"46509497a59fa3033ff1a4803931e50f972295d2","filename":"src/main/java/com/twitter/distributedlog/impl/logsegment/BKLogSegmentEntryStore.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Flogsegment%2FBKLogSegmentEntryStore.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -87,14 +87,14 @@ public Future<LogSegmentEntryReader> openReader(LogSegmentMetadata segment,\n         OpenReaderRequest request = new OpenReaderRequest(segment, startEntryId);\n         if (segment.isInProgress()) {\n             bk.asyncOpenLedgerNoRecovery(\n-                    segment.getLedgerId(),\n+                    segment.getLogSegmentId(),\n                     BookKeeper.DigestType.CRC32,\n                     passwd,\n                     this,\n                     request);\n         } else {\n             bk.asyncOpenLedger(\n-                    segment.getLedgerId(),\n+                    segment.getLogSegmentId(),\n                     BookKeeper.DigestType.CRC32,\n                     passwd,\n                     this,"},{"sha":"5f88c5a3ae9d3c2707f15ae87bc5f34308e6a241","filename":"src/main/java/com/twitter/distributedlog/logsegment/PerStreamLogSegmentCache.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FPerStreamLogSegmentCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FPerStreamLogSegmentCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Flogsegment%2FPerStreamLogSegmentCache.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -157,14 +157,14 @@ public void add(String name, LogSegmentMetadata metadata) {\n                 LOG.info(\"{} added log segment ({} : {}) to cache.\",\n                         new Object[]{ streamName, name, metadata });\n             }\n-            LogSegmentMetadata oldMetadata = lid2LogSegments.remove(metadata.getLedgerId());\n+            LogSegmentMetadata oldMetadata = lid2LogSegments.remove(metadata.getLogSegmentId());\n             if (null == oldMetadata) {\n-                lid2LogSegments.put(metadata.getLedgerId(), metadata);\n+                lid2LogSegments.put(metadata.getLogSegmentId(), metadata);\n             } else {\n                 if (oldMetadata.isInProgress() && !metadata.isInProgress()) {\n-                    lid2LogSegments.put(metadata.getLedgerId(), metadata);\n+                    lid2LogSegments.put(metadata.getLogSegmentId(), metadata);\n                 } else {\n-                    lid2LogSegments.put(oldMetadata.getLedgerId(), oldMetadata);\n+                    lid2LogSegments.put(oldMetadata.getLogSegmentId(), oldMetadata);\n                 }\n             }\n         }\n@@ -232,7 +232,7 @@ public LogSegmentMetadata remove(String name) {\n         synchronized (logSegments) {\n             LogSegmentMetadata metadata = logSegments.remove(name);\n             if (null != metadata) {\n-                lid2LogSegments.remove(metadata.getLedgerId(), metadata);\n+                lid2LogSegments.remove(metadata.getLogSegmentId(), metadata);\n                 LOG.debug(\"Removed log segment ({} : {}) from cache.\", name, metadata);\n             }\n             return metadata;"},{"sha":"8529281bf18d1947d6baa17954c446914d2de264","filename":"src/main/java/com/twitter/distributedlog/readahead/ReadAheadWorker.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -707,7 +707,7 @@ public void run() {\n                                 }\n                             }\n \n-                            nextReadAheadPosition = new LedgerReadPosition(l.getLedgerId(), l.getLogSegmentSequenceNumber(), startBKEntry);\n+                            nextReadAheadPosition = new LedgerReadPosition(l.getLogSegmentId(), l.getLogSegmentSequenceNumber(), startBKEntry);\n                             if (conf.getTraceReadAheadMetadataChanges()) {\n                                 LOG.info(\"Moved read position to {} for stream {} at {}.\",\n                                          new Object[] {nextReadAheadPosition, logMetadata.getFullyQualifiedName(), System.currentTimeMillis() });\n@@ -1028,7 +1028,7 @@ public void onFailure(Throwable cause) {\n                                                     LOG.trace(\"Moving read position to a new ledger {} for {}.\",\n                                                         currentMetadata, fullyQualifiedName);\n                                                 }\n-                                                nextReadAheadPosition.positionOnNewLogSegment(currentMetadata.getLedgerId(), currentMetadata.getLogSegmentSequenceNumber());\n+                                                nextReadAheadPosition.positionOnNewLogSegment(currentMetadata.getLogSegmentId(), currentMetadata.getLogSegmentSequenceNumber());\n                                             }\n                                         }\n                                     }"},{"sha":"30d6908e5f4fea06fbdeaa3f602066011e386c3d","filename":"src/main/java/com/twitter/distributedlog/tools/DistributedLogTool.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Ftools%2FDistributedLogTool.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -703,7 +703,7 @@ private void inspectStreams(List<String> streams,\n                             LogSegmentMetadata segment = seg;\n                             List<String> dumpedEntries = new ArrayList<String>();\n                             if (segment.isInProgress()) {\n-                                LedgerHandle lh = bkc.get().openLedgerNoRecovery(segment.getLedgerId(), BookKeeper.DigestType.CRC32,\n+                                LedgerHandle lh = bkc.get().openLedgerNoRecovery(segment.getLogSegmentId(), BookKeeper.DigestType.CRC32,\n                                                                                  dlConf.getBKDigestPW().getBytes(UTF_8));\n                                 try {\n                                     long lac = lh.readLastConfirmed();\n@@ -1011,7 +1011,7 @@ private void printLedgerRow(LogSegmentMetadata segment) throws Exception {\n \n         private Map<BookieSocketAddress, Integer> getBookieStats(LogSegmentMetadata segment) throws Exception {\n             Map<BookieSocketAddress, Integer> stats = new HashMap<BookieSocketAddress, Integer>();\n-            LedgerHandle lh = bkc.client().get().openLedgerNoRecovery(segment.getLedgerId(), BookKeeper.DigestType.CRC32,\n+            LedgerHandle lh = bkc.client().get().openLedgerNoRecovery(segment.getLogSegmentId(), BookKeeper.DigestType.CRC32,\n                     getConf().getBKDigestPW().getBytes(UTF_8));\n             long eidFirst = 0;\n             for (SortedMap.Entry<Long, ArrayList<BookieSocketAddress>> entry : LedgerReader.bookiesForLedger(lh).entrySet()) {\n@@ -1601,7 +1601,7 @@ protected boolean inspectLogSegment(BookKeeperClient bkc,\n                 System.out.println(\"Skip inprogress log segment \" + metadata);\n                 return true;\n             }\n-            long ledgerId = metadata.getLedgerId();\n+            long ledgerId = metadata.getLogSegmentId();\n             LedgerHandle lh = bkc.get().openLedger(ledgerId, BookKeeper.DigestType.CRC32,\n                     getConf().getBKDigestPW().getBytes(UTF_8));\n             LedgerHandle readLh = bkc.get().openLedger(ledgerId, BookKeeper.DigestType.CRC32,\n@@ -1667,7 +1667,7 @@ protected void repairLogSegment(BookKeeperAdmin bkAdmin,\n                 System.out.println(\"Skip inprogress log segment \" + segment);\n                 return;\n             }\n-            LedgerHandle lh = bkAdmin.openLedger(segment.getLedgerId(), true);\n+            LedgerHandle lh = bkAdmin.openLedger(segment.getLogSegmentId(), true);\n             long lac = lh.getLastAddConfirmed();\n             Enumeration<LedgerEntry> entries = lh.readEntries(lac, lac);\n             if (!entries.hasMoreElements()) {\n@@ -2129,7 +2129,7 @@ boolean processLog(String logName) throws Exception {\n             try {\n                 List<LogSegmentMetadata> segments = dlm.getLogSegments();\n                 for (LogSegmentMetadata segment : segments) {\n-                    if (getLedgerID() == segment.getLedgerId()) {\n+                    if (getLedgerID() == segment.getLogSegmentId()) {\n                         System.out.println(\"Found ledger \" + getLedgerID() + \" at log segment \"\n                                 + segment + \" for stream '\" + logName + \"'\");\n                         return true;"},{"sha":"63db1fe40cbdfbda6a2057bd103113c04675d92b","filename":"src/main/java/com/twitter/distributedlog/util/DLUtils.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FDLUtils.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -204,24 +204,24 @@ public static byte[] serializeTransactionId(long transactionId) {\n     }\n \n     /**\n-     * Serialize ledger id into bytes.\n+     * Serialize log segment id into bytes.\n      *\n-     * @param ledgerId\n-     *          ledger id\n-     * @return bytes representation of ledger id\n+     * @param logSegmentId\n+     *          log segment id\n+     * @return bytes representation of log segment id\n      */\n-    public static byte[] ledgerId2Bytes(long ledgerId) {\n-        return Long.toString(ledgerId).getBytes(UTF_8);\n+    public static byte[] logSegmentId2Bytes(long logSegmentId) {\n+        return Long.toString(logSegmentId).getBytes(UTF_8);\n     }\n \n     /**\n-     * Deserialize bytes into ledger id.\n+     * Deserialize bytes into log segment id.\n      *\n      * @param data\n-     *          bytes representation of ledger id\n-     * @return ledger id\n+     *          bytes representation of log segment id\n+     * @return log segment id\n      */\n-    public static long bytes2LedgerId(byte[] data) {\n+    public static long bytes2LogSegmentId(byte[] data) {\n         return Long.parseLong(new String(data, UTF_8));\n     }\n }"},{"sha":"b0a38cfb27da18116c8084b0f558caa8b46326a6","filename":"src/test/java/com/twitter/distributedlog/DLMTestUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -195,7 +195,7 @@ public static void fenceStream(DistributedLogConfiguration conf, URI uri, String\n             ).getValue();\n             LogSegmentMetadata lastSegment = ledgerList.get(ledgerList.size() - 1);\n             BookKeeperClient bkc = dlm.getWriterBKC();\n-            LedgerHandle lh = bkc.get().openLedger(lastSegment.getLedgerId(),\n+            LedgerHandle lh = bkc.get().openLedger(lastSegment.getLogSegmentId(),\n                     BookKeeper.DigestType.CRC32, conf.getBKDigestPW().getBytes(UTF_8));\n             lh.close();\n         } finally {"},{"sha":"41adbb9f2237f647ff929d0a10e008d7f9dd5788","filename":"src/test/java/com/twitter/distributedlog/TestAsyncReaderWriter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestAsyncReaderWriter.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -1975,7 +1975,7 @@ public void testCreateLogStreamWithDifferentReplicationFactor() throws Exception\n         FutureUtils.result(writer.write(DLMTestUtil.getLogRecordInstance(1L)));\n         List<LogSegmentMetadata> segments = dlm.getLogSegments();\n         assertEquals(1, segments.size());\n-        long ledgerId = segments.get(0).getLedgerId();\n+        long ledgerId = segments.get(0).getLogSegmentId();\n         LedgerHandle lh = ((BKDistributedLogNamespace) namespace).getReaderBKC()\n                 .get().openLedgerNoRecovery(ledgerId, BookKeeper.DigestType.CRC32, confLocal.getBKDigestPW().getBytes(UTF_8));\n         LedgerMetadata metadata = BookKeeperAccessor.getLedgerMetadata(lh);\n@@ -1994,7 +1994,7 @@ public void testCreateLogStreamWithDifferentReplicationFactor() throws Exception\n         FutureUtils.result(writer.write(DLMTestUtil.getLogRecordInstance(1L)));\n         segments = dlm.getLogSegments();\n         assertEquals(1, segments.size());\n-        ledgerId = segments.get(0).getLedgerId();\n+        ledgerId = segments.get(0).getLogSegmentId();\n         lh = ((BKDistributedLogNamespace) namespace).getReaderBKC()\n                 .get().openLedgerNoRecovery(ledgerId, BookKeeper.DigestType.CRC32, confLocal.getBKDigestPW().getBytes(UTF_8));\n         metadata = BookKeeperAccessor.getLedgerMetadata(lh);"},{"sha":"9e2c22e78b322a8ace303928002b8a1d40ee35e5","filename":"src/test/java/com/twitter/distributedlog/TestLogSegmentMetadata.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -23,18 +23,13 @@\n import com.twitter.distributedlog.exceptions.UnsupportedMetadataVersionException;\n \n import com.twitter.distributedlog.util.FutureUtils;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n-import org.apache.zookeeper.KeeperException;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import static com.google.common.base.Charsets.UTF_8;\n import static org.junit.Assert.assertEquals;\n@@ -81,7 +76,7 @@ public void testReadMetadataCrossVersion() throws Exception {\n         metadata1.write(zkc);\n         // synchronous read\n         LogSegmentMetadata read1 = FutureUtils.result(LogSegmentMetadata.read(zkc, \"/metadata2\", true));\n-        assertEquals(read1.getLedgerId(), metadata1.getLedgerId());\n+        assertEquals(read1.getLogSegmentId(), metadata1.getLogSegmentId());\n         assertEquals(read1.getFirstTxId(), metadata1.getFirstTxId());\n         assertEquals(read1.getLastTxId(), metadata1.getLastTxId());\n         assertEquals(read1.getLogSegmentSequenceNumber(), metadata1.getLogSegmentSequenceNumber());"},{"sha":"eb9174f8752524bb4ed679eed98b0dbda2bb459d","filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogStreamMetadataStoreUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogStreamMetadataStoreUtils.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -188,7 +188,7 @@ public void testProcessLogMetadatasAllocatorPath() throws Exception {\n         Versioned<byte[]> logSegmentsData =\n                 new Versioned<byte[]>(DLUtils.serializeLogSegmentSequenceNumber(1L), new ZkVersion(1));\n         Versioned<byte[]> allocationData =\n-                new Versioned<byte[]>(DLUtils.ledgerId2Bytes(1L), new ZkVersion(1));\n+                new Versioned<byte[]>(DLUtils.logSegmentId2Bytes(1L), new ZkVersion(1));\n         List<Versioned<byte[]>> metadatas = Lists.newArrayList(\n                 new Versioned<byte[]>(null, null),\n                 new Versioned<byte[]>(null, null),"},{"sha":"51bdaa5560bc5fd561bc07ba9691ae4a41598929","filename":"src/test/java/com/twitter/distributedlog/metadata/TestLogSegmentMetadataStoreUpdater.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -131,7 +131,7 @@ public void testChangeSequenceNumber() throws Exception {\n         assertEquals(6L, segmentChanged.getLogSegmentSequenceNumber());\n         assertTrue(segmentChanged.isInProgress());\n         assertEquals(5 * 100, segmentChanged.getFirstTxId());\n-        assertEquals(3L, segmentChanged.getLedgerId());\n+        assertEquals(3L, segmentChanged.getLogSegmentId());\n     }\n \n     @Test(timeout = 60000)\n@@ -214,7 +214,7 @@ public void testUpdateLastDLSN() throws Exception {\n         assertEquals(updatedCompletedLogSegment, readCompletedLogSegment);\n         assertEquals(completedLogSegment.getCompletionTime(), readCompletedLogSegment.getCompletionTime());\n         assertEquals(completedLogSegment.getFirstTxId(), readCompletedLogSegment.getFirstTxId());\n-        assertEquals(completedLogSegment.getLedgerId(), readCompletedLogSegment.getLedgerId());\n+        assertEquals(completedLogSegment.getLogSegmentId(), readCompletedLogSegment.getLogSegmentId());\n         assertEquals(completedLogSegment.getLogSegmentSequenceNumber(), readCompletedLogSegment.getLogSegmentSequenceNumber());\n         assertEquals(completedLogSegment.getRegionId(), readCompletedLogSegment.getRegionId());\n         assertEquals(completedLogSegment.getZkPath(), readCompletedLogSegment.getZkPath());"},{"sha":"8869a5723979ef10467309eac05b032ceae374ff","filename":"src/test/java/com/twitter/distributedlog/util/TestDLUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestDLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1166e11904ab83ec64e0147998cebffc653bdbf3/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestDLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestDLUtils.java?ref=1166e11904ab83ec64e0147998cebffc653bdbf3","patch":"@@ -259,15 +259,15 @@ public void testSerDeLedgerId() throws Exception {\n         long ledgerId = 123456L;\n         byte[] ledgerIdData = Long.toString(ledgerId).getBytes(UTF_8);\n         assertEquals(\"Deserialization should succeed\",\n-                ledgerId, DLUtils.bytes2LedgerId(ledgerIdData));\n+                ledgerId, DLUtils.bytes2LogSegmentId(ledgerIdData));\n         assertArrayEquals(\"Serialization should succeed\",\n-                ledgerIdData, DLUtils.ledgerId2Bytes(ledgerId));\n+                ledgerIdData, DLUtils.logSegmentId2Bytes(ledgerId));\n     }\n \n     @Test(timeout = 60000, expected = NumberFormatException.class)\n     public void testDeserializeInvalidLedgerId() throws Exception {\n         byte[] corruptedData = \"corrupted-ledger-id\".getBytes(UTF_8);\n-        DLUtils.bytes2LedgerId(corruptedData);\n+        DLUtils.bytes2LogSegmentId(corruptedData);\n     }\n \n }"}]}