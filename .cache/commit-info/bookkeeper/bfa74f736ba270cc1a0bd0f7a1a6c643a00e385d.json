{"sha":"bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmJmYTc0ZjczNmJhMjcwY2MxYTBiZDBmN2ExYTZjNjQzYTAwZTM4NWQ=","commit":{"author":{"name":"Siddharth Boobna","email":"sboobna@yahoo-inc.com","date":"2016-03-08T06:14:10Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-03-08T06:14:10Z"},"message":"Bookie should return to read-write mode once the disk usage drops before the threshold\n\nâ€¦o read only mode\n\nAuthor: Siddharth Boobna <sboobna@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #18 from sboobna/BOOKKEEPER-899","tree":{"sha":"c1633e679477c08cd2e3627be6cb2c9ff214e298","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/c1633e679477c08cd2e3627be6cb2c9ff214e298"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c8255f8c5f73a2353293ec1d9612dbb98f291ccc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c8255f8c5f73a2353293ec1d9612dbb98f291ccc","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/c8255f8c5f73a2353293ec1d9612dbb98f291ccc"}],"stats":{"total":187,"additions":151,"deletions":36},"files":[{"sha":"7c95b851b97af12bf5104362c4816116f211356a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":34,"deletions":30,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java?ref=bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","patch":"@@ -66,13 +66,18 @@ public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n     }\n \n     LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger) {\n+        this(conf, dirs, statsLogger, new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n+    }\n+\n+    @VisibleForTesting\n+    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger, DiskChecker diskChecker) {\n         this.ledgerDirectories = Arrays.asList(Bookie\n                 .getCurrentDirectories(dirs));\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n         this.filledDirs = new ArrayList<File>();\n-        listeners = new ArrayList<LedgerDirsListener>();\n-        diskChecker = new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold());\n-        monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n+        this.listeners = new ArrayList<LedgerDirsListener>();\n+        this.diskChecker = diskChecker;\n+        this.monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n         for (File dir : dirs) {\n             diskUsages.put(dir, 0f);\n             String statName = \"dir_\" + dir.getPath().replace('/', '_') + \"_usage\";\n@@ -274,46 +279,45 @@ public LedgerDirsMonitor(int interval) {\n         @Override\n         public void run() {\n             while (true) {\n-                List<File> writableDirs;\n                 try {\n-                    writableDirs = getWritableLedgerDirs();\n+                    List<File> writableDirs = getWritableLedgerDirs();\n+                    // Check all writable dirs disk space usage.\n+                    for (File dir : writableDirs) {\n+                        try {\n+                            diskUsages.put(dir, diskChecker.checkDir(dir));\n+                        } catch (DiskErrorException e) {\n+                            LOG.error(\"Ledger directory {} failed on disk checking : \", dir, e);\n+                            // Notify disk failure to all listeners\n+                            for (LedgerDirsListener listener : listeners) {\n+                                listener.diskFailed(dir);\n+                            }\n+                        } catch (DiskWarnThresholdException e) {\n+                            LOG.warn(\"Ledger directory {} is almost full.\", dir);\n+                            diskUsages.put(dir, e.getUsage());\n+                            for (LedgerDirsListener listener : listeners) {\n+                                listener.diskAlmostFull(dir);\n+                            }\n+                        } catch (DiskOutOfSpaceException e) {\n+                            LOG.error(\"Ledger directory {} is out-of-space.\", dir);\n+                            diskUsages.put(dir, e.getUsage());\n+                            // Notify disk full to all listeners\n+                            addToFilledDirs(dir);\n+                        }\n+                    }\n                 } catch (NoWritableLedgerDirException e) {\n                     for (LedgerDirsListener listener : listeners) {\n                         listener.allDisksFull();\n                     }\n-                    break;\n-                }\n-                // Check all writable dirs disk space usage.\n-                for (File dir : writableDirs) {\n-                    try {\n-                        diskUsages.put(dir, diskChecker.checkDir(dir));\n-                    } catch (DiskErrorException e) {\n-                        LOG.error(\"Ledger directory {} failed on disk checking : \", dir, e);\n-                        // Notify disk failure to all listeners\n-                        for (LedgerDirsListener listener : listeners) {\n-                            listener.diskFailed(dir);\n-                        }\n-                    } catch (DiskWarnThresholdException e) {\n-                        LOG.warn(\"Ledger directory {} is almost full.\", dir);\n-                        diskUsages.put(dir, e.getUsage());\n-                        for (LedgerDirsListener listener : listeners) {\n-                            listener.diskAlmostFull(dir);\n-                        }\n-                    } catch (DiskOutOfSpaceException e) {\n-                        LOG.error(\"Ledger directory {} is out-of-space.\", dir);\n-                        diskUsages.put(dir, e.getUsage());\n-                        // Notify disk full to all listeners\n-                        addToFilledDirs(dir);\n-                    }\n                 }\n+\n                 List<File> fullfilledDirs = new ArrayList<File>(getFullFilledLedgerDirs());\n                 // Check all full-filled disk space usage\n                 for (File dir : fullfilledDirs) {\n                     try {\n                         diskUsages.put(dir, diskChecker.checkDir(dir));\n                         addToWritableDirs(dir, true);\n                     } catch (DiskErrorException e) {\n-                        //Notify disk failure to all the listeners\n+                        // Notify disk failure to all the listeners\n                         for (LedgerDirsListener listener : listeners) {\n                             listener.diskFailed(dir);\n                         }"},{"sha":"b1251a6ffc91bbeb58705c8cd30d9be34302449f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java?ref=bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","patch":"@@ -205,4 +205,12 @@ private void validateThreshold(float diskSpaceThreshold, float diskSpaceWarnThre\n                     + \" are not valid. Should be > 0 and < 1 and diskSpaceThreshold >= diskSpaceWarnThreshold\");\n         }\n     }\n+\n+    public float getDiskUsageThreshold() {\n+        return diskUsageThreshold;\n+    }\n+\n+    public float getDiskUsageWarnThreshold() {\n+        return diskUsageWarnThreshold;\n+    }\n }"},{"sha":"4d8d547caa2355a3b254dafb66d76b9b524a3707","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":109,"deletions":6,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java?ref=bfa74f736ba270cc1a0bd0f7a1a6c643a00e385d","patch":"@@ -20,30 +20,40 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.io.FileUtils;\n \n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.IOUtils;\n-import org.junit.Before;\n+import org.apache.commons.io.FileUtils;\n import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static org.junit.Assert.*;\n-\n public class TestLedgerDirsManager {\n     private final static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n \n     ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n     File curDir;\n     LedgerDirsManager dirsManager;\n+    MockDiskChecker mockDiskChecker;\n+    int diskCheckInterval = 1000;\n+    float threshold = 0.5f;\n+    float warnThreshold = 0.5f;\n \n     final List<File> tempDirs = new ArrayList<File>();\n \n@@ -60,13 +70,17 @@ public void setUp() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n \n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n-        conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n+        conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n+        conf.setDiskCheckInterval(diskCheckInterval);\n \n-        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        mockDiskChecker = new MockDiskChecker(threshold, warnThreshold);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE, mockDiskChecker);\n+        dirsManager.init();\n     }\n \n     @After\n     public void tearDown() throws Exception {\n+        dirsManager.shutdown();\n         for (File dir : tempDirs) {\n             FileUtils.deleteDirectory(dir);\n         }\n@@ -97,4 +111,93 @@ public void testNoWritableDir() throws Exception {\n         }\n     }\n \n+    @Test(timeout=60000)\n+    public void testLedgerDirsMonitorDuringTransition() throws Exception {\n+\n+        MockLedgerDirsListener mockLedgerDirsListener = new MockLedgerDirsListener();\n+        dirsManager.addLedgerDirsListener(mockLedgerDirsListener);\n+        dirsManager.start();\n+\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+        mockDiskChecker.setUsage(threshold + 0.05f);\n+\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+\n+        assertTrue(mockLedgerDirsListener.readOnly);\n+        mockDiskChecker.setUsage(threshold - 0.05f);\n+\n+        Thread.sleep(diskCheckInterval + 100);\n+\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+    }\n+\n+    private class MockDiskChecker extends DiskChecker {\n+\n+        private float used;\n+\n+        public MockDiskChecker(float threshold, float warnThreshold) {\n+            super(threshold, warnThreshold);\n+            used = 0f;\n+        }\n+\n+        @Override\n+        public float checkDir(File dir) throws DiskErrorException, DiskOutOfSpaceException, DiskWarnThresholdException {\n+            if (used > getDiskUsageThreshold()) {\n+                throw new DiskOutOfSpaceException(\"\", used);\n+            }\n+            if (used > getDiskUsageWarnThreshold()) {\n+                throw new DiskWarnThresholdException(\"\", used);\n+            }\n+            return used;\n+        }\n+\n+        public void setUsage(float usage) {\n+            this.used = usage;\n+        }\n+    }\n+\n+    private class MockLedgerDirsListener implements LedgerDirsListener {\n+\n+        public boolean readOnly;\n+\n+        public MockLedgerDirsListener() {\n+            reset();\n+        }\n+\n+        @Override\n+        public void diskFailed(File disk) {\n+        }\n+\n+        @Override\n+        public void diskAlmostFull(File disk) {\n+        }\n+\n+        @Override\n+        public void diskFull(File disk) {\n+        }\n+\n+        @Override\n+        public void diskWritable(File disk) {\n+            readOnly = false;\n+        }\n+\n+        @Override\n+        public void diskJustWritable(File disk) {\n+            readOnly = false;\n+        }\n+\n+        @Override\n+        public void allDisksFull() {\n+            readOnly = true;\n+        }\n+\n+        @Override\n+        public void fatalError() {\n+        }\n+\n+        public void reset() {\n+            readOnly = false;\n+        }\n+\n+    }\n }"}]}