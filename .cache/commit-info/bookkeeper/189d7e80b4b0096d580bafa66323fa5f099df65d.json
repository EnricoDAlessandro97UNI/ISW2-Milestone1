{"sha":"189d7e80b4b0096d580bafa66323fa5f099df65d","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjE4OWQ3ZTgwYjRiMDA5NmQ1ODBiYWZhNjYzMjNmYTVmMDk5ZGY2NWQ=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-22T14:21:00Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-06-22T14:21:00Z"},"message":"ISSUE #203: TestFencing is failing due to LAC piggyback changes\n\nDescriptions of the changes in this PR:\n\nProblem:\n\nTestFencing is failing after merging LAC piggyback changes. Because LAC piggyback will advance last add confirmed when reading entries.\n\nSolution:\n\nMove the addEntry verification to after reading entries.\n\nAt the same time, add more logging to #testManyOpen\n\n---\nBe sure to do all of the following to help us incorporate your contribution\nquickly and easily:\n\n- [x] Make sure the PR title is formatted like:\n    `<Issue #>: Description of pull request`\n    `e.g. Issue 123: Description ...`\n- [x] Make sure tests pass via `mvn clean apache-rat:check install findbugs:check`.\n- [x] Replace `<Issue #>` in the title with the actual Issue number, if there is one.\n\n---\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nThis closes #204 from sijie/fix_test_fencing, closes #203","tree":{"sha":"dccd1be3b480d679b4432021ef77062ec1cfbb50","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/dccd1be3b480d679b4432021ef77062ec1cfbb50"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/189d7e80b4b0096d580bafa66323fa5f099df65d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/189d7e80b4b0096d580bafa66323fa5f099df65d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/189d7e80b4b0096d580bafa66323fa5f099df65d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/189d7e80b4b0096d580bafa66323fa5f099df65d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"59696600784c54192877a5742c6b141eadb07e26","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/59696600784c54192877a5742c6b141eadb07e26","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/59696600784c54192877a5742c6b141eadb07e26"}],"stats":{"total":25,"additions":14,"deletions":11},"files":[{"sha":"13f2f1d8a25b2dca66a64b858ca7a24a90a4aa61","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/189d7e80b4b0096d580bafa66323fa5f099df65d/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestFencing.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/189d7e80b4b0096d580bafa66323fa5f099df65d/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestFencing.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestFencing.java?ref=189d7e80b4b0096d580bafa66323fa5f099df65d","patch":"@@ -27,7 +27,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,14 +38,14 @@\n  * This unit test tests ledger fencing;\n  *\n  */\n-public class TestFencing extends BaseTestCase {\n+public class TestFencing extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(TestFencing.class);\n \n-    DigestType digestType;\n+    private final DigestType digestType;\n \n-    public TestFencing(DigestType digestType) {\n+    public TestFencing() {\n         super(10);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     /**\n@@ -94,19 +94,22 @@ class LedgerOpenThread extends Thread {\n         private long lastConfirmedEntry = 0;\n \n \n+        private final int tid;\n         private final DigestType digestType;\n         private final CyclicBarrier barrier;\n \n-        LedgerOpenThread (DigestType digestType, long ledgerId, CyclicBarrier barrier)\n+        LedgerOpenThread (int tid, DigestType digestType, long ledgerId, CyclicBarrier barrier)\n                 throws Exception {\n             super(\"TestFencing-LedgerOpenThread-\" + threadCount++);\n+            this.tid = tid;\n             this.ledgerId = ledgerId;\n             this.digestType = digestType;\n             this.barrier = barrier;\n         }\n \n         @Override\n         public void run() {\n+            LOG.info(\"Thread {} started.\", tid);\n             LedgerHandle lh = null;\n             BookKeeper bk = null;\n             try {\n@@ -138,7 +141,7 @@ public void run() {\n                 // just exit, test should spot bad last add confirmed\n                 LOG.error(\"Exception occurred \", e);\n             }\n-            LOG.info(\"Thread exiting, lastConfirmedEntry = \" + lastConfirmedEntry);\n+            LOG.info(\"Thread {} exiting, lastConfirmedEntry = {}\", tid, lastConfirmedEntry);\n         }\n \n         long getLastConfirmedEntry() {\n@@ -180,7 +183,7 @@ public void run() {\n         CyclicBarrier barrier = new CyclicBarrier(numRecovery+1);\n         LedgerOpenThread threads[] = new LedgerOpenThread[numRecovery];\n         for (int i = 0; i < numRecovery; i++) {\n-            threads[i] = new LedgerOpenThread(digestType, writelh.getId(), barrier);\n+            threads[i] = new LedgerOpenThread(i, digestType, writelh.getId(), barrier);\n             threads[i].start();\n         }\n         latch.await();\n@@ -219,12 +222,12 @@ public void testNoRecoveryOpen() throws Exception {\n          */\n         LedgerHandle readlh = bkc.openLedgerNoRecovery(writelh.getId(),\n                                                         digestType, \"\".getBytes());\n-        // should not have triggered recovery and fencing\n-\n-        writelh.addEntry(tmp.getBytes());\n         long numReadable = readlh.getLastAddConfirmed();\n         LOG.error(\"numRead \" + numReadable);\n         readlh.readEntries(1, numReadable);\n+\n+        // should not have triggered recovery and fencing\n+        writelh.addEntry(tmp.getBytes());\n         try {\n             readlh.readEntries(numReadable+1, numReadable+1);\n             fail(\"Shouldn't have been able to read this far\");"}]}