{"sha":"0f16da8961521372b9bec953ab62c8913bb8dc31","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjBmMTZkYTg5NjE1MjEzNzJiOWJlYzk1M2FiNjJjODkxM2JiOGRjMzE=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-17T06:57:37Z"},"committer":{"name":"eolivelli","email":"eolivelli@apache.org","date":"2017-05-17T06:57:37Z"},"message":"BOOKKEEPER-1055: Optimize handling of masterKey in case it is empty\n\nOn each request client and bookies are exchanging the ledger masterKey, which is a 20 bytes MAC digest of the ledger password.\n\nFor each request there is a considerable overhead in allocating byte arrays when parsing the add/read requests.\n\nIf the client is a passing an empty password, we should optimize the data path to skip all allocations (related to the masterKey) and instead rely on a static byte array.\n\nAuthor: Matteo Merli <mmerli@apache.org>\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Venkateswararao Jujjuri (JV) <None>\n\nCloses #156 from merlimat/empty-password","tree":{"sha":"d42b7e76cd66f3d8132587c98fa71a055f3e3adc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/d42b7e76cd66f3d8132587c98fa71a055f3e3adc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/0f16da8961521372b9bec953ab62c8913bb8dc31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0f16da8961521372b9bec953ab62c8913bb8dc31","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0f16da8961521372b9bec953ab62c8913bb8dc31","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0f16da8961521372b9bec953ab62c8913bb8dc31/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e44c7388399e5589cf44e38c58bb84c74da544af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e44c7388399e5589cf44e38c58bb84c74da544af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e44c7388399e5589cf44e38c58bb84c74da544af"}],"stats":{"total":92,"additions":72,"deletions":20},"files":[{"sha":"f80bbc828f1172f7d3f5b6323037fa6e250fa184","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDescriptorImpl.java?ref=0f16da8961521372b9bec953ab62c8913bb8dc31","patch":"@@ -22,7 +22,6 @@\n package org.apache.bookkeeper.bookie;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.ByteBufUtil;\n \n import java.io.IOException;\n import java.util.Arrays;\n@@ -51,6 +50,8 @@ public class LedgerDescriptorImpl extends LedgerDescriptor {\n     @Override\n     void checkAccess(byte masterKey[]) throws BookieException, IOException {\n         if (!Arrays.equals(this.masterKey, masterKey)) {\n+            LOG.error(\"[{}] Requested master key {} does not match the cached master key {}\", new Object[] {\n+                    this.ledgerId, Arrays.toString(masterKey), Arrays.toString(this.masterKey) });\n             throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n         }\n     }"},{"sha":"06f1d8c1b70c0d19a58bec36fe0722b727b7733a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=0f16da8961521372b9bec953ab62c8913bb8dc31","patch":"@@ -24,6 +24,7 @@\n import io.netty.buffer.ByteBuf;\n \n import java.security.GeneralSecurityException;\n+import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Enumeration;\n@@ -92,6 +93,16 @@ public class LedgerHandle implements AutoCloseable {\n     final Counter lacUpdateHitsCounter;\n     final Counter lacUpdateMissesCounter;\n \n+    // This empty master key is used when an empty password is provided which is the hash of an empty string\n+    private final static byte[] emptyLedgerKey;\n+    static {\n+        try {\n+            emptyLedgerKey = MacDigestManager.genDigest(\"ledger\", new byte[0]);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n                  DigestType digestType, byte[] password)\n             throws GeneralSecurityException, NumberFormatException {\n@@ -117,7 +128,10 @@ public class LedgerHandle implements AutoCloseable {\n         }\n \n         macManager = DigestManager.instantiate(ledgerId, password, digestType);\n-        this.ledgerKey = MacDigestManager.genDigest(\"ledger\", password);\n+\n+        // If the password is empty, pass the same random ledger key which is generated by the hash of the empty\n+        // password, so that the bookie can avoid processing the keys for each entry\n+        this.ledgerKey = password.length > 0 ? MacDigestManager.genDigest(\"ledger\", password) : emptyLedgerKey;\n         distributionSchedule = new RoundRobinDistributionSchedule(\n                 metadata.getWriteQuorumSize(), metadata.getAckQuorumSize(), metadata.getEnsembleSize());\n "},{"sha":"fc526aafd9c2520cda6a319a23c56acff7f07bd9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FMacDigestManager.java?ref=0f16da8961521372b9bec953ab62c8913bb8dc31","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n@@ -18,25 +16,30 @@\n * limitations under the License.\n */\n \n+package org.apache.bookkeeper.client;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n+\n import io.netty.buffer.ByteBuf;\n \n import java.security.GeneralSecurityException;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n \n import javax.crypto.Mac;\n import javax.crypto.spec.SecretKeySpec;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static com.google.common.base.Charsets.UTF_8;\n-\n-class MacDigestManager extends DigestManager {\n+public class MacDigestManager extends DigestManager {\n     private final static Logger LOG = LoggerFactory.getLogger(MacDigestManager.class);\n \n-    public static String DIGEST_ALGORITHM = \"SHA-1\";\n-    public static String KEY_ALGORITHM = \"HmacSHA1\";\n+    public static final String DIGEST_ALGORITHM = \"SHA-1\";\n+    public static final String KEY_ALGORITHM = \"HmacSHA1\";\n+\n+    public static final int MAC_CODE_LENGTH = 20;\n \n     final byte[] passwd;\n \n@@ -58,10 +61,10 @@ protected Mac initialValue() {\n \n     public MacDigestManager(long ledgerId, byte[] passwd) throws GeneralSecurityException {\n         super(ledgerId);\n-        this.passwd = passwd;\n+        this.passwd = Arrays.copyOf(passwd, passwd.length);\n     }\n \n-    static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {\n+    public static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {\n         MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM);\n         digest.update(pad.getBytes(UTF_8));\n         digest.update(passwd);\n@@ -70,7 +73,7 @@ static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmExcepti\n \n     @Override\n     int getMacCodeLength() {\n-        return 20;\n+        return MAC_CODE_LENGTH;\n     }\n \n "},{"sha":"cd71b26a0c32e6f28ee898857e153e688a3fc1e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","status":"modified","additions":42,"deletions":8,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0f16da8961521372b9bec953ab62c8913bb8dc31/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java?ref=0f16da8961521372b9bec953ab62c8913bb8dc31","patch":"@@ -21,8 +21,10 @@\n package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n import java.util.List;\n \n+import org.apache.bookkeeper.client.MacDigestManager;\n import org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.bookkeeper.util.DoubleByteBuf;\n import org.slf4j.Logger;\n@@ -37,7 +39,6 @@\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.buffer.ByteBufOutputStream;\n-import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n import io.netty.channel.ChannelHandler.Sharable;\n import io.netty.channel.ChannelHandlerContext;\n@@ -74,6 +75,16 @@ static interface EnDecoder {\n     static class RequestEnDeCoderPreV3 implements EnDecoder {\n         final ExtensionRegistry extensionRegistry;\n \n+        //This empty master key is used when an empty password is provided which is the hash of an empty string\n+        private final static byte[] emptyPasswordMasterKey;\n+        static {\n+            try {\n+                emptyPasswordMasterKey = MacDigestManager.genDigest(\"ledger\", new byte[0]);\n+            } catch (NoSuchAlgorithmException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n         RequestEnDeCoderPreV3(ExtensionRegistry extensionRegistry) {\n             this.extensionRegistry = extensionRegistry;\n         }\n@@ -134,29 +145,27 @@ public Object decode(ByteBuf packet)\n             // packet format is different between ADDENTRY and READENTRY\n             long ledgerId = -1;\n             long entryId = BookieProtocol.INVALID_ENTRY_ID;\n-            byte[] masterKey = null;\n+\n             short flags = h.getFlags();\n \n             ServerStats.getInstance().incrementPacketsReceived();\n \n             switch (h.getOpCode()) {\n-            case BookieProtocol.ADDENTRY:\n-                // first read master key\n-                masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n-                packet.readBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n+            case BookieProtocol.ADDENTRY: {\n+                byte[] masterKey = readMasterKey(packet);\n \n                 // Read ledger and entry id without advancing the reader index\n                 ledgerId = packet.getLong(packet.readerIndex());\n                 entryId = packet.getLong(packet.readerIndex() + 8);\n                 return new BookieProtocol.AddRequest(h.getVersion(), ledgerId, entryId, flags, masterKey, packet.retain());\n+            }\n             case BookieProtocol.READENTRY:\n                 ledgerId = packet.readLong();\n                 entryId = packet.readLong();\n \n                 if ((flags & BookieProtocol.FLAG_DO_FENCING) == BookieProtocol.FLAG_DO_FENCING\n                     && h.getVersion() >= 2) {\n-                    masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n-                    packet.readBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n+                    byte[] masterKey = readMasterKey(packet);\n                     return new BookieProtocol.ReadRequest(h.getVersion(), ledgerId, entryId, flags, masterKey);\n                 } else {\n                     return new BookieProtocol.ReadRequest(h.getVersion(), ledgerId, entryId, flags);\n@@ -170,6 +179,31 @@ public Object decode(ByteBuf packet)\n \n             return packet;\n         }\n+\n+        private static byte[] readMasterKey(ByteBuf packet) {\n+            byte[] masterKey = null;\n+\n+            // check if the master key is an empty master key\n+            boolean isEmptyKey = true;\n+            for (int i = 0; i < BookieProtocol.MASTER_KEY_LENGTH; i++) {\n+                if (packet.getByte(packet.readerIndex() + i) != emptyPasswordMasterKey[i]) {\n+                    isEmptyKey = false;\n+                    break;\n+                }\n+            }\n+\n+            if (isEmptyKey) {\n+                // avoid new allocations if incoming master key is empty and use the static master key\n+                masterKey = emptyPasswordMasterKey;\n+                packet.readerIndex(packet.readerIndex() + BookieProtocol.MASTER_KEY_LENGTH);\n+            } else {\n+                // Master key is set, we need to copy and check it\n+                masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n+                packet.readBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n+            }\n+\n+            return masterKey;\n+        }\n     }\n \n     static class ResponseEnDeCoderPreV3 implements EnDecoder {"}]}