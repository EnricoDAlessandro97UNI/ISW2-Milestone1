{"sha":"a6a463591a823bd930aa8b921b17cef70ea445c1","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmE2YTQ2MzU5MWE4MjNiZDkzMGFhOGI5MjFiMTdjZWY3MGVhNDQ1YzE=","commit":{"author":{"name":"Xi Liu","email":"xiliuant@gmail.com","date":"2016-12-21T01:00:37Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-21T01:00:37Z"},"message":"DL-129: Enable checkstyle plugin for distributedlog-protocol module\n\n- add build-tools module for check style configurations\n- fix style problems in distributedlog-protocol\n  * sorted import\n  * fix javadoc\n  * constant static name and static name\n\nAuthor: Xi Liu <xiliuant@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #54 from xiliuant/xi/checkstyle","tree":{"sha":"e95449a50d3782e86acd6994d5a427e3f9c2d25f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/e95449a50d3782e86acd6994d5a427e3f9c2d25f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/a6a463591a823bd930aa8b921b17cef70ea445c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a6a463591a823bd930aa8b921b17cef70ea445c1","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a6a463591a823bd930aa8b921b17cef70ea445c1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a6a463591a823bd930aa8b921b17cef70ea445c1/comments","author":null,"committer":null,"parents":[{"sha":"6fb1a5d564eb72cabd94b28e58e0b7052424335b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6fb1a5d564eb72cabd94b28e58e0b7052424335b","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6fb1a5d564eb72cabd94b28e58e0b7052424335b"}],"stats":{"total":632,"additions":454,"deletions":178},"files":[{"sha":"3adae05e89aff017da61e72206c4b69b5eb865fb","filename":"pom.xml","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -113,6 +113,39 @@\n           <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+          <dependency>\n+            <groupId>com.twitter</groupId>\n+            <artifactId>distributedlog-build-tools</artifactId>\n+            <version>${project.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <configLocation>distributedlog/checkstyle.xml</configLocation>\n+          <suppressionsLocation>distributedlog/suppressions.xml</suppressionsLocation>\n+          <consoleOutput>true</consoleOutput>\n+          <failOnViolation>true</failOnViolation>\n+          <includeResources>false</includeResources>\n+          <includeTestSourceDirectory>true</includeTestSourceDirectory>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>test-compile</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>"},{"sha":"57cc0ef36ae9c6cc800af830da7c4e041f055c4b","filename":"src/main/java/com/twitter/distributedlog/DLSN.java","status":"modified","additions":36,"deletions":31,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLSN.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,12 +17,13 @@\n  */\n package com.twitter.distributedlog;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+\n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Preconditions;\n+import java.nio.ByteBuffer;\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.codec.binary.Hex;\n \n-import java.nio.ByteBuffer;\n \n /**\n  * DistributedLog Sequence Number (DLSN) is the system generated sequence number for log record.\n@@ -46,7 +47,7 @@ public class DLSN implements Comparable<DLSN> {\n     // The non-inclusive lower bound DLSN\n     public static final DLSN NonInclusiveLowerBound = new DLSN(1, 0 , -1);\n     // Invalid DLSN\n-    public static final DLSN InvalidDLSN = new DLSN(0,-1,-1);\n+    public static final DLSN InvalidDLSN = new DLSN(0, -1, -1);\n \n     static final byte CUR_VERSION = VERSION1;\n     static final int VERSION0_LEN = Long.SIZE * 3 + Byte.SIZE;\n@@ -71,14 +72,6 @@ public long getLogSegmentSequenceNo() {\n         return logSegmentSequenceNo;\n     }\n \n-    /**\n-     * use {@link #getLogSegmentSequenceNo()} instead\n-     */\n-    @Deprecated\n-    long getLedgerSequenceNo() {\n-        return logSegmentSequenceNo;\n-    }\n-\n     /**\n      * Return the entry id of the batch that the record is written to.\n      *\n@@ -100,11 +93,11 @@ public long getSlotId() {\n     @Override\n     public int compareTo(DLSN that) {\n         if (this.logSegmentSequenceNo != that.logSegmentSequenceNo) {\n-            return (this.logSegmentSequenceNo < that.logSegmentSequenceNo)? -1 : 1;\n+            return (this.logSegmentSequenceNo < that.logSegmentSequenceNo) ? -1 : 1;\n         } else if (this.entryId != that.entryId) {\n-            return (this.entryId < that.entryId)? -1 : 1;\n+            return (this.entryId < that.entryId) ? -1 : 1;\n         } else {\n-            return (this.slotId < that.slotId)? -1 : (this.slotId == that.slotId)? 0 : 1;\n+            return (this.slotId < that.slotId) ? -1 : (this.slotId == that.slotId) ? 0 : 1;\n         }\n     }\n \n@@ -125,7 +118,7 @@ public byte[] serializeBytes() {\n      * @return the serialized bytes\n      */\n     public byte[] serializeBytes(byte version) {\n-        Preconditions.checkArgument(version <= CUR_VERSION && version >= VERSION0);\n+        checkArgument(version <= CUR_VERSION && version >= VERSION0);\n         byte[] data = new byte[CUR_VERSION == version ? VERSION1_LEN : VERSION0_LEN];\n         ByteBuffer bb = ByteBuffer.wrap(data);\n         bb.put(version);\n@@ -208,23 +201,33 @@ static DLSN deserialize0(String dlsn) {\n \n     @Override\n     public String toString() {\n-        return \"DLSN{\" +\n-            \"logSegmentSequenceNo=\" + logSegmentSequenceNo +\n-            \", entryId=\" + entryId +\n-            \", slotId=\" + slotId +\n-            '}';\n+        return \"DLSN{\"\n+            + \"logSegmentSequenceNo=\" + logSegmentSequenceNo\n+            + \", entryId=\" + entryId\n+            + \", slotId=\" + slotId\n+            + '}';\n     }\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (!(o instanceof DLSN)) return false;\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof DLSN)) {\n+            return false;\n+        }\n \n         DLSN dlsn = (DLSN) o;\n \n-        if (entryId != dlsn.entryId) return false;\n-        if (logSegmentSequenceNo != dlsn.logSegmentSequenceNo) return false;\n-        if (slotId != dlsn.slotId) return false;\n+        if (entryId != dlsn.entryId) {\n+            return false;\n+        }\n+        if (logSegmentSequenceNo != dlsn.logSegmentSequenceNo) {\n+            return false;\n+        }\n+        if (slotId != dlsn.slotId) {\n+            return false;\n+        }\n \n         return true;\n     }\n@@ -238,9 +241,10 @@ public int hashCode() {\n     }\n \n     /**\n-     * Positions to a DLSN greater than the current value - this may not\n-     * correspond to an actual LogRecord, its just used by the positioning logic\n-     * to position the reader\n+     * Positions to a DLSN greater than the current value.\n+     *\n+     * <p>This may not correspond to an actual LogRecord, its just used by the positioning logic\n+     * to position the reader.\n      *\n      * @return the next DLSN\n      */\n@@ -249,9 +253,10 @@ public DLSN getNextDLSN() {\n     }\n \n     /**\n-     * Positions to a DLSN greater than the current value - this may not\n-     * correspond to an actual LogRecord, its just used by the positioning logic\n-     * to position the reader\n+     * Positions to next log segment than the current value.\n+     *\n+     * <p>this may not correspond to an actual LogRecord, its just used by the positioning logic\n+     * to position the reader.\n      *\n      * @return the next DLSN\n      */"},{"sha":"dae8403a82f72181d5c16af483e72ca2e97464d5","filename":"src/main/java/com/twitter/distributedlog/EnvelopedRecordSetReader.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetReader.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,15 +17,19 @@\n  */\n package com.twitter.distributedlog;\n \n+import static com.twitter.distributedlog.LogRecordSet.COMPRESSION_CODEC_LZ4;\n+import static com.twitter.distributedlog.LogRecordSet.METADATA_COMPRESSION_MASK;\n+import static com.twitter.distributedlog.LogRecordSet.METADATA_VERSION_MASK;\n+import static com.twitter.distributedlog.LogRecordSet.NULL_OP_STATS_LOGGER;\n+import static com.twitter.distributedlog.LogRecordSet.VERSION;\n+\n import com.twitter.distributedlog.io.CompressionCodec;\n import com.twitter.distributedlog.io.CompressionUtils;\n-\n import java.io.DataInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.ByteBuffer;\n \n-import static com.twitter.distributedlog.LogRecordSet.*;\n \n /**\n  * Record reader to read records from an enveloped entry buffer.\n@@ -63,8 +67,8 @@ class EnvelopedRecordSetReader implements LogRecordSet.Reader {\n         int metadata = src.readInt();\n         int version = metadata & METADATA_VERSION_MASK;\n         if (version != VERSION) {\n-            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\" +\n-                    \" Required: %d\", version, VERSION));\n+            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\"\n+                + \" Required: %d\", version, VERSION));\n         }\n         int codecCode = metadata & METADATA_COMPRESSION_MASK;\n         this.numRecords = src.readInt();\n@@ -76,7 +80,7 @@ class EnvelopedRecordSetReader implements LogRecordSet.Reader {\n         if (COMPRESSION_CODEC_LZ4 == codecCode) {\n             CompressionCodec codec = CompressionUtils.getCompressionCodec(CompressionCodec.Type.LZ4);\n             byte[] decompressedData = codec.decompress(compressedData, 0, actualDataLen,\n-                    originDataLen, NullOpStatsLogger);\n+                    originDataLen, NULL_OP_STATS_LOGGER);\n             this.reader = ByteBuffer.wrap(decompressedData);\n         } else {\n             if (originDataLen != actualDataLen) {"},{"sha":"7f64a6d52487adc7d5ac3bbdff0a8e636eda3ba5","filename":"src/main/java/com/twitter/distributedlog/EnvelopedRecordSetWriter.java","status":"modified","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FEnvelopedRecordSetWriter.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,32 +17,37 @@\n  */\n package com.twitter.distributedlog;\n \n+import static com.twitter.distributedlog.LogRecord.MAX_LOGRECORD_SIZE;\n+import static com.twitter.distributedlog.LogRecordSet.COMPRESSION_CODEC_LZ4;\n+import static com.twitter.distributedlog.LogRecordSet.COMPRESSION_CODEC_NONE;\n+import static com.twitter.distributedlog.LogRecordSet.HEADER_LEN;\n+import static com.twitter.distributedlog.LogRecordSet.METADATA_COMPRESSION_MASK;\n+import static com.twitter.distributedlog.LogRecordSet.METADATA_VERSION_MASK;\n+import static com.twitter.distributedlog.LogRecordSet.NULL_OP_STATS_LOGGER;\n+import static com.twitter.distributedlog.LogRecordSet.VERSION;\n+\n+import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n+import com.twitter.distributedlog.exceptions.WriteException;\n import com.twitter.distributedlog.io.Buffer;\n import com.twitter.distributedlog.io.CompressionCodec;\n import com.twitter.distributedlog.io.CompressionUtils;\n-import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n-import com.twitter.distributedlog.exceptions.WriteException;\n import com.twitter.util.Promise;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.Channels;\n import java.nio.channels.WritableByteChannel;\n import java.util.LinkedList;\n import java.util.List;\n-\n-import static com.twitter.distributedlog.LogRecord.MAX_LOGRECORD_SIZE;\n-import static com.twitter.distributedlog.LogRecordSet.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * {@link Buffer} based log record set writer.\n  */\n class EnvelopedRecordSetWriter implements LogRecordSet.Writer {\n \n-    static final Logger logger = LoggerFactory.getLogger(EnvelopedRecordSetWriter.class);\n+    private static final Logger logger = LoggerFactory.getLogger(EnvelopedRecordSetWriter.class);\n \n     private final Buffer buffer;\n     private final DataOutputStream writer;\n@@ -158,7 +163,7 @@ ByteBuffer createBuffer() {\n         CompressionCodec compressor =\n                     CompressionUtils.getCompressionCodec(codec);\n         byte[] compressed =\n-                compressor.compress(data, dataOffset, dataLen, NullOpStatsLogger);\n+                compressor.compress(data, dataOffset, dataLen, NULL_OP_STATS_LOGGER);\n \n         ByteBuffer recordSetBuffer;\n         if (compressed.length > dataLen) {"},{"sha":"74df400c3b664d7b31af290aaab1621593b9212d","filename":"src/main/java/com/twitter/distributedlog/LogRecord.java","status":"modified","additions":43,"deletions":32,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecord.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,14 +17,13 @@\n  */\n package com.twitter.distributedlog;\n \n+import com.google.common.annotations.VisibleForTesting;\n import java.io.ByteArrayInputStream;\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n-\n-import com.google.common.annotations.VisibleForTesting;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,38 +40,39 @@\n  *\n  * <h3>User Record</h3>\n  *\n- * User records are the records written by applications and read by applications. They\n+ * <p>User records are the records written by applications and read by applications. They\n  * are constructed via {@link #LogRecord(long, byte[])} by applications and appended to\n  * logs by writers. And they would be deserialized from bytes by the readers and return\n  * to applications.\n  *\n  * <h3>Control Record</h3>\n  *\n- * Control records are special records that written by distributedlog. They are invisible\n+ * <p>Control records are special records that written by distributedlog. They are invisible\n  * to applications. They could be treated as <i>commit requests</i> as what people could find\n  * in distributed consensus algorithms, since they are usually written by distributedlog to\n  * commit application written records. <i>Commit</i> means making application written records\n  * visible to readers to achieve consistent views among them.\n- * <p>\n- * They are named as 'Control Records' for controlling visibility of application written records.\n- * <p>\n- * The transaction id of 'Control Records' are assigned by distributedlog by inheriting from last\n+ *\n+ * <p>They are named as 'Control Records' for controlling visibility of application written records.\n+ *\n+ * <p>The transaction id of 'Control Records' are assigned by distributedlog by inheriting from last\n  * written user records. So we could indicate what user records that a control record is committing\n  * by looking at its transaction id.\n  *\n  * <h4>EndOfStream Record</h4>\n  *\n- * <code>EoS</code>(EndOfStream) is a special control record that would be written by a writer\n+ * <p><code>EoS</code>(EndOfStream) is a special control record that would be written by a writer\n  * to seal a log. After a <i>EoS</i> record is written to a log, no writers could append any record\n  * after that and readers will get {@link com.twitter.distributedlog.exceptions.EndOfStreamException}\n  * when they reach EoS.\n+ *\n  * <p>TransactionID of EoS is <code>Long.MAX_VALUE</code>.\n  *\n  * <h3>Serialization & Deserialization</h3>\n  *\n- * Data type in brackets. Interpretation should be on the basis of data types and not individual\n+ * <p>Data type in brackets. Interpretation should be on the basis of data types and not individual\n  * bytes to honor Endianness.\n- * <p>\n+ *\n  * <pre>\n  * LogRecord structure:\n  * -------------------\n@@ -98,13 +98,14 @@\n  *\n  * <h3>Sequence Numbers</h3>\n  *\n- * A record is associated with three types of sequence numbers. They are generated\n+ * <p>A record is associated with three types of sequence numbers. They are generated\n  * and used for different purposes. Check {@link LogRecordWithDLSN} for more details.\n  *\n  * @see LogRecordWithDLSN\n  */\n public class LogRecord {\n-    static final Logger LOG = LoggerFactory.getLogger(LogRecord.class);\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LogRecord.class);\n \n     // Allow 4K overhead for metadata within the max transmission size\n     public static final int MAX_LOGRECORD_SIZE = 1024 * 1024 - 8 * 1024; //1MB - 8KB\n@@ -131,8 +132,8 @@ public class LogRecord {\n \n     /**\n      * Construct an uninitialized log record.\n-     * <p>\n-     * NOTE: only deserializer should call this constructor.\n+     *\n+     * <p>NOTE: only deserializer should call this constructor.\n      */\n     protected LogRecord() {\n         this.txid = 0;\n@@ -141,6 +142,7 @@ protected LogRecord() {\n \n     /**\n      * Construct a log record with <i>TransactionId</i> and payload.\n+     *\n      * <p>Usually writer would construct the log record for writing.\n      *\n      * @param txid\n@@ -223,8 +225,8 @@ protected long getMetadata() {\n      */\n     void setPositionWithinLogSegment(int positionWithinLogSegment) {\n         assert(positionWithinLogSegment >= 0);\n-        metadata = (metadata & LOGRECORD_METADATA_POSITION_UMASK) |\n-                (((long) positionWithinLogSegment) << LOGRECORD_METADATA_POSITION_SHIFT);\n+        metadata = (metadata & LOGRECORD_METADATA_POSITION_UMASK)\n+            | (((long) positionWithinLogSegment) << LOGRECORD_METADATA_POSITION_SHIFT);\n     }\n \n     /**\n@@ -243,6 +245,7 @@ public int getPositionWithinLogSegment() {\n \n     /**\n      * Get the last position of this record in the log segment.\n+     *\n      * <p>If the record isn't record set, it would be same as {@link #getPositionWithinLogSegment()},\n      * otherwise, it would be {@link #getPositionWithinLogSegment()} + numRecords - 1. If the record set\n      * version is unknown, it would be same as {@link #getPositionWithinLogSegment()}.\n@@ -264,6 +267,7 @@ int getLastPositionWithinLogSegment() {\n \n     /**\n      * Set the record to represent a set of records.\n+     *\n      * <p>The bytes in this record is the serialized format of {@link LogRecordSet}.\n      */\n     public void setRecordSet() {\n@@ -319,6 +323,7 @@ void setEndOfStream() {\n \n     /**\n      * Check if the record is a <code>EoS</code> mark.\n+     *\n      * <p><code>EoS</code> mark is a special record that writer would\n      * add to seal a log. after <code>Eos</code> mark is written,\n      * writers can't write any more records and readers will get\n@@ -356,8 +361,9 @@ private void writeToStream(DataOutputStream out) throws IOException {\n     }\n \n     /**\n-     * The size of the serialized log record, this is used to estimate how much will\n-     * be be appended to the in-memory buffer\n+     * The size of the serialized log record.\n+     *\n+     * <p>This is used to estimate how much will be be appended to the in-memory buffer.\n      *\n      * @return serialized size\n      */\n@@ -367,7 +373,7 @@ int getPersistentSize() {\n     }\n \n     /**\n-     * Class for writing log records\n+     * Writer class to write log records into an output {@code stream}.\n      */\n     public static class Writer {\n         private final DataOutputStream buf;\n@@ -377,7 +383,7 @@ public Writer(DataOutputStream out) {\n         }\n \n         /**\n-         * Write an operation to the output stream\n+         * Write an operation to the output stream.\n          *\n          * @param record The operation to write\n          * @throws IOException if an error occurs during writing.\n@@ -392,8 +398,7 @@ public int getPendingBytes() {\n     }\n \n     /**\n-     * This class is a package private class for reading log records\n-     * from the persistent\n+     * Reader class to read log records from an input {@code stream}.\n       */\n     public static class Reader {\n         private final RecordStream recordStream;\n@@ -405,9 +410,11 @@ public static class Reader {\n         private LogRecordWithDLSN lastRecordSkipTo = null;\n \n         /**\n-         * Construct the reader\n+         * Construct the reader.\n          *\n+         * @param recordStream the record stream for generating {@code DLSN}s.\n          * @param in The stream to read from.\n+         * @param startSequenceId the start sequence id.\n          */\n         public Reader(RecordStream recordStream,\n                       DataInputStream in,\n@@ -426,9 +433,9 @@ public Reader(RecordStream recordStream,\n         }\n \n         /**\n-         * Read an operation from the input stream.\n-         * <p/>\n-         * Note that the objects returned from this method may be re-used by future\n+         * Read an log record from the input stream.\n+         *\n+         * <p/> Note that the objects returned from this method may be re-used by future\n          * calls to the same method.\n          *\n          * @return the operation read from the stream, or null at the end of the file\n@@ -466,9 +473,11 @@ public LogRecordWithDLSN readOp() throws IOException {\n                     nextRecordInStream.readPayload(in);\n                     if (LOG.isTraceEnabled()) {\n                         if (nextRecordInStream.isControl()) {\n-                            LOG.trace(\"Reading {} Control DLSN {}\", recordStream.getName(), nextRecordInStream.getDlsn());\n+                            LOG.trace(\"Reading {} Control DLSN {}\",\n+                                recordStream.getName(), nextRecordInStream.getDlsn());\n                         } else {\n-                            LOG.trace(\"Reading {} Valid DLSN {}\", recordStream.getName(), nextRecordInStream.getDlsn());\n+                            LOG.trace(\"Reading {} Valid DLSN {}\",\n+                                recordStream.getName(), nextRecordInStream.getDlsn());\n                         }\n                     }\n \n@@ -525,7 +534,7 @@ private boolean skipTo(Long txId, DLSN dlsn, boolean skipControl) throws IOExcep\n                         currTxId = lastRecordSkipTo.getTransactionId();\n                     }\n \n-                    if ((null != dlsn) && (recordStream.getCurrentPosition().compareTo(dlsn) >=0)) {\n+                    if ((null != dlsn) && (recordStream.getCurrentPosition().compareTo(dlsn) >= 0)) {\n                         if (LOG.isTraceEnabled()) {\n                             LOG.trace(\"Found position {} beyond {}\", recordStream.getCurrentPosition(), dlsn);\n                         }\n@@ -556,7 +565,8 @@ private boolean skipTo(Long txId, DLSN dlsn, boolean skipControl) throws IOExcep\n                     // get the num of records to skip\n                     if (isRecordSet(flags)) {\n                         // read record set\n-                        LogRecordWithDLSN record = new LogRecordWithDLSN(recordStream.getCurrentPosition(), startSequenceId);\n+                        LogRecordWithDLSN record =\n+                            new LogRecordWithDLSN(recordStream.getCurrentPosition(), startSequenceId);\n                         record.setMetadata(flags);\n                         record.setTransactionId(currTxId);\n                         record.readPayload(in);\n@@ -580,7 +590,8 @@ private boolean skipTo(Long txId, DLSN dlsn, boolean skipControl) throws IOExcep\n                             read += bytesToRead;\n                         }\n                         if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"Skipped Record with TxId {} DLSN {}\", currTxId, recordStream.getCurrentPosition());\n+                            LOG.trace(\"Skipped Record with TxId {} DLSN {}\",\n+                                currTxId, recordStream.getCurrentPosition());\n                         }\n                         recordStream.advance(1);\n                     }"},{"sha":"52970c70b4b8405352199cea38213f8fe5fe8f75","filename":"src/main/java/com/twitter/distributedlog/LogRecordSet.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordSet.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,20 +17,21 @@\n  */\n package com.twitter.distributedlog;\n \n-import com.google.common.base.Preconditions;\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n import com.twitter.distributedlog.exceptions.LogRecordTooLongException;\n import com.twitter.distributedlog.exceptions.WriteException;\n import com.twitter.distributedlog.io.CompressionCodec;\n import com.twitter.util.Promise;\n-import org.apache.bookkeeper.stats.NullStatsLogger;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n \n /**\n  * A set of {@link LogRecord}s.\n+ *\n  * <pre>\n  * Structure:\n  * Bytes 0  -  4                : Metadata (version + flags)\n@@ -56,7 +57,7 @@\n  */\n public class LogRecordSet {\n \n-    static final OpStatsLogger NullOpStatsLogger =\n+    static final OpStatsLogger NULL_OP_STATS_LOGGER =\n             NullStatsLogger.INSTANCE.getOpStatsLogger(\"\");\n \n     public static final int HEADER_LEN =\n@@ -77,7 +78,7 @@ public class LogRecordSet {\n     static final int COMPRESSION_CODEC_LZ4 = 0X1;\n \n     public static int numRecords(LogRecord record) throws IOException {\n-        Preconditions.checkArgument(record.isRecordSet(),\n+        checkArgument(record.isRecordSet(),\n                 \"record is not a recordset\");\n         byte[] data = record.getPayload();\n         return numRecords(data);\n@@ -88,8 +89,8 @@ public static int numRecords(byte[] data) throws IOException {\n         int metadata = buffer.getInt();\n         int version = (metadata & METADATA_VERSION_MASK);\n         if (version != VERSION) {\n-            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\" +\n-                    \" Required: %d\", version, VERSION));\n+            throw new IOException(String.format(\"Version mismatch while reading. Received: %d,\"\n+                + \" Required: %d\", version, VERSION));\n         }\n         return buffer.getInt();\n     }\n@@ -100,7 +101,7 @@ public static Writer newWriter(int initialBufferSize,\n     }\n \n     public static Reader of(LogRecordWithDLSN record) throws IOException {\n-        Preconditions.checkArgument(record.isRecordSet(),\n+        checkArgument(record.isRecordSet(),\n                 \"record is not a recordset\");\n         byte[] data = record.getPayload();\n         DLSN dlsn = record.getDlsn();\n@@ -120,7 +121,7 @@ public static Reader of(LogRecordWithDLSN record) throws IOException {\n     /**\n      * Writer to append {@link LogRecord}s to {@link LogRecordSet}.\n      */\n-    public static interface Writer extends LogRecordSetBuffer {\n+    public interface Writer extends LogRecordSetBuffer {\n \n         /**\n          * Write a {@link LogRecord} to this record set.\n@@ -140,7 +141,7 @@ void writeRecord(ByteBuffer record, Promise<DLSN> transmitPromise)\n     /**\n      * Reader to read {@link LogRecord}s from this record set.\n      */\n-    public static interface Reader {\n+    public interface Reader {\n \n         /**\n          * Read next log record from this record set."},{"sha":"14c8e76ea4fcdce50206cdd56767093af9053134","filename":"src/main/java/com/twitter/distributedlog/LogRecordWithDLSN.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FLogRecordWithDLSN.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -24,30 +24,30 @@\n  *\n  * <h3>Sequence Numbers</h3>\n  *\n- * A log record will be assigned with an unique system generated sequence number {@link DLSN} when it is\n+ * <p>A log record will be assigned with an unique system generated sequence number {@link DLSN} when it is\n  * written to a log. At the mean time, a 64-bits long number is assigned to the record indicates its position\n  * within a log, which is called <code>SequenceId</code>. Besides {@link DLSN} and <code>SequenceID</code>,\n  * application can assign its own sequence number (called <code>TransactionID</code>) to the log record while\n  * writing it.\n  *\n  * <h4>Transaction ID</h4>\n  *\n- * Transaction ID is a positive 64-bits long number that is assigned by the application. It is a very helpful\n+ * <p>Transaction ID is a positive 64-bits long number that is assigned by the application. It is a very helpful\n  * field when application wants to organize the records and position the readers using their own sequencing method.\n  * A typical use case of <code>TransactionID</code> is DistributedLog Write Proxy. It assigns the non-decreasing\n  * timestamps to log records, which the timestamps could be used as `physical time` to implement `TTL` in a strong\n  * consistent database to achieve consistent `TTL` over replicas.\n  *\n  * <h4>DLSN</h4>\n  *\n- * DistributedLog Sequence Number (<i>DLSN</i>) is the sequence number generated during written time. It is comparable\n- * and could be used to figure out the order between records. The DLSN is comprised with 3 components. They are\n- * <i>Log Segment Sequence Number</i>, <i>Entry Id</i> and <i>Slot Id</i>. (See {@link DLSN} for more details).\n+ * <p>DistributedLog Sequence Number (<i>DLSN</i>) is the sequence number generated during written time.\n+ * It is comparable and could be used to figure out the order between records. The DLSN is comprised with 3 components.\n+ * They are <i>Log Segment Sequence Number</i>, <i>Entry Id</i> and <i>Slot Id</i>. (See {@link DLSN} for more details).\n  * The DLSN is usually used for comparison, positioning and truncation.\n  *\n  * <h4>Sequence ID</h4>\n  *\n- * Sequence ID is introduced to address the drawback of <code>DLSN</code>, in favor of answering questions like\n+ * <p>Sequence ID is introduced to address the drawback of <code>DLSN</code>, in favor of answering questions like\n  * `how many records written between two DLSNs`. It is a 64-bits monotonic increasing number (starting from zero).\n  * Sequence ids are only accessible by readers. That means writers don't know the sequence ids of records after they\n  * wrote them.\n@@ -96,12 +96,12 @@ public DLSN getDlsn() {\n \n     @Override\n     public String toString() {\n-        return \"LogRecordWithDLSN{\" +\n-            \"dlsn=\" + dlsn +\n-            \", txid=\" + getTransactionId() +\n-            \", position=\" + getPositionWithinLogSegment() +\n-            \", isControl=\" + isControl() +\n-            \", isEndOfStream=\" + isEndOfStream() +\n-            '}';\n+        return \"LogRecordWithDLSN{\"\n+            + \"dlsn=\" + dlsn\n+            + \", txid=\" + getTransactionId()\n+            + \", position=\" + getPositionWithinLogSegment()\n+            + \", isControl=\" + isControl()\n+            + \", isEndOfStream=\" + isEndOfStream()\n+            + '}';\n     }\n }"},{"sha":"d920ea1a1fa1f01155e057c9029a0ab5daf0df32","filename":"src/main/java/com/twitter/distributedlog/RecordStream.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FRecordStream.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -18,7 +18,7 @@\n package com.twitter.distributedlog;\n \n /**\n- * Stream of records\n+ * A iterator to iterate records in the stream.\n  */\n public interface RecordStream {\n     /**\n@@ -27,14 +27,14 @@ public interface RecordStream {\n     void advance(int numRecords);\n \n     /**\n-     * Get postion of current record in the stream\n+     * Get position of current record in the stream.\n      *\n      * @return position of current record\n      */\n     DLSN getCurrentPosition();\n \n     /**\n-     * Get the name of the stream\n+     * Get the name of the stream.\n      *\n      * @return the name of the stream\n      */"},{"sha":"2859008644a73753629cb3a3431c1b3124e2cfb4","filename":"src/main/java/com/twitter/distributedlog/annotations/DistributedLogAnnotations.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,6 +17,9 @@\n  */\n package com.twitter.distributedlog.annotations;\n \n+/**\n+ * Common annotation types.\n+ */\n public class DistributedLogAnnotations {\n     /**\n      * Annotation to identify flaky tests in DistributedLog."},{"sha":"24bb36b20fd62333cd81de181e1fad53a44dad8a","filename":"src/main/java/com/twitter/distributedlog/annotations/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fannotations%2Fpackage-info.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Defines annotations used across distributedlog project.\n+ */\n+package com.twitter.distributedlog.annotations;\n\\ No newline at end of file"},{"sha":"abbce5f31c16b3e582b7cd3aa3ce081673c3196a","filename":"src/main/java/com/twitter/distributedlog/exceptions/AlreadyClosedException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyClosedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,12 +17,12 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**\n- * Thrown when the distributed log manager has already been closed\n- * (connections have been torn down)\n+ * Thrown when any distributedlog resources have already been closed.\n+ *\n+ * <p>For example, it might be thrown when the connections have been torn down.\n  */\n public class AlreadyClosedException extends DLException {\n "},{"sha":"788b4d8b740a42da78e9673af8bdc82f6ac39e11","filename":"src/main/java/com/twitter/distributedlog/exceptions/AlreadyTruncatedTransactionException.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FAlreadyTruncatedTransactionException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,12 +17,10 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**\n- * Thrown when the transaction Id specified in the API is in the range that has already been\n- * truncated\n+ * Thrown when the transaction Id specified in the API is in the range that has already been truncated.\n  */\n public class AlreadyTruncatedTransactionException extends DLException {\n "},{"sha":"8f29628f2dfe02234d730ddf498b10f0929d5f08","filename":"src/main/java/com/twitter/distributedlog/exceptions/BKTransmitException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FBKTransmitException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,12 +17,12 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**\n- * Thrown when the send to bookkeeper fails\n- * This is thrown by the next attempt to write, send or flush\n+ * Thrown when the send to bookkeeper fails.\n+ *\n+ * <p>This is thrown by the next attempt to write, send or flush\n  */\n public class BKTransmitException extends DLException {\n "},{"sha":"4b67299132566916c5797cc4112db649cc9daa60","filename":"src/main/java/com/twitter/distributedlog/exceptions/ChecksumFailedException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FChecksumFailedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception thrown when checksum failures occurred.\n+ */\n public class ChecksumFailedException extends DLException {\n \n     private static final long serialVersionUID = 288438128880378812L;"},{"sha":"2f506ba9dfee531642a773545d491fced978ff15","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLClientClosedException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLClientClosedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exceptions thrown when a distributedlog client is closed.\n+ */\n public class DLClientClosedException extends DLException {\n \n     private static final long serialVersionUID = -8876218750540927584L;"},{"sha":"23af0c5d2453db7f4081efd969189dee51cf6f5a","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,9 +19,11 @@\n \n import com.twitter.distributedlog.thrift.service.ResponseHeader;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n-\n import java.io.IOException;\n \n+/**\n+ * The basic exception of all distributedlog exceptions.\n+ */\n public class DLException extends IOException {\n     private static final long serialVersionUID = -4485775468586114393L;\n     protected final StatusCode code;"},{"sha":"c80b9db238712333430d858b5fc506eed5d46a97","filename":"src/main/java/com/twitter/distributedlog/exceptions/DLIllegalStateException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FDLIllegalStateException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals that a method has been invoked at an illegal or inappropriate time.\n+ */\n public class DLIllegalStateException extends DLException {\n \n     private static final long serialVersionUID = -6721471104777747420L;"},{"sha":"a62e62996ce8311ae00f7961a8b9828679be274d","filename":"src/main/java/com/twitter/distributedlog/exceptions/EndOfStreamException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FEndOfStreamException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception thrown when a reader reaches end of a sealed log stream.\n+ */\n public class EndOfStreamException extends DLException {\n \n     private static final long serialVersionUID = -6398949401860680263L;"},{"sha":"f984b6c79a78d1ae56210895f8d261588fa6ddff","filename":"src/main/java/com/twitter/distributedlog/exceptions/FlushException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FFlushException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,9 +17,11 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception indicates that errors occurred on flushing data.\n+ */\n public class FlushException extends DLException {\n \n     private final long lastTxIdWritten;"},{"sha":"1f6923a7e768d7989b0682e41a9846aa4e78c37d","filename":"src/main/java/com/twitter/distributedlog/exceptions/IdleReaderException.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FIdleReaderException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,11 @@\n \n import java.io.IOException;\n \n+/**\n+ * An exception is thrown when a log reader becomes idle.\n+ *\n+ * <p>A log reader can become idle when there is no records written to the stream.\n+ */\n public class IdleReaderException extends IOException {\n \n     private static final long serialVersionUID = 4882278671396434834L;"},{"sha":"2aea1527d36b242376ec8a1a9f1fce2a2a801f90","filename":"src/main/java/com/twitter/distributedlog/exceptions/InternalServerException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInternalServerException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception indicates that there is an internal error at distributedlog service side.\n+ */\n public class InternalServerException extends DLException {\n \n     private static final long serialVersionUID = 288438028880978802L;"},{"sha":"09e146c0c01a630987db127f6d4638fa5b23daca","filename":"src/main/java/com/twitter/distributedlog/exceptions/InvalidEnvelopedEntryException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidEnvelopedEntryException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -20,7 +20,7 @@\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**\n- * Exception thrown when encounter invalid enveloped entry\n+ * Exception thrown when encounter invalid enveloped entry.\n  */\n public class InvalidEnvelopedEntryException extends DLException {\n "},{"sha":"1e8f44597ac52298197986cd7c80dd5c046f4974","filename":"src/main/java/com/twitter/distributedlog/exceptions/InvalidStreamNameException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FInvalidStreamNameException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when encountered invalid log stream.\n+ */\n public class InvalidStreamNameException extends DLException {\n \n     private static final long serialVersionUID = 6393315766140568100L;"},{"sha":"98131ee979b8c834a0efc5befc068c42c9a29246","filename":"src/main/java/com/twitter/distributedlog/exceptions/LockCancelledException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockCancelledException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,6 +17,9 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n+/**\n+ * A lock is cancelled when waiting for locking a stream.\n+ */\n public class LockCancelledException extends LockingException {\n \n     private static final long serialVersionUID = -148795017092861106L;"},{"sha":"326a1cd501521ec87752e54d0d7d9515066d6afe","filename":"src/main/java/com/twitter/distributedlog/exceptions/LockingException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLockingException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,9 +17,11 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception when a log writer attempts to acquire a lock to write data to the stream.\n+ */\n public class LockingException extends DLException {\n \n     private static final long serialVersionUID = -4960278188448464473L;"},{"sha":"7dcd644dbc4e7dbe463db8d3de525130046fbf74","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogEmptyException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogEmptyException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,9 +17,11 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exceptions are thrown when attempt to read a log stream that doesn't have any records.\n+ */\n public class LogEmptyException extends DLException {\n \n     private static final long serialVersionUID = -1106184127178002282L;"},{"sha":"e7a0d6d0edae4613a1a0c11c757b5710c9e43de8","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogExistsException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogExistsException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -20,7 +20,7 @@\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**\n- * Log Already Exists\n+ * Exception thrown on creating a log stream but the log stream already exists.\n  */\n public class LogExistsException extends DLException {\n     private static final long serialVersionUID = 1794053581673506784L;"},{"sha":"e2c93e8be5c8f0cf32c536b2e3c912f114861f83","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogNotFoundException.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogNotFoundException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,9 +17,11 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when a reader attempts to read a log stream that doesn't exist.\n+ */\n public class LogNotFoundException extends DLException {\n \n     private static final long serialVersionUID = 871435700699403164L;"},{"sha":"6b08f53f16888a43f0707280738b72768812cc58","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogReadException.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogReadException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,7 +17,6 @@\n  */\n package com.twitter.distributedlog.exceptions;\n \n-import com.twitter.distributedlog.exceptions.DLException;\n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n /**"},{"sha":"76a1aa268d613260b83b42e60da6aa69137c71cc","filename":"src/main/java/com/twitter/distributedlog/exceptions/LogRecordTooLongException.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FLogRecordTooLongException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,11 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when attempting to write a record whose size is too larger.\n+ *\n+ * <p>The size limit of a log record is {@link com.twitter.distributedlog.LogRecord#MAX_LOGRECORD_SIZE}.\n+ */\n public class LogRecordTooLongException extends DLException {\n \n     private static final long serialVersionUID = 2788274084603111386L;"},{"sha":"cb62e7c9affa4656c825566e75f5cb3178116a17","filename":"src/main/java/com/twitter/distributedlog/exceptions/MetadataException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FMetadataException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when encountering metadata errors.\n+ */\n public class MetadataException extends DLException {\n \n     private static final long serialVersionUID = 6683578078046016125L;"},{"sha":"04edb01e8dd1ea7f7959cd68f267fe066af98f87","filename":"src/main/java/com/twitter/distributedlog/exceptions/NotYetImplementedException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FNotYetImplementedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when a method is not implemented yet.\n+ */\n public class NotYetImplementedException extends DLException {\n \n     private static final long serialVersionUID = -6002036746792556106L;"},{"sha":"d564758c75fb19505e22e58be536ea2fb0345a3a","filename":"src/main/java/com/twitter/distributedlog/exceptions/OverCapacityException.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOverCapacityException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,12 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when the system is over capacity.\n+ *\n+ * <p>When this exception is received, the client (either writer or reader) should take actions to not\n+ * overwhelm the system. For example, backoff sending any requests.\n+ */\n public class OverCapacityException extends DLException {\n \n     private static final long serialVersionUID = -6398949404860680263L;"},{"sha":"78163336aadf0cc78bd43651b60c5077d5225b2f","filename":"src/main/java/com/twitter/distributedlog/exceptions/OwnershipAcquireFailedException.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FOwnershipAcquireFailedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,11 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when a log writer attempt to acquire a lock.\n+ *\n+ * <p>It is typically thrown when the lock is already acquired by another writer.\n+ */\n public class OwnershipAcquireFailedException extends LockingException {\n     private static final long serialVersionUID = 8176056926552748001L;\n     private final String currentOwner;"},{"sha":"84d9271a5d39a1c2cb0d4588395661741c594fca","filename":"src/main/java/com/twitter/distributedlog/exceptions/ReadCancelledException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FReadCancelledException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals that a read request has been cancelled.\n+ */\n public class ReadCancelledException extends DLException {\n \n     private static final long serialVersionUID = -6273430297547510262L;"},{"sha":"440d86e30af36cf28dd67a296a9a847affac14a9","filename":"src/main/java/com/twitter/distributedlog/exceptions/RegionUnavailableException.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRegionUnavailableException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,11 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception indicates that the service is not available in one region.\n+ *\n+ * <p>The client should retry the other regions when encountering this exception.\n+ */\n public class RegionUnavailableException extends DLException {\n \n     private static final long serialVersionUID = 5727337162533143957L;"},{"sha":"0a1e1c57556fd88050247864400f08b7867a95cf","filename":"src/main/java/com/twitter/distributedlog/exceptions/RequestDeniedException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRequestDeniedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals that a request has been denied at the server.\n+ */\n public class RequestDeniedException extends DLException {\n \n     private static final long serialVersionUID = 7338220414584728216L;"},{"sha":"5224564d6b4d80e8773483d200fdd457d2cdff4c","filename":"src/main/java/com/twitter/distributedlog/exceptions/RetryableReadException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FRetryableReadException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals that a read request can be retried..\n+ */\n public class RetryableReadException extends DLException {\n \n     private static final long serialVersionUID = 2803207702150642330L;"},{"sha":"29e20d83e8e3fc6151c8ddd28043b678905fc8e0","filename":"src/main/java/com/twitter/distributedlog/exceptions/ServiceUnavailableException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FServiceUnavailableException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception indicates that the service is unavailable at the server side.\n+ */\n public class ServiceUnavailableException extends DLException {\n \n     private static final long serialVersionUID = 6317900286881665746L;"},{"sha":"6cac4689a4aace1448ed4bf09ae82b0137eae434","filename":"src/main/java/com/twitter/distributedlog/exceptions/StreamNotReadyException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamNotReadyException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when a log stream is not ready on server side for serving the write requests.\n+ */\n public class StreamNotReadyException extends DLException {\n \n     private static final long serialVersionUID = 684211282036293028L;"},{"sha":"9872fdc3984221e39784df0d5c4dd526bcbe54f3","filename":"src/main/java/com/twitter/distributedlog/exceptions/StreamUnavailableException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FStreamUnavailableException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception thrown when a stream is not available for serving traffic.\n+ */\n public class StreamUnavailableException extends DLException {\n \n     private static final long serialVersionUID = 684211282036993028L;"},{"sha":"6ee405d5574ef4581654b3814b149062e7d0b158","filename":"src/main/java/com/twitter/distributedlog/exceptions/TooManyStreamsException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTooManyStreamsException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals that a server has been serving too many streams.\n+ */\n public class TooManyStreamsException extends OverCapacityException {\n \n     private static final long serialVersionUID = -6391941401860180163L;"},{"sha":"915525c2e43e17a3729103c2339d8d2173ccfdae","filename":"src/main/java/com/twitter/distributedlog/exceptions/TransactionIdOutOfOrderException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FTransactionIdOutOfOrderException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * An exception is thrown when a log writer attempts to write a record with out-of-order transaction id.\n+ */\n public class TransactionIdOutOfOrderException extends DLException {\n \n     private static final long serialVersionUID = -6239322552103630036L;"},{"sha":"4454cd09185f899a163169c2d53832a233c7fb74","filename":"src/main/java/com/twitter/distributedlog/exceptions/UnexpectedException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnexpectedException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * An {@code UnexpectedException} is thrown when encountering unexpected conditions.\n+ */\n public class UnexpectedException extends DLException {\n \n     private static final long serialVersionUID = 903763128422774055L;"},{"sha":"47c361a4fa9578589d0b2e707cec34b8e6066239","filename":"src/main/java/com/twitter/distributedlog/exceptions/UnsupportedMetadataVersionException.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FUnsupportedMetadataVersionException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,6 +19,9 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Exception is thrown when found unsupported metadata version.\n+ */\n public class UnsupportedMetadataVersionException extends DLException {\n \n     private static final long serialVersionUID = 4980892659955478446L;"},{"sha":"f3adac2034e5e57e5727f570db7fb37a70f0f1ef","filename":"src/main/java/com/twitter/distributedlog/exceptions/WriteCancelledException.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteCancelledException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,14 +19,17 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * Signals when a write request is cancelled.\n+ */\n public class WriteCancelledException extends DLException {\n \n     private static final long serialVersionUID = -1836146493496072122L;\n \n     public WriteCancelledException(String stream, Throwable t) {\n         super(StatusCode.WRITE_CANCELLED_EXCEPTION,\n-            \"Write cancelled on stream \" +\n-            stream + \" due to an earlier error\", t);\n+            \"Write cancelled on stream \"\n+                + stream + \" due to an earlier error\", t);\n     }\n \n     public WriteCancelledException(String stream, String reason) {\n@@ -36,7 +39,7 @@ public WriteCancelledException(String stream, String reason) {\n \n     public WriteCancelledException(String stream) {\n         super(StatusCode.WRITE_CANCELLED_EXCEPTION,\n-            \"Write cancelled on stream \" +\n-            stream + \" due to an earlier error\");\n+            \"Write cancelled on stream \"\n+                + stream + \" due to an earlier error\");\n     }\n }"},{"sha":"77c18d4317facd43be2bfef42ab1f00886ce7e4e","filename":"src/main/java/com/twitter/distributedlog/exceptions/WriteException.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2FWriteException.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -19,13 +19,15 @@\n \n import com.twitter.distributedlog.thrift.service.StatusCode;\n \n+/**\n+ * An exception on writing log records.\n+ */\n public class WriteException extends DLException {\n \n     private static final long serialVersionUID = -1836146493446072122L;\n \n     public WriteException(String stream, String transmitError) {\n         super(StatusCode.WRITE_EXCEPTION,\n-            \"Write rejected because stream \" + stream + \" has encountered an error : \" +\n-                transmitError);\n+            \"Write rejected because stream \" + stream + \" has encountered an error : \" + transmitError);\n     }\n }"},{"sha":"ad027d860b163cb550ac601fed75c6de3ab2700b","filename":"src/main/java/com/twitter/distributedlog/exceptions/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fexceptions%2Fpackage-info.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Defines exceptions used across distributedlog project.\n+ */\n+package com.twitter.distributedlog.exceptions;\n\\ No newline at end of file"},{"sha":"0f1753a8be11720e57dd4a9bf24352442c956f3a","filename":"src/main/java/com/twitter/distributedlog/io/CompressionCodec.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionCodec.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -20,14 +20,13 @@\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n /**\n- * Common interface for compression/decompression operations using different\n- * compression codecs.\n+ * Common interface for compression/decompression operations using different compression codecs.\n  */\n public interface CompressionCodec {\n     /**\n      * Enum specifying the currently supported compression types.\n      */\n-    public static enum Type {\n+    enum Type {\n         NONE, LZ4, UNKNOWN\n     }\n "},{"sha":"255278691978224ce176798698df32546f7179fd","filename":"src/main/java/com/twitter/distributedlog/io/CompressionUtils.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FCompressionUtils.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,13 +17,16 @@\n  */\n package com.twitter.distributedlog.io;\n \n+/**\n+ * Utils for compression related operations.\n+ */\n public class CompressionUtils {\n \n-    public final static String LZ4 = \"lz4\";\n-    public final static String NONE = \"none\";\n+    public static final String LZ4 = \"lz4\";\n+    public static final String NONE = \"none\";\n \n-    private static CompressionCodec identityCodec = new IdentityCompressionCodec();\n-    private static CompressionCodec lz4Codec = new LZ4CompressionCodec();\n+    private static final CompressionCodec IDENTITY_CODEC = new IdentityCompressionCodec();\n+    private static final CompressionCodec LZ4_CODEC = new LZ4CompressionCodec();\n \n     /**\n      * Get a cached compression codec instance for the specified type.\n@@ -32,10 +35,10 @@ public class CompressionUtils {\n      */\n     public static CompressionCodec getCompressionCodec(CompressionCodec.Type type) {\n         if (type == CompressionCodec.Type.LZ4) {\n-            return lz4Codec;\n+            return LZ4_CODEC;\n         }\n         // No Compression\n-        return identityCodec;\n+        return IDENTITY_CODEC;\n     }\n \n     /**"},{"sha":"39952c3a1276cb84636a09a8e9a13d53b8d67f81","filename":"src/main/java/com/twitter/distributedlog/io/IdentityCompressionCodec.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FIdentityCompressionCodec.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,23 +17,26 @@\n  */\n package com.twitter.distributedlog.io;\n \n-import java.util.Arrays;\n-\n-import com.google.common.base.Preconditions;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n+import java.util.Arrays;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n+/**\n+ * An identity compression codec implementation for {@link CompressionCodec}.\n+ */\n public class IdentityCompressionCodec implements CompressionCodec {\n     @Override\n     public byte[] compress(byte[] data, int offset, int length, OpStatsLogger compressionStat) {\n-        Preconditions.checkNotNull(data);\n-        Preconditions.checkArgument(length >= 0);\n+        checkNotNull(data);\n+        checkArgument(length >= 0);\n         return Arrays.copyOfRange(data, offset, offset + length);\n     }\n \n     @Override\n     public byte[] decompress(byte[] data, int offset, int length, OpStatsLogger decompressionStat) {\n-        Preconditions.checkNotNull(data);\n+        checkNotNull(data);\n         return Arrays.copyOfRange(data, offset, offset + length);\n     }\n "},{"sha":"12d6ac4628f594170b9df90fd9845a2994ca761b","filename":"src/main/java/com/twitter/distributedlog/io/LZ4CompressionCodec.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2FLZ4CompressionCodec.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,21 +17,22 @@\n  */\n package com.twitter.distributedlog.io;\n \n-import java.util.concurrent.TimeUnit;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n-import com.google.common.base.Preconditions;\n import com.google.common.base.Stopwatch;\n-\n+import java.util.concurrent.TimeUnit;\n import net.jpountz.lz4.LZ4Compressor;\n import net.jpountz.lz4.LZ4Exception;\n import net.jpountz.lz4.LZ4Factory;\n import net.jpountz.lz4.LZ4FastDecompressor;\n import net.jpountz.lz4.LZ4SafeDecompressor;\n-\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n /**\n- * All functions are thread safe.\n+ * An {@code lz4} based {@link CompressionCodec} implementation.\n+ *\n+ * <p>All functions are thread safe.\n  */\n public class LZ4CompressionCodec implements CompressionCodec {\n \n@@ -50,10 +51,10 @@ public LZ4CompressionCodec() {\n \n     @Override\n     public byte[] compress(byte[] data, int offset, int length, OpStatsLogger compressionStat) {\n-        Preconditions.checkNotNull(data);\n-        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n-        Preconditions.checkArgument(length >= 0);\n-        Preconditions.checkNotNull(compressionStat);\n+        checkNotNull(data);\n+        checkArgument(offset >= 0 && offset < data.length);\n+        checkArgument(length >= 0);\n+        checkNotNull(compressionStat);\n \n         Stopwatch watch = Stopwatch.createStarted();\n         byte[] compressed = compressor.compress(data, offset, length);\n@@ -63,10 +64,10 @@ public byte[] compress(byte[] data, int offset, int length, OpStatsLogger compre\n \n     @Override\n     public byte[] decompress(byte[] data, int offset, int length, OpStatsLogger decompressionStat) {\n-        Preconditions.checkNotNull(data);\n-        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n-        Preconditions.checkArgument(length >= 0);\n-        Preconditions.checkNotNull(decompressionStat);\n+        checkNotNull(data);\n+        checkArgument(offset >= 0 && offset < data.length);\n+        checkArgument(length >= 0);\n+        checkNotNull(decompressionStat);\n \n         Stopwatch watch = Stopwatch.createStarted();\n         // Assume that we have a compression ratio of 1/3.\n@@ -86,11 +87,11 @@ public byte[] decompress(byte[] data, int offset, int length, OpStatsLogger deco\n     // length parameter is ignored here because of the way the fastDecompressor works.\n     public byte[] decompress(byte[] data, int offset, int length, int decompressedSize,\n                              OpStatsLogger decompressionStat) {\n-        Preconditions.checkNotNull(data);\n-        Preconditions.checkArgument(offset >= 0 && offset < data.length);\n-        Preconditions.checkArgument(length >= 0);\n-        Preconditions.checkArgument(decompressedSize >= 0);\n-        Preconditions.checkNotNull(decompressionStat);\n+        checkNotNull(data);\n+        checkArgument(offset >= 0 && offset < data.length);\n+        checkArgument(length >= 0);\n+        checkArgument(decompressedSize >= 0);\n+        checkNotNull(decompressionStat);\n \n         Stopwatch watch = Stopwatch.createStarted();\n         byte[] decompressed = fastDecompressor.decompress(data, offset, decompressedSize);"},{"sha":"bbd9528e88648060f164d86b7780ee9081e3fb11","filename":"src/main/java/com/twitter/distributedlog/io/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fio%2Fpackage-info.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * I/O related utilities used across the project.\n+ */\n+package com.twitter.distributedlog.io;\n\\ No newline at end of file"},{"sha":"8fc526d0adbc52e84975a7cfed4ca529a5e0e4b3","filename":"src/main/java/com/twitter/distributedlog/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fpackage-info.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Provides the core data structures used across multiple modules.\n+ */\n+package com.twitter.distributedlog;\n\\ No newline at end of file"},{"sha":"07d9d269c6f76bf27c2fa7b20cac5648ee097b13","filename":"src/main/java/com/twitter/distributedlog/util/BitMaskUtils.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FBitMaskUtils.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,15 +17,18 @@\n  */\n package com.twitter.distributedlog.util;\n \n-import com.google.common.base.Preconditions;\n+import static com.google.common.base.Preconditions.checkArgument;\n \n+/**\n+ * Utils for bit mask operations.\n+ */\n public class BitMaskUtils {\n \n     /**\n      * 1) Unset all bits where value in mask is set.\n      * 2) Set these bits to value specified by newValue.\n      *\n-     * e.g.\n+     * <p>e.g.\n      * if oldValue = 1010, mask = 0011, newValue = 0001\n      * 1) 1010 -> 1000\n      * 2) 1000 -> 1001\n@@ -36,19 +39,19 @@ public class BitMaskUtils {\n      * @return updated value\n      */\n     public static long set(long oldValue, long mask, long newValue) {\n-        Preconditions.checkArgument(oldValue >= 0L && mask >= 0L && newValue >= 0L);\n+        checkArgument(oldValue >= 0L && mask >= 0L && newValue >= 0L);\n         return ((oldValue & (~mask)) | (newValue & mask));\n     }\n \n     /**\n-     * Get the bits where mask is 1\n+     * Get the bits where mask is 1.\n      *\n      * @param value value\n      * @param mask mask of the value\n      * @return the bit of the mask\n      */\n     public static long get(long value, long mask) {\n-        Preconditions.checkArgument(value >= 0L && mask >= 0L);\n+        checkArgument(value >= 0L && mask >= 0L);\n         return (value & mask);\n     }\n }"},{"sha":"bac5cdd0e0bae7470546fda37982635365a1d630","filename":"src/main/java/com/twitter/distributedlog/util/ProtocolUtils.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FProtocolUtils.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,11 +17,10 @@\n  */\n package com.twitter.distributedlog.util;\n \n-import java.util.zip.CRC32;\n+import static com.google.common.base.Charsets.UTF_8;\n \n import com.twitter.distributedlog.DLSN;\n-\n-import static com.google.common.base.Charsets.UTF_8;\n+import java.util.zip.CRC32;\n \n /**\n  * With CRC embedded in the application, we have to keep track of per api crc. Ideally this"},{"sha":"f95e6661987f8bf20d9eedeb9b0935baffc10b57","filename":"src/main/java/com/twitter/distributedlog/util/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2Fpackage-info.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * defines the utilities used across the project.\n+ */\n+package com.twitter.distributedlog.util;\n\\ No newline at end of file"},{"sha":"551d0ca545e30d0709dd7013adaccb9982ec42f1","filename":"src/test/java/com/twitter/distributedlog/TestDLSN.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDLSN.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,9 +17,14 @@\n  */\n package com.twitter.distributedlog;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n import org.junit.Test;\n-import static org.junit.Assert.*;\n \n+/**\n+ * Test Case for {@link DLSN}.\n+ */\n public class TestDLSN {\n \n     @Test(timeout = 60000)"},{"sha":"4a5fdacf41955fcc958256cfd32d32ac5f95181f","filename":"src/test/java/com/twitter/distributedlog/TestLogRecordSet.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a6a463591a823bd930aa8b921b17cef70ea445c1/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogRecordSet.java?ref=a6a463591a823bd930aa8b921b17cef70ea445c1","patch":"@@ -17,6 +17,13 @@\n  */\n package com.twitter.distributedlog;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+import static com.twitter.distributedlog.LogRecord.MAX_LOGRECORD_SIZE;\n+import static com.twitter.distributedlog.LogRecordSet.HEADER_LEN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n import com.google.common.collect.Lists;\n import com.twitter.distributedlog.LogRecordSet.Reader;\n import com.twitter.distributedlog.LogRecordSet.Writer;\n@@ -25,18 +32,12 @@\n import com.twitter.util.Await;\n import com.twitter.util.Future;\n import com.twitter.util.Promise;\n-import org.junit.Test;\n-\n import java.nio.ByteBuffer;\n import java.util.List;\n-\n-import static com.google.common.base.Charsets.UTF_8;\n-import static com.twitter.distributedlog.LogRecord.*;\n-import static com.twitter.distributedlog.LogRecordSet.*;\n-import static org.junit.Assert.*;\n+import org.junit.Test;\n \n /**\n- * Test Case for {@link LogRecordSet}\n+ * Test Case for {@link LogRecordSet}.\n  */\n public class TestLogRecordSet {\n "}]}