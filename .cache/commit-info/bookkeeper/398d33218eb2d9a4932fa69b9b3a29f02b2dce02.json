{"sha":"398d33218eb2d9a4932fa69b9b3a29f02b2dce02","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjM5OGQzMzIxOGViMmQ5YTQ5MzJmYTY5YjliM2EyOWYwMmIyZGNlMDI=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-08-03T21:00:09Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-08-03T21:00:09Z"},"message":"Issue #377: Make Prometheus stats logger registration idempotent\n\nMake sure the metric are only registered once on Prometheus client lib.\n\nDiscusses in #377.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Enrico Olivelli <None>, Sijie Guo <None>\n\nThis closes #378 from merlimat/fix-metrics-double-registration, closes #377","tree":{"sha":"c38a26f7b68bfab7296db30243a3e25f2393647a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/c38a26f7b68bfab7296db30243a3e25f2393647a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/398d33218eb2d9a4932fa69b9b3a29f02b2dce02","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/398d33218eb2d9a4932fa69b9b3a29f02b2dce02","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/398d33218eb2d9a4932fa69b9b3a29f02b2dce02","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"6c340e06bbc13bd5ce7526f3531a9bab23108776","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6c340e06bbc13bd5ce7526f3531a9bab23108776","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6c340e06bbc13bd5ce7526f3531a9bab23108776"}],"stats":{"total":99,"additions":84,"deletions":15},"files":[{"sha":"1e800874b10452309d5aa271b90db22c4d969a06","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusCounter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java?ref=398d33218eb2d9a4932fa69b9b3a29f02b2dce02","patch":"@@ -28,7 +28,8 @@ public class PrometheusCounter implements Counter {\n     private final Gauge gauge;\n \n     public PrometheusCounter(CollectorRegistry registry, String name) {\n-        this.gauge = Gauge.build().name(Collector.sanitizeMetricName(name)).help(\"-\").create().register(registry);\n+        this.gauge = PrometheusUtil.safeRegister(registry,\n+                Gauge.build().name(Collector.sanitizeMetricName(name)).help(\"-\").create());\n     }\n \n     @Override"},{"sha":"94ad9b0b73ca6bede8269569d917fa82b2abeaeb","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusOpStatsLogger.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java?ref=398d33218eb2d9a4932fa69b9b3a29f02b2dce02","patch":"@@ -30,17 +30,18 @@ public class PrometheusOpStatsLogger implements OpStatsLogger {\n     private final Summary.Child fail;\n \n     public PrometheusOpStatsLogger(CollectorRegistry registry, String name) {\n-        this.summary = Summary.build().name(name).help(\"-\") //\n-                .quantile(0.50, 0.01) //\n-                .quantile(0.75, 0.01) //\n-                .quantile(0.95, 0.01) //\n-                .quantile(0.99, 0.01) //\n-                .quantile(0.999, 0.01) //\n-                .quantile(0.9999, 0.01) //\n-                .quantile(1.0, 0.01) //\n-                .maxAgeSeconds(60) //\n-                .labelNames(\"success\") //\n-                .create().register(registry);\n+        this.summary = PrometheusUtil.safeRegister(registry,\n+                Summary.build().name(name).help(\"-\") //\n+                        .quantile(0.50, 0.01) //\n+                        .quantile(0.75, 0.01) //\n+                        .quantile(0.95, 0.01) //\n+                        .quantile(0.99, 0.01) //\n+                        .quantile(0.999, 0.01) //\n+                        .quantile(0.9999, 0.01) //\n+                        .quantile(1.0, 0.01) //\n+                        .maxAgeSeconds(60) //\n+                        .labelNames(\"success\") //\n+                        .create());\n \n         this.success = summary.labels(\"true\");\n         this.fail = summary.labels(\"false\");"},{"sha":"5e39159bbacbffedcd8b68ddccddd5711d3ba7f8","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java?ref=398d33218eb2d9a4932fa69b9b3a29f02b2dce02","patch":"@@ -45,8 +45,8 @@ public Counter getCounter(String name) {\n \n     @Override\n     public <T extends Number> void registerGauge(String name, Gauge<T> gauge) {\n-        io.prometheus.client.Gauge.build().name(completeName(name)).help(\"-\").create()\n-                .setChild(new io.prometheus.client.Gauge.Child() {\n+        PrometheusUtil.safeRegister(registry, io.prometheus.client.Gauge.build().name(completeName(name)).help(\"-\")\n+                .create().setChild(new io.prometheus.client.Gauge.Child() {\n                     @Override\n                     public double get() {\n                         Number value = null;\n@@ -61,7 +61,7 @@ public double get() {\n                         }\n                         return value.doubleValue();\n                     }\n-                }).register(registry);\n+                }));\n     }\n \n     @Override"},{"sha":"6ccc64527f10e71e20b95ab3c0694a1a9bc1ae64","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusUtil.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/398d33218eb2d9a4932fa69b9b3a29f02b2dce02/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusUtil.java?ref=398d33218eb2d9a4932fa69b9b3a29f02b2dce02","patch":"@@ -0,0 +1,67 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import io.prometheus.client.Collector;\n+import io.prometheus.client.CollectorRegistry;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Container for Prometheus utility methods.\n+ *\n+ */\n+public class PrometheusUtil {\n+\n+    private static final Field collectorsMapField;\n+    private static final Method collectorsNamesMethod;\n+\n+    static {\n+        try {\n+            collectorsMapField = CollectorRegistry.class.getDeclaredField(\"namesToCollectors\");\n+            collectorsMapField.setAccessible(true);\n+\n+            collectorsNamesMethod = CollectorRegistry.class.getDeclaredMethod(\"collectorNames\", String.class);\n+            collectorsNamesMethod.setAccessible(true);\n+\n+        } catch (NoSuchFieldException | SecurityException | NoSuchMethodException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Collector> T safeRegister(CollectorRegistry registry, T collector) {\n+        try {\n+            registry.register(collector);\n+            return collector;\n+        } catch (IllegalArgumentException e) {\n+            // Collector is already registered. Return the existing instance\n+            try {\n+                Map<String, Collector> collectorsMap = (Map<String, Collector>) collectorsMapField.get(registry);\n+                List<String> collectorNames = (List<String>) collectorsNamesMethod.invoke(registry, collector);\n+                return (T) collectorsMap.get(collectorNames.get(0));\n+\n+            } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e1) {\n+                throw new RuntimeException(e1);\n+            }\n+        }\n+    }\n+}"}]}