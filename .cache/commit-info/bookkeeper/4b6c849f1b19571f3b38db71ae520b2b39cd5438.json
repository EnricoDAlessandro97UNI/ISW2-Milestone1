{"sha":"4b6c849f1b19571f3b38db71ae520b2b39cd5438","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjRiNmM4NDlmMWIxOTU3MWYzYjM4ZGI3MWFlNTIwYjJiMzljZDU0Mzg=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2017-01-08T22:01:35Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-08T22:01:35Z"},"message":"DL-83: Add javadoc to website\n\n- update the javadoc plugin to aggregate api by 'core library' and 'proxy service'. (turn some java class to package private and delete unused files. so they won't appear in java doc)\n- improve the website build script to include javadoc\n- update some readme files to include user mail list and slack channel\n\nAuthor: Sijie Guo <sijieg@twitter.com>\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Leigh Stewart <lstewart@apache.org>\n\nCloses #96 from sijie/sijie/merge_website_script","tree":{"sha":"1ba9eb1a553c74e128365d0eb186bc2bf4356613","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/1ba9eb1a553c74e128365d0eb186bc2bf4356613"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/4b6c849f1b19571f3b38db71ae520b2b39cd5438","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4b6c849f1b19571f3b38db71ae520b2b39cd5438","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/4b6c849f1b19571f3b38db71ae520b2b39cd5438","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/4b6c849f1b19571f3b38db71ae520b2b39cd5438/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"361b423a14753a2a8b696fd352115bc87fb9284c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/361b423a14753a2a8b696fd352115bc87fb9284c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/361b423a14753a2a8b696fd352115bc87fb9284c"}],"stats":{"total":215,"additions":34,"deletions":181},"files":[{"sha":"7135755338be7dfd3b2f1c72f51ee5733c14da7f","filename":"src/main/java/com/twitter/distributedlog/subscription/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fsubscription%2Fpackage-info.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -0,0 +1,21 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * Subscription utils for tracking offsets.\n+ */\n+package com.twitter.distributedlog.subscription;\n\\ No newline at end of file"},{"sha":"a1b1d5caa53edccc27a37d7f4a420a00e50906d5","filename":"src/main/java/org/apache/distributedlog/BKAsyncLogWriter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKAsyncLogWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKAsyncLogWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKAsyncLogWriter.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -66,7 +66,7 @@\n  * </ul>\n  * See {@link BKLogSegmentWriter} for segment writer stats.\n  */\n-public class BKAsyncLogWriter extends BKAbstractLogWriter implements AsyncLogWriter {\n+class BKAsyncLogWriter extends BKAbstractLogWriter implements AsyncLogWriter {\n \n     static final Logger LOG = LoggerFactory.getLogger(BKAsyncLogWriter.class);\n "},{"sha":"3919e92dab3a4166a71d3fddeee6a9a2bf2b3691","filename":"src/main/java/org/apache/distributedlog/BKLogHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKLogHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKLogHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FBKLogHandler.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -82,7 +82,7 @@\n  * @see BKLogWriteHandler\n  * @see BKLogReadHandler\n  */\n-public abstract class BKLogHandler implements AsyncCloseable, AsyncAbortable {\n+abstract class BKLogHandler implements AsyncCloseable, AsyncAbortable {\n     static final Logger LOG = LoggerFactory.getLogger(BKLogHandler.class);\n \n     protected final LogMetadata logMetadata;"},{"sha":"4688f4099298d201685960b8bc4022f22e1d5a15","filename":"src/main/java/org/apache/distributedlog/DistributedLogConstants.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FDistributedLogConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FDistributedLogConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FDistributedLogConstants.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -26,6 +26,9 @@\n \n import static com.google.common.base.Charsets.UTF_8;\n \n+/**\n+ * Constants used in DistributedLog.\n+ */\n public class DistributedLogConstants {\n     public static final byte[] EMPTY_BYTES = new byte[0];\n     public static final String SCHEME_PREFIX = \"distributedlog\";"},{"sha":"c08fbeb704d921f101c9c6f627211ca2029f342c","filename":"src/main/java/org/apache/distributedlog/EntryBuffer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEntryBuffer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEntryBuffer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEntryBuffer.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -27,7 +27,7 @@\n  * Write representation of a {@link Entry}.\n  * It is a buffer of log record set, used for transmission.\n  */\n-public interface EntryBuffer extends TransmitListener {\n+interface EntryBuffer extends TransmitListener {\n \n     /**\n      * Return if this record set contains user records."},{"sha":"aed47fc722be17e033905401413bc2eb8045443a","filename":"src/main/java/org/apache/distributedlog/EnvelopedEntry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedEntry.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -67,7 +67,7 @@\n  *      10      : Unused\n  *      11      : Unused\n  */\n-public class EnvelopedEntry {\n+class EnvelopedEntry {\n \n     public static final int VERSION_LENGTH = 1; // One byte long\n     public static final byte VERSION_ONE = 1;"},{"sha":"f94495f20852e755cda0f713722ff4d5f1d0ca9e","filename":"src/main/java/org/apache/distributedlog/LedgerReadPosition.java","status":"removed","additions":0,"deletions":171,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/361b423a14753a2a8b696fd352115bc87fb9284c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLedgerReadPosition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/361b423a14753a2a8b696fd352115bc87fb9284c/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLedgerReadPosition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLedgerReadPosition.java?ref=361b423a14753a2a8b696fd352115bc87fb9284c","patch":"@@ -1,171 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.distributedlog;\n-\n-import java.io.Serializable;\n-import java.util.Comparator;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class LedgerReadPosition {\n-    static final Logger LOG = LoggerFactory.getLogger(LedgerReadPosition.class);\n-\n-    private static enum PartialOrderingComparisonResult {\n-        NotComparable,\n-        GreaterThan,\n-        LessThan,\n-        EqualTo\n-    }\n-\n-    long ledgerId = DistributedLogConstants.UNRESOLVED_LEDGER_ID;\n-    long logSegmentSequenceNo;\n-    long entryId;\n-\n-    public LedgerReadPosition(long ledgerId, long logSegmentSequenceNo, long entryId) {\n-        this.ledgerId = ledgerId;\n-        this.logSegmentSequenceNo = logSegmentSequenceNo;\n-        this.entryId = entryId;\n-    }\n-\n-    public LedgerReadPosition(LedgerReadPosition that) {\n-        this.ledgerId = that.ledgerId;\n-        this.logSegmentSequenceNo = that.logSegmentSequenceNo;\n-        this.entryId = that.entryId;\n-    }\n-\n-\n-    public LedgerReadPosition(final DLSN dlsn) {\n-        this(dlsn.getLogSegmentSequenceNo(), dlsn.getEntryId());\n-    }\n-\n-    public LedgerReadPosition(long logSegmentSequenceNo, long entryId) {\n-        this.logSegmentSequenceNo = logSegmentSequenceNo;\n-        this.entryId = entryId;\n-    }\n-\n-    public long getLedgerId() {\n-        if (DistributedLogConstants.UNRESOLVED_LEDGER_ID == ledgerId) {\n-            LOG.trace(\"Ledger Id is not initialized\");\n-            throw new IllegalStateException(\"Ledger Id is not initialized\");\n-        }\n-        return ledgerId;\n-    }\n-\n-    public long getLogSegmentSequenceNumber() {\n-        return logSegmentSequenceNo;\n-    }\n-\n-    public long getEntryId() {\n-        return entryId;\n-    }\n-\n-    public void advance() {\n-        entryId++;\n-    }\n-\n-    public void positionOnNewLogSegment(long ledgerId, long logSegmentSequenceNo) {\n-        this.ledgerId = ledgerId;\n-        this.logSegmentSequenceNo = logSegmentSequenceNo;\n-        this.entryId = 0L;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"(lid=%d, lseqNo=%d, eid=%d)\", ledgerId, logSegmentSequenceNo, entryId);\n-    }\n-\n-    public boolean definitelyLessThanOrEqualTo(LedgerReadPosition threshold) {\n-        PartialOrderingComparisonResult result = comparePartiallyOrdered(threshold);\n-        return ((result == PartialOrderingComparisonResult.LessThan) ||\n-            (result == PartialOrderingComparisonResult.EqualTo));\n-    }\n-\n-    public boolean definitelyLessThan(LedgerReadPosition threshold) {\n-        PartialOrderingComparisonResult result = comparePartiallyOrdered(threshold);\n-        return result == PartialOrderingComparisonResult.LessThan;\n-    }\n-\n-    private PartialOrderingComparisonResult comparePartiallyOrdered(LedgerReadPosition threshold) {\n-        // If no threshold is passed we cannot make a definitive comparison\n-        if (null == threshold) {\n-            return PartialOrderingComparisonResult.NotComparable;\n-        }\n-\n-        if (this.logSegmentSequenceNo != threshold.logSegmentSequenceNo) {\n-            if (this.logSegmentSequenceNo < threshold.logSegmentSequenceNo) {\n-                return PartialOrderingComparisonResult.LessThan;\n-            } else {\n-                return PartialOrderingComparisonResult.GreaterThan;\n-            }\n-        } else if (this.ledgerId != threshold.ledgerId) {\n-            // When logSegmentSequenceNo is equal we cannot definitely say that this\n-            // position is less than the threshold unless ledgerIds are equal\n-            // since LogSegmentSequenceNumber maybe inferred from transactionIds in older\n-            // versions of the metadata.\n-            return PartialOrderingComparisonResult.NotComparable;\n-        } else if (this.getEntryId() < threshold.getEntryId()) {\n-            return PartialOrderingComparisonResult.LessThan;\n-        } else if (this.getEntryId() > threshold.getEntryId()) {\n-            return PartialOrderingComparisonResult.GreaterThan;\n-        } else {\n-            return PartialOrderingComparisonResult.EqualTo;\n-        }\n-    }\n-\n-    /**\n-     * Comparator for the key portion\n-     */\n-    public static final ReadAheadCacheKeyComparator COMPARATOR = new ReadAheadCacheKeyComparator();\n-\n-    // Only compares the key portion\n-    @Override\n-    public boolean equals(Object other) {\n-        if (!(other instanceof LedgerReadPosition)) {\n-            return false;\n-        }\n-        LedgerReadPosition key = (LedgerReadPosition) other;\n-        return ledgerId == key.ledgerId &&\n-            entryId == key.entryId;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return (int) (ledgerId * 13 ^ entryId * 17);\n-    }\n-\n-    /**\n-     * Compare EntryKey.\n-     */\n-    protected static class ReadAheadCacheKeyComparator implements Comparator<LedgerReadPosition>, Serializable {\n-\n-        private static final long serialVersionUID = 0L;\n-\n-        @Override\n-        public int compare(LedgerReadPosition left, LedgerReadPosition right) {\n-            long ret = left.ledgerId - right.ledgerId;\n-            if (ret == 0) {\n-                ret = left.entryId - right.entryId;\n-            }\n-            return (ret < 0) ? -1 : ((ret > 0) ? 1 : 0);\n-        }\n-    }\n-\n-}\n-\n-"},{"sha":"baf3182e9c01c3f6598601ac27820dc1953f390c","filename":"src/main/java/org/apache/distributedlog/LogReader.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogReader.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -154,11 +154,11 @@\n  *\n  * </pre>\n  *\n- * @see AsyncLogReader\n+ * <p>\n+ * NOTE: Extending {@link AsyncCloseable}: BKSyncLogReader is implemented based on BKAsyncLogReader, exposing\n+ * the {@link AsyncCloseable} interface so the reader could be closed asynchronously\n  *\n- * NOTE:\n- * 1. Extending {@link AsyncCloseable}: BKSyncLogReader is implemented based on BKAsyncLogReader, exposing\n- *    the {@link AsyncCloseable} interface so the reader could be closed asynchronously\n+ * @see AsyncLogReader\n  */\n public interface LogReader extends Closeable, AsyncCloseable {\n "},{"sha":"f94a6e0d1edf1e37ebfeb1e74a419a26f4995d15","filename":"src/main/java/org/apache/distributedlog/ReadAheadEntryReader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FReadAheadEntryReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FReadAheadEntryReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FReadAheadEntryReader.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -63,7 +63,7 @@\n  * NOTE: all the state changes happen in the same thread. All *unsafe* methods should be submitted to the order\n  * scheduler using stream name as the key.\n  */\n-public class ReadAheadEntryReader implements\n+class ReadAheadEntryReader implements\n         AsyncCloseable,\n         LogSegmentListener,\n         LogSegmentEntryReader.StateChangeListener,"},{"sha":"a2109f4ba27326047b065af8aa60da68471e9582","filename":"src/main/java/org/apache/distributedlog/WriteLimiter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FWriteLimiter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/4b6c849f1b19571f3b38db71ae520b2b39cd5438/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FWriteLimiter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FWriteLimiter.java?ref=4b6c849f1b19571f3b38db71ae520b2b39cd5438","patch":"@@ -20,7 +20,7 @@\n import org.apache.distributedlog.exceptions.OverCapacityException;\n import org.apache.distributedlog.util.PermitLimiter;\n \n-public class WriteLimiter {\n+class WriteLimiter {\n \n     String streamName;\n     final PermitLimiter streamLimiter;"}]}