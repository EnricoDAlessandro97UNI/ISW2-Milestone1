{"sha":"10cab08d0a8b4ca4b182554dee95834dc42175d2","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjEwY2FiMDhkMGE4YjRjYTRiMTgyNTU0ZGVlOTU4MzRkYzQyMTc1ZDI=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-04-13T22:51:44Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-13T22:51:44Z"},"message":"BOOKKEEPER-870: Change the default value for bookie settings.\n\n- ENTRY_LOG_SIZE_LIMIT to 1GB\n- increase GC_WAIT_TIME to 10 minutes, since 1 second isn't good for a real production environment\n- FLUSH_INTERVAL to 10 second. lowering this value won't help since the actual checkpoint only happened on entry log file rolling\n- OPEN_FILE_LIMIT to 20000.\n- JOURNAL_MAX_GROUP_WAIT_MSEC to 2 ms. make the default value for low latency\n- READ_ONLY_MODE_ENABLED to true. enable readonly mode by default.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Matteo Merli <mmerli@apache.org>\n\nCloses #35 from sijie/sijie/BOOKKEEPER-870","tree":{"sha":"59bf04ef542ff78393db45c27987dc6b92ecc710","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/59bf04ef542ff78393db45c27987dc6b92ecc710"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/10cab08d0a8b4ca4b182554dee95834dc42175d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/10cab08d0a8b4ca4b182554dee95834dc42175d2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/10cab08d0a8b4ca4b182554dee95834dc42175d2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/10cab08d0a8b4ca4b182554dee95834dc42175d2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"b42d8db2b03079ce65d603d808442297ad759433","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b42d8db2b03079ce65d603d808442297ad759433","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b42d8db2b03079ce65d603d808442297ad759433"}],"stats":{"total":36,"additions":25,"deletions":11},"files":[{"sha":"c717cd8ca3a4b737fea0fb19d535470107b885f5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=10cab08d0a8b4ca4b182554dee95834dc42175d2","patch":"@@ -150,7 +150,7 @@ public ServerConfiguration(AbstractConfiguration conf) {\n      * @return entry logger size limitation\n      */\n     public long getEntryLogSizeLimit() {\n-        return this.getLong(ENTRY_LOG_SIZE_LIMIT, 2 * 1024 * 1024 * 1024L);\n+        return this.getLong(ENTRY_LOG_SIZE_LIMIT, 1 * 1024 * 1024 * 1024L);\n     }\n \n     /**\n@@ -186,12 +186,15 @@ public ServerConfiguration setEntryLogFilePreAllocationEnabled(boolean enabled)\n     }\n \n     /**\n-     * Get Garbage collection wait time\n+     * Get Garbage collection wait time. Default value is 10 minutes.\n+     * The guideline is not to set a too low value for this, if using zookeeper based\n+     * ledger manager. And it would be nice to align with the average lifecyle time of\n+     * ledgers in the system.\n      *\n      * @return gc wait time\n      */\n     public long getGcWaitTime() {\n-        return this.getLong(GC_WAIT_TIME, 1000);\n+        return this.getLong(GC_WAIT_TIME, 600000);\n     }\n \n     /**\n@@ -207,12 +210,14 @@ public ServerConfiguration setGcWaitTime(long gcWaitTime) {\n     }\n \n     /**\n-     * Get flush interval\n+     * Get flush interval. Default value is 10 second. It isn't useful to decrease\n+     * this value, since ledger storage only checkpoints when an entry logger file\n+     * is rolled.\n      *\n      * @return flush interval\n      */\n     public int getFlushInterval() {\n-        return this.getInt(FLUSH_INTERVAL, 100);\n+        return this.getInt(FLUSH_INTERVAL, 10000);\n     }\n \n     /**\n@@ -237,12 +242,12 @@ public int getDeathWatchInterval() {\n     }\n \n     /**\n-     * Get open file limit\n+     * Get open file limit. Default value is 20000.\n      *\n      * @return max number of files to open\n      */\n     public int getOpenFileLimit() {\n-        return this.getInt(OPEN_FILE_LIMIT, 900);\n+        return this.getInt(OPEN_FILE_LIMIT, 20000);\n     }\n \n     /**\n@@ -1090,12 +1095,12 @@ public ServerConfiguration setJournalAdaptiveGroupWrites(boolean enabled) {\n     }\n \n     /**\n-     * Maximum latency to impose on a journal write to achieve grouping\n+     * Maximum latency to impose on a journal write to achieve grouping. Default is 2ms.\n      *\n      * @return max wait for grouping\n      */\n     public long getJournalMaxGroupWaitMSec() {\n-        return getLong(JOURNAL_MAX_GROUP_WAIT_MSEC, 200);\n+        return getLong(JOURNAL_MAX_GROUP_WAIT_MSEC, 2);\n     }\n \n     /**\n@@ -1164,12 +1169,12 @@ public ServerConfiguration setReadOnlyModeEnabled(boolean enabled) {\n     }\n \n     /**\n-     * Get whether read-only mode is enabled. The default is false.\n+     * Get whether read-only mode is enabled. The default is true.\n      *\n      * @return boolean\n      */\n     public boolean isReadOnlyModeEnabled() {\n-        return getBoolean(READ_ONLY_MODE_ENABLED, false);\n+        return getBoolean(READ_ONLY_MODE_ENABLED, true);\n     }\n \n     /**"},{"sha":"e56d566cec3ade9897861e94efff8d758caa257d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestSyncThread.java?ref=10cab08d0a8b4ca4b182554dee95834dc42175d2","patch":"@@ -79,6 +79,7 @@ public void teardownExecutor() {\n     public void testSyncThreadLongShutdown() throws Exception {\n         int flushInterval = 100;\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf.setFlushInterval(flushInterval);\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         LedgerDirsListener listener = new DummyLedgerDirsListener();\n \n@@ -154,6 +155,7 @@ public Boolean call() {\n     public void testSyncThreadSuspension() throws Exception {\n         int flushInterval = 100;\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf.setFlushInterval(flushInterval);\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         LedgerDirsListener listener = new DummyLedgerDirsListener();\n \n@@ -198,6 +200,7 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n     public void testSyncThreadShutdownOnError() throws Exception {\n         int flushInterval = 100;\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf.setFlushInterval(flushInterval);\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         final CountDownLatch fatalLatch = new CountDownLatch(1);\n         LedgerDirsListener listener = new DummyLedgerDirsListener() {\n@@ -229,6 +232,7 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n     public void testSyncThreadDisksFull() throws Exception {\n         int flushInterval = 100;\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf.setFlushInterval(flushInterval);\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         final CountDownLatch diskFullLatch = new CountDownLatch(1);\n         LedgerDirsListener listener = new DummyLedgerDirsListener() {"},{"sha":"9234238c79b327cc457e2e4ed82a6790d6178625","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FTestBKConfiguration.java?ref=10cab08d0a8b4ca4b182554dee95834dc42175d2","patch":"@@ -29,6 +29,7 @@ public static ServerConfiguration newServerConfiguration() {\n         // enable journal format version\n         confReturn.setJournalFormatVersionToWrite(5);\n         confReturn.setAllowLoopback(true);\n+        confReturn.setGcWaitTime(1000);\n         return confReturn;\n     }\n "},{"sha":"0379f44615a3527cd57b6d3ec6802c017d157294","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/10cab08d0a8b4ca4b182554dee95834dc42175d2/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Ftest%2FReadOnlyBookieTest.java?ref=10cab08d0a8b4ca4b182554dee95834dc42175d2","patch":"@@ -178,6 +178,10 @@ public void testBookieShouldTurnWritableFromReadOnly() throws Exception {\n      */\n     @Test(timeout = 60000)\n     public void testBookieShutdownIfReadOnlyModeNotEnabled() throws Exception {\n+        killBookie(1);\n+        baseConf.setReadOnlyModeEnabled(false);\n+        startNewBookie();\n+\n         File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n         assertEquals(\"Only one ledger dir should be present\", 1,\n                 ledgerDirs.length);"}]}