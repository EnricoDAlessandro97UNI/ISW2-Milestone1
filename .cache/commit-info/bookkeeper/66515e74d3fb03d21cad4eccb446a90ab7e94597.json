{"sha":"66515e74d3fb03d21cad4eccb446a90ab7e94597","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjY2NTE1ZTc0ZDNmYjAzZDIxY2FkNGVjY2I0NDZhOTBhYjdlOTQ1OTc=","commit":{"author":{"name":"Rithin","email":"rithin.shetty@salesforce.com","date":"2016-11-29T23:02:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-11-29T23:02:27Z"},"message":"BOOKKEEPER-948: Provide an option to add more ledger/index directorie…\n\n…s to a bookie\n\nThis change allows the addition of new ledger and index directories to a bookie. Thus\nincreasing ts storage capacity. The option is exposed via 'allowStorageExpansion'\nboolean configuration option. Also, the newly added directories need to be empty to be\naccepted. Two new test cases have been added to test this functionality.\n\nAuthor: Rithin <rithin.shetty@salesforce.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nCloses #59 from rithin-shetty/storage_expansion","tree":{"sha":"576abbc73cd40dfa61dc6a3b167acf9f261d5fe5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/576abbc73cd40dfa61dc6a3b167acf9f261d5fe5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/66515e74d3fb03d21cad4eccb446a90ab7e94597","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/66515e74d3fb03d21cad4eccb446a90ab7e94597","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/66515e74d3fb03d21cad4eccb446a90ab7e94597","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/66515e74d3fb03d21cad4eccb446a90ab7e94597/comments","author":{"login":"rithin-shetty","id":19738357,"node_id":"MDQ6VXNlcjE5NzM4MzU3","avatar_url":"https://avatars.githubusercontent.com/u/19738357?v=4","gravatar_id":"","url":"https://api.github.com/users/rithin-shetty","html_url":"https://github.com/rithin-shetty","followers_url":"https://api.github.com/users/rithin-shetty/followers","following_url":"https://api.github.com/users/rithin-shetty/following{/other_user}","gists_url":"https://api.github.com/users/rithin-shetty/gists{/gist_id}","starred_url":"https://api.github.com/users/rithin-shetty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rithin-shetty/subscriptions","organizations_url":"https://api.github.com/users/rithin-shetty/orgs","repos_url":"https://api.github.com/users/rithin-shetty/repos","events_url":"https://api.github.com/users/rithin-shetty/events{/privacy}","received_events_url":"https://api.github.com/users/rithin-shetty/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/95ea4815b5313ea2ab02e5192c9f577d1c0fe24e"}],"stats":{"total":425,"additions":406,"deletions":19},"files":[{"sha":"14c6068fc62f0fe16f70768e08d3a58f63ede19c","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -57,6 +57,10 @@ ledgerDirectories=/tmp/bk-data\n # Directories to store index files. If not specified, will use ledgerDirectories to store.\n # indexDirectories=/tmp/bk-data\n \n+# Allow the expansion of bookie storage capacity. Newly added ledger\n+# and index dirs must be empty.\n+# allowStorageExpansion=false\n+\n # Ledger Manager Class\n # What kind of ledger manager is used to manage how ledgers are stored, managed\n # and garbage collected. Try to read 'BookKeeper Internals' for detail info."},{"sha":"82db3b040cc473bfab3dc360b8ad1831b683fce9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":118,"deletions":8,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -84,6 +84,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Sets;\n \n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY_BYTES;\n@@ -323,10 +324,14 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         if (zk == null) { // exists only for testing, just make sure directories are correct\n             checkDirectoryStructure(journalDirectory);\n             for (File dir : allLedgerDirs) {\n-                    checkDirectoryStructure(dir);\n+                checkDirectoryStructure(dir);\n             }\n             return;\n         }\n+        if (conf.getAllowStorageExpansion()) {\n+            checkEnvironmentWithStorageExpansion(conf, zk, journalDirectory, allLedgerDirs);\n+            return;\n+        }\n         try {\n             boolean newEnv = false;\n             List<File> missedCookieDirs = new ArrayList<File>();\n@@ -343,7 +348,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 newEnv = true;\n                 missedCookieDirs.add(journalDirectory);\n             }\n-            String instanceId = getInstanceId(zk);\n+            String instanceId = getInstanceId(conf, zk);\n             Cookie.Builder builder = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n                 builder.setInstanceId(instanceId);\n@@ -360,26 +365,27 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             checkDirectoryStructure(journalDirectory);\n \n             if(!newEnv){\n-                journalCookie.verify(masterCookie);\n+                masterCookie.verify(journalCookie);\n             }\n             for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n                 try {\n                     Cookie c = Cookie.readFromDirectory(dir);\n-                    c.verify(masterCookie);\n+                    masterCookie.verify(c);\n                 } catch (FileNotFoundException fnf) {\n                     missedCookieDirs.add(dir);\n                 }\n             }\n \n-            if (!newEnv && missedCookieDirs.size() > 0){\n+            if (!newEnv && missedCookieDirs.size() > 0) {\n                 LOG.error(\"Cookie exists in zookeeper, but not in all local directories. \"\n-                        + \" Directories missing cookie file are \" + missedCookieDirs);\n+                          + \" Directories missing cookie file are \" + missedCookieDirs);\n                 throw new BookieException.InvalidCookieException();\n             }\n+\n             if (newEnv) {\n                 if (missedCookieDirs.size() > 0) {\n-                    LOG.debug(\"Directories missing cookie file are {}\", missedCookieDirs);\n+                    LOG.info(\"Directories missing cookie file are {}\", missedCookieDirs);\n                     masterCookie.writeToDirectory(journalDirectory);\n                     for (File dir : allLedgerDirs) {\n                         masterCookie.writeToDirectory(dir);\n@@ -402,6 +408,110 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         }\n     }\n \n+    public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf,\n+            ZooKeeper zk, File journalDirectory, List<File> allLedgerDirs) throws BookieException, IOException {\n+        try {\n+            boolean newEnv = false;\n+            List<File> missedCookieDirs = new ArrayList<File>();\n+            Cookie journalCookie = null;\n+            // try to read cookie from journal directory.\n+            try {\n+                journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                if (journalCookie.isBookieHostCreatedFromIp()) {\n+                    conf.setUseHostNameAsBookieID(false);\n+                } else {\n+                    conf.setUseHostNameAsBookieID(true);\n+                }\n+            } catch (FileNotFoundException fnf) {\n+                newEnv = true;\n+                missedCookieDirs.add(journalDirectory);\n+            }\n+            String instanceId = getInstanceId(conf, zk);\n+            Cookie.Builder builder = Cookie.generateCookie(conf);\n+            if (null != instanceId) {\n+                builder.setInstanceId(instanceId);\n+            }\n+            Cookie masterCookie = builder.build();\n+            Versioned<Cookie> zkCookie = null;\n+            try {\n+                zkCookie = Cookie.readFromZooKeeper(zk, conf);\n+                // If allowStorageExpansion option is set, we should \n+                // make sure that the new set of ledger/index dirs\n+                // is a super set of the old; else, we fail the cookie check\n+                masterCookie.verifyIsSuperSet(zkCookie.getValue());\n+            } catch (KeeperException.NoNodeException nne) {\n+                // can occur in cases:\n+                // 1) new environment or\n+                // 2) done only metadata format and started bookie server.\n+            }\n+            checkDirectoryStructure(journalDirectory);\n+\n+            if(!newEnv){\n+                masterCookie.verifyIsSuperSet(journalCookie);\n+            }\n+\n+            for (File dir : allLedgerDirs) {\n+                checkDirectoryStructure(dir);\n+                try {\n+                    Cookie c = Cookie.readFromDirectory(dir);\n+                    masterCookie.verifyIsSuperSet(c);\n+                } catch (FileNotFoundException fnf) {\n+                    missedCookieDirs.add(dir);\n+                }\n+            }\n+\n+            if (!newEnv && missedCookieDirs.size() > 0) {\n+                // If we find that any of the dirs in missedCookieDirs, existed\n+                // previously, we stop because we could be missing data\n+                // Also, if a new ledger dir is being added, we make sure that\n+                // that dir is empty. Else, we reject the request\n+                Set<String> existingLedgerDirs = Sets.newHashSet(journalCookie.getLedgerDirPathsFromCookie());\n+                List<File> dirsMissingData = new ArrayList<File>();\n+                List<File> nonEmptyDirs = new ArrayList<File>();\n+                for (File dir : missedCookieDirs) {\n+                    if (existingLedgerDirs.contains(dir.getParent())) {\n+                        // if one of the existing ledger dirs doesn't have cookie,\n+                        // let us not proceed further\n+                        dirsMissingData.add(dir);\n+                        continue;\n+                    }\n+                    String[] content = dir.list();\n+                    if (content != null && content.length != 0) {\n+                        nonEmptyDirs.add(dir);\n+                    }\n+                }\n+                if (dirsMissingData.size() > 0 || nonEmptyDirs.size() > 0) {\n+                    LOG.error(\"Either not all local directories have cookies or directories being added \"\n+                            + \" newly are not empty. \"\n+                            + \"Directories missing cookie file are: \" + dirsMissingData\n+                            + \" New directories that are not empty are: \" + nonEmptyDirs);\n+                    throw new BookieException.InvalidCookieException();\n+                }\n+            }\n+\n+            if (missedCookieDirs.size() > 0) {\n+                LOG.info(\"Stamping new cookies on all dirs {}\", missedCookieDirs);\n+                masterCookie.writeToDirectory(journalDirectory);\n+                for (File dir : allLedgerDirs) {\n+                    masterCookie.writeToDirectory(dir);\n+                }\n+                masterCookie.writeToZooKeeper(zk, conf, zkCookie != null ? zkCookie.getVersion() : Version.NEW);\n+            }\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Couldn't access cookie in zookeeper\", ke);\n+            throw new BookieException.InvalidCookieException(ke);\n+        } catch (UnknownHostException uhe) {\n+            LOG.error(\"Couldn't check cookies, networking is broken\", uhe);\n+            throw new BookieException.InvalidCookieException(uhe);\n+        } catch (IOException ioe) {\n+            LOG.error(\"Error accessing cookie on disks\", ioe);\n+            throw new BookieException.InvalidCookieException(ioe);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Thread interrupted while checking cookies, exiting\", ie);\n+            throw new BookieException.InvalidCookieException(ie);\n+        }\n+    }\n+\n     /**\n      * Return the configured address of the bookie.\n      */\n@@ -427,7 +537,7 @@ public static BookieSocketAddress getBookieAddress(ServerConfiguration conf)\n         return addr;\n     }\n \n-    private String getInstanceId(ZooKeeper zk) throws KeeperException,\n+    private static String getInstanceId(ServerConfiguration conf, ZooKeeper zk) throws KeeperException,\n             InterruptedException {\n         String instanceId = null;\n         if (zk.exists(conf.getZkLedgersRootPath(), null) == null) {"},{"sha":"7d63b628c775585be626713ba2220ee160a03e67","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -28,6 +28,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.Arrays;\n import java.util.Formatter;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -79,6 +80,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Lists;\n import com.google.common.util.concurrent.AbstractFuture;\n \n /**\n@@ -107,6 +109,7 @@ public class BookieShell implements Tool {\n     static final String CMD_AUTORECOVERY = \"autorecovery\";\n     static final String CMD_LISTBOOKIES = \"listbookies\";\n     static final String CMD_UPDATECOOKIE = \"updatecookie\";\n+    static final String CMD_EXPANDSTORAGE = \"expandstorage\";\n     static final String CMD_UPDATELEDGER = \"updateledgers\";\n     static final String CMD_HELP = \"help\";\n \n@@ -1385,6 +1388,63 @@ private boolean verifyCookie(Cookie oldCookie, File dir) throws IOException {\n         }\n     }\n \n+    /**\n+     * Expand the storage directories owned by a bookie\n+     */\n+    class ExpandStorageCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        ExpandStorageCmd() {\n+            super(CMD_EXPANDSTORAGE);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Add new empty ledger/index directories. Update the directories\"\n+                   + \"info in the conf file before running the command.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"expandstorage\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) {\n+            ServerConfiguration conf = new ServerConfiguration(bkConf);\n+            ZooKeeper zk;\n+            try {\n+                zk = ZooKeeperClient.newBuilder()\n+                        .connectString(bkConf.getZkServers())\n+                        .sessionTimeoutMs(bkConf.getZkTimeout()).build();\n+            } catch (KeeperException | InterruptedException | IOException e) {\n+                LOG.error(\"Exception while establishing zookeeper connection.\", e);\n+                return -1;\n+            }\n+\n+            List<File> allLedgerDirs = Lists.newArrayList();\n+            allLedgerDirs.addAll(Arrays.asList(ledgerDirectories));\n+            if (indexDirectories != ledgerDirectories) {\n+                allLedgerDirs.addAll(Arrays.asList(indexDirectories));\n+            }\n+\n+            try {\n+                Bookie.checkEnvironmentWithStorageExpansion(conf, zk,\n+                        journalDirectory, allLedgerDirs);\n+            } catch (BookieException | IOException e) {\n+                LOG.error(\n+                        \"Exception while updating cookie for storage expansion\", e);\n+                return -1;\n+            }\n+            return 0;\n+        }\n+    }\n+\n     /**\n      * Update ledger command\n      */\n@@ -1519,6 +1579,7 @@ public interface UpdateLedgerNotifier {\n         commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n         commands.put(CMD_LISTBOOKIES, new ListBookiesCmd());\n         commands.put(CMD_UPDATECOOKIE, new UpdateCookieCmd());\n+        commands.put(CMD_EXPANDSTORAGE, new ExpandStorageCmd());\n         commands.put(CMD_UPDATELEDGER, new UpdateLedgerCmd());\n         commands.put(CMD_HELP, new HelpCmd());\n     }"},{"sha":"1730cd9e0cdeb2e981f0776955528fb2d1e37e9e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":56,"deletions":10,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookie.java?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -34,6 +34,7 @@\n import java.io.StringReader;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n+import java.util.Set;\n \n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -51,6 +52,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Sets;\n import com.google.protobuf.TextFormat;\n \n /**\n@@ -75,6 +77,7 @@ class Cookie {\n     private final String journalDir;\n     private final String ledgerDirs;\n     private final String instanceId;\n+    private static final String SEPARATOR = \"\\t\";\n \n     private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n         this.layoutVersion = layoutVersion;\n@@ -84,15 +87,56 @@ private Cookie(int layoutVersion, String bookieHost, String journalDir, String l\n         this.instanceId = instanceId;\n     }\n \n-    public void verify(Cookie c) throws BookieException.InvalidCookieException {\n+    private static String encodeDirPaths(String[] dirs) {\n+        StringBuilder b = new StringBuilder();\n+        b.append(dirs.length);\n+        for (String d : dirs) {\n+            b.append(SEPARATOR).append(d);\n+        }\n+        return b.toString();\n+    }\n+\n+    private static String[] decodeDirPathFromCookie(String s) {\n+        // the first part of the string contains a count of how many\n+        // directories are present; to skip it, we look for subString\n+        // from the first '/'\n+        return s.substring(s.indexOf(SEPARATOR)+SEPARATOR.length()).split(SEPARATOR);\n+    }\n+\n+    String[] getLedgerDirPathsFromCookie() {\n+        return decodeDirPathFromCookie(ledgerDirs);\n+    }\n+\n+    /**\n+     * Receives 2 String arrays, that each contain a list of directory paths,\n+     * and checks if first is a super set of the second.\n+     *\n+     * @param superSet\n+     * @param subSet\n+     * @return true if s1 is a superSet of s2; false otherwise\n+     */\n+    private boolean isSuperSet(String[] s1, String[] s2) {\n+        Set<String> superSet = Sets.newHashSet(s1);\n+        Set<String> subSet = Sets.newHashSet(s2);\n+        return superSet.containsAll(subSet);\n+    }\n+\n+    private boolean verifyLedgerDirs(Cookie c, boolean checkIfSuperSet) {\n+        if (checkIfSuperSet == false) {\n+            return ledgerDirs.equals(c.ledgerDirs);\n+        } else {\n+            return isSuperSet(decodeDirPathFromCookie(ledgerDirs), decodeDirPathFromCookie(c.ledgerDirs));\n+        }\n+    }\n+\n+    private void verifyInternal(Cookie c, boolean checkIfSuperSet) throws BookieException.InvalidCookieException {\n         String errMsg;\n         if (c.layoutVersion < 3 && c.layoutVersion != layoutVersion) {\n             errMsg = \"Cookie is of too old version \" + c.layoutVersion;\n             LOG.error(errMsg);\n             throw new BookieException.InvalidCookieException(errMsg);\n         } else if (!(c.layoutVersion >= 3 && c.bookieHost.equals(bookieHost)\n-                && c.journalDir.equals(journalDir) && c.ledgerDirs\n-                    .equals(ledgerDirs))) {\n+            && c.journalDir.equals(journalDir) && verifyLedgerDirs(c, checkIfSuperSet))) {\n             errMsg = \"Cookie [\" + this + \"] is not matching with [\" + c + \"]\";\n             throw new BookieException.InvalidCookieException(errMsg);\n         } else if ((instanceId == null && c.instanceId != null)\n@@ -104,6 +148,14 @@ public void verify(Cookie c) throws BookieException.InvalidCookieException {\n         }\n     }\n \n+    public void verify(Cookie c) throws BookieException.InvalidCookieException {\n+        verifyInternal(c, false);\n+    }\n+\n+    public void verifyIsSuperSet(Cookie c) throws BookieException.InvalidCookieException {\n+        verifyInternal(c, true);\n+    }\n+\n     public String toString() {\n         if (layoutVersion <= 3) {\n             return toStringVersion3();\n@@ -275,17 +327,11 @@ public void deleteFromZooKeeper(ZooKeeper zk, AbstractConfiguration conf,\n      */\n     static Builder generateCookie(ServerConfiguration conf)\n             throws UnknownHostException {\n-        StringBuilder b = new StringBuilder();\n-        String[] dirs = conf.getLedgerDirNames();\n-        b.append(dirs.length);\n-        for (String d : dirs) {\n-            b.append(\"\\t\").append(d);\n-        }\n         Builder builder = Cookie.newBuilder();\n         builder.setLayoutVersion(CURRENT_COOKIE_LAYOUT_VERSION);\n         builder.setBookieHost(Bookie.getBookieAddress(conf).toString());\n         builder.setJournalDir(conf.getJournalDirName());\n-        builder.setLedgerDirs(b.toString());\n+        builder.setLedgerDirs(encodeDirPaths(conf.getLedgerDirNames()));\n         return builder;\n     }\n "},{"sha":"6bc118aaa05489d84edf1c57e271b0fe5d02dee3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -84,6 +84,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n     protected final static String LEDGER_DIRS = \"ledgerDirectories\";\n     protected final static String INDEX_DIRS = \"indexDirectories\";\n+    protected final static String ALLOW_STORAGE_EXPANSION = \"allowStorageExpansion\";\n     // NIO Parameters\n     protected final static String SERVER_TCP_NODELAY = \"serverTcpNoDelay\";\n     // Zookeeper Parameters\n@@ -520,6 +521,28 @@ public ServerConfiguration setAllowLoopback(boolean allow) {\n         return this;\n     }\n \n+    /**\n+     * Return whether we should allow addition of ledger/index dirs to an existing bookie.\n+     *\n+     * @return true if the addition is allowed; false otherwise\n+     */\n+    public boolean getAllowStorageExpansion() {\n+        return this.getBoolean(ALLOW_STORAGE_EXPANSION, false);\n+    }\n+\n+    /**\n+     * Change the setting of whether or not we should allow ledger/index\n+     * dirs to be added to the current set of dirs.\n+     *\n+     * @param val - true if new ledger/index dirs can be added; false otherwise.\n+     *\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setAllowStorageExpansion(boolean val) {\n+        this.setProperty(ALLOW_STORAGE_EXPANSION, val);\n+        return this;\n+    }\n+\n     /**\n      * Get dir name to store journal files\n      *"},{"sha":"2288b79c6ffdbafd28eaf66a4c07bfffb1951bde","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":144,"deletions":1,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookieTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/66515e74d3fb03d21cad4eccb446a90ab7e94597/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookieTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCookieTest.java?ref=66515e74d3fb03d21cad4eccb446a90ab7e94597","patch":"@@ -34,9 +34,11 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n import org.junit.Assert;\n-\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -47,6 +49,9 @@\n import org.apache.commons.io.FileUtils;\n import org.junit.Test;\n \n+\n+import com.google.common.collect.Sets;\n+\n public class CookieTest extends BookKeeperClusterTestCase {\n     final int bookiePort = PortManager.nextFreePort();\n \n@@ -194,6 +199,144 @@ public void testDirectoryAdded() throws Exception {\n         b.shutdown();\n     }\n \n+    /**\n+     * Test that if a directory is added to an existing bookie, and\n+     * allowStorageExpansion option is true, the bookie should come online.\n+     */\n+    @Test(timeout=60000)\n+    public void testStorageExpansionOption() throws Exception {\n+        String ledgerDir0 = newDirectory();\n+        String indexDir0 = newDirectory();\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir0 })\n+            .setIndexDirName(new String[] { indexDir0 })\n+            .setBookiePort(bookiePort)\n+            .setAllowStorageExpansion(true);\n+\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+        b = null;\n+\n+        // add a few additional ledger dirs\n+        String[] lPaths = new String[] {ledgerDir0, newDirectory(), newDirectory()};\n+        Set<String> configuredLedgerDirs =  Sets.newHashSet(lPaths);\n+        conf.setLedgerDirNames(lPaths);\n+\n+        // add an extra index dir\n+        String[] iPaths = new String[] {indexDir0, newDirectory()};\n+        Set<String> configuredIndexDirs =  Sets.newHashSet(iPaths);\n+        conf.setIndexDirName(iPaths);\n+\n+        try {\n+            b = new Bookie(conf);\n+        } catch (BookieException.InvalidCookieException ice) {\n+            fail(\"Should have been able to start the bookie\");\n+        }\n+\n+        List<File> l = b.getLedgerDirsManager().getAllLedgerDirs();\n+        HashSet<String> bookieLedgerDirs = Sets.newHashSet();\n+        for (File f : l) {\n+            // Using the parent path because the bookie creates a 'current'\n+            // dir under the ledger dir user provides\n+            bookieLedgerDirs.add(f.getParent());\n+        }\n+        assertTrue(\"Configured ledger dirs: \" + configuredLedgerDirs + \" doesn't match bookie's ledger dirs: \"\n+                   + bookieLedgerDirs,\n+                   configuredLedgerDirs.equals(bookieLedgerDirs));\n+\n+        l = b.getIndexDirsManager().getAllLedgerDirs();\n+        HashSet<String> bookieIndexDirs = Sets.newHashSet();\n+        for (File f : l) {\n+            bookieIndexDirs.add(f.getParent());\n+        }\n+        assertTrue(\"Configured Index dirs: \" + configuredIndexDirs + \" doesn't match bookie's index dirs: \"\n+                   + bookieIndexDirs,\n+                   configuredIndexDirs.equals(bookieIndexDirs));\n+\n+        b.shutdown();\n+\n+        // Make sure that substituting an older ledger directory\n+        // is not allowed.\n+        String[] lPaths2 = new String[] { lPaths[0], lPaths[1], newDirectory() };\n+        conf.setLedgerDirNames(lPaths2);\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Should not have been able to start the bookie\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behavior\n+        }\n+\n+        // Finally make sure that not including the older ledger directories\n+        // is not allowed. Remove one of the older ledger dirs\n+        lPaths2 = new String[] { lPaths[0], lPaths[1] };\n+        conf.setLedgerDirNames(lPaths2);\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Should not have been able to start the bookie\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behavior\n+        }\n+    }\n+\n+    /**\n+     * Test that adding of a non-empty directory is not allowed\n+     * even when allowStorageExpansion option is true\n+     */\n+    @Test(timeout=60000)\n+    public void testNonEmptyDirAddWithStorageExpansionOption() throws Exception {\n+        String ledgerDir0 = newDirectory();\n+        String indexDir0 = newDirectory();\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir0 })\n+            .setIndexDirName(new String[] { indexDir0 })\n+            .setBookiePort(bookiePort)\n+            .setAllowStorageExpansion(true);\n+\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+        b = null;\n+\n+        // add an additional ledger dir\n+        String[] lPaths = new String[] {ledgerDir0, newDirectory()};\n+        conf.setLedgerDirNames(lPaths);\n+\n+        // create a file to make the dir non-empty\n+        File currentDir = Bookie.getCurrentDirectory(new File(lPaths[1]));\n+        new File(currentDir, \"foo\").createNewFile();\n+        assertTrue(currentDir.list().length == 1);\n+\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behavior\n+        }\n+\n+        // Now test with a non-empty index dir\n+        String[] iPaths = new String[] {indexDir0, newDirectory()};\n+        conf.setIndexDirName(iPaths);\n+\n+        // create a dir to make it non-empty\n+        currentDir = Bookie.getCurrentDirectory(new File(iPaths[1]));\n+        new File(currentDir, \"bar\").mkdirs();\n+        assertTrue(currentDir.list().length == 1);\n+\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behavior\n+        }\n+    }\n+\n     /**\n      * Test that if a directory's contents\n      * are emptied, the bookie will fail to start"}]}