{"sha":"0fbb98b3629df18518ab6b2298bdd6fe5f19af7e","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjBmYmI5OGIzNjI5ZGYxODUxOGFiNmIyMjk4YmRkNmZlNWYxOWFmN2U=","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2017-01-11T06:37:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-11T06:37:55Z"},"message":"BOOKKEEPER-991: Get list of disk files\n\nBKShell Command for\nGetting list of DiskFiles -\nJournals/EntryLogs/IndexFiles\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #100 from reddycharan/listfilesondisc","tree":{"sha":"bda8986a65a6001ccb881348d710a4c01cb250e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/bda8986a65a6001ccb881348d710a4c01cb250e6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"15d6f600e7158e2eecb0ae7231455305e5d1ceaa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/15d6f600e7158e2eecb0ae7231455305e5d1ceaa","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/15d6f600e7158e2eecb0ae7231455305e5d1ceaa"}],"stats":{"total":126,"additions":125,"deletions":1},"files":[{"sha":"a83b3a83ef2f86952b4fbeb0ad1445c55f571037","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":125,"deletions":1,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0fbb98b3629df18518ab6b2298bdd6fe5f19af7e/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=0fbb98b3629df18518ab6b2298bdd6fe5f19af7e","patch":"@@ -24,11 +24,17 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileTime;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Enumeration;\n-import java.util.Arrays;\n import java.util.Formatter;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -73,6 +79,7 @@\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.HexDump;\n import org.apache.commons.io.output.ByteArrayOutputStream;\n import org.apache.commons.lang.StringUtils;\n@@ -110,6 +117,7 @@ public class BookieShell implements Tool {\n     static final String CMD_LASTMARK = \"lastmark\";\n     static final String CMD_AUTORECOVERY = \"autorecovery\";\n     static final String CMD_LISTBOOKIES = \"listbookies\";\n+    static final String CMD_LISTFILESONDISC = \"listfilesondisc\";\n     static final String CMD_UPDATECOOKIE = \"updatecookie\";\n     static final String CMD_EXPANDSTORAGE = \"expandstorage\";\n     static final String CMD_UPDATELEDGER = \"updateledgers\";\n@@ -1107,6 +1115,74 @@ Options getOptions() {\n         }\n     }\n \n+    class ListDiskFilesCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        ListDiskFilesCmd() {\n+            super(CMD_LISTFILESONDISC);\n+            opts.addOption(\"txn\", \"journal\", false, \"Print list of Journal Files\");\n+            opts.addOption(\"log\", \"entrylog\", false, \"Print list of EntryLog Files\");\n+            opts.addOption(\"idx\", \"index\", false, \"Print list of Index files\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+\n+            boolean journal = cmdLine.hasOption(\"txn\");\n+            boolean entrylog = cmdLine.hasOption(\"log\");\n+            boolean index = cmdLine.hasOption(\"idx\");\n+            boolean all = false;\n+\n+            if (!journal && !entrylog && !index && !all) {\n+                all = true;\n+            }\n+\n+            if (all || journal) {\n+                File journalDir = bkConf.getJournalDir();\n+                List<File> journalFiles = listFilesAndSort(new File[] { journalDir }, \"txn\");\n+                System.out.println(\"--------- Printing the list of Journal Files ---------\");\n+                for (File journalFile : journalFiles) {\n+                    System.out.println(journalFile.getName());\n+                }\n+                System.out.println();\n+            }\n+            if (all || entrylog) {\n+                File[] ledgerDirs = bkConf.getLedgerDirs();\n+                List<File> ledgerFiles = listFilesAndSort(ledgerDirs, \"log\");\n+                System.out.println(\"--------- Printing the list of EntryLog/Ledger Files ---------\");\n+                for (File ledgerFile : ledgerFiles) {\n+                    System.out.println(ledgerFile.getName());\n+                }\n+                System.out.println();\n+            }\n+            if (all || index) {\n+                File[] indexDirs = (bkConf.getIndexDirs() == null) ? bkConf.getLedgerDirs() : bkConf.getIndexDirs();\n+                List<File> indexFiles = listFilesAndSort(indexDirs, \"idx\");\n+                System.out.println(\"--------- Printing the list of Index Files ---------\");\n+                for (File indexFile : indexFiles) {\n+                    System.out.println(indexFile.getName());\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List the files in JournalDirectory/LedgerDirectories/IndexDirectories\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listfilesondisc  [-journal|-entrylog|-index]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+    }\n+    \n+    \n     /**\n      * Command to print help message\n      */\n@@ -1673,6 +1749,7 @@ public interface UpdateLedgerNotifier {\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n         commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n         commands.put(CMD_LISTBOOKIES, new ListBookiesCmd());\n+        commands.put(CMD_LISTFILESONDISC, new ListDiskFilesCmd());\n         commands.put(CMD_UPDATECOOKIE, new UpdateCookieCmd());\n         commands.put(CMD_EXPANDSTORAGE, new ExpandStorageCmd());\n         commands.put(CMD_UPDATELEDGER, new UpdateLedgerCmd());\n@@ -1729,6 +1806,53 @@ public int run(String[] args) throws Exception {\n         return cmd.runCmd(newArgs);\n     }\n \n+    /**\n+     * Returns the sorted list of the files in the given folders with the given file extensions.\n+     * Sorting is done on the basis of CreationTime if the CreationTime is not available or if they are equal\n+     * then sorting is done by LastModifiedTime  \n+     * @param folderNames - array of folders which we need to look recursively for files with given extensions  \n+     * @param extensions - the file extensions, which we are interested in\n+     * @return sorted list of files\n+     */\n+    private static List<File> listFilesAndSort(File[] folderNames, String... extensions) {\n+        List<File> completeFilesList = new ArrayList<File>();\n+        for (int i = 0; i < folderNames.length; i++) {\n+            Collection<File> filesCollection = FileUtils.listFiles(folderNames[i], extensions, true);\n+            completeFilesList.addAll(filesCollection);\n+        }\n+        Collections.sort(completeFilesList, new FilesTimeComparator());\n+        return completeFilesList;\n+    }\n+    \n+    private static class FilesTimeComparator implements Comparator<File> {\n+        @Override\n+        public int compare(File file1, File file2) {\n+            Path file1Path = Paths.get(file1.getAbsolutePath());\n+            Path file2Path = Paths.get(file2.getAbsolutePath());\n+            try {\n+                BasicFileAttributes file1Attributes = Files.readAttributes(file1Path, BasicFileAttributes.class);\n+                BasicFileAttributes file2Attributes = Files.readAttributes(file2Path, BasicFileAttributes.class);\n+                FileTime file1CreationTime = file1Attributes.creationTime();\n+                FileTime file2CreationTime = file2Attributes.creationTime();\n+                int compareValue = file1CreationTime.compareTo(file2CreationTime);\n+                /* \n+                 * please check https://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/BasicFileAttributes.html#creationTime()\n+                 * So not all file system implementation store creation time, in that case creationTime()\n+                 * method may return FileTime representing the epoch (1970-01-01T00:00:00Z). So in that case \n+                 * it would be better to compare lastModifiedTime \n+                 */\n+                if (compareValue == 0) {\n+                    FileTime file1LastModifiedTime = file1Attributes.lastModifiedTime();\n+                    FileTime file2LastModifiedTime = file2Attributes.lastModifiedTime();\n+                    compareValue = file1LastModifiedTime.compareTo(file2LastModifiedTime);\n+                }\n+                return compareValue;\n+            } catch (IOException e) {                \n+                return 0;\n+            }\n+        }\n+    }\n+\n     public static void main(String argv[]) throws Exception {\n         BookieShell shell = new BookieShell();\n         if (argv.length <= 0) {"}]}