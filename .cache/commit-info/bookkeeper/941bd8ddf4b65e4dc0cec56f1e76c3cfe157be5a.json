{"sha":"941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojk0MWJkOGRkZjRiNjVlNGRjMGNlYzU2ZjFlNzZjM2NmZTE1N2JlNWE=","commit":{"author":{"name":"jiazhai","email":"zhaijia03@gmail.com","date":"2016-09-13T01:51:44Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-09-13T01:51:44Z"},"message":"Add infinite retry policy to zookeeper client used by tests\n\nThis change is to improve the tests running on travis ci\n\nAuthor: jiazhai <zhaijia03@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #25 from jiazhai/zhaijia/fix_federated_namespace","tree":{"sha":"835814fc7402157bf6be9ba0057d7ebc83e00b73","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/835814fc7402157bf6be9ba0057d7ebc83e00b73"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/comments","author":{"login":"zhaijack","id":26834121,"node_id":"MDQ6VXNlcjI2ODM0MTIx","avatar_url":"https://avatars.githubusercontent.com/u/26834121?v=4","gravatar_id":"","url":"https://api.github.com/users/zhaijack","html_url":"https://github.com/zhaijack","followers_url":"https://api.github.com/users/zhaijack/followers","following_url":"https://api.github.com/users/zhaijack/following{/other_user}","gists_url":"https://api.github.com/users/zhaijack/gists{/gist_id}","starred_url":"https://api.github.com/users/zhaijack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhaijack/subscriptions","organizations_url":"https://api.github.com/users/zhaijack/orgs","repos_url":"https://api.github.com/users/zhaijack/repos","events_url":"https://api.github.com/users/zhaijack/events{/privacy}","received_events_url":"https://api.github.com/users/zhaijack/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"a1890ec9992442ca0e051a674df2a130de6fd0a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a1890ec9992442ca0e051a674df2a130de6fd0a9","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a1890ec9992442ca0e051a674df2a130de6fd0a9"}],"stats":{"total":282,"additions":183,"deletions":99},"files":[{"sha":"3565f989707a44996d63b9ef56c8213292cb75c8","filename":"src/main/java/com/twitter/distributedlog/util/RetryPolicyUtils.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FRetryPolicyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FRetryPolicyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FRetryPolicyUtils.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog.util;\n+\n+import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n+import org.apache.bookkeeper.zookeeper.RetryPolicy;\n+\n+/**\n+ * Utils for {@link org.apache.bookkeeper.zookeeper.RetryPolicy}\n+ */\n+public class RetryPolicyUtils {\n+\n+    /**\n+     * Infinite retry policy\n+     */\n+    public static final RetryPolicy DEFAULT_INFINITE_RETRY_POLICY = infiniteRetry(200, 2000);\n+\n+    /**\n+     * Create an infinite retry policy with backoff time between <i>baseBackOffTimeMs</i> and\n+     * <i>maxBackoffTimeMs</i>.\n+     *\n+     * @param baseBackoffTimeMs base backoff time in milliseconds\n+     * @param maxBackoffTimeMs maximum backoff time in milliseconds\n+     * @return an infinite retry policy\n+     */\n+    public static RetryPolicy infiniteRetry(long baseBackoffTimeMs, long maxBackoffTimeMs) {\n+        return new BoundExponentialBackoffRetryPolicy(baseBackoffTimeMs, maxBackoffTimeMs, Integer.MAX_VALUE);\n+    }\n+\n+}"},{"sha":"01c3db4fe9d3bf970f24f4e62899e505f237c86f","filename":"src/test/java/com/twitter/distributedlog/DLMTestUtil.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FDLMTestUtil.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -25,6 +25,7 @@\n import com.twitter.distributedlog.util.ConfUtils;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.PermitLimiter;\n+import com.twitter.distributedlog.util.RetryPolicyUtils;\n import com.twitter.distributedlog.util.Utils;\n import com.twitter.util.Await;\n import com.twitter.util.Duration;\n@@ -140,14 +141,9 @@ static BKLogPartitionWriteHandlerAndClients createNewBKDLM(DistributedLogConfigu\n                                                                int zkPort) throws Exception {\n         URI uri = createDLMURI(zkPort, \"/\" + logName);\n \n-        ZooKeeperClientBuilder zkcBuilder = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClientBuilder zkcBuilder = TestZooKeeperClientBuilder.newBuilder(conf)\n             .name(String.format(\"dlzk:%s:handler_dedicated\", logName))\n-            .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-            .uri(uri)\n-            .statsLogger(NullStatsLogger.INSTANCE.scope(\"dlzk_handler_dedicated\"))\n-            .retryThreadCount(conf.getZKClientNumberRetryThreads())\n-            .requestRateLimit(conf.getZKRequestRateLimit())\n-            .zkAclId(conf.getZkAclId());\n+            .uri(uri);\n \n         ZooKeeperClient zkClient = zkcBuilder.build();\n "},{"sha":"469c01177735eb057616ac3955809855ba2fe504","filename":"src/test/java/com/twitter/distributedlog/TestBKDistributedLogManager.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogManager.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -959,10 +959,8 @@ public void testLogSegmentListener() throws Exception {\n                 new AtomicReference<Collection<LogSegmentMetadata>>();\n \n         DistributedLogManager dlm = createNewDLM(conf, name);\n-        ZooKeeperClient zkClient = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient zkClient = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .sessionTimeoutMs(10000)\n-                .zkAclId(null)\n                 .build();\n \n         BKDistributedLogManager.createLog(conf, zkClient, ((BKDistributedLogManager) dlm).uri, name);\n@@ -1113,10 +1111,9 @@ public void testInvalidStreamFromInvalidZkPath() throws Exception {\n     public void testTruncationValidation() throws Exception {\n         String name = \"distrlog-truncation-validation\";\n         URI uri = createDLMURI(\"/\" + name);\n-        ZooKeeperClient zookeeperClient = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient zookeeperClient = TestZooKeeperClientBuilder.newBuilder()\n             .uri(uri)\n-            .zkAclId(null)\n-            .sessionTimeoutMs(10000).build();\n+            .build();\n         OrderedScheduler scheduler = OrderedScheduler.newBuilder()\n                 .name(\"test-truncation-validation\")\n                 .corePoolSize(1)"},{"sha":"bcc76782da59c7259c40c3261e1a477c8c36f403","filename":"src/test/java/com/twitter/distributedlog/TestBKDistributedLogNamespace.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKDistributedLogNamespace.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -67,10 +67,9 @@ public class TestBKDistributedLogNamespace extends TestDistributedLogBase {\n     @Before\n     public void setup() throws Exception {\n         zooKeeperClient =\n-            ZooKeeperClientBuilder.newBuilder()\n+            TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .zkAclId(null)\n-                .sessionTimeoutMs(10000).build();\n+                .build();\n     }\n \n     @After\n@@ -310,11 +309,9 @@ public void testAclPermsZkAccessConflict() throws Exception {\n         initDlogMeta(namespace, \"test-un\", \"test-stream\");\n         URI uri = createDLMURI(namespace);\n \n-        ZooKeeperClient zkc = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient zkc = TestZooKeeperClientBuilder.newBuilder()\n             .name(\"unpriv\")\n             .uri(uri)\n-            .sessionTimeoutMs(2000)\n-            .zkAclId(null)\n             .build();\n \n         try {\n@@ -340,11 +337,9 @@ public void testAclPermsZkAccessNoConflict() throws Exception {\n         initDlogMeta(namespace, \"test-un\", \"test-stream\");\n         URI uri = createDLMURI(namespace);\n \n-        ZooKeeperClient zkc = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient zkc = TestZooKeeperClientBuilder.newBuilder()\n             .name(\"unpriv\")\n             .uri(uri)\n-            .sessionTimeoutMs(2000)\n-            .zkAclId(null)\n             .build();\n \n         zkc.get().getChildren(uri.getPath() + \"/test-stream\", false, new Stat());"},{"sha":"7e497c4c9d3ea79d9757c3007adf51bcc6a51a7b","filename":"src/test/java/com/twitter/distributedlog/TestBKLogSegmentWriter.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKLogSegmentWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKLogSegmentWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestBKLogSegmentWriter.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -82,16 +82,12 @@ public void setup() throws Exception {\n         lockStateExecutor = OrderedScheduler.newBuilder().corePoolSize(1).build();\n         // build zookeeper client\n         URI uri = createDLMURI(\"\");\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder(conf)\n                 .name(\"test-zkc\")\n-                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-                .zkAclId(conf.getZkAclId())\n                 .uri(uri)\n                 .build();\n-        zkc0 = ZooKeeperClientBuilder.newBuilder()\n+        zkc0 = TestZooKeeperClientBuilder.newBuilder(conf)\n                 .name(\"test-zkc0\")\n-                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-                .zkAclId(conf.getZkAclId())\n                 .uri(uri)\n                 .build();\n         // build bookkeeper client"},{"sha":"1829e5414662ade4f646bc5699ede27f7f52b0ab","filename":"src/test/java/com/twitter/distributedlog/TestLedgerHandleCache.java","status":"modified","additions":19,"deletions":8,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLedgerHandleCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLedgerHandleCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLedgerHandleCache.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -43,10 +43,15 @@ public class TestLedgerHandleCache extends TestDistributedLogBase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n-                .zkServers(zkServers).sessionTimeoutMs(10000).zkAclId(null).build();\n-        bkc = BookKeeperClientBuilder.newBuilder().name(\"bkc\")\n-                .zkc(zkc).ledgersPath(ledgersPath).dlConfig(conf).build();\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n+                .zkServers(zkServers)\n+                .build();\n+        bkc = BookKeeperClientBuilder.newBuilder()\n+                .name(\"bkc\")\n+                .zkc(zkc)\n+                .ledgersPath(ledgersPath)\n+                .dlConfig(conf)\n+                .build();\n     }\n \n     @After\n@@ -79,10 +84,16 @@ public void testOpenLedgerWhenBkcClosed() throws Exception {\n \n     @Test(timeout = 60000, expected = BKException.ZKException.class)\n     public void testOpenLedgerWhenZkClosed() throws Exception {\n-        ZooKeeperClient newZkc = ZooKeeperClientBuilder.newBuilder().zkAclId(null).name(\"zkc-openledger-when-zk-closed\")\n-                .zkServers(zkServers).sessionTimeoutMs(10000).build();\n-        BookKeeperClient newBkc = BookKeeperClientBuilder.newBuilder().name(\"bkc-openledger-when-zk-closed\")\n-                .zkc(newZkc).ledgersPath(ledgersPath).dlConfig(conf).build();\n+        ZooKeeperClient newZkc = TestZooKeeperClientBuilder.newBuilder()\n+                .name(\"zkc-openledger-when-zk-closed\")\n+                .zkServers(zkServers)\n+                .build();\n+        BookKeeperClient newBkc = BookKeeperClientBuilder.newBuilder()\n+                .name(\"bkc-openledger-when-zk-closed\")\n+                .zkc(newZkc)\n+                .ledgersPath(ledgersPath)\n+                .dlConfig(conf)\n+                .build();\n         try {\n             LedgerHandle lh = newBkc.get().createLedger(BookKeeper.DigestType.CRC32, \"zkcClosed\".getBytes(UTF_8));\n             lh.close();"},{"sha":"f652d960cb4b32b6081e3c127dca4b287906f621","filename":"src/test/java/com/twitter/distributedlog/TestLogSegmentMetadata.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestLogSegmentMetadata.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -54,7 +54,9 @@ public class TestLogSegmentMetadata extends ZooKeeperClusterTestCase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder().zkAclId(null).zkServers(zkServers).sessionTimeoutMs(10000).build();\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n+                .zkServers(zkServers)\n+                .build();\n     }\n \n     @After"},{"sha":"e322234ee7befd1a416f0b32a7a1aefaa852bd82","filename":"src/test/java/com/twitter/distributedlog/TestNonBlockingReads.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestNonBlockingReads.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -215,10 +215,8 @@ public void run() {\n \n     private long createStreamWithInconsistentMetadata(String name) throws Exception {\n         DistributedLogManager dlm = createNewDLM(conf, name);\n-        ZooKeeperClient zkClient = ZooKeeperClientBuilder.newBuilder()\n-                .zkAclId(null)\n+        ZooKeeperClient zkClient = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .sessionTimeoutMs(10000)\n                 .build();\n         long txid = 1;\n "},{"sha":"6cb8de700805a59e01746c39beeb169ebe913be9","filename":"src/test/java/com/twitter/distributedlog/TestTruncate.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestTruncate.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -72,9 +72,8 @@ public void testPurgeLogs() throws Exception {\n         List<LogSegmentMetadata> segments = distributedLogManager.getLogSegments();\n         LOG.info(\"Segments before modifying completion time : {}\", segments);\n \n-        ZooKeeperClient zkc = ZooKeeperClientBuilder.newBuilder().zkAclId(null).uri(uri)\n-                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-                .connectionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n+        ZooKeeperClient zkc = TestZooKeeperClientBuilder.newBuilder(conf)\n+                .uri(uri)\n                 .build();\n \n         // Update completion time of first 5 segments\n@@ -198,11 +197,8 @@ public void testOnlyPurgeSegmentsBeforeNoneFullyTruncatedSegment() throws Except\n         List<LogSegmentMetadata> segments = dlm.getLogSegments();\n         LOG.info(\"Segments before modifying segment status : {}\", segments);\n \n-        ZooKeeperClient zkc = ZooKeeperClientBuilder.newBuilder()\n-                .zkAclId(null)\n+        ZooKeeperClient zkc = TestZooKeeperClientBuilder.newBuilder(conf)\n                 .uri(uri)\n-                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-                .connectionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n                 .build();\n         setTruncationStatus(zkc, segments.get(0), TruncationStatus.PARTIALLY_TRUNCATED);\n         for (int i = 1; i < 4; i++) {\n@@ -266,11 +262,8 @@ public void testPartiallyTruncateTruncatedSegments() throws Exception {\n         List<LogSegmentMetadata> segments = dlm.getLogSegments();\n         LOG.info(\"Segments before modifying segment status : {}\", segments);\n \n-        ZooKeeperClient zkc = ZooKeeperClientBuilder.newBuilder()\n-                .zkAclId(null)\n+        ZooKeeperClient zkc = TestZooKeeperClientBuilder.newBuilder(conf)\n                 .uri(uri)\n-                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n-                .connectionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n                 .build();\n         for (int i = 0; i < 4; i++) {\n             LogSegmentMetadata segment = segments.get(i);"},{"sha":"93984f3a2b05f0ebc0f361c1457012abfedfc202","filename":"src/test/java/com/twitter/distributedlog/TestZooKeeperClientBuilder.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestZooKeeperClientBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestZooKeeperClientBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestZooKeeperClientBuilder.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -0,0 +1,57 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.twitter.distributedlog;\n+\n+import com.twitter.distributedlog.util.RetryPolicyUtils;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+\n+/**\n+ * The zookeeper client builder used for testing.\n+ */\n+public class TestZooKeeperClientBuilder {\n+\n+    /**\n+     * Return a zookeeper client builder for testing.\n+     *\n+     * @return a zookeeper client builder\n+     */\n+    public static ZooKeeperClientBuilder newBuilder() {\n+        return ZooKeeperClientBuilder.newBuilder()\n+                .retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY)\n+                .connectionTimeoutMs(10000)\n+                .sessionTimeoutMs(60000)\n+                .zkAclId(null)\n+                .statsLogger(NullStatsLogger.INSTANCE);\n+    }\n+\n+    /**\n+     * Create a zookeeper client builder with provided <i>conf</i> for testing.\n+     *\n+     * @param conf distributedlog configuration\n+     * @return zookeeper client builder\n+     */\n+    public static ZooKeeperClientBuilder newBuilder(DistributedLogConfiguration conf) {\n+        return ZooKeeperClientBuilder.newBuilder()\n+                .retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY)\n+                .sessionTimeoutMs(conf.getZKSessionTimeoutMilliseconds())\n+                .zkAclId(conf.getZkAclId())\n+                .retryThreadCount(conf.getZKClientNumberRetryThreads())\n+                .requestRateLimit(conf.getZKRequestRateLimit())\n+                .statsLogger(NullStatsLogger.INSTANCE);\n+    }\n+}"},{"sha":"ee2968d8c746dd14ac2c3cfbaad3f0e3bf932709","filename":"src/test/java/com/twitter/distributedlog/acl/TestZKAccessControl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControl.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -17,8 +17,8 @@\n  */\n package com.twitter.distributedlog.acl;\n \n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClusterTestCase;\n import com.twitter.distributedlog.thrift.AccessControlEntry;\n import com.twitter.util.Await;\n@@ -39,10 +39,9 @@ public class TestZKAccessControl extends ZooKeeperClusterTestCase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createURI(\"/\"))\n-                .zkAclId(null)\n-                .sessionTimeoutMs(10000).build();\n+                .build();\n     }\n \n     @After"},{"sha":"8ba82f526ff59cf2407edfb88443e37f5a41a8bf","filename":"src/test/java/com/twitter/distributedlog/acl/TestZKAccessControlManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControlManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControlManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Facl%2FTestZKAccessControlManager.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -18,8 +18,8 @@\n package com.twitter.distributedlog.acl;\n \n import com.twitter.distributedlog.DistributedLogConfiguration;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClientUtils;\n import com.twitter.distributedlog.ZooKeeperClusterTestCase;\n import com.twitter.distributedlog.thrift.AccessControlEntry;\n@@ -51,10 +51,9 @@ private URI createURI(String path) {\n     @Before\n     public void setup() throws Exception {\n         executorService = Executors.newSingleThreadScheduledExecutor();\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createURI(\"/\"))\n-                .zkAclId(null)\n-                .sessionTimeoutMs(10000).build();\n+                .build();\n         conf = new DistributedLogConfiguration();\n     }\n "},{"sha":"555b1b0a0e050922e77b0422a68498dcbb2c709e","filename":"src/test/java/com/twitter/distributedlog/admin/TestDLCK.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDLCK.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDLCK.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDLCK.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -24,8 +24,8 @@\n import com.twitter.distributedlog.DistributedLogManager;\n import com.twitter.distributedlog.LogSegmentMetadata;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.metadata.DryrunLogSegmentMetadataStoreUpdater;\n import com.twitter.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import com.twitter.distributedlog.util.SchedulerUtils;\n@@ -60,11 +60,10 @@ public class TestDLCK extends TestDistributedLogBase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder\n+        zkc = TestZooKeeperClientBuilder\n             .newBuilder()\n             .uri(createDLMURI(\"/\"))\n-            .zkAclId(null)\n-            .sessionTimeoutMs(10000).build();\n+            .build();\n     }\n \n     @After"},{"sha":"6e6b83a487cc62bd2a4650f0f2d18eff2d8379d9","filename":"src/test/java/com/twitter/distributedlog/admin/TestDistributedLogAdmin.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDistributedLogAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDistributedLogAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fadmin%2FTestDistributedLogAdmin.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -21,6 +21,7 @@\n import java.util.concurrent.TimeUnit;\n \n import com.twitter.distributedlog.DistributedLogConfiguration;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.annotations.DistributedLogAnnotations;\n import com.twitter.distributedlog.util.Utils;\n import org.apache.zookeeper.CreateMode;\n@@ -40,7 +41,6 @@\n import com.twitter.distributedlog.LogRecordWithDLSN;\n import com.twitter.distributedlog.TestDistributedLogBase;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.metadata.DryrunLogSegmentMetadataStoreUpdater;\n import com.twitter.distributedlog.metadata.LogSegmentMetadataStoreUpdater;\n import com.twitter.util.Await;\n@@ -58,11 +58,9 @@ public class TestDistributedLogAdmin extends TestDistributedLogBase {\n \n     @Before\n     public void setup() throws Exception {\n-        zooKeeperClient = ZooKeeperClientBuilder\n+        zooKeeperClient = TestZooKeeperClientBuilder\n             .newBuilder()\n             .uri(createDLMURI(\"/\"))\n-            .sessionTimeoutMs(10000)\n-            .zkAclId(null)\n             .build();\n         conf.setTraceReadAheadMetadataChanges(true);\n     }"},{"sha":"625742eba6e9c2fad9b9117ca5d9c43e0cb088f5","filename":"src/test/java/com/twitter/distributedlog/bk/TestLedgerAllocator.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocator.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -19,13 +19,13 @@\n \n import com.twitter.distributedlog.BookKeeperClient;\n import com.twitter.distributedlog.BookKeeperClientBuilder;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.annotations.DistributedLogAnnotations;\n import com.twitter.distributedlog.bk.SimpleLedgerAllocator.AllocationException;\n import com.twitter.distributedlog.bk.SimpleLedgerAllocator.Phase;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.TestDistributedLogBase;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.exceptions.ZKException;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.Transaction.OpListener;\n@@ -94,8 +94,10 @@ private URI createURI(String path) {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder().uri(createURI(\"/\"))\n-                .sessionTimeoutMs(10000).zkAclId(null).zkServers(zkServers).build();\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n+                .uri(createURI(\"/\"))\n+                .zkServers(zkServers)\n+                .build();\n         bkc = BookKeeperClientBuilder.newBuilder().name(\"bkc\")\n                 .dlConfig(dlConf).ledgersPath(ledgersPath).zkc(zkc).build();\n     }"},{"sha":"635f2f3f30d01d83dcfd3780af7ab336285a64b9","filename":"src/test/java/com/twitter/distributedlog/bk/TestLedgerAllocatorPool.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fbk%2FTestLedgerAllocatorPool.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -22,8 +22,8 @@\n import com.twitter.distributedlog.BookKeeperClientBuilder;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.Transaction.OpListener;\n import com.twitter.distributedlog.util.Utils;\n@@ -82,8 +82,9 @@ private URI createURI(String path) {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder().uri(createURI(\"/\"))\n-                .sessionTimeoutMs(10000).zkAclId(null).build();\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n+                .uri(createURI(\"/\"))\n+                .build();\n         bkc = BookKeeperClientBuilder.newBuilder().name(\"bkc\")\n                 .dlConfig(dlConf).ledgersPath(ledgersPath).zkc(zkc).build();\n         allocationExecutor = Executors.newSingleThreadScheduledExecutor();"},{"sha":"e09de3e223218e42fc02d0347d8df78d95852ec4","filename":"src/test/java/com/twitter/distributedlog/impl/TestZKLogMetadataStore.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogMetadataStore.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -21,8 +21,8 @@\n import com.google.common.collect.Sets;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.util.FutureUtils;\n import com.twitter.distributedlog.util.OrderedScheduler;\n import com.twitter.distributedlog.util.Utils;\n@@ -57,9 +57,8 @@ public class TestZKLogMetadataStore extends TestDistributedLogBase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         scheduler = OrderedScheduler.newBuilder()"},{"sha":"e4c774b3dabf77a330eb03babf5704cd1bf1b49d","filename":"src/test/java/com/twitter/distributedlog/impl/TestZKLogSegmentMetadataStore.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKLogSegmentMetadataStore.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -22,8 +22,8 @@\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.LogSegmentMetadata;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClientUtils;\n import com.twitter.distributedlog.callback.LogSegmentNamesListener;\n import com.twitter.distributedlog.exceptions.ZKException;\n@@ -98,9 +98,8 @@ private LogSegmentMetadata createLogSegment(\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         scheduler = OrderedScheduler.newBuilder()"},{"sha":"da9f577a0cf07508d8421a3a5d56c4b10532fdd4","filename":"src/test/java/com/twitter/distributedlog/impl/TestZKNamespaceWatcher.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKNamespaceWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKNamespaceWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2FTestZKNamespaceWatcher.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -20,8 +20,8 @@\n import com.google.common.collect.Sets;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClientUtils;\n import com.twitter.distributedlog.callback.NamespaceListener;\n import com.twitter.distributedlog.util.DLUtils;\n@@ -60,9 +60,8 @@ public class TestZKNamespaceWatcher extends TestDistributedLogBase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         scheduler = OrderedScheduler.newBuilder()"},{"sha":"673d856377e7807f922bf3f1238c6d4169ccff64","filename":"src/test/java/com/twitter/distributedlog/impl/federated/TestFederatedZKLogMetadataStore.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FTestFederatedZKLogMetadataStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FTestFederatedZKLogMetadataStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Ffederated%2FTestFederatedZKLogMetadataStore.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -23,6 +23,7 @@\n import com.google.common.collect.Sets;\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.TestDistributedLogBase;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClientUtils;\n@@ -125,9 +126,8 @@ void waitForDone() throws InterruptedException {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createDLMURI(\"/\"))\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         scheduler = OrderedScheduler.newBuilder()\n@@ -203,9 +203,8 @@ public void testMultipleListeners() throws Exception {\n     public void testCreateLog() throws Exception {\n         DistributedLogConfiguration conf = new DistributedLogConfiguration();\n         conf.addConfiguration(baseConf);\n-        ZooKeeperClient anotherZkc = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient anotherZkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(uri)\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         FederatedZKLogMetadataStore anotherMetadataStore =\n@@ -429,9 +428,8 @@ public void testZooKeeperSessionExpired() throws Exception {\n \n         DistributedLogConfiguration anotherConf = new DistributedLogConfiguration();\n         anotherConf.addConfiguration(baseConf);\n-        ZooKeeperClient anotherZkc = ZooKeeperClientBuilder.newBuilder()\n+        ZooKeeperClient anotherZkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(uri)\n-                .zkAclId(null)\n                 .sessionTimeoutMs(zkSessionTimeoutMs)\n                 .build();\n         FederatedZKLogMetadataStore anotherMetadataStore ="},{"sha":"17e9ac7c0082d3eb1edf0c70519a8fa70cf924ec","filename":"src/test/java/com/twitter/distributedlog/impl/metadata/TestZKLogMetadataForWriter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fimpl%2Fmetadata%2FTestZKLogMetadataForWriter.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -17,6 +17,7 @@\n  */\n package com.twitter.distributedlog.impl.metadata;\n \n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.metadata.BKDLConfig;\n import com.twitter.distributedlog.metadata.DLMetadata;\n import com.google.common.collect.Lists;\n@@ -92,11 +93,10 @@ private static void createLog(ZooKeeperClient zk, URI uri, String logName, Strin\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .name(\"zkc\")\n                 .uri(DLMTestUtil.createDLMURI(zkPort, \"/\"))\n                 .sessionTimeoutMs(sessionTimeoutMs)\n-                .zkAclId(null)\n                 .build();\n     }\n "},{"sha":"038f4b36c5f45f1273c875497e4028cc9454dbbe","filename":"src/test/java/com/twitter/distributedlog/metadata/TestLogSegmentMetadataStoreUpdater.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestLogSegmentMetadataStoreUpdater.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -22,6 +22,7 @@\n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.LogRecordWithDLSN;\n import com.twitter.distributedlog.LogSegmentMetadata;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClusterTestCase;\n@@ -59,10 +60,10 @@ public void setup() throws Exception {\n                 .name(\"test-logsegment-metadata-store-updater\")\n                 .corePoolSize(1)\n                 .build();\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createURI(\"/\"))\n-                .zkAclId(null)\n-                .sessionTimeoutMs(10000).build();\n+                .sessionTimeoutMs(10000)\n+                .build();\n         metadataStore = new ZKLogSegmentMetadataStore(conf, zkc, scheduler);\n     }\n "},{"sha":"79fb539e2f52b68c609a181980cc95dd4288af3a","filename":"src/test/java/com/twitter/distributedlog/metadata/TestZkMetadataResolver.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestZkMetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestZkMetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fmetadata%2FTestZkMetadataResolver.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -19,6 +19,7 @@\n \n import com.twitter.distributedlog.DistributedLogConfiguration;\n import com.twitter.distributedlog.DistributedLogConstants;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.util.Utils;\n import com.twitter.distributedlog.ZooKeeperClient;\n import com.twitter.distributedlog.ZooKeeperClientBuilder;\n@@ -47,10 +48,10 @@ public class TestZkMetadataResolver extends ZooKeeperClusterTestCase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .uri(createURI(\"/\"))\n-                .zkAclId(null)\n-                .sessionTimeoutMs(10000).build();\n+                .sessionTimeoutMs(10000)\n+                .build();\n         resolver = new ZkMetadataResolver(zkc);\n     }\n "},{"sha":"081918d30d27a50ec6756f88d91c07ce85bde855","filename":"src/test/java/com/twitter/distributedlog/util/TestUtils.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FTestUtils.java?ref=941bd8ddf4b65e4dc0cec56f1e76c3cfe157be5a","patch":"@@ -19,8 +19,8 @@\n \n import com.google.common.base.Optional;\n import com.twitter.distributedlog.DLMTestUtil;\n+import com.twitter.distributedlog.TestZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClient;\n-import com.twitter.distributedlog.ZooKeeperClientBuilder;\n import com.twitter.distributedlog.ZooKeeperClusterTestCase;\n import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.bookkeeper.versioning.Versioned;\n@@ -47,11 +47,10 @@ public class TestUtils extends ZooKeeperClusterTestCase {\n \n     @Before\n     public void setup() throws Exception {\n-        zkc = ZooKeeperClientBuilder.newBuilder()\n+        zkc = TestZooKeeperClientBuilder.newBuilder()\n                 .name(\"zkc\")\n                 .uri(DLMTestUtil.createDLMURI(zkPort, \"/\"))\n                 .sessionTimeoutMs(sessionTimeoutMs)\n-                .zkAclId(null)\n                 .build();\n     }\n "}]}