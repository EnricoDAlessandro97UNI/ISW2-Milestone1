{"sha":"13a7381f50fea4b9300cd111fdd5b671954fbd7e","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjEzYTczODFmNTBmZWE0YjkzMDBjZDExMWZkZDViNjcxOTU0ZmJkN2U=","commit":{"author":{"name":"Phillip Su","email":"psu@twitter.com","date":"2016-08-23T00:47:28Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-28T00:49:28Z"},"message":"DL-107: Added unregistering gauges for distributedlog-core and distributedlog-benchmark","tree":{"sha":"2f343fcc2b7218549de17880f600770031688b78","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/2f343fcc2b7218549de17880f600770031688b78"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/13a7381f50fea4b9300cd111fdd5b671954fbd7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/13a7381f50fea4b9300cd111fdd5b671954fbd7e","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/13a7381f50fea4b9300cd111fdd5b671954fbd7e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/13a7381f50fea4b9300cd111fdd5b671954fbd7e/comments","author":null,"committer":null,"parents":[{"sha":"b42a8c34511612bef539d30d7ade5f68234297af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b42a8c34511612bef539d30d7ade5f68234297af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b42a8c34511612bef539d30d7ade5f68234297af"}],"stats":{"total":143,"additions":113,"deletions":30},"files":[{"sha":"0df2f1c55f8dafc54634e712296cf49973c9745d","filename":"src/main/java/com/twitter/distributedlog/BKDistributedLogNamespace.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKDistributedLogNamespace.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -1079,6 +1079,10 @@ public void close() {\n             LOG.info(\"Ledger Allocator stopped.\");\n         }\n \n+        // Unregister gauge to avoid GC spiral\n+        ((LimitedPermitManager)this.logSegmentRollingPermitManager).unregisterGauge();\n+        ((SimplePermitLimiter)this.writeLimiter).unregisterGauge();\n+\n         // Shutdown log segment metadata stores\n         Utils.close(writerSegmentMetadataStore);\n         Utils.close(readerSegmentMetadataStore);"},{"sha":"74cd6cfdaca01cfe843a528f2f2444dfef94d360","filename":"src/main/java/com/twitter/distributedlog/ZooKeeperClient.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FZooKeeperClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FZooKeeperClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FZooKeeperClient.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -395,6 +395,8 @@ public synchronized void close() {\n         }\n         LOG.info(\"Close zookeeper client {}.\", name);\n         closeInternal();\n+        // unregister gauges to prevent GC spiral\n+        this.watcherManager.unregisterGauges();\n         closed = true;\n     }\n }"},{"sha":"39a627f67d82b2cf000a3014ed034f9df7e05146","filename":"src/main/java/com/twitter/distributedlog/readahead/ReadAheadTracker.java","status":"modified","additions":26,"deletions":6,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadTracker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadTracker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadTracker.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -32,13 +32,22 @@ public class ReadAheadTracker {\n     final AtomicLong ticks = new AtomicLong(0);\n     // which phase that the worker is in.\n     ReadAheadPhase phase;\n+    private final StatsLogger statsLogger;\n+    // Gauges and their labels\n+    private static final String phaseGaugeLabel = \"phase\";\n+    private final Gauge<Number> phaseGauge;\n+    private static final String ticksGaugeLabel = \"ticks\";\n+    private final Gauge<Number> ticksGauge;\n+    private static final String cachEntriesGaugeLabel = \"cache_entries\";\n+    private final Gauge<Number> cacheEntriesGauge;\n \n     ReadAheadTracker(String streamName,\n                      final ReadAheadCache cache,\n                      ReadAheadPhase initialPhase,\n                      StatsLogger statsLogger) {\n+        this.statsLogger = statsLogger;\n         this.phase = initialPhase;\n-        statsLogger.registerGauge(\"phase\", new Gauge<Number>() {\n+        phaseGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return ReadAheadPhase.SCHEDULE_READAHEAD.getCode();\n@@ -48,8 +57,10 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return phase.getCode();\n             }\n-        });\n-        statsLogger.registerGauge(\"ticks\", new Gauge<Number>() {\n+        };\n+        this.statsLogger.registerGauge(phaseGaugeLabel, phaseGauge);\n+\n+        ticksGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -59,8 +70,10 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return ticks.get();\n             }\n-        });\n-        statsLogger.registerGauge(\"cache_entries\", new Gauge<Number>() {\n+        };\n+        this.statsLogger.registerGauge(ticksGaugeLabel, ticksGauge);\n+\n+        cacheEntriesGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -70,7 +83,8 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return cache.getNumCachedRecords();\n             }\n-        });\n+        };\n+        this.statsLogger.registerGauge(cachEntriesGaugeLabel, cacheEntriesGauge);\n     }\n \n     ReadAheadPhase getPhase() {\n@@ -81,4 +95,10 @@ public void enterPhase(ReadAheadPhase readAheadPhase) {\n         this.ticks.incrementAndGet();\n         this.phase = readAheadPhase;\n     }\n+\n+    public void unregisterGauge() {\n+        this.statsLogger.unregisterGauge(phaseGaugeLabel, phaseGauge);\n+        this.statsLogger.unregisterGauge(ticksGaugeLabel, ticksGauge);\n+        this.statsLogger.unregisterGauge(cachEntriesGaugeLabel, cacheEntriesGauge);\n+    }\n }"},{"sha":"83a34a30c813bcc888fdb03abcb7a06415d8d6b1","filename":"src/main/java/com/twitter/distributedlog/readahead/ReadAheadWorker.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Freadahead%2FReadAheadWorker.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -356,6 +356,8 @@ public void start(List<LogSegmentMetadata> segmentList) {\n     public Future<Void> asyncClose() {\n         LOG.info(\"Stopping Readahead worker for {}\", fullyQualifiedName);\n         running = false;\n+        // Unregister associated gauages to prevent GC spiral\n+        this.tracker.unregisterGauge();\n \n         // Aside from unfortunate naming of variables, this allows\n         // the currently active long poll to be interrupted and completed"},{"sha":"4b917b28237deecc3ed9cf3eef0dda2cf55246ee","filename":"src/main/java/com/twitter/distributedlog/util/LimitedPermitManager.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FLimitedPermitManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FLimitedPermitManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FLimitedPermitManager.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -68,6 +68,8 @@ public boolean isAllowed() {\n     final TimeUnit timeUnit;\n     final ScheduledExecutorService executorService;\n     final AtomicInteger epoch = new AtomicInteger(0);\n+    private StatsLogger statsLogger = null;\n+    private Gauge<Number> outstandingGauge = null;\n \n     public LimitedPermitManager(int concurrency, int period, TimeUnit timeUnit,\n                                 ScheduledExecutorService executorService) {\n@@ -84,7 +86,8 @@ public LimitedPermitManager(final int concurrency, int period, TimeUnit timeUnit\n         this.period = period;\n         this.timeUnit = timeUnit;\n         this.executorService = executorService;\n-        statsLogger.scope(\"permits\").registerGauge(\"outstanding\", new Gauge<Number>() {\n+        this.statsLogger = statsLogger;\n+        this.outstandingGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -94,7 +97,8 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return null == semaphore ? 0 : concurrency - semaphore.availablePermits();\n             }\n-        });\n+        };\n+        this.statsLogger.scope(\"permits\").registerGauge(\"outstanding\", this.outstandingGauge);\n     }\n \n     @Override\n@@ -176,4 +180,10 @@ public void process(WatchedEvent event) {\n             }\n         }\n     }\n+\n+    public void unregisterGauge() {\n+        if(this.statsLogger != null && this.outstandingGauge != null) {\n+            this.statsLogger.scope(\"permits\").unregisterGauge(\"outstanding\", this.outstandingGauge);\n+        }\n+    }\n }"},{"sha":"512a456b10d93fd89eac3867107031323db5f60d","filename":"src/main/java/com/twitter/distributedlog/util/MonitoredScheduledThreadPoolExecutor.java","status":"modified","additions":29,"deletions":13,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FMonitoredScheduledThreadPoolExecutor.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -110,18 +110,25 @@ public T call() throws Exception {\n     protected final boolean traceTaskExecution;\n     protected final OpStatsLogger taskExecutionStats;\n     protected final OpStatsLogger taskPendingStats;\n+    protected final StatsLogger statsLogger;\n+    // Gauges and their labels\n+    private static final String pendingTasksGaugeLabel = \"pending_tasks\";\n+    private final Gauge<Number> pendingTasksGauge;\n+    private static final String completedTasksGaugeLabel = \"completed_tasks\";\n+    protected final Gauge<Number> completedTasksGauge;\n+    private static final String totalTasksGaugeLabel = \"total_tasks\";\n+    protected final Gauge<Number> totalTasksGauge;\n \n     public MonitoredScheduledThreadPoolExecutor(int corePoolSize,\n                                                 ThreadFactory threadFactory,\n                                                 StatsLogger statsLogger,\n                                                 boolean traceTaskExecution) {\n         super(corePoolSize, threadFactory);\n         this.traceTaskExecution = traceTaskExecution;\n-\n-        this.taskPendingStats = statsLogger.getOpStatsLogger(\"task_pending_time\");\n-        this.taskExecutionStats = statsLogger.getOpStatsLogger(\"task_execution_time\");\n-        // outstanding tasks\n-        statsLogger.registerGauge(\"pending_tasks\", new Gauge<Number>() {\n+        this.statsLogger = statsLogger;\n+        this.taskPendingStats = this.statsLogger.getOpStatsLogger(\"task_pending_time\");\n+        this.taskExecutionStats = this.statsLogger.getOpStatsLogger(\"task_execution_time\");\n+        this.pendingTasksGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -131,9 +138,8 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return getQueue().size();\n             }\n-        });\n-        // completed tasks\n-        statsLogger.registerGauge(\"completed_tasks\", new Gauge<Number>() {\n+        };\n+        this.completedTasksGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -143,9 +149,8 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return getCompletedTaskCount();\n             }\n-        });\n-        // total tasks\n-        statsLogger.registerGauge(\"total_tasks\", new Gauge<Number>() {\n+        };\n+        this.totalTasksGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -155,7 +160,14 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return getTaskCount();\n             }\n-        });\n+        };\n+\n+        // outstanding tasks\n+        this.statsLogger.registerGauge(pendingTasksGaugeLabel, pendingTasksGauge);\n+        // completed tasks\n+        this.statsLogger.registerGauge(completedTasksGaugeLabel, completedTasksGauge);\n+        // total tasks\n+        this.statsLogger.registerGauge(totalTasksGaugeLabel, pendingTasksGauge);\n     }\n \n     private Runnable timedRunnable(Runnable r) {\n@@ -236,6 +248,10 @@ private Throwable extractThrowable(Runnable runnable) {\n         return null;\n     }\n \n-\n+    void unregisterGauges() {\n+        this.statsLogger.unregisterGauge(pendingTasksGaugeLabel, pendingTasksGauge);\n+        this.statsLogger.unregisterGauge(completedTasksGaugeLabel, completedTasksGauge);\n+        this.statsLogger.unregisterGauge(totalTasksGaugeLabel, totalTasksGauge);\n+    }\n \n }"},{"sha":"9f34902fb7ee1ce92a9f40c6f9871c92fe3424a9","filename":"src/main/java/com/twitter/distributedlog/util/OrderedScheduler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FOrderedScheduler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FOrderedScheduler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FOrderedScheduler.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -310,6 +310,8 @@ public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,\n     @Override\n     public void shutdown() {\n         for (MonitoredScheduledThreadPoolExecutor executor : executors) {\n+            // Unregister gauges\n+            executor.unregisterGauges();\n             executor.shutdown();\n         }\n     }"},{"sha":"2482ecefc85140d9f269b368965134a957598ce5","filename":"src/main/java/com/twitter/distributedlog/util/SimplePermitLimiter.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FSimplePermitLimiter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FSimplePermitLimiter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FSimplePermitLimiter.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -47,6 +47,9 @@ public class SimplePermitLimiter implements PermitLimiter {\n     final int permitsMax;\n     final boolean darkmode;\n     final Feature disableWriteLimitFeature;\n+    private StatsLogger statsLogger = null;\n+    private Gauge<Number> permitsGauge = null;\n+    private String permitsGaugeLabel = \"\";\n \n     public SimplePermitLimiter(boolean darkmode, int permitsMax, StatsLogger statsLogger,\n                                boolean singleton, Feature disableWriteLimitFeature) {\n@@ -57,7 +60,8 @@ public SimplePermitLimiter(boolean darkmode, int permitsMax, StatsLogger statsLo\n \n         // stats\n         if (singleton) {\n-            statsLogger.registerGauge(\"num_permits\", new Gauge<Number>() {\n+            this.statsLogger = statsLogger;\n+            this.permitsGauge = new Gauge<Number>() {\n                 @Override\n                 public Number getDefaultValue() {\n                     return 0;\n@@ -66,7 +70,9 @@ public Number getDefaultValue() {\n                 public Number getSample() {\n                     return permits.get();\n                 }\n-            });\n+            };\n+            this.permitsGaugeLabel = \"permits\";\n+            statsLogger.registerGauge(permitsGaugeLabel, permitsGauge);\n         }\n         acquireFailureCounter = statsLogger.getCounter(\"acquireFailure\");\n         permitsMetric = statsLogger.getOpStatsLogger(\"permits\");\n@@ -97,4 +103,10 @@ public void release(int permitsToRelease) {\n     public int getPermits() {\n         return permits.get();\n     }\n+\n+    public void unregisterGauge() {\n+        if (this.statsLogger != null && this.permitsGauge != null) {\n+            this.statsLogger.unregisterGauge(permitsGaugeLabel, permitsGauge);\n+        }\n+    }\n }"},{"sha":"8ef33eac96e44e72e24498bf7f0c4eb4034bb3a6","filename":"src/main/java/com/twitter/distributedlog/zk/ZKWatcherManager.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FZKWatcherManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FZKWatcherManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FZKWatcherManager.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -78,6 +78,11 @@ public ZKWatcherManager build() {\n     private final String name;\n     private final ZooKeeperClient zkc;\n     private final StatsLogger statsLogger;\n+    // Gauges and their labels\n+    private final Gauge<Number> totalWatchesGauge;\n+    private static final String totalWatchesGauageLabel = \"total_watches\";\n+    private final Gauge<Number> numChildWatchesGauge;\n+    private static final String numChildWatchesGauageLabel = \"num_child_watches\";\n \n     protected final ConcurrentMap<String, Set<Watcher>> childWatches;\n     protected final AtomicInteger allWatchesGauge;\n@@ -94,7 +99,7 @@ private ZKWatcherManager(String name,\n         this.allWatchesGauge = new AtomicInteger(0);\n \n         // stats\n-        this.statsLogger.registerGauge(\"total_watches\", new Gauge<Number>() {\n+        totalWatchesGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -104,9 +109,10 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return allWatchesGauge.get();\n             }\n-        });\n+        };\n+        this.statsLogger.registerGauge(totalWatchesGauageLabel, totalWatchesGauge);\n \n-        this.statsLogger.registerGauge(\"num_child_watches\", new Gauge<Number>() {\n+        numChildWatchesGauge = new Gauge<Number>() {\n             @Override\n             public Number getDefaultValue() {\n                 return 0;\n@@ -116,7 +122,9 @@ public Number getDefaultValue() {\n             public Number getSample() {\n                 return childWatches.size();\n             }\n-        });\n+        };\n+\n+        this.statsLogger.registerGauge(numChildWatchesGauageLabel, numChildWatchesGauge);\n     }\n \n     public Watcher registerChildWatcher(String path, Watcher watcher) {\n@@ -178,6 +186,11 @@ public void processResult(int rc, String path, Object ctx) {\n         }\n     }\n \n+    public void unregisterGauges() {\n+        this.statsLogger.unregisterGauge(totalWatchesGauageLabel, totalWatchesGauge);\n+        this.statsLogger.unregisterGauge(numChildWatchesGauageLabel, numChildWatchesGauge);\n+    }\n+\n     @Override\n     public void process(WatchedEvent event) {\n         switch (event.getType()) {"},{"sha":"19b986360188f6184ae0b9a0c0af2b1173d91e2c","filename":"src/test/java/com/twitter/distributedlog/TestDistributedLogConfiguration.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FTestDistributedLogConfiguration.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -109,14 +109,15 @@ public void validateConfiguration(){\n         DistributedLogConfiguration conf = new DistributedLogConfiguration();\n         // validate default configuration\n         conf.validate();\n-        // test invalid timeout, should throw exception\n+        // test equal, should not throw exception\n         conf.setReadLACLongPollTimeout(conf.getBKClientReadTimeout() * 1000);\n         try {\n             conf.validate();\n         } catch (IllegalArgumentException e){\n             exceptionThrown=true;\n         }\n-        assertTrue(exceptionThrown);\n+        assertFalse(exceptionThrown);\n+        // test invalid case, should throw exception\n         exceptionThrown=false;\n         conf.setReadLACLongPollTimeout(conf.getBKClientReadTimeout() * 1000 * 2);\n         try {"},{"sha":"b702d4ced3b335b92acf15446f1ce51228e2c0da","filename":"src/test/java/com/twitter/distributedlog/zk/TestZKWatcherManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FTestZKWatcherManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/13a7381f50fea4b9300cd111fdd5b671954fbd7e/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FTestZKWatcherManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Fzk%2FTestZKWatcherManager.java?ref=13a7381f50fea4b9300cd111fdd5b671954fbd7e","patch":"@@ -73,7 +73,8 @@ public void process(WatchedEvent event) {\n \n         // unregister watcher\n         watcherManager.unregisterChildWatcher(path, watcher, true);\n-\n+        // unregister gauges\n+        watcherManager.unregisterGauges();\n         assertEquals(0, watcherManager.childWatches.size());\n     }\n }"}]}