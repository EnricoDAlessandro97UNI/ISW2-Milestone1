{"sha":"0eca5ff57f6e19fe5829d5ef8df228411467401f","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjBlY2E1ZmY1N2Y2ZTE5ZmU1ODI5ZDVlZjhkZjIyODQxMTQ2NzQwMWY=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-01T09:31:14Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-06-01T09:31:14Z"},"message":"BOOKKEEPER-1078: Local BookKeeper enhancements for testability\n\nBookKeeper: Local Bookkeeper enhancements for testability\n\n1. Allow creating local bookies without always starting a zookeeper server - This is required as tests may want to create and use their own instance of a test zookeeper\n2. Allow using non default zookeeper host and more importantly non default ZK port\n3. Allowing the caller to specify the initial port for the bookies\n4. Optionally shutdown bookies when the bookie thread exits\n\nAuthor: Sijie Guo <sijie@apache.org>\nAuthor: Sijie Guo <sijieg@twitter.com>\nAuthor: Robin Dhamankar <rdhamankar@twitter.com>\n\nReviewers: Enrico Olivelli, Jia Zhai\n\nCloses #164 from sijie/local_bookkeeper_enhancements","tree":{"sha":"bd53cb049d6409b506dc8a09b906b633dbbd22c8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/bd53cb049d6409b506dc8a09b906b633dbbd22c8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/0eca5ff57f6e19fe5829d5ef8df228411467401f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0eca5ff57f6e19fe5829d5ef8df228411467401f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0eca5ff57f6e19fe5829d5ef8df228411467401f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0eca5ff57f6e19fe5829d5ef8df228411467401f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"da70648719679fd1db001c74ad873bf134f16198","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/da70648719679fd1db001c74ad873bf134f16198","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/da70648719679fd1db001c74ad873bf134f16198"}],"stats":{"total":395,"additions":330,"deletions":65},"files":[{"sha":"226c2a8f19e27cb4ffe8a87d70acd59edd955f21","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/shims/zk/ZooKeeperServerShim.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShim.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShim.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShim.java?ref=0eca5ff57f6e19fe5829d5ef8df228411467401f","patch":"@@ -0,0 +1,60 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.shims.zk;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+/**\n+ * In order to be compatible with multiple versions of ZooKeeper.\n+ * All parts of the ZooKeeper Server that are not cross-version\n+ * compatible are encapsulated in an implementation of this class.\n+ */\n+public interface ZooKeeperServerShim {\n+\n+    /**\n+     * Initialize zookeeper server.\n+     *\n+     * @param snapDir\n+     *          Snapshot Dir.\n+     * @param logDir\n+     *          Log Dir.\n+     * @param zkPort\n+     *          ZooKeeper Port.\n+     * @param maxCC\n+     *          Max Concurrency for Client.\n+     * @throws IOException when failed to initialize zookeeper server.\n+     */\n+    void initialize(File snapDir, File logDir, int zkPort, int maxCC) throws IOException;\n+\n+    /**\n+     * Start the zookeeper server.\n+     *\n+     * @throws IOException when failed to start zookeeper server.\n+     */\n+    void start() throws IOException;\n+\n+    /**\n+     * Stop the zookeeper server.\n+     */\n+    void stop();\n+\n+}"},{"sha":"59ff88a3a4a899dea367ba412f2560d035338460","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/shims/zk/ZooKeeperServerShimFactory.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimFactory.java?ref=0eca5ff57f6e19fe5829d5ef8df228411467401f","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.shims.zk;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class ZooKeeperServerShimFactory {\n+\n+    public static ZooKeeperServerShim createServer(File snapDir, File logDir, int zkPort, int maxCC)\n+        throws IOException {\n+        ZooKeeperServerShim server = new ZooKeeperServerShimImpl();\n+        server.initialize(snapDir, logDir, zkPort, maxCC);\n+        return server;\n+    }\n+\n+}"},{"sha":"b74df4b6c6f652c474c764f1494f000d01667482","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/shims/zk/ZooKeeperServerShimImpl.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fshims%2Fzk%2FZooKeeperServerShimImpl.java?ref=0eca5ff57f6e19fe5829d5ef8df228411467401f","patch":"@@ -0,0 +1,63 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.shims.zk;\n+\n+import org.apache.zookeeper.server.NIOServerCnxnFactory;\n+import org.apache.zookeeper.server.ZooKeeperServer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+\n+class ZooKeeperServerShimImpl implements ZooKeeperServerShim {\n+\n+    ZooKeeperServer zks = null;\n+    NIOServerCnxnFactory serverFactory = null;\n+\n+    @Override\n+    public void initialize(File snapDir, File logDir, int zkPort, int maxCC) throws IOException {\n+        zks = new ZooKeeperServer(snapDir, logDir, ZooKeeperServer.DEFAULT_TICK_TIME);\n+        serverFactory = new NIOServerCnxnFactory();\n+        serverFactory.configure(new InetSocketAddress(zkPort), maxCC);\n+    }\n+\n+    @Override\n+    public void start() throws IOException {\n+        if (null == zks || null == serverFactory) {\n+            throw new IOException(\"Start zookeeper server before initialization.\");\n+        }\n+        try {\n+            serverFactory.startup(zks);\n+        } catch (InterruptedException e) {\n+            throw new IOException(\"Interrupted when starting zookeeper server : \", e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != serverFactory) {\n+            serverFactory.shutdown();\n+        }\n+        if (null != zks) {\n+            zks.shutdown();\n+        }\n+    }\n+}"},{"sha":"a92513cef3d8c9086871af30c4a2bf7116c066b6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":172,"deletions":65,"changes":237,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0eca5ff57f6e19fe5829d5ef8df228411467401f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java?ref=0eca5ff57f6e19fe5829d5ef8df228411467401f","patch":"@@ -23,11 +23,12 @@\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n import java.net.Socket;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.bookkeeper.shims.zk.ZooKeeperServerShim;\n+import org.apache.bookkeeper.shims.zk.ZooKeeperServerShimFactory;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.commons.io.FileUtils;\n import org.apache.bookkeeper.bookie.BookieException;\n@@ -39,9 +40,6 @@\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.server.NIOServerCnxnFactory;\n-import org.apache.zookeeper.server.ZooKeeperServer;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n import static com.google.common.base.Charsets.UTF_8;\n@@ -53,58 +51,58 @@ public class LocalBookKeeper {\n     int numberOfBookies;\n \n     public LocalBookKeeper() {\n-        numberOfBookies = 3;\n+        this(3);\n     }\n \n     public LocalBookKeeper(int numberOfBookies) {\n-        this();\n+        this(numberOfBookies, 5000, ZooKeeperDefaultHost, ZooKeeperDefaultPort);\n+    }\n+\n+    public LocalBookKeeper(int numberOfBookies, int initialPort, String zkHost, int zkPort) {\n         this.numberOfBookies = numberOfBookies;\n-        LOG.info(\"Running \" + this.numberOfBookies + \" bookie(s).\");\n+        this.initialPort = initialPort;\n+        this.zkServer = String.format(\"%s:%d\", zkHost, zkPort);\n+        LOG.info(\"Running {} bookie(s) on zkServer {}.\", this.numberOfBookies, zkServer);\n     }\n \n-    NIOServerCnxnFactory serverFactory;\n-    ZooKeeperServer zks;\n-    ZooKeeper zkc;\n-    int ZooKeeperDefaultPort = 2181;\n+    private String zkServer;\n+    static String ZooKeeperDefaultHost = \"127.0.0.1\";\n+    static int ZooKeeperDefaultPort = 2181;\n     static int zkSessionTimeOut = 5000;\n-    File ZkTmpDir;\n+    static Integer BookieDefaultInitialPort = 5000;\n \n     //BookKeeper variables\n-    File tmpDirs[];\n+    File journalDirs[];\n     BookieServer bs[];\n     ServerConfiguration bsConfs[];\n     Integer initialPort = 5000;\n \n     /**\n-     * @param args\n+     * @param maxCC\n+     *          Max Concurrency of Client\n+     * @param zookeeperPort\n+     *          ZooKeeper Server Port\n      */\n+    public static ZooKeeperServerShim runZookeeper(int maxCC, int zookeeperPort) throws IOException {\n+        File zkTmpDir = IOUtils.createTempDir(\"zookeeper\", \"localbookkeeper\");\n+        return runZookeeper(maxCC, zookeeperPort, zkTmpDir);\n+    }\n \n-    private void runZookeeper(int maxCC) throws IOException {\n-        // create a ZooKeeper server(dataDir, dataLogDir, port)\n+    public static ZooKeeperServerShim runZookeeper(int maxCC, int zookeeperPort, File zkDir) throws IOException {\n         LOG.info(\"Starting ZK server\");\n-        //ServerStats.registerAsConcrete();\n-        //ClientBase.setupTestEnv();\n-        ZkTmpDir = IOUtils.createTempDir(\"zookeeper\", \"localbookkeeper\");\n+        ZooKeeperServerShim server = ZooKeeperServerShimFactory.createServer(zkDir, zkDir, zookeeperPort, maxCC);\n+        server.start();\n \n-        InetAddress loopbackIP = InetAddress.getLoopbackAddress();\n-        try {\n-            zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperServer.DEFAULT_TICK_TIME);\n-            serverFactory =  new NIOServerCnxnFactory();\n-            LOG.info(\"Starting Zookeeper server at \" + loopbackIP.getHostAddress() + \" port:\" + ZooKeeperDefaultPort);\n-            serverFactory.configure(new InetSocketAddress(loopbackIP, ZooKeeperDefaultPort), maxCC);\n-            serverFactory.startup(zks);\n-        } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-            LOG.error(\"Exception while instantiating ZooKeeper\", e);\n-        }\n-\n-        boolean b = waitForServerUp(loopbackIP.getHostAddress() + \":\" + ZooKeeperDefaultPort, CONNECTION_TIMEOUT);\n+        boolean b = waitForServerUp(InetAddress.getLoopbackAddress().getHostAddress() + \":\" + zookeeperPort,\n+          CONNECTION_TIMEOUT);\n         LOG.debug(\"ZooKeeper server up: {}\", b);\n+        return server;\n     }\n \n     private void initializeZookeeper() throws IOException {\n         LOG.info(\"Instantiate ZK Client\");\n         //initialize the zk client with values\n+        ZooKeeperClient zkc = null;\n         try {\n             zkc = ZooKeeperClient.newBuilder()\n                     .connectString(InetAddress.getLoopbackAddress().getHostAddress() + \":\" + ZooKeeperDefaultPort)\n@@ -115,11 +113,11 @@ private void initializeZookeeper() throws IOException {\n             // No need to create an entry for each requested bookie anymore as the\n             // BookieServers will register themselves with ZooKeeper on startup.\n         } catch (KeeperException e) {\n-            // TODO Auto-generated catch block\n             LOG.error(\"Exception while creating znodes\", e);\n+            throw new IOException(\"Error creating znodes : \", e);\n         } catch (InterruptedException e) {\n-            // TODO Auto-generated catch block\n             LOG.error(\"Interrupted while creating znodes\", e);\n+            throw new IOException(\"Error creating znodes : \", e);\n         }\n     }\n \n@@ -157,53 +155,165 @@ private List<File> runBookies(ServerConfiguration baseConf, String dirSuffix)\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     private void runBookies(ServerConfiguration baseConf, List<File> tempDirs, String dirSuffix)\n             throws IOException, KeeperException, InterruptedException, BookieException,\n             UnavailableException, CompatibilityException {\n         LOG.info(\"Starting Bookie(s)\");\n         // Create Bookie Servers (B1, B2, B3)\n \n-        tmpDirs = new File[numberOfBookies];\n+        journalDirs = new File[numberOfBookies];\n         bs = new BookieServer[numberOfBookies];\n         bsConfs = new ServerConfiguration[numberOfBookies];\n \n-        String loopbackIPAddr = InetAddress.getLoopbackAddress().getHostAddress();\n         for(int i = 0; i < numberOfBookies; i++) {\n-            tmpDirs[i] = File.createTempFile(\"bookie\" + Integer.toString(i), \"test\");\n-            if (!tmpDirs[i].delete() || !tmpDirs[i].mkdir()) {\n-                throw new IOException(\"Couldn't create bookie dir \" + tmpDirs[i]);\n+            if (null == baseConf.getJournalDirNameWithoutDefault()) {\n+                journalDirs[i] = IOUtils.createTempDir(\"localbookkeeper\" + Integer.toString(i), dirSuffix);\n+                tempDirs.add(journalDirs[i]);\n+            } else {\n+                journalDirs[i] = new File(baseConf.getJournalDirName(), \"bookie\" + Integer.toString(i));\n+            }\n+            if (journalDirs[i].exists()) {\n+                if (journalDirs[i].isDirectory()) {\n+                    FileUtils.deleteDirectory(journalDirs[i]);\n+                } else if (!journalDirs[i].delete()) {\n+                    throw new IOException(\"Couldn't cleanup bookie journal dir \" + journalDirs[i]);\n+                }\n+            }\n+            if (!journalDirs[i].mkdirs()) {\n+                throw new IOException(\"Couldn't create bookie journal dir \" + journalDirs[i]);\n+            }\n+\n+            String [] ledgerDirs = baseConf.getLedgerDirWithoutDefault();\n+            if ((null == ledgerDirs) || (0 == ledgerDirs.length)) {\n+                ledgerDirs = new String[] { journalDirs[i].getPath() };\n+            } else {\n+                for (int l = 0; l < ledgerDirs.length; l++) {\n+                    File dir = new File(ledgerDirs[l], \"bookie\" + Integer.toString(i));\n+                    if (dir.exists()) {\n+                        if (dir.isDirectory()) {\n+                            FileUtils.deleteDirectory(dir);\n+                        } else if (!dir.delete()) {\n+                            throw new IOException(\"Couldn't cleanup bookie ledger dir \" + dir);\n+                        }\n+                    }\n+                    if (!dir.mkdirs()) {\n+                        throw new IOException(\"Couldn't create bookie ledger dir \" + dir);\n+                    }\n+                    ledgerDirs[l] = dir.getPath();\n+                }\n             }\n \n             bsConfs[i] = new ServerConfiguration(baseConf);\n-            // override settings\n-            bsConfs[i].setBookiePort(initialPort + i);\n-            LOG.info(\"Connecting to Zookeeper at \" + loopbackIPAddr + \" port:\" + ZooKeeperDefaultPort);\n-            bsConfs[i].setZkServers(loopbackIPAddr + \":\" + ZooKeeperDefaultPort);\n \n-            if (null == bsConfs[i].getJournalDirNameWithoutDefault()) {\n-                bsConfs[i].setJournalDirName(tmpDirs[i].getPath());\n+            // If the caller specified ephemeral ports then use ephemeral ports for all\n+            // the bookies else use numBookie ports starting at initialPort\n+            if (0 == initialPort) {\n+                bsConfs[i].setBookiePort(0);\n+            } else {\n+                bsConfs[i].setBookiePort(initialPort + i);\n             }\n-\n-            String [] ledgerDirs = bsConfs[i].getLedgerDirWithoutDefault();\n-            if ((null == ledgerDirs) || (0 == ledgerDirs.length)) {\n-                bsConfs[i].setLedgerDirNames(new String[] { tmpDirs[i].getPath() });\n+            \n+            if (null == baseConf.getZkServers()) {\n+                bsConfs[i].setZkServers(InetAddress.getLocalHost().getHostAddress() + \":\"\n+                                  + ZooKeeperDefaultPort);\n             }\n \n-            bsConfs[i].setAllowLoopback(true);\n+\n+            bsConfs[i].setJournalDirName(journalDirs[i].getPath());\n+            bsConfs[i].setLedgerDirNames(ledgerDirs);\n \n             bs[i] = new BookieServer(bsConfs[i]);\n             bs[i].start();\n         }\n     }\n \n-    public static void main(String[] args) throws IOException, KeeperException,\n-            InterruptedException, BookieException, UnavailableException,\n-            CompatibilityException {\n+    public static void startLocalBookies(String zkHost,\n+                                         int zkPort,\n+                                         int numBookies,\n+                                         boolean shouldStartZK,\n+                                         int initialBookiePort)\n+            throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration();\n+        startLocalBookiesInternal(conf, zkHost, zkPort, numBookies, shouldStartZK, initialBookiePort, true, \"test\");\n+    }\n+\n+    public static void startLocalBookies(String zkHost,\n+                                         int zkPort,\n+                                         int numBookies,\n+                                         boolean shouldStartZK,\n+                                         int initialBookiePort,\n+                                         ServerConfiguration conf)\n+            throws Exception {\n+        startLocalBookiesInternal(conf, zkHost, zkPort, numBookies, shouldStartZK, initialBookiePort, true, \"test\");\n+    }\n+\n+    public static void startLocalBookies(String zkHost,\n+                                         int zkPort,\n+                                         int numBookies,\n+                                         boolean shouldStartZK,\n+                                         int initialBookiePort,\n+                                         String dirSuffix)\n+            throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration();\n+        startLocalBookiesInternal(conf, zkHost, zkPort, numBookies, shouldStartZK, initialBookiePort, true, dirSuffix);\n+    }\n+\n+    static void startLocalBookiesInternal(ServerConfiguration conf,\n+                                          String zkHost,\n+                                          int zkPort,\n+                                          int numBookies,\n+                                          boolean shouldStartZK,\n+                                          int initialBookiePort,\n+                                          boolean stopOnExit,\n+                                          String dirSuffix)\n+            throws Exception {\n+        LocalBookKeeper lb = new LocalBookKeeper(numBookies, initialBookiePort, zkHost, zkPort);\n+\n+        ZooKeeperServerShim zks = null;\n+        File zkTmpDir = null;\n+        List<File> bkTmpDirs = null;\n+        try {\n+            if (shouldStartZK) {\n+                zkTmpDir = IOUtils.createTempDir(\"zookeeper\", dirSuffix);\n+                zks = LocalBookKeeper.runZookeeper(1000, zkPort, zkTmpDir);\n+            }\n+\n+            lb.initializeZookeeper();\n+            conf.setZkServers(zkHost + \":\" + zkPort);\n+            bkTmpDirs = lb.runBookies(conf, dirSuffix);\n+\n+            try {\n+                while (true) {\n+                    Thread.sleep(5000);\n+                }\n+            } catch (InterruptedException ie) {\n+                if (stopOnExit) {\n+                    lb.shutdownBookies();\n+\n+                    if (null != zks) {\n+                        zks.stop();\n+                    }\n+                }\n+                throw ie;\n+            }\n+        } finally {\n+            if (stopOnExit) {\n+                cleanupDirectories(bkTmpDirs);\n+                if (null != zkTmpDir) {\n+                    FileUtils.deleteDirectory(zkTmpDir);\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n         if(args.length < 1) {\n             usage();\n             System.exit(-1);\n         }\n-        LocalBookKeeper lb = new LocalBookKeeper(Integer.parseInt(args[0]));\n+\n+        int numBookies = Integer.parseInt(args[0]);\n \n         ServerConfiguration conf = new ServerConfiguration();\n         if (args.length >= 2) {\n@@ -217,17 +327,8 @@ public static void main(String[] args) throws IOException, KeeperException,\n             }\n         }\n \n-        lb.runZookeeper(1000);\n-        lb.initializeZookeeper();\n-        List<File> tmpDirs = lb.runBookies(conf, \"test\");\n-        try {\n-            while (true) {\n-                Thread.sleep(5000);\n-            }\n-        } catch (InterruptedException ie) {\n-            cleanupDirectories(tmpDirs);\n-            throw ie;\n-        }\n+        startLocalBookiesInternal(conf, ZooKeeperDefaultHost, ZooKeeperDefaultPort,\n+                numBookies, true, BookieDefaultInitialPort, false, \"test\");\n     }\n \n     private static void usage() {\n@@ -279,4 +380,10 @@ public static boolean waitForServerUp(String hp, long timeout) {\n         return false;\n     }\n \n+    public void shutdownBookies() {\n+        for (BookieServer bookieServer: bs) {\n+            bookieServer.shutdown();\n+        }\n+    }\n+\n }"}]}