{"sha":"af397e2247d453af25db6a1f33426fb9c69e2cdf","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmFmMzk3ZTIyNDdkNDUzYWYyNWRiNmExZjMzNDI2ZmI5YzY5ZTJjZGY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-10T20:47:02Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-10T20:47:02Z"},"message":"BOOKKEEPER-1060: Add utility to use SafeRunnable from Java8 Lambda\n\nSince BK-4.5.0 is already switched to Java8, we should have a simple and concise way to pass lambdas where a `SafeRunnable` is required.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Enrico Olivelli <None>\n\nCloses #148 from merlimat/safe-runnable","tree":{"sha":"ab2918947a30bddeb14d435f76b01b0a67c7d4d7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/ab2918947a30bddeb14d435f76b01b0a67c7d4d7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/af397e2247d453af25db6a1f33426fb9c69e2cdf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/af397e2247d453af25db6a1f33426fb9c69e2cdf","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/af397e2247d453af25db6a1f33426fb9c69e2cdf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/af397e2247d453af25db6a1f33426fb9c69e2cdf/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8a7ac310947049f65687e33d92b847c44c91a39","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d8a7ac310947049f65687e33d92b847c44c91a39","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d8a7ac310947049f65687e33d92b847c44c91a39"}],"stats":{"total":56,"additions":56,"deletions":0},"files":[{"sha":"8b1e0d027772d1bb0f3586a6acada5098768d94e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SafeRunnable.java","status":"modified","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/af397e2247d453af25db6a1f33426fb9c69e2cdf/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FSafeRunnable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/af397e2247d453af25db6a1f33426fb9c69e2cdf/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FSafeRunnable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FSafeRunnable.java?ref=af397e2247d453af25db6a1f33426fb9c69e2cdf","patch":"@@ -1,5 +1,7 @@\n package org.apache.bookkeeper.util;\n \n+import java.util.function.Consumer;\n+\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -36,4 +38,58 @@ public void run() {\n \n     public abstract void safeRun();\n \n+    /**\n+     * Utility method to use SafeRunnable from lambdas\n+     * <p>\n+     * Eg:\n+     * <pre>\n+     * <code>\n+     * executor.submit(SafeRunnable.safeRun(() -> {\n+     *    // My not-safe code\n+     * });\n+     * </code>\n+     * </pre>\n+     */\n+    public static SafeRunnable safeRun(Runnable runnable) {\n+        return new SafeRunnable() {\n+            @Override\n+            public void safeRun() {\n+                runnable.run();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Utility method to use SafeRunnable from lambdas with\n+     * a custom exception handler\n+     * <p>\n+     * Eg:\n+     * <pre>\n+     * <code>\n+     * executor.submit(SafeRunnable.safeRun(() -> {\n+     *    // My not-safe code\n+     * }, exception -> {\n+     *    // Handle exception\n+     * );\n+     * </code>\n+     * </pre>\n+     *\n+     * @param runnable\n+     * @param exceptionHandler\n+     *            handler that will be called when there are any exception\n+     * @return\n+     */\n+    public static SafeRunnable safeRun(Runnable runnable, Consumer<Throwable> exceptionHandler) {\n+        return new SafeRunnable() {\n+            @Override\n+            public void safeRun() {\n+                try {\n+                    runnable.run();\n+                } catch (Throwable t) {\n+                    exceptionHandler.accept(t);\n+                    throw t;\n+                }\n+            }\n+        };\n+    }\n }"}]}