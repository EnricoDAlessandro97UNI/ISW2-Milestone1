{"sha":"efd8ec26926d2e75f51d6d576543a0dcc116b83f","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmVmZDhlYzI2OTI2ZDJlNzVmNTFkNmQ1NzY1NDNhMGRjYzExNmI4M2Y=","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2017-06-05T18:30:52Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-05T18:30:52Z"},"message":"BOOKKEEPER-944: LowWaterMark Storage Threshold\n\nBOOKKEEPER-944: LowWaterMark Storage Threshold\n\nLowWaterMark Storage Threshold and code refactoring\n\n    - Current implementation toggles READONLY status of the bookie as soon as a directory usage falls below the disk storage threshold.\n      Added LowWaterMark parameter that limits such switches.\n    \t1. Bookie transition from RW to RONLY only when all the ledger dirs usage > HWM (storage threshold)\n    \t2. Bookie transition from RONLY to  RW only when total system disk usage (ledger/index disks) capacity is < LWM\n    \t3. When bookie is in RW mode all disks which are < HWM (storage threshold) are RW\n    - refactored code and separated LedgerDirsMonitor from LedgerDirsManager, to remove circular dependency\n      between LedgerDirsManager and LedgerDirsMonitor and also it improves testability by making them separate classes.\n      It becomes easier to do functional/unit level testing and fault-injection testing at LedgerDirsMonitor class level.\n    - relevant testcases\n\nAuthor: Andrey Yegorov <ayegorovsalesforce.com>\nCo-Author: Charan Reddy Guttapalem <cguttapalemsalesforce.com>\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nCloses #108 from reddycharan/lwmhwm","tree":{"sha":"d5c2d02280a8d90998b4dfe06fd0ab9481c681dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/d5c2d02280a8d90998b4dfe06fd0ab9481c681dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/efd8ec26926d2e75f51d6d576543a0dcc116b83f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/efd8ec26926d2e75f51d6d576543a0dcc116b83f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/efd8ec26926d2e75f51d6d576543a0dcc116b83f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/efd8ec26926d2e75f51d6d576543a0dcc116b83f/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f945f8a02f5171608810eb002443193c3eb058c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5f945f8a02f5171608810eb002443193c3eb058c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5f945f8a02f5171608810eb002443193c3eb058c"}],"stats":{"total":694,"additions":526,"deletions":168},"files":[{"sha":"7f52902adb5ee7f21e7f3c3f7b65516256afbbfb","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -257,6 +257,14 @@ zkTimeout=10000\n #Valid values should be in between 0 and 1 (exclusive). \n #diskUsageThreshold=0.95\n \n+#Set the disk free space low water mark threshold. Disk is considered full when \n+#usage threshold is exceeded. Disk returns back to non-full state when usage is \n+#below low water mark threshold. This prevents it from going back and forth \n+#between these states frequently when concurrent writes and compaction are \n+#happening. This also prevent bookie from switching frequently between \n+#read-only and read-writes states in the same cases.\n+#diskUsageLwmThreshold=0.90\n+\n #Disk check interval in milli seconds, interval to check the ledger dirs usage.\n #Default is 10000\n #diskCheckInterval=10000"},{"sha":"f32626ac60cd42a6387ccf50f7270df746c1b10c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":29,"deletions":12,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -62,6 +62,7 @@\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.collections.ConcurrentLongHashMap;\n@@ -124,6 +125,9 @@ public class Bookie extends BookieCriticalThread {\n \n     private final LedgerDirsManager ledgerDirsManager;\n     private LedgerDirsManager indexDirsManager;\n+    \n+    private final LedgerDirsMonitor ledgerMonitor;\n+    private final LedgerDirsMonitor idxMonitor;\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n@@ -657,6 +661,7 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n \n         this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(),\n                 statsLogger.scope(LD_LEDGER_SCOPE));\n+\n         File[] idxDirs = conf.getIndexDirs();\n         if (null == idxDirs) {\n             this.indexDirsManager = this.ledgerDirsManager;\n@@ -672,10 +677,28 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         LOG.info(\"instantiate ledger manager {}\", ledgerManagerFactory.getClass().getName());\n         ledgerManager = ledgerManagerFactory.newLedgerManager();\n \n-        // Initialise ledgerDirManager. This would look through all the\n+        // Initialise ledgerDirMonitor. This would look through all the\n         // configured directories. When disk errors or all the ledger\n         // directories are full, would throws exception and fail bookie startup.\n-        this.ledgerDirsManager.init();\n+        this.ledgerMonitor = new LedgerDirsMonitor(conf, \n+                                    new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n+                                    ledgerDirsManager);\n+        this.ledgerMonitor.init();\n+        \n+        if (null == idxDirs) {\n+            this.idxMonitor = this.ledgerMonitor;\n+        } else {\n+            this.idxMonitor = new LedgerDirsMonitor(conf, \n+                                        new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), \n+                                        indexDirsManager);\n+            this.idxMonitor.init();\n+        }\n+\n+        // ZK ephemeral node for this Bookie.\n+        String myID = getMyId();\n+        zkBookieRegPath = this.bookieRegistrationPath + myID;\n+        zkBookieReadOnlyPath = this.bookieReadonlyRegistrationPath + \"/\" + myID;\n+\n         // instantiate the journals\n         journals = Lists.newArrayList();\n         for(int i=0 ;i<journalDirectories.size();i++) {\n@@ -692,14 +715,8 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         ledgerStorage.initialize(conf, ledgerManager, ledgerDirsManager, indexDirsManager, checkpointSource, statsLogger);\n         syncThread = new SyncThread(conf, getLedgerDirsListener(),\n                                     ledgerStorage, checkpointSource);\n-\n         handles = new HandleFactoryImpl(ledgerStorage);\n \n-        // ZK ephemeral node for this Bookie.\n-        String myID = getMyId();\n-        zkBookieRegPath = this.bookieRegistrationPath + myID;\n-        zkBookieReadOnlyPath = this.bookieReadonlyRegistrationPath + \"/\" + myID;\n-\n         // Expose Stats\n         writeBytes = statsLogger.getCounter(WRITE_BYTES);\n         readBytes = statsLogger.getCounter(READ_BYTES);\n@@ -797,9 +814,9 @@ synchronized public void start() {\n                     journalDirectories.stream().map(File::getName).collect(Collectors.joining(\", \")));\n         }\n         //Start DiskChecker thread\n-        ledgerDirsManager.start();\n+        ledgerMonitor.start();\n         if (indexDirsManager != ledgerDirsManager) {\n-            indexDirsManager.start();\n+            idxMonitor.start();\n         }\n         // replay journals\n         try {\n@@ -1274,9 +1291,9 @@ synchronized int shutdown(int exitCode) {\n                 }\n \n                 //Shutdown disk checker\n-                ledgerDirsManager.shutdown();\n+                ledgerMonitor.shutdown();\n                 if (indexDirsManager != ledgerDirsManager) {\n-                    indexDirsManager.shutdown();\n+                    idxMonitor.shutdown();\n                 }\n \n                 // Shutdown the ZK client"},{"sha":"da56950afa619b5314dbc0878fccc8d10eb6758a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":26,"deletions":135,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsManager.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -20,6 +20,8 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_WRITABLE_DIRS;\n+\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n@@ -33,17 +35,11 @@\n import org.apache.bookkeeper.stats.Gauge;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.util.DiskChecker;\n-import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n-import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n-import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.annotations.VisibleForTesting;\n \n-import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_WRITABLE_DIRS;\n-\n /**\n  * This class manages ledger directories used by the bookie.\n  */\n@@ -54,9 +50,7 @@ public class LedgerDirsManager {\n     private volatile List<File> filledDirs;\n     private final List<File> ledgerDirectories;\n     private volatile List<File> writableLedgerDirectories;\n-    private final DiskChecker diskChecker;\n     private final List<LedgerDirsListener> listeners;\n-    private final LedgerDirsMonitor monitor;\n     private final Random rand = new Random();\n     private final ConcurrentMap<File, Float> diskUsages =\n             new ConcurrentHashMap<File, Float>();\n@@ -67,19 +61,13 @@ public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this(conf, dirs, NullStatsLogger.INSTANCE);\n     }\n \n-    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger) {\n-        this(conf, dirs, statsLogger, new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()));\n-    }\n-\n     @VisibleForTesting\n-    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger, DiskChecker diskChecker) {\n+    LedgerDirsManager(ServerConfiguration conf, File[] dirs, StatsLogger statsLogger) {\n         this.ledgerDirectories = Arrays.asList(Bookie\n                 .getCurrentDirectories(dirs));\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n         this.filledDirs = new ArrayList<File>();\n         this.listeners = new ArrayList<LedgerDirsListener>();\n-        this.diskChecker = diskChecker;\n-        this.monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n         this.forceGCAllowWhenNoSpace = conf.getIsForceGCAllowWhenNoSpace();\n         this.entryLogSize = conf.getEntryLogSizeLimit();\n         for (File dir : dirs) {\n@@ -117,6 +105,14 @@ public Number getSample() {\n     public List<File> getAllLedgerDirs() {\n         return ledgerDirectories;\n     }\n+    \n+    /**\n+     * Get all dir listeners\n+     * @return List<LedgerDirsListener> listeners\n+     */\n+    public List<LedgerDirsListener> getListeners() {\n+        return listeners;\n+    }\n \n     /**\n      * Calculate the total amount of free space available\n@@ -146,6 +142,14 @@ public long getTotalDiskSpace() {\n         return totalDiskSpace;\n     }\n \n+    /**\n+     * Get disk usages map\n+     * @return ConcurrentMap<File, Float> diskUsages\n+     */\n+    public ConcurrentMap<File, Float> getDiskUsages() {\n+        return diskUsages;\n+    }\n+    \n     /**\n      * Get only writable ledger dirs.\n      */\n@@ -161,6 +165,13 @@ public List<File> getWritableLedgerDirs()\n         return writableLedgerDirectories;\n     }\n \n+    /**\n+     * returns true if the writableLedgerDirs list has entries\n+     */\n+    public boolean hasWritableLedgerDirs() {\n+        return !writableLedgerDirectories.isEmpty();\n+    }\n+\n     public List<File> getWritableLedgerDirsForNewLog()\n         throws NoWritableLedgerDirException {\n \n@@ -307,126 +318,6 @@ public void addLedgerDirsListener(LedgerDirsListener listener) {\n         }\n     }\n \n-    /**\n-     * Sweep through all the directories to check disk errors or disk full.\n-     *\n-     * @throws DiskErrorException\n-     *             If disk having errors\n-     * @throws NoWritableLedgerDirException\n-     *             If all the configured ledger directories are full or having\n-     *             less space than threshold\n-     */\n-    public void init() throws DiskErrorException, NoWritableLedgerDirException {\n-        monitor.checkDirs(writableLedgerDirectories);\n-    }\n-\n-    // start the daemon for disk monitoring\n-    public void start() {\n-        monitor.setDaemon(true);\n-        monitor.start();\n-    }\n-\n-    // shutdown disk monitoring daemon\n-    public void shutdown() {\n-        LOG.info(\"Shutting down LedgerDirsMonitor\");\n-        monitor.interrupt();\n-        try {\n-            monitor.join();\n-        } catch (InterruptedException e) {\n-            // Ignore\n-        }\n-    }\n-\n-    /**\n-     * Thread to monitor the disk space periodically.\n-     */\n-    private class LedgerDirsMonitor extends BookieThread {\n-        private final int interval;\n-\n-        public LedgerDirsMonitor(int interval) {\n-            super(\"LedgerDirsMonitorThread\");\n-            this.interval = interval;\n-        }\n-\n-        @Override\n-        public void run() {\n-            while (true) {\n-                try {\n-                    List<File> writableDirs = getWritableLedgerDirs();\n-                    // Check all writable dirs disk space usage.\n-                    for (File dir : writableDirs) {\n-                        try {\n-                            diskUsages.put(dir, diskChecker.checkDir(dir));\n-                        } catch (DiskErrorException e) {\n-                            LOG.error(\"Ledger directory {} failed on disk checking : \", dir, e);\n-                            // Notify disk failure to all listeners\n-                            for (LedgerDirsListener listener : listeners) {\n-                                listener.diskFailed(dir);\n-                            }\n-                        } catch (DiskWarnThresholdException e) {\n-                            LOG.warn(\"Ledger directory {} is almost full.\", dir);\n-                            diskUsages.put(dir, e.getUsage());\n-                            for (LedgerDirsListener listener : listeners) {\n-                                listener.diskAlmostFull(dir);\n-                            }\n-                        } catch (DiskOutOfSpaceException e) {\n-                            LOG.error(\"Ledger directory {} is out-of-space.\", dir);\n-                            diskUsages.put(dir, e.getUsage());\n-                            // Notify disk full to all listeners\n-                            addToFilledDirs(dir);\n-                        }\n-                    }\n-                } catch (NoWritableLedgerDirException e) {\n-                    for (LedgerDirsListener listener : listeners) {\n-                        listener.allDisksFull();\n-                    }\n-                }\n-\n-                List<File> fullfilledDirs = new ArrayList<File>(getFullFilledLedgerDirs());\n-                // Check all full-filled disk space usage\n-                for (File dir : fullfilledDirs) {\n-                    try {\n-                        diskUsages.put(dir, diskChecker.checkDir(dir));\n-                        addToWritableDirs(dir, true);\n-                    } catch (DiskErrorException e) {\n-                        // Notify disk failure to all the listeners\n-                        for (LedgerDirsListener listener : listeners) {\n-                            listener.diskFailed(dir);\n-                        }\n-                    } catch (DiskWarnThresholdException e) {\n-                        diskUsages.put(dir, e.getUsage());\n-                        // the full-filled dir become writable but still above warn threshold\n-                        addToWritableDirs(dir, false);\n-                    } catch (DiskOutOfSpaceException e) {\n-                        // the full-filled dir is still full-filled\n-                        diskUsages.put(dir, e.getUsage());\n-                    }\n-                }\n-                try {\n-                    Thread.sleep(interval);\n-                } catch (InterruptedException e) {\n-                    LOG.info(\"LedgerDirsMonitor thread is interrupted\");\n-                    break;\n-                }\n-            }\n-            LOG.info(\"LedgerDirsMonitorThread exited!\");\n-        }\n-\n-        private void checkDirs(List<File> writableDirs)\n-                throws DiskErrorException, NoWritableLedgerDirException {\n-            for (File dir : writableDirs) {\n-                try {\n-                    diskChecker.checkDir(dir);\n-                } catch (DiskWarnThresholdException e) {\n-                    // nop\n-                } catch (DiskOutOfSpaceException e) {\n-                    addToFilledDirs(dir);\n-                }\n-            }\n-            getWritableLedgerDirs();\n-        }\n-    }\n-\n     /**\n      * Indicates All configured ledger directories are full.\n      */"},{"sha":"0220adfc82b37e71cd3b5c2e6ee152ac41c2b768","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsMonitor.java","status":"added","additions":191,"deletions":0,"changes":191,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerDirsMonitor.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -0,0 +1,191 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.DiskChecker;\n+import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thread to monitor the disk space periodically.\n+ */\n+class LedgerDirsMonitor extends BookieThread {\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerDirsMonitor.class);\n+    \n+    private final int interval;\n+    private final ServerConfiguration conf;\n+    private final ConcurrentMap<File, Float> diskUsages;\n+    private final DiskChecker diskChecker;\n+    private final LedgerDirsManager ldm;\n+\n+    public LedgerDirsMonitor(final ServerConfiguration conf, \n+            final DiskChecker diskChecker,\n+            final LedgerDirsManager ldm) {\n+        super(\"LedgerDirsMonitorThread\");\n+        this.interval = conf.getDiskCheckInterval();\n+        this.conf = conf;\n+        this.diskChecker = diskChecker;\n+        this.diskUsages = ldm.getDiskUsages();\n+        this.ldm = ldm;\n+    }\n+\n+    @Override\n+    public void run() {\n+        while (true) {\n+            try {\n+                List<File> writableDirs = ldm.getWritableLedgerDirs();\n+                // Check all writable dirs disk space usage.\n+                for (File dir : writableDirs) {\n+                    try {\n+                        diskUsages.put(dir, diskChecker.checkDir(dir));\n+                    } catch (DiskErrorException e) {\n+                        LOG.error(\"Ledger directory {} failed on disk checking : \", dir, e);\n+                        // Notify disk failure to all listeners\n+                        for (LedgerDirsListener listener : ldm.getListeners()) {\n+                            listener.diskFailed(dir);\n+                        }\n+                    } catch (DiskWarnThresholdException e) {\n+                        LOG.warn(\"Ledger directory {} is almost full.\", dir);\n+                        diskUsages.put(dir, e.getUsage());\n+                        for (LedgerDirsListener listener : ldm.getListeners()) {\n+                            listener.diskAlmostFull(dir);\n+                        }\n+                    } catch (DiskOutOfSpaceException e) {\n+                        LOG.error(\"Ledger directory {} is out-of-space.\", dir);\n+                        diskUsages.put(dir, e.getUsage());\n+                        // Notify disk full to all listeners\n+                        ldm.addToFilledDirs(dir);\n+                    }\n+                }\n+                // Let's get NoWritableLedgerDirException without waiting for the next iteration\n+                // in case we are out of writable dirs\n+                // otherwise for the duration of {interval} we end up in the state where \n+                // bookie cannot get writable dir but considered to be writable \n+                ldm.getWritableLedgerDirs();\n+            } catch (NoWritableLedgerDirException e) {\n+                for (LedgerDirsListener listener : ldm.getListeners()) {\n+                    listener.allDisksFull();\n+                }\n+            }\n+\n+            List<File> fullfilledDirs = new ArrayList<File>(ldm.getFullFilledLedgerDirs());\n+            boolean hasWritableLedgerDirs = ldm.hasWritableLedgerDirs();\n+            float totalDiskUsage = 0;\n+\n+            // When bookie is in READONLY mode .i.e there are no writableLedgerDirs:\n+            // - Check if the total disk usage is below DiskLowWaterMarkUsageThreshold.\n+            // - If So, walk through the entire list of fullfilledDirs and add them back to writableLedgerDirs list if\n+            // their usage is < conf.getDiskUsageThreshold.\n+            if (hasWritableLedgerDirs || (totalDiskUsage = diskChecker.getTotalDiskUsage(ldm.getAllLedgerDirs())) < conf\n+                    .getDiskLowWaterMarkUsageThreshold()) {\n+                // Check all full-filled disk space usage\n+                for (File dir : fullfilledDirs) {\n+                    try {\n+                        diskUsages.put(dir, diskChecker.checkDir(dir));\n+                        ldm.addToWritableDirs(dir, true);\n+                    } catch (DiskErrorException e) {\n+                        // Notify disk failure to all the listeners\n+                        for (LedgerDirsListener listener : ldm.getListeners()) {\n+                            listener.diskFailed(dir);\n+                        }\n+                    } catch (DiskWarnThresholdException e) {\n+                        diskUsages.put(dir, e.getUsage());\n+                        // the full-filled dir become writable but still above\n+                        // warn threshold\n+                        ldm.addToWritableDirs(dir, false);\n+                    } catch (DiskOutOfSpaceException e) {\n+                        // the full-filled dir is still full-filled\n+                        diskUsages.put(dir, e.getUsage());\n+                    }\n+                }\n+            } else {\n+                LOG.debug(\n+                        \"Current TotalDiskUsage: {} is greater than LWMThreshold: {}. So not adding any filledDir to WritableDirsList\",\n+                        totalDiskUsage, conf.getDiskLowWaterMarkUsageThreshold());\n+            }\n+            try {\n+                Thread.sleep(interval);\n+            } catch (InterruptedException e) {\n+                LOG.info(\"LedgerDirsMonitor thread is interrupted\");\n+                break;\n+            }\n+        }\n+        LOG.info(\"LedgerDirsMonitorThread exited!\");\n+    }\n+\n+    /**\n+     * Sweep through all the directories to check disk errors or disk full.\n+     *\n+     * @throws DiskErrorException\n+     *             If disk having errors\n+     * @throws NoWritableLedgerDirException\n+     *             If all the configured ledger directories are full or having\n+     *             less space than threshold\n+     */\n+    public void init() throws DiskErrorException, NoWritableLedgerDirException {\n+        checkDirs(ldm.getWritableLedgerDirs());\n+    }\n+\n+    // start the daemon for disk monitoring\n+    @Override\n+    public void start() {\n+        this.setDaemon(true);\n+        super.start();\n+    }\n+\n+    // shutdown disk monitoring daemon\n+    public void shutdown() {\n+        LOG.info(\"Shutting down LedgerDirsMonitor\");\n+        this.interrupt();\n+        try {\n+            this.join();\n+        } catch (InterruptedException e) {\n+            // Ignore\n+        }\n+    }\n+\n+    public void checkDirs(List<File> writableDirs)\n+            throws DiskErrorException, NoWritableLedgerDirException {\n+        for (File dir : writableDirs) {\n+            try {\n+                diskChecker.checkDir(dir);\n+            } catch (DiskWarnThresholdException e) {\n+                // noop\n+            } catch (DiskOutOfSpaceException e) {\n+                ldm.addToFilledDirs(dir);\n+            }\n+        }\n+        ldm.getWritableLedgerDirs();\n+    }\n+}\n+"},{"sha":"a3844d1ebc74cef677a29a7295353dbcb4a3a1fd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -105,6 +105,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     //Disk utilization\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n     protected final static String DISK_USAGE_WARN_THRESHOLD = \"diskUsageWarnThreshold\";\n+    protected final static String DISK_USAGE_LWM_THRESHOLD = \"diskUsageLwmThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL = \"auditorPeriodicBookieCheckInterval\";\n@@ -1406,6 +1407,35 @@ public float getDiskUsageThreshold() {\n         return getFloat(DISK_USAGE_THRESHOLD, 0.95f);\n     }\n \n+    \n+    /**\n+     * Set the disk free space low water mark threshold. \n+     * Disk is considered full when usage threshold is exceeded.\n+     * Disk returns back to non-full state when usage is below low water mark threshold.\n+     * This prevents it from going back and forth between these states frequently \n+     * when concurrent writes and compaction are happening. This also prevent bookie from \n+     * switching frequently between read-only and read-writes states in the same cases.  \n+     *\n+     * @param threshold threshold to declare a disk full\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setDiskLowWaterMarkUsageThreshold(float threshold) {\n+        setProperty(DISK_USAGE_LWM_THRESHOLD, threshold);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns disk free space low water mark threshold. By default it is the \n+     * same as usage threshold (for backwards-compatibility).\n+     *\n+     * @return the percentage below which a disk will NOT be considered full\n+     */\n+    public float getDiskLowWaterMarkUsageThreshold() {\n+        return getFloat(DISK_USAGE_LWM_THRESHOLD, getDiskUsageThreshold());\n+    }\n+\n+    \n     /**\n      * Set the disk checker interval to monitor ledger disk space\n      *"},{"sha":"0ed949e5686075b12c695dcfe6ce360ed980c433","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FDiskChecker.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -20,6 +20,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.List;\n \n import com.google.common.annotations.VisibleForTesting;\n import org.slf4j.Logger;\n@@ -154,6 +155,29 @@ float checkDiskFull(File dir) throws DiskOutOfSpaceException, DiskWarnThresholdE\n         }\n     }\n \n+    /**\n+     * calculates and returns the disk usage factor in the provided list of dirs\n+     * \n+     * @param dirs\n+     *            list of directories\n+     * @return disk usage factor in the provided list of dirs\n+     */\n+    public float getTotalDiskUsage(List<File> dirs) {\n+        if (dirs == null || dirs.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"list argument of getTotalDiskUsage is not supposed to be null or empty\");\n+        }\n+        long totalUsableSpace = 0;\n+        long totalSpace = 0;\n+        for (File dir : dirs) {\n+            totalUsableSpace += dir.getUsableSpace();\n+            totalSpace += dir.getTotalSpace();\n+        }\n+        float free = (float) totalUsableSpace / (float) totalSpace;\n+        float used = 1f - free;\n+        return used;\n+    }\n+\n     /**\n      * Create the directory if it doesn't exist and\n      *\n@@ -191,9 +215,8 @@ public float checkDir(File dir) throws DiskErrorException,\n      *\n      * @param diskSpaceThreshold\n      */\n-    @VisibleForTesting\n     void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) {\n-        validateThreshold(diskSpaceThreshold, diskSpaceThreshold);\n+        validateThreshold(diskSpaceThreshold, diskUsageWarnThreshold);\n         this.diskUsageThreshold = diskSpaceThreshold;\n         this.diskUsageWarnThreshold = diskUsageWarnThreshold;\n     }"},{"sha":"35a9c02d506c1ca1d39572bc48bc8c63ca8e89f7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieInitializationTest.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -26,18 +26,19 @@\n import java.io.IOException;\n import java.net.BindException;\n import java.net.InetAddress;\n-import org.junit.Assert;\n \n-import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n-import org.apache.zookeeper.KeeperException;\n+import org.junit.Assert;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -362,7 +363,10 @@ public void testWithDiskError() throws Exception {\n             // LedgerDirsManager#init() is used in Bookie instantiation.\n             // Simulating disk errors by directly calling #init\n             LedgerDirsManager ldm = new LedgerDirsManager(conf, conf.getLedgerDirs());\n-            ldm.init();\n+            LedgerDirsMonitor ledgerMonitor = new LedgerDirsMonitor(conf, \n+                    new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), ldm);\n+            ledgerMonitor.init();\n+            fail(\"should throw exception\");\n         } catch (Exception e) {\n             // expected\n         }"},{"sha":"4e36ba18d181d53337914d67aa25d4f6e3471af5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgrTest.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.SnapshotMap;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n@@ -45,6 +46,7 @@ public class IndexPersistenceMgrTest {\n     ServerConfiguration conf;\n     File journalDir, ledgerDir;\n     LedgerDirsManager ledgerDirsManager;\n+    LedgerDirsMonitor ledgerMonitor;\n \n     @Before\n     public void setUp() throws Exception {\n@@ -64,11 +66,15 @@ public void setUp() throws Exception {\n         conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n         ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        ledgerMonitor = new LedgerDirsMonitor(conf, \n+                new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold()), ledgerDirsManager);\n+        ledgerMonitor.init();\n     }\n \n     @After\n     public void tearDown() throws Exception {\n-        ledgerDirsManager.shutdown();\n+        //TODO: it is being shut down but never started. why?\n+        ledgerMonitor.shutdown();\n         FileUtils.deleteDirectory(journalDir);\n         FileUtils.deleteDirectory(ledgerDir);\n     }"},{"sha":"6b96ca1f2b1de1637622d263e9a25f0c7b52c307","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":201,"deletions":13,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/efd8ec26926d2e75f51d6d576543a0dcc116b83f/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FTestLedgerDirsManager.java?ref=efd8ec26926d2e75f51d6d576543a0dcc116b83f","patch":"@@ -28,7 +28,9 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n@@ -47,9 +49,10 @@\n public class TestLedgerDirsManager {\n     private final static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n \n-    ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+    ServerConfiguration conf;\n     File curDir;\n     LedgerDirsManager dirsManager;\n+    LedgerDirsMonitor ledgerMonitor;\n     MockDiskChecker mockDiskChecker;\n     int diskCheckInterval = 1000;\n     float threshold = 0.5f;\n@@ -69,19 +72,22 @@ public void setUp() throws Exception {\n         curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n-        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+        conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n+        conf.setDiskLowWaterMarkUsageThreshold(conf.getDiskUsageThreshold());\n         conf.setDiskCheckInterval(diskCheckInterval);\n         conf.setIsForceGCAllowWhenNoSpace(true);\n \n         mockDiskChecker = new MockDiskChecker(threshold, warnThreshold);\n-        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE, mockDiskChecker);\n-        dirsManager.init();\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        ledgerMonitor = new LedgerDirsMonitor(conf, \n+                mockDiskChecker, dirsManager);\n+        ledgerMonitor.init();\n     }\n \n     @After\n     public void tearDown() throws Exception {\n-        dirsManager.shutdown();\n+        ledgerMonitor.shutdown();\n         for (File dir : tempDirs) {\n             FileUtils.deleteDirectory(dir);\n         }\n@@ -146,7 +152,7 @@ public void testLedgerDirsMonitorDuringTransition() throws Exception {\n \n         MockLedgerDirsListener mockLedgerDirsListener = new MockLedgerDirsListener();\n         dirsManager.addLedgerDirsListener(mockLedgerDirsListener);\n-        dirsManager.start();\n+        ledgerMonitor.start();\n \n         assertFalse(mockLedgerDirsListener.readOnly);\n         mockDiskChecker.setUsage(threshold + 0.05f);\n@@ -161,9 +167,166 @@ public void testLedgerDirsMonitorDuringTransition() throws Exception {\n         assertFalse(mockLedgerDirsListener.readOnly);\n     }\n \n+    @Test(timeout = 60000)\n+    public void testLedgerDirsMonitorHandlingLowWaterMark() throws Exception {\n+\n+        ledgerMonitor.shutdown();\n+\n+        final float warn = 0.90f;\n+        final float nospace = 0.98f;\n+        final float lwm = (warn + nospace) / 2;\n+        final float lwm2warn = (warn + lwm) / 2;\n+        final float lwm2nospace = (lwm + nospace) / 2;\n+        final float nospaceExceeded = nospace + 0.005f;\n+\n+        conf.setDiskUsageThreshold(nospace);\n+        conf.setDiskLowWaterMarkUsageThreshold(lwm);\n+        conf.setDiskUsageWarnThreshold(warn);\n+\n+        mockDiskChecker = new MockDiskChecker(nospace, warnThreshold);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        ledgerMonitor = new LedgerDirsMonitor(conf, mockDiskChecker, dirsManager);\n+        ledgerMonitor.init();\n+        final MockLedgerDirsListener mockLedgerDirsListener = new MockLedgerDirsListener();\n+        dirsManager.addLedgerDirsListener(mockLedgerDirsListener);\n+        ledgerMonitor.start();\n+\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+\n+        // go above LWM but below threshold\n+        // should still be writable\n+        mockDiskChecker.setUsage(lwm2nospace);\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+\n+        // exceed the threshold, should go to readonly\n+        mockDiskChecker.setUsage(nospaceExceeded);\n+        Thread.sleep(diskCheckInterval + 100);\n+        assertTrue(mockLedgerDirsListener.readOnly);\n+\n+        // drop below threshold but above LWM\n+        // should stay read-only\n+        mockDiskChecker.setUsage(lwm2nospace);\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertTrue(mockLedgerDirsListener.readOnly);\n+\n+        // drop below LWM\n+        // should become writable\n+        mockDiskChecker.setUsage(lwm2warn);\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+\n+        // go above LWM but below threshold\n+        // should still be writable\n+        mockDiskChecker.setUsage(lwm2nospace);\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerDirsMonitorHandlingWithMultipleLedgerDirectories() throws Exception {\n+        ledgerMonitor.shutdown();\n+\n+        final float nospace = 0.90f;\n+        final float lwm = 0.80f;\n+        final float warn = 0.99f;\n+        HashMap<File, Float> usageMap;\n+\n+        File tmpDir1 = createTempDir(\"bkTest\", \".dir\");\n+        File curDir1 = Bookie.getCurrentDirectory(tmpDir1);\n+        Bookie.checkDirectoryStructure(curDir1);\n+\n+        File tmpDir2 = createTempDir(\"bkTest\", \".dir\");\n+        File curDir2 = Bookie.getCurrentDirectory(tmpDir2);\n+        Bookie.checkDirectoryStructure(curDir2);\n+\n+        conf.setDiskUsageThreshold(nospace);\n+        conf.setDiskLowWaterMarkUsageThreshold(lwm);\n+        conf.setDiskUsageWarnThreshold(warn);\n+        conf.setLedgerDirNames(new String[] { tmpDir1.toString(), tmpDir2.toString() });\n+\n+        mockDiskChecker = new MockDiskChecker(nospace, warnThreshold);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs(), NullStatsLogger.INSTANCE);\n+        ledgerMonitor = new LedgerDirsMonitor(conf, mockDiskChecker, dirsManager);\n+        usageMap = new HashMap<File, Float>();\n+        usageMap.put(curDir1, 0.1f);\n+        usageMap.put(curDir2, 0.1f);\n+        mockDiskChecker.setUsageMap(usageMap);\n+        ledgerMonitor.init();\n+        final MockLedgerDirsListener mockLedgerDirsListener = new MockLedgerDirsListener();\n+        dirsManager.addLedgerDirsListener(mockLedgerDirsListener);\n+        ledgerMonitor.start();\n+\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        assertFalse(mockLedgerDirsListener.readOnly);\n+\n+        // go above LWM but below threshold\n+        // should still be writable\n+        setUsageAndThenVerify(curDir1, lwm + 0.05f, curDir2, lwm + 0.05f, mockDiskChecker, mockLedgerDirsListener,\n+                false);\n+\n+        // one dir usagespace above storagethreshold, another dir below storagethreshold\n+        // should still be writable\n+        setUsageAndThenVerify(curDir1, nospace + 0.02f, curDir2, nospace - 0.05f, mockDiskChecker,\n+                mockLedgerDirsListener, false);\n+\n+        // should remain readonly\n+        setUsageAndThenVerify(curDir1, nospace + 0.05f, curDir2, nospace + 0.02f, mockDiskChecker,\n+                mockLedgerDirsListener, true);\n+\n+        // bring the disk usages to less than the threshold,\n+        // but more than the LWM.\n+        // should still be readonly\n+        setUsageAndThenVerify(curDir1, nospace - 0.05f, curDir2, nospace - 0.05f, mockDiskChecker,\n+                mockLedgerDirsListener, true);\n+\n+        // bring one dir diskusage to less than lwm,\n+        // the other dir to be more than lwm, but the\n+        // overall diskusage to be more than lwm\n+        // should still be readonly\n+        setUsageAndThenVerify(curDir1, lwm - 0.03f, curDir2, lwm + 0.07f, mockDiskChecker, mockLedgerDirsListener,\n+                true);\n+\n+        // bring one dir diskusage to much less than lwm,\n+        // the other dir to be more than storage threahold, but the\n+        // overall diskusage is less than lwm\n+        // should goto readwrite\n+        setUsageAndThenVerify(curDir1, lwm - 0.17f, curDir2, nospace + 0.03f, mockDiskChecker, mockLedgerDirsListener,\n+                false);\n+        assertTrue(\"Only one LedgerDir should be writable\", dirsManager.getWritableLedgerDirs().size() == 1);\n+\n+        // bring both the dirs below lwm\n+        // should still be readwrite\n+        setUsageAndThenVerify(curDir1, lwm - 0.03f, curDir2, lwm - 0.02f, mockDiskChecker, mockLedgerDirsListener,\n+                false);\n+        assertTrue(\"Both the LedgerDirs should be writable\", dirsManager.getWritableLedgerDirs().size() == 2);\n+\n+        // bring both the dirs above lwm but < threshold\n+        // should still be readwrite\n+        setUsageAndThenVerify(curDir1, lwm + 0.02f, curDir2, lwm + 0.08f, mockDiskChecker, mockLedgerDirsListener,\n+                false);\n+    }\n+\n+    private void setUsageAndThenVerify(File dir1, float dir1Usage, File dir2, float dir2Usage,\n+            MockDiskChecker mockDiskChecker, MockLedgerDirsListener mockLedgerDirsListener, boolean verifyReadOnly)\n+            throws InterruptedException {\n+        HashMap<File, Float> usageMap = new HashMap<File, Float>();\n+        usageMap.put(dir1, dir1Usage);\n+        usageMap.put(dir2, dir2Usage);\n+        mockDiskChecker.setUsageMap(usageMap);\n+        Thread.sleep((diskCheckInterval * 2) + 100);\n+        if (verifyReadOnly) {\n+            assertTrue(mockLedgerDirsListener.readOnly);\n+        } else {\n+            assertFalse(mockLedgerDirsListener.readOnly);\n+        }\n+    }\n+\n     private class MockDiskChecker extends DiskChecker {\n \n-        private float used;\n+        private volatile float used;\n+        private volatile Map<File, Float> usageMap = null;\n \n         public MockDiskChecker(float threshold, float warnThreshold) {\n             super(threshold, warnThreshold);\n@@ -172,23 +335,48 @@ public MockDiskChecker(float threshold, float warnThreshold) {\n \n         @Override\n         public float checkDir(File dir) throws DiskErrorException, DiskOutOfSpaceException, DiskWarnThresholdException {\n-            if (used > getDiskUsageThreshold()) {\n-                throw new DiskOutOfSpaceException(\"\", used);\n+            float dirUsage = getDirUsage(dir);\n+\n+            if (dirUsage > getDiskUsageThreshold()) {\n+                throw new DiskOutOfSpaceException(\"\", dirUsage);\n+            }\n+            if (dirUsage > getDiskUsageWarnThreshold()) {\n+                throw new DiskWarnThresholdException(\"\", dirUsage);\n             }\n-            if (used > getDiskUsageWarnThreshold()) {\n-                throw new DiskWarnThresholdException(\"\", used);\n+            return dirUsage;\n+        }\n+\n+        @Override\n+        public float getTotalDiskUsage(List<File> dirs) {\n+            float accumulatedDiskUsage = 0f;\n+            for (File dir : dirs) {\n+                accumulatedDiskUsage += getDirUsage(dir);\n             }\n-            return used;\n+            return (accumulatedDiskUsage / dirs.size());\n+        }\n+\n+        public float getDirUsage(File dir) {\n+            float dirUsage;\n+            if ((usageMap == null) || (!usageMap.containsKey(dir))) {\n+                dirUsage = used;\n+            } else {\n+                dirUsage = usageMap.get(dir);\n+            }\n+            return dirUsage;\n         }\n \n         public void setUsage(float usage) {\n             this.used = usage;\n         }\n+\n+        public void setUsageMap(Map<File, Float> usageMap) {\n+            this.usageMap = usageMap;\n+        }\n     }\n \n     private class MockLedgerDirsListener implements LedgerDirsListener {\n \n-        public boolean readOnly;\n+        public volatile boolean readOnly;\n \n         public MockLedgerDirsListener() {\n             reset();"}]}