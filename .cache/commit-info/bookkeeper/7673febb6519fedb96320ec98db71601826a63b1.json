{"sha":"7673febb6519fedb96320ec98db71601826a63b1","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojc2NzNmZWJiNjUxOWZlZGI5NjMyMGVjOThkYjcxNjAxODI2YTYzYjE=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-11-12T02:35:13Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-11-12T02:35:13Z"},"message":"BOOKKEEPER-961: Assign read/write requests for same ledger to a single thread\n\nWhen entries for the same ledger are processed by the bookie we should avoid\nthe reordering of the request. Currently, if multiple read/write threads are\nconfigured, the requests will be passed to the executor and writes for same\nledger will be spread across multiple threads.\n\nThis poses 2 issues:\n 1. Mutex contention to access the LedgerDescriptor\n 2. If the client receives add-entry acks out of order it has anyway to wait\n    for the acks of previous entries before acknowledging the whole sequence\n    to the application. In practice, the reordering is increasing the latency\n   experienced by the application.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #69 from merlimat/bk-fixed-ledger-thread","tree":{"sha":"d174ae15ef0041851204da5f05fe24fa1e5360c1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/d174ae15ef0041851204da5f05fe24fa1e5360c1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/7673febb6519fedb96320ec98db71601826a63b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7673febb6519fedb96320ec98db71601826a63b1","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7673febb6519fedb96320ec98db71601826a63b1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7673febb6519fedb96320ec98db71601826a63b1/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"026ef10e1e9706ead4f1bc6763ded2e28c91480d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/026ef10e1e9706ead4f1bc6763ded2e28c91480d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/026ef10e1e9706ead4f1bc6763ded2e28c91480d"}],"stats":{"total":50,"additions":21,"deletions":29},"files":[{"sha":"4dec39ac40a75489a13b0433e9d2f73cc3f4d499","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","status":"modified","additions":12,"deletions":21,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieRequestProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieRequestProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieRequestProcessor.java?ref=7673febb6519fedb96320ec98db71601826a63b1","patch":"@@ -20,15 +20,12 @@\n  */\n package org.apache.bookkeeper.proto;\n \n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.processor.RequestProcessor;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.jboss.netty.channel.Channel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -55,12 +52,12 @@ public class BookieRequestProcessor implements RequestProcessor {\n     /**\n      * The threadpool used to execute all read entry requests issued to this server.\n      */\n-    private final ExecutorService readThreadPool;\n+    private final OrderedSafeExecutor readThreadPool;\n \n     /**\n      * The threadpool used to execute all add entry requests issued to this server.\n      */\n-    private final ExecutorService writeThreadPool;\n+    private final OrderedSafeExecutor writeThreadPool;\n \n     // Expose Stats\n     private final BKStats bkStats = BKStats.getInstance();\n@@ -74,12 +71,8 @@ public BookieRequestProcessor(ServerConfiguration serverCfg, Bookie bookie,\n                                   StatsLogger statsLogger) {\n         this.serverCfg = serverCfg;\n         this.bookie = bookie;\n-        this.readThreadPool =\n-            createExecutor(this.serverCfg.getNumReadWorkerThreads(),\n-                           \"BookieReadThread-\" + serverCfg.getBookiePort() + \"-%d\");\n-        this.writeThreadPool =\n-            createExecutor(this.serverCfg.getNumAddWorkerThreads(),\n-                           \"BookieWriteThread-\" + serverCfg.getBookiePort() + \"-%d\");\n+        this.readThreadPool = createExecutor(this.serverCfg.getNumReadWorkerThreads(), \"BookieReadThread-\" + serverCfg.getBookiePort());\n+        this.writeThreadPool = createExecutor(this.serverCfg.getNumAddWorkerThreads(), \"BookieWriteThread-\" + serverCfg.getBookiePort());\n         // Expose Stats\n         this.statsEnabled = serverCfg.isStatisticsEnabled();\n         this.addEntryStats = statsLogger.getOpStatsLogger(ADD_ENTRY);\n@@ -94,16 +87,15 @@ public void close() {\n         shutdownExecutor(readThreadPool);\n     }\n \n-    private ExecutorService createExecutor(int numThreads, String nameFormat) {\n+    private OrderedSafeExecutor createExecutor(int numThreads, String nameFormat) {\n         if (numThreads <= 0) {\n             return null;\n         } else {\n-            return Executors.newFixedThreadPool(numThreads,\n-                new ThreadFactoryBuilder().setNameFormat(nameFormat).build());\n+            return OrderedSafeExecutor.newBuilder().numThreads(numThreads).name(nameFormat).build();\n         }\n     }\n \n-    private void shutdownExecutor(ExecutorService service) {\n+    private void shutdownExecutor(OrderedSafeExecutor service) {\n         if (null != service) {\n             service.shutdown();\n         }\n@@ -160,7 +152,7 @@ private void processAddRequestV3(final BookkeeperProtocol.Request r, final Chann\n         if (null == writeThreadPool) {\n             write.run();\n         } else {\n-            writeThreadPool.submit(write);\n+            writeThreadPool.submitOrdered(r.getAddRequest().getLedgerId(), write);\n         }\n     }\n \n@@ -169,7 +161,7 @@ private void processReadRequestV3(final BookkeeperProtocol.Request r, final Chan\n         if (null == readThreadPool) {\n             read.run();\n         } else {\n-            readThreadPool.submit(read);\n+            readThreadPool.submitOrdered(r.getReadRequest().getLedgerId(), read);\n         }\n     }\n \n@@ -178,7 +170,7 @@ private void processAddRequest(final BookieProtocol.Request r, final Channel c)\n         if (null == writeThreadPool) {\n             write.run();\n         } else {\n-            writeThreadPool.submit(write);\n+            writeThreadPool.submitOrdered(r.getLedgerId(), write);\n         }\n     }\n \n@@ -187,8 +179,7 @@ private void processReadRequest(final BookieProtocol.Request r, final Channel c)\n         if (null == readThreadPool) {\n             read.run();\n         } else {\n-            readThreadPool.submit(read);\n+            readThreadPool.submitOrdered(r.getLedgerId(), read);\n         }\n     }\n-\n }"},{"sha":"681f6c667aadcc6e2143e347fe790711e079130f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBase.java?ref=7673febb6519fedb96320ec98db71601826a63b1","patch":"@@ -19,15 +19,15 @@\n \n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookieProtocol.Request;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.SafeRunnable;\n import org.jboss.netty.channel.Channel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-abstract class PacketProcessorBase implements Runnable {\n+abstract class PacketProcessorBase extends SafeRunnable {\n     private final static Logger logger = LoggerFactory.getLogger(PacketProcessorBase.class);\n     final Request request;\n     final Channel channel;\n@@ -64,7 +64,7 @@ protected void sendResponse(int rc, Object response, OpStatsLogger statsLogger)\n     }\n \n     @Override\n-    public void run() {\n+    public void safeRun() {\n         if (!isVersionCompatible()) {\n             sendResponse(BookieProtocol.EBADVERSION,\n                          ResponseBuilder.buildErrorResponse(BookieProtocol.EBADVERSION, request),"},{"sha":"85ec6cb87c3fa1625e43ea23d453a9db538824f0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PacketProcessorBaseV3.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPacketProcessorBaseV3.java?ref=7673febb6519fedb96320ec98db71601826a63b1","patch":"@@ -28,9 +28,10 @@\n import org.apache.bookkeeper.proto.BookkeeperProtocol.StatusCode;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.SafeRunnable;\n import org.jboss.netty.channel.Channel;\n \n-public abstract class PacketProcessorBaseV3 {\n+public abstract class PacketProcessorBaseV3 extends SafeRunnable {\n \n     final Request request;\n     final Channel channel;"},{"sha":"b9037c11e38c8aaedd7089c38eaf33975199d5e5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java?ref=7673febb6519fedb96320ec98db71601826a63b1","patch":"@@ -38,7 +38,7 @@\n \n import com.google.protobuf.ByteString;\n \n-class ReadEntryProcessorV3 extends PacketProcessorBaseV3 implements Runnable {\n+class ReadEntryProcessorV3 extends PacketProcessorBaseV3 {\n \n     private final static Logger LOG = LoggerFactory.getLogger(ReadEntryProcessorV3.class);\n \n@@ -148,7 +148,7 @@ private ReadResponse getReadResponse() {\n     }\n \n     @Override\n-    public void run() {\n+    public void safeRun() {\n         ReadResponse readResponse = getReadResponse();\n         sendResponse(readResponse);\n     }"},{"sha":"242ed8149348483a0514b3779c4a176211b7bc10","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/WriteEntryProcessorV3.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/7673febb6519fedb96320ec98db71601826a63b1/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FWriteEntryProcessorV3.java?ref=7673febb6519fedb96320ec98db71601826a63b1","patch":"@@ -36,7 +36,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-class WriteEntryProcessorV3 extends PacketProcessorBaseV3 implements Runnable {\n+class WriteEntryProcessorV3 extends PacketProcessorBaseV3 {\n     private final static Logger logger = LoggerFactory.getLogger(WriteEntryProcessorV3.class);\n \n     public WriteEntryProcessorV3(Request request, Channel channel,\n@@ -138,7 +138,7 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n     }\n \n     @Override\n-    public void run() {\n+    public void safeRun() {\n         AddResponse addResponse = getAddResponse();\n         if (null != addResponse) {\n             // This means there was an error and we should send this back."}]}