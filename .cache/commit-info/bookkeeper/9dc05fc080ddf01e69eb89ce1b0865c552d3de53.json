{"sha":"9dc05fc080ddf01e69eb89ce1b0865c552d3de53","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjlkYzA1ZmMwODBkZGYwMWU2OWViODljZTFiMDg2NWM1NTJkM2RlNTM=","commit":{"author":{"name":"Rithin","email":"rithin.shetty@salesforce.com","date":"2016-09-10T19:01:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-09-10T19:01:27Z"},"message":"BOOKKEEPER-945: Add counters to track the activity of auditor and repl…\n\n…ication workers\n\nOnce we enable auto recovery, auditor and replication workers start their activity.\nToday there is no way to monitor it using counters. This change introduces the\nfollowing counters to track various activities of auditor and replication workers like:\n\n- Time taken by auditor to build the bookie->ledger list\n- No. of under replicated ledgers detected\n- Time taken by auditor to publish the under replicated ledger list\n- Time taken by auditor to check all the ledgers in the cluster\n- No. of ledgers replicated by each replication worker\n- No. of entries and bytes of data read and written by each replication worker\n- Auditor can also report the distribution of ledgers within the cluster: how many bookies own a piece of ledger, etc.\n\nAuthor: Rithin <rithin.shetty@salesforce.com>\n\nReviewers: sijie@apache.org <sijie@apache.org>\n\nCloses #57 from rithin-shetty/auto_recovery_counters","tree":{"sha":"54ba4de845df52326a791530990cc2886fe5b652","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/54ba4de845df52326a791530990cc2886fe5b652"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/9dc05fc080ddf01e69eb89ce1b0865c552d3de53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9dc05fc080ddf01e69eb89ce1b0865c552d3de53","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9dc05fc080ddf01e69eb89ce1b0865c552d3de53","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/comments","author":{"login":"rithin-shetty","id":19738357,"node_id":"MDQ6VXNlcjE5NzM4MzU3","avatar_url":"https://avatars.githubusercontent.com/u/19738357?v=4","gravatar_id":"","url":"https://api.github.com/users/rithin-shetty","html_url":"https://github.com/rithin-shetty","followers_url":"https://api.github.com/users/rithin-shetty/followers","following_url":"https://api.github.com/users/rithin-shetty/following{/other_user}","gists_url":"https://api.github.com/users/rithin-shetty/gists{/gist_id}","starred_url":"https://api.github.com/users/rithin-shetty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rithin-shetty/subscriptions","organizations_url":"https://api.github.com/users/rithin-shetty/orgs","repos_url":"https://api.github.com/users/rithin-shetty/repos","events_url":"https://api.github.com/users/rithin-shetty/events{/privacy}","received_events_url":"https://api.github.com/users/rithin-shetty/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9db51b8d532d18485798d9dd96973c22450a0495","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/9db51b8d532d18485798d9dd96973c22450a0495","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/9db51b8d532d18485798d9dd96973c22450a0495"}],"stats":{"total":153,"additions":137,"deletions":16},"files":[{"sha":"022d4da456b9a7dbb473d7710b64bb22cb5684e0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -52,6 +52,8 @@\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.zookeeper.ZKUtil;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n@@ -137,24 +139,29 @@ public BookKeeperAdmin(ClientConfiguration conf) throws IOException, Interrupted\n         // Create the BookKeeper client instance\n         bkc = new BookKeeper(conf, zk);\n         ownsBK = true;\n-\n-        this.lfr = new LedgerFragmentReplicator(bkc);\n+        this.lfr = new LedgerFragmentReplicator(bkc, NullStatsLogger.INSTANCE);\n     }\n \n     /**\n      * Constructor that takes in a BookKeeper instance . This will be useful,\n-     * when users already has bk instance ready.\n+     * when user already has bk instance ready.\n      *\n      * @param bkc\n      *            - bookkeeper instance\n+     * @param statsLogger\n+     *            - stats logger\n      */\n-    public BookKeeperAdmin(final BookKeeper bkc) {\n+    public BookKeeperAdmin(final BookKeeper bkc, StatsLogger statsLogger) {\n         this.bkc = bkc;\n         ownsBK = false;\n         this.zk = bkc.zk;\n         ownsZK = false;\n         this.bookiesPath = bkc.getConf().getZkAvailableBookiesPath();\n-        this.lfr = new LedgerFragmentReplicator(bkc);\n+        this.lfr = new LedgerFragmentReplicator(bkc, statsLogger);\n+    }\n+\n+    public BookKeeperAdmin(final BookKeeper bkc) {\n+        this(bkc, NullStatsLogger.INSTANCE);\n     }\n \n     /**"},{"sha":"22241e67f82e4a4253c98d334772f095c3a5473d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerFragmentReplicator.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -33,6 +33,11 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.replication.ReplicationStats;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException.Code;\n@@ -48,9 +53,23 @@ public class LedgerFragmentReplicator {\n \n     // BookKeeper instance\n     private BookKeeper bkc;\n+    private StatsLogger statsLogger;\n+    private final Counter numEntriesRead;\n+    private final OpStatsLogger numBytesRead;\n+    private final Counter numEntriesWritten;\n+    private final OpStatsLogger numBytesWritten;\n \n-    public LedgerFragmentReplicator(BookKeeper bkc) {\n+    public LedgerFragmentReplicator(BookKeeper bkc, StatsLogger statsLogger) {\n         this.bkc = bkc;\n+        this.statsLogger = statsLogger;\n+        numEntriesRead = this.statsLogger.getCounter(ReplicationStats.NUM_ENTRIES_READ);\n+        numBytesRead = this.statsLogger.getOpStatsLogger(ReplicationStats.NUM_BYTES_READ);\n+        numEntriesWritten = this.statsLogger.getCounter(ReplicationStats.NUM_ENTRIES_WRITTEN);\n+        numBytesWritten = this.statsLogger.getOpStatsLogger(ReplicationStats.NUM_BYTES_WRITTEN);\n+    }\n+\n+    public LedgerFragmentReplicator(BookKeeper bkc) {\n+        this(bkc, NullStatsLogger.INSTANCE);\n     }\n \n     private final static Logger LOG = LoggerFactory\n@@ -259,6 +278,9 @@ public void readComplete(int rc, LedgerHandle lh,\n                  */\n                 LedgerEntry entry = seq.nextElement();\n                 byte[] data = entry.getEntry();\n+                final long dataLength = data.length;\n+                numEntriesRead.inc();\n+                numBytesRead.registerSuccessfulValue(dataLength);\n                 ChannelBuffer toSend = lh.getDigestManager()\n                         .computeDigestAndPackageForSending(entryId,\n                                 lh.getLastAddConfirmed(), entry.getLength(),\n@@ -278,6 +300,8 @@ public void writeComplete(int rc, long ledgerId,\n                                                     + addr, BKException\n                                                     .create(rc));\n                                 } else {\n+                                    numEntriesWritten.inc();\n+                                    numBytesWritten.registerSuccessfulValue(dataLength);\n                                     if (LOG.isDebugEnabled()) {\n                                         LOG.debug(\"Success writing ledger id \"\n                                                 + ledgerId + \", entry id \""},{"sha":"3c8d47500e39f77fb2c319cb61696f51af559936","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -29,6 +29,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Queue;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -51,6 +52,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Sets;\n import com.google.common.util.concurrent.RateLimiter;\n \n /**\n@@ -189,6 +191,30 @@ public Map<String, byte[]> getCustomMetadata() {\n         return metadata.getCustomMetadata();\n     }\n \n+    /**\n+     * Get the number of fragments that makeup this ledger\n+     *\n+     * @return the count of fragments\n+     */\n+    synchronized public long getNumFragments() {\n+        return metadata.getEnsembles().size();\n+    }\n+\n+    /**\n+     * Get the count of unique bookies that own part of this ledger\n+     * by going over all the fragments of the ledger.\n+     *\n+     * @return count of unique bookies\n+     */\n+    synchronized public long getNumBookies() {\n+        Map<Long, ArrayList<BookieSocketAddress>> m = metadata.getEnsembles();\n+        Set<BookieSocketAddress> s = Sets.newHashSet();\n+        for (ArrayList<BookieSocketAddress> aList : m.values()) {\n+            s.addAll(aList);\n+        }\n+        return s.size();\n+    }\n+\n     /**\n      * Get the DigestManager\n      *"},{"sha":"835b34f04f0cdf90a1caf6e8fe37b8455ae49a8e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":45,"deletions":6,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -20,7 +20,9 @@\n  */\n package org.apache.bookkeeper.replication;\n \n+import com.google.common.base.Stopwatch;\n import com.google.common.collect.Sets;\n+\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n@@ -39,13 +41,18 @@\n import org.apache.bookkeeper.replication.ReplicationException.BKAuditException;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n-import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.replication.ReplicationStats;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.zookeeper.AsyncCallback;\n+\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.SettableFuture;\n+\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n@@ -83,11 +90,28 @@ public class Auditor implements BookiesListener {\n     private final ScheduledExecutorService executor;\n     private List<String> knownBookies = new ArrayList<String>();\n     private final String bookieIdentifier;\n+    private final StatsLogger statsLogger;\n+    private final OpStatsLogger numUnderReplicatedLedger;\n+    private final OpStatsLogger uRLPublishTimeForLostBookies;\n+    private final OpStatsLogger bookieToLedgersMapCreationTime;\n+    private final OpStatsLogger checkAllLedgersTime;\n+    private final Counter numLedgersChecked;\n+    private final OpStatsLogger numFragmentsPerLedger;\n+    private final OpStatsLogger numBookiesPerLedger;\n \n     public Auditor(final String bookieIdentifier, ServerConfiguration conf,\n-                   ZooKeeper zkc) throws UnavailableException {\n+                   ZooKeeper zkc, StatsLogger statsLogger) throws UnavailableException {\n         this.conf = conf;\n         this.bookieIdentifier = bookieIdentifier;\n+        this.statsLogger = statsLogger;\n+\n+        numUnderReplicatedLedger = this.statsLogger.getOpStatsLogger(ReplicationStats.NUM_UNDER_REPLICATED_LEDGERS);\n+        uRLPublishTimeForLostBookies = this.statsLogger.getOpStatsLogger(ReplicationStats.URL_PUBLISH_TIME_FOR_LOST_BOOKIE);\n+        bookieToLedgersMapCreationTime = this.statsLogger.getOpStatsLogger(ReplicationStats.BOOKIE_TO_LEDGERS_MAP_CREATION_TIME);\n+        checkAllLedgersTime = this.statsLogger.getOpStatsLogger(ReplicationStats.CHECK_ALL_LEDGERS_TIME);\n+        numLedgersChecked = this.statsLogger.getCounter(ReplicationStats.NUM_LEDGERS_CHECKED);\n+        numFragmentsPerLedger = statsLogger.getOpStatsLogger(ReplicationStats.NUM_FRAGMENTS_PER_LEDGER);\n+        numBookiesPerLedger = statsLogger.getOpStatsLogger(ReplicationStats.NUM_BOOKIES_PER_LEDGER);\n \n         initialize(conf, zkc);\n \n@@ -113,7 +137,7 @@ private void initialize(ServerConfiguration conf, ZooKeeper zkc)\n                     .newLedgerUnderreplicationManager();\n \n             this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n-            this.admin = new BookKeeperAdmin(bkc);\n+            this.admin = new BookKeeperAdmin(bkc, statsLogger);\n         } catch (CompatibilityException ce) {\n             throw new UnavailableException(\n                     \"CompatibilityException while initializing Auditor\", ce);\n@@ -215,7 +239,10 @@ public void run() {\n                                     return;\n                                 }\n \n+                                Stopwatch stopwatch = new Stopwatch().start();\n                                 checkAllLedgers();\n+                                checkAllLedgersTime.registerSuccessfulEvent(stopwatch.stop().elapsedMillis(),\n+                                                                            TimeUnit.MILLISECONDS);\n                             } catch (KeeperException ke) {\n                                 LOG.error(\"Exception while running periodic check\", ke);\n                             } catch (InterruptedException ie) {\n@@ -295,6 +322,7 @@ private void auditBookies()\n             return;\n         }\n \n+        Stopwatch stopwatch = new Stopwatch().start();\n         // put exit cases here\n         Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n         try {\n@@ -316,8 +344,12 @@ private void auditBookies()\n         Collection<String> lostBookies = CollectionUtils.subtract(knownBookies,\n                 availableBookies);\n \n-        if (lostBookies.size() > 0)\n+        bookieToLedgersMapCreationTime.registerSuccessfulEvent(stopwatch.elapsedMillis(), TimeUnit.MILLISECONDS);\n+        if (lostBookies.size() > 0) {\n             handleLostBookies(lostBookies, ledgerDetails);\n+            uRLPublishTimeForLostBookies.registerSuccessfulEvent(stopwatch.stop().elapsedMillis(), TimeUnit.MILLISECONDS);\n+        }\n+\n     }\n \n     private Map<String, Set<Long>> generateBookie2LedgersIndex()\n@@ -347,6 +379,7 @@ private void publishSuspectedLedgers(String bookieIP, Set<Long> ledgers)\n         }\n         LOG.info(\"Following ledgers: \" + ledgers + \" of bookie: \" + bookieIP\n                 + \" are identified as underreplicated\");\n+        numUnderReplicatedLedger.registerSuccessfulValue(ledgers.size());\n         for (Long ledgerId : ledgers) {\n             try {\n                 ledgerUnderreplicationManager.markLedgerUnderreplicated(\n@@ -418,7 +451,7 @@ void checkAllLedgers() throws BKAuditException, BKException,\n \n         final BookKeeper client = new BookKeeper(new ClientConfiguration(conf),\n                                                  newzk);\n-        final BookKeeperAdmin admin = new BookKeeperAdmin(client);\n+        final BookKeeperAdmin admin = new BookKeeperAdmin(client, statsLogger);\n \n         try {\n             final LedgerChecker checker = new LedgerChecker(client);\n@@ -447,6 +480,12 @@ public void process(final Long ledgerId,\n                     try {\n                         lh = admin.openLedgerNoRecovery(ledgerId);\n                         checker.checkLedger(lh, new ProcessLostFragmentsCb(lh, callback));\n+                        // we collect the following stats to get a measure of the\n+                        // distribution of a single ledger within the bk cluster\n+                        // the higher the number of fragments/bookies, the more distributed it is\n+                        numFragmentsPerLedger.registerSuccessfulValue(lh.getNumFragments());\n+                        numBookiesPerLedger.registerSuccessfulValue(lh.getNumBookies());\n+                        numLedgersChecked.inc();\n                     } catch (BKException.BKNoSuchLedgerExistsException bknsle) {\n                         LOG.debug(\"Ledger was deleted before we could check it\", bknsle);\n                         callback.processResult(BKException.Code.OK,"},{"sha":"e8dfb02d342569810d5f333899191881aeb48ad7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorElector.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -92,6 +92,8 @@ public class AuditorElector {\n \n     // Expose Stats\n     private final Counter electionAttempts;\n+    private final StatsLogger statsLogger;\n+\n \n     /**\n      * AuditorElector for performing the auditor election\n@@ -129,6 +131,7 @@ public AuditorElector(final String bookieId, ServerConfiguration conf,\n         this.bookieId = bookieId;\n         this.conf = conf;\n         this.zkc = zkc;\n+        this.statsLogger = statsLogger;\n         this.electionAttempts = statsLogger.getCounter(ELECTION_ATTEMPTS);\n         basePath = conf.getZkLedgersRootPath() + '/'\n                 + BookKeeperConstants.UNDER_REPLICATION_NODE;\n@@ -266,7 +269,7 @@ public void run() {\n \n                             zkc.setData(getVotePath(\"\"),\n                                         TextFormat.printToString(builder.build()).getBytes(UTF_8), -1);\n-                            auditor = new Auditor(bookieId, conf, zkc);\n+                            auditor = new Auditor(bookieId, conf, zkc, statsLogger);\n                             auditor.start();\n                         } else {\n                             // If not an auditor, will be watching to my predecessor and"},{"sha":"231ec01124cabad7a8600f3626f7ed724a51bf42","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationStats.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -26,9 +26,21 @@ public interface ReplicationStats {\n \n     public final static String AUDITOR_SCOPE = \"auditor\";\n     public final static String ELECTION_ATTEMPTS = \"election_attempts\";\n+    public final static String NUM_UNDER_REPLICATED_LEDGERS = \"NUM_UNDER_REPLICATED_LEDGERS\";\n+    public final static String URL_PUBLISH_TIME_FOR_LOST_BOOKIE = \"URL_PUBLISH_TIME_FOR_LOST_BOOKIE\";\n+    public final static String BOOKIE_TO_LEDGERS_MAP_CREATION_TIME = \"BOOKIE_TO_LEDGERS_MAP_CREATION_TIME\";\n+    public final static String CHECK_ALL_LEDGERS_TIME = \"CHECK_ALL_LEDGERS_TIME\";\n+    public final static String NUM_FRAGMENTS_PER_LEDGER = \"NUM_FRAGMENTS_PER_LEDGER\";\n+    public final static String NUM_BOOKIES_PER_LEDGER = \"NUM_BOOKIES_PER_LEDGER\";\n+    public final static String NUM_LEDGERS_CHECKED = \"NUM_LEDGERS_CHECKED\";\n \n     public final static String REPLICATION_WORKER_SCOPE = \"replication_worker\";\n     public final static String REREPLICATE_OP = \"rereplicate\";\n+    public final static String NUM_FULL_OR_PARTIAL_LEDGERS_REPLICATED = \"NUM_FULL_OR_PARTIAL_LEDGERS_REPLICATED\";\n+    public final static String NUM_ENTRIES_READ = \"NUM_ENTRIES_READ\";\n+    public final static String NUM_BYTES_READ = \"NUM_BYTES_READ\";\n+    public final static String NUM_ENTRIES_WRITTEN = \"NUM_ENTRIES_WRITTEN\";\n+    public final static String NUM_BYTES_WRITTEN = \"NUM_BYTES_WRITTEN\";\n \n     public final static String BK_CLIENT_SCOPE = \"bk_client\";\n "},{"sha":"3f2261ff616158687cb6d55200d4e4a6a381b0d0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -51,6 +51,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.stats.Counter;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n@@ -84,6 +85,7 @@ public class ReplicationWorker implements Runnable {\n \n     // Expose Stats\n     private final OpStatsLogger rereplicateOpStats;\n+    private final Counter numLedgersReplicated;\n \n     /**\n      * Replication worker for replicating the ledger fragments from\n@@ -134,7 +136,7 @@ public ReplicationWorker(final ZooKeeper zkc,\n                 .setZookeeper(zkc)\n                 .setStatsLogger(statsLogger.scope(BK_CLIENT_SCOPE))\n                 .build();\n-        this.admin = new BookKeeperAdmin(bkc);\n+        this.admin = new BookKeeperAdmin(bkc, statsLogger);\n         this.ledgerChecker = new LedgerChecker(bkc);\n         this.workerThread = new BookieThread(this, \"ReplicationWorker\");\n         this.openLedgerRereplicationGracePeriod = conf\n@@ -143,6 +145,7 @@ public ReplicationWorker(final ZooKeeper zkc,\n \n         // Expose Stats\n         this.rereplicateOpStats = statsLogger.getOpStatsLogger(REREPLICATE_OP);\n+        this.numLedgersReplicated = statsLogger.getCounter(ReplicationStats.NUM_FULL_OR_PARTIAL_LEDGERS_REPLICATED);\n     }\n \n     /** Start the replication worker */\n@@ -254,6 +257,7 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n         LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n \n         boolean foundOpenFragments = false;\n+        long numFragsReplicated = 0;\n         for (LedgerFragment ledgerFragment : fragments) {\n             if (!ledgerFragment.isClosed()) {\n                 foundOpenFragments = true;\n@@ -266,6 +270,7 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n             }\n             try {\n                 admin.replicateLedgerFragment(lh, ledgerFragment, targetBookie);\n+                numFragsReplicated++;\n             } catch (BKException.BKBookieHandleNotAvailableException e) {\n                 LOG.warn(\"BKBookieHandleNotAvailableException \"\n                         + \"while replicating the fragment\", e);\n@@ -279,6 +284,10 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n             }\n         }\n \n+        if (numFragsReplicated > 0) {\n+            numLedgersReplicated.inc();\n+        }\n+\n         if (foundOpenFragments || isLastSegmentOpenAndMissingBookies(lh)) {\n             deferLedgerLockRelease(ledgerIdToReplicate);\n             return false;"},{"sha":"1a9abea1a8a0aee45d671139fc04dc0806fcecdd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/UpdateLedgerOpTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FUpdateLedgerOpTest.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -302,4 +302,4 @@ public void addComplete(int rccb, LedgerHandle lh, long entryId, Object ctx) {\n         }\n         return lh;\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"428a597456367ea8b8a69aae93aebea9eeae7168","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/9dc05fc080ddf01e69eb89ce1b0865c552d3de53/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditorPeriodicCheckTest.java?ref=9dc05fc080ddf01e69eb89ce1b0865c552d3de53","patch":"@@ -30,6 +30,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.zookeeper.ZooKeeperClient;\n import org.apache.zookeeper.ZooKeeper;\n@@ -313,7 +314,7 @@ public void testPeriodicCheckWhenLedgerDeleted() throws Exception {\n         }\n         final Auditor auditor = new Auditor(\n                 Bookie.getBookieAddress(bsConfs.get(0)).toString(),\n-                bsConfs.get(0), zkc);\n+                bsConfs.get(0), zkc, NullStatsLogger.INSTANCE);\n         final AtomicBoolean exceptionCaught = new AtomicBoolean(false);\n         final CountDownLatch latch = new CountDownLatch(1);\n         Thread t = new Thread() {"}]}