{"sha":"61390322ea591bcfe3186e289c27f331c86941ad","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjYxMzkwMzIyZWE1OTFiY2ZlMzE4NmUyODljMjdmMzMxYzg2OTQxYWQ=","commit":{"author":{"name":"Siddharth Boobna","email":"sboobna@yahoo-inc.com","date":"2016-02-09T07:28:09Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-09T07:28:09Z"},"message":"BOOKKEEPER-892: Bookie sanity test\n\nAuthor: Siddharth Boobna <sboobna@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #13 from sid825/BOOKKEEPER-892","tree":{"sha":"d2ec66a872e12f459bff2985d37e621b638eff76","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/d2ec66a872e12f459bff2985d37e621b638eff76"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/61390322ea591bcfe3186e289c27f331c86941ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/61390322ea591bcfe3186e289c27f331c86941ad","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/61390322ea591bcfe3186e289c27f331c86941ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/61390322ea591bcfe3186e289c27f331c86941ad/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"626b7e8bb0b84271df97cfbf0a1b157c6cfe5a18","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/626b7e8bb0b84271df97cfbf0a1b157c6cfe5a18","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/626b7e8bb0b84271df97cfbf0a1b157c6cfe5a18"}],"stats":{"total":164,"additions":164,"deletions":0},"files":[{"sha":"fca2164e117e5270779a8a4e966a145ffdff2b8f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/61390322ea591bcfe3186e289c27f331c86941ad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/61390322ea591bcfe3186e289c27f331c86941ad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=61390322ea591bcfe3186e289c27f331c86941ad","patch":"@@ -29,6 +29,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.Collections;\n+import java.util.Enumeration;\n import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n \n@@ -38,7 +39,9 @@\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.UpdateLedgerOp;\n@@ -97,6 +100,7 @@ public class BookieShell implements Tool {\n     static final String CMD_LISTUNDERREPLICATED = \"listunderreplicated\";\n     static final String CMD_WHOISAUDITOR = \"whoisauditor\";\n     static final String CMD_SIMPLETEST = \"simpletest\";\n+    static final String CMD_BOOKIESANITYTEST = \"bookiesanity\";\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n     static final String CMD_LASTMARK = \"lastmark\";\n@@ -683,6 +687,94 @@ Options getOptions() {\n         }\n     }\n \n+    /**\n+     * Command to run a bookie sanity test\n+     */\n+    class BookieSanityTestCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        BookieSanityTestCmd() {\n+            super(CMD_BOOKIESANITYTEST);\n+            lOpts.addOption(\"e\", \"entries\", true, \"Total entries to be added for the test (default 10)\");\n+            lOpts.addOption(\"t\", \"timeout\", true, \"Timeout for write/read operations in seconds (default 1)\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Sanity test for local bookie. Create ledger and write/reads entries on local bookie.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"bookiesanity [-entries N] [-timeout N]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            int numberOfEntries = getOptionIntValue(cmdLine, \"entries\", 10);\n+            int timeoutSecs= getOptionIntValue(cmdLine, \"timeout\", 1);\n+\n+            ClientConfiguration conf = new ClientConfiguration();\n+            conf.addConfiguration(bkConf);\n+            conf.setEnsemblePlacementPolicy(LocalBookieEnsemblePlacementPolicy.class);\n+            conf.setAddEntryTimeout(timeoutSecs);\n+            conf.setReadEntryTimeout(timeoutSecs);\n+\n+            BookKeeper bk = new BookKeeper(conf);\n+            LedgerHandle lh = null;\n+            try {\n+                lh = bk.createLedger(1, 1, DigestType.MAC, new byte[0]);\n+                LOG.info(\"Created ledger {}\", lh.getId());\n+\n+                for (int i = 0; i < numberOfEntries; i++) {\n+                    String content = \"entry-\" + i;\n+                    lh.addEntry(content.getBytes());\n+                }\n+\n+                LOG.info(\"Written {} entries in ledger {}\", numberOfEntries, lh.getId());\n+\n+                // Reopen the ledger and read entries\n+                lh = bk.openLedger(lh.getId(), DigestType.MAC, new byte[0]);\n+                if (lh.getLastAddConfirmed() != (numberOfEntries - 1)) {\n+                    throw new Exception(\"Invalid last entry found on ledger. expecting: \" + (numberOfEntries - 1)\n+                            + \" -- found: \" + lh.getLastAddConfirmed());\n+                }\n+\n+                Enumeration<LedgerEntry> entries = lh.readEntries(0, numberOfEntries - 1);\n+                int i = 0;\n+                while (entries.hasMoreElements()) {\n+                    LedgerEntry entry = entries.nextElement();\n+                    String actualMsg = new String(entry.getEntry());\n+                    String expectedMsg = \"entry-\" + (i++);\n+                    if (!expectedMsg.equals(actualMsg)) {\n+                        throw new Exception(\"Failed validation of received message - Expected: \" + expectedMsg\n+                                + \", Actual: \" + actualMsg);\n+                    }\n+                }\n+\n+                LOG.info(\"Read {} entries from ledger {}\", entries, lh.getId());\n+            } catch (Exception e) {\n+                LOG.warn(\"Error in bookie sanity test\", e);\n+                return -1;\n+            } finally {\n+                if (lh != null) {\n+                    bk.deleteLedger(lh.getId());\n+                    LOG.info(\"Deleted ledger {}\", lh.getId());\n+                }\n+\n+                bk.close();\n+            }\n+\n+            LOG.info(\"Bookie sanity test succeeded\");\n+            return 0;\n+        }\n+    }\n+\n     /**\n      * Command to read entry log files.\n      */\n@@ -1338,6 +1430,7 @@ public interface UpdateLedgerNotifier {\n         commands.put(CMD_WHOISAUDITOR, new WhoIsAuditorCmd());\n         commands.put(CMD_LEDGERMETADATA, new LedgerMetadataCmd());\n         commands.put(CMD_SIMPLETEST, new SimpleTestCmd());\n+        commands.put(CMD_BOOKIESANITYTEST, new BookieSanityTestCmd());\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n         commands.put(CMD_LASTMARK, new LastMarkCmd());"},{"sha":"d1c41dd4f58da0fa7a9a5588b35fb7674b19a32b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LocalBookieEnsemblePlacementPolicy.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/61390322ea591bcfe3186e289c27f331c86941ad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/61390322ea591bcfe3186e289c27f331c86941ad/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLocalBookieEnsemblePlacementPolicy.java?ref=61390322ea591bcfe3186e289c27f331c86941ad","patch":"@@ -0,0 +1,71 @@\n+package org.apache.bookkeeper.bookie;\n+\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.EnsemblePlacementPolicy;\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.commons.configuration.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Special ensemble placement policy that always return local bookie. Only works with ledgers with ensemble=1.\n+ */\n+public class LocalBookieEnsemblePlacementPolicy implements EnsemblePlacementPolicy {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(LocalBookieEnsemblePlacementPolicy.class);\n+\n+    private BookieSocketAddress bookieAddress;\n+\n+    @Override\n+    public EnsemblePlacementPolicy initialize(Configuration conf) {\n+\n+        // Configuration will have already the bookie configuration inserted\n+        ServerConfiguration serverConf = new ServerConfiguration();\n+        serverConf.addConfiguration(conf);\n+\n+        try {\n+            bookieAddress = Bookie.getBookieAddress(serverConf);\n+        } catch (UnknownHostException e) {\n+            LOG.warn(\"Unable to get bookie address\", e);\n+            throw new RuntimeException(e);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitalize() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<BookieSocketAddress> onClusterChanged(Set<BookieSocketAddress> writableBookies,\n+            Set<BookieSocketAddress> readOnlyBookies) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public ArrayList<BookieSocketAddress> newEnsemble(int ensembleSize, int writeQuorumSize,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        if (ensembleSize > 1) {\n+            throw new IllegalArgumentException(\"Local ensemble policy can only return 1 bookie\");\n+        }\n+\n+        return Lists.newArrayList(bookieAddress);\n+    }\n+\n+    @Override\n+    public BookieSocketAddress replaceBookie(BookieSocketAddress bookieToReplace,\n+            Set<BookieSocketAddress> excludeBookies) throws BKNotEnoughBookiesException {\n+        throw new BKNotEnoughBookiesException();\n+    }\n+\n+}"}]}