{"sha":"77de65efa4e06aa4434ba87f4760e6851ae8c6ba","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2Ojc3ZGU2NWVmYTRlMDZhYTQ0MzRiYTg3ZjQ3NjBlNjg1MWFlOGM2YmE=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-20T08:04:51Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-20T08:04:51Z"},"message":"DL-91: Be able to close writer within a timeout duration\n\nmerge twitter's change on closing writer.\n\nAuthor: Sijie Guo <sijieg@twitter.com>\nAuthor: Sijie Guo <sijie@apache.org>\nAuthor: Jordan Bull <jbull@twitter.com>\nAuthor: Leigh Stewart <lstewart@twitter.com>\nAuthor: Dave Rusek <dave.rusek@gmail.com>\nAuthor: Dave Rusek <drusek@twitter.com>\n\nReviewers: Leigh Stewart <lstewart@apache.org>\n\nCloses #64 from sijie/merge/DL-91","tree":{"sha":"f789a972e73ada0b542dc8bd5c1f48828ca8a974","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/f789a972e73ada0b542dc8bd5c1f48828ca8a974"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/77de65efa4e06aa4434ba87f4760e6851ae8c6ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/77de65efa4e06aa4434ba87f4760e6851ae8c6ba","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/77de65efa4e06aa4434ba87f4760e6851ae8c6ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/77de65efa4e06aa4434ba87f4760e6851ae8c6ba/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"715fa5cefc31a7041725cb959641287f60921dd7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/715fa5cefc31a7041725cb959641287f60921dd7","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/715fa5cefc31a7041725cb959641287f60921dd7"}],"stats":{"total":53,"additions":40,"deletions":13},"files":[{"sha":"79f5f5e5ef2aa9eacd4e283fc8f67c0d2e2376e0","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogWriter.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77de65efa4e06aa4434ba87f4760e6851ae8c6ba/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77de65efa4e06aa4434ba87f4760e6851ae8c6ba/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java?ref=77de65efa4e06aa4434ba87f4760e6851ae8c6ba","patch":"@@ -212,8 +212,10 @@ private Future<BKLogSegmentWriter> getLogSegmentWriter(long firstTxid,\n                                                            boolean rollLog,\n                                                            boolean allowMaxTxID) {\n         Stopwatch stopwatch = Stopwatch.createStarted();\n-        return doGetLogSegmentWriter(firstTxid, bestEffort, rollLog, allowMaxTxID)\n-                .addEventListener(new OpStatsListener<BKLogSegmentWriter>(getWriterOpStatsLogger, stopwatch));\n+        return FutureUtils.stats(\n+                doGetLogSegmentWriter(firstTxid, bestEffort, rollLog, allowMaxTxID),\n+                getWriterOpStatsLogger,\n+                stopwatch);\n     }\n \n     private Future<BKLogSegmentWriter> doGetLogSegmentWriter(final long firstTxid,\n@@ -415,8 +417,10 @@ void errorOutPendingRequestsAndWriter(Throwable cause) {\n     @Override\n     public Future<DLSN> write(final LogRecord record) {\n         final Stopwatch stopwatch = Stopwatch.createStarted();\n-        return asyncWrite(record, true)\n-                .addEventListener(new OpStatsListener<DLSN>(writeOpStatsLogger, stopwatch));\n+        return FutureUtils.stats(\n+                asyncWrite(record, true),\n+                writeOpStatsLogger,\n+                stopwatch);\n     }\n \n     /**\n@@ -430,8 +434,10 @@ public Future<DLSN> write(final LogRecord record) {\n     @Override\n     public Future<List<Future<DLSN>>> writeBulk(final List<LogRecord> records) {\n         final Stopwatch stopwatch = Stopwatch.createStarted();\n-        return Future.value(asyncWriteBulk(records))\n-                .addEventListener(new OpStatsListener<List<Future<DLSN>>>(bulkWriteOpStatsLogger, stopwatch));\n+        return FutureUtils.stats(\n+                Future.value(asyncWriteBulk(records)),\n+                bulkWriteOpStatsLogger,\n+                stopwatch);\n     }\n \n     @Override\n@@ -478,12 +484,15 @@ Future<Long> markEndOfStream() {\n             logSegmentWriterFuture = getLogSegmentWriterForEndOfStream();\n         }\n \n-        return logSegmentWriterFuture.flatMap(new AbstractFunction1<BKLogSegmentWriter, Future<Long>>() {\n-            @Override\n-            public Future<Long> apply(BKLogSegmentWriter w) {\n-                return w.markEndOfStream();\n-            }\n-        }).addEventListener(new OpStatsListener<Long>(markEndOfStreamOpStatsLogger, stopwatch));\n+        return FutureUtils.stats(\n+                logSegmentWriterFuture.flatMap(new AbstractFunction1<BKLogSegmentWriter, Future<Long>>() {\n+                    @Override\n+                    public Future<Long> apply(BKLogSegmentWriter w) {\n+                        return w.markEndOfStream();\n+                    }\n+                }),\n+                markEndOfStreamOpStatsLogger,\n+                stopwatch);\n     }\n \n     @Override"},{"sha":"6a5f7a773312c5e24ce799ffb684ddb7ac0368c4","filename":"src/main/java/com/twitter/distributedlog/util/FutureUtils.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/77de65efa4e06aa4434ba87f4760e6851ae8c6ba/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/77de65efa4e06aa4434ba87f4760e6851ae8c6ba/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2Futil%2FFutureUtils.java?ref=77de65efa4e06aa4434ba87f4760e6851ae8c6ba","patch":"@@ -17,13 +17,15 @@\n  */\n package com.twitter.distributedlog.util;\n \n-import com.twitter.distributedlog.exceptions.BKTransmitException;\n+import com.google.common.base.Stopwatch;\n import com.twitter.distributedlog.DistributedLogConstants;\n+import com.twitter.distributedlog.exceptions.BKTransmitException;\n import com.twitter.distributedlog.exceptions.LockingException;\n import com.twitter.distributedlog.ZooKeeperClient;\n import com.twitter.distributedlog.exceptions.DLInterruptedException;\n import com.twitter.distributedlog.exceptions.UnexpectedException;\n import com.twitter.distributedlog.exceptions.ZKException;\n+import com.twitter.distributedlog.stats.OpStatsListener;\n import com.twitter.util.Await;\n import com.twitter.util.Duration;\n import com.twitter.util.Function;\n@@ -34,6 +36,7 @@\n import com.twitter.util.Return;\n import com.twitter.util.Throw;\n import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -224,6 +227,21 @@ public static <T, R> Future<List<R>> processList(List<T> collection,\n         return processor.promise;\n     }\n \n+    /**\n+     * Add a event listener over <i>result</i> for collecting the operation stats.\n+     *\n+     * @param result result to listen on\n+     * @param opStatsLogger stats logger to record operations stats\n+     * @param stopwatch stop watch to time operation\n+     * @param <T>\n+     * @return result after registered the event listener\n+     */\n+    public static <T> Future<T> stats(Future<T> result,\n+                                      OpStatsLogger opStatsLogger,\n+                                      Stopwatch stopwatch) {\n+        return result.addEventListener(new OpStatsListener<T>(opStatsLogger, stopwatch));\n+    }\n+\n     /**\n      * Await for the result of the future and thrown bk related exceptions.\n      *"}]}