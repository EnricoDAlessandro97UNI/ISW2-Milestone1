{"sha":"1bf73e9f5b1d9a982182681156c90c6de026ce17","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjFiZjczZTlmNWIxZDlhOTgyMTgyNjgxMTU2YzkwYzZkZTAyNmNlMTc=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-21T17:20:15Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-21T17:20:15Z"},"message":"DL-124: Use Java8 Future rather than twitter Future\n\nSwitch to use Java8 CompletableFuture, to reduce dependencies introduced by twitter future and make it more friendly to users (users don't think of using which version of scala).\n\nThis change is based on #132 . Gitsha ce0686e is the change to review.\n\nThe changes:\n\n- Change Future to CompletableFuture\n- Map to thenApply\n- flatMap to thenCompose\n- Added a FutureEventListener, and switch addEvenListener to whenComplete (or whenCompleteAsync)\n- setValue to complete\n- setException to completeExceptionally\n- add rescue, ignore, ensure to FutureUtils as util functions.\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Jia Zhai <None>, Leigh Stewart <lstewart@apache.org>\n\nCloses #133 from sijie/change_twitter_future_to_java_future","tree":{"sha":"3ec14787334c59838f410ef320193a6a000ea031","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/3ec14787334c59838f410ef320193a6a000ea031"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/1bf73e9f5b1d9a982182681156c90c6de026ce17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1bf73e9f5b1d9a982182681156c90c6de026ce17","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/1bf73e9f5b1d9a982182681156c90c6de026ce17","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/1bf73e9f5b1d9a982182681156c90c6de026ce17/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b90ad5d89717bb3ca161387af4fce4f913c9e0ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b90ad5d89717bb3ca161387af4fce4f913c9e0ae","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b90ad5d89717bb3ca161387af4fce4f913c9e0ae"}],"stats":{"total":641,"additions":99,"deletions":542},"files":[{"sha":"7197feb098365f71dce40ef5bed26e97f0629a3e","filename":"pom.xml","status":"modified","additions":19,"deletions":27,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1bf73e9f5b1d9a982182681156c90c6de026ce17/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1bf73e9f5b1d9a982182681156c90c6de026ce17/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/pom.xml?ref=1bf73e9f5b1d9a982182681156c90c6de026ce17","patch":"@@ -26,35 +26,15 @@\n   <name>Apache DistributedLog :: Protocol</name>\n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.bookkeeper.stats</groupId>\n-      <artifactId>bookkeeper-stats-api</artifactId>\n-      <version>${bookkeeper.version}</version>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>org.slf4j</groupId>\n-          <artifactId>slf4j-log4j12</artifactId>\n-        </exclusion>\n-      </exclusions>\n+      <groupId>org.apache.distributedlog</groupId>\n+      <artifactId>distributedlog-common</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>commons-lang</groupId>\n-      <artifactId>commons-lang</artifactId>\n-      <version>${commons-lang.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>commons-codec</groupId>\n-      <artifactId>commons-codec</artifactId>\n-      <version>${commons-codec.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter</groupId>\n-      <artifactId>finagle-core_2.11</artifactId>\n-      <version>${finagle.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-api</artifactId>\n-      <version>${slf4j.version}</version>\n+      <groupId>org.projectlombok</groupId>\n+      <artifactId>lombok</artifactId>\n+      <version>${lombok.version}</version>\n+      <scope>provided</scope>\n     </dependency>\n     <dependency>\n       <groupId>net.jpountz.lz4</groupId>\n@@ -67,6 +47,18 @@\n       <version>${junit.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>${mockito.version}</version>\n+      <scope>test</scope>\n+    </dependency> \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>"},{"sha":"2a60ff390731b60220a7c56375afb737d27921bf","filename":"src/main/java/org/apache/distributedlog/EnvelopedRecordSetWriter.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedRecordSetWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FEnvelopedRecordSetWriter.java?ref=1bf73e9f5b1d9a982182681156c90c6de026ce17","patch":"@@ -26,19 +26,19 @@\n import static org.apache.distributedlog.LogRecordSet.NULL_OP_STATS_LOGGER;\n import static org.apache.distributedlog.LogRecordSet.VERSION;\n \n-import org.apache.distributedlog.exceptions.LogRecordTooLongException;\n-import org.apache.distributedlog.exceptions.WriteException;\n-import org.apache.distributedlog.io.Buffer;\n-import org.apache.distributedlog.io.CompressionCodec;\n-import org.apache.distributedlog.io.CompressionUtils;\n-import com.twitter.util.Promise;\n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.Channels;\n import java.nio.channels.WritableByteChannel;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.distributedlog.exceptions.LogRecordTooLongException;\n+import org.apache.distributedlog.exceptions.WriteException;\n+import org.apache.distributedlog.io.Buffer;\n+import org.apache.distributedlog.io.CompressionCodec;\n+import org.apache.distributedlog.io.CompressionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -52,7 +52,7 @@ class EnvelopedRecordSetWriter implements LogRecordSet.Writer {\n     private final Buffer buffer;\n     private final DataOutputStream writer;\n     private final WritableByteChannel writeChannel;\n-    private final List<Promise<DLSN>> promiseList;\n+    private final List<CompletableFuture<DLSN>> promiseList;\n     private final CompressionCodec.Type codec;\n     private final int codecCode;\n     private int count = 0;\n@@ -61,7 +61,7 @@ class EnvelopedRecordSetWriter implements LogRecordSet.Writer {\n     EnvelopedRecordSetWriter(int initialBufferSize,\n                              CompressionCodec.Type codec) {\n         this.buffer = new Buffer(Math.max(initialBufferSize, HEADER_LEN));\n-        this.promiseList = new LinkedList<Promise<DLSN>>();\n+        this.promiseList = new LinkedList<CompletableFuture<DLSN>>();\n         this.codec = codec;\n         switch (codec) {\n             case LZ4:\n@@ -84,13 +84,13 @@ class EnvelopedRecordSetWriter implements LogRecordSet.Writer {\n         this.writeChannel = Channels.newChannel(writer);\n     }\n \n-    synchronized List<Promise<DLSN>> getPromiseList() {\n+    synchronized List<CompletableFuture<DLSN>> getPromiseList() {\n         return promiseList;\n     }\n \n     @Override\n     public synchronized void writeRecord(ByteBuffer record,\n-                                         Promise<DLSN> transmitPromise)\n+                                         CompletableFuture<DLSN> transmitPromise)\n             throws LogRecordTooLongException, WriteException {\n         int logRecordSize = record.remaining();\n         if (logRecordSize > MAX_LOGRECORD_SIZE) {\n@@ -111,16 +111,16 @@ public synchronized void writeRecord(ByteBuffer record,\n \n     private synchronized void satisfyPromises(long lssn, long entryId, long startSlotId) {\n         long nextSlotId = startSlotId;\n-        for (Promise<DLSN> promise : promiseList) {\n-            promise.setValue(new DLSN(lssn, entryId, nextSlotId));\n+        for (CompletableFuture<DLSN> promise : promiseList) {\n+            promise.complete(new DLSN(lssn, entryId, nextSlotId));\n             nextSlotId++;\n         }\n         promiseList.clear();\n     }\n \n     private synchronized void cancelPromises(Throwable reason) {\n-        for (Promise<DLSN> promise : promiseList) {\n-            promise.setException(reason);\n+        for (CompletableFuture<DLSN> promise : promiseList) {\n+            promise.completeExceptionally(reason);\n         }\n         promiseList.clear();\n     }"},{"sha":"55b20ff528df33fbbba7bd6febf82cd059470b43","filename":"src/main/java/org/apache/distributedlog/LogRecordSet.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FLogRecordSet.java?ref=1bf73e9f5b1d9a982182681156c90c6de026ce17","patch":"@@ -19,15 +19,15 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n \n-import org.apache.distributedlog.exceptions.LogRecordTooLongException;\n-import org.apache.distributedlog.exceptions.WriteException;\n-import org.apache.distributedlog.io.CompressionCodec;\n-import com.twitter.util.Promise;\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.concurrent.CompletableFuture;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.distributedlog.exceptions.LogRecordTooLongException;\n+import org.apache.distributedlog.exceptions.WriteException;\n+import org.apache.distributedlog.io.CompressionCodec;\n \n /**\n  * A set of {@link LogRecord}s.\n@@ -134,7 +134,7 @@ public interface Writer extends LogRecordSetBuffer {\n          * @throws LogRecordTooLongException if the record is too long\n          * @throws WriteException when encountered exception writing the record\n          */\n-        void writeRecord(ByteBuffer record, Promise<DLSN> transmitPromise)\n+        void writeRecord(ByteBuffer record, CompletableFuture<DLSN> transmitPromise)\n                 throws LogRecordTooLongException, WriteException;\n     }\n "},{"sha":"f8cdea445bff49b65183309591bc53fd254c2677","filename":"src/main/java/org/apache/distributedlog/annotations/DistributedLogAnnotations.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2FDistributedLogAnnotations.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,35 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.distributedlog.annotations;\n-\n-/**\n- * Common annotation types.\n- */\n-public class DistributedLogAnnotations {\n-    /**\n-     * Annotation to identify flaky tests in DistributedLog.\n-     * As and when we find that a test is flaky, we'll add this annotation to it for reference.\n-     */\n-    public @interface FlakyTest {}\n-\n-    /**\n-     * Annotation to specify the occurrence of a compression operation. These are CPU intensive\n-     * and should be avoided in low-latency paths.\n-     */\n-    public @interface Compression {}\n-}"},{"sha":"0922f141658b3aa436923e89d480372bc49b81ed","filename":"src/main/java/org/apache/distributedlog/annotations/package-info.java","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Fannotations%2Fpackage-info.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,21 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-/**\n- * Defines annotations used across distributedlog project.\n- */\n-package org.apache.distributedlog.annotations;"},{"sha":"b5280c9feaa3a1f6b627f7f594740003cc5c094f","filename":"src/main/java/org/apache/distributedlog/util/BitMaskUtils.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FBitMaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FBitMaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2FBitMaskUtils.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,57 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.distributedlog.util;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-\n-/**\n- * Utils for bit mask operations.\n- */\n-public class BitMaskUtils {\n-\n-    /**\n-     * 1) Unset all bits where value in mask is set.\n-     * 2) Set these bits to value specified by newValue.\n-     *\n-     * <p>e.g.\n-     * if oldValue = 1010, mask = 0011, newValue = 0001\n-     * 1) 1010 -> 1000\n-     * 2) 1000 -> 1001\n-     *\n-     * @param oldValue expected old value\n-     * @param mask the mask of the value for updates\n-     * @param newValue new value to set\n-     * @return updated value\n-     */\n-    public static long set(long oldValue, long mask, long newValue) {\n-        checkArgument(oldValue >= 0L && mask >= 0L && newValue >= 0L);\n-        return ((oldValue & (~mask)) | (newValue & mask));\n-    }\n-\n-    /**\n-     * Get the bits where mask is 1.\n-     *\n-     * @param value value\n-     * @param mask mask of the value\n-     * @return the bit of the mask\n-     */\n-    public static long get(long value, long mask) {\n-        checkArgument(value >= 0L && mask >= 0L);\n-        return (value & mask);\n-    }\n-}"},{"sha":"ee17950eda1ddf97ba4c06a135fcfbd27999d07f","filename":"src/main/java/org/apache/distributedlog/util/package-info.java","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Forg%2Fapache%2Fdistributedlog%2Futil%2Fpackage-info.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,21 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-/**\n- * defines the utilities used across the project.\n- */\n-package org.apache.distributedlog.util;"},{"sha":"1c5db24a8b6fb54ab40b80bd536c3b3ccf64ac4a","filename":"src/test/java/org/apache/distributedlog/TestLogRecordSet.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestLogRecordSet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestLogRecordSet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestLogRecordSet.java?ref=1bf73e9f5b1d9a982182681156c90c6de026ce17","patch":"@@ -25,15 +25,14 @@\n import static org.junit.Assert.fail;\n \n import com.google.common.collect.Lists;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import org.apache.distributedlog.LogRecordSet.Reader;\n import org.apache.distributedlog.LogRecordSet.Writer;\n import org.apache.distributedlog.exceptions.LogRecordTooLongException;\n import org.apache.distributedlog.io.CompressionCodec.Type;\n-import com.twitter.util.Await;\n-import com.twitter.util.Future;\n-import com.twitter.util.Promise;\n-import java.nio.ByteBuffer;\n-import java.util.List;\n+import org.apache.distributedlog.common.concurrent.FutureUtils;\n import org.junit.Test;\n \n /**\n@@ -72,7 +71,7 @@ public void testWriteTooLongRecord() throws Exception {\n \n         ByteBuffer dataBuf = ByteBuffer.allocate(MAX_LOGRECORD_SIZE + 1);\n         try {\n-            writer.writeRecord(dataBuf, new Promise<DLSN>());\n+            writer.writeRecord(dataBuf, new CompletableFuture<DLSN>());\n             fail(\"Should fail on writing large record\");\n         } catch (LogRecordTooLongException lrtle) {\n             // expected\n@@ -111,18 +110,18 @@ void testWriteRecords(Type codec) throws Exception {\n         assertEquals(\"zero user bytes\", HEADER_LEN, writer.getNumBytes());\n         assertEquals(\"zero records\", 0, writer.getNumRecords());\n \n-        List<Future<DLSN>> writePromiseList = Lists.newArrayList();\n+        List<CompletableFuture<DLSN>> writePromiseList = Lists.newArrayList();\n         /// write first 5 records\n         for (int i = 0; i < 5; i++) {\n             ByteBuffer record = ByteBuffer.wrap((\"record-\" + i).getBytes(UTF_8));\n-            Promise<DLSN> writePromise = new Promise<DLSN>();\n+            CompletableFuture<DLSN> writePromise = new CompletableFuture<>();\n             writer.writeRecord(record, writePromise);\n             writePromiseList.add(writePromise);\n             assertEquals((i + 1) + \" records\", (i + 1), writer.getNumRecords());\n         }\n         ByteBuffer dataBuf = ByteBuffer.allocate(MAX_LOGRECORD_SIZE + 1);\n         try {\n-            writer.writeRecord(dataBuf, new Promise<DLSN>());\n+            writer.writeRecord(dataBuf, new CompletableFuture<>());\n             fail(\"Should fail on writing large record\");\n         } catch (LogRecordTooLongException lrtle) {\n             // expected\n@@ -132,7 +131,7 @@ void testWriteRecords(Type codec) throws Exception {\n         /// write another 5 records\n         for (int i = 0; i < 5; i++) {\n             ByteBuffer record = ByteBuffer.wrap((\"record-\" + (i + 5)).getBytes(UTF_8));\n-            Promise<DLSN> writePromise = new Promise<DLSN>();\n+            CompletableFuture<DLSN> writePromise = new CompletableFuture<>();\n             writer.writeRecord(record, writePromise);\n             writePromiseList.add(writePromise);\n             assertEquals((i + 6) + \" records\", (i + 6), writer.getNumRecords());\n@@ -143,7 +142,7 @@ void testWriteRecords(Type codec) throws Exception {\n \n         // Test transmit complete\n         writer.completeTransmit(1L, 1L, 10L);\n-        List<DLSN> writeResults = Await.result(Future.collect(writePromiseList));\n+        List<DLSN> writeResults = FutureUtils.result(FutureUtils.collect(writePromiseList));\n         for (int i = 0; i < 10; i++) {\n             assertEquals(new DLSN(1L, 1L, 10L + i), writeResults.get(i));\n         }"},{"sha":"20cf53cc6d79b0242d091bce9eff69e422b7e7ab","filename":"src/test/java/org/apache/distributedlog/TestTimedOutTestsListener.java","status":"removed","additions":0,"deletions":183,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestTimedOutTestsListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestTimedOutTestsListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTestTimedOutTestsListener.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,183 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.distributedlog;\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.util.concurrent.CyclicBarrier;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.notification.Failure;\n-\n-/**\n- * Test Case for {@link TimedOutTestsListener}.\n- */\n-public class TestTimedOutTestsListener {\n-\n-    private static class Deadlock {\n-        private CyclicBarrier barrier = new CyclicBarrier(6);\n-\n-        public Deadlock() {\n-            DeadlockThread[] dThreads = new DeadlockThread[6];\n-\n-            Monitor a = new Monitor(\"a\");\n-            Monitor b = new Monitor(\"b\");\n-            Monitor c = new Monitor(\"c\");\n-            dThreads[0] = new DeadlockThread(\"MThread-1\", a, b);\n-            dThreads[1] = new DeadlockThread(\"MThread-2\", b, c);\n-            dThreads[2] = new DeadlockThread(\"MThread-3\", c, a);\n-\n-            Lock d = new ReentrantLock();\n-            Lock e = new ReentrantLock();\n-            Lock f = new ReentrantLock();\n-\n-            dThreads[3] = new DeadlockThread(\"SThread-4\", d, e);\n-            dThreads[4] = new DeadlockThread(\"SThread-5\", e, f);\n-            dThreads[5] = new DeadlockThread(\"SThread-6\", f, d);\n-\n-            // make them daemon threads so that the test will exit\n-            for (int i = 0; i < 6; i++) {\n-                dThreads[i].setDaemon(true);\n-                dThreads[i].start();\n-            }\n-        }\n-\n-        class DeadlockThread extends Thread {\n-            private Lock lock1 = null;\n-\n-            private Lock lock2 = null;\n-\n-            private Monitor mon1 = null;\n-\n-            private Monitor mon2 = null;\n-\n-            private boolean useSync;\n-\n-            DeadlockThread(String name, Lock lock1, Lock lock2) {\n-                super(name);\n-                this.lock1 = lock1;\n-                this.lock2 = lock2;\n-                this.useSync = true;\n-            }\n-\n-            DeadlockThread(String name, Monitor mon1, Monitor mon2) {\n-                super(name);\n-                this.mon1 = mon1;\n-                this.mon2 = mon2;\n-                this.useSync = false;\n-            }\n-\n-            public void run() {\n-                if (useSync) {\n-                    syncLock();\n-                } else {\n-                    monitorLock();\n-                }\n-            }\n-\n-            private void syncLock() {\n-                lock1.lock();\n-                try {\n-                    try {\n-                        barrier.await();\n-                    } catch (Exception e) {\n-                    }\n-                    goSyncDeadlock();\n-                } finally {\n-                    lock1.unlock();\n-                }\n-            }\n-\n-            private void goSyncDeadlock() {\n-                try {\n-                    barrier.await();\n-                } catch (Exception e) {\n-                }\n-                lock2.lock();\n-                throw new RuntimeException(\"should not reach here.\");\n-            }\n-\n-            private void monitorLock() {\n-                synchronized (mon1) {\n-                    try {\n-                        barrier.await();\n-                    } catch (Exception e) {\n-                    }\n-                    goMonitorDeadlock();\n-                }\n-            }\n-\n-            private void goMonitorDeadlock() {\n-                try {\n-                    barrier.await();\n-                } catch (Exception e) {\n-                }\n-                synchronized (mon2) {\n-                    throw new RuntimeException(getName() + \" should not reach here.\");\n-                }\n-            }\n-        }\n-\n-        class Monitor {\n-            String name;\n-\n-            Monitor(String name) {\n-                this.name = name;\n-            }\n-        }\n-\n-    }\n-\n-    @Test(timeout = 500)\n-    public void testThreadDumpAndDeadlocks() throws Exception {\n-        new Deadlock();\n-        String s = null;\n-        while (true) {\n-            s = TimedOutTestsListener.buildDeadlockInfo();\n-            if (s != null) {\n-                break;\n-            }\n-            Thread.sleep(100);\n-        }\n-\n-        Assert.assertEquals(3, countStringOccurrences(s, \"BLOCKED\"));\n-\n-        Failure failure = new Failure(null, new Exception(TimedOutTestsListener.TEST_TIMED_OUT_PREFIX));\n-        StringWriter writer = new StringWriter();\n-        new TimedOutTestsListener(new PrintWriter(writer)).testFailure(failure);\n-        String out = writer.toString();\n-\n-        Assert.assertTrue(out.contains(\"THREAD DUMP\"));\n-        Assert.assertTrue(out.contains(\"DEADLOCKS DETECTED\"));\n-\n-        System.out.println(out);\n-    }\n-\n-    private int countStringOccurrences(String s, String substr) {\n-        int n = 0;\n-        int index = 0;\n-        while ((index = s.indexOf(substr, index) + 1) != 0) {\n-            n++;\n-        }\n-        return n;\n-    }\n-\n-}"},{"sha":"db0ee4e76d65e915fc8dfbca889b6729f813f711","filename":"src/test/java/org/apache/distributedlog/TimedOutTestsListener.java","status":"removed","additions":0,"deletions":168,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTimedOutTestsListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90ad5d89717bb3ca161387af4fce4f913c9e0ae/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTimedOutTestsListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fjava%2Forg%2Fapache%2Fdistributedlog%2FTimedOutTestsListener.java?ref=b90ad5d89717bb3ca161387af4fce4f913c9e0ae","patch":"@@ -1,168 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.distributedlog;\n-\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.lang.management.LockInfo;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.MonitorInfo;\n-import java.lang.management.ThreadInfo;\n-import java.lang.management.ThreadMXBean;\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.Map;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.junit.runner.notification.Failure;\n-import org.junit.runner.notification.RunListener;\n-\n-/**\n- * JUnit run listener which prints full thread dump into System.err in case a test is failed due to\n- * timeout.\n- */\n-public class TimedOutTestsListener extends RunListener {\n-\n-    static final String TEST_TIMED_OUT_PREFIX = \"test timed out after\";\n-\n-    private static String indent = \"    \";\n-\n-    private final PrintWriter output;\n-\n-    public TimedOutTestsListener() {\n-        this.output = new PrintWriter(System.err);\n-    }\n-\n-    public TimedOutTestsListener(PrintWriter output) {\n-        this.output = output;\n-    }\n-\n-    @Override\n-    public void testFailure(Failure failure) throws Exception {\n-        if (failure != null && failure.getMessage() != null && failure.getMessage().startsWith(TEST_TIMED_OUT_PREFIX)) {\n-            output.println(\"====> TEST TIMED OUT. PRINTING THREAD DUMP. <====\");\n-            output.println();\n-            output.print(buildThreadDiagnosticString());\n-        }\n-    }\n-\n-    public static String buildThreadDiagnosticString() {\n-        StringWriter sw = new StringWriter();\n-        PrintWriter output = new PrintWriter(sw);\n-\n-        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss,SSS\");\n-        output.println(String.format(\"Timestamp: %s\", dateFormat.format(new Date())));\n-        output.println();\n-        output.println(buildThreadDump());\n-\n-        String deadlocksInfo = buildDeadlockInfo();\n-        if (deadlocksInfo != null) {\n-            output.println(\"====> DEADLOCKS DETECTED <====\");\n-            output.println();\n-            output.println(deadlocksInfo);\n-        }\n-\n-        return sw.toString();\n-    }\n-\n-    static String buildThreadDump() {\n-        StringBuilder dump = new StringBuilder();\n-        Map<Thread, StackTraceElement[]> stackTraces = Thread.getAllStackTraces();\n-        for (Map.Entry<Thread, StackTraceElement[]> e : stackTraces.entrySet()) {\n-            Thread thread = e.getKey();\n-            dump.append(String.format(\"\\\"%s\\\" %s prio=%d tid=%d %s\\njava.lang.Thread.State: %s\", thread.getName(),\n-                (thread.isDaemon() ? \"daemon\" : \"\"), thread.getPriority(), thread.getId(),\n-                Thread.State.WAITING.equals(thread.getState()) ? \"in Object.wait()\"\n-                        : StringUtils.lowerCase(thread.getState().name()),\n-                Thread.State.WAITING.equals(thread.getState()) ? \"WAITING (on object monitor)\" : thread.getState()));\n-            for (StackTraceElement stackTraceElement : e.getValue()) {\n-                dump.append(\"\\n        at \");\n-                dump.append(stackTraceElement);\n-            }\n-            dump.append(\"\\n\");\n-        }\n-        return dump.toString();\n-    }\n-\n-    static String buildDeadlockInfo() {\n-        ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n-        long[] threadIds = threadBean.findMonitorDeadlockedThreads();\n-        if (threadIds != null && threadIds.length > 0) {\n-            StringWriter stringWriter = new StringWriter();\n-            PrintWriter out = new PrintWriter(stringWriter);\n-\n-            ThreadInfo[] infos = threadBean.getThreadInfo(threadIds, true, true);\n-            for (ThreadInfo ti : infos) {\n-                printThreadInfo(ti, out);\n-                printLockInfo(ti.getLockedSynchronizers(), out);\n-                out.println();\n-            }\n-\n-            out.close();\n-            return stringWriter.toString();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    private static void printThreadInfo(ThreadInfo ti, PrintWriter out) {\n-        // print thread information\n-        printThread(ti, out);\n-\n-        // print stack trace with locks\n-        StackTraceElement[] stacktrace = ti.getStackTrace();\n-        MonitorInfo[] monitors = ti.getLockedMonitors();\n-        for (int i = 0; i < stacktrace.length; i++) {\n-            StackTraceElement ste = stacktrace[i];\n-            out.println(indent + \"at \" + ste.toString());\n-            for (MonitorInfo mi : monitors) {\n-                if (mi.getLockedStackDepth() == i) {\n-                    out.println(indent + \"  - locked \" + mi);\n-                }\n-            }\n-        }\n-        out.println();\n-    }\n-\n-    private static void printThread(ThreadInfo ti, PrintWriter out) {\n-        out.print(\"\\\"\" + ti.getThreadName() + \"\\\"\" + \" Id=\" + ti.getThreadId() + \" in \" + ti.getThreadState());\n-        if (ti.getLockName() != null) {\n-            out.print(\" on lock=\" + ti.getLockName());\n-        }\n-        if (ti.isSuspended()) {\n-            out.print(\" (suspended)\");\n-        }\n-        if (ti.isInNative()) {\n-            out.print(\" (running in native)\");\n-        }\n-        out.println();\n-        if (ti.getLockOwnerName() != null) {\n-            out.println(indent + \" owned by \" + ti.getLockOwnerName() + \" Id=\" + ti.getLockOwnerId());\n-        }\n-    }\n-\n-    private static void printLockInfo(LockInfo[] locks, PrintWriter out) {\n-        out.println(indent + \"Locked synchronizers: count = \" + locks.length);\n-        for (LockInfo li : locks) {\n-            out.println(indent + \"  - \" + li);\n-        }\n-        out.println();\n-    }\n-\n-}"},{"sha":"3e51059366d942e58362389ec09b2f5d71050e45","filename":"src/test/resources/log4j.properties","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Ftest%2Fresources%2Flog4j.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/1bf73e9f5b1d9a982182681156c90c6de026ce17/src%2Ftest%2Fresources%2Flog4j.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Ftest%2Fresources%2Flog4j.properties?ref=1bf73e9f5b1d9a982182681156c90c6de026ce17","patch":"@@ -0,0 +1,51 @@\n+#/**\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+#\n+# DisributedLog Logging Configuration\n+#\n+\n+# Example with rolling log file\n+log4j.rootLogger=INFO, CONSOLE\n+\n+#disable zookeeper logging\n+log4j.logger.org.apache.zookeeper=OFF\n+#Set the bookkeeper level to warning\n+log4j.logger.org.apache.bookkeeper=INFO\n+\n+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n+log4j.appender.CONSOLE.Threshold=INFO\n+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n+\n+# Add ROLLINGFILE to rootLogger to get log file output\n+#    Log DEBUG level and above messages to a log file\n+#log4j.appender.ROLLINGFILE=org.apache.log4j.DailyRollingFileAppender\n+#log4j.appender.ROLLINGFILE.Threshold=INFO\n+#log4j.appender.ROLLINGFILE.File=distributedlog.log\n+#log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n+#log4j.appender.ROLLINGFILE.DatePattern='.'yyyy-MM-dd-HH-mm\n+#log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n+\n+log4j.appender.R=org.apache.log4j.RollingFileAppender\n+log4j.appender.R.Threshold=TRACE\n+log4j.appender.R.File=target/error.log\n+log4j.appender.R.MaxFileSize=200MB\n+log4j.appender.R.MaxBackupIndex=7\n+log4j.appender.R.layout=org.apache.log4j.PatternLayout\n+log4j.appender.R.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n"}]}