{"sha":"61a5446b8923e5ce0b2a46891a385fd480275bac","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjYxYTU0NDZiODkyM2U1Y2UwYjJhNDY4OTFhMzg1ZmQ0ODAyNzViYWM=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-09T20:24:53Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-09T20:24:53Z"},"message":"BOOKKEEPER-1050: Cache journalFormatVersionToWrite when starting Journal\n\nReading the journal version format from `ServiceConfiguration` each time is inefficient.\n`ServiceConfiguration` is based on Java properties which is based on a String to object hashtable. Each read implies acquiring a mutex and converting from object to int.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Enrico Olivelli <None>\n\nCloses #140 from merlimat/cache-journal-conf","tree":{"sha":"5112013b385282d7e89807a7f05aace760956dde","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/5112013b385282d7e89807a7f05aace760956dde"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/61a5446b8923e5ce0b2a46891a385fd480275bac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/61a5446b8923e5ce0b2a46891a385fd480275bac","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/61a5446b8923e5ce0b2a46891a385fd480275bac","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/61a5446b8923e5ce0b2a46891a385fd480275bac/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"d5af77c05256d5942c19aff2654c5d8f5ac1eb79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/d5af77c05256d5942c19aff2654c5d8f5ac1eb79","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/d5af77c05256d5942c19aff2654c5d8f5ac1eb79"}],"stats":{"total":10,"additions":6,"deletions":4},"files":[{"sha":"7a4687ce43e0e4d9e22ae05b765dd0c5eda99cee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/61a5446b8923e5ce0b2a46891a385fd480275bac/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/61a5446b8923e5ce0b2a46891a385fd480275bac/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=61a5446b8923e5ce0b2a46891a385fd480275bac","patch":"@@ -792,6 +792,8 @@ public void run() {\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n         ByteBuffer paddingBuff = ByteBuffer.allocate(2 * conf.getJournalAlignmentSize());\n         ZeroBuffer.put(paddingBuff);\n+        final int journalFormatVersionToWrite = conf.getJournalFormatVersionToWrite();\n+        final int journalAlignmentSize = conf.getJournalAlignmentSize();\n         JournalChannel logFile = null;\n         forceWriteThread.start();\n         Stopwatch journalCreationWatcher = new Stopwatch();\n@@ -820,9 +822,9 @@ public void run() {\n                                         logId,\n                                         journalPreAllocSize,\n                                         journalWriteBufferSize,\n-                                        conf.getJournalAlignmentSize(),\n+                                        journalAlignmentSize,\n                                         removePagesFromCache,\n-                                        conf.getJournalFormatVersionToWrite());\n+                                        journalFormatVersionToWrite);\n                     journalCreationStats.registerSuccessfulEvent(\n                             journalCreationWatcher.stop().elapsedTime(TimeUnit.NANOSECONDS), TimeUnit.NANOSECONDS);\n \n@@ -885,8 +887,8 @@ public void run() {\n \n                         // toFlush is non null and not empty so should be safe to access getFirst\n                         if (shouldFlush) {\n-                            if (conf.getJournalFormatVersionToWrite() >= JournalChannel.V5) {\n-                                writePaddingBytes(logFile, paddingBuff, conf.getJournalAlignmentSize());\n+                            if (journalFormatVersionToWrite >= JournalChannel.V5) {\n+                                writePaddingBytes(logFile, paddingBuff, journalAlignmentSize);\n                             }\n                             journalFlushWatcher.reset().start();\n                             bc.flush(false);"}]}