{"sha":"e44c7388399e5589cf44e38c58bb84c74da544af","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmU0NGM3Mzg4Mzk5ZTU1ODljZjQ0ZTM4YzU4YmI4NGM3NGRhNTQ0YWY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@yahoo-inc.com","date":"2017-05-16T11:20:56Z"},"committer":{"name":"eolivelli","email":"eolivelli@apache.org","date":"2017-05-16T11:20:56Z"},"message":"BOOKKEEPER-1069: If client uses V2 proto, set the connection to always decode V2 messages\n\nAvoid handling parsing exception for each request and instead adapt to what the client is sending.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Enrico Olivelli <None>, Sijie Guo <None>\n\nCloses #157 from merlimat/always-v2","tree":{"sha":"75ec3609c8c4adad877b3cbe19c0d3130fa67936","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/75ec3609c8c4adad877b3cbe19c0d3130fa67936"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/e44c7388399e5589cf44e38c58bb84c74da544af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e44c7388399e5589cf44e38c58bb84c74da544af","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/e44c7388399e5589cf44e38c58bb84c74da544af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/e44c7388399e5589cf44e38c58bb84c74da544af/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0f81461d2d1dc5cf9db4de9a46599d7d64e3dac6"}],"stats":{"total":27,"additions":17,"deletions":10},"files":[{"sha":"0fed3e526bbccc731dc06fa92ac9ffc8c375dfa7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtoEncoding.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/e44c7388399e5589cf44e38c58bb84c74da544af/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/e44c7388399e5589cf44e38c58bb84c74da544af/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieProtoEncoding.java?ref=e44c7388399e5589cf44e38c58bb84c74da544af","patch":"@@ -342,10 +342,12 @@ protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out) t\n     public static class RequestDecoder extends MessageToMessageDecoder<Object> {\n         final EnDecoder REQ_PREV3;\n         final EnDecoder REQ_V3;\n+        boolean usingV3Protocol;\n \n         RequestDecoder(ExtensionRegistry extensionRegistry) {\n             REQ_PREV3 = new RequestEnDeCoderPreV3(extensionRegistry);\n             REQ_V3 = new RequestEnDecoderV3(extensionRegistry);\n+            usingV3Protocol = true;\n         }\n \n         @Override\n@@ -358,17 +360,18 @@ protected void decode(ChannelHandlerContext ctx, Object msg, List<Object> out) t\n                 return;\n             }\n             ByteBuf buffer = (ByteBuf) msg;\n-            try {\n-                buffer.markReaderIndex();\n+            buffer.markReaderIndex();\n+\n+            if (usingV3Protocol) {\n                 try {\n                     out.add(REQ_V3.decode(buffer));\n                 } catch (InvalidProtocolBufferException e) {\n+                    usingV3Protocol = false;\n                     buffer.resetReaderIndex();\n                     out.add(REQ_PREV3.decode(buffer));\n                 }\n-            } catch (Exception e) {\n-                LOG.error(\"Failed to decode a request from {} : \", ctx.channel(), e);\n-                ctx.close();\n+            } else {\n+                out.add(REQ_PREV3.decode(buffer));\n             }\n         }\n     }\n@@ -404,10 +407,12 @@ protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out)\n     public static class ResponseDecoder extends MessageToMessageDecoder<Object> {\n         final EnDecoder REP_PREV3;\n         final EnDecoder REP_V3;\n+        boolean usingV3Protocol;\n \n         ResponseDecoder(ExtensionRegistry extensionRegistry) {\n             REP_PREV3 = new ResponseEnDeCoderPreV3(extensionRegistry);\n             REP_V3 = new ResponseEnDecoderV3(extensionRegistry);\n+            usingV3Protocol = true;\n         }\n \n         @Override\n@@ -419,17 +424,19 @@ protected void decode(ChannelHandlerContext ctx, Object msg, List<Object> out) t\n                 out.add(msg);\n             }\n             ByteBuf buffer = (ByteBuf) msg;\n-            try {\n-                buffer.markReaderIndex();\n+            buffer.markReaderIndex();\n+\n+            if (usingV3Protocol) {\n                 try {\n                     out.add(REP_V3.decode(buffer));\n                 } catch (InvalidProtocolBufferException e) {\n+                    usingV3Protocol = false;\n                     buffer.resetReaderIndex();\n                     out.add(REP_PREV3.decode(buffer));\n                 }\n-            } catch (Exception e) {\n-                LOG.error(\"Failed to decode a response from channel {} : \", ctx.channel(), e);\n-                ctx.close();\n+            } else {\n+                // If in the same connection we already got preV3 messages, don't try again to decode V3 messages\n+                out.add(REP_PREV3.decode(buffer));\n             }\n         }\n     }"}]}