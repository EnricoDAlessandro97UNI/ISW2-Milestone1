{"sha":"5f945f8a02f5171608810eb002443193c3eb058c","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjVmOTQ1ZjhhMDJmNTE3MTYwODgxMGViMDAyNDQzMTkzYzNlYjA1OGM=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@yahoo-inc.com","date":"2017-06-01T21:58:21Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@localhost.localdomain","date":"2017-06-01T21:58:21Z"},"message":"BOOKKEEPER-1090: Use LOG.isDebugEnabled() to avoid unexpected allocations\n\nUsing `LOG.debug(...)` can lead to multiple unexpected memory allocation, even when the logger it's turned off.\nFor example, int and long parameter are boxed into Integer and Long objects and the var-arg parameters are using an `Object[]` to hold\nthem.\nWe should guard all usages of `LOG.debug()` with the `if (LOG.isDebugEnabled()` guard.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Enrico Olivelli, Sijie Guo\n\nCloses #179 from merlimat/if-debug","tree":{"sha":"56e7d86b61b42f188d1115ea6a697fb587f24bad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/56e7d86b61b42f188d1115ea6a697fb587f24bad"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/5f945f8a02f5171608810eb002443193c3eb058c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5f945f8a02f5171608810eb002443193c3eb058c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5f945f8a02f5171608810eb002443193c3eb058c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5f945f8a02f5171608810eb002443193c3eb058c/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":null,"parents":[{"sha":"55d1dc45c4761f150c59a34b94d21e39e69f872c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/55d1dc45c4761f150c59a34b94d21e39e69f872c","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/55d1dc45c4761f150c59a34b94d21e39e69f872c"}],"stats":{"total":746,"additions":522,"deletions":224},"files":[{"sha":"5a3856fa72afe69d7b597547f3002ac8246936e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -734,7 +734,9 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                 long ledgerId = recBuff.getLong();\n                 long entryId = recBuff.getLong();\n                 try {\n-                    LOG.debug(\"Replay journal - ledger id : {}, entry id : {}.\", ledgerId, entryId);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Replay journal - ledger id : {}, entry id : {}.\", ledgerId, entryId);\n+                    }\n                     if (entryId == METAENTRY_ID_LEDGER_KEY) {\n                         if (journalVersion >= JournalChannel.V3) {\n                             int masterKeyLen = recBuff.getInt();\n@@ -771,7 +773,9 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                         handle.addEntry(Unpooled.wrappedBuffer(recBuff));\n                     }\n                 } catch (NoLedgerException nsle) {\n-                    LOG.debug(\"Skip replaying entries of ledger {} since it was deleted.\", ledgerId);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Skip replaying entries of ledger {} since it was deleted.\", ledgerId);\n+                    }\n                 } catch (BookieException be) {\n                     throw new IOException(be);\n                 }\n@@ -788,8 +792,10 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n     @Override\n     synchronized public void start() {\n         setDaemon(true);\n-        LOG.debug(\"I'm starting a bookie with journal directories {}\",\n-                  journalDirectories.stream().map(File::getName).collect(Collectors.joining(\", \")));\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"I'm starting a bookie with journal directories {}\",\n+                    journalDirectories.stream().map(File::getName).collect(Collectors.joining(\", \")));\n+        }\n         //Start DiskChecker thread\n         ledgerDirsManager.start();\n         if (indexDirsManager != ledgerDirsManager) {\n@@ -1453,7 +1459,9 @@ public Future<Boolean> fenceLedger(long ledgerId, byte[] masterKey) throws IOExc\n             bb.flip();\n \n             FutureWriteCallback fwc = new FutureWriteCallback();\n-            LOG.debug(\"record fenced state for ledger {} in journal.\", ledgerId);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"record fenced state for ledger {} in journal.\", ledgerId);\n+            }\n             getJournal(ledgerId).logAddEntry(bb, fwc, null);\n             return fwc.getResult();\n         } else {\n@@ -1469,7 +1477,9 @@ public ByteBuf readEntry(long ledgerId, long entryId)\n         int entrySize = 0;\n         try {\n             LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n-            LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n+            }\n             ByteBuf entry = handle.readEntry(entryId);\n             readBytes.add(entry.readableBytes());\n             success = true;"},{"sha":"750aeaa17671807636bc0addcb4fa23739144e67","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":21,"deletions":17,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookieShell.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -1217,8 +1217,8 @@ Options getOptions() {\n             return opts;\n         }\n     }\n-    \n-    \n+\n+\n     /**\n      * Command to print help message\n      */\n@@ -1479,7 +1479,9 @@ private int updateBookieIdInCookie(final String bookieId, final boolean useHostn\n                         oldCookie.getValue().deleteFromZooKeeper(zk, conf, oldCookie.getVersion());\n                         return 0;\n                     } catch (KeeperException.NoNodeException nne) {\n-                        LOG.debug(\"Ignoring, cookie will be written to zookeeper\");\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Ignoring, cookie will be written to zookeeper\");\n+                        }\n                     }\n                 } else {\n                     // writes newcookie to local dirs\n@@ -1877,7 +1879,9 @@ public void setConf(Configuration conf) throws Exception {\n             indexDirectories = Bookie.getCurrentDirectories(bkConf.getIndexDirs());\n         }\n         formatter = EntryFormatter.newEntryFormatter(bkConf, ENTRY_FORMATTER_CLASS);\n-        LOG.debug(\"Using entry formatter {}\", formatter.getClass().getName());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Using entry formatter {}\", formatter.getClass().getName());\n+        }\n         pageSize = bkConf.getPageSize();\n         entriesPerPage = pageSize / 8;\n     }\n@@ -1918,8 +1922,8 @@ public int run(String[] args) throws Exception {\n     /**\n      * Returns the sorted list of the files in the given folders with the given file extensions.\n      * Sorting is done on the basis of CreationTime if the CreationTime is not available or if they are equal\n-     * then sorting is done by LastModifiedTime  \n-     * @param folderNames - array of folders which we need to look recursively for files with given extensions  \n+     * then sorting is done by LastModifiedTime\n+     * @param folderNames - array of folders which we need to look recursively for files with given extensions\n      * @param extensions - the file extensions, which we are interested in\n      * @return sorted list of files\n      */\n@@ -1947,19 +1951,19 @@ public int compare(File file1, File file2) {\n                 FileTime file1CreationTime = file1Attributes.creationTime();\n                 FileTime file2CreationTime = file2Attributes.creationTime();\n                 int compareValue = file1CreationTime.compareTo(file2CreationTime);\n-                /* \n+                /*\n                  * please check https://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/BasicFileAttributes.html#creationTime()\n                  * So not all file system implementation store creation time, in that case creationTime()\n-                 * method may return FileTime representing the epoch (1970-01-01T00:00:00Z). So in that case \n-                 * it would be better to compare lastModifiedTime \n+                 * method may return FileTime representing the epoch (1970-01-01T00:00:00Z). So in that case\n+                 * it would be better to compare lastModifiedTime\n                  */\n                 if (compareValue == 0) {\n                     FileTime file1LastModifiedTime = file1Attributes.lastModifiedTime();\n                     FileTime file2LastModifiedTime = file2Attributes.lastModifiedTime();\n                     compareValue = file1LastModifiedTime.compareTo(file2LastModifiedTime);\n                 }\n                 return compareValue;\n-            } catch (IOException e) {                \n+            } catch (IOException e) {\n                 return 0;\n             }\n         }\n@@ -2177,7 +2181,7 @@ public void process(long ledgerId, long startPos, ByteBuffer entry) {\n \n     /**\n      * Scan over an entry log file for a particular entry\n-     * \n+     *\n      * @param logId\n      *          Entry Log File id.\n      * @param ledgerId\n@@ -2218,7 +2222,7 @@ public void process(long ledgerId, long startPos, ByteBuffer entry) {\n \n     /**\n      * Scan over an entry log file for entries in the given position range\n-     * \n+     *\n      * @param logId\n      *          Entry Log File id.\n      * @param rangeStartPos\n@@ -2273,7 +2277,7 @@ public void process(long ledgerId, long entryStartPos, ByteBuffer entry) {\n                     + \"or greater than the current log filesize.\");\n         }\n     }\n-    \n+\n     /**\n      * Scan a journal file\n      *\n@@ -2311,10 +2315,10 @@ protected void printLastLogMark() throws IOException {\n \n     /**\n      * Format the entry into a readable format.\n-     * \n-     * @param entry \n+     *\n+     * @param entry\n      *          ledgerentry to print\n-     * @param printMsg \n+     * @param printMsg\n      *          Whether printing the message body\n      */\n     private void formatEntry(LedgerEntry entry, boolean printMsg) {\n@@ -2327,7 +2331,7 @@ private void formatEntry(LedgerEntry entry, boolean printMsg) {\n             formatter.formatEntry(entry.getEntry());\n         }\n     }\n-    \n+\n     /**\n      * Format the message into a readable format.\n      *"},{"sha":"ac1ba93a557f07d6172f187616d9a19091365b5c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FEntryLogger.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -749,7 +749,9 @@ synchronized void flushCurrentLog() throws IOException {\n         if (logChannel != null) {\n             logChannel.flush(true);\n             bytesWrittenSinceLastFlush = 0;\n-            LOG.debug(\"Flush and sync current entry logger {}.\", logChannel.getLogId());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Flush and sync current entry logger {}.\", logChannel.getLogId());\n+            }\n         }\n     }\n \n@@ -781,7 +783,7 @@ synchronized long addEntry(long ledger, ByteBuffer entry, boolean rollLog) throw\n         long pos = logChannel.position();\n         logChannel.write(entry);\n         logChannel.registerWrittenEntry(ledger, entrySize);\n-        \n+\n         incrementBytesWrittenAndMaybeFlush(4L + entrySize);\n \n         return (logChannel.getLogId() << 32L) | pos;\n@@ -1111,7 +1113,9 @@ public boolean accept(long ledgerId) {\n             }\n         });\n \n-        LOG.debug(\"Retrieved entry log meta data entryLogId: {}, meta: {}\", entryLogId, meta);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Retrieved entry log meta data entryLogId: {}, meta: {}\", entryLogId, meta);\n+        }\n         return meta;\n     }\n "},{"sha":"2f4282eac95ee7158a622c01015f69329d4847bf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FFileInfo.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -120,7 +120,9 @@ public long getSizeSinceLastwrite() {\n     public ByteBuf getExplicitLac() {\n         ByteBuf retLac = null;\n         synchronized(this) {\n-            LOG.debug(\"fileInfo:GetLac: {}\", explicitLac);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"fileInfo:GetLac: {}\", explicitLac);\n+            }\n             if (explicitLac != null) {\n                 retLac = Unpooled.buffer(explicitLac.capacity());\n                 explicitLac.rewind();//copy from the beginning\n@@ -145,7 +147,9 @@ public void setExplicitLac(ByteBuf lac) {\n             long explicitLacValue = explicitLac.getLong();\n             setLastAddConfirmed(explicitLacValue);\n             explicitLac.rewind();\n-            LOG.debug(\"fileInfo:SetLac: {}\", explicitLac);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"fileInfo:SetLac: {}\", explicitLac);\n+            }\n         }\n     }\n \n@@ -244,7 +248,9 @@ synchronized public boolean isFenced() throws IOException {\n      */\n     synchronized public boolean setFenced() throws IOException {\n         checkOpen(false);\n-        LOG.debug(\"Try to set fenced state in file info {} : state bits {}.\", lf, stateBits);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Try to set fenced state in file info {} : state bits {}.\", lf, stateBits);\n+        }\n         if ((stateBits & STATE_FENCED_BIT) != STATE_FENCED_BIT) {\n             // not fenced yet\n             stateBits |= STATE_FENCED_BIT;"},{"sha":"ed1cf45a5a1ef7bf6c0385b75b0c17c3b21f6aed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -169,7 +169,9 @@ public void process(final long ledgerId, long offset, ByteBuffer entry) throws I\n \n         void flush() throws IOException {\n             if (offsets.isEmpty()) {\n-                LOG.debug(\"Skipping entry log flushing, as there are no offset!\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Skipping entry log flushing, as there are no offset!\");\n+                }\n                 return;\n             }\n "},{"sha":"b9b774f20e352fa8c2b1f695599d8c7df412d727","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexInMemPageMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexInMemPageMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexInMemPageMgr.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -251,7 +251,9 @@ LedgerEntryPage grabCleanPage(long ledgerId, long firstEntry) {\n                     }\n \n                     if (null == lep) {\n-                        LOG.debug(\"Did not find eligible page in the first pass\");\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Did not find eligible page in the first pass\");\n+                        }\n                         return null;\n                     }\n                 }\n@@ -511,7 +513,9 @@ private void flushSpecificLedger(long ledger) throws IOException {\n         indexPersistenceManager.flushLedgerHeader(ledger);\n \n         if (null == firstEntryList || firstEntryList.size() == 0) {\n-            LOG.debug(\"Nothing to flush for ledger {}.\", ledger);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Nothing to flush for ledger {}.\", ledger);\n+            }\n             // nothing to do\n             return;\n         }"},{"sha":"a1d128fe8cb8b93bb42089d17f160c74e41261c7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FIndexPersistenceMgr.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -150,8 +150,10 @@ private FileInfo putFileInfo(Long ledger, byte masterKey[], File lf, boolean cre\n             fi = oldFi;\n         } else {\n             if (createdNewFile) {\n-                // Else, we won and the active ledger manager should know about this.\n-                LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n+                // Else, we won and the active ledger manager should know about this\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n+                }\n                 activeLedgers.put(ledger, true);\n             }\n             // Evict cached items from the file info cache if necessary"},{"sha":"3313f021092d413949f01ac3bf679d178eecabb6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -171,7 +171,9 @@ void rollLog(LastLogMark lastMark) throws NoWritableLedgerDirException {\n             // which is safe since records before lastMark have been\n             // persisted to disk (both index & entry logger)\n             lastMark.getCurMark().writeLogMark(bb);\n-            LOG.debug(\"RollLog to persist last marked log : {}\", lastMark.getCurMark());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"RollLog to persist last marked log : {}\", lastMark.getCurMark());\n+            }\n             List<File> writableLedgerDirs = ledgerDirsManager\n                     .getWritableLedgerDirs();\n             for (File dir : writableLedgerDirs) {\n@@ -566,7 +568,9 @@ public Journal(File journalDirectory, ServerConfiguration conf, LedgerDirsManage\n         this.removePagesFromCache = conf.getJournalRemovePagesFromCache();\n         // read last log mark\n         lastLogMark.readLog();\n-        LOG.debug(\"Last Log Mark : {}\", lastLogMark.getCurMark());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Last Log Mark : {}\", lastLogMark.getCurMark());\n+        }\n \n         // Expose Stats\n         journalAddEntryStats = statsLogger.getOpStatsLogger(JOURNAL_ADD_ENTRY);\n@@ -740,7 +744,10 @@ public boolean accept(long journalId) {\n                 throw new IOException(\"Recovery log \" + markedLog.getLogFileId() + \" is missing\");\n             }\n         }\n-        LOG.debug(\"Try to relay journal logs : {}\", logs);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Try to relay journal logs : {}\", logs);\n+        }\n         // TODO: When reading in the journal logs that need to be synced, we\n         // should use BufferedChannels instead to minimize the amount of\n         // system calls done."},{"sha":"8f1c56f43f6a9484ca4e22e8b61a51637424ca75","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FLedgerCacheImpl.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -117,7 +117,9 @@ public long getLastEntry(long ledgerId) throws IOException {\n      */\n     @Override\n     public void deleteLedger(long ledgerId) throws IOException {\n-        LOG.debug(\"Deleting ledgerId: {}\", ledgerId);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Deleting ledgerId: {}\", ledgerId);\n+        }\n \n         indexPageManager.removePagesForLedger(ledgerId);\n         indexPersistenceManager.removeLedger(ledgerId);"},{"sha":"8d63555b672fe3f40bb484e2a809929d8fc65816","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSyncThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSyncThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FSyncThread.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -74,7 +74,9 @@ public SyncThread(ServerConfiguration conf,\n             .setNameFormat(\"SyncThread-\" + conf.getBookiePort() + \"-%d\");\n         this.executor = Executors.newSingleThreadScheduledExecutor(tfb.build());\n         flushInterval = conf.getFlushInterval();\n-        LOG.debug(\"Flush Interval : {}\", flushInterval);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Flush Interval : {}\", flushInterval);\n+        }\n     }\n \n     void start() {"},{"sha":"7a76dd493f8cef64f27b90db61f730782f53daee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -72,7 +72,6 @@\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n \n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any\n@@ -385,7 +384,9 @@ private BookKeeper(ClientConfiguration conf,\n         this.ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n         this.ledgerIdGenerator = ledgerManagerFactory.newLedgerIdGenerator();\n         this.explicitLacInterval = conf.getExplictLacInterval();\n-        LOG.debug(\"Explicit LAC Interval : {}\", this.explicitLacInterval);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Explicit LAC Interval : {}\", this.explicitLacInterval);\n+        }\n \n         scheduleBookieHealthCheckIfEnabled();\n     }"},{"sha":"634d553b11a239f9bcadd6c39082681d5b7bd70e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeperAdmin.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -312,7 +312,7 @@ public LedgerHandle openLedgerNoRecovery(final long lId)\n     /**\n      * Read entries from a ledger synchronously. If the lastEntry is -1, it will read all the entries in the ledger from\n      * the firstEntry.\n-     * \n+     *\n      * @param ledgerId\n      * @param firstEntry\n      * @param lastEntry\n@@ -670,7 +670,9 @@ private BookieSocketAddress getNewBookie(final List<BookieSocketAddress> bookies\n      */\n     private void recoverLedger(final BookieSocketAddress bookieSrc, final long lId,\n             final AsyncCallback.VoidCallback ledgerIterCb, final List<BookieSocketAddress> availableBookies) {\n-        LOG.debug(\"Recovering ledger : {}\", lId);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Recovering ledger : {}\", lId);\n+        }\n \n         asyncOpenLedgerNoRecovery(lId, new OpenCallback() {\n             @Override\n@@ -941,37 +943,45 @@ public static boolean format(ClientConfiguration conf,\n             bkc = new BookKeeper(conf, zkc);\n             // Format all ledger metadata layout\n             bkc.ledgerManagerFactory.format(conf, zkc);\n-            \n+\n             // Clear underreplicated ledgers\n             try {\n                 ZKUtil.deleteRecursive(zkc, ZkLedgerUnderreplicationManager.getBasePath(conf.getZkLedgersRootPath())\n                         + BookKeeperConstants.DEFAULT_ZK_LEDGERS_ROOT_PATH);\n             } catch (KeeperException.NoNodeException e) {\n-                LOG.debug(\"underreplicated ledgers root path node not exists in zookeeper to delete\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"underreplicated ledgers root path node not exists in zookeeper to delete\");\n+                }\n             }\n \n             // Clear underreplicatedledger locks\n             try {\n                 ZKUtil.deleteRecursive(zkc, ZkLedgerUnderreplicationManager.getBasePath(conf.getZkLedgersRootPath())\n                         + '/' + BookKeeperConstants.UNDER_REPLICATION_LOCK);\n             } catch (KeeperException.NoNodeException e) {\n-                LOG.debug(\"underreplicatedledger locks node not exists in zookeeper to delete\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"underreplicatedledger locks node not exists in zookeeper to delete\");\n+                }\n             }\n-            \n+\n             // Clear the cookies\n             try {\n                 ZKUtil.deleteRecursive(zkc, conf.getZkLedgersRootPath()\n                         + \"/cookies\");\n             } catch (KeeperException.NoNodeException e) {\n-                LOG.debug(\"cookies node not exists in zookeeper to delete\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"cookies node not exists in zookeeper to delete\");\n+                }\n             }\n \n             // Clear the INSTANCEID\n             try {\n                 zkc.delete(conf.getZkLedgersRootPath() + \"/\"\n                         + BookKeeperConstants.INSTANCEID, -1);\n             } catch (KeeperException.NoNodeException e) {\n-                LOG.debug(\"INSTANCEID not exists in zookeeper to delete\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"INSTANCEID not exists in zookeeper to delete\");\n+                }\n             }\n \n             // create INSTANCEID"},{"sha":"823e649bd8560b10e0a1366db326e3aaa9f45618","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieInfoReader.java","status":"modified","additions":21,"deletions":7,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookieInfoReader.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -91,7 +91,9 @@ void start() {\n         scheduler.scheduleAtFixedRate(new Runnable() {\n             @Override\n             public void run() {\n-                LOG.debug(\"Running periodic BookieInfo scan\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Running periodic BookieInfo scan\");\n+                }\n                 getReadWriteBookieInfo(null);\n             }\n         }, 0, conf.getGetBookieInfoIntervalSeconds(), TimeUnit.SECONDS);\n@@ -128,7 +130,9 @@ void getReadWriteBookieInfo(Collection<BookieSocketAddress> newBookiesList) {\n             if (newBookiesList != null) {\n                 refreshBookieList.set(true);\n             }\n-            LOG.debug(\"Exiting due to running instance\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Exiting due to running instance\");\n+            }\n             return;\n         }\n         Collection<BookieSocketAddress> deadBookies = null, joinedBookies=null;\n@@ -137,7 +141,9 @@ void getReadWriteBookieInfo(Collection<BookieSocketAddress> newBookiesList) {\n                 if (this.bookies == null) {\n                     joinedBookies = this.bookies = bk.bookieWatcher.getBookies();\n                 } else if (refreshBookieList.get()) {\n-                    LOG.debug(\"Refreshing bookie list\");\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Refreshing bookie list\");\n+                    }\n                     newBookiesList = bk.bookieWatcher.getBookies();\n                     refreshBookieList.set(false);\n                 } else {\n@@ -169,7 +175,9 @@ void getReadWriteBookieInfo(Collection<BookieSocketAddress> newBookiesList) {\n         BookieClient bkc = bk.getBookieClient();\n         totalSent.set(0);\n         completedCnt.set(0);\n-        LOG.debug(\"Getting bookie info for: {}\", joinedBookies);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Getting bookie info for: {}\", joinedBookies);\n+        }\n         for (BookieSocketAddress b : joinedBookies) {\n             bkc.getBookieInfo(b, GET_BOOKIE_INFO_REQUEST_FLAGS,\n                     new GetBookieInfoCallback() {\n@@ -181,7 +189,9 @@ void processReadInfoComplete(int rc, BookieInfo bInfo, Object ctx) {\n                                 // create a new one only if the key was missing\n                                 bookieInfoMap.putIfAbsent(b, new BookieInfo());\n                             } else {\n-                                LOG.debug(\"Bookie Info for bookie {} is {}\", b, bInfo);\n+                                if (LOG.isDebugEnabled()) {\n+                                    LOG.debug(\"Bookie Info for bookie {} is {}\", b, bInfo);\n+                                }\n                                 bookieInfoMap.put(b, bInfo);\n                             }\n                             if (completedCnt.incrementAndGet() == totalSent.get()) {\n@@ -214,7 +224,9 @@ public void run() {\n \n     void onExit() {\n         if (isQueued.get()) {\n-            LOG.debug(\"Scheduling a queued task\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Scheduling a queued task\");\n+            }\n             submitTask(null);\n         }\n         isQueued.set(false);\n@@ -243,7 +255,9 @@ public void getBookieInfoComplete(int rc, BookieInfo bInfo, Object ctx) {\n                             if (rc != BKException.Code.OK) {\n                                 LOG.error(\"Reading bookie info from bookie {} failed due to error: {}.\", b, rc);\n                             } else {\n-                                LOG.debug(\"Free disk space on bookie {} is {}.\", b, bInfo.getFreeDiskSpace());\n+                                if (LOG.isDebugEnabled()) {\n+                                    LOG.debug(\"Free disk space on bookie {} is {}.\", b, bInfo.getFreeDiskSpace());\n+                                }\n                                 map.put(b, bInfo);\n                             }\n                             if (totalCompleted.incrementAndGet() == totalSent.get()) {"},{"sha":"fb3ba7952a923033049af079fb961284ea7b1395","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ExplicitLacFlushPolicy.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FExplicitLacFlushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FExplicitLacFlushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FExplicitLacFlushPolicy.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -59,7 +59,9 @@ class ExplicitLacFlushPolicyImpl implements ExplicitLacFlushPolicy {\n         ExplicitLacFlushPolicyImpl(LedgerHandle lh) {\n             this.lh = lh;\n             scheduleExplictLacFlush();\n-            LOG.debug(\"Scheduled Explicit Last Add Confirmed Update\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Scheduled Explicit Last Add Confirmed Update\");\n+            }\n         }\n \n         private long getExplicitLac() {\n@@ -87,20 +89,25 @@ public void safeRun() {\n                     // Piggyback, so no need to send an explicit LAC update to\n                     // bookies.\n                     if (getExplicitLac() < getPiggyBackedLac()) {\n-                        LOG.debug(\"ledgerid: {}\", lh.getId());\n-                        LOG.debug(\"explicitLac:{} piggybackLac:{}\", getExplicitLac(),\n-                                getPiggyBackedLac());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"ledgerid: {}\", lh.getId());\n+                            LOG.debug(\"explicitLac:{} piggybackLac:{}\", getExplicitLac(), getPiggyBackedLac());\n+                        }\n                         setExplicitLac(getPiggyBackedLac());\n                         return;\n                     }\n \n                     if (lh.getLastAddConfirmed() > getExplicitLac()) {\n                         // Send Explicit LAC\n-                        LOG.debug(\"ledgerid: {}\", lh.getId());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"ledgerid: {}\", lh.getId());\n+                        }\n                         asyncExplicitLacFlush(lh.getLastAddConfirmed());\n                         setExplicitLac(lh.getLastAddConfirmed());\n-                        LOG.debug(\"After sending explict LAC lac: {}  explicitLac:{}\", lh.getLastAddConfirmed(),\n-                                getExplicitLac());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"After sending explict LAC lac: {}  explicitLac:{}\", lh.getLastAddConfirmed(),\n+                                    getExplicitLac());\n+                        }\n                     }\n                 }\n \n@@ -126,7 +133,9 @@ void asyncExplicitLacFlush(final long explicitLac) {\n             final PendingWriteLacOp op = new PendingWriteLacOp(lh, cb, null);\n             op.setLac(explicitLac);\n             try {\n-                LOG.debug(\"Sending Explicit LAC: {}\", explicitLac);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Sending Explicit LAC: {}\", explicitLac);\n+                }\n                 lh.bk.mainWorkerPool.submit(new SafeRunnable() {\n                     @Override\n                     public void safeRun() {"},{"sha":"43f6ff21895ce85030097e1777ba61242826125c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandle.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -284,7 +284,9 @@ DistributionSchedule getDistributionSchedule() {\n     }\n \n     void writeLedgerConfig(GenericCallback<Void> writeCb) {\n-        LOG.debug(\"Writing metadata to ledger manager: {}, {}\", this.ledgerId, metadata.getVersion());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Writing metadata to ledger manager: {}, {}\", this.ledgerId, metadata.getVersion());\n+        }\n \n         bk.getLedgerManager().writeLedgerMetadata(ledgerId, metadata, writeCb);\n     }\n@@ -331,7 +333,9 @@ void asyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc)\n         try {\n             doAsyncCloseInternal(cb, ctx, rc);\n         } catch (RejectedExecutionException re) {\n-            LOG.debug(\"Failed to close ledger {} : \", ledgerId, re);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Failed to close ledger {} : \", ledgerId, re);\n+            }\n             errorOutPendingAdds(bk.getReturnRc(rc));\n             cb.closeComplete(bk.getReturnRc(BKException.Code.InterruptedException), this, ctx);\n         }\n@@ -639,7 +643,9 @@ public long addEntry(final long entryId, byte[] data) throws InterruptedExceptio\n      */\n     public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n-        LOG.debug(\"Adding entry {}\", data);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Adding entry {}\", data);\n+        }\n \n         CompletableFuture<Long> counter = new CompletableFuture<>();\n \n@@ -1156,12 +1162,17 @@ void sendAddSuccessCallbacks() {\n         while ((pendingAddOp = pendingAddOps.peek()) != null\n                && blockAddCompletions.get() == 0) {\n             if (!pendingAddOp.completed) {\n-                LOG.debug(\"pending add not completed: {}\", pendingAddOp);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"pending add not completed: {}\", pendingAddOp);\n+                }\n                 return;\n             }\n             // Check if it is the next entry in the sequence.\n             if (pendingAddOp.entryId != 0 && pendingAddOp.entryId != lastAddConfirmed + 1) {\n-                LOG.debug(\"Head of the queue entryId: {} is not lac: {} + 1\", pendingAddOp.entryId, lastAddConfirmed);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Head of the queue entryId: {} is not lac: {} + 1\", pendingAddOp.entryId,\n+                            lastAddConfirmed);\n+                }\n                 return;\n             }\n \n@@ -1537,7 +1548,9 @@ public void addLacComplete(int rc, LedgerHandle lh, Object ctx) {\n             if (rc != BKException.Code.OK) {\n                 LOG.warn(\"LastAddConfirmedUpdate failed: {} \", BKException.getMessage(rc));\n             } else {\n-                LOG.debug(\"Callback LAC Updated for: {} \", lh.getId());\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Callback LAC Updated for: {} \", lh.getId());\n+                }\n             }\n         }\n     }"},{"sha":"da10da4a7a9f48564152d97323059623aea1238c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandleAdv.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerHandleAdv.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -92,7 +92,9 @@ public long addEntry(final long entryId, byte[] data) throws InterruptedExceptio\n     @Override\n     public long addEntry(final long entryId, byte[] data, int offset, int length) throws InterruptedException,\n             BKException {\n-        LOG.debug(\"Adding entry {}\", data);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Adding entry {}\", data);\n+        }\n \n         CompletableFuture<Long> counter = new CompletableFuture<>();\n "},{"sha":"2641de9e0c40aee385fbaadb49eb7b29d52a246e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerMetadata.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -172,11 +172,11 @@ public int getWriteQuorumSize() {\n \n     /**\n      * Get the creation timestamp of the ledger\n-     * @return \n+     * @return\n      */\n     public long getCtime() {\n         return ctime;\n-    }        \n+    }\n \n     public int getAckQuorumSize() {\n         return ackQuorumSize;\n@@ -259,7 +259,7 @@ ArrayList<BookieSocketAddress> getEnsemble(long entryId) {\n      * place\n      *\n      * @param entryId\n-     * @return the entry id of the next ensemble change (-1 if no further ensemble changes) \n+     * @return the entry id of the next ensemble change (-1 if no further ensemble changes)\n      */\n     long getNextEnsembleChange(long entryId) {\n         SortedMap<Long, ArrayList<BookieSocketAddress>> tailMap = ensembles.tailMap(entryId + 1);\n@@ -317,7 +317,9 @@ public byte[] serialize() {\n         StringBuilder s = new StringBuilder();\n         s.append(VERSION_KEY).append(tSplitter).append(CURRENT_METADATA_FORMAT_VERSION).append(lSplitter);\n         s.append(TextFormat.printToString(builder.build()));\n-        LOG.debug(\"Serialized config: {}\", s);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Serialized config: {}\", s);\n+        }\n         return s.toString().getBytes(UTF_8);\n     }\n \n@@ -340,7 +342,9 @@ private byte[] serializeVersion1() {\n             s.append(lSplitter).append(getLastEntryId()).append(tSplitter).append(closed);\n         }\n \n-        LOG.debug(\"Serialized config: {}\", s);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Serialized config: {}\", s);\n+        }\n \n         return s.toString().getBytes(UTF_8);\n     }\n@@ -364,7 +368,9 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional\n \n         String config = new String(bytes, UTF_8);\n \n-        LOG.debug(\"Parsing Config: {}\", config);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Parsing Config: {}\", config);\n+        }\n         BufferedReader reader = new BufferedReader(new StringReader(config));\n         String versionLine = reader.readLine();\n         if (versionLine == null) {\n@@ -404,12 +410,12 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional\n \n         TextFormat.merge((CharSequence) CharBuffer.wrap(configBuffer), builder);\n         LedgerMetadataFormat data = builder.build();\n-        lc.writeQuorumSize = data.getQuorumSize();        \n+        lc.writeQuorumSize = data.getQuorumSize();\n         if (data.hasCtime()) {\n             lc.ctime = data.getCtime();\n         } else if (msCtime.isPresent()) {\n             lc.ctime = msCtime.get();\n-        }        \n+        }\n         if (data.hasAckQuorumSize()) {\n             lc.ackQuorumSize = data.getAckQuorumSize();\n         } else {"},{"sha":"20e78ce12e259b5315754cddc10ad8dd7d317e15","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerRecoveryOp.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -128,7 +128,9 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n                         cb.operationComplete(rc, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.OK, null);\n-                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"After closing length is: {}\", lh.getLength());\n+                        }\n                     }\n                 }\n             }, null, BKException.Code.LedgerClosedException);"},{"sha":"8c86885cf4db03d83dd6acc7f78ceba280b8259b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingAddOp.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -238,7 +238,9 @@ public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddre\n         if (ackSet.addBookieAndCheck(bookieIndex) && !completed) {\n             completed = true;\n \n-            LOG.debug(\"Complete (lid:{}, eid:{}).\", ledgerId, entryId);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Complete (lid:{}, eid:{}).\", ledgerId, entryId);\n+            }\n             // when completed an entry, try to send success add callbacks in order\n             lh.sendAddSuccessCallbacks();\n         }"},{"sha":"c4e1046fabeb5833d467e8c80d874800a1968b5e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadLacOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadLacOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadLacOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadLacOp.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -130,8 +130,9 @@ public void readLacComplete(int rc, long ledgerId, final ByteBuf lacBuffer, fina\n                 && coverageSet.addBookieAndCheckCovered(bookieIndex)\n                 && !completed) {\n             completed = true;\n-            LOG.debug(\"Read LAC complete with enough validResponse for ledger: {} LAC: {}\",\n-                    ledgerId, maxLac);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Read LAC complete with enough validResponse for ledger: {} LAC: {}\", ledgerId, maxLac);\n+            }\n             cb.getLacComplete(BKException.Code.OK, maxLac);\n             return;\n         }"},{"sha":"ae566b50c5b2140e02d03e9be2545c145a9365d5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FPendingReadOp.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -362,24 +362,29 @@ public void run() {\n                                 // Subsequent speculative read will not materialize anyway\n                                 cancelSpeculativeTask(false);\n                             } else {\n-                                LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\",\n-                                          r, heardFromHosts);\n+                                if (LOG.isDebugEnabled()) {\n+                                    LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\", r, heardFromHosts);\n+                                }\n                                 ++x;\n                             }\n                         }\n                     }\n                     if (x > 0) {\n-                        LOG.debug(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n-                                  new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                    new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                        }\n                     }\n                 }\n             };\n             try {\n                 speculativeTask = scheduler.scheduleWithFixedDelay(readTask,\n                         speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n             } catch (RejectedExecutionException re) {\n-                LOG.debug(\"Failed to schedule speculative reads for ledger {} ({}, {}) : \",\n-                    new Object[] { lh.getId(), startEntryId, endEntryId, re });\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Failed to schedule speculative reads for ledger {} ({}, {}) : \", lh.getId(),\n+                            startEntryId, endEntryId, re);\n+                }\n             }\n         }\n "},{"sha":"3d5df84c870c3667623c3181e0fb2eb47a61ca30","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadLastConfirmedOp.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -119,8 +119,10 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             && coverageSet.addBookieAndCheckCovered(bookieIndex)\n             && !completed) {\n             completed = true;\n-            LOG.debug(\"Read Complete with enough validResponses for ledger: {}, entry: {}\",\n-                ledgerId, entryId);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Read Complete with enough validResponses for ledger: {}, entry: {}\",\n+                        ledgerId, entryId);\n+            }\n \n             cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n             return;"},{"sha":"37227dd633f852d4d49396583bee75f1d48699be","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FReadOnlyLedgerHandle.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -124,8 +124,10 @@ void handleBookieFailure(final BookieSocketAddress addr, final int bookieIndex)\n             try {\n                 if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n                     // ensemble has already changed, failure of this addr is immaterial\n-                    LOG.debug(\"Write did not succeed to {}, bookieIndex {},\"\n-                              +\" but we have already fixed it.\", addr, bookieIndex);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Write did not succeed to {}, bookieIndex {},\"\n+                                +\" but we have already fixed it.\", addr, bookieIndex);\n+                    }\n                     blockAddCompletions.decrementAndGet();\n                     return;\n                 }"},{"sha":"f72b4561b20ebfe43f9cc14fbe51d38fb0493a68","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TopologyAwareEnsemblePlacementPolicy.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTopologyAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTopologyAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTopologyAwareEnsemblePlacementPolicy.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -176,9 +176,11 @@ private boolean checkSumOfSubsetWithinLimit(final Set<String> includedRacksOrReg\n                             int maxAllowedSum) {\n                 if (remainingRacksOrRegions.isEmpty() || (subsetSize <= 0)) {\n                     if (maxAllowedSum < 0) {\n-                        LOG.trace(\"CHECK FAILED: RacksOrRegions Included {} Remaining {}, subsetSize {}, maxAllowedSum {}\", new Object[]{\n-                            includedRacksOrRegions, remainingRacksOrRegions, subsetSize, maxAllowedSum\n-                        });\n+                        if (LOG.isTraceEnabled()) {\n+                            LOG.trace(\n+                                    \"CHECK FAILED: RacksOrRegions Included {} Remaining {}, subsetSize {}, maxAllowedSum {}\",\n+                                    includedRacksOrRegions, remainingRacksOrRegions, subsetSize, maxAllowedSum);\n+                        }\n                     }\n                     return (maxAllowedSum >= 0);\n                 }\n@@ -191,9 +193,11 @@ private boolean checkSumOfSubsetWithinLimit(final Set<String> includedRacksOrReg\n                     }\n \n                     if (currentAllocation > maxAllowedSum) {\n-                        LOG.trace(\"CHECK FAILED: RacksOrRegions Included {} Candidate {}, subsetSize {}, maxAllowedSum {}\", new Object[]{\n-                            includedRacksOrRegions, rackOrRegion, subsetSize, maxAllowedSum\n-                        });\n+                        if (LOG.isTraceEnabled()) {\n+                            LOG.trace(\n+                                    \"CHECK FAILED: RacksOrRegions Included {} Candidate {}, subsetSize {}, maxAllowedSum {}\",\n+                                    includedRacksOrRegions, rackOrRegion, subsetSize, maxAllowedSum);\n+                        }\n                         return false;\n                     } else {\n                         Set<String> remainingElements = new HashSet<String>(remainingRacksOrRegions);"},{"sha":"980bcd7dd75a07743b9cf0b0cadb8a821700e0ec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/WeightedRandomSelection.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FWeightedRandomSelection.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -100,7 +100,9 @@ public int compare(WeightedObject o1, WeightedObject o2) {\n         medianWeight = median/(double)totalWeight;\n         minWeight = (double)min/totalWeight;\n \n-        LOG.debug(\"Updating weights map. MediaWeight: \" + medianWeight + \" MinWeight: \" + minWeight);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Updating weights map. MediaWeight: \" + medianWeight + \" MinWeight: \" + minWeight);\n+        }\n \n         double maxWeight = maxProbabilityMultiplier*medianWeight;\n         Map<T, Double> weightMap = new HashMap<T, Double>();\n@@ -113,7 +115,10 @@ public int compare(WeightedObject o1, WeightedObject o2) {\n             }\n             if (maxWeight > 0 && weightedProbability > maxWeight) {\n                 weightedProbability=maxWeight;\n-                LOG.debug(\"Capping the probability to \" + weightedProbability + \" for \" + e.getKey() + \" Value: \" + e.getValue());\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Capping the probability to \" + weightedProbability + \" for \" + e.getKey() + \" Value: \"\n+                            + e.getValue());\n+                }\n             }\n             weightMap.put(e.getKey(), weightedProbability);\n         }\n@@ -125,8 +130,10 @@ public int compare(WeightedObject o1, WeightedObject o2) {\n         Double key=0.0;\n         for (Map.Entry<T, Double> e : weightMap.entrySet()) {\n             tmpCummulativeMap.put(key, e.getKey());\n-            LOG.debug(\"Key: \" + e.getKey() + \" Value: \" + e.getValue()\n-                    + \" AssignedKey: \" + key + \" AssignedWeight: \" + e.getValue());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Key: \" + e.getKey() + \" Value: \" + e.getValue() + \" AssignedKey: \" + key\n+                        + \" AssignedWeight: \" + e.getValue());\n+            }\n             key += e.getValue();\n         }\n "},{"sha":"54fc78b036da2a83c7bc5decfe79c4042f4d5cfd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":33,"deletions":15,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -38,7 +38,6 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.zookeeper.AsyncCallback;\n@@ -51,7 +50,6 @@\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n@@ -90,10 +88,14 @@ protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<Ledg\n         @Override\n         public void run() {\n             if (null != listeners.get(ledgerId)) {\n-                LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                }\n                 readLedgerMetadata(ledgerId, this, AbstractZkLedgerManager.this);\n             } else {\n-                LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                }\n             }\n         }\n \n@@ -102,7 +104,9 @@ public void operationComplete(int rc, final LedgerMetadata result) {\n             if (BKException.Code.OK == rc) {\n                 final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n                 if (null != listenerSet) {\n-                    LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                    }\n                     scheduler.submit(new Runnable() {\n                         @Override\n                         public void run() {\n@@ -118,8 +122,10 @@ public void run() {\n                 // the ledger is removed, do nothing\n                 Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n                 if (null != listenerSet) {\n-                    LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n-                            ledgerId, listenerSet.size());\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                                ledgerId, listenerSet.size());\n+                    }\n                 }\n             } else {\n                 LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n@@ -144,7 +150,9 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n                 \"ZkLedgerManagerScheduler-%d\");\n         this.scheduler = Executors\n                 .newSingleThreadScheduledExecutor(tfb.build());\n-        LOG.debug(\"Using AbstractZkLedgerManager with root path : {}\", ledgerRootPath);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Using AbstractZkLedgerManager with root path : {}\", ledgerRootPath);\n+        }\n     }\n \n     /**\n@@ -217,7 +225,9 @@ public void process(WatchedEvent event) {\n             new ReadLedgerMetadataTask(ledgerId).run();\n             break;\n         default:\n-            LOG.debug(\"Received event {} on {}.\", event.getType(), event.getPath());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Received event {} on {}.\", event.getType(), event.getPath());\n+            }\n             break;\n         }\n     }\n@@ -284,11 +294,15 @@ public void processResult(int rc, String path, Object ctx) {\n                     // removed listener on ledgerId\n                     Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n                     if (null != listenerSet) {\n-                        LOG.debug(\"Remove registered ledger metadata listeners on ledger {} after ledger is deleted.\",\n-                                ledgerId, listenerSet);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Remove registered ledger metadata listeners on ledger {} after ledger is deleted.\",\n+                                    ledgerId, listenerSet);\n+                        }\n                     } else {\n-                        LOG.debug(\"No ledger metadata listeners to remove from ledger {} when it's being deleted.\",\n-                                ledgerId);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"No ledger metadata listeners to remove from ledger {} when it's being deleted.\",\n+                                    ledgerId);\n+                        }\n                     }\n                     bkRc = BKException.Code.OK;\n                 } else {\n@@ -326,7 +340,9 @@ public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListen\n         if (listenerSet != null) {\n             synchronized (listenerSet) {\n                 if (listenerSet.remove(listener)) {\n-                    LOG.debug(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                    }\n                 }\n                 if (listenerSet.isEmpty()) {\n                     listeners.remove(ledgerId, listenerSet);\n@@ -444,7 +460,9 @@ public void operationComplete(int rc, List<String> ledgerNodes) {\n                 }\n \n                 Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, path);\n-                LOG.debug(\"Processing ledgers: {}\", zkActiveLedgers);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Processing ledgers: {}\", zkActiveLedgers);\n+                }\n \n                 // no ledgers found, return directly\n                 if (zkActiveLedgers.size() == 0) {"},{"sha":"5bca7339e699ba55496034aee0159a5e71ac7104","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerLayout.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -39,7 +39,7 @@\n class LedgerLayout {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerLayout.class);\n \n-   \n+\n     // version of compability layout version\n     public static final int LAYOUT_MIN_COMPAT_VERSION = 1;\n     // version of ledger layout metadata\n@@ -65,7 +65,7 @@ public static LedgerLayout readLayout(final ZooKeeper zk, final String ledgersRo\n             } catch (KeeperException.NoNodeException nne) {\n                 return null;\n             }\n-            \n+\n             return layout;\n         } catch (InterruptedException ie) {\n             throw new IOException(ie);\n@@ -169,7 +169,9 @@ private byte[] serialize() throws IOException {\n           new StringBuilder().append(layoutFormatVersion).append(lSplitter)\n               .append(managerFactoryCls).append(splitter).append(managerVersion).toString();\n \n-        LOG.debug(\"Serialized layout info: {}\", s);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Serialized layout info: {}\", s);\n+        }\n         return s.getBytes(\"UTF-8\");\n     }\n \n@@ -186,16 +188,17 @@ private byte[] serialize() throws IOException {\n      */\n     private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n         String layout = new String(bytes, \"UTF-8\");\n-\n-        LOG.debug(\"Parsing Layout: {}\", layout);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Parsing Layout: {}\", layout);\n+        }\n \n         String lines[] = layout.split(lSplitter);\n \n         try {\n             int layoutFormatVersion = Integer.parseInt(lines[0]);\n             if (LAYOUT_FORMAT_VERSION < layoutFormatVersion ||\n                 LAYOUT_MIN_COMPAT_VERSION > layoutFormatVersion) {\n-                throw new IOException(\"Metadata version not compatible. Expected \" \n+                throw new IOException(\"Metadata version not compatible. Expected \"\n                         + LAYOUT_FORMAT_VERSION + \", but got \" + layoutFormatVersion);\n             }\n "},{"sha":"3dc639f16a7bb4744de623e9862194c109ab1831","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -138,7 +138,9 @@ public static LedgerManagerFactory newLedgerManagerFactory(\n             return lmFactory\n                     .initialize(conf, zk, lmFactory.getCurrentVersion());\n         }\n-        LOG.debug(\"read ledger layout {}\", layout);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"read ledger layout {}\", layout);\n+        }\n \n         // there is existing layout, we need to look into the layout.\n         // handle pre V2 layout\n@@ -242,26 +244,26 @@ private static LedgerManagerFactory createNewLMFactory(\n \n     /**\n      * Format the ledger metadata for LedgerManager\n-     * \n+     *\n      * @param conf\n      *            Configuration instance\n      * @param zk\n      *            Zookeeper instance\n      */\n     public void format(final AbstractConfiguration conf, final ZooKeeper zk)\n             throws InterruptedException, KeeperException, IOException {\n-        \n+\n         Class<? extends LedgerManagerFactory> factoryClass;\n         try {\n             factoryClass = conf.getLedgerManagerFactoryClass();\n         } catch (ConfigurationException e) {\n             throw new IOException(\"Failed to get ledger manager factory class from configuration : \", e);\n         }\n-       \n+\n         LedgerLayout layout = LedgerLayout.readLayout(zk,\n                 conf.getZkLedgersRootPath());\n         layout.delete(zk, conf.getZkLedgersRootPath());\n-        // Create new layout information again.        \n+        // Create new layout information again.\n         createNewLMFactory(conf, zk, factoryClass);\n     }\n }"},{"sha":"c3a62cff2b06c682ef22f773169342b1d4948dff","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LongZkLedgerIdGenerator.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLongZkLedgerIdGenerator.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -82,7 +82,7 @@ public LongZkLedgerIdGenerator(ZooKeeper zk, String ledgersPath, String idGenZno\n         this.shortIdGen = shortIdGen;\n         highOrderDirectories = new ArrayList<String>();\n         ledgerIdGenPathStatus = HighOrderLedgerIdGenPathStatus.UNKNOWN;\n-        this.zkAcls = zkAcls; \n+        this.zkAcls = zkAcls;\n     }\n \n     private void generateLongLedgerIdLowBits(final String ledgerPrefix, long highBits, final GenericCallback<Long> cb) throws KeeperException, InterruptedException, IOException {\n@@ -130,13 +130,17 @@ private String formatHalfId(int i) {\n \n     private void createHOBPathAndGenerateId(String ledgerPrefix, int hob, final GenericCallback<Long> cb) throws KeeperException, InterruptedException, IOException {\n         try {\n-            LOG.debug(\"Creating HOB path: {}\", ledgerPrefix + formatHalfId(hob));\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Creating HOB path: {}\", ledgerPrefix + formatHalfId(hob));\n+            }\n             zk.create(ledgerPrefix + formatHalfId(hob), new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n         }\n         catch(KeeperException.NodeExistsException e) {\n             // It's fine if we lost a race to create the node (NodeExistsException).\n             // All other exceptions should continue unwinding.\n-            LOG.debug(\"Tried to create High-order-bits node, but it already existed!\", e);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Tried to create High-order-bits node, but it already existed!\", e);\n+            }\n         }\n         // We just created a new HOB directory. Invalidate the directory cache\n         invalidateDirectoryCache();\n@@ -210,13 +214,17 @@ private void generateLongLedgerId(final GenericCallback<Long> cb) throws KeeperE\n \n             for(int i = 0; i < highOrderDirs.length - 3; i++) {\n                 String path = ledgerPrefix + formatHalfId(((Long)highOrderDirs[i]).intValue());\n-                LOG.debug(\"DELETING HIGH ORDER DIR: {}\", path);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"DELETING HIGH ORDER DIR: {}\", path);\n+                }\n                 try {\n                     zk.delete(path, 0);\n                 }\n                 catch (KeeperException e) {\n                     // We don't care if we fail. Just warn about it.\n-                    LOG.debug(\"Failed to delete {}\", path);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Failed to delete {}\", path);\n+                    }\n                 }\n             }\n         }"},{"sha":"90d5e3d9c281a9353ddfddfc1a815517de146d0b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -215,10 +215,14 @@ protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<Ledg\n             @Override\n             public void run() {\n                 if (null != listeners.get(ledgerId)) {\n-                    LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                    }\n                     readLedgerMetadata(ledgerId, ReadLedgerMetadataTask.this);\n                 } else {\n-                    LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                    }\n                 }\n             }\n \n@@ -227,7 +231,9 @@ public void operationComplete(int rc, final LedgerMetadata result) {\n                 if (BKException.Code.OK == rc) {\n                     final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n                     if (null != listenerSet) {\n-                        LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                        }\n                         scheduler.submit(new Runnable() {\n                             @Override\n                             public void run() {\n@@ -243,8 +249,10 @@ public void run() {\n                     // the ledger is removed, do nothing\n                     Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n                     if (null != listenerSet) {\n-                        LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n-                                ledgerId, listenerSet.size());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                                    ledgerId, listenerSet.size());\n+                        }\n                     }\n                 } else {\n                     LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n@@ -360,7 +368,9 @@ public void complete(int rc, Version version, Object ctx) {\n                         ledgerCb.operationComplete(BKException.Code.MetaStoreException, null);\n                         return;\n                     }\n-                    LOG.debug(\"Create ledger {} with version {} successfully.\", lid, version);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Create ledger {} with version {} successfully.\", lid, version);\n+                    }\n                     // update version\n                     metadata.setVersion(version);\n                     ledgerCb.operationComplete(BKException.Code.OK, null);\n@@ -430,7 +440,9 @@ public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metada\n                 final GenericCallback<Void> cb) {\n             Value data = new Value().setField(META_FIELD, metadata.serialize());\n \n-            LOG.debug(\"Writing ledger {} metadata, version {}\", new Object[] { ledgerId, metadata.getVersion() });\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Writing ledger {} metadata, version {}\", new Object[] { ledgerId, metadata.getVersion() });\n+            }\n \n             final String key = ledgerId2Key(ledgerId);\n             MetastoreCallback<Version> msCallback = new MetastoreCallback<Version>() {"},{"sha":"ba2bce1dd469c3fa0de3cc36217b3f99f0c2173f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -113,7 +113,9 @@ public void processResult(int rc, String path, Object ctx) {\n                                     LOG.warn(\"Exception during deleting znode for id generation : \",\n                                             KeeperException.create(KeeperException.Code.get(rc), path));\n                                 } else {\n-                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n+                                    if (LOG.isDebugEnabled()) {\n+                                        LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n+                                    }\n                                 }\n                             }\n                         }, null);"},{"sha":"b69533643466f575db5509f391513583fafe5a6c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":33,"deletions":11,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerUnderreplicationManager.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -240,7 +240,9 @@ public UnderreplicatedLedgerFormat getLedgerUnreplicationInfo(long ledgerId)\n     @Override\n     public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n             throws ReplicationException.UnavailableException {\n-        LOG.debug(\"markLedgerUnderreplicated(ledgerId={}, missingReplica={})\", ledgerId, missingReplica);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"markLedgerUnderreplicated(ledgerId={}, missingReplica={})\", ledgerId, missingReplica);\n+        }\n         try {\n             List<ACL> zkAcls = ZkUtils.getACLs(conf);\n             String znode = getUrLedgerZnode(ledgerId);\n@@ -289,7 +291,9 @@ public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n \n     @Override\n     public void markLedgerReplicated(long ledgerId) throws ReplicationException.UnavailableException {\n-        LOG.debug(\"markLedgerReplicated(ledgerId={})\", ledgerId);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"markLedgerReplicated(ledgerId={})\", ledgerId);\n+        }\n         try {\n             Lock l = heldLocks.get(ledgerId);\n             if (l != null) {\n@@ -405,7 +409,9 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n \n                     Stat stat = zkc.exists(parent + \"/\" + tryChild, false);\n                     if (stat == null) {\n-                        LOG.debug(\"{}/{} doesn't exist\", parent, tryChild);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"{}/{} doesn't exist\", parent, tryChild);\n+                        }\n                         children.remove(tryChild);\n                         continue;\n                     }\n@@ -449,7 +455,9 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n \n     @Override\n     public long pollLedgerToRereplicate() throws ReplicationException.UnavailableException {\n-        LOG.debug(\"pollLedgerToRereplicate()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"pollLedgerToRereplicate()\");\n+        }\n         try {\n             Watcher w = new Watcher() {\n                     public void process(WatchedEvent e) { // do nothing\n@@ -466,7 +474,9 @@ public void process(WatchedEvent e) { // do nothing\n \n     @Override\n     public long getLedgerToRereplicate() throws ReplicationException.UnavailableException {\n-        LOG.debug(\"getLedgerToRereplicate()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"getLedgerToRereplicate()\");\n+        }\n         try {\n             while (true) {\n                 waitIfLedgerReplicationDisabled();\n@@ -508,7 +518,9 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n \n     @Override\n     public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationException.UnavailableException {\n-        LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n+        }\n         try {\n             Lock l = heldLocks.remove(ledgerId);\n             if (l != null) {\n@@ -527,7 +539,9 @@ public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationExcept\n \n     @Override\n     public void close() throws ReplicationException.UnavailableException {\n-        LOG.debug(\"close()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"close()\");\n+        }\n         try {\n             for (Map.Entry<Long, Lock> e : heldLocks.entrySet()) {\n                 zkc.delete(e.getValue().getLockZNode(), -1);\n@@ -547,7 +561,9 @@ public void close() throws ReplicationException.UnavailableException {\n     public void disableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n         List<ACL> zkAcls = ZkUtils.getACLs(conf);\n-        LOG.debug(\"disableLedegerReplication()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"disableLedegerReplication()\");\n+        }\n         try {\n             String znode = basePath + '/' + BookKeeperConstants.DISABLE_NODE;\n             zkc.create(znode, \"\".getBytes(UTF_8), zkAcls, CreateMode.PERSISTENT);\n@@ -570,7 +586,9 @@ public void disableLedgerReplication()\n     @Override\n     public void enableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n-        LOG.debug(\"enableLedegerReplication()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"enableLedegerReplication()\");\n+        }\n         try {\n             zkc.delete(basePath + '/' + BookKeeperConstants.DISABLE_NODE, -1);\n             LOG.info(\"Resuming automatic ledger re-replication\");\n@@ -592,7 +610,9 @@ public void enableLedgerReplication()\n     @Override\n     public boolean isLedgerReplicationEnabled()\n             throws ReplicationException.UnavailableException {\n-        LOG.debug(\"isLedgerReplicationEnabled()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"isLedgerReplicationEnabled()\");\n+        }\n         try {\n             if (null != zkc.exists(basePath + '/'\n                     + BookKeeperConstants.DISABLE_NODE, false)) {\n@@ -614,7 +634,9 @@ public boolean isLedgerReplicationEnabled()\n     @Override\n     public void notifyLedgerReplicationEnabled(final GenericCallback<Void> cb)\n             throws ReplicationException.UnavailableException {\n-        LOG.debug(\"notifyLedgerReplicationEnabled()\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"notifyLedgerReplicationEnabled()\");\n+        }\n         Watcher w = new Watcher() {\n             public void process(WatchedEvent e) {\n                 if (e.getType() == Watcher.Event.EventType.NodeDeleted) {"},{"sha":"11dff7a77419ba39c48d09f0d3fdf09debf99f34","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FAuthHandler.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -222,7 +222,9 @@ public void operationComplete(int rc, Void v) {\n                     authenticated = true;\n                     LOG.info(\"Authentication success on server side\");\n                 } else {\n-                    LOG.debug(\"Authentication failed on server side\");\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Authentication failed on server side\");\n+                    }\n                 }\n             }\n         }\n@@ -386,7 +388,9 @@ public void operationComplete(int rc, Void v) {\n                     }\n                 } else {\n                     authenticationError(ctx, rc);\n-                    LOG.debug(\"Authentication failed on server side\");\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Authentication failed on server side\");\n+                    }\n                 }\n             }\n         }"},{"sha":"87bc60e7606fa282e942e7e915d5075ad688ead0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FBookieServer.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -106,7 +106,7 @@ public BookieServer(ServerConfiguration conf, StatsLogger statsLogger)\n \n     protected Bookie newBookie(ServerConfiguration conf)\n         throws IOException, KeeperException, InterruptedException, BookieException {\n-        return conf.isForceReadOnlyBookie() ? \n+        return conf.isForceReadOnlyBookie() ?\n                 new ReadOnlyBookie(conf, statsLogger.scope(BOOKIE_SCOPE)) :\n                 new Bookie(conf, statsLogger.scope(BOOKIE_SCOPE));\n     }\n@@ -143,7 +143,9 @@ public Bookie getBookie() {\n      */\n     @VisibleForTesting\n     public void suspendProcessing() {\n-        LOG.debug(\"Suspending bookie server, port is {}\", conf.getBookiePort());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Suspending bookie server, port is {}\", conf.getBookiePort());\n+        }\n         nettyServer.suspendProcessing();\n     }\n \n@@ -152,7 +154,9 @@ public void suspendProcessing() {\n      */\n     @VisibleForTesting\n     public void resumeProcessing() {\n-        LOG.debug(\"Resuming bookie server, port is {}\", conf.getBookiePort());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Resuming bookie server, port is {}\", conf.getBookiePort());\n+        }\n         nettyServer.resumeProcessing();\n     }\n \n@@ -294,7 +298,7 @@ private static ServerConfiguration parseArgs(String[] args)\n                 throw new IllegalArgumentException();\n             }\n \n-            ServerConfiguration conf = new ServerConfiguration();            \n+            ServerConfiguration conf = new ServerConfiguration();\n \n             if (cmdLine.hasOption('c')) {\n                 String confFile = cmdLine.getOptionValue(\"c\");"},{"sha":"4f7b8c00b52d95200c70a8ef76f4f00c681e68fd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/GetBookieInfoProcessorV3.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FGetBookieInfoProcessorV3.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -55,7 +55,9 @@ private GetBookieInfoResponse getGetBookieInfoResponse() {\n             return getBookieInfoResponse.build();\n         }\n \n-        LOG.debug(\"Received new getBookieInfo request: {}\", request);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received new getBookieInfo request: {}\", request);\n+        }\n         StatusCode status = StatusCode.EOK;\n         long freeDiskSpace = 0L, totalDiskSpace = 0L;\n         if ((requested & GetBookieInfoRequest.Flags.FREE_DISK_SPACE_VALUE) != 0) {\n@@ -66,7 +68,10 @@ private GetBookieInfoResponse getGetBookieInfoResponse() {\n             totalDiskSpace = requestProcessor.bookie.getTotalDiskSpace();\n             getBookieInfoResponse.setTotalDiskCapacity(totalDiskSpace);\n         }\n-        LOG.debug(\"FreeDiskSpace info is \" + freeDiskSpace + \" totalDiskSpace is: \" + totalDiskSpace);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"FreeDiskSpace info is \" + freeDiskSpace + \" totalDiskSpace is: \" + totalDiskSpace);\n+        }\n         getBookieInfoResponse.setStatus(status);\n         requestProcessor.getBookieInfoStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n                 TimeUnit.NANOSECONDS);"},{"sha":"047d76c7f9cf8a576e27f13c85b489d989feb114","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":61,"deletions":24,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FPerChannelBookieClient.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -288,7 +288,9 @@ private void completeOperation(GenericCallback<PerChannelBookieClient> op, int r\n     }\n \n     protected ChannelFuture connect() {\n-        LOG.debug(\"Connecting to bookie: {}\", addr);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Connecting to bookie: {}\", addr);\n+        }\n \n         // Set up the ClientBootStrap so we can create a new Channel connection to the bookie.\n         Bootstrap bootstrap = new Bootstrap();\n@@ -348,7 +350,9 @@ protected void initChannel(Channel ch) throws Exception {\n         future.addListener(new ChannelFutureListener() {\n             @Override\n             public void operationComplete(ChannelFuture future) throws Exception {\n-                LOG.debug(\"Channel connected ({}) {}\", future.isSuccess(), future.channel());\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Channel connected ({}) {}\", future.isSuccess(), future.channel());\n+                }\n                 int rc;\n                 Queue<GenericCallback<PerChannelBookieClient>> oldPendingOps;\n \n@@ -366,8 +370,10 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n                         channel = null;\n                     } else if (future.isSuccess() && state == ConnectionState.CONNECTED) {\n-                        LOG.debug(\"Already connected with another channel({}), so close the new channel({})\",\n-                                channel, future.channel());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Already connected with another channel({}), so close the new channel({})\",\n+                                    channel, future.channel());\n+                        }\n                         closeChannel(future.channel());\n                         return; // pendingOps should have been completed when other channel connected\n                     } else {\n@@ -702,8 +708,9 @@ public void readLac(final long ledgerId, ReadLacCallback cb, Object ctx) {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n-                        LOG.debug(\"Succssfully wrote request {} to {}\",\n-                                readLacRequest, c.remoteAddress());\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Succssfully wrote request {} to {}\", readLacRequest, c.remoteAddress());\n+                        }\n                     } else {\n                         if (!(future.cause() instanceof ClosedChannelException)) {\n                             LOG.warn(\"Writing readLac(lid = {}) to channel {} failed : \",\n@@ -888,7 +895,9 @@ private void closeInternal(boolean permanent, boolean wait) {\n     }\n \n     private ChannelFuture closeChannel(Channel c) {\n-        LOG.debug(\"Closing channel {}\", c);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Closing channel {}\", c);\n+        }\n         return c.close();\n     }\n \n@@ -897,7 +906,9 @@ void errorOutReadKey(final CompletionKey key) {\n     }\n \n     void errorOutReadKey(final CompletionKey key, final int rc) {\n-        LOG.debug(\"Removing completion key: {}\", key);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Removing completion key: {}\", key);\n+        }\n         final ReadCompletion readCompletion = (ReadCompletion)completionObjects.remove(key);\n         if (null == readCompletion) {\n             return;\n@@ -911,8 +922,10 @@ public void safeRun() {\n                     bAddress = c.remoteAddress().toString();\n                 }\n \n-                LOG.debug(\"Could not write request for reading entry: {} ledger-id: {} bookie: {} rc: {}\",\n-                        new Object[]{ readCompletion.entryId, readCompletion.ledgerId, bAddress, rc });\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Could not write request for reading entry: {} ledger-id: {} bookie: {} rc: {}\",\n+                            new Object[] { readCompletion.entryId, readCompletion.ledgerId, bAddress, rc });\n+                }\n \n                 readCompletion.cb.readEntryComplete(rc, readCompletion.ledgerId, readCompletion.entryId,\n                                                     null, readCompletion.ctx);\n@@ -930,7 +943,9 @@ void errorOutWriteLacKey(final CompletionKey key) {\n     }\n \n     void errorOutWriteLacKey(final CompletionKey key, final int rc) {\n-        LOG.debug(\"Removing completion key: {}\", key);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Removing completion key: {}\", key);\n+        }\n         final WriteLacCompletion writeLacCompletion = (WriteLacCompletion)completionObjects.remove(key);\n         if (null == writeLacCompletion) {\n             return;\n@@ -943,8 +958,10 @@ public void safeRun() {\n                 if (c != null) {\n                     bAddress = c.remoteAddress().toString();\n                 }\n-                LOG.debug(\"Could not write request writeLac for ledgerId: {} bookie: {}\",\n-                          new Object[] { writeLacCompletion.ledgerId, bAddress});\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Could not write request writeLac for ledgerId: {} bookie: {}\",\n+                            writeLacCompletion.ledgerId, bAddress);\n+                }\n                 writeLacCompletion.cb.writeLacComplete(rc, writeLacCompletion.ledgerId, addr, writeLacCompletion.ctx);\n             }\n         });\n@@ -955,7 +972,9 @@ void errorOutReadLacKey(final CompletionKey key) {\n     }\n \n     void errorOutReadLacKey(final CompletionKey key, final int rc) {\n-        LOG.debug(\"Removing completion key: {}\", key);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Removing completion key: {}\", key);\n+        }\n         final ReadLacCompletion readLacCompletion = (ReadLacCompletion)completionObjects.remove(key);\n         if (null == readLacCompletion) {\n             return;\n@@ -968,8 +987,10 @@ public void safeRun() {\n                 if (c != null) {\n                     bAddress = c.remoteAddress().toString();\n                 }\n-                LOG.debug(\"Could not write request readLac for ledgerId: {} bookie: {}\",\n-                          new Object[] { readLacCompletion.ledgerId, bAddress});\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Could not write request readLac for ledgerId: {} bookie: {}\", readLacCompletion.ledgerId,\n+                            bAddress);\n+                }\n                 readLacCompletion.cb.readLacComplete(rc, readLacCompletion.ledgerId, null, null, readLacCompletion.ctx);\n             }\n         });\n@@ -992,12 +1013,17 @@ public void safeRun() {\n                 if (c != null && c.remoteAddress() != null) {\n                     bAddress = c.remoteAddress().toString();\n                 }\n-                LOG.debug(\"Could not write request for adding entry: {} ledger-id: {} bookie: {} rc: {}\",\n-                          new Object[] { addCompletion.entryId, addCompletion.ledgerId, bAddress, rc });\n+\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Could not write request for adding entry: {} ledger-id: {} bookie: {} rc: {}\",\n+                            new Object[] { addCompletion.entryId, addCompletion.ledgerId, bAddress, rc });\n+                }\n \n                 addCompletion.cb.writeComplete(rc, addCompletion.ledgerId, addCompletion.entryId,\n                                                addr, addCompletion.ctx);\n-                LOG.debug(\"Invoked callback method: {}\", addCompletion.entryId);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Invoked callback method: {}\", addCompletion.entryId);\n+                }\n             }\n \n             @Override\n@@ -1323,7 +1349,10 @@ void handleWriteLacResponse(long ledgerId, StatusCode status, CompletionValue co\n         // The completion value should always be an instance of an WriteLacCompletion object when we reach here.\n         WriteLacCompletion plc = (WriteLacCompletion)completionValue;\n \n-        LOG.debug(\"Got response for writeLac request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" rc: \" + status);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Got response for writeLac request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" rc: \"\n+                    + status);\n+        }\n \n         // convert to BKException code\n         Integer rcToRet = statusCodeToExceptionCode(status);\n@@ -1361,12 +1390,16 @@ void handleReadLacResponse(long ledgerId, StatusCode status, ByteBuf lacBuffer,\n         // The completion value should always be an instance of an WriteLacCompletion object when we reach here.\n         ReadLacCompletion glac = (ReadLacCompletion)completionValue;\n \n-        LOG.debug(\"Got response for readLac request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" rc: \" + status);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Got response for readLac request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" rc: \"\n+                    + status);\n+        }\n         // convert to BKException code\n         Integer rcToRet = statusCodeToExceptionCode(status);\n         if (null == rcToRet) {\n-            LOG.debug(\"readLac for ledger: \" + ledgerId + \" failed on bookie: \" + addr\n-                      + \" with code:\" + status);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"readLac for ledger: \" + ledgerId + \" failed on bookie: \" + addr + \" with code:\" + status);\n+            }\n             rcToRet = BKException.Code.ReadException;\n         }\n         glac.cb.readLacComplete(rcToRet, ledgerId, lacBuffer.slice(), lastEntryBuffer.slice(), glac.ctx);\n@@ -1413,7 +1446,11 @@ void handleGetBookieInfoResponse(long freeDiskSpace, long totalDiskCapacity,  St\n                       new Object[] { addr, status });\n             rcToRet = BKException.Code.ReadException;\n         }\n-        LOG.debug(\"Response received from bookie info read: freeDiskSpace=\" +  freeDiskSpace + \" totalDiskSpace:\" + totalDiskCapacity);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Response received from bookie info read: freeDiskSpace=\" + freeDiskSpace + \" totalDiskSpace:\"\n+                    + totalDiskCapacity);\n+        }\n         rc.cb.getBookieInfoComplete(rcToRet, new BookieInfo(totalDiskCapacity, freeDiskSpace), rc.ctx);\n     }\n "},{"sha":"91ddcbbb7c4777300e6ae2f7406190dcba946aa9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessor.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessor.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -47,7 +47,9 @@ protected void processPacket() {\n         assert (request instanceof BookieProtocol.ReadRequest);\n         BookieProtocol.ReadRequest read = (BookieProtocol.ReadRequest) request;\n \n-        LOG.debug(\"Received new read request: {}\", request);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received new read request: {}\", request);\n+        }\n         int errorCode = BookieProtocol.EIO;\n         long startTimeNanos = MathUtils.nowInNano();\n         ByteBuf data = null;\n@@ -64,7 +66,9 @@ protected void processPacket() {\n                 }\n             }\n             data = requestProcessor.bookie.readEntry(request.getLedgerId(), request.getEntryId());\n-            LOG.debug(\"##### Read entry ##### {} -- ref-count: {}\", data.readableBytes(), data.refCnt());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"##### Read entry ##### {} -- ref-count: {}\", data.readableBytes(), data.refCnt());\n+            }\n             if (null != fenceResult) {\n                 // TODO:\n                 // currently we don't have readCallback to run in separated read\n@@ -119,8 +123,9 @@ protected void processPacket() {\n             errorCode = BookieProtocol.EUA;\n         }\n \n-        LOG.trace(\"Read entry rc = {} for {}\",\n-                new Object[] { errorCode, read });\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Read entry rc = {} for {}\", new Object[] { errorCode, read });\n+        }\n         if (errorCode == BookieProtocol.EOK) {\n             requestProcessor.readEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(startTimeNanos),\n                     TimeUnit.NANOSECONDS);"},{"sha":"b921b464830c1385e7429785f3692d4bff2db880","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ReadEntryProcessorV3.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fproto%2FReadEntryProcessorV3.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -64,7 +64,9 @@ private ReadResponse getReadResponse() {\n             return readResponse.build();\n         }\n \n-        LOG.debug(\"Received new read request: {}\", request);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received new read request: {}\", request);\n+        }\n         StatusCode status;\n         ByteBuf entryBody = null;\n         try {"},{"sha":"338584a33d83bdf9de4c788c813220b0611797d8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FAuditor.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -566,7 +566,9 @@ public void process(final Long ledgerId,\n                         numBookiesPerLedger.registerSuccessfulValue(lh.getNumBookies());\n                         numLedgersChecked.inc();\n                     } catch (BKException.BKNoSuchLedgerExistsException bknsle) {\n-                        LOG.debug(\"Ledger was deleted before we could check it\", bknsle);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Ledger was deleted before we could check it\", bknsle);\n+                        }\n                         callback.processResult(BKException.Code.OK,\n                                                null, null);\n                         return;"},{"sha":"b50927c56423dcd50e746e4f69f5ca89f0db9764","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationEnableCb.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationEnableCb.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationEnableCb.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationEnableCb.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -38,19 +38,22 @@ public class ReplicationEnableCb implements GenericCallback<Void> {\n     @Override\n     public void operationComplete(int rc, Void result) {\n         latch.countDown();\n-        LOG.debug(\"Automatic ledger re-replication is enabled\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Automatic ledger re-replication is enabled\");\n+        }\n     }\n \n     /**\n      * This is a blocking call and causes the current thread to wait until the\n      * replication process is enabled\n-     * \n+     *\n      * @throws InterruptedException\n      *             interrupted while waiting\n      */\n     public void await() throws InterruptedException {\n-        LOG.debug(\"Automatic ledger re-replication is disabled. \"\n-                + \"Hence waiting until its enabled!\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Automatic ledger re-replication is disabled. Hence waiting until its enabled!\");\n+        }\n         latch.await();\n     }\n }"},{"sha":"185208970604d8d403451d1c98fbfa1e0fe84d43","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Freplication%2FReplicationWorker.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -224,10 +224,15 @@ private void rereplicate() throws InterruptedException, BKException,\n \n     private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedException, BKException,\n             UnavailableException {\n-        LOG.debug(\"Going to replicate the fragments of the ledger: {}\", ledgerIdToReplicate);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Going to replicate the fragments of the ledger: {}\", ledgerIdToReplicate);\n+        }\n         try (LedgerHandle lh = admin.openLedgerNoRecovery(ledgerIdToReplicate)) {\n             Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n-            LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n+            }\n \n             boolean foundOpenFragments = false;\n             long numFragsReplicated = 0;\n@@ -237,8 +242,10 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n                     continue;\n                 } else if (isTargetBookieExistsInFragmentEnsemble(lh,\n                         ledgerFragment)) {\n-                    LOG.debug(\"Target Bookie[{}] found in the fragment ensemble: {}\", targetBookie,\n-                            ledgerFragment.getEnsemble());\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Target Bookie[{}] found in the fragment ensemble: {}\", targetBookie,\n+                                ledgerFragment.getEnsemble());\n+                    }\n                     continue;\n                 }\n                 try {\n@@ -383,7 +390,9 @@ public void run() {\n                     LOG.info(\"InterruptedException \"\n                             + \"while replicating fragments\", e);\n                 } catch (BKNoSuchLedgerExistsException bknsle) {\n-                    LOG.debug(\"Ledger was deleted, safe to continue\", bknsle);\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Ledger was deleted, safe to continue\", bknsle);\n+                    }\n                 } catch (BKException e) {\n                     LOG.error(\"BKException while fencing the ledger\"\n                             + \" for rereplication of postponed ledgers\", e);"},{"sha":"dff38b7fccfe322c9b2ebd8459c1b3c1445171d7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLBookieAuthProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProvider.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -40,7 +40,7 @@ public class SASLBookieAuthProvider implements BookieAuthProvider {\n \n     private SaslServerState server;\n     private final AuthCallbacks.GenericCallback<Void> completeCb;\n-    \n+\n     SASLBookieAuthProvider(BookieConnectionPeer addr, AuthCallbacks.GenericCallback<Void> completeCb,\n         ServerConfiguration serverConfiguration, Subject subject, Pattern allowedIdsPattern) {\n         this.completeCb = completeCb;\n@@ -64,7 +64,9 @@ public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n                 completeCb.operationComplete(BKException.Code.OK, null);\n             }\n         } catch (SaslException err) {\n-            LOG.debug(\"SASL error\", err);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"SASL error\", err);\n+            }\n             completeCb.operationComplete(BKException.Code.UnauthorizedAccessException, null);\n         }\n "},{"sha":"b6c2ecd23a42b2977c17d4a652857f618a43a965","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLBookieAuthProviderFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLBookieAuthProviderFactory.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -112,7 +112,9 @@ public void close() {\n             try {\n                 ticketRefreshThread.join(10000);\n             } catch (InterruptedException exit) {\n-                LOG.debug(\"interrupted while waiting for TGT reresh thread to stop\", exit);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"interrupted while waiting for TGT reresh thread to stop\", exit);\n+                }\n             }\n         }\n     }"},{"sha":"c4a511bc3c098f821d855b849b1908f7004bd4cd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLClientAuthProvider.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientAuthProvider.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -53,7 +53,9 @@ public class SASLClientAuthProvider implements ClientAuthProvider {\n                 hostname = InetAddress.getLocalHost().getHostName();\n             }\n             client = new SaslClientState(hostname, subject);\n-            LOG.debug(\"SASLClientAuthProvider Boot \" + client + \" for \" + hostname);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"SASLClientAuthProvider Boot \" + client + \" for \" + hostname);\n+            }\n         } catch (IOException error) {\n             LOG.error(\"Error while booting SASL client\", error);\n             completeCb.operationComplete(BKException.Code.UnauthorizedAccessException, null);"},{"sha":"0278efa01a7690a7a5d70211953490489a90a98f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SASLClientProviderFactory.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSASLClientProviderFactory.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -113,7 +113,9 @@ public void close() {\n             try {\n                 ticketRefreshThread.join(10000);\n             } catch (InterruptedException exit) {\n-                LOG.debug(\"interrupted while waiting for TGT reresh thread to stop\", exit);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"interrupted while waiting for TGT reresh thread to stop\", exit);\n+                }\n             }\n         }\n     }"},{"sha":"19dc4acf6d90da3f79b703e7a21cd10be6d5e97d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SaslClientState.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslClientState.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslClientState.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslClientState.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -53,7 +53,9 @@ public SaslClientState(String serverHostname, Subject subject) throws SaslExcept\n             throw new SaslException(\"Cannot create JAAS Sujbect for SASL\");\n         }\n         if (clientSubject.getPrincipals().isEmpty()) {\n-            LOG.debug(\"Using JAAS/SASL/DIGEST-MD5 auth to connect to {}\", serverPrincipal);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Using JAAS/SASL/DIGEST-MD5 auth to connect to {}\", serverPrincipal);\n+            }\n             String[] mechs = {\"DIGEST-MD5\"};\n             username = (String) (clientSubject.getPublicCredentials().toArray()[0]);\n             password = (String) (clientSubject.getPrivateCredentials().toArray()[0]);\n@@ -67,7 +69,9 @@ public SaslClientState(String serverHostname, Subject subject) throws SaslExcept\n             final String serviceName = serviceKerberosName.getServiceName();\n             final String serviceHostname = serviceKerberosName.getHostName();\n             final String clientPrincipalName = clientKerberosName.toString();\n-            LOG.debug(\"Using JAAS/SASL/GSSAPI auth to connect to server Principal {}\", serverPrincipal);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Using JAAS/SASL/GSSAPI auth to connect to server Principal {}\", serverPrincipal);\n+            }\n             try {\n                 saslClient = Subject.doAs(clientSubject, new PrivilegedExceptionAction<SaslClient>() {\n                     @Override\n@@ -78,7 +82,9 @@ public SaslClient run() throws SaslException {\n                     }\n                 });\n             } catch (PrivilegedActionException err) {\n-                LOG.debug(\"GSSAPI client error\", err.getCause());\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"GSSAPI client error\", err.getCause());\n+                }\n                 throw new SaslException(\"error while booting GSSAPI client\", err.getCause());\n             }\n         }\n@@ -103,7 +109,9 @@ public byte[] run() throws SaslException {\n                     });\n                 return retval;\n             } catch (PrivilegedActionException e) {\n-                LOG.debug(\"SASL error\", e.getCause());\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"SASL error\", e.getCause());\n+                }\n                 throw new SaslException(\"SASL/JAAS error\", e.getCause());\n             }\n         } else {\n@@ -172,7 +180,9 @@ public byte[] saslResponse(byte[] saslTokenMessage) {\n             byte[] retval = saslClient.evaluateChallenge(saslTokenMessage);\n             return retval;\n         } catch (SaslException e) {\n-            LOG.debug(\"saslResponse: Failed to respond to SASL server's token:\", e);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"saslResponse: Failed to respond to SASL server's token:\", e);\n+            }\n             return null;\n         }\n     }"},{"sha":"d2686ac2dd0e38ffced9a480e8ab96d25fb59c65","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/SaslServerState.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslServerState.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslServerState.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FSaslServerState.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -70,7 +70,9 @@ private SaslServer createSaslServer(final Subject subject, ServerConfiguration s\n             try {\n                 final Object[] principals = subject.getPrincipals().toArray();\n                 final Principal servicePrincipal = (Principal) principals[0];\n-                LOG.debug(\"Authentication will use SASL/JAAS/Kerberos, servicePrincipal is {}\", servicePrincipal);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Authentication will use SASL/JAAS/Kerberos, servicePrincipal is {}\", servicePrincipal);\n+                }\n \n                 final String servicePrincipalNameAndHostname = servicePrincipal.getName();\n                 int indexOf = servicePrincipalNameAndHostname.indexOf(\"/\");\n@@ -109,7 +111,9 @@ public SaslServer run() {\n                 throw new SaslException(\"error on GSSAPI boot\", e);\n             }\n         } else {\n-            LOG.debug(\"Authentication will use SASL/JAAS/DIGEST-MD5\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Authentication will use SASL/JAAS/DIGEST-MD5\");\n+            }\n             return Sasl.createSaslServer(\"DIGEST-MD5\", SaslConstants.SASL_BOOKKEEPER_PROTOCOL,\n                 SaslConstants.SASL_MD5_DUMMY_HOSTNAME, null, callbackHandler);\n         }\n@@ -199,7 +203,9 @@ private void handlePasswordCallback(PasswordCallback pc) {\n         }\n \n         private void handleRealmCallback(RealmCallback rc) {\n-            LOG.debug(\"client supplied realm: \" + rc.getDefaultText());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"client supplied realm: \" + rc.getDefaultText());\n+            }\n             rc.setText(rc.getDefaultText());\n         }\n \n@@ -220,15 +226,19 @@ private void handleAuthorizeCallback(AuthorizeCallback ac) {\n             }\n             ac.setAuthorized(true);\n \n-            LOG.debug(\"Successfully authenticated client: authenticationID=\" + authenticationID\n-                + \";  authorizationID=\" + authorizationID + \".\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Successfully authenticated client: authenticationID=\" + authenticationID\n+                        + \";  authorizationID=\" + authorizationID + \".\");\n+            }\n \n             KerberosName kerberosName = new KerberosName(authenticationID);\n             try {\n                 StringBuilder userNameBuilder = new StringBuilder(kerberosName.getShortName());\n                 userNameBuilder.append(\"/\").append(kerberosName.getHostName());\n                 userNameBuilder.append(\"@\").append(kerberosName.getRealm());\n-                LOG.debug(\"Setting authorizedID: \" + userNameBuilder);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Setting authorizedID: \" + userNameBuilder);\n+                }\n                 ac.setAuthorizedID(userNameBuilder.toString());\n             } catch (IOException e) {\n                 LOG.error(\"Failed to set name based on Kerberos authentication rules.\");"},{"sha":"d0595624ec0eaf8d75ea6c39791530d35749a7d9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/sasl/TGTRefreshThread.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FTGTRefreshThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FTGTRefreshThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fsasl%2FTGTRefreshThread.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -63,8 +63,10 @@ private synchronized KerberosTicket getTGT() {\n         for (KerberosTicket ticket : tickets) {\n             KerberosPrincipal server = ticket.getServer();\n             if (server.getName().equals(\"krbtgt/\" + server.getRealm() + \"@\" + server.getRealm())) {\n-                LOG.debug(\"Client principal is \\\"\" + ticket.getClient().getName() + \"\\\".\");\n-                LOG.debug(\"Server principal is \\\"\" + ticket.getServer().getName() + \"\\\".\");\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Client principal is \\\"\" + ticket.getClient().getName() + \"\\\".\");\n+                    LOG.debug(\"Server principal is \\\"\" + ticket.getServer().getName() + \"\\\".\");\n+                }\n                 return ticket;\n             }\n         }\n@@ -178,7 +180,9 @@ public void run() {\n                 int retry = 1;\n                 while (retry >= 0) {\n                     try {\n-                        LOG.debug(\"running ticket cache refresh command: {} {}\", cmd, kinitArgs);\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"running ticket cache refresh command: {} {}\", cmd, kinitArgs);\n+                        }\n                         Shell.execCommand(cmd, kinitArgs);\n                         break;\n                     } catch (Exception e) {"},{"sha":"8c66e594a7c50490aa19461c8cb98c8816b3b03a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FLocalBookKeeper.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -95,7 +95,9 @@ public static ZooKeeperServerShim runZookeeper(int maxCC, int zookeeperPort, Fil\n \n         boolean b = waitForServerUp(InetAddress.getLoopbackAddress().getHostAddress() + \":\" + zookeeperPort,\n           CONNECTION_TIMEOUT);\n-        LOG.debug(\"ZooKeeper server up: {}\", b);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"ZooKeeper server up: {}\", b);\n+        }\n         return server;\n     }\n \n@@ -213,7 +215,7 @@ private void runBookies(ServerConfiguration baseConf, List<File> tempDirs, Strin\n             } else {\n                 bsConfs[i].setBookiePort(initialPort + i);\n             }\n-            \n+\n             if (null == baseConf.getZkServers()) {\n                 bsConfs[i].setZkServers(InetAddress.getLocalHost().getHostAddress() + \":\"\n                                   + ZooKeeperDefaultPort);"},{"sha":"ded7524607b68d46b483463abe7928aefee0ac27","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5f945f8a02f5171608810eb002443193c3eb058c/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fzookeeper%2FZooKeeperWatcherBase.java?ref=5f945f8a02f5171608810eb002443193c3eb058c","patch":"@@ -112,15 +112,18 @@ public Counter getStateCounter(Event.KeeperState state) {\n     public void process(WatchedEvent event) {\n         // If event type is NONE, this is a connection status change\n         if (event.getType() != EventType.None) {\n-            LOG.debug(\"Received event: {}, path: {} from ZooKeeper server\",\n-                    event.getType(), event.getPath());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Received event: {}, path: {} from ZooKeeper server\", event.getType(), event.getPath());\n+            }\n             getEventCounter(event.getType()).inc();\n             // notify the child watchers\n             notifyEvent(event);\n             return;\n         }\n         getStateCounter(event.getState()).inc();\n-        LOG.debug(\"Received {} from ZooKeeper server\", event.getState());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received {} from ZooKeeper server\", event.getState());\n+        }\n         // TODO: Needs to handle AuthFailed, SaslAuthenticated events\n         switch (event.getState()) {\n         case SyncConnected:"}]}