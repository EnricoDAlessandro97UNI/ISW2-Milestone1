{"sha":"a84b5e11114c5a6eabeaf17ba60975439593fa2d","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmE4NGI1ZTExMTE0YzVhNmVhYmVhZjE3YmE2MDk3NTQzOTU5M2ZhMmQ=","commit":{"author":{"name":"sigee","email":"sigee15@gmail.com","date":"2017-07-17T21:00:39Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-07-17T21:00:39Z"},"message":"Add Checkstyle to the build process (Part 1)\n\nAdd checkstyle to\n- bookkeeper-benchmark\n- Stats API for bookkeeper\n- Stats provider for codahale metrics\n- Stats provider for Prometheus\n- Stats provider for Finagle stats\n- Stats provider for twitter-ostrich package\n- Stats provider for twitter-stats package\n\nand fix issues checkstyle reported.\n\n---\nBe sure to do all of the following to help us incorporate your contribution\nquickly and easily:\n\n- [X] Make sure the PR title is formatted like:\n    `<Issue # or BOOKKEEPER-#>: Description of pull request`\n    `e.g. Issue 123: Description ...`\n    `e.g. BOOKKEEPER-1234: Description ...`\n- [ ] Make sure tests pass via `mvn clean apache-rat:check install findbugs:check`.\n- [X] Replace `<Issue # or BOOKKEEPER-#>` in the title with the actual Issue/JIRA number.\n\n---\n\nAuthor: sigee <sigee15@gmail.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Jia Zhai <None>, Sijie Guo <sijie@apache.org>\n\nThis closes #231 from sigee/checkstyle","tree":{"sha":"40a17f5bb5ee069fc2baa07eea63c857396747a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/40a17f5bb5ee069fc2baa07eea63c857396747a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/a84b5e11114c5a6eabeaf17ba60975439593fa2d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a84b5e11114c5a6eabeaf17ba60975439593fa2d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a84b5e11114c5a6eabeaf17ba60975439593fa2d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a84b5e11114c5a6eabeaf17ba60975439593fa2d/comments","author":{"login":"sigee","id":6528240,"node_id":"MDQ6VXNlcjY1MjgyNDA=","avatar_url":"https://avatars.githubusercontent.com/u/6528240?v=4","gravatar_id":"","url":"https://api.github.com/users/sigee","html_url":"https://github.com/sigee","followers_url":"https://api.github.com/users/sigee/followers","following_url":"https://api.github.com/users/sigee/following{/other_user}","gists_url":"https://api.github.com/users/sigee/gists{/gist_id}","starred_url":"https://api.github.com/users/sigee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sigee/subscriptions","organizations_url":"https://api.github.com/users/sigee/orgs","repos_url":"https://api.github.com/users/sigee/repos","events_url":"https://api.github.com/users/sigee/events{/privacy}","received_events_url":"https://api.github.com/users/sigee/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"387dc83d6d2db6a1d30bac3216a92f875083d144","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/387dc83d6d2db6a1d30bac3216a92f875083d144","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/387dc83d6d2db6a1d30bac3216a92f875083d144"}],"stats":{"total":1197,"additions":1046,"deletions":151},"files":[{"sha":"98ed6d5b0a047d4bcffcc1201436d761a34dd0ae","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -49,6 +49,34 @@\n           </systemPropertyVariables>\n \t</configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n   <dependencies>"},{"sha":"23427048d1e1bb10b65db43841d4e8ae1a9b9662","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchBookie.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -48,25 +48,28 @@\n import io.netty.channel.epoll.EpollEventLoopGroup;\n import io.netty.channel.nio.NioEventLoopGroup;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class BenchBookie {\n     static final Logger LOG = LoggerFactory.getLogger(BenchBookie.class);\n \n     static class LatencyCallback implements WriteCallback {\n         boolean complete;\n         @Override\n-        synchronized public void writeComplete(int rc, long ledgerId, long entryId,\n+        public synchronized void writeComplete(int rc, long ledgerId, long entryId,\n                 BookieSocketAddress addr, Object ctx) {\n             if (rc != 0) {\n                 LOG.error(\"Got error \" + rc);\n             }\n             complete = true;\n             notifyAll();\n         }\n-        synchronized public void resetComplete() {\n+        public synchronized void resetComplete() {\n             complete = false;\n         }\n-        synchronized public void waitForComplete() throws InterruptedException {\n-            while(!complete) {\n+        public synchronized void waitForComplete() throws InterruptedException {\n+            while (!complete) {\n                 wait();\n             }\n         }\n@@ -75,7 +78,7 @@ synchronized public void waitForComplete() throws InterruptedException {\n     static class ThroughputCallback implements WriteCallback {\n         int count;\n         int waitingCount = Integer.MAX_VALUE;\n-        synchronized public void writeComplete(int rc, long ledgerId, long entryId,\n+        public synchronized void writeComplete(int rc, long ledgerId, long entryId,\n                 BookieSocketAddress addr, Object ctx) {\n             if (rc != 0) {\n                 LOG.error(\"Got error \" + rc);\n@@ -85,8 +88,8 @@ synchronized public void writeComplete(int rc, long ledgerId, long entryId,\n                 notifyAll();\n             }\n         }\n-        synchronized public void waitFor(int count) throws InterruptedException {\n-            while(this.count < count) {\n+        public synchronized void waitFor(int count) throws InterruptedException {\n+            while (this.count < count) {\n                 waitingCount = count;\n                 wait(1000);\n             }\n@@ -100,14 +103,18 @@ private static long getValidLedgerId(String zkServers)\n         LedgerHandle lh = null;\n         long id = 0;\n         try {\n-            bkc =new BookKeeper(zkServers);\n+            bkc = new BookKeeper(zkServers);\n             lh = bkc.createLedger(1, 1, BookKeeper.DigestType.CRC32,\n                                   new byte[20]);\n             id = lh.getId();\n             return id;\n         } finally {\n-            if (lh != null) { lh.close(); }\n-            if (bkc != null) { bkc.close(); }\n+            if (lh != null) {\n+                lh.close();\n+            }\n+            if (bkc != null) {\n+                bkc.close();\n+            }\n         }\n     }\n     /**\n@@ -163,7 +170,7 @@ public static void main(String[] args)\n         int warmUpCount = 999;\n \n         long ledger = getValidLedgerId(servers);\n-        for(long entry = 0; entry < warmUpCount; entry++) {\n+        for (long entry = 0; entry < warmUpCount; entry++) {\n             ByteBuf toSend = Unpooled.buffer(size);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n@@ -180,7 +187,7 @@ public static void main(String[] args)\n         LOG.info(\"Benchmarking latency\");\n         int entryCount = 5000;\n         long startTime = System.nanoTime();\n-        for(long entry = 0; entry < entryCount; entry++) {\n+        for (long entry = 0; entry < entryCount; entry++) {\n             ByteBuf toSend = Unpooled.buffer(size);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n@@ -193,15 +200,15 @@ public static void main(String[] args)\n             lc.waitForComplete();\n         }\n         long endTime = System.nanoTime();\n-        LOG.info(\"Latency: \" + (((double)(endTime-startTime))/((double)entryCount))/1000000.0);\n+        LOG.info(\"Latency: \" + (((double) (endTime - startTime)) / ((double) entryCount)) / 1000000.0);\n \n         entryCount = 50000;\n \n         ledger = getValidLedgerId(servers);\n         LOG.info(\"Benchmarking throughput\");\n         startTime = System.currentTimeMillis();\n         tc = new ThroughputCallback();\n-        for(long entry = 0; entry < entryCount; entry++) {\n+        for (long entry = 0; entry < entryCount; entry++) {\n             ByteBuf toSend = Unpooled.buffer(size);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n@@ -213,7 +220,7 @@ public static void main(String[] args)\n         }\n         tc.waitFor(entryCount);\n         endTime = System.currentTimeMillis();\n-        LOG.info(\"Throughput: \" + ((long)entryCount)*1000/(endTime-startTime));\n+        LOG.info(\"Throughput: \" + ((long) entryCount) * 1000 / (endTime - startTime));\n \n         bc.close();\n         eventLoop.shutdownGracefully();"},{"sha":"336f07eb3aa19fe7faedb491997c0283be3d173a","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchReadThroughputLatency.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -47,6 +47,9 @@\n \n import static com.google.common.base.Charsets.UTF_8;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class BenchReadThroughputLatency {\n     static final Logger LOG = LoggerFactory.getLogger(BenchReadThroughputLatency.class);\n \n@@ -101,7 +104,7 @@ private static void readLedger(ClientConfiguration conf, long ledgerId, byte[] p\n                 while (lastRead < lastConfirmed) {\n                     long nextLimit = lastRead + 100000;\n                     long readTo = Math.min(nextLimit, lastConfirmed);\n-                    Enumeration<LedgerEntry> entries = lh.readEntries(lastRead+1, readTo);\n+                    Enumeration<LedgerEntry> entries = lh.readEntries(lastRead + 1, readTo);\n                     lastRead = readTo;\n                     while (entries.hasMoreElements()) {\n                         LedgerEntry e = entries.nextElement();\n@@ -120,10 +123,10 @@ private static void readLedger(ClientConfiguration conf, long ledgerId, byte[] p\n             }\n         } catch (InterruptedException ie) {\n             // ignore\n-        } catch (Exception e ) {\n+        } catch (Exception e) {\n             LOG.error(\"Exception in reader\", e);\n         } finally {\n-            LOG.info(\"Read {} in {}ms\", entriesRead, time/1000/1000);\n+            LOG.info(\"Read {} in {}ms\", entriesRead, time / 1000 / 1000);\n \n             try {\n                 if (lh != null) {"},{"sha":"874a26a4318880b44fa1dbb5759665a16631332a","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":32,"deletions":30,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FBenchThroughputLatency.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -56,6 +56,9 @@\n \n import static com.google.common.base.Charsets.UTF_8;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class BenchThroughputLatency implements AddCallback, Runnable {\n     static final Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);\n \n@@ -87,10 +90,10 @@ public BenchThroughputLatency(int ensemble, int writeQuorumSize, int ackQuorumSi\n         this.numberOfLedgers = numberOfLedgers;\n         this.sendLimit = sendLimit;\n         this.latencies = new long[sendLimit];\n-        try{\n+        try {\n             lh = new LedgerHandle[this.numberOfLedgers];\n \n-            for(int i = 0; i < this.numberOfLedgers; i++) {\n+            for (int i = 0; i < this.numberOfLedgers; i++) {\n                 lh[i] = bk.createLedger(ensemble, writeQuorumSize,\n                                         ackQuorumSize,\n                                         BookKeeper.DigestType.CRC32,\n@@ -104,7 +107,7 @@ public BenchThroughputLatency(int ensemble, int writeQuorumSize, int ackQuorumSi\n \n     Random rand = new Random();\n     public void close() throws InterruptedException, BKException {\n-        for(int i = 0; i < numberOfLedgers; i++) {\n+        for (int i = 0; i < numberOfLedgers; i++) {\n             lh[i].close();\n         }\n         bk.close();\n@@ -126,7 +129,7 @@ private int getRandomLedger() {\n     AtomicLong completedRequests = new AtomicLong(0);\n \n     long duration = -1;\n-    synchronized public long getDuration() {\n+    public synchronized long getDuration() {\n         return duration;\n     }\n \n@@ -139,7 +142,7 @@ public void run() {\n         Thread reporter = new Thread() {\n                 public void run() {\n                     try {\n-                        while(true) {\n+                        while (true) {\n                             Thread.sleep(1000);\n                             LOG.info(\"ms: {} req: {}\", System.currentTimeMillis(), completedRequests.getAndSet(0));\n                         }\n@@ -151,14 +154,13 @@ public void run() {\n         reporter.start();\n         long beforeSend = System.nanoTime();\n \n-        while(!Thread.currentThread().isInterrupted() && sent < sendLimit) {\n+        while (!Thread.currentThread().isInterrupted() && sent < sendLimit) {\n             try {\n                 sem.acquire();\n                 if (sent == 10000) {\n                     long afterSend = System.nanoTime();\n                     long time = afterSend - beforeSend;\n-                    LOG.info(\"Time to send first batch: {}s {}ns \",\n-                             time/1000/1000/1000, time);\n+                    LOG.info(\"Time to send first batch: {}s {}ns \", time / 1000 / 1000 / 1000, time);\n                 }\n             } catch (InterruptedException e) {\n                 break;\n@@ -178,20 +180,20 @@ public void run() {\n         LOG.info(\"Sent: \"  + sent);\n         try {\n             int i = 0;\n-            while(this.counter.get() > 0) {\n+            while (this.counter.get() > 0) {\n                 Thread.sleep(1000);\n                 i++;\n                 if (i > 30) {\n                     break;\n                 }\n             }\n-        } catch(InterruptedException e) {\n+        } catch (InterruptedException e) {\n             LOG.error(\"Interrupted while waiting\", e);\n         }\n-        synchronized(this) {\n+        synchronized (this) {\n             duration = System.currentTimeMillis() - start;\n         }\n-        throughput = sent*1000/getDuration();\n+        throughput = sent * 1000 / getDuration();\n \n         reporter.interrupt();\n         try {\n@@ -223,7 +225,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         counter.decrementAndGet();\n \n         if (rc == 0) {\n-            latencies[(int)entryId] = newTime;\n+            latencies[(int) entryId] = newTime;\n             completedRequests.incrementAndGet();\n         }\n     }\n@@ -291,21 +293,21 @@ public void run() {\n                 }, timeout);\n         }\n \n-        LOG.warn(\"(Parameters received) running time: \" + runningTime +\n-                \", entry size: \" + entrysize + \", ensemble size: \" + ensemble +\n-                \", quorum size: \" + quorum +\n-                \", throttle: \" + throttle +\n-                \", number of ledgers: \" + ledgers +\n-                \", zk servers: \" + servers +\n-                \", latency file: \" + latencyFile);\n+        LOG.warn(\"(Parameters received) running time: \" + runningTime\n+                + \", entry size: \" + entrysize + \", ensemble size: \" + ensemble\n+                + \", quorum size: \" + quorum\n+                + \", throttle: \" + throttle\n+                + \", number of ledgers: \" + ledgers\n+                + \", zk servers: \" + servers\n+                + \", latency file: \" + latencyFile);\n \n-        long totalTime = runningTime*1000;\n+        long totalTime = runningTime * 1000;\n \n         // Do a warmup run\n         Thread thread;\n \n         byte data[] = new byte[entrysize];\n-        Arrays.fill(data, (byte)'x');\n+        Arrays.fill(data, (byte) 'x');\n \n         ClientConfiguration conf = new ClientConfiguration();\n         conf.setThrottleValue(throttle).setReadTimeout(sockTimeout).setZkServers(servers);\n@@ -364,23 +366,23 @@ public void process(WatchedEvent event) {\n         LOG.info(\"Calculating percentiles\");\n \n         int numlat = 0;\n-        for(int i = 0; i < bench.latencies.length; i++) {\n+        for (int i = 0; i < bench.latencies.length; i++) {\n             if (bench.latencies[i] > 0) {\n                 numlat++;\n             }\n         }\n         int numcompletions = numlat;\n         numlat = Math.min(bench.sendLimit, numlat);\n         long[] latency = new long[numlat];\n-        int j =0;\n-        for(int i = 0; i < bench.latencies.length && j < numlat; i++) {\n+        int j = 0;\n+        for (int i = 0; i < bench.latencies.length && j < numlat; i++) {\n             if (bench.latencies[i] > 0) {\n                 latency[j++] = bench.latencies[i];\n             }\n         }\n         Arrays.sort(latency);\n \n-        long tp = (long)((double)(numcompletions*1000.0)/(double)bench.getDuration());\n+        long tp = (long) ((double) (numcompletions * 1000.0) / (double) bench.getDuration());\n \n         LOG.info(numcompletions + \" completions in \" + bench.getDuration() + \" milliseconds: \" + tp + \" ops/sec\");\n \n@@ -394,8 +396,8 @@ public void process(WatchedEvent event) {\n         // dump the latencies for later debugging (it will be sorted by entryid)\n         OutputStream fos = new BufferedOutputStream(new FileOutputStream(latencyFile));\n \n-        for(Long l: latency) {\n-            fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes(UTF_8));\n+        for (Long l: latency) {\n+            fos.write((Long.toString(l) + \"\\t\" + (l / 1000000) + \"ms\\n\").getBytes(UTF_8));\n         }\n         fos.flush();\n         fos.close();\n@@ -413,11 +415,11 @@ private static double percentile(long[] latency, int percentile) {\n         int sampleSize = (size * percentile) / 100;\n         long total = 0;\n         int count = 0;\n-        for(int i = 0; i < sampleSize; i++) {\n+        for (int i = 0; i < sampleSize; i++) {\n             total += latency[i];\n             count++;\n         }\n-        return ((double)total/(double)count)/1000000.0;\n+        return ((double) total / (double) count) / 1000000.0;\n     }\n \n     private static long warmUp(byte[] data, int ledgers, int ensemble, int qSize,"},{"sha":"f04a997d26c014e4c6c3f26bf797969963d02404","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FMySqlClient.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -34,6 +34,9 @@\n \n import org.apache.zookeeper.KeeperException;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class MySqlClient {\n     static final Logger LOG = LoggerFactory.getLogger(MySqlClient.class);\n \n@@ -73,20 +76,21 @@ public MySqlClient(String hostport, String user, String pass)\n     public void closeHandle() throws KeeperException, InterruptedException, SQLException {\n         con.close();\n     }\n+\n     /**\n-     * First parameter is an integer defining the length of the message\n-     * Second parameter is the number of writes\n-     * Third parameter is host:port\n-     * Fourth parameter is username\n-     * Fifth parameter is password\n+     * First parameter is an integer defining the length of the message.\n+     * Second parameter is the number of writes.\n+     * Third parameter is host:port.\n+     * Fourth parameter is username.\n+     * Fifth parameter is password.\n      * @param args\n      * @throws ClassNotFoundException\n      * @throws SQLException\n      */\n     public static void main(String[] args) throws ClassNotFoundException, SQLException {\n         int lenght = Integer.parseInt(args[1]);\n         StringBuilder sb = new StringBuilder();\n-        while(lenght-- > 0) {\n+        while (lenght-- > 0) {\n             sb.append('a');\n         }\n         try {\n@@ -105,15 +109,16 @@ public static void main(String[] args) throws ClassNotFoundException, SQLExcepti\n     }\n \n     /**\n-     * \tAdds  data entry to the DB\n-     * \t@param data \tthe entry to be written, given as a byte array\n-     * \t@param times\tthe number of times the entry should be written on the DB\t*/\n+     * Adds data entry to the DB.\n+     * @param data the entry to be written, given as a byte array\n+     * @param times the number of times the entry should be written on the DB\n+     */\n     void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQLException {\n         start = System.currentTimeMillis();\n         int count = times;\n         String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n-        while(count-- > 0) {\n+        while (count-- > 0) {\n             stmt.addBatch(\"insert into data(content) values(\\\"\" + content + \"\\\");\");\n         }\n         LOG.info(\"Finished writing batch SQL command in ms: \" + (System.currentTimeMillis() - start));\n@@ -128,7 +133,7 @@ void writeSameEntry(byte[] data, int times) throws InterruptedException, SQLExce\n         int count = times;\n         String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n-        while(count-- > 0) {\n+        while (count-- > 0) {\n             stmt.executeUpdate(\"insert into data(content) values(\\\"\" + content + \"\\\");\");\n         }\n         System.out.println(\"Finished \" + times + \" writes in ms: \" + (System.currentTimeMillis() - start));"},{"sha":"747c41a4f135ad3f94266f43e4e15b68807428c1","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FTestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FTestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2FTestClient.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -62,7 +62,6 @@\n  * BookKeeper and to the local file system.\n  *\n  */\n-\n public class TestClient {\n     private static final Logger LOG = LoggerFactory.getLogger(TestClient.class);\n \n@@ -102,7 +101,7 @@ public static void main(String[] args) throws ParseException {\n         long runfor = Long.parseLong(cmd.getOptionValue(\"runfor\", \"60\")) * 1000;\n \n         StringBuilder sb = new StringBuilder();\n-        while(length-- > 0) {\n+        while (length-- > 0) {\n             sb.append('a');\n         }\n \n@@ -190,9 +189,8 @@ public void run() {\n                 }\n                 count += c;\n             }\n-            long time = end-start;\n-            LOG.info(\"Finished processing writes (ms): {} TPT: {} op/s\",\n-                     time, count/((double)time/1000));\n+            long time = end - start;\n+            LOG.info(\"Finished processing writes (ms): {} TPT: {} op/s\", time, count / ((double) time / 1000));\n             executor.shutdown();\n         } catch (ExecutionException ee) {\n             LOG.error(\"Exception in worker\", ee);\n@@ -236,9 +234,9 @@ public Long call() {\n                 long count = 0;\n                 long start = System.currentTimeMillis();\n                 long stopat = start + time;\n-                while(System.currentTimeMillis() < stopat) {\n+                while (System.currentTimeMillis() < stopat) {\n                     FSDataOutputStream stream = streams.get(r.nextInt(streams.size()));\n-                    synchronized(stream) {\n+                    synchronized (stream) {\n                         stream.write(data);\n                         stream.flush();\n                         stream.hflush();\n@@ -247,10 +245,10 @@ public Long call() {\n                 }\n \n                 long time = (System.currentTimeMillis() - start);\n-                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\",\n-                         time, count/((double)time/1000));\n+                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\", time,\n+                         count / ((double) time / 1000));\n                 return count;\n-            } catch(IOException ioe) {\n+            } catch (IOException ioe) {\n                 LOG.error(\"Exception in worker thread\", ioe);\n                 return 0L;\n             }\n@@ -276,9 +274,9 @@ public Long call() {\n                 long start = System.currentTimeMillis();\n \n                 long stopat = start + time;\n-                while(System.currentTimeMillis() < stopat) {\n+                while (System.currentTimeMillis() < stopat) {\n                     FileOutputStream stream = streams.get(r.nextInt(streams.size()));\n-                    synchronized(stream) {\n+                    synchronized (stream) {\n                         stream.write(data);\n                         stream.flush();\n                         stream.getChannel().force(false);\n@@ -287,9 +285,10 @@ public Long call() {\n                 }\n \n                 long time = (System.currentTimeMillis() - start);\n-                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\", time, count/((double)time/1000));\n+                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\", time,\n+                         count / ((double) time / 1000));\n                 return count;\n-            } catch(IOException ioe) {\n+            } catch (IOException ioe) {\n                 LOG.error(\"Exception in worker thread\", ioe);\n                 return 0L;\n             }\n@@ -318,7 +317,7 @@ public Long call() {\n                 long start = System.currentTimeMillis();\n \n                 long stopat = start + time;\n-                while(System.currentTimeMillis() < stopat) {\n+                while (System.currentTimeMillis() < stopat) {\n                     LedgerHandle lh = handles.get(r.nextInt(handles.size()));\n                     if (sync) {\n                         lh.addEntry(data);\n@@ -335,8 +334,8 @@ public Long call() {\n                 }\n \n                 long time = (System.currentTimeMillis() - start);\n-                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\",\n-                         time, success.get()/((double)time/1000));\n+                LOG.info(\"Worker finished processing writes (ms): {} TPT: {} op/s\", time,\n+                         success.get() / ((double) time / 1000));\n                 return success.get();\n             } catch (BKException e) {\n                 LOG.error(\"Exception in worker thread\", e);"},{"sha":"3296a783d7687194960a71b63950f08b4398f9d9","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/package-info.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbenchmark%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.benchmark;\n\\ No newline at end of file"},{"sha":"c0d9a42134e39948112c2584a1bc03e1addb2a00","filename":"bookkeeper-benchmark/src/test/resources/log4j.properties","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Ftest%2Fresources%2Flog4j.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-benchmark%2Fsrc%2Ftest%2Fresources%2Flog4j.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-benchmark%2Fsrc%2Ftest%2Fresources%2Flog4j.properties?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -1,22 +1,22 @@\n #\n-# \n+#\n # Licensed to the Apache Software Foundation (ASF) under one\n # or more contributor license agreements.  See the NOTICE file\n # distributed with this work for additional information\n # regarding copyright ownership.  The ASF licenses this file\n # to you under the Apache License, Version 2.0 (the\n # \"License\"); you may not use this file except in compliance\n # with the License.  You may obtain a copy of the License at\n-# \n+#\n #   http://www.apache.org/licenses/LICENSE-2.0\n-# \n+#\n # Unless required by applicable law or agreed to in writing,\n # software distributed under the License is distributed on an\n # \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-# \n+#\n #\n \n #"},{"sha":"ed370d35f7966716ada92c0218c7c7a86ef40eb5","filename":"bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -32,6 +32,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.bookkeeper.stats</groupId>"},{"sha":"5ba62363a1cbc80dcea6ab4ea6379101ae397e5e","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleMetricsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -43,6 +43,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n @SuppressWarnings(\"deprecation\")\n public class CodahaleMetricsProvider implements StatsProvider {\n "},{"sha":"055ae92f3d4b3b8a8ff3193698a98efb32f4a664","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleOpStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -16,9 +16,6 @@\n  */\n package org.apache.bookkeeper.stats;\n \n-import org.apache.bookkeeper.stats.OpStatsData;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-\n import com.codahale.metrics.Timer;\n import com.codahale.metrics.Snapshot;\n \n@@ -66,11 +63,11 @@ public synchronized OpStatsData toOpStatsData() {\n         Snapshot s = success.getSnapshot();\n         double avgLatencyMillis = s.getMean();\n \n-        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n-        long[] latenciesMillis = new long[default_percentiles.length];\n+        double[] defaultPercentiles = {10, 50, 90, 99, 99.9, 99.99};\n+        long[] latenciesMillis = new long[defaultPercentiles.length];\n         Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n-        for (int i = 0; i < default_percentiles.length; i++) {\n-            latenciesMillis[i] = (long)s.getValue(default_percentiles[i]/100);\n+        for (int i = 0; i < defaultPercentiles.length; i++) {\n+            latenciesMillis[i] = (long) s.getValue(defaultPercentiles[i] / 100);\n         }\n         return new OpStatsData(numSuccess, numFailed, avgLatencyMillis, latenciesMillis);\n     }"},{"sha":"5149ff2e99814e98bc88332c9a8f7b92c7b2b45e","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCodahaleStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -20,11 +20,9 @@\n import com.codahale.metrics.MetricRegistry;\n import static com.codahale.metrics.MetricRegistry.name;\n \n-import org.apache.bookkeeper.stats.Counter;\n-import org.apache.bookkeeper.stats.Gauge;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-import org.apache.bookkeeper.stats.StatsLogger;\n-\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class CodahaleStatsLogger implements StatsLogger {\n     protected final String basename;\n     final MetricRegistry metrics;\n@@ -37,7 +35,7 @@ public class CodahaleStatsLogger implements StatsLogger {\n     @Override\n     public OpStatsLogger getOpStatsLogger(String statName) {\n         Timer success = metrics.timer(name(basename, statName));\n-        Timer failure = metrics.timer(name(basename, statName+\"-fail\"));\n+        Timer failure = metrics.timer(name(basename, statName + \"-fail\"));\n         return new CodahaleOpStatsLogger(success, failure);\n     }\n "},{"sha":"4a266c48eae32e4c29e8e1e20a96aff7f57aec26","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fcodahale-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/**\n+ * @TODO: Write JavaDoc Comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats;\n\\ No newline at end of file"},{"sha":"ac0f09c621d015b7e6fdaf29aac11c1f80103d0a","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/pom.xml","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -33,6 +33,39 @@\n     <prometheus.version>0.0.21</prometheus.version>\n   </properties>\n \n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.bookkeeper.stats</groupId>"},{"sha":"5c73f38373fc23a7aa2b4e5615ff6027489655ad","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusCounter.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusCounter.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -20,6 +20,9 @@\n import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.Gauge;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class PrometheusCounter implements Counter {\n \n     private final Gauge gauge;"},{"sha":"a595ed5bec810d0a999526cb45eb891a0262ed38","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusMetricsProvider.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusMetricsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -32,6 +32,9 @@\n import io.prometheus.client.hotspot.StandardExports;\n import io.prometheus.client.hotspot.ThreadExports;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class PrometheusMetricsProvider implements StatsProvider {\n \n     private final CollectorRegistry registry = new CollectorRegistry();"},{"sha":"f9a945765f365aab54fa71e2cb17812ceee351ee","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusOpStatsLogger.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusOpStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -21,6 +21,9 @@\n import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.Summary;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class PrometheusOpStatsLogger implements OpStatsLogger {\n \n     private final Summary summary;"},{"sha":"ccf1d6b2edddc93c7ef97bbb54d652021f46c99b","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FPrometheusStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -21,6 +21,9 @@\n import io.prometheus.client.Collector;\n import io.prometheus.client.CollectorRegistry;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class PrometheusStatsLogger implements StatsLogger {\n \n     private final CollectorRegistry registry;"},{"sha":"d77aedab928d8ad4fbae350a04bd713e6b1df78f","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Fprometheus-metrics-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats;\n\\ No newline at end of file"},{"sha":"89f95d7ee43912051be7c797ece7d3929bb1abd0","filename":"bookkeeper-stats-providers/twitter-finagle-provider/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -32,6 +32,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.bookkeeper.stats</groupId>"},{"sha":"b4b8146681f078448b020d34b6663b576f1eb647","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FCounterImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FCounterImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FCounterImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -25,7 +25,7 @@\n  * It also has a limitation in size: max bound is signed integer, not long.\n  */\n class CounterImpl implements Counter {\n-    final private com.twitter.finagle.stats.Counter counter;\n+    private final com.twitter.finagle.stats.Counter counter;\n \n     public CounterImpl(final String name,\n                        final StatsReceiver stats) {"},{"sha":"a6fda0608daa8260127708a495ae74940d353ae1","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsLoggerImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -29,8 +29,11 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class FinagleStatsLoggerImpl implements StatsLogger {\n-    final private StatsReceiver stats;\n+    private final StatsReceiver stats;\n     // keep the references for finagle gauges. they are destroyed when the stats logger is destroyed.\n     final Map<Gauge, com.twitter.finagle.stats.Gauge> finagleGauges;\n "},{"sha":"affe2f978a04c67ccbf4ffcd5e31e26795f788b2","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FFinagleStatsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -25,10 +25,10 @@\n /**\n  * Main entry point to use Finagle stats for Bookkeeper.\n  *\n- * There's no requirement to start or stop it.\n+ * <p>There's no requirement to start or stop it.</p>\n  */\n public class FinagleStatsProvider implements StatsProvider {\n-    final private StatsReceiver stats;\n+    private final StatsReceiver stats;\n \n     public FinagleStatsProvider(final StatsReceiver stats) {\n         this.stats = stats;"},{"sha":"1fd61feb635326d279718824aeb7a9ededa97e0a","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FOpStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FOpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2FOpStatsLoggerImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -27,13 +27,13 @@\n  * A percentile stat that will delegate to Finagle stats' implementation library\n  * to compute the percentiles.\n  *\n- * Note: metrics will be exposed in form $name/success.p99 for successful events,\n- * and $name/failure.p99 for failed ones.\n+ * <p>Note: metrics will be exposed in form $name/success.p99 for successful events,\n+ * and $name/failure.p99 for failed ones.</p>\n  */\n public class OpStatsLoggerImpl implements OpStatsLogger {\n-    final private static OpStatsData NULL_OP_STATS = new OpStatsData(0, 0, 0, new long[6]);\n-    final private Stat success;\n-    final private Stat failure;\n+    private static final OpStatsData NULL_OP_STATS = new OpStatsData(0, 0, 0, new long[6]);\n+    private final Stat success;\n+    private final Stat failure;\n \n     public OpStatsLoggerImpl(final String name, final StatsReceiver stats) {\n         this.success = stats.scope(String.format(\"%s/success\", name)).stat0(name);"},{"sha":"65629d7526a9e0208c0714b0a099a58523d0fe03","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/package-info.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-finagle-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Ffinagle%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats.twitter.finagle;\n\\ No newline at end of file"},{"sha":"3924cb8fbd8dc287eedb3ef63e74256dba23f306","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -32,6 +32,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.bookkeeper.stats</groupId>"},{"sha":"bd5ca697a2ceb142518080e13f7ee3fb4c0b9b91","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FCounterImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FCounterImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FCounterImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -43,7 +43,7 @@ public void dec() {\n \n     @Override\n     public void add(long delta) {\n-        this.ostrichCounter.incr((int)delta);\n+        this.ostrichCounter.incr((int) delta);\n     }\n \n     @Override"},{"sha":"662dfb07e119b54760041b9fecc90da0995bb646","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2FOstrichProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -35,11 +35,14 @@\n \n import java.util.concurrent.TimeUnit;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class OstrichProvider implements StatsProvider {\n \n-    protected final static String STATS_EXPORT = \"statsExport\";\n-    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n-    protected final static String SHOULD_SHUTDOWN_SERVICE_TRACKER = \"shouldShutdownServiceTracker\";\n+    protected static final String STATS_EXPORT = \"statsExport\";\n+    protected static final String STATS_HTTP_PORT = \"statsHttpPort\";\n+    protected static final String SHOULD_SHUTDOWN_SERVICE_TRACKER = \"shouldShutdownServiceTracker\";\n \n     private com.twitter.ostrich.admin.AdminHttpService statsExporter = null;\n     private final CachingStatsProvider cachingStatsProvider;\n@@ -48,7 +51,7 @@ public class OstrichProvider implements StatsProvider {\n     private static List<Duration> list(Duration ... ts) {\n         List<Duration> result = List$.MODULE$.empty();\n         for (int i = ts.length; i > 0; i--) {\n-            result = new $colon$colon<>(ts[i-1], result);\n+            result = new $colon$colon<>(ts[i - 1], result);\n         }\n         return result;\n     }"},{"sha":"4dfac05af38d2ee78774a896d8ac7c3246e35948","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/package-info.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-ostrich-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fostrich%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/**\n+ * @TODO: Write JavaDOc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats.twitter.ostrich;\n\\ No newline at end of file"},{"sha":"2e0a8bc44a28c69af4078a5d40860d5f8b7e0f3e","filename":"bookkeeper-stats-providers/twitter-science-provider/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -32,6 +32,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n   <dependencies>\n     <dependency>\n       <groupId>org.apache.bookkeeper.stats</groupId>"},{"sha":"9a27e89a125d2166299fa95343e23e3496241605","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FCounterImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FCounterImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FCounterImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -22,7 +22,7 @@\n \n import java.util.concurrent.atomic.AtomicLong;\n /**\n- * This will export the value and the rate (per sec) to {@link org.apache.bookkeeper.stats.Stats}\n+ * This will export the value and the rate (per sec) to {@link org.apache.bookkeeper.stats.Stats}.\n  */\n public class CounterImpl implements Counter {\n     // The name used to export this stat"},{"sha":"56791c00e2d5c295ec868de5f8531147fad3d5c0","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FHTTPStatsExporter.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -23,7 +23,11 @@\n import com.twitter.common.net.http.handlers.VarsJsonHandler;\n import com.twitter.common.quantity.Amount;\n import com.twitter.common.quantity.Time;\n-import com.twitter.common.stats.*;\n+import com.twitter.common.stats.JvmStats;\n+import com.twitter.common.stats.Stat;\n+import com.twitter.common.stats.Stats;\n+import com.twitter.common.stats.TimeSeriesRepository;\n+import com.twitter.common.stats.TimeSeriesRepositoryImpl;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n@@ -45,7 +49,7 @@ public HTTPStatsExporter(int port) {\n \n     public void start() throws Exception {\n         // Start the sampler. Sample every 1 second and retain for 1 hour\n-        // TODO(Aniruddha): Make this configurable if needed.\n+        // TODO: Make this configurable if needed.\n         TimeSeriesRepository sampler = new TimeSeriesRepositoryImpl(Stats.STAT_REGISTRY,\n                 Amount.of(1L, Time.SECONDS), Amount.of(1L, Time.HOURS));\n         sampler.start(this.shutDownRegistry);"},{"sha":"24c84290e741e55a70b3e83dbaa5358195f5b084","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FOpStatsLoggerImpl.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -16,7 +16,8 @@\n  */\n package org.apache.bookkeeper.stats.twitter.science;\n \n-import com.twitter.common.stats.*;\n+import com.twitter.common.stats.RequestStats;\n+import com.twitter.common.stats.Stat;\n import org.apache.bookkeeper.stats.OpStatsData;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n@@ -53,7 +54,7 @@ public void registerFailedValue(long value) {\n     }\n \n     public synchronized void clear() {\n-        //TODO(Aniruddha): Figure out how to clear RequestStats. Till then this is a no-op\n+        //TODO: Figure out how to clear RequestStats. Till then this is a no-op\n     }\n \n     /**\n@@ -63,15 +64,15 @@ public synchronized OpStatsData toOpStatsData() {\n         long numFailed = this.events.getErrorCount();\n         long numSuccess = this.events.getSlidingStats().getEventCounter().get() - numFailed;\n         double avgLatencyMillis = this.events.getSlidingStats().getPerEventLatency().read() / 1000.0;\n-        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n-        long[] latenciesMillis = new long[default_percentiles.length];\n+        double[] defaultPercentiles = {10, 50, 90, 99, 99.9, 99.99};\n+        long[] latenciesMillis = new long[defaultPercentiles.length];\n         Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n         Map<Double, ? extends Stat> realPercentileLatencies =\n                 this.events.getPercentile().getPercentiles();\n-        for (int i = 0; i < default_percentiles.length; i++) {\n-            if (realPercentileLatencies.containsKey(default_percentiles[i])) {\n+        for (int i = 0; i < defaultPercentiles.length; i++) {\n+            if (realPercentileLatencies.containsKey(defaultPercentiles[i])) {\n                 @SuppressWarnings(\"unchecked\")\n-                Stat<Double> latency = realPercentileLatencies.get(default_percentiles[i]);\n+                Stat<Double> latency = realPercentileLatencies.get(defaultPercentiles[i]);\n                 latenciesMillis[i] = TimeUnit.MICROSECONDS.toMillis(latency.read().longValue());\n             }\n         }"},{"sha":"197d06fa5994cda624a2821575b21eba82914f01","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2FTwitterStatsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -23,12 +23,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class TwitterStatsProvider implements StatsProvider {\n \n     static final Logger LOG = LoggerFactory.getLogger(TwitterStatsProvider.class);\n \n-    protected final static String STATS_EXPORT = \"statsExport\";\n-    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n+    protected static final String STATS_EXPORT = \"statsExport\";\n+    protected static final String STATS_HTTP_PORT = \"statsHttpPort\";\n \n     private HTTPStatsExporter statsExporter = null;\n     private final CachingStatsProvider cachingStatsProvider;"},{"sha":"1901816d4c0023d7b9652abe2290a2dfdb52e3a1","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/package-info.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats-providers%2Ftwitter-science-provider%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Ftwitter%2Fscience%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n\\ No newline at end of file"},{"sha":"785d737e85c7e67f4f3fcf9b6580c9cd33172216","filename":"bookkeeper-stats/pom.xml","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fpom.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -31,6 +31,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.17</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.puppycrawl.tools</groupId>\n+            <artifactId>checkstyle</artifactId>\n+            <version>6.19</version>\n+          </dependency>\n+        </dependencies>\n+        <executions>\n+          <execution>\n+            <id>checkstyle</id>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <configuration>\n+              <configLocation>../checkstyle.xml</configLocation>\n+              <suppressionsLocation>../suppressions.xml</suppressionsLocation>\n+              <encoding>UTF-8</encoding>\n+              <consoleOutput>true</consoleOutput>\n+              <failsOnError>true</failsOnError>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n   <dependencies>\n     <dependency>\n       <groupId>commons-configuration</groupId>"},{"sha":"b39d3a94539dabb612afc202be37b8e5b7aa6dc3","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -19,6 +19,9 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class CachingStatsLogger implements StatsLogger {\n \n     protected final StatsLogger underlying;"},{"sha":"715fd53e9f06b940d8a752d261e84692a36e0c93","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCachingStatsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -21,6 +21,9 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class CachingStatsProvider implements StatsProvider {\n \n     protected final StatsProvider underlying;"},{"sha":"7160d7ccc13e98c1e3a0ca401d3778fd99174f2a","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCounter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCounter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FCounter.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -25,26 +25,26 @@ public interface Counter {\n     /**\n      * Clear this stat.\n      */\n-    public void clear();\n+    void clear();\n \n     /**\n      * Increment the value associated with this stat.\n      */\n-    public void inc();\n+    void inc();\n \n     /**\n      * Decrement the value associated with this stat.\n      */\n-    public void dec();\n+    void dec();\n \n     /**\n      * Add delta to the value associated with this stat.\n      * @param delta\n      */\n-    public void add(long delta);\n+    void add(long delta);\n \n     /**\n      * Get the value associated with this stat.\n      */\n-    public Long get();\n+    Long get();\n }"},{"sha":"7bcca64abf95062212afda064bc418842f73e069","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FGauge.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FGauge.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FGauge.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -23,6 +23,6 @@\n  * some numeric type.\n  */\n public interface Gauge<T extends Number> {\n-    public T getDefaultValue();\n-    public T getSample();\n+    T getDefaultValue();\n+    T getSample();\n }"},{"sha":"bf68788fc419d86813b090c50bf25664a8d59d9c","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -18,6 +18,9 @@\n \n import java.util.concurrent.TimeUnit;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class NullStatsLogger implements StatsLogger {\n \n     public static final NullStatsLogger INSTANCE = new NullStatsLogger();"},{"sha":"4d9e228fbcba77c7a8afb74b1908d034e2b88e92","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FNullStatsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -18,6 +18,9 @@\n \n import org.apache.commons.configuration.Configuration;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class NullStatsProvider implements StatsProvider {\n \n     final StatsLogger nullStatsLogger = new NullStatsLogger();"},{"sha":"683386fb975feb540af694ac17db193415141b93","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsData.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsData.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsData.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -28,7 +28,7 @@ public class OpStatsData {\n     // All latency values are in Milliseconds.\n     private final double avgLatencyMillis;\n     // 10.0 50.0, 90.0, 99.0, 99.9, 99.99 in that order.\n-    // TODO(Aniruddha): Figure out if we can use a Map\n+    // TODO: Figure out if we can use a Map\n     private final long[] percentileLatenciesMillis;\n     public OpStatsData (long numSuccessfulEvents, long numFailedEvents,\n                         double avgLatencyMillis, long[] percentileLatenciesMillis) {"},{"sha":"cef83042d7f9fbd2c860f0967d1947712967d9c5","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FOpStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -19,8 +19,7 @@\n import java.util.concurrent.TimeUnit;\n \n /**\n- * This interface handles logging of statistics related to each operation (PUBLISH,\n- * CONSUME etc.)\n+ * This interface handles logging of statistics related to each operation. (PUBLISH, CONSUME etc.)\n  */\n public interface OpStatsLogger {\n \n@@ -29,36 +28,36 @@ public interface OpStatsLogger {\n      * @param eventLatencyMillis The event latency\n      * @param unit\n      */\n-    public void registerFailedEvent(long eventLatency, TimeUnit unit);\n+    void registerFailedEvent(long eventLatencyMillis, TimeUnit unit);\n \n     /**\n      * An operation succeeded with the given eventLatency. Update\n      * stats to reflect the same\n      * @param eventLatencyMillis The event latency\n      * @param unit\n      */\n-    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit);\n+    void registerSuccessfulEvent(long eventLatencyMillis, TimeUnit unit);\n \n     /**\n-     * An operation with the given value succeeded\n+     * An operation with the given value succeeded.\n      * @param value\n      */\n-    public void registerSuccessfulValue(long value);\n+    void registerSuccessfulValue(long value);\n \n     /**\n-     * An operation with the given value failed\n+     * An operation with the given value failed.\n      */\n-    public void registerFailedValue(long value);\n+    void registerFailedValue(long value);\n \n     /**\n      * @return Returns an OpStatsData object with necessary values. We need this function\n      * to support JMX exports. This should be deprecated sometime in the near future.\n      * populated.\n      */\n-    public OpStatsData toOpStatsData();\n+    OpStatsData toOpStatsData();\n \n     /**\n      * Clear stats for this operation.\n      */\n-    public void clear();\n+    void clear();\n }"},{"sha":"2c970c019b3a0d9dca27dfff4f5eaa513f2868b2","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStats.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -27,9 +27,12 @@\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n \n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n public class Stats {\n     static final Logger LOG = LoggerFactory.getLogger(Stats.class);\n-    public final static String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n+    public static final String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n \n     static StatsProvider prov = new NullStatsProvider();\n \n@@ -40,10 +43,10 @@ public static void loadStatsProvider(Configuration conf) {\n                 Class cls = Class.forName(className);\n                 @SuppressWarnings(\"unchecked\")\n                 Constructor<? extends StatsProvider> cons =\n-                    (Constructor<? extends StatsProvider>)cls.getDeclaredConstructor();\n+                    (Constructor<? extends StatsProvider>) cls.getDeclaredConstructor();\n                 prov = cons.newInstance();\n             } catch (ClassNotFoundException cnfe) {\n-                LOG.error(\"Couldn't find configured class(\" + className +\")\", cnfe);\n+                LOG.error(\"Couldn't find configured class(\" + className + \")\", cnfe);\n             } catch (NoSuchMethodException nsme) {\n                 LOG.error(\"Couldn't find default constructor for class (\" + className + \")\", nsme);\n             } catch (InstantiationException ie) {"},{"sha":"f7506859ef3969d867349109ee588cf66c4c5a88","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsLogger.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -26,14 +26,14 @@ public interface StatsLogger {\n      *          Stats Name\n      * @return Get the logger for an OpStat described by the <i>name</i>.\n      */\n-    public OpStatsLogger getOpStatsLogger(String name);\n+    OpStatsLogger getOpStatsLogger(String name);\n \n     /**\n      * @param name\n      *          Stats Name\n      * @return Get the logger for a simple stat described by the <i>name</i>\n      */\n-    public Counter getCounter(String name);\n+    Counter getCounter(String name);\n \n     /**\n      * Register given <i>gauge</i> as name <i>name</i>.\n@@ -43,7 +43,7 @@ public interface StatsLogger {\n      * @param gauge\n      *          gauge function\n      */\n-    public <T extends Number> void registerGauge(String name, Gauge<T> gauge);\n+    <T extends Number> void registerGauge(String name, Gauge<T> gauge);\n \n     /**\n      * Unregister given <i>gauge</i> from name <i>name</i>.\n@@ -53,7 +53,7 @@ public interface StatsLogger {\n      * @param gauge\n      *          gauge function\n      */\n-    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge);\n+    <T extends Number> void unregisterGauge(String name, Gauge<T> gauge);\n \n     /**\n      * Provide the stats logger under scope <i>name</i>.\n@@ -62,7 +62,7 @@ public interface StatsLogger {\n      *          scope name.\n      * @return stats logger under scope <i>name</i>.\n      */\n-    public StatsLogger scope(String name);\n+    StatsLogger scope(String name);\n \n     /**\n      * Remove the given <i>statsLogger</i> for scope <i>name</i>.\n@@ -71,6 +71,6 @@ public interface StatsLogger {\n      * @param name name of the scope\n      * @param statsLogger the stats logger of this scope.\n      */\n-    public void removeScope(String name, StatsLogger statsLogger);\n+    void removeScope(String name, StatsLogger statsLogger);\n \n }"},{"sha":"6449e1f84d83e9ed6d5394af0d4819be2dc81e87","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2FStatsProvider.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -28,18 +28,18 @@ public interface StatsProvider {\n      * @param conf\n      *          Configuration to configure the stats provider.\n      */\n-    public void start(Configuration conf);\n+    void start(Configuration conf);\n \n     /**\n-     * Close the stats provider\n+     * Close the stats provider.\n      */\n-    public void stop();\n+    void stop();\n \n     /**\n-     * Return the stats logger to a given <i>scope</i>\n+     * Return the stats logger to a given <i>scope</i>.\n      * @param scope\n      *          Scope for the given stats\n      * @return stats logger for the given <i>scope</i>\n      */\n-    public StatsLogger getStatsLogger(String scope);\n+    StatsLogger getStatsLogger(String scope);\n }"},{"sha":"d77aedab928d8ad4fbae350a04bd713e6b1df78f","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/package-info.java","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-stats%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fstats%2Fpackage-info.java?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/**\n+ * @TODO: Write JavaDoc comment {@link https://github.com/apache/bookkepeer/issues/247}\n+ */\n+package org.apache.bookkeeper.stats;\n\\ No newline at end of file"},{"sha":"c644a401ddb510270de0188fc83d487434709c08","filename":"checkstyle.xml","status":"added","additions":448,"deletions":0,"changes":448,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/checkstyle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/checkstyle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/checkstyle.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,448 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<!DOCTYPE module PUBLIC\n+        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n+        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n+\n+<!-- This is a checkstyle configuration file. For descriptions of\n+what the following rules do, please see the checkstyle configuration\n+page at http://checkstyle.sourceforge.net/config.html -->\n+\n+<module name=\"Checker\">\n+\n+    <module name=\"FileTabCharacter\">\n+        <!-- Checks that there are no tab characters in the file. -->\n+    </module>\n+\n+    <module name=\"RegexpSingleline\">\n+        <!-- Checks that TODOs don't have stuff in parenthesis, e.g., username. -->\n+        <property name=\"format\" value=\"((//.*)|(\\*.*))TODO\\(\" />\n+        <property name=\"message\" value=\"TODO comments must not include usernames.\" />\n+        <property name=\"severity\" value=\"error\" />\n+    </module>\n+\n+    <module name=\"RegexpSingleline\">\n+        <property name=\"format\" value=\"\\s+$\"/>\n+        <property name=\"message\" value=\"Trailing whitespace\"/>\n+        <property name=\"severity\" value=\"error\"/>\n+    </module>\n+\n+    <module name=\"RegexpSingleline\">\n+        <property name=\"format\" value=\"Throwables.propagate\\(\"/>\n+        <property name=\"message\" value=\"Throwables.propagate is deprecated\"/>\n+        <property name=\"severity\" value=\"error\"/>\n+    </module>\n+\n+    <!-- Prevent *Tests.java as tools may not pick them up -->\n+    <module name=\"RegexpOnFilename\">\n+        <property name=\"fileNamePattern\" value=\".*Tests\\.java$\" />\n+    </module>\n+\n+    <!-- Allow use of comment to suppress javadocstyle -->\n+    <module name=\"SuppressionCommentFilter\">\n+        <property name=\"offCommentFormat\" value=\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/>\n+        <property name=\"onCommentFormat\" value=\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/>\n+        <property name=\"checkFormat\" value=\"$1\"/>\n+    </module>\n+    <module name=\"SuppressionFilter\">\n+        <property name=\"file\" value=\"${checkstyle.suppressions.file}\" default=\"suppressions.xml\" />\n+    </module>\n+\n+    <!-- Check that every module has a package-info.java -->\n+    <module name=\"JavadocPackage\"/>\n+\n+    <!-- All Java AST specific tests live under TreeWalker module. -->\n+    <module name=\"TreeWalker\">\n+\n+        <module name=\"TodoComment\">\n+            <!-- Checks that disallowed strings are not used in comments.  -->\n+            <property name=\"format\" value=\"(FIXME)|(XXX)|(@author)\" />\n+        </module>\n+\n+        <!--\n+\n+        IMPORT CHECKS\n+\n+        -->\n+\n+        <module name=\"RedundantImport\">\n+            <!-- Checks for redundant import statements. -->\n+            <property name=\"severity\" value=\"error\"/>\n+            <message key=\"import.redundancy\"\n+                     value=\"Redundant import {0}.\"/>\n+        </module>\n+\n+        <!-- TODO: disable checkstyle for sort imports for repacking. re-enable it after the packages are renamed.\n+             {@link https://issues.apache.org/jira/browse/DL-168}\n+        <module name=\"ImportOrder\">\n+          --><!-- Checks for out of order import statements. -->\n+        <!--\n+        <property name=\"severity\" value=\"error\"/>\n+        -->\n+        <!-- This ensures that static imports go first. -->\n+        <!--\n+        <property name=\"option\" value=\"top\"/>\n+        <property name=\"sortStaticImportsAlphabetically\" value=\"true\"/>\n+        <property name=\"tokens\" value=\"STATIC_IMPORT, IMPORT\"/>\n+        <message key=\"import.ordering\"\n+                 value=\"Import {0} appears after other imports that it should precede\"/>\n+      </module>\n+      -->\n+\n+        <module name=\"AvoidStarImport\">\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"IllegalImport\">\n+            <property name=\"illegalPkgs\" value=\"autovalue.shaded, avro.shaded, bk-shade, com.google.api.client.repackaged, com.google.appengine.repackaged, io.netty.util.internal\"/>\n+        </module>\n+\n+        <module name=\"RedundantModifier\">\n+            <!-- Checks for redundant modifiers on various symbol definitions.\n+              See: http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier\n+            -->\n+            <property name=\"tokens\" value=\"METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF\"/>\n+        </module>\n+\n+        <!--\n+            IllegalImport cannot blacklist classes, and c.g.api.client.util is used for some shaded\n+            code and some useful code. So we need to fall back to Regexp.\n+        -->\n+        <module name=\"RegexpSinglelineJava\">\n+            <property name=\"format\" value=\"com\\.google\\.api\\.client\\.util\\.(ByteStreams|Charsets|Collections2|Joiner|Lists|Maps|Objects|Preconditions|Sets|Strings|Throwables)\"/>\n+        </module>\n+\n+        <!--\n+             Require static importing from Preconditions.\n+        -->\n+        <module name=\"RegexpSinglelineJava\">\n+            <property name=\"format\" value=\"^import com.google.common.base.Preconditions;$\"/>\n+            <property name=\"message\" value=\"Static import functions from Guava Preconditions\"/>\n+        </module>\n+\n+        <module name=\"UnusedImports\">\n+            <property name=\"severity\" value=\"error\"/>\n+            <property name=\"processJavadoc\" value=\"true\"/>\n+            <message key=\"import.unused\"\n+                     value=\"Unused import: {0}.\"/>\n+        </module>\n+\n+        <!--\n+\n+        JAVADOC CHECKS\n+\n+        -->\n+\n+        <!-- Checks for Javadoc comments.                     -->\n+        <!-- See http://checkstyle.sf.net/config_javadoc.html -->\n+        <module name=\"JavadocMethod\">\n+            <property name=\"scope\" value=\"protected\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+            <property name=\"allowMissingJavadoc\" value=\"true\"/>\n+            <property name=\"allowMissingParamTags\" value=\"true\"/>\n+            <property name=\"allowMissingReturnTag\" value=\"true\"/>\n+            <property name=\"allowMissingThrowsTags\" value=\"true\"/>\n+            <property name=\"allowThrowsTagsForSubclasses\" value=\"true\"/>\n+            <property name=\"allowUndeclaredRTE\" value=\"true\"/>\n+        </module>\n+\n+        <!-- Check that paragraph tags are used correctly in Javadoc. -->\n+        <module name=\"JavadocParagraph\"/>\n+\n+        <module name=\"JavadocType\">\n+            <property name=\"scope\" value=\"protected\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+            <property name=\"allowMissingParamTags\" value=\"true\"/>\n+        </module>\n+\n+        <module name=\"JavadocStyle\">\n+            <property name=\"severity\" value=\"error\"/>\n+            <property name=\"checkHtml\" value=\"true\"/>\n+        </module>\n+\n+        <!--\n+\n+        NAMING CHECKS\n+\n+        -->\n+\n+        <!-- Item 38 - Adhere to generally accepted naming conventions -->\n+\n+        <module name=\"PackageName\">\n+            <!-- Validates identifiers for package names against the\n+              supplied expression. -->\n+            <!-- Here the default checkstyle rule restricts package name parts to\n+              seven characters, this is not in line with common practice at Google.\n+            -->\n+            <property name=\"format\" value=\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"TypeNameCheck\">\n+            <!-- Validates static, final fields against the\n+            expression \"^[A-Z][a-zA-Z0-9]*$\". -->\n+            <metadata name=\"altname\" value=\"TypeName\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"ConstantNameCheck\">\n+            <!-- Validates non-private, static, final fields against the supplied\n+            public/package final fields \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". -->\n+            <metadata name=\"altname\" value=\"ConstantName\"/>\n+            <property name=\"applyToPublic\" value=\"true\"/>\n+            <property name=\"applyToProtected\" value=\"true\"/>\n+            <property name=\"applyToPackage\" value=\"true\"/>\n+            <property name=\"applyToPrivate\" value=\"false\"/>\n+            <property name=\"format\" value=\"^([A-Z][A-Za-z0-9_]*|FLAG_.*)$\"/>\n+            <message key=\"name.invalidPattern\"\n+                     value=\"Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"StaticVariableNameCheck\">\n+            <!-- Validates static, non-final fields against the supplied\n+            expression \"^[a-z][a-zA-Z0-9]*_?$\". -->\n+            <metadata name=\"altname\" value=\"StaticVariableName\"/>\n+            <property name=\"applyToPublic\" value=\"true\"/>\n+            <property name=\"applyToProtected\" value=\"true\"/>\n+            <property name=\"applyToPackage\" value=\"true\"/>\n+            <property name=\"applyToPrivate\" value=\"true\"/>\n+            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*_?$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"MemberNameCheck\">\n+            <!-- Validates non-static members against the supplied expression. -->\n+            <metadata name=\"altname\" value=\"MemberName\"/>\n+            <property name=\"applyToPublic\" value=\"true\"/>\n+            <property name=\"applyToProtected\" value=\"true\"/>\n+            <property name=\"applyToPackage\" value=\"true\"/>\n+            <property name=\"applyToPrivate\" value=\"true\"/>\n+            <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]*$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"MethodNameCheck\">\n+            <!-- Validates identifiers for method names. -->\n+            <metadata name=\"altname\" value=\"MethodName\"/>\n+            <property name=\"format\" value=\"(^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$|Void)\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"ParameterName\">\n+            <!-- Validates identifiers for method parameters against the\n+              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"LocalFinalVariableName\">\n+            <!-- Validates identifiers for local final variables against the\n+              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"LocalVariableName\">\n+            <!-- Validates identifiers for local variables against the\n+              expression \"^[a-z][a-zA-Z0-9]*$\". -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <!-- Type parameters must be either one of the four blessed letters\n+        T, K, V, W, X or else be capital-case terminated with a T,\n+        such as MyGenericParameterT -->\n+        <module name=\"ClassTypeParameterName\">\n+            <property name=\"format\" value=\"^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*))$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"MethodTypeParameterName\">\n+            <property name=\"format\" value=\"^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"InterfaceTypeParameterName\">\n+            <property name=\"format\" value=\"^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <!--\n+\n+        LENGTH and CODING CHECKS\n+\n+        -->\n+\n+        <module name=\"LineLength\">\n+            <!-- Checks if a line is too long. -->\n+            <property name=\"max\" value=\"120\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+\n+            <!--\n+              The default ignore pattern exempts the following elements:\n+                - import statements\n+                - long URLs inside comments\n+            -->\n+\n+            <property name=\"ignorePattern\"\n+                      value=\"^(package .*;\\s*)|(import .*;\\s*)|( *\\* .*https?://.*)$\"/>\n+        </module>\n+\n+        <module name=\"LeftCurly\">\n+            <!-- Checks for placement of the left curly brace ('{'). -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"RightCurly\">\n+            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on\n+            the same line. e.g., the following example is fine:\n+            <pre>\n+              if {\n+                ...\n+              } else\n+            </pre>\n+            -->\n+            <!-- This next example is not fine:\n+            <pre>\n+              if {\n+                ...\n+              }\n+              else\n+            </pre>\n+            -->\n+            <property name=\"option\" value=\"same\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <!-- Checks for braces around if and else blocks -->\n+        <module name=\"NeedBraces\">\n+            <property name=\"severity\" value=\"error\"/>\n+            <property name=\"tokens\" value=\"LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO\"/>\n+        </module>\n+\n+        <module name=\"UpperEll\">\n+            <!-- Checks that long constants are defined with an upper ell.-->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"FallThrough\">\n+            <!-- Warn about falling through to the next case statement.  Similar to\n+            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment\n+            on the last non-blank line preceding the fallen-into case contains 'fall through' (or\n+            some other variants that we don't publicized to promote consistency).\n+            -->\n+            <property name=\"reliefPattern\"\n+                      value=\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <!-- Checks for over-complicated boolean expressions. -->\n+        <module name=\"SimplifyBooleanExpression\"/>\n+\n+        <!-- Detects empty statements (standalone \";\" semicolon). -->\n+        <module name=\"EmptyStatement\"/>\n+\n+        <!--\n+\n+        MODIFIERS CHECKS\n+\n+        -->\n+\n+        <module name=\"ModifierOrder\">\n+            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and\n+                 8.4.3.  The prescribed order is:\n+                 public, protected, private, abstract, static, final, transient, volatile,\n+                 synchronized, native, strictfp\n+              -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+\n+        <!--\n+\n+        WHITESPACE CHECKS\n+\n+        -->\n+\n+        <module name=\"WhitespaceAround\">\n+            <!-- Checks that various tokens are surrounded by whitespace.\n+                 This includes most binary operators and keywords followed\n+                 by regular or curly braces.\n+            -->\n+            <property name=\"tokens\" value=\"ASSIGN, BAND, BAND_ASSIGN, BOR,\n+        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,\n+        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,\n+        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,\n+        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,\n+        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,\n+        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"WhitespaceAfter\">\n+            <!-- Checks that commas, semicolons and typecasts are followed by\n+                 whitespace.\n+            -->\n+            <property name=\"tokens\" value=\"COMMA, SEMI, TYPECAST\"/>\n+        </module>\n+\n+        <module name=\"NoWhitespaceAfter\">\n+            <!-- Checks that there is no whitespace after various unary operators.\n+                 Linebreaks are allowed.\n+            -->\n+            <property name=\"tokens\" value=\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,\n+        UNARY_PLUS\"/>\n+            <property name=\"allowLineBreaks\" value=\"true\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"NoWhitespaceBefore\">\n+            <!-- Checks that there is no whitespace before various unary operators.\n+                 Linebreaks are allowed.\n+            -->\n+            <property name=\"tokens\" value=\"SEMI, DOT, POST_DEC, POST_INC\"/>\n+            <property name=\"allowLineBreaks\" value=\"true\"/>\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <module name=\"OperatorWrap\">\n+            <!-- Checks that operators like + and ? appear at newlines rather than\n+                 at the end of the previous line.\n+            -->\n+            <property name=\"option\" value=\"NL\"/>\n+            <property name=\"tokens\" value=\"BAND, BOR, BSR, BXOR, DIV, EQUAL,\n+        GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD,\n+        NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR \"/>\n+        </module>\n+\n+        <module name=\"OperatorWrap\">\n+            <!-- Checks that assignment operators are at the end of the line. -->\n+            <property name=\"option\" value=\"eol\"/>\n+            <property name=\"tokens\" value=\"ASSIGN\"/>\n+        </module>\n+\n+        <module name=\"ParenPad\">\n+            <!-- Checks that there is no whitespace before close parens or after\n+                 open parens.\n+            -->\n+            <property name=\"severity\" value=\"error\"/>\n+        </module>\n+\n+        <!-- Required to support SuppressWarningsComment -->\n+        <module name=\"FileContentsHolder\"/>\n+\n+    </module>\n+</module>"},{"sha":"e28dd403c0945de15cac6b4c9a8c1337b73ffdb4","filename":"suppressions.xml","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/a84b5e11114c5a6eabeaf17ba60975439593fa2d/suppressions.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/a84b5e11114c5a6eabeaf17ba60975439593fa2d/suppressions.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/suppressions.xml?ref=a84b5e11114c5a6eabeaf17ba60975439593fa2d","patch":"@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License. See accompanying LICENSE file.\n+-->\n+<!DOCTYPE suppressions PUBLIC\n+        \"-//Puppy Crawl//DTD Suppressions 1.1//EN\"\n+        \"http://www.puppycrawl.com/dtds/suppressions_1_1.dtd\">\n+\n+<suppressions>\n+    <suppress checks=\"JavadocPackage\" files=\".*[\\\\/]src[\\\\/]test[\\\\/].*\"/>\n+    <suppress checks=\"JavadocPackage\" files=\".*[\\\\/]maven-archetypes[\\\\/].*\"/>\n+    <suppress checks=\"JavadocPackage\" files=\".*[\\\\/]examples[\\\\/].*\"/>\n+\n+    <!-- suppress all checks in the generated directories -->\n+    <suppress checks=\".*\" files=\".+[\\\\/]generated[\\\\/].+\\.java\" />\n+    <suppress checks=\".*\" files=\".+[\\\\/]generated-sources[\\\\/].+\\.java\" />\n+    <suppress checks=\".*\" files=\".+[\\\\/]generated-test-sources[\\\\/].+\\.java\" />\n+</suppressions>"}]}