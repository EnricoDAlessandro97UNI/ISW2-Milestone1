{"sha":"464fa55c6debf5fdc835077135846e89729321c6","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjQ2NGZhNTVjNmRlYmY1ZmRjODM1MDc3MTM1ODQ2ZTg5NzI5MzIxYzY=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-08-03T21:20:47Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-08-03T21:20:47Z"},"message":"Issue #372: Allow to configure advertised address in bookies\n\nAdd option to configure advertised address for bookies.\n\nReasons for this are outlined in #372\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Enrico Olivelli <None>, Sijie Guo <None>\n\nThis closes #373 from merlimat/advertised-address, closes #372","tree":{"sha":"a36f1874a74e96e4401bd83915164955e6ea33cf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/a36f1874a74e96e4401bd83915164955e6ea33cf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/464fa55c6debf5fdc835077135846e89729321c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/464fa55c6debf5fdc835077135846e89729321c6","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/464fa55c6debf5fdc835077135846e89729321c6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/464fa55c6debf5fdc835077135846e89729321c6/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"398d33218eb2d9a4932fa69b9b3a29f02b2dce02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/398d33218eb2d9a4932fa69b9b3a29f02b2dce02","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/398d33218eb2d9a4932fa69b9b3a29f02b2dce02"}],"stats":{"total":157,"additions":157,"deletions":0},"files":[{"sha":"8b942a742e5f843be5703c724bafdf0432daeba8","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=464fa55c6debf5fdc835077135846e89729321c6","patch":"@@ -56,6 +56,11 @@ journalDirectory=/tmp/bk-txn\n # If not set, the bookie will listen on all interfaces.\n # listeningInterface=eth0\n \n+# Configure a specific hostname or IP address that the bookie should use to advertise itself to\n+# clients. If not set, bookie will advertised its own IP address or hostname, depending on the\n+# listeningInterface and `seHostNameAsBookieID settings.\n+# advertisedAddress=\n+\n # Whether the bookie allowed to use a loopback interface as its primary\n # interface(i.e. the interface it uses to establish its identity)?\n # By default, loopback interfaces are not allowed as the primary"},{"sha":"220aa4cb0aba82200350c56b257ad1e7dbccabfb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=464fa55c6debf5fdc835077135846e89729321c6","patch":"@@ -572,6 +572,13 @@ public static void checkEnvironmentWithStorageExpansion(ServerConfiguration conf\n      */\n     public static BookieSocketAddress getBookieAddress(ServerConfiguration conf)\n             throws UnknownHostException {\n+        // Advertised address takes precedence over the listening interface and the\n+        // useHostNameAsBookieID settings\n+        if (conf.getAdvertisedAddress() != null && conf.getAdvertisedAddress().trim().length() > 0) {\n+            String hostAddress = conf.getAdvertisedAddress().trim();\n+            return new BookieSocketAddress(hostAddress, conf.getBookiePort());\n+        }\n+\n         String iface = conf.getListeningInterface();\n         if (iface == null) {\n             iface = \"default\";\n@@ -586,6 +593,7 @@ public static BookieSocketAddress getBookieAddress(ServerConfiguration conf)\n         if (conf.getUseHostNameAsBookieID()) {\n             hostAddress = inetAddr.getAddress().getCanonicalHostName();\n         }\n+\n         BookieSocketAddress addr =\n                 new BookieSocketAddress(hostAddress, conf.getBookiePort());\n         if (addr.getSocketAddress().getAddress().isLoopbackAddress()"},{"sha":"733e0f7d3c86db21531ee74976da47391271e90f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=464fa55c6debf5fdc835077135846e89729321c6","patch":"@@ -82,6 +82,7 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n     protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n     protected final static String ALLOW_LOOPBACK = \"allowLoopback\";\n+    protected final static String ADVERTISED_ADDRESS = \"advertisedAddress\";\n     protected final static String ALLOW_EPHEMERAL_PORTS = \"allowEphemeralPorts\";\n \n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n@@ -578,6 +579,43 @@ public ServerConfiguration setAllowLoopback(boolean allow) {\n         return this;\n     }\n \n+    /**\n+     * Get the configured advertised address for the bookie.\n+     *\n+     * If present, this setting will take precedence over the\n+     * {@link #setListeningInterface(String)} and\n+     * {@link #setUseHostNameAsBookieID(boolean)}.\n+     *\n+     * @see #setAdvertisedAddress(String)\n+     * @return the configure address to be advertised\n+     */\n+    public String getAdvertisedAddress() {\n+        return this.getString(ADVERTISED_ADDRESS, null);\n+    }\n+\n+    /**\n+     * Configure the bookie to advertise a specific address.\n+     *\n+     * By default, a bookie will advertise either its own IP or hostname,\n+     * depending on the {@link getUseHostNameAsBookieID()} setting.\n+     *\n+     * When the advertised is set to a non-empty string, the bookie will\n+     * register and advertise using this address.\n+     *\n+     * If present, this setting will take precedence over the\n+     * {@link #setListeningInterface(String)} and\n+     * {@link #setUseHostNameAsBookieID(boolean)}.\n+     *\n+     * @see #getAdvertisedAddress()\n+     * @param allow\n+     *            whether to allow loopback interfaces\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setAdvertisedAddress(String advertisedAddress) {\n+        this.setProperty(ADVERTISED_ADDRESS, advertisedAddress);\n+        return this;\n+    }\n+\n     /**\n      * Is the bookie allowed to use an ephemeral port (port 0) as its server port.\n      *"},{"sha":"fe33886fb4d0399ee320e922eccfe66ab3bc799c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/AdvertisedAddressTest.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FAdvertisedAddressTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/464fa55c6debf5fdc835077135846e89729321c6/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FAdvertisedAddressTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FAdvertisedAddressTest.java?ref=464fa55c6debf5fdc835077135846e89729321c6","patch":"@@ -0,0 +1,100 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.PortManager;\n+import org.apache.bookkeeper.util.IOUtils;\n+import org.junit.Test;\n+\n+public class AdvertisedAddressTest extends BookKeeperClusterTestCase {\n+    final int bookiePort = PortManager.nextFreePort();\n+\n+    public AdvertisedAddressTest() {\n+        super(0);\n+    }\n+\n+    private String newDirectory(boolean createCurDir) throws IOException {\n+        File d = IOUtils.createTempDir(\"cookie\", \"tmpdir\");\n+        if (createCurDir) {\n+            new File(d, \"current\").mkdirs();\n+        }\n+        tmpDirs.add(d);\n+        return d.getPath();\n+    }\n+\n+    /**\n+     * Test starting bookie with clean state.\n+     */\n+    @Test(timeout = 60000)\n+    public void testSetAdvertisedAddress() throws Exception {\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+                .setZkServers(zkUtil.getZooKeeperConnectString()).setJournalDirName(newDirectory(false))\n+                .setLedgerDirNames(new String[] { newDirectory(false) }).setBookiePort(bookiePort);\n+\n+        conf.setAdvertisedAddress(\"10.0.0.1\");\n+        assertEquals(\"10.0.0.1\", conf.getAdvertisedAddress());\n+\n+        BookieSocketAddress bkAddress = new BookieSocketAddress(\"10.0.0.1\", bookiePort);\n+        assertEquals(bkAddress, Bookie.getBookieAddress(conf));\n+\n+        Bookie b = new Bookie(conf);\n+        b.start();\n+\n+        BookKeeperAdmin bka = new BookKeeperAdmin(baseClientConf);\n+        Collection<BookieSocketAddress> bookies = bka.getAvailableBookies();\n+\n+        assertEquals(1, bookies.size());\n+        BookieSocketAddress address = bookies.iterator().next();\n+        assertEquals(bkAddress, address);\n+\n+        b.shutdown();\n+        bka.close();\n+    }\n+\n+    /**\n+     * When advertised address is specified, it should override the use\n+     */\n+    @Test(timeout = 60000)\n+    public void testBothUseHostnameAndAdvertisedAddress() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration().setBookiePort(bookiePort);\n+\n+        conf.setAdvertisedAddress(\"10.0.0.1\");\n+        conf.setUseHostNameAsBookieID(true);\n+\n+        assertEquals(\"10.0.0.1\", conf.getAdvertisedAddress());\n+\n+        BookieSocketAddress bkAddress = new BookieSocketAddress(\"10.0.0.1\", bookiePort);\n+        assertEquals(bkAddress, Bookie.getBookieAddress(conf));\n+    }\n+\n+}"},{"sha":"161d491830c934006eca027c8eb9373fcb96e537","filename":"site/_data/config/bk_server.yaml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/464fa55c6debf5fdc835077135846e89729321c6/site%2F_data%2Fconfig%2Fbk_server.yaml","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/464fa55c6debf5fdc835077135846e89729321c6/site%2F_data%2Fconfig%2Fbk_server.yaml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/site%2F_data%2Fconfig%2Fbk_server.yaml?ref=464fa55c6debf5fdc835077135846e89729321c6","patch":"@@ -26,6 +26,12 @@ groups:\n   - param: listeningInterface\n     description: The network interface that the bookie should listen on. If not set, the bookie will listen on all interfaces.\n     default: eth0\n+  - param: advertisedAddress\n+    description: |\n+      Configure a specific hostname or IP address that the bookie should use to advertise itself to\n+      clients. If not set, bookie will advertised its own IP address or hostname, depending on the\n+      `listeningInterface` and `useHostNameAsBookieID` settings.\n+    default: eth0\n   - param: allowLoopback\n     description: |\n       Whether the bookie is allowed to use a loopback interface as its primary"}]}