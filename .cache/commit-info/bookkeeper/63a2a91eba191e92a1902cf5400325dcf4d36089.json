{"sha":"63a2a91eba191e92a1902cf5400325dcf4d36089","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjYzYTJhOTFlYmExOTFlOTJhMTkwMmNmNTQwMDMyNWRjZjRkMzYwODk=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@yahoo-inc.com","date":"2016-02-09T07:30:29Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-09T07:30:29Z"},"message":"BOOKKEEPER-888: Dispatch individual callbacks from journal in different threads\n\nCurrently the journal is sending all the responses from a single thread, after the entries in a batch are synced. Since a thread pool has been configured, it is better to spread the send-response tasks to all the available threads.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #8 from merlimat/bk-888","tree":{"sha":"14d13a71bbf55398aa392d5fadcc130226910cdb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/14d13a71bbf55398aa392d5fadcc130226910cdb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/63a2a91eba191e92a1902cf5400325dcf4d36089","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/63a2a91eba191e92a1902cf5400325dcf4d36089","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/63a2a91eba191e92a1902cf5400325dcf4d36089","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/63a2a91eba191e92a1902cf5400325dcf4d36089/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"61390322ea591bcfe3186e289c27f331c86941ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/61390322ea591bcfe3186e289c27f331c86941ad","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/61390322ea591bcfe3186e289c27f331c86941ad"}],"stats":{"total":21,"additions":8,"deletions":13},"files":[{"sha":"08394c1cc1c6f8a816c4ef3949df77995352187f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/63a2a91eba191e92a1902cf5400325dcf4d36089/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/63a2a91eba191e92a1902cf5400325dcf4d36089/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FJournal.java?ref=63a2a91eba191e92a1902cf5400325dcf4d36089","patch":"@@ -268,7 +268,7 @@ public static interface JournalScanner {\n     /**\n      * Journal Entry to Record\n      */\n-    private static class QueueEntry {\n+    private class QueueEntry implements Runnable {\n         ByteBuffer entry;\n         long ledgerId;\n         long entryId;\n@@ -286,15 +286,17 @@ private static class QueueEntry {\n             this.enqueueTime = enqueueTime;\n         }\n \n-        public void callback() {\n+        @Override\n+        public void run() {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Acknowledge Ledger: {}, Entry: {}\", ledgerId, entryId);\n             }\n+            journalAddEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(enqueueTime), TimeUnit.NANOSECONDS);\n             cb.writeComplete(0, ledgerId, entryId, null, ctx);\n         }\n     }\n \n-    private class ForceWriteRequest implements Runnable {\n+    private class ForceWriteRequest {\n         private final JournalChannel logFile;\n         private final LinkedList<QueueEntry> forceWriteWaiters;\n         private boolean shouldClose;\n@@ -330,7 +332,9 @@ public int process(boolean shouldForceWrite) throws IOException {\n                 lastLogMark.setCurLogMark(this.logId, this.lastFlushedPosition);\n \n                 // Notify the waiters that the force write succeeded\n-                cbThreadPool.submit(this);\n+                for (QueueEntry e : this.forceWriteWaiters) {\n+                    cbThreadPool.submit(e);\n+                }\n \n                 return this.forceWriteWaiters.size();\n             }\n@@ -339,15 +343,6 @@ public int process(boolean shouldForceWrite) throws IOException {\n             }\n         }\n \n-        @Override\n-        public void run() {\n-            for (QueueEntry e : this.forceWriteWaiters) {\n-                journalAddEntryStats.registerSuccessfulEvent(MathUtils.elapsedNanos(e.enqueueTime),\n-                        TimeUnit.NANOSECONDS);\n-                e.callback();    // Process cbs inline\n-            }\n-        }\n-\n         public void closeFileIfNecessary() {\n             // Close if shouldClose is set\n             if (shouldClose) {"}]}