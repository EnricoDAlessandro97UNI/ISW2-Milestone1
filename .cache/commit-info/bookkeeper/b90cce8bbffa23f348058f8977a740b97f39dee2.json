{"sha":"b90cce8bbffa23f348058f8977a740b97f39dee2","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmI5MGNjZThiYmZmYTIzZjM0ODA1OGY4OTc3YTc0MGI5N2YzOWRlZTI=","commit":{"author":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-11-22T00:17:51Z"},"committer":{"name":"Sijie Guo","email":"sijieg@twitter.com","date":"2016-12-28T00:49:29Z"},"message":"DL-110: Write control record if necessary when roll a log segment","tree":{"sha":"64d0474f9d173a91c10a563ba46067101cbaa83c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/64d0474f9d173a91c10a563ba46067101cbaa83c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/b90cce8bbffa23f348058f8977a740b97f39dee2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b90cce8bbffa23f348058f8977a740b97f39dee2","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/b90cce8bbffa23f348058f8977a740b97f39dee2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/b90cce8bbffa23f348058f8977a740b97f39dee2/comments","author":null,"committer":null,"parents":[{"sha":"35587d3d70cf60b84f425db13718b4537336fd80","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/35587d3d70cf60b84f425db13718b4537336fd80","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/35587d3d70cf60b84f425db13718b4537336fd80"}],"stats":{"total":19,"additions":15,"deletions":4},"files":[{"sha":"a6b5fd2d26e6dd4c3519bee3ce7fba4325b84f3e","filename":"src/main/java/com/twitter/distributedlog/BKAsyncLogWriter.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/b90cce8bbffa23f348058f8977a740b97f39dee2/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/b90cce8bbffa23f348058f8977a740b97f39dee2/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fjava%2Fcom%2Ftwitter%2Fdistributedlog%2FBKAsyncLogWriter.java?ref=b90cce8bbffa23f348058f8977a740b97f39dee2","patch":"@@ -121,7 +121,7 @@ class LastPendingLogRecord extends PendingLogRecord {\n         public void onSuccess(DLSN value) {\n             super.onSuccess(value);\n             // roll log segment and issue all pending requests.\n-            rollLogSegmentAndIssuePendingRequests(record);\n+            rollLogSegmentAndIssuePendingRequests(record.getTransactionId());\n         }\n \n         @Override\n@@ -308,7 +308,7 @@ private synchronized Future<DLSN> asyncWrite(final LogRecord record,\n                 result = lastLogRecordInCurrentSegment.promise;\n             } else { // no log segment yet. roll the log segment and issue pending requests.\n                 result = queueRequest(record, flush);\n-                rollLogSegmentAndIssuePendingRequests(record);\n+                rollLogSegmentAndIssuePendingRequests(record.getTransactionId());\n             }\n         } else {\n             result = w.asyncWrite(record, flush);\n@@ -353,8 +353,8 @@ private void appendCancelledFutures(List<Future<DLSN>> futures, int numToAdd) {\n         }\n     }\n \n-    private void rollLogSegmentAndIssuePendingRequests(LogRecord record) {\n-        getLogSegmentWriter(record.getTransactionId(), true, true)\n+    private void rollLogSegmentAndIssuePendingRequests(final long firstTxId) {\n+        getLogSegmentWriter(firstTxId, true, true)\n                 .addEventListener(new FutureEventListener<BKLogSegmentWriter>() {\n             @Override\n             public void onSuccess(BKLogSegmentWriter writer) {\n@@ -365,6 +365,17 @@ public void onSuccess(BKLogSegmentWriter writer) {\n                             writer.asyncWrite(pendingLogRecord.record, pendingLogRecord.flush)\n                                     .addEventListener(pendingLogRecord);\n                         }\n+                        // if there are no records in the pending queue, let's write a control record\n+                        // so that when a new log segment is rolled, a control record will be added and\n+                        // the corresponding bookies would be able to create its ledger.\n+                        if (pendingRequests.isEmpty()) {\n+                            LogRecord controlRecord = new LogRecord(firstTxId,\n+                                    DistributedLogConstants.CONTROL_RECORD_CONTENT);\n+                            controlRecord.setControl();\n+                            PendingLogRecord controlReq = new PendingLogRecord(controlRecord, false);\n+                            writer.asyncWrite(controlReq.record, controlReq.flush)\n+                                    .addEventListener(controlReq);\n+                        }\n                         if (null != rollingFuture) {\n                             FutureUtils.setValue(rollingFuture, writer);\n                         }"}]}