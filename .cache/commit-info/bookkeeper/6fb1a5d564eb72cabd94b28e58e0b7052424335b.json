{"sha":"6fb1a5d564eb72cabd94b28e58e0b7052424335b","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjZmYjFhNWQ1NjRlYjcyY2FiZDk0YjI4ZTU4ZTBiNzA1MjQyNDMzNWI=","commit":{"author":{"name":"xieliang","email":"xieliang007@gmail.com","date":"2016-12-20T06:28:24Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-12-20T06:28:24Z"},"message":"DL-28: using /* */ style comment to avoid scrooge windows platform issue\n\nAuthor: xieliang <xieliang007@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>, Leigh Stewart <lstewart@apache.org>\n\nCloses #73 from xieliang/DL-28","tree":{"sha":"ac7435806f64ba77994e9924ccaf5faefde51035","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/ac7435806f64ba77994e9924ccaf5faefde51035"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/6fb1a5d564eb72cabd94b28e58e0b7052424335b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6fb1a5d564eb72cabd94b28e58e0b7052424335b","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/6fb1a5d564eb72cabd94b28e58e0b7052424335b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/6fb1a5d564eb72cabd94b28e58e0b7052424335b/comments","author":{"login":"xieliang","id":1712953,"node_id":"MDQ6VXNlcjE3MTI5NTM=","avatar_url":"https://avatars.githubusercontent.com/u/1712953?v=4","gravatar_id":"","url":"https://api.github.com/users/xieliang","html_url":"https://github.com/xieliang","followers_url":"https://api.github.com/users/xieliang/followers","following_url":"https://api.github.com/users/xieliang/following{/other_user}","gists_url":"https://api.github.com/users/xieliang/gists{/gist_id}","starred_url":"https://api.github.com/users/xieliang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xieliang/subscriptions","organizations_url":"https://api.github.com/users/xieliang/orgs","repos_url":"https://api.github.com/users/xieliang/repos","events_url":"https://api.github.com/users/xieliang/events{/privacy}","received_events_url":"https://api.github.com/users/xieliang/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a0025998c65df7794ae2a1b20ad1d58c03bf410","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/3a0025998c65df7794ae2a1b20ad1d58c03bf410","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/3a0025998c65df7794ae2a1b20ad1d58c03bf410"}],"stats":{"total":111,"additions":57,"deletions":54},"files":[{"sha":"ba0de742677de37a63f59fa59b51db6c066f0eab","filename":"src/main/thrift/service.thrift","status":"modified","additions":57,"deletions":54,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/6fb1a5d564eb72cabd94b28e58e0b7052424335b/src%2Fmain%2Fthrift%2Fservice.thrift","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/6fb1a5d564eb72cabd94b28e58e0b7052424335b/src%2Fmain%2Fthrift%2Fservice.thrift","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/src%2Fmain%2Fthrift%2Fservice.thrift?ref=6fb1a5d564eb72cabd94b28e58e0b7052424335b","patch":"@@ -17,144 +17,147 @@\n  */\n namespace java com.twitter.distributedlog.thrift.service\n \n-// Response stats codes\n+/* Response stats codes */\n enum StatusCode {\n-    // 2xx: action requested by the client was received, understood, accepted and processed successfully.\n+    /* 2xx: action requested by the client was received, understood, accepted and processed successfully. */\n \n-    // standard response for successful requests.\n+    /* standard response for successful requests. */\n     SUCCESS = 200,\n \n-    // 3xx: client must take additional action to complete the request.\n-    // client closed.\n+    /* 3xx: client must take additional action to complete the request. */\n+\n+    /* client closed. */\n     CLIENT_CLOSED = 301,\n-    // found the stream in a different server, a redirection is required by client.\n+    /* found the stream in a different server, a redirection is required by client. */\n     FOUND = 302,\n \n-    // 4xx: client seems to have erred.\n+    /* 4xx: client seems to have erred. */\n \n-    // request is denied for some reason\n+    /* request is denied for some reason */\n     REQUEST_DENIED = 403,\n-    // request record too large\n+    /* request record too large */\n     TOO_LARGE_RECORD = 413,\n \n-    // 5xx: server failed to fulfill an apparently valid request.\n+    /* 5xx: server failed to fulfill an apparently valid request. */\n \n-    // Generic error message, given when no more specific message is suitable.\n+    /* Generic error message, given when no more specific message is suitable. */\n     INTERNAL_SERVER_ERROR = 500,\n-    // Not implemented\n+    /* Not implemented */\n     NOT_IMPLEMENTED = 501,\n-    // Already Closed Exception\n+    /* Already Closed Exception */\n     ALREADY_CLOSED = 502,\n-    // Service is currently unavailable (because it is overloaded or down for maintenance).\n+    /* Service is currently unavailable (because it is overloaded or down for maintenance). */\n     SERVICE_UNAVAILABLE = 503,\n-    // Locking exception\n+    /* Locking exception */\n     LOCKING_EXCEPTION = 504,\n-    // ZooKeeper Errors\n+    /* ZooKeeper Errors */\n     ZOOKEEPER_ERROR = 505,\n-    // Metadata exception\n+    /* Metadata exception */\n     METADATA_EXCEPTION = 506,\n-    // BK Transmit Error\n+    /* BK Transmit Error */\n     BK_TRANSMIT_ERROR = 507,\n-    // Flush timeout\n+    /* Flush timeout */\n     FLUSH_TIMEOUT = 508,\n-    // Log empty\n+    /* Log empty */\n     LOG_EMPTY = 509,\n-    // Log not found\n+    /* Log not found */\n     LOG_NOT_FOUND = 510,\n-    // Truncated Transactions\n+    /* Truncated Transactions */\n     TRUNCATED_TRANSACTION = 511,\n-    // End of Stream\n+    /* End of Stream */\n     END_OF_STREAM = 512,\n-    // Transaction Id Out of Order\n+    /* Transaction Id Out of Order */\n     TRANSACTION_OUT_OF_ORDER = 513,\n-    // Write exception\n+    /* Write exception */\n     WRITE_EXCEPTION = 514,\n-    // Stream Unavailable\n+    /* Stream Unavailable */\n     STREAM_UNAVAILABLE = 515,\n-    // Write cancelled exception\n+    /* Write cancelled exception */\n     WRITE_CANCELLED_EXCEPTION = 516,\n-    // over-capacity/backpressure\n+    /* over-capacity/backpressure */\n     OVER_CAPACITY = 517,\n-    // stream exists but is not ready (recovering etc.).\n-    // the difference between NOT_READY and UNAVAILABLE is that UNAVAILABLE\n-    // indicates the stream is no longer owned by the proxy and we should\n-    // redirect. NOT_READY indicates the stream exist at the proxy but isn't\n-    // ready for writes.\n+    /** stream exists but is not ready (recovering etc.).\n+        the difference between NOT_READY and UNAVAILABLE is that UNAVAILABLE\n+        indicates the stream is no longer owned by the proxy and we should\n+        redirect. NOT_READY indicates the stream exist at the proxy but isn't\n+        eady for writes. */\n     STREAM_NOT_READY = 518,\n-    // Region Unavailable\n+    /* Region Unavailable */\n     REGION_UNAVAILABLE = 519,\n-    // Invalid Enveloped Entry\n+    /* Invalid Enveloped Entry */\n     INVALID_ENVELOPED_ENTRY = 520,\n-    // Unsupported metadata version\n+    /* Unsupported metadata version */\n     UNSUPPORTED_METADATA_VERSION = 521,\n-    // Log Already Exists\n+    /* Log Already Exists */\n     LOG_EXISTS = 522,\n-    // Checksum failed on the request\n+    /* Checksum failed on the request */\n     CHECKSUM_FAILED = 523,\n-    // Overcapacity: too many streams\n+    /* Overcapacity: too many streams */\n     TOO_MANY_STREAMS = 524,\n \n-    // 6xx: unexpected\n+    /* 6xx: unexpected */\n+\n     UNEXPECTED = 600,\n     INTERRUPTED = 601,\n     INVALID_STREAM_NAME = 602,\n     ILLEGAL_STATE = 603,\n \n-    // 10xx: reader exceptions\n+    /* 10xx: reader exceptions */\n+\n     RETRYABLE_READ = 1000,\n     LOG_READ_ERROR = 1001,\n-    // Read cancelled exception\n+    /* Read cancelled exception */\n     READ_CANCELLED_EXCEPTION = 1002,\n }\n \n-// Response Header\n+/* Response Header */\n struct ResponseHeader {\n     1: required StatusCode code;\n     2: optional string errMsg;\n     3: optional string location;\n }\n \n-// Write Response\n+/* Write Response */\n struct WriteResponse {\n     1: required ResponseHeader header;\n     2: optional string dlsn;\n }\n \n-// Bulk write response\n+/* Bulk write response */\n struct BulkWriteResponse {\n     1: required ResponseHeader header;\n     2: optional list<WriteResponse> writeResponses;\n }\n \n-// Write Context\n+/* Write Context */\n struct WriteContext {\n     1: optional set<string> triedHosts;\n     2: optional i64 crc32;\n     3: optional bool isRecordSet;\n }\n \n-// HeartBeat Options\n+/* HeartBeat Options */\n struct HeartbeatOptions {\n     1: optional bool sendHeartBeatToReader;\n }\n \n-// Server Status\n+/* Server Status */\n enum ServerStatus {\n-    // service is writing and accepting new streams\n+    /* service is writing and accepting new streams */\n     WRITE_AND_ACCEPT    = 100,\n-    // service is only writing to old streams, not accepting new streams\n+    /* service is only writing to old streams, not accepting new streams */\n     WRITE_ONLY          = 200,\n-    // service is shutting down, will not write\n+    /* service is shutting down, will not write */\n     DOWN                = 300,\n }\n \n-// Server Info\n+/* Server Info */\n struct ServerInfo {\n     1: optional map<string, string> ownerships;\n     2: optional ServerStatus serverStatus;\n }\n \n-// Client Info\n+/* Client Info */\n struct ClientInfo {\n     1: optional string streamNameRegex;\n     2: optional bool getOwnerships;\n@@ -184,6 +187,6 @@ service DistributedLogService {\n \n     WriteResponse delete(string stream, WriteContext ctx);\n \n-    // Admin Methods\n+    /* Admin Methods */\n     void setAcceptNewStream(bool enabled);\n }"}]}