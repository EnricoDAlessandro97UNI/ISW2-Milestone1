{"sha":"5662416d8ecef535fb089baa0a10e0dae08ae805","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjU2NjI0MTZkOGVjZWY1MzVmYjA4OWJhYTBhMTBlMGRhZTA4YWU4MDU=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-09-15T08:38:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-09-15T08:38:26Z"},"message":"BOOKKEEPER-438: Move ledger id generation out of LedgerManager (Tong Yu via sijie)","tree":{"sha":"a2dc66d99f2be13da46eec95086f024ef7b9b767","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/a2dc66d99f2be13da46eec95086f024ef7b9b767"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/5662416d8ecef535fb089baa0a10e0dae08ae805","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5662416d8ecef535fb089baa0a10e0dae08ae805","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5662416d8ecef535fb089baa0a10e0dae08ae805","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5662416d8ecef535fb089baa0a10e0dae08ae805/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8"}],"stats":{"total":855,"additions":556,"deletions":299},"files":[{"sha":"36d437218d4a94e6fbfb1cd81ae5c9116c3f55ee","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -100,6 +100,8 @@ Trunk (unreleased changes)\n         BOOKKEEPER-760: Don't close PCBC proactively if bookies\n                         disappeared from zookeeper znodes (sijie via fpj)\n \n+        BOOKKEEPER-438: Move ledger id generation out of LedgerManager (Tong Yu via sijie)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-695: Some entry logs are not removed from the bookie storage (Matteo Merli via sijie)"},{"sha":"b43506d82e8b646ba92521332f21dded57ec4648","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBKException.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -124,6 +124,7 @@ public interface Code {\n         int MetadataVersionException = -17;\n         int MetaStoreException = -18;\n         int ClientClosedException = -19;\n+        int LedgerExistException = -20;\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n@@ -170,6 +171,8 @@ public static String getMessage(int code) {\n             return \"Error while using ZooKeeper\";\n         case Code.MetaStoreException:\n             return \"Error while using MetaStore\";\n+        case Code.LedgerExistException:\n+            return \"Ledger existed\";\n         case Code.LedgerRecoveryException:\n             return \"Error while recovering ledger\";\n         case Code.LedgerClosedException:\n@@ -301,6 +304,12 @@ public MetaStoreException() {\n         }\n     }\n \n+    public static class BKLedgerExistException extends BKException {\n+        public BKLedgerExistException() {\n+            super(Code.LedgerExistException);\n+        }\n+    }\n+\n     public static class BKLedgerRecoveryException extends BKException {\n         public BKLedgerRecoveryException() {\n             super(Code.LedgerRecoveryException);"},{"sha":"6fe1371b0a6739cbbb41371b3cdc7e0e604d017d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FBookKeeper.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -34,6 +34,7 @@\n import org.apache.bookkeeper.client.AsyncCallback.IsClosedCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.meta.CleanupLedgerManager;\n+import org.apache.bookkeeper.meta.LedgerIdGenerator;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n@@ -48,7 +49,6 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n-import org.jboss.netty.channel.ChannelFactory;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import org.slf4j.Logger;\n@@ -100,6 +100,7 @@ public class BookKeeper {\n     // Ledger manager responsible for how to store ledger meta data\n     final LedgerManagerFactory ledgerManagerFactory;\n     final LedgerManager ledgerManager;\n+    final LedgerIdGenerator ledgerIdGenerator;\n \n     // Ensemble Placement Policy\n     final EnsemblePlacementPolicy placementPolicy;\n@@ -305,6 +306,7 @@ private BookKeeper(ClientConfiguration conf,\n         // initialize ledger manager\n         this.ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, this.zk);\n         this.ledgerManager = new CleanupLedgerManager(ledgerManagerFactory.newLedgerManager());\n+        this.ledgerIdGenerator = ledgerManagerFactory.newLedgerIdGenerator();\n     }\n \n     private EnsemblePlacementPolicy initializeEnsemblePlacementPolicy(ClientConfiguration conf)\n@@ -333,6 +335,10 @@ LedgerManager getLedgerManager() {\n         return ledgerManager;\n     }\n \n+    LedgerIdGenerator getLedgerIdGenerator() {\n+        return ledgerIdGenerator;\n+    }\n+\n     /**\n      * There are 2 digest types that can be used for verification. The CRC32 is\n      * cheap to compute but does not protect against byzantine bookies (i.e., a\n@@ -809,6 +815,7 @@ public void close() throws InterruptedException, BKException {\n             // Close ledger manage so all pending metadata requests would be failed\n             // which will reject any incoming metadata requests.\n             ledgerManager.close();\n+            ledgerIdGenerator.close();\n             ledgerManagerFactory.uninitialize();\n         } catch (IOException ie) {\n             LOG.error(\"Failed to close ledger manager : \", ie);"},{"sha":"7c181b5e77cdd3383a164a343bcae141d2e4bd1d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":33,"deletions":8,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FLedgerCreateOp.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -28,6 +28,7 @@\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.meta.LedgerIdGenerator;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n@@ -39,13 +40,14 @@\n  * Encapsulates asynchronous ledger create operation\n  *\n  */\n-class LedgerCreateOp implements GenericCallback<Long> {\n+class LedgerCreateOp implements GenericCallback<Void> {\n \n     static final Logger LOG = LoggerFactory.getLogger(LedgerCreateOp.class);\n \n     CreateCallback cb;\n     LedgerMetadata metadata;\n     LedgerHandle lh;\n+    Long ledgerId;\n     Object ctx;\n     byte[] passwd;\n     BookKeeper bk;\n@@ -60,12 +62,14 @@ class LedgerCreateOp implements GenericCallback<Long> {\n      *       BookKeeper object\n      * @param ensembleSize\n      *       ensemble size\n-     * @param quorumSize\n-     *       quorum size\n+     * @param writeQuorumSize\n+     *       write quorum size\n+     * @param ackQuorumSize\n+     *       ack quorum size\n      * @param digestType\n      *       digest type, either MAC or CRC32\n      * @param passwd\n-     *       passowrd\n+     *       password\n      * @param cb\n      *       callback implementation\n      * @param ctx\n@@ -111,16 +115,37 @@ public void initiate() {\n          */\n         metadata.addEnsemble(0L, ensemble);\n \n-        // create a ledger with metadata\n-        bk.getLedgerManager().createLedger(metadata, this);\n+        createLedger();\n+    }\n+\n+    void createLedger() {\n+        // generate a ledger id and then create the ledger with metadata\n+        final LedgerIdGenerator ledgerIdGenerator = bk.getLedgerIdGenerator();\n+        ledgerIdGenerator.generateLedgerId(new GenericCallback<Long>() {\n+            @Override\n+            public void operationComplete(int rc, Long ledgerId) {\n+                if (BKException.Code.OK != rc) {\n+                    createComplete(rc, null);\n+                    return;\n+                }\n+\n+                LedgerCreateOp.this.ledgerId = ledgerId;\n+                // create a ledger with metadata\n+                bk.getLedgerManager().createLedgerMetadata(ledgerId, metadata, LedgerCreateOp.this);\n+            }\n+        });\n     }\n \n     /**\n      * Callback when created ledger.\n      */\n     @Override\n-    public void operationComplete(int rc, Long ledgerId) {\n-        if (BKException.Code.OK != rc) {\n+    public void operationComplete(int rc, Void result) {\n+        if (BKException.Code.LedgerExistException == rc) {\n+            // retry to generate a new ledger id\n+            createLedger();\n+            return;\n+        } else if (BKException.Code.OK != rc) {\n             createComplete(rc, null);\n             return;\n         }"},{"sha":"2e66806e3639b69518252d94d649da43aebd3028","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FAbstractConfiguration.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -178,7 +178,7 @@ public String getZkLedgersRootPath() {\n     public String getZkAvailableBookiesPath() {\n         return getZkLedgersRootPath() + \"/\" + AVAILABLE_NODE;\n     }\n-    \n+\n     /**\n      * Set the max entries to keep in fragment for re-replication. If fragment\n      * has more entries than this count, then the original fragment will be"},{"sha":"663650671a218e54a0e809361497b807d0091ef9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FAbstractZkLedgerManager.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -42,11 +42,14 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n+import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.AsyncCallback.VoidCallback;\n+import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n@@ -213,6 +216,31 @@ public void process(WatchedEvent event) {\n         }\n     }\n \n+    @Override\n+    public void createLedgerMetadata(final long ledgerId, final LedgerMetadata metadata,\n+            final GenericCallback<Void> ledgerCb) {\n+        String ledgerPath = getLedgerPath(ledgerId);\n+        StringCallback scb = new StringCallback() {\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, String name) {\n+                if (rc == Code.OK.intValue()) {\n+                    // update version\n+                    metadata.setVersion(new ZkVersion(0));\n+                    ledgerCb.operationComplete(BKException.Code.OK, null);\n+                } else if (rc == Code.NODEEXISTS.intValue()) {\n+                    LOG.warn(\"Failed to create ledger metadata for {} which already exist\", ledgerId);\n+                    ledgerCb.operationComplete(BKException.Code.LedgerExistException, null);\n+                } else {\n+                    LOG.error(\"Could not create node for ledger {}\", ledgerId,\n+                            KeeperException.create(Code.get(rc), path));\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n+                }\n+            }\n+        };\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(), Ids.OPEN_ACL_UNSAFE,\n+                CreateMode.PERSISTENT, scb, null);\n+    }\n+\n     /**\n      * Removes ledger metadata from ZooKeeper if version matches.\n      *"},{"sha":"961e0d163b34e0fec8ed50f8c83b8e2d1e082dfc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FCleanupLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FCleanupLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FCleanupLedgerManager.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -98,15 +98,15 @@ private GenericCallback removeCallback(GenericCallback callback) {\n     }\n \n     @Override\n-    public void createLedger(LedgerMetadata metadata,\n-                             GenericCallback<Long> cb) {\n+    public void createLedgerMetadata(long lid, LedgerMetadata metadata,\n+                                     GenericCallback<Void> cb) {\n         closeLock.readLock().lock();\n         try {\n             if (closed) {\n                 cb.operationComplete(BKException.Code.ClientClosedException, null);\n                 return;\n             }\n-            underlying.createLedger(metadata, new CleanupGenericCallback<Long>(cb));\n+            underlying.createLedgerMetadata(lid, metadata, new CleanupGenericCallback<Void>(cb));\n         } finally {\n             closeLock.readLock().unlock();\n         }"},{"sha":"6bd32160693af5b42a4016acf9de5dd00a50cb6f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManager.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -22,19 +22,11 @@\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.AsyncCallback.StringCallback;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -60,8 +52,6 @@ class FlatLedgerManager extends AbstractZkLedgerManager {\n      *          Configuration object\n      * @param zk\n      *          ZooKeeper Client Handle\n-     * @param ledgerRootPath\n-     *          ZooKeeper Path to store ledger metadata\n      * @throws IOException when version is not compatible\n      */\n     public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n@@ -70,33 +60,6 @@ public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         ledgerPrefix = ledgerRootPath + \"/\" + StringUtils.LEDGER_NODE_PREFIX;\n     }\n \n-    @Override\n-    public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> cb) {\n-        StringCallback scb = new StringCallback() {\n-            @Override\n-            public void processResult(int rc, String path, Object ctx,\n-                    String name) {\n-                if (Code.OK.intValue() != rc) {\n-                    LOG.error(\"Could not create node for ledger\",\n-                              KeeperException.create(KeeperException.Code.get(rc), path));\n-                    cb.operationComplete(BKException.Code.ZKException, null);\n-                } else {\n-                    // update znode status\n-                    metadata.setVersion(new ZkVersion(0));\n-                    try {\n-                        long ledgerId = getLedgerId(name);\n-                        cb.operationComplete(BKException.Code.OK, ledgerId);\n-                    } catch (IOException ie) {\n-                        LOG.error(\"Could not extract ledger-id from path:\" + name, ie);\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n-                    }\n-                }\n-            }\n-        };\n-        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n-            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL, scb, null);\n-    }\n-\n     @Override\n     public String getLedgerPath(long ledgerId) {\n         StringBuilder sb = new StringBuilder();"},{"sha":"46f8b9b0d092c27cd57fa6fe3781255e36eefd3f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FFlatLedgerManagerFactory.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -63,6 +63,11 @@ public void uninitialize() throws IOException {\n         // we don't need to close it here\n     }\n \n+    @Override\n+    public LedgerIdGenerator newLedgerIdGenerator() {\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), null);\n+    }\n+\n     @Override\n     public LedgerManager newLedgerManager() {\n         return new FlatLedgerManager(conf, zk);"},{"sha":"bc62af418578bf81070014d74d505e84d4aa9073","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":2,"deletions":93,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManager.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -23,23 +23,16 @@\n import java.util.List;\n import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.AsyncCallback.StringCallback;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -48,10 +41,7 @@\n  * Hierarchical Ledger Manager which manages ledger meta in zookeeper using 2-level hierarchical znodes.\n  *\n  * <p>\n- * Hierarchical Ledger Manager first obtain a global unique id from zookeeper using a EPHEMERAL_SEQUENTIAL\n- * znode <i>(ledgersRootPath)/ledgers/idgen/ID-</i>.\n- * Since zookeeper sequential counter has a format of %10d -- that is 10 digits with 0 (zero) padding, i.e.\n- * \"&lt;path&gt;0000000001\", HierarchicalLedgerManager splits the generated id into 3 parts (2-4-4):\n+ * HierarchicalLedgerManager splits the generated id into 3 parts (2-4-4):\n  * <pre>&lt;level1 (2 digits)&gt;&lt;level2 (4 digits)&gt;&lt;level3 (4 digits)&gt;</pre>\n  * These 3 parts are used to form the actual ledger node path used to store ledger metadata:\n  * <pre>(ledgersRootPath)/level1/level2/L(level3)</pre>\n@@ -64,13 +54,9 @@ class HierarchicalLedgerManager extends AbstractZkLedgerManager {\n     static final Logger LOG = LoggerFactory.getLogger(HierarchicalLedgerManager.class);\n \n     static final String IDGEN_ZNODE = \"idgen\";\n-    static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n     private static final String MAX_ID_SUFFIX = \"9999\";\n     private static final String MIN_ID_SUFFIX = \"0000\";\n \n-    // Path to generate global id\n-    private final String idGenPath;\n-\n     /**\n      * Constructor\n      *\n@@ -81,83 +67,6 @@ class HierarchicalLedgerManager extends AbstractZkLedgerManager {\n      */\n     public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n-\n-        this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-    }\n-\n-    @Override\n-    public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-        ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n-            CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, final String idPathName) {\n-                if (rc != KeeperException.Code.OK.intValue()) {\n-                    LOG.error(\"Could not generate new ledger id\",\n-                              KeeperException.create(KeeperException.Code.get(rc), path));\n-                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n-                    return;\n-                }\n-                /*\n-                 * Extract ledger id from gen path\n-                 */\n-                long ledgerId;\n-                try {\n-                    ledgerId = getLedgerIdFromGenPath(idPathName);\n-                } catch (IOException e) {\n-                    LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n-                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n-                    return;\n-                }\n-                String ledgerPath = getLedgerPath(ledgerId);\n-                final long lid = ledgerId;\n-                StringCallback scb = new StringCallback() {\n-                    @Override\n-                    public void processResult(int rc, String path,\n-                            Object ctx, String name) {\n-                        if (rc != KeeperException.Code.OK.intValue()) {\n-                            LOG.error(\"Could not create node for ledger\",\n-                                      KeeperException.create(KeeperException.Code.get(rc), path));\n-                            ledgerCb.operationComplete(BKException.Code.ZKException, null);\n-                        } else {\n-                            // update version\n-                            metadata.setVersion(new ZkVersion(0));\n-                            ledgerCb.operationComplete(BKException.Code.OK, lid);\n-                        }\n-                    }\n-                };\n-                ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n-                // delete the znode for id generation\n-                scheduler.submit(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        zk.delete(idPathName, -1, new AsyncCallback.VoidCallback() {\n-                            @Override\n-                            public void processResult(int rc, String path, Object ctx) {\n-                                if (rc != KeeperException.Code.OK.intValue()) {\n-                                    LOG.warn(\"Exception during deleting znode for id generation : \",\n-                                             KeeperException.create(KeeperException.Code.get(rc), path));\n-                                } else {\n-                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n-                                }\n-                            }\n-                        }, null);\n-                    }\n-                });\n-            }\n-        }, null);\n-    }\n-\n-    // get ledger id from generation path\n-    private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n-        long ledgerId;\n-        try {\n-            String parts[] = nodeName.split(IDGENERATION_PREFIX);\n-            ledgerId = Long.parseLong(parts[parts.length - 1]);\n-        } catch (NumberFormatException e) {\n-            throw new IOException(e);\n-        }\n-        return ledgerId;\n     }\n \n     @Override\n@@ -304,7 +213,7 @@ public AsyncListProcessor(ScheduledExecutorService scheduler) {\n          *          Callback to process element of list when success\n          * @param finalCb\n          *          Final callback to be called after all elements in the list are processed\n-         * @param contxt\n+         * @param context\n          *          Context of final callback\n          * @param successRc\n          *          RC passed to final callback on success"},{"sha":"a165b0d7d73730438de6fff03f2cdafbda74b3c2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FHierarchicalLedgerManagerFactory.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -63,6 +63,11 @@ public void uninitialize() throws IOException {\n         // we don't need to close it here\n     }\n \n+    @Override\n+    public LedgerIdGenerator newLedgerIdGenerator() {\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), HierarchicalLedgerManager.IDGEN_ZNODE);\n+    }\n+\n     @Override\n     public LedgerManager newLedgerManager() {\n         return new HierarchicalLedgerManager(conf, zk);\n@@ -81,13 +86,13 @@ public void format(AbstractConfiguration conf, ZooKeeper zk)\n         String ledgersRootPath = conf.getZkLedgersRootPath();\n         List<String> children = zk.getChildren(ledgersRootPath, false);\n         for (String child : children) {\n-            if (!HierarchicalLedgerManager.IDGEN_ZNODE.equals(child)\n-                    && ledgerManager.isSpecialZnode(child)) {\n+            if (ledgerManager.isSpecialZnode(child)) {\n                 continue;\n             }\n             ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);\n         }\n         // Delete and recreate the LAYOUT information.\n         super.format(conf, zk);\n     }\n+\n }"},{"sha":"24d1f01ed836f52df4a0e3f6e08b213f7c6a377e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerIdGenerator.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerIdGenerator.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -0,0 +1,41 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.io.Closeable;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+/**\n+ * The interface for global unique ledger ID generation\n+ */\n+public interface LedgerIdGenerator extends Closeable {\n+\n+    /**\n+     * generate a global unique ledger id\n+     *\n+     * @param cb\n+     *            Callback when a new ledger id is generated, return code:<ul>\n+     *            <li>{@link BKException.Code.OK} if success</li>\n+     *            <li>{@link BKException.Code.ZKException} when can't generate new ledger id</li>\n+     *            </ul>\n+     */\n+    public void generateLedgerId(GenericCallback<Long> cb);\n+\n+}"},{"sha":"fe3c2cf4d44ece27ecaf579dbea613babc44c406","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":27,"deletions":16,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManager.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -42,16 +42,21 @@\n public interface LedgerManager extends Closeable {\n \n     /**\n-     * Create a new ledger with provided metadata\n+     * Create a new ledger with provided ledger id and metadata\n      *\n+     * @param ledgerId\n+     *            Ledger id provided to be created\n      * @param metadata\n-     *        Metadata provided when creating a new ledger\n+     *            Metadata provided when creating the new ledger\n      * @param cb\n-     *        Callback when creating a new ledger.\n-     *        {@link BKException.Code.ZKException} return code when can't generate\n-     *        or extract new ledger id\n+     *            Callback when creating a new ledger. Return code:<ul>\n+     *            <li>{@link BKException.Code.OK} if success</li>\n+     *            <li>{@link BKException.Code.LedgerExistException} if given ledger id exist</li>\n+     *            <li>{@link BKException.Code.ZKException}/{@link BKException.Code.MetaStoreException}\n+     *                 for other issue</li>\n+     *            </ul>\n      */\n-    public void createLedger(LedgerMetadata metadata, GenericCallback<Long> cb);\n+    public void createLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n \n     /**\n      * Remove a specified ledger metadata by ledgerId and version.\n@@ -61,10 +66,12 @@ public interface LedgerManager extends Closeable {\n      * @param version\n      *          Ledger metadata version\n      * @param cb\n-     *          Callback when removed ledger metadata.\n-     *          {@link BKException.Code.MetadataVersionException} return code when version doesn't match,\n-     *          {@link BKException.Code.NoSuchLedgerExistsException} return code when ledger doesn't exist,\n-     *          {@link BKException.Code.ZKException} return code when other issues happen.\n+     *          Callback when remove ledger metadata. Return code:<ul>\n+     *          <li>{@link BKException.Code.OK} if success</li>\n+     *          <li>{@link BKException.Code.MetadataVersionException} if version doesn't match</li>\n+     *          <li>{@link BKException.Code.NoSuchLedgerExistsException} if ledger not exist</li>\n+     *          <li>{@link BKException.Code.ZKException} for other issue</li>\n+     *          </ul>\n      */\n     public void removeLedgerMetadata(long ledgerId, Version version, GenericCallback<Void> vb);\n \n@@ -74,9 +81,11 @@ public interface LedgerManager extends Closeable {\n      * @param ledgerId\n      *          Ledger Id\n      * @param readCb\n-     *          Callback when read ledger metadata.\n-     *          {@link BKException.Code.NoSuchLedgerExistsException} return code when ledger doesn't exist,\n-     *          {@link BKException.Code.ZKException} return code when other issues happen.\n+     *          Callback when read ledger metadata. Return code:<ul>\n+     *          <li>{@link BKException.Code.OK} if success</li>\n+     *          <li>{@link BKException.Code.NoSuchLedgerExistsException} if ledger not exist</li>\n+     *          <li>{@link BKException.Code.ZKException} for other issue</li>\n+     *          </ul>\n      */\n     public void readLedgerMetadata(long ledgerId, GenericCallback<LedgerMetadata> readCb);\n \n@@ -88,9 +97,11 @@ public interface LedgerManager extends Closeable {\n      * @param metadata\n      *          Ledger Metadata to write\n      * @param cb\n-     *          Callback when finished writing ledger metadata.\n-     *          {@link BKException.Code.MetadataVersionException} return code when version doesn't match,\n-     *          {@link BKException.Code.ZKException} return code when other issues happen.\n+     *          Callback when finished writing ledger metadata. Return code:<ul>\n+     *          <li>{@link BKException.Code.OK} if success</li>\n+     *          <li>{@link BKException.Code.MetadataVersionException} if version in metadata doesn't match</li>\n+     *          <li>{@link BKException.Code.ZKException} for other issue</li>\n+     *          </ul>\n      */\n     public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n "},{"sha":"3a53623a251017834256d785317051f70a14e237","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerFactory.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -67,6 +67,14 @@ public abstract LedgerManagerFactory initialize(final AbstractConfiguration conf\n      */\n     public abstract void uninitialize() throws IOException;\n \n+    /**\n+     * Return the ledger id generator, which is used for global unique ledger id\n+     * generation.\n+     *\n+     * @return ledger id generator.\n+     */\n+    public abstract LedgerIdGenerator newLedgerIdGenerator();\n+\n     /**\n      * return ledger manager for client-side to manage ledger metadata.\n      *"},{"sha":"9f7ef386da3d9067e7e3580ab4429bde069e86b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":49,"deletions":81,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FMSLedgerManagerFactory.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -36,7 +36,6 @@\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.meta.AbstractZkLedgerManager.ReadLedgerMetadataTask;\n import org.apache.bookkeeper.metastore.MSException;\n import org.apache.bookkeeper.metastore.MSWatchedEvent;\n import org.apache.bookkeeper.metastore.MetaStore;\n@@ -46,23 +45,20 @@\n import org.apache.bookkeeper.metastore.MetastoreException;\n import org.apache.bookkeeper.metastore.MetastoreFactory;\n import org.apache.bookkeeper.metastore.MetastoreScannableTable;\n+import org.apache.bookkeeper.metastore.MetastoreTable;\n import org.apache.bookkeeper.metastore.MetastoreTableItem;\n+import org.apache.bookkeeper.metastore.MetastoreUtils;\n import org.apache.bookkeeper.metastore.MetastoreWatcher;\n-import org.apache.bookkeeper.metastore.MSWatchedEvent.EventType;\n import org.apache.bookkeeper.metastore.Value;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.AsyncCallback.StringCallback;\n-import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -180,6 +176,11 @@ public synchronized T getResult() {\n         }\n     }\n \n+    @Override\n+    public LedgerIdGenerator newLedgerIdGenerator() {\n+        return new ZkLedgerIdGenerator(zk, conf.getZkLedgersRootPath(), MsLedgerManager.IDGEN_ZNODE);\n+    }\n+\n     static class MsLedgerManager implements LedgerManager, MetastoreWatcher {\n         final ZooKeeper zk;\n         final AbstractConfiguration conf;\n@@ -189,15 +190,11 @@ static class MsLedgerManager implements LedgerManager, MetastoreWatcher {\n         final int maxEntriesPerScan;\n \n         static final String IDGEN_ZNODE = \"ms-idgen\";\n-        static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n \n         // ledger metadata listeners\n         protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n                 new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n \n-        // Path to generate global id\n-        private final String idGenPath;\n-\n         // we use this to prevent long stack chains from building up in\n         // callbacks\n         ScheduledExecutorService scheduler;\n@@ -266,7 +263,6 @@ public void run() {\n             // configuration settings\n             maxEntriesPerScan = conf.getMetastoreMaxEntriesPerScan();\n \n-            this.idGenPath = conf.getZkLedgersRootPath() + IDGENERATION_PREFIX;\n             ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n                     .setNameFormat(\"MSLedgerManagerScheduler-%d\");\n             this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n@@ -346,76 +342,28 @@ public void close() {\n         }\n \n         @Override\n-        public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-            ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n-                    CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n-                        @Override\n-                        public void processResult(int rc, String path, Object ctx, final String idPathName) {\n-                            if (rc != KeeperException.Code.OK.intValue()) {\n-                                LOG.error(\"Could not generate new ledger id\",\n-                                        KeeperException.create(KeeperException.Code.get(rc), path));\n-                                ledgerCb.operationComplete(BKException.Code.ZKException, null);\n-                                return;\n-                            }\n-                            /*\n-                             * Extract ledger id from gen path\n-                             */\n-                            long ledgerId;\n-                            try {\n-                                ledgerId = getLedgerIdFromGenPath(idPathName);\n-                            } catch (IOException e) {\n-                                LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n-                                ledgerCb.operationComplete(BKException.Code.ZKException, null);\n-                                return;\n-                            }\n-\n-                            final long lid = ledgerId;\n-                            MetastoreCallback<Version> msCallback = new MetastoreCallback<Version>() {\n-                                @Override\n-                                public void complete(int rc, Version version, Object ctx) {\n-                                    if (MSException.Code.BadVersion.getCode() == rc) {\n-                                        ledgerCb.operationComplete(BKException.Code.MetadataVersionException, null);\n-                                        return;\n-                                    }\n-                                    if (MSException.Code.OK.getCode() != rc) {\n-                                        ledgerCb.operationComplete(BKException.Code.MetaStoreException, null);\n-                                        return;\n-                                    }\n-                                    LOG.debug(\"Create ledger {} with version {} successfuly.\", new Object[] { lid,\n-                                            version });\n-                                    // update version\n-                                    metadata.setVersion(version);\n-                                    ledgerCb.operationComplete(BKException.Code.OK, lid);\n-                                }\n-                            };\n-\n-                            ledgerTable.put(ledgerId2Key(lid), new Value().setField(META_FIELD, metadata.serialize()),\n-                                    Version.NEW, msCallback, null);\n-                            zk.delete(idPathName, -1, new AsyncCallback.VoidCallback() {\n-                                @Override\n-                                public void processResult(int rc, String path, Object ctx) {\n-                                    if (rc != KeeperException.Code.OK.intValue()) {\n-                                        LOG.warn(\"Exception during deleting znode for id generation : \",\n-                                                KeeperException.create(KeeperException.Code.get(rc), path));\n-                                    } else {\n-                                        LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n-                                    }\n-                                }\n-                            }, null);\n-                        }\n-                    }, null);\n-        }\n+        public void createLedgerMetadata(final long lid, final LedgerMetadata metadata,\n+                                         final GenericCallback<Void> ledgerCb) {\n+            MetastoreCallback<Version> msCallback = new MetastoreCallback<Version>() {\n+                @Override\n+                public void complete(int rc, Version version, Object ctx) {\n+                    if (MSException.Code.BadVersion.getCode() == rc) {\n+                        ledgerCb.operationComplete(BKException.Code.MetadataVersionException, null);\n+                        return;\n+                    }\n+                    if (MSException.Code.OK.getCode() != rc) {\n+                        ledgerCb.operationComplete(BKException.Code.MetaStoreException, null);\n+                        return;\n+                    }\n+                    LOG.debug(\"Create ledger {} with version {} successfully.\", lid, version);\n+                    // update version\n+                    metadata.setVersion(version);\n+                    ledgerCb.operationComplete(BKException.Code.OK, null);\n+                }\n+            };\n \n-        // get ledger id from generation path\n-        private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n-            long ledgerId;\n-            try {\n-                String parts[] = nodeName.split(IDGENERATION_PREFIX);\n-                ledgerId = Long.parseLong(parts[parts.length - 1]);\n-            } catch (NumberFormatException e) {\n-                throw new IOException(e);\n-            }\n-            return ledgerId;\n+            ledgerTable.put(ledgerId2Key(lid), new Value().setField(META_FIELD, metadata.serialize()),\n+                    Version.NEW, msCallback, null);\n         }\n \n         @Override\n@@ -688,7 +636,7 @@ public AsyncSetProcessor(ScheduledExecutorService scheduler) {\n          * @param finalCb\n          *            Final callback to be called after all elements in the list\n          *            are processed\n-         * @param contxt\n+         * @param context\n          *            Context of final callback\n          * @param successRc\n          *            RC passed to final callback on success\n@@ -730,4 +678,24 @@ public final void run() {\n         }\n     }\n \n+    @Override\n+    public void format(AbstractConfiguration conf, ZooKeeper zk) throws InterruptedException,\n+            KeeperException, IOException {\n+        MetastoreTable ledgerTable;\n+        try {\n+            ledgerTable = metastore.createScannableTable(TABLE_NAME);\n+        } catch (MetastoreException mse) {\n+            throw new IOException(\"Failed to instantiate table \" + TABLE_NAME + \" in metastore \"\n+                    + metastore.getName());\n+        }\n+        try {\n+            MetastoreUtils.cleanTable(ledgerTable, conf.getMetastoreMaxEntriesPerScan());\n+        } catch (MSException mse) {\n+            throw new IOException(\"Exception when cleanning up table \" + TABLE_NAME, mse);\n+        }\n+        LOG.info(\"Finished cleaning up table {}.\", TABLE_NAME);\n+        // Delete and recreate the LAYOUT information.\n+        super.format(conf, zk);\n+    }\n+\n }"},{"sha":"a6c5b7bacb453dc989d6dc7dc8a3ca1d69c7053e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FZkLedgerIdGenerator.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -0,0 +1,120 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.AsyncCallback.StringCallback;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * ZooKeeper based ledger id generator class, which using EPHEMERAL_SEQUENTIAL\n+ * with <i>(ledgerIdGenPath)/ID-</i> prefix to generate ledger id. Note\n+ * zookeeper sequential counter has a format of %10d -- that is 10 digits with 0\n+ * (zero) padding, i.e. \"&lt;path&gt;0000000001\", so ledger id space is\n+ * fundamentally limited to 9 billion.\n+ */\n+public class ZkLedgerIdGenerator implements LedgerIdGenerator {\n+    static final Logger LOG = LoggerFactory.getLogger(ZkLedgerIdGenerator.class);\n+\n+    final ZooKeeper zk;\n+    final String ledgerIdGenPath;\n+    final String ledgerPrefix;\n+\n+    public ZkLedgerIdGenerator(ZooKeeper zk,\n+                               String ledgersPath,\n+                               String idGenZnodeName) {\n+        this.zk = zk;\n+        if (StringUtils.isBlank(idGenZnodeName)) {\n+            this.ledgerIdGenPath = ledgersPath;\n+        } else {\n+            this.ledgerIdGenPath = ledgersPath + \"/\" + idGenZnodeName;\n+        }\n+        this.ledgerPrefix = this.ledgerIdGenPath + \"/ID-\";\n+    }\n+\n+    @Override\n+    public void generateLedgerId(final GenericCallback<Long> cb) {\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                CreateMode.EPHEMERAL_SEQUENTIAL,\n+                new StringCallback() {\n+                    @Override\n+                    public void processResult(int rc, String path, Object ctx, final String idPathName) {\n+                        if (rc != KeeperException.Code.OK.intValue()) {\n+                            LOG.error(\"Could not generate new ledger id\",\n+                                    KeeperException.create(KeeperException.Code.get(rc), path));\n+                            cb.operationComplete(BKException.Code.ZKException, null);\n+                            return;\n+                        }\n+\n+                        /*\n+                         * Extract ledger id from generated path\n+                         */\n+                        long ledgerId;\n+                        try {\n+                            ledgerId = getLedgerIdFromGenPath(idPathName);\n+                            cb.operationComplete(BKException.Code.OK, ledgerId);\n+                        } catch (IOException e) {\n+                            LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n+                            cb.operationComplete(BKException.Code.ZKException, null);\n+                            return;\n+                        }\n+\n+                        // delete the znode for id generation\n+                        zk.delete(idPathName, -1, new AsyncCallback.VoidCallback() {\n+                            @Override\n+                            public void processResult(int rc, String path, Object ctx) {\n+                                if (rc != KeeperException.Code.OK.intValue()) {\n+                                    LOG.warn(\"Exception during deleting znode for id generation : \",\n+                                            KeeperException.create(KeeperException.Code.get(rc), path));\n+                                } else {\n+                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n+                                }\n+                            }\n+                        }, null);\n+                    }\n+                }, null);\n+    }\n+\n+    // get ledger id from generation path\n+    private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n+        long ledgerId;\n+        try {\n+            String parts[] = nodeName.split(ledgerPrefix);\n+            ledgerId = Long.parseLong(parts[parts.length - 1]);\n+        } catch (NumberFormatException e) {\n+            throw new IOException(e);\n+        }\n+        return ledgerId;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+    }\n+\n+}"},{"sha":"16bd4daa2345d8221cffe19045e88e465d0b84b7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -465,7 +465,7 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n     private LedgerManager getLedgerManager(final Set<Long> ledgers) {\n         LedgerManager manager = new LedgerManager() {\n                 @Override\n-                public void createLedger(LedgerMetadata metadata, GenericCallback<Long> cb) {\n+                public void createLedgerMetadata(long lid, LedgerMetadata metadata, GenericCallback<Void> cb) {\n                     unsupported();\n                 }\n                 @Override"},{"sha":"df743396973138134571d490790aa82a23cf9b0b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"modified","additions":51,"deletions":40,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestWatchEnsembleChange.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fclient%2FTestWatchEnsembleChange.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -23,11 +23,13 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.meta.FlatLedgerManagerFactory;\n import org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerIdGenerator;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.MSLedgerManagerFactory;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.ReflectionUtils;\n@@ -104,45 +106,54 @@ public void testWatchEnsembleChange() throws Exception {\n \n     @Test(timeout = 60000)\n     public void testWatchMetadataRemoval() throws Exception {\n-       LedgerManagerFactory factory = ReflectionUtils.newInstance(lmFactoryCls);\n-       factory.initialize(baseConf, super.zkc, factory.getCurrentVersion());\n-       LedgerManager manager = factory.newLedgerManager();\n-       final ByteBuffer bbLedgerId = ByteBuffer.allocate(8);\n-       final CountDownLatch createLatch = new CountDownLatch(1);\n-       final CountDownLatch removeLatch = new CountDownLatch(1);\n-\n-       manager.createLedger( new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()),\n-                new BookkeeperInternalCallbacks.GenericCallback<Long>(){\n-\n-           @Override\n-           public void operationComplete(int rc, Long result) {\n-               bbLedgerId.putLong(result);\n-               bbLedgerId.flip();\n-               createLatch.countDown();\n-           }\n-       });\n-       assertTrue(createLatch.await(2000, TimeUnit.MILLISECONDS));\n-       final long createdLid = bbLedgerId.getLong();\n-\n-       manager.registerLedgerMetadataListener( createdLid,\n-               new LedgerMetadataListener() {\n-\n-           @Override\n-           public void onChanged( long ledgerId, LedgerMetadata metadata ) {\n-               assertEquals(ledgerId, createdLid);\n-               assertEquals(metadata, null);\n-               removeLatch.countDown();\n-           }\n-       });\n-\n-       manager.removeLedgerMetadata( createdLid, Version.ANY,\n-               new BookkeeperInternalCallbacks.GenericCallback<Void>() {\n-\n-           @Override\n-           public void operationComplete(int rc, Void result) {\n-               assertEquals(rc, BKException.Code.OK);\n-           }\n-       });\n-       assertTrue(removeLatch.await(2000, TimeUnit.MILLISECONDS));\n+        LedgerManagerFactory factory = ReflectionUtils.newInstance(lmFactoryCls);\n+        factory.initialize(baseConf, super.zkc, factory.getCurrentVersion());\n+        final LedgerManager manager = factory.newLedgerManager();\n+        LedgerIdGenerator idGenerator = factory.newLedgerIdGenerator();\n+\n+        final ByteBuffer bbLedgerId = ByteBuffer.allocate(8);\n+        final CountDownLatch createLatch = new CountDownLatch(1);\n+        final CountDownLatch removeLatch = new CountDownLatch(1);\n+\n+        idGenerator.generateLedgerId(new GenericCallback<Long>() {\n+            @Override\n+            public void operationComplete(int rc, final Long lid) {\n+                manager.createLedgerMetadata(lid, new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()),\n+                         new BookkeeperInternalCallbacks.GenericCallback<Void>(){\n+\n+                    @Override\n+                    public void operationComplete(int rc, Void result) {\n+                        bbLedgerId.putLong(lid);\n+                        bbLedgerId.flip();\n+                        createLatch.countDown();\n+                    }\n+                });\n+\n+            }\n+        });\n+\n+        assertTrue(createLatch.await(2000, TimeUnit.MILLISECONDS));\n+        final long createdLid = bbLedgerId.getLong();\n+\n+        manager.registerLedgerMetadataListener( createdLid,\n+                new LedgerMetadataListener() {\n+\n+            @Override\n+            public void onChanged( long ledgerId, LedgerMetadata metadata ) {\n+                assertEquals(ledgerId, createdLid);\n+                assertEquals(metadata, null);\n+                removeLatch.countDown();\n+            }\n+        });\n+\n+        manager.removeLedgerMetadata( createdLid, Version.ANY,\n+                new BookkeeperInternalCallbacks.GenericCallback<Void>() {\n+\n+            @Override\n+            public void operationComplete(int rc, Void result) {\n+                assertEquals(rc, BKException.Code.OK);\n+            }\n+        });\n+        assertTrue(removeLatch.await(2000, TimeUnit.MILLISECONDS));\n     }\n }"},{"sha":"de352b5fae28957f067e768bbf1055dba90e0d1f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":28,"deletions":12,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FGcLedgersTest.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -21,6 +21,7 @@\n \n package org.apache.bookkeeper.meta;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -63,23 +64,38 @@ public GcLedgersTest(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n     /**\n      * Create ledgers\n      */\n-    private void createLedgers(int numLedgers, final Set<Long> createdLedgers) {\n+    private void createLedgers(int numLedgers, final Set<Long> createdLedgers) throws IOException {\n         final AtomicInteger expected = new AtomicInteger(numLedgers);\n         for (int i=0; i<numLedgers; i++) {\n-            getLedgerManager().createLedger(new LedgerMetadata(1, 1, 1, DigestType.MAC, \"\".getBytes()),\n-                new GenericCallback<Long>() {\n+            getLedgerIdGenerator().generateLedgerId(new GenericCallback<Long>() {\n                 @Override\n-                public void operationComplete(int rc, Long ledgerId) {\n-                    if (rc == BKException.Code.OK) {\n-                        activeLedgers.put(ledgerId, true);\n-                        createdLedgers.add(ledgerId);\n-                    }\n-                    synchronized (expected) {\n-                        int num = expected.decrementAndGet();\n-                        if (num == 0) {\n-                            expected.notify();\n+                public void operationComplete(int rc, final Long ledgerId) {\n+                    if (BKException.Code.OK != rc) {\n+                        synchronized (expected) {\n+                            int num = expected.decrementAndGet();\n+                            if (num == 0) {\n+                                expected.notify();\n+                            }\n                         }\n+                        return;\n                     }\n+\n+                    getLedgerManager().createLedgerMetadata(ledgerId,\n+                            new LedgerMetadata(1, 1, 1, DigestType.MAC, \"\".getBytes()), new GenericCallback<Void>() {\n+                                @Override\n+                                public void operationComplete(int rc, Void result) {\n+                                    if (rc == BKException.Code.OK) {\n+                                        activeLedgers.put(ledgerId, true);\n+                                        createdLedgers.add(ledgerId);\n+                                    }\n+                                    synchronized (expected) {\n+                                        int num = expected.decrementAndGet();\n+                                        if (num == 0) {\n+                                            expected.notify();\n+                                        }\n+                                    }\n+                                }\n+                            });\n                 }\n             });\n         }"},{"sha":"dae61bcc3803fb8cd8f5dc22ec4965d64844809c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FLedgerManagerTestCase.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -21,20 +21,19 @@\n \n package org.apache.bookkeeper.meta;\n \n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n \n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.SnapshotMap;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Test case to run over serveral ledger managers\n@@ -45,6 +44,7 @@ public abstract class LedgerManagerTestCase extends BookKeeperClusterTestCase {\n \n     LedgerManagerFactory ledgerManagerFactory;\n     LedgerManager ledgerManager = null;\n+    LedgerIdGenerator ledgerIdGenerator = null;\n     SnapshotMap<Long, Boolean> activeLedgers = null;\n \n     public LedgerManagerTestCase(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n@@ -60,6 +60,13 @@ public LedgerManager getLedgerManager() {\n         return ledgerManager;\n     }\n \n+    public LedgerIdGenerator getLedgerIdGenerator() throws IOException {\n+        if (null == ledgerIdGenerator) {\n+            ledgerIdGenerator = ledgerManagerFactory.newLedgerIdGenerator();\n+        }\n+        return ledgerIdGenerator;\n+    }\n+\n     @Parameters\n     public static Collection<Object[]> configs() {\n         return Arrays.asList(new Object[][] {"},{"sha":"708fbc78180a72bb2caa7f958d33be1418bf79d8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkLedgerIdGenerator.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/5662416d8ecef535fb089baa0a10e0dae08ae805/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fmeta%2FTestZkLedgerIdGenerator.java?ref=5662416d8ecef535fb089baa0a10e0dae08ae805","patch":"@@ -0,0 +1,122 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestZkLedgerIdGenerator extends TestCase {\n+    private static final Logger LOG = LoggerFactory.getLogger(TestZkLedgerIdGenerator.class);\n+\n+    ZooKeeperUtil zkutil;\n+    ZooKeeper zk;\n+\n+    LedgerIdGenerator ledgerIdGenerator;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        LOG.info(\"Setting up test\");\n+        super.setUp();\n+\n+        zkutil = new ZooKeeperUtil();\n+        zkutil.startServer();\n+        zk = zkutil.getZooKeeperClient();\n+\n+        ledgerIdGenerator = new ZkLedgerIdGenerator(zk,\n+                \"/test-zk-ledger-id-generator\", \"idgen\");\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        LOG.info(\"Tearing down test\");\n+        ledgerIdGenerator.close();\n+        zk.close();\n+        zkutil.killServer();\n+\n+        super.tearDown();\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testGenerateLedgerId() throws Exception {\n+        // Create *nThread* threads each generate *nLedgers* ledger id,\n+        // and then check there is no identical ledger id.\n+        final int nThread = 2;\n+        final int nLedgers = 2000;\n+        final CountDownLatch countDownLatch = new CountDownLatch(nThread*nLedgers);\n+\n+        final AtomicInteger errCount = new AtomicInteger(0);\n+        final ConcurrentLinkedQueue<Long> ledgerIds = new ConcurrentLinkedQueue<Long>();\n+        final GenericCallback<Long> cb = new GenericCallback<Long>() {\n+            @Override\n+            public void operationComplete(int rc, Long result) {\n+                if (Code.OK.intValue() == rc) {\n+                    ledgerIds.add(result);\n+                } else {\n+                    errCount.incrementAndGet();\n+                }\n+                countDownLatch.countDown();\n+            }\n+        };\n+\n+        long start = System.currentTimeMillis();\n+\n+        for (int i = 0; i < nThread; i++) {\n+            new Thread() {\n+                @Override\n+                public void run() {\n+                    for (int j = 0; j < nLedgers; j++) {\n+                        ledgerIdGenerator.generateLedgerId(cb);\n+                    }\n+                }\n+            }.start();\n+        }\n+\n+        assertTrue(\"Wait ledger id generation threads to stop timeout : \",\n+                countDownLatch.await(30, TimeUnit.SECONDS));\n+        LOG.info(\"Number of generated ledger id: {}, time used: {}\", ledgerIds.size(),\n+                System.currentTimeMillis() - start);\n+        assertEquals(\"Error occur during ledger id generation : \", 0, errCount.get());\n+\n+        Set<Long> ledgers = new HashSet<Long>();\n+        while (!ledgerIds.isEmpty()) {\n+            Long ledger = ledgerIds.poll();\n+            assertNotNull(\"Generated ledger id is null : \", ledger);\n+            assertFalse(\"Ledger id [\" + ledger + \"] conflict : \", ledgers.contains(ledger));\n+            ledgers.add(ledger);\n+        }\n+    }\n+\n+}"}]}