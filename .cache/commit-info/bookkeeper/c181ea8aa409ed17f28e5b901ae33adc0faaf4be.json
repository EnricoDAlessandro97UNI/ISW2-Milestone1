{"sha":"c181ea8aa409ed17f28e5b901ae33adc0faaf4be","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmMxODFlYThhYTQwOWVkMTdmMjhlNWI5MDFhZTMzYWRjMGZhYWY0YmU=","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-18T06:38:24Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-18T06:38:24Z"},"message":"BOOKKEEPER-844: Add more metrics about latency and bytes characteristics on bookie operations (Tong Yu via sijie)","tree":{"sha":"24ed75eb0af09f2dbed588904cc773c8af8e5be5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/24ed75eb0af09f2dbed588904cc773c8af8e5be5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/c181ea8aa409ed17f28e5b901ae33adc0faaf4be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c181ea8aa409ed17f28e5b901ae33adc0faaf4be","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/c181ea8aa409ed17f28e5b901ae33adc0faaf4be","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/c181ea8aa409ed17f28e5b901ae33adc0faaf4be/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"7177f2a03c52ca0457ea7d1a9c946f194ffb1c5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/7177f2a03c52ca0457ea7d1a9c946f194ffb1c5f","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/7177f2a03c52ca0457ea7d1a9c946f194ffb1c5f"}],"stats":{"total":79,"additions":74,"deletions":5},"files":[{"sha":"9036182260290920f767e2334d37d2ac4add3913","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c181ea8aa409ed17f28e5b901ae33adc0faaf4be/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c181ea8aa409ed17f28e5b901ae33adc0faaf4be/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookKeeperServerStats.java?ref=c181ea8aa409ed17f28e5b901ae33adc0faaf4be","patch":"@@ -36,6 +36,13 @@ public interface BookKeeperServerStats {\n     public final static String READ_ENTRY_FENCE_WAIT = \"READ_ENTRY_FENCE_WAIT\";\n     public final static String READ_ENTRY_FENCE_READ = \"READ_ENTRY_FENCE_READ\";\n \n+    // Bookie Operations\n+    public final static String BOOKIE_ADD_ENTRY_BYTES = \"BOOKIE_ADD_ENTRY_BYTES\";\n+    public final static String BOOKIE_READ_ENTRY_BYTES = \"BOOKIE_READ_ENTRY_BYTES\";\n+    public final static String BOOKIE_ADD_ENTRY = \"BOOKIE_ADD_ENTRY\";\n+    public final static String BOOKIE_RECOVERY_ADD_ENTRY = \"BOOKIE_RECOVERY_ADD_ENTRY\";\n+    public final static String BOOKIE_READ_ENTRY = \"BOOKIE_READ_ENTRY\";\n+\n     // Journal Stats\n     public final static String JOURNAL_ADD_ENTRY = \"JOURNAL_ADD_ENTRY\";\n     public final static String JOURNAL_MEM_ADD_ENTRY = \"JOURNAL_MEM_ADD_ENTRY\";"},{"sha":"8b40853ae533fc545609dd541703473ad63d7626","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":67,"deletions":5,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/c181ea8aa409ed17f28e5b901ae33adc0faaf4be/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/c181ea8aa409ed17f28e5b901ae33adc0faaf4be/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FBookie.java?ref=c181ea8aa409ed17f28e5b901ae33adc0faaf4be","patch":"@@ -54,6 +54,7 @@\n import org.apache.bookkeeper.stats.Counter;\n import org.apache.bookkeeper.stats.Gauge;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n@@ -77,6 +78,11 @@\n \n import com.google.common.annotations.VisibleForTesting;\n \n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_ADD_ENTRY_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_READ_ENTRY_BYTES;\n+import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_RECOVERY_ADD_ENTRY;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_LEDGER_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.LD_INDEX_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.READ_BYTES;\n@@ -135,6 +141,13 @@ public class Bookie extends BookieCriticalThread {\n     // Expose Stats\n     private final Counter writeBytes;\n     private final Counter readBytes;\n+    // Bookie Operation Latency Stats\n+    private final OpStatsLogger addEntryStats;\n+    private final OpStatsLogger recoveryAddEntryStats;\n+    private final OpStatsLogger readEntryStats;\n+    // Bookie Operation Bytes Stats\n+    private final OpStatsLogger addBytesStats;\n+    private final OpStatsLogger readBytesStats;\n \n     public static class NoLedgerException extends IOException {\n         private static final long serialVersionUID = 1L;\n@@ -497,6 +510,11 @@ public Bookie(ServerConfiguration conf, StatsLogger statsLogger)\n         // Expose Stats\n         writeBytes = statsLogger.getCounter(WRITE_BYTES);\n         readBytes = statsLogger.getCounter(READ_BYTES);\n+        addEntryStats = statsLogger.getOpStatsLogger(BOOKIE_ADD_ENTRY);\n+        recoveryAddEntryStats = statsLogger.getOpStatsLogger(BOOKIE_RECOVERY_ADD_ENTRY);\n+        readEntryStats = statsLogger.getOpStatsLogger(BOOKIE_READ_ENTRY);\n+        addBytesStats = statsLogger.getOpStatsLogger(BOOKIE_ADD_ENTRY_BYTES);\n+        readBytesStats = statsLogger.getOpStatsLogger(BOOKIE_READ_ENTRY_BYTES);\n         // 1 : up, 0 : readonly\n         statsLogger.registerGauge(SERVER_STATUS, new Gauge<Number>() {\n             @Override\n@@ -1091,14 +1109,28 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n      */\n     public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n+        long requestNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        int entrySize = 0;\n         try {\n             LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n             synchronized (handle) {\n+                entrySize = entry.remaining();\n                 addEntryInternal(handle, entry, cb, ctx);\n             }\n+            success = true;\n         } catch (NoWritableLedgerDirException e) {\n             transitionToReadOnlyMode();\n             throw new IOException(e);\n+        } finally {\n+            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            if (success) {\n+                recoveryAddEntryStats.registerSuccessfulEvent(elapsedMSec);\n+                addBytesStats.registerSuccessfulEvent(entrySize);\n+            } else {\n+                recoveryAddEntryStats.registerFailedEvent(elapsedMSec);\n+                addBytesStats.registerFailedEvent(entrySize);\n+            }\n         }\n     }\n \n@@ -1108,18 +1140,32 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n      */\n     public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n+        long requestNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        int entrySize = 0;\n         try {\n             LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n             synchronized (handle) {\n                 if (handle.isFenced()) {\n                     throw BookieException\n                             .create(BookieException.Code.LedgerFencedException);\n                 }\n+                entrySize = entry.remaining();\n                 addEntryInternal(handle, entry, cb, ctx);\n             }\n+            success = true;\n         } catch (NoWritableLedgerDirException e) {\n             transitionToReadOnlyMode();\n             throw new IOException(e);\n+        } finally {\n+            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            if (success) {\n+                addEntryStats.registerSuccessfulEvent(elapsedMSec);\n+                addBytesStats.registerSuccessfulEvent(entrySize);\n+            } else {\n+                addEntryStats.registerFailedEvent(elapsedMSec);\n+                addBytesStats.registerFailedEvent(entrySize);\n+            }\n         }\n     }\n \n@@ -1155,11 +1201,27 @@ public Future<Boolean> fenceLedger(long ledgerId, byte[] masterKey) throws IOExc\n \n     public ByteBuffer readEntry(long ledgerId, long entryId)\n             throws IOException, NoLedgerException {\n-        LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n-        LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n-        ByteBuffer entry = handle.readEntry(entryId);\n-        readBytes.add(entry.remaining());\n-        return entry;\n+        long requestNanos = MathUtils.nowInNano();\n+        boolean success = false;\n+        int entrySize = 0;\n+        try {\n+            LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n+            LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n+            ByteBuffer entry = handle.readEntry(entryId);\n+            entrySize = entry.remaining();\n+            readBytes.add(entrySize);\n+            success = true;\n+            return entry;\n+        } finally {\n+            long elapsedMSec = MathUtils.elapsedMSec(requestNanos);\n+            if (success) {\n+                readEntryStats.registerSuccessfulEvent(elapsedMSec);\n+                readBytesStats.registerSuccessfulEvent(entrySize);\n+            } else {\n+                readEntryStats.registerFailedEvent(elapsedMSec);\n+                readBytesStats.registerFailedEvent(entrySize);\n+            }\n+        }\n     }\n \n     // The rest of the code is test stuff"}]}