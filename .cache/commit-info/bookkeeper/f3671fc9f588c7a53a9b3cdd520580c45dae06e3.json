{"sha":"f3671fc9f588c7a53a9b3cdd520580c45dae06e3","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OmYzNjcxZmM5ZjU4OGM3YTUzYTliM2NkZDUyMDU4MGM0NWRhZTA2ZTM=","commit":{"author":{"name":"Kishor Patil","email":"kpatil@yahoo-inc.com","date":"2017-03-22T23:54:42Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-22T23:54:42Z"},"message":"BOOKKEEPER-1003: Fix TestDiskChecker so it can be used on /dev/shm\n\nThe test generates a threshold which is negative if used on a disk where\nthe usable disk size is very close to the total disk size. A negative\nthreshold is invalid so the test fails in the wrong way. This fix stops\nthe threshold from going negative.\n\nFull disclosure, most of these changes were actually done by ivankelly  For this I am mostly just putting them back into open source.\n\nAuthor: Kishor Patil <kpatil@yahoo-inc.com>\n\nReviewers: Venkateswararao Jujjuri (JV) <vjujjuri@salesforce.com>, Sijie Guo <sijie@apache.org>\n\nCloses #107 from kishorvpatil/BOOKKEEPER-1003","tree":{"sha":"72f032f73ef69a56c2495dcc7ccf17c9cd9991f7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/72f032f73ef69a56c2495dcc7ccf17c9cd9991f7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/f3671fc9f588c7a53a9b3cdd520580c45dae06e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/f3671fc9f588c7a53a9b3cdd520580c45dae06e3","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/f3671fc9f588c7a53a9b3cdd520580c45dae06e3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/f3671fc9f588c7a53a9b3cdd520580c45dae06e3/comments","author":{"login":"kishorvpatil","id":6090397,"node_id":"MDQ6VXNlcjYwOTAzOTc=","avatar_url":"https://avatars.githubusercontent.com/u/6090397?v=4","gravatar_id":"","url":"https://api.github.com/users/kishorvpatil","html_url":"https://github.com/kishorvpatil","followers_url":"https://api.github.com/users/kishorvpatil/followers","following_url":"https://api.github.com/users/kishorvpatil/following{/other_user}","gists_url":"https://api.github.com/users/kishorvpatil/gists{/gist_id}","starred_url":"https://api.github.com/users/kishorvpatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kishorvpatil/subscriptions","organizations_url":"https://api.github.com/users/kishorvpatil/orgs","repos_url":"https://api.github.com/users/kishorvpatil/repos","events_url":"https://api.github.com/users/kishorvpatil/events{/privacy}","received_events_url":"https://api.github.com/users/kishorvpatil/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"32ebf0ad68f85daffdec571e28206339a4d09443","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/32ebf0ad68f85daffdec571e28206339a4d09443","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/32ebf0ad68f85daffdec571e28206339a4d09443"}],"stats":{"total":33,"additions":25,"deletions":8},"files":[{"sha":"2f4bbc54c5e844c218040aa2519f526f24935d6c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":25,"deletions":8,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/f3671fc9f588c7a53a9b3cdd520580c45dae06e3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/f3671fc9f588c7a53a9b3cdd520580c45dae06e3/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FTestDiskChecker.java?ref=f3671fc9f588c7a53a9b3cdd520580c45dae06e3","patch":"@@ -20,6 +20,7 @@\n import static org.junit.Assert.assertTrue;\n \n import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -43,8 +44,16 @@ public class TestDiskChecker {\n     final List<File> tempDirs = new ArrayList<File>();\n \n     @Before\n-    public void setup() {\n+    public void setup() throws IOException {\n         diskChecker = new DiskChecker(0.95f, 0.95f);\n+\n+        // Create at least one file so that target disk will never be empty\n+        File placeHolderDir = IOUtils.createTempDir(\"DiskCheck\", \"test-placeholder\");\n+        tempDirs.add(placeHolderDir);\n+        File placeHolder = new File(placeHolderDir, \"test\");\n+        FileOutputStream placeHolderStream = new FileOutputStream(placeHolder);\n+        placeHolderStream.write(new byte[100 * 1024]);\n+        placeHolderStream.close();\n     }\n \n     @After\n@@ -69,8 +78,8 @@ public void testCheckDiskFull() throws IOException {\n         File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        float threshold =\n-                (1f - ((float) usableSpace / (float) totalSpace)) * 0.5f;\n+        float threshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n+\n         diskChecker.setDiskSpaceThreshold(threshold, threshold);\n         diskChecker.checkDiskFull(file);\n     }\n@@ -80,10 +89,9 @@ public void testDiskWarnThresholdException() throws IOException {\n         File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        float diskSpaceThreshold = \n-                (1f - ((float) usableSpace / (float) totalSpace));\n-        float diskWarnThreshold =\n-                (1f - ((float) usableSpace / (float) totalSpace)) * 0.5f;\n+        float diskSpaceThreshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) * 1.5f);\n+        float diskWarnThreshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) * 0.5f);\n+\n         diskChecker.setDiskSpaceThreshold(diskSpaceThreshold, diskWarnThreshold);\n         diskChecker.checkDiskFull(file);\n     }\n@@ -97,7 +105,7 @@ public void testCheckDiskFullOnNonExistFile() throws IOException {\n         File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        float threshold = (1f - ((float) usableSpace / (float) totalSpace)) * 0.5f;\n+        float threshold = minMaxThreshold((1f - ((float) usableSpace / (float) totalSpace)) * 0.5f);\n         diskChecker.setDiskSpaceThreshold(threshold, threshold);\n         assertTrue(file.delete());\n         diskChecker.checkDiskFull(file);\n@@ -124,4 +132,13 @@ public void testCheckDiskErrorForDir() throws Exception {\n         child.mkdir();\n         diskChecker.checkDir(child);\n     }\n+\n+    private static float minMaxThreshold(float threshold) {\n+        final float minThreshold = 0.0000001f;\n+        final float maxThreshold = 0.999999f;\n+\n+        threshold = Math.min(threshold, maxThreshold);\n+        threshold = Math.max(threshold, minThreshold);\n+        return threshold;\n+    }\n }"}]}