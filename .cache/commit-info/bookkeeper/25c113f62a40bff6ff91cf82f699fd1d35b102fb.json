{"sha":"25c113f62a40bff6ff91cf82f699fd1d35b102fb","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjI1YzExM2Y2MmE0MGJmZjZmZjkxY2Y4MmY2OTlmZDFkMzViMTAyZmI=","commit":{"author":{"name":"Matteo Merli","email":"mmerli@yahoo-inc.com","date":"2017-05-04T18:54:13Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-05-04T18:54:13Z"},"message":"BOOKKEEPER-1046: Avoid long to Long conversion in OrderedSafeExecutor task submit\n\nWhen submitting tasks to an OrderedSafeExecutor, most of the time a ledger id is being passed. Given that the method accepts and Object, the primitive `long` is boxed into a `Long` allocated on the heap.\n\nAdded specific method overload to directly accept longs as the key in the OrderedSafeExecutor.\n\nAuthor: Matteo Merli <mmerli@yahoo-inc.com>\n\nReviewers: Enrico Olivelli <eolivelli@apache.org>\n\nCloses #136 from merlimat/executor-long-conversion","tree":{"sha":"92f4366ccf8465d422b1bb1720a49763bb49f324","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/92f4366ccf8465d422b1bb1720a49763bb49f324"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/25c113f62a40bff6ff91cf82f699fd1d35b102fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/25c113f62a40bff6ff91cf82f699fd1d35b102fb","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/25c113f62a40bff6ff91cf82f699fd1d35b102fb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/25c113f62a40bff6ff91cf82f699fd1d35b102fb/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"5d282dceae140577b97a12db5b2b531c7d84e985","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/5d282dceae140577b97a12db5b2b531c7d84e985","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/5d282dceae140577b97a12db5b2b531c7d84e985"}],"stats":{"total":34,"additions":30,"deletions":4},"files":[{"sha":"05bd10023c387c6950d3aad70cc0b9a8a740015c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":30,"deletions":4,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/25c113f62a40bff6ff91cf82f699fd1d35b102fb/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/25c113f62a40bff6ff91cf82f699fd1d35b102fb/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Futil%2FOrderedSafeExecutor.java?ref=25c113f62a40bff6ff91cf82f699fd1d35b102fb","patch":"@@ -258,7 +258,15 @@ ScheduledExecutorService chooseThread(Object orderingKey) {\n         }\n \n         return threads[MathUtils.signSafeMod(orderingKey.hashCode(), threads.length)];\n+    }\n+\n+    ExecutorService chooseThread(long orderingKey) {\n+        // skip hashcode generation in this special case\n+        if (threads.length == 1) {\n+            return threads[0];\n+        }\n \n+        return threads[MathUtils.signSafeMod(orderingKey, threads.length)];\n     }\n \n     private SafeRunnable timedRunnable(SafeRunnable r) {\n@@ -383,13 +391,31 @@ public ScheduledFuture<?> scheduleWithFixedDelayOrdered(Object orderingKey, Safe\n         return chooseThread(orderingKey).scheduleWithFixedDelay(command, initialDelay, delay, unit);\n     }\n \n-    private long getThreadID(Object orderingKey) {\n+    /**\n+     * schedules a one time action to execute with an ordering guarantee on the key\n+     * @param orderingKey\n+     * @param r\n+     */\n+    public void submitOrdered(long orderingKey, SafeRunnable r) {\n+        chooseThread(orderingKey).submit(r);\n+    }\n+\n+    /**\n+     * schedules a one time action to execute with an ordering guarantee on the key\n+     * @param orderingKey\n+     * @param r\n+     */\n+    public void submitOrdered(int orderingKey, SafeRunnable r) {\n+        chooseThread(orderingKey).submit(r);\n+    }\n+\n+    private long getThreadID(long orderingKey) {\n         // skip hashcode generation in this special case\n         if (threadIds.length == 1) {\n             return threadIds[0];\n         }\n \n-        return threadIds[MathUtils.signSafeMod(orderingKey.hashCode(), threadIds.length)];\n+        return threadIds[MathUtils.signSafeMod(orderingKey, threadIds.length)];\n     }\n \n     public void shutdown() {\n@@ -415,14 +441,14 @@ public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedE\n         private final Logger LOG = LoggerFactory.getLogger(OrderedSafeGenericCallback.class);\n \n         private final OrderedSafeExecutor executor;\n-        private final Object orderingKey;\n+        private final long orderingKey;\n \n         /**\n          * @param executor The executor on which to run the callback\n          * @param orderingKey Key used to decide which thread the callback\n          *                    should run on.\n          */\n-        public OrderedSafeGenericCallback(OrderedSafeExecutor executor, Object orderingKey) {\n+        public OrderedSafeGenericCallback(OrderedSafeExecutor executor, long orderingKey) {\n             this.executor = executor;\n             this.orderingKey = orderingKey;\n         }"}]}