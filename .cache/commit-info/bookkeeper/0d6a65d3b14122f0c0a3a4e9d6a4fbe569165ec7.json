{"sha":"0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","node_id":"MDY6Q29tbWl0NDc4NTkyNTI2OjBkNmE2NWQzYjE0MTIyZjBjMGEzYTRlOWQ2YTRmYmU1NjkxNjVlYzc=","commit":{"author":{"name":"fpj","email":"fpj@apache.org","date":"2015-01-16T14:57:03Z"},"committer":{"name":"fpj","email":"fpj@apache.org","date":"2015-01-16T14:57:03Z"},"message":"BOOKKEEPER-827 change throttle in GarbageCollector to use either \"by entry\" or \"by byte\" (Jia Zhai via fpj)","tree":{"sha":"beb6378c05394a980400d33352067f250983698f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/trees/beb6378c05394a980400d33352067f250983698f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/git/commits/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"99b40326fed855906b709cbe1f562f45bda79e5d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/commits/99b40326fed855906b709cbe1f562f45bda79e5d","html_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/commit/99b40326fed855906b709cbe1f562f45bda79e5d"}],"stats":{"total":141,"additions":133,"deletions":8},"files":[{"sha":"a61fbb4929464a672683401c1c980dc0a6bed8bc","filename":"CHANGES.txt","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/CHANGES.txt","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/CHANGES.txt","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/CHANGES.txt?ref=0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","patch":"@@ -46,6 +46,9 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-634: Provide admin tool to rename bookie identifier in ledger metadata (rakeshr via ivank)\n \n+      BOOKKEEPER-827: change throttle in GarbageCollector to use \n+      either \"by entry\" or \"by byte\" (Jia Zhai via fpj)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"53db095869f6d2186df1dd8d8cacfe21957ad63d","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fconf%2Fbk_server.conf","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fconf%2Fbk_server.conf","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fconf%2Fbk_server.conf?ref=0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","patch":"@@ -109,6 +109,15 @@ ledgerDirectories=/tmp/bk-data\n # Set the rate at which compaction will readd entries. The unit is adds per second.\n #compactionRate=1000\n \n+# Throttle compaction by bytes or by entries. \n+#isThrottleByBytes=false\n+\n+# Set the rate at which compaction will readd entries. The unit is adds per second.\n+#compactionRateByEntries=1000\n+\n+# Set the rate at which compaction will readd entries. The unit is bytes added per second.\n+#compactionRateByBytes=1000000\n+\n # Max file size of journal file, in mega bytes\n # A new journal file will be created when the old one reaches the file size limitation\n #"},{"sha":"a1f044ff861d983fa53ed989f9cdf672ce6203fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":34,"deletions":4,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FGarbageCollectorThread.java?ref=0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","patch":"@@ -69,8 +69,10 @@ public class GarbageCollectorThread extends BookieThread {\n     long lastMinorCompactionTime;\n     long lastMajorCompactionTime;\n \n+    final boolean isThrottleByBytes;\n     final int maxOutstandingRequests;\n-    final int compactionRate;\n+    final int compactionRateByEntries;\n+    final int compactionRateByBytes;\n     final CompactionScannerFactory scannerFactory;\n \n     // Entry Logger Handle\n@@ -106,6 +108,29 @@ private static class Offset {\n             this.offset = offset;\n         }\n     }\n+ \n+    private static class Throttler {\n+        final RateLimiter rateLimiter;\n+        final boolean isThrottleByBytes;\n+        final int compactionRateByBytes;\n+        final int compactionRateByEntries;\n+\n+        Throttler(boolean isThrottleByBytes, \n+                  int compactionRateByBytes, \n+                  int compactionRateByEntries) {\n+            this.isThrottleByBytes  = isThrottleByBytes;\n+            this.compactionRateByBytes = compactionRateByBytes;\n+            this.compactionRateByEntries = compactionRateByEntries;\n+            this.rateLimiter = RateLimiter.create(this.isThrottleByBytes ? \n+                                                  this.compactionRateByBytes : \n+                                                  this.compactionRateByEntries);\n+        }\n+        \n+        // acquire. if bybytes: bytes of this entry; if byentries: 1.\n+        void acquire(int permits) {\n+            rateLimiter.acquire(this.isThrottleByBytes ? permits : 1);\n+        }\n+    }\n \n     /**\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n@@ -114,7 +139,10 @@ class CompactionScannerFactory implements EntryLogger.EntryLogListener {\n         List<Offset> offsets = new ArrayList<Offset>();\n \n         EntryLogScanner newScanner(final EntryLogMetadata meta) {\n-            final RateLimiter rateLimiter = RateLimiter.create(compactionRate);\n+            final Throttler throttler = new Throttler (isThrottleByBytes,\n+                                                       compactionRateByBytes, \n+                                                       compactionRateByEntries);\n+\n             return new EntryLogScanner() {\n                 @Override\n                 public boolean accept(long ledgerId) {\n@@ -124,7 +152,7 @@ public boolean accept(long ledgerId) {\n                 @Override\n                 public void process(final long ledgerId, long offset, ByteBuffer entry)\n                         throws IOException {\n-                    rateLimiter.acquire();\n+                    throttler.acquire(entry.remaining());\n                     synchronized (CompactionScannerFactory.this) {\n                         if (offsets.size() > maxOutstandingRequests) {\n                             waitEntrylogFlushed();\n@@ -207,8 +235,10 @@ public GarbageCollectorThread(ServerConfiguration conf,\n         this.activeLedgers = activeLedgers;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n+        this.isThrottleByBytes = conf.getIsThrottleByBytes();\n         this.maxOutstandingRequests = conf.getCompactionMaxOutstandingRequests();\n-        this.compactionRate = conf.getCompactionRate();\n+        this.compactionRateByEntries  = conf.getCompactionRateByEntries();\n+        this.compactionRateByBytes = conf.getCompactionRateByBytes();\n         this.scannerFactory = new CompactionScannerFactory();\n         entryLogger.addListener(this.scannerFactory);\n "},{"sha":"cd9f7a0982c5ce4d0e414331065165789b2ab2c4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":71,"deletions":2,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fconf%2FServerConfiguration.java?ref=0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","patch":"@@ -38,9 +38,12 @@ public class ServerConfiguration extends AbstractConfiguration {\n     protected final static String MINOR_COMPACTION_THRESHOLD = \"minorCompactionThreshold\";\n     protected final static String MAJOR_COMPACTION_INTERVAL = \"majorCompactionInterval\";\n     protected final static String MAJOR_COMPACTION_THRESHOLD = \"majorCompactionThreshold\";\n+    protected final static String IS_THROTTLE_BY_BYTES = \"isThrottleByBytes\";\n     protected final static String COMPACTION_MAX_OUTSTANDING_REQUESTS\n         = \"compactionMaxOutstandingRequests\";\n     protected final static String COMPACTION_RATE = \"compactionRate\";\n+    protected final static String COMPACTION_RATE_BY_ENTRIES = \"compactionRateByEntries\";\n+    protected final static String COMPACTION_RATE_BY_BYTES = \"compactionRateByBytes\";\n \n     // Gc Parameters\n     protected final static String GC_WAIT_TIME = \"gcWaitTime\";\n@@ -1242,6 +1245,28 @@ public boolean isForceReadOnlyBookie() {\n         return getBoolean(FORCE_READ_ONLY_BOOKIE, false);\n     }\n \n+    /**\n+     * Get whether use bytes to throttle garbage collector compaction or not\n+     *\n+     * @return true  - use Bytes, \n+     *         false - use Entries.\n+     */\n+    public boolean getIsThrottleByBytes() {\n+        return getBoolean(IS_THROTTLE_BY_BYTES, false);\n+    }\n+\n+    /**\n+     * Set whether use bytes to throttle garbage collector compaction or not\n+     *\n+     * @param byBytes true to use by bytes; false to use by entries\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setIsThrottleByBytes(boolean byBytes) {\n+        setProperty(IS_THROTTLE_BY_BYTES, byBytes);\n+        return this;\n+    }\n+\n     /**\n      * Get the maximum number of entries which can be compacted without flushing.\n      * Default is 100,000.\n@@ -1272,20 +1297,22 @@ public ServerConfiguration setCompactionMaxOutstandingRequests(int maxOutstandin\n         setProperty(COMPACTION_MAX_OUTSTANDING_REQUESTS, maxOutstandingRequests);\n         return this;\n     }\n-\n+    \n     /**\n      * Get the rate of compaction adds. Default is 1,000.\n      *\n      * @return rate of compaction (adds per second)\n+     * @deprecated  replaced by {@link #getCompactionRateByEntries()}\n      */\n+    @Deprecated\n     public int getCompactionRate() {\n         return getInt(COMPACTION_RATE, 1000);\n     }\n \n     /**\n      * Set the rate of compaction adds.\n      *\n-     * @param rate rate of compaction adds (adds per second)\n+     * @param rate rate of compaction adds (adds entries per second)\n      *\n      * @return ServerConfiguration\n      */\n@@ -1294,6 +1321,48 @@ public ServerConfiguration setCompactionRate(int rate) {\n         return this;\n     }\n \n+    /**\n+     * Get the rate of compaction adds. Default is 1,000.\n+     *\n+     * @return rate of compaction (adds entries per second)\n+     */\n+    public int getCompactionRateByEntries() {\n+        return getInt(COMPACTION_RATE_BY_ENTRIES, getCompactionRate());\n+    }\n+\n+    /**\n+     * Set the rate of compaction adds.\n+     *\n+     * @param rate rate of compaction adds (adds entries per second)\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionRateByEntries(int rate) {\n+        setProperty(COMPACTION_RATE_BY_ENTRIES, rate);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the rate of compaction adds. Default is 1,000,000.\n+     *\n+     * @return rate of compaction (adds bytes per second)\n+     */\n+    public int getCompactionRateByBytes() {\n+        return getInt(COMPACTION_RATE_BY_BYTES, 1000000);\n+    }\n+\n+    /**\n+     * Set the rate of compaction adds.\n+     *\n+     * @param rate rate of compaction adds (adds bytes per second)\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionRateByBytes(int rate) {\n+        setProperty(COMPACTION_RATE_BY_BYTES, rate);\n+        return this;\n+    }\n+\n     /**\n      * Should we remove pages from page cache after force write\n      *"},{"sha":"6c9c4a787892e72eecf90109ad360e6e846052d7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/blob/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/bookkeeper/raw/0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/bookkeeper/contents/bookkeeper-server%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fbookkeeper%2Fbookie%2FCompactionTest.java?ref=0d6a65d3b14122f0c0a3a4e9d6a4fbe569165ec7","patch":"@@ -29,6 +29,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.Arrays;\n+import java.util.Collection;\n \n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerEntry;\n@@ -49,15 +51,25 @@\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import static org.junit.Assert.*;\n-\n /**\n  * This class tests the entry log compaction functionality.\n  */\n+@RunWith(Parameterized.class)\n public class CompactionTest extends BookKeeperClusterTestCase {\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][] {{true}, {false}});\n+    }\n+\n+    private boolean isThrottleByBytes; \n+   \n     private final static Logger LOG = LoggerFactory.getLogger(CompactionTest.class);\n     DigestType digestType;\n \n@@ -73,9 +85,10 @@ public class CompactionTest extends BookKeeperClusterTestCase {\n \n     String msg;\n \n-    public CompactionTest() {\n+    public CompactionTest(boolean isByBytes) {\n         super(NUM_BOOKIES);\n \n+        this.isThrottleByBytes = isByBytes;\n         this.digestType = DigestType.CRC32;\n \n         numEntries = 100;\n@@ -106,6 +119,7 @@ public void setUp() throws Exception {\n         baseConf.setMajorCompactionInterval(majorCompactionInterval);\n         baseConf.setEntryLogFilePreAllocationEnabled(false);\n         baseConf.setSortedLedgerStorageEnabled(false);\n+        baseConf.setIsThrottleByBytes(this.isThrottleByBytes);\n \n         super.setUp();\n     }"}]}